   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2557                     ; 56 void spi_init(void)
2557                     ; 57 {
2559                     .text:	section	.text,new
2560  e237               _spi_init:
2562  e237 88            	push	a
2563       00000001      OFST:	set	1
2566                     ; 76   PC_ODR |= (uint8_t)0x02;    // 0b00000010 SI=0, SCK=0, -CS=1
2568  e238 7212500a      	bset	_PC_ODR,#1
2569                     ; 77   PE_ODR &= (uint8_t)(~0x20); // 0b00100000 -RESET=0
2571  e23c 721b5014      	bres	_PE_ODR,#5
2572                     ; 80   for(i=0; i<5; i++) wait_timer((uint16_t)50000); // wait 250ms
2574  e240 0f01          	clr	(OFST+0,sp)
2576  e242               L7461:
2579  e242 aec350        	ldw	x,#50000
2580  e245 cde40a        	call	_wait_timer
2584  e248 0c01          	inc	(OFST+0,sp)
2588  e24a 7b01          	ld	a,(OFST+0,sp)
2589  e24c a105          	cp	a,#5
2590  e24e 25f2          	jrult	L7461
2591                     ; 83   PE_ODR |= (uint8_t)0x20; // 0b00100000 -RESET=1
2593  e250 721a5014      	bset	_PE_ODR,#5
2594                     ; 86   wait_timer((uint16_t)50000); // Wait 50ms
2596  e254 aec350        	ldw	x,#50000
2597  e257 cde40a        	call	_wait_timer
2599                     ; 101 }
2602  e25a 84            	pop	a
2603  e25b 81            	ret	
2645                     ; 104 void SpiWriteByte(uint8_t nByte)
2645                     ; 105 {
2646                     .text:	section	.text,new
2647  e25c               _SpiWriteByte:
2649  e25c 88            	push	a
2650  e25d 88            	push	a
2651       00000001      OFST:	set	1
2654                     ; 108   uint8_t bitnum = (uint8_t)0x80;                // Point at MSB
2656  e25e a680          	ld	a,#128
2657  e260 6b01          	ld	(OFST+0,sp),a
2659  e262               L3761:
2660                     ; 110     if (nByte & bitnum) PC_ODR |= (uint8_t)0x08; // If bit is 1 then 
2662  e262 7b02          	ld	a,(OFST+1,sp)
2663  e264 1501          	bcp	a,(OFST+0,sp)
2664  e266 2706          	jreq	L1071
2667  e268 7216500a      	bset	_PC_ODR,#3
2669  e26c 2004          	jra	L3071
2670  e26e               L1071:
2671                     ; 112     else PC_ODR &= (uint8_t)(~0x08);             // else SPI SO low
2673  e26e 7217500a      	bres	_PC_ODR,#3
2674  e272               L3071:
2675                     ; 114     nop();
2678  e272 9d            	nop	
2680                     ; 115     PC_ODR |= (uint8_t)0x04;                     // SCK high
2683  e273 7214500a      	bset	_PC_ODR,#2
2684                     ; 116     nop();
2687  e277 9d            	nop	
2689                     ; 117     PC_ODR &= (uint8_t)(~0x04);                  // SCK low
2692  e278 7215500a      	bres	_PC_ODR,#2
2693                     ; 119     bitnum = (uint8_t)(bitnum >> 1);             // Shift bitnum right one place
2695  e27c 0401          	srl	(OFST+0,sp)
2697                     ; 109   while(bitnum != 0) {
2699  e27e 26e2          	jrne	L3761
2700                     ; 123   PC_ODR &= (uint8_t)(~0x08);                    // SPI SO low on exit
2702  e280 7217500a      	bres	_PC_ODR,#3
2703                     ; 124 }
2706  e284 85            	popw	x
2707  e285 81            	ret	
2766                     ; 127 void SpiWriteChunk(const uint8_t* pChunk, uint16_t nBytes)
2766                     ; 128 {
2767                     .text:	section	.text,new
2768  e286               _SpiWriteChunk:
2770  e286 89            	pushw	x
2771  e287 89            	pushw	x
2772       00000002      OFST:	set	2
2775  e288 202c          	jra	L3371
2776  e28a               L1371:
2777                     ; 133     bitnum = (uint8_t)0x80;                          // Point at MSB
2779  e28a a680          	ld	a,#128
2780  e28c 6b02          	ld	(OFST+0,sp),a
2782                     ; 134     OutByte = *pChunk++;
2784  e28e 1e03          	ldw	x,(OFST+1,sp)
2785  e290 f6            	ld	a,(x)
2786  e291 5c            	incw	x
2787  e292 1f03          	ldw	(OFST+1,sp),x
2788  e294 6b01          	ld	(OFST-1,sp),a
2791  e296 201a          	jra	L3471
2792  e298               L7371:
2793                     ; 137       if (OutByte & bitnum) PC_ODR |= (uint8_t)0x08; // If bit is 1 then
2795  e298 1502          	bcp	a,(OFST+0,sp)
2796  e29a 2706          	jreq	L7471
2799  e29c 7216500a      	bset	_PC_ODR,#3
2801  e2a0 2004          	jra	L1571
2802  e2a2               L7471:
2803                     ; 139       else PC_ODR &= (uint8_t)(~0x08);               // else SPI SO low
2805  e2a2 7217500a      	bres	_PC_ODR,#3
2806  e2a6               L1571:
2807                     ; 141       nop();
2810  e2a6 9d            	nop	
2812                     ; 142       PC_ODR |= (uint8_t)0x04;                       // SCK high
2815  e2a7 7214500a      	bset	_PC_ODR,#2
2816                     ; 143       nop();
2819  e2ab 9d            	nop	
2821                     ; 144       PC_ODR &= (uint8_t)(~0x04);                    // SCK low
2824  e2ac 7215500a      	bres	_PC_ODR,#2
2825                     ; 146       bitnum = (uint8_t)(bitnum >> 1);               // Shift bitnum right one place
2827  e2b0 0402          	srl	(OFST+0,sp)
2829  e2b2               L3471:
2830                     ; 136     while(bitnum != 0) {
2832  e2b2 0d02          	tnz	(OFST+0,sp)
2833  e2b4 26e2          	jrne	L7371
2834  e2b6               L3371:
2835                     ; 132   while (nBytes--) {
2837  e2b6 1e07          	ldw	x,(OFST+5,sp)
2838  e2b8 5a            	decw	x
2839  e2b9 1f07          	ldw	(OFST+5,sp),x
2840  e2bb 5c            	incw	x
2841  e2bc 26cc          	jrne	L1371
2842                     ; 151   PC_ODR &= (uint8_t)(~0x08);                        // SPI SO low on exit
2844  e2be 7217500a      	bres	_PC_ODR,#3
2845                     ; 152 }
2848  e2c2 5b04          	addw	sp,#4
2849  e2c4 81            	ret	
2891                     ; 155 uint8_t SpiReadByte(void)
2891                     ; 156 {
2892                     .text:	section	.text,new
2893  e2c5               _SpiReadByte:
2895  e2c5 89            	pushw	x
2896       00000002      OFST:	set	2
2899                     ; 161   uint8_t bitnum = (uint8_t)0x80;                 // Point at MSB
2901  e2c6 a680          	ld	a,#128
2902  e2c8 6b02          	ld	(OFST+0,sp),a
2904                     ; 162   uint8_t InByte = 0;
2906  e2ca 0f01          	clr	(OFST-1,sp)
2909  e2cc 2019          	jra	L5771
2910  e2ce               L1771:
2911                     ; 166     if (PC_IDR & (uint8_t)0x10) InByte |= bitnum; // SPI incoming bit = 1
2913  e2ce 7209500b04    	btjf	_PC_IDR,#4,L1002
2916  e2d3 1a01          	or	a,(OFST-1,sp)
2918  e2d5 2003          	jra	L3002
2919  e2d7               L1002:
2920                     ; 167     else InByte &= (uint8_t)(~bitnum);            // SPI incoming bit = 0
2922  e2d7 43            	cpl	a
2923  e2d8 1401          	and	a,(OFST-1,sp)
2924  e2da               L3002:
2925  e2da 6b01          	ld	(OFST-1,sp),a
2927                     ; 169     PC_ODR |= (uint8_t)0x04;                      // SCK high
2929  e2dc 7214500a      	bset	_PC_ODR,#2
2930                     ; 170     nop();
2933  e2e0 9d            	nop	
2935                     ; 171     PC_ODR &= (uint8_t)(~0x04);                   // SCK low
2938  e2e1 7215500a      	bres	_PC_ODR,#2
2939                     ; 173     bitnum = (uint8_t)(bitnum >> 1);              // Shift bitnum right one place
2941  e2e5 0402          	srl	(OFST+0,sp)
2943  e2e7               L5771:
2944                     ; 163   while(bitnum != 0) {
2946  e2e7 7b02          	ld	a,(OFST+0,sp)
2947  e2e9 26e3          	jrne	L1771
2948                     ; 177   return InByte;
2950  e2eb 7b01          	ld	a,(OFST-1,sp)
2953  e2ed 85            	popw	x
2954  e2ee 81            	ret	
3013                     ; 181 void SpiReadChunk(uint8_t* pChunk, uint16_t nBytes)
3013                     ; 182 {
3014                     .text:	section	.text,new
3015  e2ef               _SpiReadChunk:
3017  e2ef 89            	pushw	x
3018  e2f0 89            	pushw	x
3019       00000002      OFST:	set	2
3022                     ; 190   PC_ODR &= (uint8_t)(~0x08);                        // SO low
3024  e2f1 7217500a      	bres	_PC_ODR,#3
3026  e2f5 202d          	jra	L3302
3027  e2f7               L1302:
3028                     ; 193     bitnum = (uint8_t)0x80;                          // Point at MSBif
3030  e2f7 a680          	ld	a,#128
3031  e2f9 6b02          	ld	(OFST+0,sp),a
3033                     ; 194     InByte = 0;
3035  e2fb 0f01          	clr	(OFST-1,sp)
3038  e2fd 2019          	jra	L3402
3039  e2ff               L7302:
3040                     ; 199       if (PC_IDR & (uint8_t)0x10) InByte |= bitnum;  // SPI incoming bit = 1
3042  e2ff 7209500b04    	btjf	_PC_IDR,#4,L7402
3045  e304 1a01          	or	a,(OFST-1,sp)
3047  e306 2003          	jra	L1502
3048  e308               L7402:
3049                     ; 200       else InByte &= (uint8_t)(~bitnum);             // SPI incoming bit = 0
3051  e308 43            	cpl	a
3052  e309 1401          	and	a,(OFST-1,sp)
3053  e30b               L1502:
3054  e30b 6b01          	ld	(OFST-1,sp),a
3056                     ; 202       PC_ODR |= (uint8_t)0x04;                       // SCK high
3058  e30d 7214500a      	bset	_PC_ODR,#2
3059                     ; 203       nop();
3062  e311 9d            	nop	
3064                     ; 204       PC_ODR &= (uint8_t)(~0x04);                    // SCK low
3067  e312 7215500a      	bres	_PC_ODR,#2
3068                     ; 206       bitnum = (uint8_t)(bitnum >> 1);               // Shift bitnum right one place
3070  e316 0402          	srl	(OFST+0,sp)
3072  e318               L3402:
3073                     ; 195     while(bitnum != 0) {
3075  e318 7b02          	ld	a,(OFST+0,sp)
3076  e31a 26e3          	jrne	L7302
3077                     ; 210   *pChunk++ = InByte;                                // Save byte in the buffer
3079  e31c 1e03          	ldw	x,(OFST+1,sp)
3080  e31e 7b01          	ld	a,(OFST-1,sp)
3081  e320 f7            	ld	(x),a
3082  e321 5c            	incw	x
3083  e322 1f03          	ldw	(OFST+1,sp),x
3084  e324               L3302:
3085                     ; 192   while (nBytes--) {
3087  e324 1e07          	ldw	x,(OFST+5,sp)
3088  e326 5a            	decw	x
3089  e327 1f07          	ldw	(OFST+5,sp),x
3090  e329 5c            	incw	x
3091  e32a 26cb          	jrne	L1302
3092                     ; 212 }
3095  e32c 5b04          	addw	sp,#4
3096  e32e 81            	ret	
3109                     	xref	_wait_timer
3110                     	xdef	_SpiReadChunk
3111                     	xdef	_SpiReadByte
3112                     	xdef	_SpiWriteChunk
3113                     	xdef	_SpiWriteByte
3114                     	xdef	_spi_init
3133                     	end
