   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
 508                     ; 77 int16_t mqtt_sync(struct mqtt_client *client)
 508                     ; 78 {
 510                     .text:	section	.text,new
 511  cfd5               _mqtt_sync:
 513  cfd5 89            	pushw	x
 514  cfd6 89            	pushw	x
 515       00000002      OFST:	set	2
 518                     ; 86     if ((uip_newdata() || uip_acked()) && uip_len > 0) {
 520  cfd7 720202c405    	btjt	_uip_flags,#1,L172
 522  cfdc 720102c411    	btjf	_uip_flags,#0,L762
 523  cfe1               L172:
 525  cfe1 ce036f        	ldw	x,_uip_len
 526  cfe4 270c          	jreq	L762
 527                     ; 87       err = __mqtt_recv(client);
 529  cfe6 1e03          	ldw	x,(OFST+1,sp)
 530  cfe8 cdd6fb        	call	___mqtt_recv
 532  cfeb 1f01          	ldw	(OFST-1,sp),x
 534                     ; 88       if (err != MQTT_OK) {
 536  cfed a30001        	cpw	x,#1
 537                     ; 89         return err;
 540  cff0 2616          	jrne	L772
 541  cff2               L762:
 542                     ; 98     err = __mqtt_send(client);
 544  cff2 1e03          	ldw	x,(OFST+1,sp)
 545  cff4 cdd51b        	call	___mqtt_send
 547  cff7 1f01          	ldw	(OFST-1,sp),x
 549                     ; 101     if (err == MQTT_OK) {
 551  cff9 a30001        	cpw	x,#1
 552  cffc 2606          	jrne	L572
 553                     ; 102       MQTT_error_status = 1;
 555  cffe 3501029b      	mov	_MQTT_error_status,#1
 557  d002 2004          	jra	L772
 558  d004               L572:
 559                     ; 104     else MQTT_error_status = 0;
 561  d004 725f029b      	clr	_MQTT_error_status
 562  d008               L772:
 563                     ; 105     return err;
 567  d008 5b04          	addw	sp,#4
 568  d00a 81            	ret	
 631                     ; 109 uint16_t __mqtt_next_pid(struct mqtt_client *client)
 631                     ; 110 {
 632                     .text:	section	.text,new
 633  d00b               ___mqtt_next_pid:
 635  d00b 89            	pushw	x
 636  d00c 5204          	subw	sp,#4
 637       00000004      OFST:	set	4
 640                     ; 112     int16_t pid_exists = 0;
 642                     ; 113     if (client->pid_lfsr == 0) client->pid_lfsr = 163u;
 644  d00e e601          	ld	a,(1,x)
 645  d010 fa            	or	a,(x)
 646  d011 2605          	jrne	L533
 649  d013 90ae00a3      	ldw	y,#163
 650  d017 ff            	ldw	(x),y
 651  d018               L533:
 652                     ; 119         unsigned lsb = client->pid_lfsr & 1;
 654  d018 1e05          	ldw	x,(OFST+1,sp)
 655  d01a fe            	ldw	x,(x)
 656  d01b 01            	rrwa	x,a
 657  d01c a401          	and	a,#1
 658  d01e 5f            	clrw	x
 659  d01f 02            	rlwa	x,a
 660  d020 1f03          	ldw	(OFST-1,sp),x
 661  d022 01            	rrwa	x,a
 663                     ; 120         (client->pid_lfsr) >>= 1;
 665  d023 1e05          	ldw	x,(OFST+1,sp)
 666  d025 74            	srl	(x)
 667  d026 6601          	rrc	(1,x)
 668                     ; 121         if (lsb) client->pid_lfsr ^= 0xB400u;
 670  d028 1e03          	ldw	x,(OFST-1,sp)
 671  d02a 2706          	jreq	L343
 674  d02c 1e05          	ldw	x,(OFST+1,sp)
 675  d02e f6            	ld	a,(x)
 676  d02f a8b4          	xor	a,#180
 677  d031 f7            	ld	(x),a
 678  d032               L343:
 679                     ; 124         pid_exists = 0;
 681  d032 5f            	clrw	x
 682  d033 1f03          	ldw	(OFST-1,sp),x
 684                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 686  d035 1e05          	ldw	x,(OFST+1,sp)
 687  d037 ee24          	ldw	x,(36,x)
 689  d039 201b          	jra	L153
 690  d03b               L543:
 691                     ; 126             if (curr->packet_id == client->pid_lfsr) {
 693  d03b 1e01          	ldw	x,(OFST-3,sp)
 694  d03d 1605          	ldw	y,(OFST+1,sp)
 695  d03f ee0a          	ldw	x,(10,x)
 696  d041 90f3          	cpw	x,(y)
 697  d043 260f          	jrne	L553
 698                     ; 127                 pid_exists = 1;
 700  d045 ae0001        	ldw	x,#1
 701  d048 1f03          	ldw	(OFST-1,sp),x
 703                     ; 128                 break;
 704  d04a               L733:
 705                     ; 132     } while(pid_exists);
 707  d04a 1e03          	ldw	x,(OFST-1,sp)
 708  d04c 26ca          	jrne	L533
 709                     ; 134     return client->pid_lfsr;
 711  d04e 1e05          	ldw	x,(OFST+1,sp)
 712  d050 fe            	ldw	x,(x)
 715  d051 5b06          	addw	sp,#6
 716  d053 81            	ret	
 717  d054               L553:
 718                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 720  d054 1e01          	ldw	x,(OFST-3,sp)
 721  d056               L153:
 722  d056 1d000c        	subw	x,#12
 723  d059 1f01          	ldw	(OFST-3,sp),x
 727  d05b 1e05          	ldw	x,(OFST+1,sp)
 728  d05d ee2a          	ldw	x,(42,x)
 729  d05f 1301          	cpw	x,(OFST-3,sp)
 730  d061 23d8          	jrule	L543
 731  d063 20e5          	jra	L733
 815                     ; 138 int16_t mqtt_init(struct mqtt_client *client,
 815                     ; 139                uint8_t *sendbuf, uint16_t sendbufsz,
 815                     ; 140                uint8_t *recvbuf, uint16_t recvbufsz,
 815                     ; 141                void (*publish_response_callback)(void** state,struct mqtt_response_publish *publish))
 815                     ; 142 {
 816                     .text:	section	.text,new
 817  d065               _mqtt_init:
 819  d065 89            	pushw	x
 820       00000000      OFST:	set	0
 823                     ; 143     if (client == NULL || sendbuf == NULL || recvbuf == NULL) {
 825  d066 5d            	tnzw	x
 826  d067 2708          	jreq	L124
 828  d069 1e05          	ldw	x,(OFST+5,sp)
 829  d06b 2704          	jreq	L124
 831  d06d 1e09          	ldw	x,(OFST+9,sp)
 832  d06f 2605          	jrne	L714
 833  d071               L124:
 834                     ; 144       return MQTT_ERROR_NULLPTR;
 836  d071 ae8001        	ldw	x,#32769
 838  d074 2044          	jra	L22
 839  d076               L714:
 840                     ; 147     mqtt_mq_init(&client->mq, sendbuf, sendbufsz);
 842  d076 1e07          	ldw	x,(OFST+7,sp)
 843  d078 89            	pushw	x
 844  d079 1e07          	ldw	x,(OFST+7,sp)
 845  d07b 89            	pushw	x
 846  d07c 1e05          	ldw	x,(OFST+5,sp)
 847  d07e 1c0022        	addw	x,#34
 848  d081 cde12c        	call	_mqtt_mq_init
 850  d084 5b04          	addw	sp,#4
 851                     ; 149     client->recv_buffer.mem_start = recvbuf;
 853  d086 1e01          	ldw	x,(OFST+1,sp)
 854  d088 1609          	ldw	y,(OFST+9,sp)
 855  d08a ef1a          	ldw	(26,x),y
 856                     ; 150     client->recv_buffer.mem_size = recvbufsz;
 858  d08c 160b          	ldw	y,(OFST+11,sp)
 859  d08e ef1c          	ldw	(28,x),y
 860                     ; 151     client->recv_buffer.curr = client->recv_buffer.mem_start;
 862  d090 9093          	ldw	y,x
 863  d092 90ee1a        	ldw	y,(26,y)
 864  d095 ef1e          	ldw	(30,x),y
 865                     ; 152     client->recv_buffer.curr_sz = client->recv_buffer.mem_size;
 867  d097 9093          	ldw	y,x
 868  d099 90ee1c        	ldw	y,(28,y)
 869  d09c ef20          	ldw	(32,x),y
 870                     ; 154     client->error = MQTT_ERROR_CONNECT_NOT_CALLED;
 872  d09e 90ae800f      	ldw	y,#32783
 873  d0a2 ef0a          	ldw	(10,x),y
 874                     ; 155     client->response_timeout = 30;
 876  d0a4 90ae001e      	ldw	y,#30
 877  d0a8 ef0c          	ldw	(12,x),y
 878                     ; 156     client->number_of_timeouts = 0;
 880  d0aa 905f          	clrw	y
 881  d0ac ef0e          	ldw	(14,x),y
 882                     ; 157     client->publish_response_callback = publish_response_callback;
 884  d0ae 160d          	ldw	y,(OFST+13,sp)
 885  d0b0 ef10          	ldw	(16,x),y
 886                     ; 158     client->pid_lfsr = 0;
 888  d0b2 905f          	clrw	y
 889  d0b4 ff            	ldw	(x),y
 890                     ; 159     client->send_offset = 0;
 892  d0b5 ef04          	ldw	(4,x),y
 893                     ; 161     return MQTT_OK;
 895  d0b7 ae0001        	ldw	x,#1
 897  d0ba               L22:
 899  d0ba 5b02          	addw	sp,#2
 900  d0bc 81            	ret	
1030                     ; 228 int16_t mqtt_connect(struct mqtt_client *client,
1030                     ; 229                      const char* client_id,
1030                     ; 230                      const char* will_topic,
1030                     ; 231                      const void* will_message,
1030                     ; 232                      uint16_t will_message_size,
1030                     ; 233                      const char* user_name,
1030                     ; 234                      const char* password,
1030                     ; 235                      uint8_t connect_flags,
1030                     ; 236                      uint16_t keep_alive)
1030                     ; 237 {
1031                     .text:	section	.text,new
1032  d0bd               _mqtt_connect:
1034  d0bd 89            	pushw	x
1035  d0be 89            	pushw	x
1036       00000002      OFST:	set	2
1039                     ; 242     client->keep_alive = keep_alive;
1041  d0bf 1614          	ldw	y,(OFST+18,sp)
1042  d0c1 ef02          	ldw	(2,x),y
1043                     ; 244     if (client->error == MQTT_ERROR_CONNECT_NOT_CALLED) {
1045  d0c3 9093          	ldw	y,x
1046  d0c5 90ee0a        	ldw	y,(10,y)
1047  d0c8 90a3800f      	cpw	y,#32783
1048  d0cc 2606          	jrne	L705
1049                     ; 245         client->error = MQTT_OK;
1051  d0ce 90ae0001      	ldw	y,#1
1052  d0d2 ef0a          	ldw	(10,x),y
1053  d0d4               L705:
1054                     ; 249     MQTT_CLIENT_TRY_PACK(rv, msg, client, 
1056  d0d4 e60a          	ld	a,(10,x)
1057  d0d6 2a04          	jrpl	L115
1060  d0d8 ee0a          	ldw	x,(10,x)
1062  d0da 2031          	jra	L63
1063  d0dc               L115:
1066  d0dc 1e14          	ldw	x,(OFST+18,sp)
1067  d0de 89            	pushw	x
1068  d0df 7b15          	ld	a,(OFST+19,sp)
1069  d0e1 88            	push	a
1070  d0e2 1e14          	ldw	x,(OFST+18,sp)
1071  d0e4 89            	pushw	x
1072  d0e5 1e14          	ldw	x,(OFST+18,sp)
1073  d0e7 89            	pushw	x
1074  d0e8 1e14          	ldw	x,(OFST+18,sp)
1075  d0ea 89            	pushw	x
1076  d0eb 1e14          	ldw	x,(OFST+18,sp)
1077  d0ed 89            	pushw	x
1078  d0ee 1e14          	ldw	x,(OFST+18,sp)
1079  d0f0 89            	pushw	x
1080  d0f1 1e14          	ldw	x,(OFST+18,sp)
1081  d0f3 89            	pushw	x
1082  d0f4 1e12          	ldw	x,(OFST+16,sp)
1083  d0f6 ee28          	ldw	x,(40,x)
1084  d0f8 89            	pushw	x
1085  d0f9 1e14          	ldw	x,(OFST+18,sp)
1086  d0fb ee26          	ldw	x,(38,x)
1087  d0fd cddb44        	call	_mqtt_pack_connection_request
1089  d100 5b11          	addw	sp,#17
1090  d102 1f01          	ldw	(OFST-1,sp),x
1094  d104 2a0a          	jrpl	L315
1099  d106               LC001:
1101  d106 1e03          	ldw	x,(OFST+1,sp)
1102  d108 1601          	ldw	y,(OFST-1,sp)
1103  d10a ef0a          	ldw	(10,x),y
1105  d10c 93            	ldw	x,y
1107  d10d               L63:
1109  d10d 5b04          	addw	sp,#4
1110  d10f 81            	ret	
1111  d110               L315:
1114  d110 2641          	jrne	L515
1117  d112 1e03          	ldw	x,(OFST+1,sp)
1118  d114 1c0022        	addw	x,#34
1119  d117 cde1e2        	call	_mqtt_mq_clean
1123  d11a 1e14          	ldw	x,(OFST+18,sp)
1124  d11c 89            	pushw	x
1125  d11d 7b15          	ld	a,(OFST+19,sp)
1126  d11f 88            	push	a
1127  d120 1e14          	ldw	x,(OFST+18,sp)
1128  d122 89            	pushw	x
1129  d123 1e14          	ldw	x,(OFST+18,sp)
1130  d125 89            	pushw	x
1131  d126 1e14          	ldw	x,(OFST+18,sp)
1132  d128 89            	pushw	x
1133  d129 1e14          	ldw	x,(OFST+18,sp)
1134  d12b 89            	pushw	x
1135  d12c 1e14          	ldw	x,(OFST+18,sp)
1136  d12e 89            	pushw	x
1137  d12f 1e14          	ldw	x,(OFST+18,sp)
1138  d131 89            	pushw	x
1139  d132 1e12          	ldw	x,(OFST+16,sp)
1140  d134 ee28          	ldw	x,(40,x)
1141  d136 89            	pushw	x
1142  d137 1e14          	ldw	x,(OFST+18,sp)
1143  d139 ee26          	ldw	x,(38,x)
1144  d13b cddb44        	call	_mqtt_pack_connection_request
1146  d13e 5b11          	addw	sp,#17
1147  d140 1f01          	ldw	(OFST-1,sp),x
1154  d142 2bc2          	jrmi	LC001
1157  d144 260d          	jrne	L515
1160  d146 1e03          	ldw	x,(OFST+1,sp)
1161  d148 90ae8010      	ldw	y,#32784
1162  d14c ef0a          	ldw	(10,x),y
1165  d14e ae8010        	ldw	x,#32784
1167  d151 20ba          	jra	L63
1168  d153               L515:
1171  d153 89            	pushw	x
1172  d154 1e05          	ldw	x,(OFST+3,sp)
1173  d156 1c0022        	addw	x,#34
1174  d159 cde17b        	call	_mqtt_mq_register
1176  d15c 5b02          	addw	sp,#2
1178                     ; 266     msg->control_type = MQTT_CONTROL_CONNECT;
1181  d15e a601          	ld	a,#1
1182  d160 e709          	ld	(9,x),a
1183                     ; 268     return MQTT_OK;
1185  d162 ae0001        	ldw	x,#1
1187  d165 20a6          	jra	L63
1290                     ; 272 int16_t mqtt_publish(struct mqtt_client *client,
1290                     ; 273                      const char* topic_name,
1290                     ; 274                      const void* application_message,
1290                     ; 275                      uint16_t application_message_size,
1290                     ; 276                      uint8_t publish_flags)
1290                     ; 277 {
1291                     .text:	section	.text,new
1292  d167               _mqtt_publish:
1294  d167 89            	pushw	x
1295  d168 5204          	subw	sp,#4
1296       00000004      OFST:	set	4
1299                     ; 281     packet_id = __mqtt_next_pid(client);
1301  d16a cdd00b        	call	___mqtt_next_pid
1303  d16d 1f01          	ldw	(OFST-3,sp),x
1305                     ; 284     MQTT_CLIENT_TRY_PACK(
1307  d16f 1e05          	ldw	x,(OFST+1,sp)
1308  d171 e60a          	ld	a,(10,x)
1309  d173 2a04          	jrpl	L575
1312  d175 ee0a          	ldw	x,(10,x)
1314  d177 2028          	jra	L45
1315  d179               L575:
1318  d179 7b0f          	ld	a,(OFST+11,sp)
1319  d17b 88            	push	a
1320  d17c 1e0e          	ldw	x,(OFST+10,sp)
1321  d17e 89            	pushw	x
1322  d17f 1e0e          	ldw	x,(OFST+10,sp)
1323  d181 89            	pushw	x
1324  d182 1e06          	ldw	x,(OFST+2,sp)
1325  d184 89            	pushw	x
1326  d185 1e10          	ldw	x,(OFST+12,sp)
1327  d187 89            	pushw	x
1328  d188 1e0e          	ldw	x,(OFST+10,sp)
1329  d18a ee28          	ldw	x,(40,x)
1330  d18c 89            	pushw	x
1331  d18d 1e10          	ldw	x,(OFST+12,sp)
1332  d18f ee26          	ldw	x,(38,x)
1333  d191 cddd3e        	call	_mqtt_pack_publish_request
1335  d194 5b0b          	addw	sp,#11
1336  d196 1f03          	ldw	(OFST-1,sp),x
1340  d198 2a0a          	jrpl	L775
1345  d19a               LC002:
1347  d19a 1e05          	ldw	x,(OFST+1,sp)
1348  d19c 1603          	ldw	y,(OFST-1,sp)
1349  d19e ef0a          	ldw	(10,x),y
1351  d1a0 93            	ldw	x,y
1353  d1a1               L45:
1355  d1a1 5b06          	addw	sp,#6
1356  d1a3 81            	ret	
1357  d1a4               L775:
1360  d1a4 2638          	jrne	L106
1363  d1a6 1e05          	ldw	x,(OFST+1,sp)
1364  d1a8 1c0022        	addw	x,#34
1365  d1ab cde1e2        	call	_mqtt_mq_clean
1369  d1ae 7b0f          	ld	a,(OFST+11,sp)
1370  d1b0 88            	push	a
1371  d1b1 1e0e          	ldw	x,(OFST+10,sp)
1372  d1b3 89            	pushw	x
1373  d1b4 1e0e          	ldw	x,(OFST+10,sp)
1374  d1b6 89            	pushw	x
1375  d1b7 1e06          	ldw	x,(OFST+2,sp)
1376  d1b9 89            	pushw	x
1377  d1ba 1e10          	ldw	x,(OFST+12,sp)
1378  d1bc 89            	pushw	x
1379  d1bd 1e0e          	ldw	x,(OFST+10,sp)
1380  d1bf ee28          	ldw	x,(40,x)
1381  d1c1 89            	pushw	x
1382  d1c2 1e10          	ldw	x,(OFST+12,sp)
1383  d1c4 ee26          	ldw	x,(38,x)
1384  d1c6 cddd3e        	call	_mqtt_pack_publish_request
1386  d1c9 5b0b          	addw	sp,#11
1387  d1cb 1f03          	ldw	(OFST-1,sp),x
1394  d1cd 2bcb          	jrmi	LC002
1397  d1cf 260d          	jrne	L106
1400  d1d1 1e05          	ldw	x,(OFST+1,sp)
1401  d1d3 90ae8010      	ldw	y,#32784
1402  d1d7 ef0a          	ldw	(10,x),y
1405  d1d9 ae8010        	ldw	x,#32784
1407  d1dc 20c3          	jra	L45
1408  d1de               L106:
1411  d1de 89            	pushw	x
1412  d1df 1e07          	ldw	x,(OFST+3,sp)
1413  d1e1 1c0022        	addw	x,#34
1414  d1e4 cde17b        	call	_mqtt_mq_register
1416  d1e7 5b02          	addw	sp,#2
1417  d1e9 1f03          	ldw	(OFST-1,sp),x
1419                     ; 298     msg->control_type = MQTT_CONTROL_PUBLISH;
1422  d1eb a603          	ld	a,#3
1423  d1ed e709          	ld	(9,x),a
1424                     ; 299     msg->packet_id = packet_id;
1426  d1ef 1601          	ldw	y,(OFST-3,sp)
1427  d1f1 ef0a          	ldw	(10,x),y
1428                     ; 301     return MQTT_OK;
1430  d1f3 ae0001        	ldw	x,#1
1432  d1f6 20a9          	jra	L45
1498                     ; 305 int16_t __mqtt_puback(struct mqtt_client *client, uint16_t packet_id) {
1499                     .text:	section	.text,new
1500  d1f8               ___mqtt_puback:
1502  d1f8 89            	pushw	x
1503  d1f9 89            	pushw	x
1504       00000002      OFST:	set	2
1507                     ; 310     MQTT_CLIENT_TRY_PACK(
1509  d1fa e60a          	ld	a,(10,x)
1510  d1fc 2a04          	jrpl	L546
1513  d1fe ee0a          	ldw	x,(10,x)
1515  d200 201e          	jra	L07
1516  d202               L546:
1519  d202 1e07          	ldw	x,(OFST+5,sp)
1520  d204 89            	pushw	x
1521  d205 4b04          	push	#4
1522  d207 1e06          	ldw	x,(OFST+4,sp)
1523  d209 ee28          	ldw	x,(40,x)
1524  d20b 89            	pushw	x
1525  d20c 1e08          	ldw	x,(OFST+6,sp)
1526  d20e ee26          	ldw	x,(38,x)
1527  d210 cddeda        	call	_mqtt_pack_pubxxx_request
1529  d213 5b05          	addw	sp,#5
1530  d215 1f01          	ldw	(OFST-1,sp),x
1534  d217 2a0a          	jrpl	L746
1539  d219               LC003:
1541  d219 1e03          	ldw	x,(OFST+1,sp)
1542  d21b 1601          	ldw	y,(OFST-1,sp)
1543  d21d ef0a          	ldw	(10,x),y
1545  d21f 93            	ldw	x,y
1547  d220               L07:
1549  d220 5b04          	addw	sp,#4
1550  d222 81            	ret	
1551  d223               L746:
1554  d223 262e          	jrne	L156
1557  d225 1e03          	ldw	x,(OFST+1,sp)
1558  d227 1c0022        	addw	x,#34
1559  d22a cde1e2        	call	_mqtt_mq_clean
1563  d22d 1e07          	ldw	x,(OFST+5,sp)
1564  d22f 89            	pushw	x
1565  d230 4b04          	push	#4
1566  d232 1e06          	ldw	x,(OFST+4,sp)
1567  d234 ee28          	ldw	x,(40,x)
1568  d236 89            	pushw	x
1569  d237 1e08          	ldw	x,(OFST+6,sp)
1570  d239 ee26          	ldw	x,(38,x)
1571  d23b cddeda        	call	_mqtt_pack_pubxxx_request
1573  d23e 5b05          	addw	sp,#5
1574  d240 1f01          	ldw	(OFST-1,sp),x
1581  d242 2bd5          	jrmi	LC003
1584  d244 260d          	jrne	L156
1587  d246 1e03          	ldw	x,(OFST+1,sp)
1588  d248 90ae8010      	ldw	y,#32784
1589  d24c ef0a          	ldw	(10,x),y
1592  d24e ae8010        	ldw	x,#32784
1594  d251 20cd          	jra	L07
1595  d253               L156:
1598  d253 89            	pushw	x
1599  d254 1e05          	ldw	x,(OFST+3,sp)
1600  d256 1c0022        	addw	x,#34
1601  d259 cde17b        	call	_mqtt_mq_register
1603  d25c 5b02          	addw	sp,#2
1604  d25e 1f01          	ldw	(OFST-1,sp),x
1606                     ; 321     msg->control_type = MQTT_CONTROL_PUBACK;
1609  d260 a604          	ld	a,#4
1610  d262 e709          	ld	(9,x),a
1611                     ; 322     msg->packet_id = packet_id;
1613  d264 1607          	ldw	y,(OFST+5,sp)
1614  d266 ef0a          	ldw	(10,x),y
1615                     ; 324     return MQTT_OK;
1617  d268 ae0001        	ldw	x,#1
1619  d26b 20b3          	jra	L07
1685                     ; 328 int16_t __mqtt_pubrec(struct mqtt_client *client, uint16_t packet_id)
1685                     ; 329 {
1686                     .text:	section	.text,new
1687  d26d               ___mqtt_pubrec:
1689  d26d 89            	pushw	x
1690  d26e 89            	pushw	x
1691       00000002      OFST:	set	2
1694                     ; 334     MQTT_CLIENT_TRY_PACK(
1696  d26f e60a          	ld	a,(10,x)
1697  d271 2a04          	jrpl	L517
1700  d273 ee0a          	ldw	x,(10,x)
1702  d275 201e          	jra	L401
1703  d277               L517:
1706  d277 1e07          	ldw	x,(OFST+5,sp)
1707  d279 89            	pushw	x
1708  d27a 4b05          	push	#5
1709  d27c 1e06          	ldw	x,(OFST+4,sp)
1710  d27e ee28          	ldw	x,(40,x)
1711  d280 89            	pushw	x
1712  d281 1e08          	ldw	x,(OFST+6,sp)
1713  d283 ee26          	ldw	x,(38,x)
1714  d285 cddeda        	call	_mqtt_pack_pubxxx_request
1716  d288 5b05          	addw	sp,#5
1717  d28a 1f01          	ldw	(OFST-1,sp),x
1721  d28c 2a0a          	jrpl	L717
1726  d28e               LC004:
1728  d28e 1e03          	ldw	x,(OFST+1,sp)
1729  d290 1601          	ldw	y,(OFST-1,sp)
1730  d292 ef0a          	ldw	(10,x),y
1732  d294 93            	ldw	x,y
1734  d295               L401:
1736  d295 5b04          	addw	sp,#4
1737  d297 81            	ret	
1738  d298               L717:
1741  d298 262e          	jrne	L127
1744  d29a 1e03          	ldw	x,(OFST+1,sp)
1745  d29c 1c0022        	addw	x,#34
1746  d29f cde1e2        	call	_mqtt_mq_clean
1750  d2a2 1e07          	ldw	x,(OFST+5,sp)
1751  d2a4 89            	pushw	x
1752  d2a5 4b05          	push	#5
1753  d2a7 1e06          	ldw	x,(OFST+4,sp)
1754  d2a9 ee28          	ldw	x,(40,x)
1755  d2ab 89            	pushw	x
1756  d2ac 1e08          	ldw	x,(OFST+6,sp)
1757  d2ae ee26          	ldw	x,(38,x)
1758  d2b0 cddeda        	call	_mqtt_pack_pubxxx_request
1760  d2b3 5b05          	addw	sp,#5
1761  d2b5 1f01          	ldw	(OFST-1,sp),x
1768  d2b7 2bd5          	jrmi	LC004
1771  d2b9 260d          	jrne	L127
1774  d2bb 1e03          	ldw	x,(OFST+1,sp)
1775  d2bd 90ae8010      	ldw	y,#32784
1776  d2c1 ef0a          	ldw	(10,x),y
1779  d2c3 ae8010        	ldw	x,#32784
1781  d2c6 20cd          	jra	L401
1782  d2c8               L127:
1785  d2c8 89            	pushw	x
1786  d2c9 1e05          	ldw	x,(OFST+3,sp)
1787  d2cb 1c0022        	addw	x,#34
1788  d2ce cde17b        	call	_mqtt_mq_register
1790  d2d1 5b02          	addw	sp,#2
1791  d2d3 1f01          	ldw	(OFST-1,sp),x
1793                     ; 345     msg->control_type = MQTT_CONTROL_PUBREC;
1796  d2d5 a605          	ld	a,#5
1797  d2d7 e709          	ld	(9,x),a
1798                     ; 346     msg->packet_id = packet_id;
1800  d2d9 1607          	ldw	y,(OFST+5,sp)
1801  d2db ef0a          	ldw	(10,x),y
1802                     ; 348     return MQTT_OK;
1804  d2dd ae0001        	ldw	x,#1
1806  d2e0 20b3          	jra	L401
1872                     ; 352 int16_t __mqtt_pubrel(struct mqtt_client *client, uint16_t packet_id)
1872                     ; 353 {
1873                     .text:	section	.text,new
1874  d2e2               ___mqtt_pubrel:
1876  d2e2 89            	pushw	x
1877  d2e3 89            	pushw	x
1878       00000002      OFST:	set	2
1881                     ; 358     MQTT_CLIENT_TRY_PACK(
1883  d2e4 e60a          	ld	a,(10,x)
1884  d2e6 2a04          	jrpl	L567
1887  d2e8 ee0a          	ldw	x,(10,x)
1889  d2ea 201e          	jra	L021
1890  d2ec               L567:
1893  d2ec 1e07          	ldw	x,(OFST+5,sp)
1894  d2ee 89            	pushw	x
1895  d2ef 4b06          	push	#6
1896  d2f1 1e06          	ldw	x,(OFST+4,sp)
1897  d2f3 ee28          	ldw	x,(40,x)
1898  d2f5 89            	pushw	x
1899  d2f6 1e08          	ldw	x,(OFST+6,sp)
1900  d2f8 ee26          	ldw	x,(38,x)
1901  d2fa cddeda        	call	_mqtt_pack_pubxxx_request
1903  d2fd 5b05          	addw	sp,#5
1904  d2ff 1f01          	ldw	(OFST-1,sp),x
1908  d301 2a0a          	jrpl	L767
1913  d303               LC005:
1915  d303 1e03          	ldw	x,(OFST+1,sp)
1916  d305 1601          	ldw	y,(OFST-1,sp)
1917  d307 ef0a          	ldw	(10,x),y
1919  d309 93            	ldw	x,y
1921  d30a               L021:
1923  d30a 5b04          	addw	sp,#4
1924  d30c 81            	ret	
1925  d30d               L767:
1928  d30d 262e          	jrne	L177
1931  d30f 1e03          	ldw	x,(OFST+1,sp)
1932  d311 1c0022        	addw	x,#34
1933  d314 cde1e2        	call	_mqtt_mq_clean
1937  d317 1e07          	ldw	x,(OFST+5,sp)
1938  d319 89            	pushw	x
1939  d31a 4b06          	push	#6
1940  d31c 1e06          	ldw	x,(OFST+4,sp)
1941  d31e ee28          	ldw	x,(40,x)
1942  d320 89            	pushw	x
1943  d321 1e08          	ldw	x,(OFST+6,sp)
1944  d323 ee26          	ldw	x,(38,x)
1945  d325 cddeda        	call	_mqtt_pack_pubxxx_request
1947  d328 5b05          	addw	sp,#5
1948  d32a 1f01          	ldw	(OFST-1,sp),x
1955  d32c 2bd5          	jrmi	LC005
1958  d32e 260d          	jrne	L177
1961  d330 1e03          	ldw	x,(OFST+1,sp)
1962  d332 90ae8010      	ldw	y,#32784
1963  d336 ef0a          	ldw	(10,x),y
1966  d338 ae8010        	ldw	x,#32784
1968  d33b 20cd          	jra	L021
1969  d33d               L177:
1972  d33d 89            	pushw	x
1973  d33e 1e05          	ldw	x,(OFST+3,sp)
1974  d340 1c0022        	addw	x,#34
1975  d343 cde17b        	call	_mqtt_mq_register
1977  d346 5b02          	addw	sp,#2
1978  d348 1f01          	ldw	(OFST-1,sp),x
1980                     ; 369     msg->control_type = MQTT_CONTROL_PUBREL;
1983  d34a a606          	ld	a,#6
1984  d34c e709          	ld	(9,x),a
1985                     ; 370     msg->packet_id = packet_id;
1987  d34e 1607          	ldw	y,(OFST+5,sp)
1988  d350 ef0a          	ldw	(10,x),y
1989                     ; 372     return MQTT_OK;
1991  d352 ae0001        	ldw	x,#1
1993  d355 20b3          	jra	L021
2059                     ; 376 int16_t __mqtt_pubcomp(struct mqtt_client *client, uint16_t packet_id)
2059                     ; 377 {
2060                     .text:	section	.text,new
2061  d357               ___mqtt_pubcomp:
2063  d357 89            	pushw	x
2064  d358 89            	pushw	x
2065       00000002      OFST:	set	2
2068                     ; 382     MQTT_CLIENT_TRY_PACK(
2070  d359 e60a          	ld	a,(10,x)
2071  d35b 2a04          	jrpl	L5301
2074  d35d ee0a          	ldw	x,(10,x)
2076  d35f 201e          	jra	L431
2077  d361               L5301:
2080  d361 1e07          	ldw	x,(OFST+5,sp)
2081  d363 89            	pushw	x
2082  d364 4b07          	push	#7
2083  d366 1e06          	ldw	x,(OFST+4,sp)
2084  d368 ee28          	ldw	x,(40,x)
2085  d36a 89            	pushw	x
2086  d36b 1e08          	ldw	x,(OFST+6,sp)
2087  d36d ee26          	ldw	x,(38,x)
2088  d36f cddeda        	call	_mqtt_pack_pubxxx_request
2090  d372 5b05          	addw	sp,#5
2091  d374 1f01          	ldw	(OFST-1,sp),x
2095  d376 2a0a          	jrpl	L7301
2100  d378               LC006:
2102  d378 1e03          	ldw	x,(OFST+1,sp)
2103  d37a 1601          	ldw	y,(OFST-1,sp)
2104  d37c ef0a          	ldw	(10,x),y
2106  d37e 93            	ldw	x,y
2108  d37f               L431:
2110  d37f 5b04          	addw	sp,#4
2111  d381 81            	ret	
2112  d382               L7301:
2115  d382 262e          	jrne	L1401
2118  d384 1e03          	ldw	x,(OFST+1,sp)
2119  d386 1c0022        	addw	x,#34
2120  d389 cde1e2        	call	_mqtt_mq_clean
2124  d38c 1e07          	ldw	x,(OFST+5,sp)
2125  d38e 89            	pushw	x
2126  d38f 4b07          	push	#7
2127  d391 1e06          	ldw	x,(OFST+4,sp)
2128  d393 ee28          	ldw	x,(40,x)
2129  d395 89            	pushw	x
2130  d396 1e08          	ldw	x,(OFST+6,sp)
2131  d398 ee26          	ldw	x,(38,x)
2132  d39a cddeda        	call	_mqtt_pack_pubxxx_request
2134  d39d 5b05          	addw	sp,#5
2135  d39f 1f01          	ldw	(OFST-1,sp),x
2142  d3a1 2bd5          	jrmi	LC006
2145  d3a3 260d          	jrne	L1401
2148  d3a5 1e03          	ldw	x,(OFST+1,sp)
2149  d3a7 90ae8010      	ldw	y,#32784
2150  d3ab ef0a          	ldw	(10,x),y
2153  d3ad ae8010        	ldw	x,#32784
2155  d3b0 20cd          	jra	L431
2156  d3b2               L1401:
2159  d3b2 89            	pushw	x
2160  d3b3 1e05          	ldw	x,(OFST+3,sp)
2161  d3b5 1c0022        	addw	x,#34
2162  d3b8 cde17b        	call	_mqtt_mq_register
2164  d3bb 5b02          	addw	sp,#2
2165  d3bd 1f01          	ldw	(OFST-1,sp),x
2167                     ; 393     msg->control_type = MQTT_CONTROL_PUBCOMP;
2170  d3bf a607          	ld	a,#7
2171  d3c1 e709          	ld	(9,x),a
2172                     ; 394     msg->packet_id = packet_id;
2174  d3c3 1607          	ldw	y,(OFST+5,sp)
2175  d3c5 ef0a          	ldw	(10,x),y
2176                     ; 396     return MQTT_OK;
2178  d3c7 ae0001        	ldw	x,#1
2180  d3ca 20b3          	jra	L431
2264                     ; 400 int16_t mqtt_subscribe(struct mqtt_client *client,
2264                     ; 401                        const char* topic_name,
2264                     ; 402                        int16_t max_qos_level)
2264                     ; 403 {
2265                     .text:	section	.text,new
2266  d3cc               _mqtt_subscribe:
2268  d3cc 89            	pushw	x
2269  d3cd 5204          	subw	sp,#4
2270       00000004      OFST:	set	4
2273                     ; 407     packet_id = __mqtt_next_pid(client);
2275  d3cf cdd00b        	call	___mqtt_next_pid
2277  d3d2 1f01          	ldw	(OFST-3,sp),x
2279                     ; 410     MQTT_CLIENT_TRY_PACK(
2281  d3d4 1e05          	ldw	x,(OFST+1,sp)
2282  d3d6 e60a          	ld	a,(10,x)
2283  d3d8 2a04          	jrpl	L3111
2286  d3da ee0a          	ldw	x,(10,x)
2288  d3dc 2024          	jra	L251
2289  d3de               L3111:
2292  d3de 5f            	clrw	x
2293  d3df 89            	pushw	x
2294  d3e0 1e0d          	ldw	x,(OFST+9,sp)
2295  d3e2 89            	pushw	x
2296  d3e3 1e0d          	ldw	x,(OFST+9,sp)
2297  d3e5 89            	pushw	x
2298  d3e6 1e07          	ldw	x,(OFST+3,sp)
2299  d3e8 89            	pushw	x
2300  d3e9 1e0d          	ldw	x,(OFST+9,sp)
2301  d3eb ee28          	ldw	x,(40,x)
2302  d3ed 89            	pushw	x
2303  d3ee 1e0f          	ldw	x,(OFST+11,sp)
2304  d3f0 ee26          	ldw	x,(38,x)
2305  d3f2 cddfe6        	call	_mqtt_pack_subscribe_request
2307  d3f5 5b0a          	addw	sp,#10
2308  d3f7 1f03          	ldw	(OFST-1,sp),x
2312  d3f9 2a0a          	jrpl	L5111
2317  d3fb               LC007:
2319  d3fb 1e05          	ldw	x,(OFST+1,sp)
2320  d3fd 1603          	ldw	y,(OFST-1,sp)
2321  d3ff ef0a          	ldw	(10,x),y
2323  d401 93            	ldw	x,y
2325  d402               L251:
2327  d402 5b06          	addw	sp,#6
2328  d404 81            	ret	
2329  d405               L5111:
2332  d405 2634          	jrne	L7111
2335  d407 1e05          	ldw	x,(OFST+1,sp)
2336  d409 1c0022        	addw	x,#34
2337  d40c cde1e2        	call	_mqtt_mq_clean
2341  d40f 5f            	clrw	x
2342  d410 89            	pushw	x
2343  d411 1e0d          	ldw	x,(OFST+9,sp)
2344  d413 89            	pushw	x
2345  d414 1e0d          	ldw	x,(OFST+9,sp)
2346  d416 89            	pushw	x
2347  d417 1e07          	ldw	x,(OFST+3,sp)
2348  d419 89            	pushw	x
2349  d41a 1e0d          	ldw	x,(OFST+9,sp)
2350  d41c ee28          	ldw	x,(40,x)
2351  d41e 89            	pushw	x
2352  d41f 1e0f          	ldw	x,(OFST+11,sp)
2353  d421 ee26          	ldw	x,(38,x)
2354  d423 cddfe6        	call	_mqtt_pack_subscribe_request
2356  d426 5b0a          	addw	sp,#10
2357  d428 1f03          	ldw	(OFST-1,sp),x
2364  d42a 2bcf          	jrmi	LC007
2367  d42c 260d          	jrne	L7111
2370  d42e 1e05          	ldw	x,(OFST+1,sp)
2371  d430 90ae8010      	ldw	y,#32784
2372  d434 ef0a          	ldw	(10,x),y
2375  d436 ae8010        	ldw	x,#32784
2377  d439 20c7          	jra	L251
2378  d43b               L7111:
2381  d43b 89            	pushw	x
2382  d43c 1e07          	ldw	x,(OFST+3,sp)
2383  d43e 1c0022        	addw	x,#34
2384  d441 cde17b        	call	_mqtt_mq_register
2386  d444 5b02          	addw	sp,#2
2387  d446 1f03          	ldw	(OFST-1,sp),x
2389                     ; 423     msg->control_type = MQTT_CONTROL_SUBSCRIBE;
2392  d448 a608          	ld	a,#8
2393  d44a e709          	ld	(9,x),a
2394                     ; 424     msg->packet_id = packet_id;
2396  d44c 1601          	ldw	y,(OFST-3,sp)
2397  d44e ef0a          	ldw	(10,x),y
2398                     ; 425     return MQTT_OK;
2400  d450 ae0001        	ldw	x,#1
2402  d453 20ad          	jra	L251
2479                     ; 429 int16_t mqtt_unsubscribe(struct mqtt_client *client,
2479                     ; 430                          const char* topic_name)
2479                     ; 431 {
2480                     .text:	section	.text,new
2481                     _mqtt_unsubscribe:
2483                     	pushw	x
2484                     	subw	sp,#4
2485       00000004      OFST:	set	4
2488                     ; 432     uint16_t packet_id = __mqtt_next_pid(client);
2490                     	call	___mqtt_next_pid
2492                     	ldw	(OFST-3,sp),x
2494                     ; 437     MQTT_CLIENT_TRY_PACK(
2496                     	ldw	x,(OFST+1,sp)
2497                     	ld	a,(10,x)
2498                     	jrpl	L7611
2501                     	ldw	x,(10,x)
2503                     	jra	L071
2504                     L7611:
2507                     	clrw	x
2508                     	pushw	x
2509                     	ldw	x,(OFST+7,sp)
2510                     	pushw	x
2511                     	ldw	x,(OFST+1,sp)
2512                     	pushw	x
2513                     	ldw	x,(OFST+7,sp)
2514                     	ldw	x,(40,x)
2515                     	pushw	x
2516                     	ldw	x,(OFST+9,sp)
2517                     	ldw	x,(38,x)
2518                     	call	_mqtt_pack_unsubscribe_request
2520                     	addw	sp,#8
2521                     	ldw	(OFST-1,sp),x
2525                     	jrpl	L1711
2530                     LC008:
2532                     	ldw	x,(OFST+1,sp)
2533                     	ldw	y,(OFST-1,sp)
2534                     	ldw	(10,x),y
2536                     	ldw	x,y
2538                     L071:
2540                     	addw	sp,#6
2541                     	ret	
2542                     L1711:
2545                     	jrne	L3711
2548                     	ldw	x,(OFST+1,sp)
2549                     	addw	x,#34
2550                     	call	_mqtt_mq_clean
2554                     	clrw	x
2555                     	pushw	x
2556                     	ldw	x,(OFST+7,sp)
2557                     	pushw	x
2558                     	ldw	x,(OFST+1,sp)
2559                     	pushw	x
2560                     	ldw	x,(OFST+7,sp)
2561                     	ldw	x,(40,x)
2562                     	pushw	x
2563                     	ldw	x,(OFST+9,sp)
2564                     	ldw	x,(38,x)
2565                     	call	_mqtt_pack_unsubscribe_request
2567                     	addw	sp,#8
2568                     	ldw	(OFST-1,sp),x
2575                     	jrmi	LC008
2578                     	jrne	L3711
2581                     	ldw	x,(OFST+1,sp)
2582                     	ldw	y,#32784
2583                     	ldw	(10,x),y
2586                     	ldw	x,#32784
2588                     	jra	L071
2589                     L3711:
2592                     	pushw	x
2593                     	ldw	x,(OFST+3,sp)
2594                     	addw	x,#34
2595                     	call	_mqtt_mq_register
2597                     	addw	sp,#2
2598                     	ldw	(OFST-1,sp),x
2600                     ; 449     msg->control_type = MQTT_CONTROL_UNSUBSCRIBE;
2603                     	ld	a,#10
2604                     	ld	(9,x),a
2605                     ; 450     msg->packet_id = packet_id;
2607                     	ldw	y,(OFST-3,sp)
2608                     	ldw	(10,x),y
2609                     ; 452     return MQTT_OK;
2611                     	ldw	x,#1
2613                     	jra	L071
2658                     ; 456 int16_t mqtt_ping(struct mqtt_client *client)
2658                     ; 457 {
2659                     .text:	section	.text,new
2660                     _mqtt_ping:
2662                     	pushw	x
2663       00000002      OFST:	set	2
2666                     ; 459     rv = __mqtt_ping(client);
2668                     	call	___mqtt_ping
2671                     ; 460     return rv;
2675                     	addw	sp,#2
2676                     	ret	
2735                     ; 464 int16_t __mqtt_ping(struct mqtt_client *client) 
2735                     ; 465 {
2736                     .text:	section	.text,new
2737  d455               ___mqtt_ping:
2739  d455 89            	pushw	x
2740  d456 89            	pushw	x
2741       00000002      OFST:	set	2
2744                     ; 470     MQTT_CLIENT_TRY_PACK(
2746  d457 e60a          	ld	a,(10,x)
2747  d459 2a04          	jrpl	L7521
2750  d45b ee0a          	ldw	x,(10,x)
2752  d45d 2017          	jra	L012
2753  d45f               L7521:
2756  d45f ee28          	ldw	x,(40,x)
2757  d461 89            	pushw	x
2758  d462 1e05          	ldw	x,(OFST+3,sp)
2759  d464 ee26          	ldw	x,(38,x)
2760  d466 cddd1e        	call	_mqtt_pack_ping_request
2762  d469 5b02          	addw	sp,#2
2763  d46b 1f01          	ldw	(OFST-1,sp),x
2767  d46d 2a0a          	jrpl	L1621
2772  d46f               LC009:
2774  d46f 1e03          	ldw	x,(OFST+1,sp)
2775  d471 1601          	ldw	y,(OFST-1,sp)
2776  d473 ef0a          	ldw	(10,x),y
2778  d475 93            	ldw	x,y
2780  d476               L012:
2782  d476 5b04          	addw	sp,#4
2783  d478 81            	ret	
2784  d479               L1621:
2787  d479 2629          	jrne	L3621
2790  d47b 1e03          	ldw	x,(OFST+1,sp)
2791  d47d 1c0022        	addw	x,#34
2792  d480 cde1e2        	call	_mqtt_mq_clean
2796  d483 1e03          	ldw	x,(OFST+1,sp)
2797  d485 ee28          	ldw	x,(40,x)
2798  d487 89            	pushw	x
2799  d488 1e05          	ldw	x,(OFST+3,sp)
2800  d48a ee26          	ldw	x,(38,x)
2801  d48c cddd1e        	call	_mqtt_pack_ping_request
2803  d48f 5b02          	addw	sp,#2
2804  d491 1f01          	ldw	(OFST-1,sp),x
2811  d493 2bda          	jrmi	LC009
2814  d495 260d          	jrne	L3621
2817  d497 1e03          	ldw	x,(OFST+1,sp)
2818  d499 90ae8010      	ldw	y,#32784
2819  d49d ef0a          	ldw	(10,x),y
2822  d49f ae8010        	ldw	x,#32784
2824  d4a2 20d2          	jra	L012
2825  d4a4               L3621:
2828  d4a4 89            	pushw	x
2829  d4a5 1e05          	ldw	x,(OFST+3,sp)
2830  d4a7 1c0022        	addw	x,#34
2831  d4aa cde17b        	call	_mqtt_mq_register
2833  d4ad 5b02          	addw	sp,#2
2835                     ; 479     msg->control_type = MQTT_CONTROL_PINGREQ;
2838  d4af a60c          	ld	a,#12
2839  d4b1 e709          	ld	(9,x),a
2840                     ; 481     return MQTT_OK;
2842  d4b3 ae0001        	ldw	x,#1
2844  d4b6 20be          	jra	L012
2903                     ; 485 int16_t mqtt_disconnect(struct mqtt_client *client) 
2903                     ; 486 {
2904                     .text:	section	.text,new
2905  d4b8               _mqtt_disconnect:
2907  d4b8 89            	pushw	x
2908  d4b9 89            	pushw	x
2909       00000002      OFST:	set	2
2912                     ; 491     MQTT_CLIENT_TRY_PACK(
2914  d4ba e60a          	ld	a,(10,x)
2915  d4bc 2a04          	jrpl	L5231
2918  d4be ee0a          	ldw	x,(10,x)
2920  d4c0 2017          	jra	L422
2921  d4c2               L5231:
2924  d4c2 ee28          	ldw	x,(40,x)
2925  d4c4 89            	pushw	x
2926  d4c5 1e05          	ldw	x,(OFST+3,sp)
2927  d4c7 ee26          	ldw	x,(38,x)
2928  d4c9 cddcfe        	call	_mqtt_pack_disconnect
2930  d4cc 5b02          	addw	sp,#2
2931  d4ce 1f01          	ldw	(OFST-1,sp),x
2935  d4d0 2a0a          	jrpl	L7231
2940  d4d2               LC010:
2942  d4d2 1e03          	ldw	x,(OFST+1,sp)
2943  d4d4 1601          	ldw	y,(OFST-1,sp)
2944  d4d6 ef0a          	ldw	(10,x),y
2946  d4d8 93            	ldw	x,y
2948  d4d9               L422:
2950  d4d9 5b04          	addw	sp,#4
2951  d4db 81            	ret	
2952  d4dc               L7231:
2955  d4dc 2629          	jrne	L1331
2958  d4de 1e03          	ldw	x,(OFST+1,sp)
2959  d4e0 1c0022        	addw	x,#34
2960  d4e3 cde1e2        	call	_mqtt_mq_clean
2964  d4e6 1e03          	ldw	x,(OFST+1,sp)
2965  d4e8 ee28          	ldw	x,(40,x)
2966  d4ea 89            	pushw	x
2967  d4eb 1e05          	ldw	x,(OFST+3,sp)
2968  d4ed ee26          	ldw	x,(38,x)
2969  d4ef cddcfe        	call	_mqtt_pack_disconnect
2971  d4f2 5b02          	addw	sp,#2
2972  d4f4 1f01          	ldw	(OFST-1,sp),x
2979  d4f6 2bda          	jrmi	LC010
2982  d4f8 260d          	jrne	L1331
2985  d4fa 1e03          	ldw	x,(OFST+1,sp)
2986  d4fc 90ae8010      	ldw	y,#32784
2987  d500 ef0a          	ldw	(10,x),y
2990  d502 ae8010        	ldw	x,#32784
2992  d505 20d2          	jra	L422
2993  d507               L1331:
2996  d507 89            	pushw	x
2997  d508 1e05          	ldw	x,(OFST+3,sp)
2998  d50a 1c0022        	addw	x,#34
2999  d50d cde17b        	call	_mqtt_mq_register
3001  d510 5b02          	addw	sp,#2
3003                     ; 500     msg->control_type = MQTT_CONTROL_DISCONNECT;
3006  d512 a60e          	ld	a,#14
3007  d514 e709          	ld	(9,x),a
3008                     ; 502     return MQTT_OK;
3010  d516 ae0001        	ldw	x,#1
3012  d519 20be          	jra	L422
3120                     ; 506 int16_t __mqtt_send(struct mqtt_client *client) 
3120                     ; 507 {
3121                     .text:	section	.text,new
3122  d51b               ___mqtt_send:
3124  d51b 89            	pushw	x
3125  d51c 520d          	subw	sp,#13
3126       0000000d      OFST:	set	13
3129                     ; 510     int16_t inflight_qos2 = 0;
3131  d51e 5f            	clrw	x
3132  d51f 1f07          	ldw	(OFST-6,sp),x
3134                     ; 511     int16_t i = 0;
3136  d521 1f0b          	ldw	(OFST-2,sp),x
3138                     ; 513     if (client->error < 0 && client->error != MQTT_ERROR_SEND_BUFFER_IS_FULL) {
3140  d523 1e0e          	ldw	x,(OFST+1,sp)
3141  d525 6d0a          	tnz	(10,x)
3142  d527 2a10          	jrpl	L1241
3144  d529 9093          	ldw	y,x
3145  d52b 90ee0a        	ldw	y,(10,y)
3146  d52e 90a38010      	cpw	y,#32784
3147  d532 2705          	jreq	L1241
3148                     ; 514       return client->error;
3150  d534 ee0a          	ldw	x,(10,x)
3152  d536 ccd5fe        	jra	L432
3153  d539               L1241:
3154                     ; 518     len = mqtt_mq_length(&client->mq);
3156  d539 ee24          	ldw	x,(36,x)
3157  d53b 160e          	ldw	y,(OFST+1,sp)
3158  d53d 01            	rrwa	x,a
3159  d53e 90e02b        	sub	a,(43,y)
3160  d541 01            	rrwa	x,a
3161  d542 90e22a        	sbc	a,(42,y)
3162  d545 01            	rrwa	x,a
3163  d546 a60c          	ld	a,#12
3164  d548 cdfae8        	call	c_sdivx
3166  d54b 1f09          	ldw	(OFST-4,sp),x
3169  d54d ccd6e9        	jra	L7241
3170  d550               L3241:
3171                     ; 520         struct mqtt_queued_message *msg = mqtt_mq_get(&client->mq, i);
3173  d550 a60c          	ld	a,#12
3174  d552 cdf6e9        	call	c_bmulx
3176  d555 1f01          	ldw	(OFST-12,sp),x
3178  d557 1e0e          	ldw	x,(OFST+1,sp)
3179  d559 ee24          	ldw	x,(36,x)
3180  d55b 1d000c        	subw	x,#12
3181  d55e 72f001        	subw	x,(OFST-12,sp)
3182  d561 1f05          	ldw	(OFST-8,sp),x
3184                     ; 521         int16_t resend = 0;
3186  d563 5f            	clrw	x
3187  d564 1f03          	ldw	(OFST-10,sp),x
3189                     ; 522         if (msg->state == MQTT_QUEUED_UNSENT) {
3191  d566 1e05          	ldw	x,(OFST-8,sp)
3192  d568 e604          	ld	a,(4,x)
3193  d56a 2607          	jrne	L3341
3194                     ; 524             resend = 1;
3196  d56c ae0001        	ldw	x,#1
3197  d56f 1f03          	ldw	(OFST-10,sp),x
3200  d571 202f          	jra	L5341
3201  d573               L3341:
3202                     ; 526 	else if (msg->state == MQTT_QUEUED_AWAITING_ACK) {
3204  d573 4a            	dec	a
3205  d574 262c          	jrne	L5341
3206                     ; 528             if (second_counter > msg->time_sent + client->response_timeout) {
3208  d576 1e0e          	ldw	x,(OFST+1,sp)
3209  d578 ee0c          	ldw	x,(12,x)
3210  d57a cdf8b5        	call	c_itolx
3212  d57d 1e05          	ldw	x,(OFST-8,sp)
3213  d57f 1c0005        	addw	x,#5
3214  d582 cdf8e7        	call	c_ladd
3216  d585 ae029c        	ldw	x,#_second_counter
3217  d588 cdf8ff        	call	c_lcmp
3219  d58b 2415          	jruge	L5341
3220                     ; 529                 resend = 1;
3222  d58d ae0001        	ldw	x,#1
3223  d590 1f03          	ldw	(OFST-10,sp),x
3225                     ; 530                 client->number_of_timeouts += 1;
3227  d592 1e0e          	ldw	x,(OFST+1,sp)
3228  d594 9093          	ldw	y,x
3229  d596 ee0e          	ldw	x,(14,x)
3230  d598 5c            	incw	x
3231  d599 90ef0e        	ldw	(14,y),x
3232                     ; 531                 client->send_offset = 0;
3234  d59c 1e0e          	ldw	x,(OFST+1,sp)
3235  d59e 905f          	clrw	y
3236  d5a0 ef04          	ldw	(4,x),y
3237  d5a2               L5341:
3238                     ; 536         if (msg->control_type == MQTT_CONTROL_PUBLISH
3238                     ; 537             && (msg->state == MQTT_QUEUED_UNSENT || msg->state == MQTT_QUEUED_AWAITING_ACK)) 
3240  d5a2 1e05          	ldw	x,(OFST-8,sp)
3241  d5a4 e609          	ld	a,(9,x)
3242  d5a6 a103          	cp	a,#3
3243  d5a8 261f          	jrne	L3441
3245  d5aa e604          	ld	a,(4,x)
3246  d5ac 2704          	jreq	L5441
3248  d5ae a101          	cp	a,#1
3249  d5b0 2617          	jrne	L3441
3250  d5b2               L5441:
3251                     ; 539             inspected = (uint8_t)(0x03 & ((msg->start[0]) >> 1)); // qos
3253  d5b2 fe            	ldw	x,(x)
3254  d5b3 f6            	ld	a,(x)
3255  d5b4 a406          	and	a,#6
3256  d5b6 44            	srl	a
3257  d5b7 6b0d          	ld	(OFST+0,sp),a
3259                     ; 540             if (inspected == 2) {
3261  d5b9 a102          	cp	a,#2
3262  d5bb 260c          	jrne	L3441
3263                     ; 541                 if (inflight_qos2) resend = 0;
3265  d5bd 1e07          	ldw	x,(OFST-6,sp)
3266  d5bf 2703          	jreq	L1541
3269  d5c1 5f            	clrw	x
3270  d5c2 1f03          	ldw	(OFST-10,sp),x
3272  d5c4               L1541:
3273                     ; 542                 inflight_qos2 = 1;
3275  d5c4 ae0001        	ldw	x,#1
3276  d5c7 1f07          	ldw	(OFST-6,sp),x
3278  d5c9               L3441:
3279                     ; 547         if (!resend) continue;
3281  d5c9 1e03          	ldw	x,(OFST-10,sp)
3282  d5cb 2603ccd6c0    	jreq	L5241
3285                     ; 551           int16_t tmp = mqtt_pal_sendall(msg->start + client->send_offset, msg->size - client->send_offset);
3287  d5d0 1e05          	ldw	x,(OFST-8,sp)
3288  d5d2 160e          	ldw	y,(OFST+1,sp)
3289  d5d4 ee02          	ldw	x,(2,x)
3290  d5d6 01            	rrwa	x,a
3291  d5d7 90e005        	sub	a,(5,y)
3292  d5da 01            	rrwa	x,a
3293  d5db 90e204        	sbc	a,(4,y)
3294  d5de 01            	rrwa	x,a
3295  d5df 89            	pushw	x
3296  d5e0 1e10          	ldw	x,(OFST+3,sp)
3297  d5e2 1607          	ldw	y,(OFST-6,sp)
3298  d5e4 ee04          	ldw	x,(4,x)
3299  d5e6 01            	rrwa	x,a
3300  d5e7 90eb01        	add	a,(1,y)
3301  d5ea 01            	rrwa	x,a
3302  d5eb 90f9          	adc	a,(y)
3303  d5ed 01            	rrwa	x,a
3304  d5ee cde494        	call	_mqtt_pal_sendall
3306  d5f1 5b02          	addw	sp,#2
3307  d5f3 1f03          	ldw	(OFST-10,sp),x
3309                     ; 554           if (tmp < 0) {
3311  d5f5 2a0a          	jrpl	L5541
3312                     ; 555             client->error = tmp;
3314  d5f7 1e0e          	ldw	x,(OFST+1,sp)
3315  d5f9 1603          	ldw	y,(OFST-10,sp)
3316                     ; 556             return tmp;
3318  d5fb               LC014:
3319  d5fb ef0a          	ldw	(10,x),y
3321  d5fd 93            	ldw	x,y
3323  d5fe               L432:
3325  d5fe 5b0f          	addw	sp,#15
3326  d600 81            	ret	
3327  d601               L5541:
3328                     ; 559             client->send_offset += tmp;
3330  d601 1e0e          	ldw	x,(OFST+1,sp)
3331  d603 9093          	ldw	y,x
3332  d605 ee04          	ldw	x,(4,x)
3333  d607 72fb03        	addw	x,(OFST-10,sp)
3334  d60a 90ef04        	ldw	(4,y),x
3335                     ; 560             if(client->send_offset < msg->size) {
3337  d60d 1e0e          	ldw	x,(OFST+1,sp)
3338  d60f 1605          	ldw	y,(OFST-8,sp)
3339  d611 ee04          	ldw	x,(4,x)
3340  d613 90e302        	cpw	x,(2,y)
3341  d616 2441          	jruge	L1641
3342                     ; 562               break;
3343  d618               L1341:
3344                     ; 629         uint32_t keep_alive_timeout = client->time_of_last_send + (uint32_t)((float)(client->keep_alive) * 0.75);
3346  d618 1e0e          	ldw	x,(OFST+1,sp)
3347  d61a ee02          	ldw	x,(2,x)
3348  d61c cdfb0d        	call	c_uitof
3350  d61f ae9f0d        	ldw	x,#L5051
3351  d622 cdf75d        	call	c_fmul
3353  d625 cdf838        	call	c_ftol
3355  d628 1e0e          	ldw	x,(OFST+1,sp)
3356  d62a 1c0006        	addw	x,#6
3357  d62d cdf8e7        	call	c_ladd
3359  d630 96            	ldw	x,sp
3360  d631 1c0003        	addw	x,#OFST-10
3361  d634 cdfad0        	call	c_rtol
3364                     ; 630         if (second_counter > keep_alive_timeout) {
3366  d637 ae029c        	ldw	x,#_second_counter
3367  d63a cdf96a        	call	c_ltor
3369  d63d 96            	ldw	x,sp
3370  d63e 1c0003        	addw	x,#OFST-10
3371  d641 cdf8ff        	call	c_lcmp
3373  d644 2203ccd6f5    	jrule	L1151
3374                     ; 631           int16_t rv = __mqtt_ping(client);
3376  d649 1e0e          	ldw	x,(OFST+1,sp)
3377  d64b cdd455        	call	___mqtt_ping
3379  d64e 1f09          	ldw	(OFST-4,sp),x
3381                     ; 632           if (rv != MQTT_OK) {
3383  d650 5a            	decw	x
3384  d651 27f3          	jreq	L1151
3385                     ; 633             client->error = rv;
3387  d653 1e0e          	ldw	x,(OFST+1,sp)
3388  d655 1609          	ldw	y,(OFST-4,sp)
3389                     ; 634             return rv;
3391  d657 20a2          	jp	LC014
3392  d659               L1641:
3393                     ; 567               client->send_offset = 0;
3395  d659 1e0e          	ldw	x,(OFST+1,sp)
3396  d65b 905f          	clrw	y
3397  d65d ef04          	ldw	(4,x),y
3398                     ; 573         client->time_of_last_send = second_counter;
3400  d65f c6029f        	ld	a,_second_counter+3
3401  d662 e709          	ld	(9,x),a
3402  d664 c6029e        	ld	a,_second_counter+2
3403  d667 e708          	ld	(8,x),a
3404  d669 c6029d        	ld	a,_second_counter+1
3405  d66c e707          	ld	(7,x),a
3406  d66e c6029c        	ld	a,_second_counter
3407  d671 e706          	ld	(6,x),a
3408                     ; 574         msg->time_sent = client->time_of_last_send;
3410  d673 1605          	ldw	y,(OFST-8,sp)
3411  d675 e609          	ld	a,(9,x)
3412  d677 90e708        	ld	(8,y),a
3413  d67a e608          	ld	a,(8,x)
3414  d67c 90e707        	ld	(7,y),a
3415  d67f e607          	ld	a,(7,x)
3416  d681 90e706        	ld	(6,y),a
3417  d684 e606          	ld	a,(6,x)
3418                     ; 593         switch (msg->control_type) {
3420  d686 93            	ldw	x,y
3421  d687 90e705        	ld	(5,y),a
3422  d68a e609          	ld	a,(9,x)
3424                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3425  d68c 4a            	dec	a
3426  d68d 2756          	jreq	L7431
3427  d68f a002          	sub	a,#2
3428  d691 2734          	jreq	L5431
3429  d693 4a            	dec	a
3430  d694 2726          	jreq	L3431
3431  d696 4a            	dec	a
3432  d697 274c          	jreq	L7431
3433  d699 4a            	dec	a
3434  d69a 2749          	jreq	L7431
3435  d69c 4a            	dec	a
3436  d69d 271d          	jreq	L3431
3437  d69f 4a            	dec	a
3438  d6a0 2743          	jreq	L7431
3439  d6a2 a002          	sub	a,#2
3440  d6a4 273f          	jreq	L7431
3441  d6a6 a002          	sub	a,#2
3442  d6a8 273b          	jreq	L7431
3443  d6aa a002          	sub	a,#2
3444  d6ac 270e          	jreq	L3431
3445                     ; 621         default:
3445                     ; 622             client->error = MQTT_ERROR_MALFORMED_REQUEST;
3447  d6ae 1e0e          	ldw	x,(OFST+1,sp)
3448  d6b0 90ae8012      	ldw	y,#32786
3449  d6b4 ef0a          	ldw	(10,x),y
3450                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3452  d6b6 ae8012        	ldw	x,#32786
3454  d6b9 ccd5fe        	jra	L432
3455  d6bc               L3431:
3456                     ; 594         case MQTT_CONTROL_PUBACK:
3456                     ; 595         case MQTT_CONTROL_PUBCOMP:
3456                     ; 596         case MQTT_CONTROL_DISCONNECT:
3456                     ; 597             msg->state = MQTT_QUEUED_COMPLETE;
3458  d6bc a602          	ld	a,#2
3459  d6be               LC011:
3460  d6be e704          	ld	(4,x),a
3461                     ; 598             break;
3462  d6c0               L5241:
3463                     ; 519     for(; i < len; ++i) {
3465  d6c0 1e0b          	ldw	x,(OFST-2,sp)
3466  d6c2 5c            	incw	x
3467  d6c3 1f0b          	ldw	(OFST-2,sp),x
3469  d6c5 2022          	jra	L7241
3470  d6c7               L5431:
3471                     ; 599         case MQTT_CONTROL_PUBLISH:
3471                     ; 600             inspected = (uint8_t)(( MQTT_PUBLISH_QOS_MASK & (msg->start[0]) ) >> 1); /* qos */
3473  d6c7 fe            	ldw	x,(x)
3474  d6c8 f6            	ld	a,(x)
3475  d6c9 a406          	and	a,#6
3476  d6cb 44            	srl	a
3477  d6cc 6b0d          	ld	(OFST+0,sp),a
3479                     ; 601             if (inspected == 0) {
3481  d6ce 2604          	jrne	L1741
3482                     ; 602                 msg->state = MQTT_QUEUED_COMPLETE;
3484  d6d0 1e05          	ldw	x,(OFST-8,sp)
3486  d6d2 20e8          	jp	L3431
3487  d6d4               L1741:
3488                     ; 604 	    else if (inspected == 1) {
3490  d6d4 4a            	dec	a
3491  d6d5 260c          	jrne	L5741
3492                     ; 605                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3494  d6d7 1e05          	ldw	x,(OFST-8,sp)
3495  d6d9 4c            	inc	a
3496  d6da e704          	ld	(4,x),a
3497                     ; 607                 msg->start[0] |= MQTT_PUBLISH_DUP;
3499  d6dc fe            	ldw	x,(x)
3500  d6dd f6            	ld	a,(x)
3501  d6de aa08          	or	a,#8
3502  d6e0 f7            	ld	(x),a
3504  d6e1 20dd          	jra	L5241
3505  d6e3               L5741:
3506                     ; 610                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3508  d6e3 1e05          	ldw	x,(OFST-8,sp)
3509  d6e5               L7431:
3510                     ; 613         case MQTT_CONTROL_CONNECT:
3510                     ; 614         case MQTT_CONTROL_PUBREC:
3510                     ; 615         case MQTT_CONTROL_PUBREL:
3510                     ; 616         case MQTT_CONTROL_SUBSCRIBE:
3510                     ; 617         case MQTT_CONTROL_UNSUBSCRIBE:
3510                     ; 618         case MQTT_CONTROL_PINGREQ:
3510                     ; 619             msg->state = MQTT_QUEUED_AWAITING_ACK;
3512  d6e5 a601          	ld	a,#1
3513                     ; 620             break;
3515  d6e7 20d5          	jp	LC011
3516  d6e9               L7241:
3517                     ; 519     for(; i < len; ++i) {
3519  d6e9 1e0b          	ldw	x,(OFST-2,sp)
3520  d6eb 1309          	cpw	x,(OFST-4,sp)
3521  d6ed 2e03ccd550    	jrslt	L3241
3522  d6f2 ccd618        	jra	L1341
3523  d6f5               L1151:
3524                     ; 639     return MQTT_OK;
3526  d6f5 ae0001        	ldw	x,#1
3528  d6f8 ccd5fe        	jra	L432
4080                     ; 643 int16_t __mqtt_recv(struct mqtt_client *client)
4080                     ; 644 {
4081                     .text:	section	.text,new
4082  d6fb               ___mqtt_recv:
4084  d6fb 89            	pushw	x
4085  d6fc 5220          	subw	sp,#32
4086       00000020      OFST:	set	32
4089                     ; 646     int16_t mqtt_recv_ret = MQTT_OK;
4091  d6fe ae0001        	ldw	x,#1
4092  d701 1f07          	ldw	(OFST-25,sp),x
4094                     ; 648     struct mqtt_queued_message *msg = NULL;
4096                     ; 656     rv = mqtt_pal_recvall(client->recv_buffer.curr, client->recv_buffer.curr_sz);
4098  d703 1e21          	ldw	x,(OFST+1,sp)
4099  d705 ee20          	ldw	x,(32,x)
4100  d707 89            	pushw	x
4101  d708 1e23          	ldw	x,(OFST+3,sp)
4102  d70a ee1e          	ldw	x,(30,x)
4103  d70c cde4ab        	call	_mqtt_pal_recvall
4105  d70f 5b02          	addw	sp,#2
4106  d711 1f1f          	ldw	(OFST-1,sp),x
4108                     ; 658     client->recv_buffer.curr += rv;
4110  d713 1e21          	ldw	x,(OFST+1,sp)
4111  d715 9093          	ldw	y,x
4112  d717 ee1e          	ldw	x,(30,x)
4113  d719 72fb1f        	addw	x,(OFST-1,sp)
4114  d71c 90ef1e        	ldw	(30,y),x
4115                     ; 659     client->recv_buffer.curr_sz -= rv;
4117  d71f 1e21          	ldw	x,(OFST+1,sp)
4118  d721 9093          	ldw	y,x
4119  d723 ee20          	ldw	x,(32,x)
4120  d725 72f01f        	subw	x,(OFST-1,sp)
4121  d728 90ef20        	ldw	(32,y),x
4122                     ; 662     consumed = mqtt_unpack_response(&response, client->recv_buffer.mem_start, client->recv_buffer.curr - client->recv_buffer.mem_start);
4124  d72b 1e21          	ldw	x,(OFST+1,sp)
4125  d72d 1621          	ldw	y,(OFST+1,sp)
4126  d72f ee1e          	ldw	x,(30,x)
4127  d731 01            	rrwa	x,a
4128  d732 90e01b        	sub	a,(27,y)
4129  d735 01            	rrwa	x,a
4130  d736 90e21a        	sbc	a,(26,y)
4131  d739 01            	rrwa	x,a
4132  d73a 89            	pushw	x
4133  d73b 1e23          	ldw	x,(OFST+3,sp)
4134  d73d ee1a          	ldw	x,(26,x)
4135  d73f 89            	pushw	x
4136  d740 96            	ldw	x,sp
4137  d741 1c000d        	addw	x,#OFST-19
4138  d744 cde36c        	call	_mqtt_unpack_response
4140  d747 5b04          	addw	sp,#4
4141  d749 1f05          	ldw	(OFST-27,sp),x
4143                     ; 664     if (consumed < 0) {
4145  d74b 2a09          	jrpl	L7502
4146                     ; 665         client->error = consumed;
4148  d74d 1e21          	ldw	x,(OFST+1,sp)
4149  d74f 1605          	ldw	y,(OFST-27,sp)
4150  d751 ef0a          	ldw	(10,x),y
4151                     ; 666         return consumed;
4153  d753 93            	ldw	x,y
4155  d754 2013          	jra	L403
4156  d756               L7502:
4157                     ; 668     else if (consumed == 0) {
4159  d756 2619          	jrne	L1602
4160                     ; 674         if (client->recv_buffer.curr_sz == 0) {
4162  d758 1e21          	ldw	x,(OFST+1,sp)
4163  d75a e621          	ld	a,(33,x)
4164  d75c ea20          	or	a,(32,x)
4165  d75e 260c          	jrne	L5602
4166                     ; 675             client->error = MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4168  d760 90ae8013      	ldw	y,#32787
4169  d764 ef0a          	ldw	(10,x),y
4170                     ; 676             return MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4172  d766 ae8013        	ldw	x,#32787
4174  d769               L403:
4176  d769 5b22          	addw	sp,#34
4177  d76b 81            	ret	
4178  d76c               L5602:
4179                     ; 680         return MQTT_OK;
4181  d76c ae0001        	ldw	x,#1
4183  d76f 20f8          	jra	L403
4184  d771               L1602:
4185                     ; 712     switch (response.fixed_header.control_type) {
4187  d771 7b09          	ld	a,(OFST-23,sp)
4189                     ; 861             break;
4190  d773 a002          	sub	a,#2
4191  d775 2741          	jreq	L5151
4192  d777 4a            	dec	a
4193  d778 2603ccd7fa    	jreq	L7151
4194  d77d 4a            	dec	a
4195  d77e 2603ccd85f    	jreq	L1251
4196  d783 4a            	dec	a
4197  d784 2603ccd885    	jreq	L3251
4198  d789 4a            	dec	a
4199  d78a 2603ccd8ca    	jreq	L5251
4200  d78f 4a            	dec	a
4201  d790 2603ccd8fb    	jreq	L7251
4202  d795 a002          	sub	a,#2
4203  d797 2603ccd905    	jreq	L1351
4204  d79c a002          	sub	a,#2
4205  d79e 2603ccd937    	jreq	L3351
4206  d7a3 a002          	sub	a,#2
4207  d7a5 2603ccd941    	jreq	L5351
4208                     ; 858         default:
4208                     ; 859             client->error = MQTT_ERROR_MALFORMED_RESPONSE;
4210  d7aa 1e21          	ldw	x,(OFST+1,sp)
4211  d7ac 90ae800c      	ldw	y,#32780
4212  d7b0 ef0a          	ldw	(10,x),y
4213                     ; 860             mqtt_recv_ret = MQTT_ERROR_MALFORMED_RESPONSE;
4215  d7b2 ae800c        	ldw	x,#32780
4216                     ; 861             break;
4218  d7b5 ccd933        	jp	LC016
4219  d7b8               L5151:
4220                     ; 713         case MQTT_CONTROL_CONNACK:
4220                     ; 714 
4220                     ; 715             // release associated CONNECT
4220                     ; 716             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_CONNECT, NULL);
4222  d7b8 5f            	clrw	x
4223  d7b9 89            	pushw	x
4224  d7ba 4b01          	push	#1
4225  d7bc 1e24          	ldw	x,(OFST+4,sp)
4226  d7be 1c0022        	addw	x,#34
4227  d7c1 cde330        	call	_mqtt_mq_find
4229  d7c4 5b03          	addw	sp,#3
4230  d7c6 1f1f          	ldw	(OFST-1,sp),x
4232                     ; 717             if (msg == NULL) {
4234                     ; 718                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4235                     ; 719                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4236                     ; 720                 break;
4238  d7c8 2603ccd877    	jreq	LC017
4239                     ; 722             msg->state = MQTT_QUEUED_COMPLETE;
4241  d7cd a602          	ld	a,#2
4242  d7cf e704          	ld	(4,x),a
4243                     ; 724             if (response.decoded.connack.return_code != MQTT_CONNACK_ACCEPTED) {
4245  d7d1 0d13          	tnz	(OFST-13,sp)
4246  d7d3 2603ccd957    	jreq	L1702
4247                     ; 725                 if (response.decoded.connack.return_code == MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED) {
4249  d7d8 7b13          	ld	a,(OFST-13,sp)
4250  d7da a102          	cp	a,#2
4251  d7dc 260e          	jrne	L7702
4252                     ; 726                     client->error = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4254  d7de 1e21          	ldw	x,(OFST+1,sp)
4255  d7e0 90ae8005      	ldw	y,#32773
4256  d7e4 ef0a          	ldw	(10,x),y
4257                     ; 727                     mqtt_recv_ret = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4259  d7e6 ae8005        	ldw	x,#32773
4261  d7e9 ccd933        	jp	LC016
4262  d7ec               L7702:
4263                     ; 730                     client->error = MQTT_ERROR_CONNECTION_REFUSED;
4265  d7ec 1e21          	ldw	x,(OFST+1,sp)
4266  d7ee 90ae8016      	ldw	y,#32790
4267  d7f2 ef0a          	ldw	(10,x),y
4268                     ; 731                     mqtt_recv_ret = MQTT_ERROR_CONNECTION_REFUSED;
4270  d7f4 ae8016        	ldw	x,#32790
4271  d7f7 ccd933        	jp	LC016
4272  d7fa               L7151:
4273                     ; 736         case MQTT_CONTROL_PUBLISH:
4273                     ; 737             // stage response, none if qos==0, PUBACK if qos==1, PUBREC if qos==2
4273                     ; 738             if (response.decoded.publish.qos_level == 1) {
4275  d7fa 7b13          	ld	a,(OFST-13,sp)
4276  d7fc a101          	cp	a,#1
4277  d7fe 2619          	jrne	L3012
4278                     ; 739                 rv = __mqtt_puback(client, response.decoded.publish.packet_id);
4280  d800 1e19          	ldw	x,(OFST-7,sp)
4281  d802 89            	pushw	x
4282  d803 1e23          	ldw	x,(OFST+3,sp)
4283  d805 cdd1f8        	call	___mqtt_puback
4285  d808 5b02          	addw	sp,#2
4286  d80a 1f1f          	ldw	(OFST-1,sp),x
4288                     ; 740                 if (rv != MQTT_OK) {
4290  d80c 5a            	decw	x
4291  d80d 273b          	jreq	L7012
4292                     ; 741                     client->error = rv;
4294  d80f 1e21          	ldw	x,(OFST+1,sp)
4295  d811 161f          	ldw	y,(OFST-1,sp)
4296  d813 ef0a          	ldw	(10,x),y
4297                     ; 742                     mqtt_recv_ret = rv;
4299  d815 93            	ldw	x,y
4300                     ; 743                     break;
4302  d816 ccd933        	jp	LC016
4303  d819               L3012:
4304                     ; 746             else if (response.decoded.publish.qos_level == 2) {
4306  d819 a102          	cp	a,#2
4307  d81b 262d          	jrne	L7012
4308                     ; 748                 if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.publish.packet_id) != NULL) {
4310  d81d 96            	ldw	x,sp
4311  d81e 1c0019        	addw	x,#OFST-7
4312  d821 89            	pushw	x
4313  d822 4b05          	push	#5
4314  d824 1e24          	ldw	x,(OFST+4,sp)
4315  d826 1c0022        	addw	x,#34
4316  d829 cde330        	call	_mqtt_mq_find
4318  d82c 5b03          	addw	sp,#3
4319  d82e 5d            	tnzw	x
4320  d82f 26a4          	jrne	L1702
4321                     ; 749                     break;
4323                     ; 752                 rv = __mqtt_pubrec(client, response.decoded.publish.packet_id);
4325  d831 1e19          	ldw	x,(OFST-7,sp)
4326  d833 89            	pushw	x
4327  d834 1e23          	ldw	x,(OFST+3,sp)
4328  d836 cdd26d        	call	___mqtt_pubrec
4330  d839 5b02          	addw	sp,#2
4331  d83b 1f1f          	ldw	(OFST-1,sp),x
4333                     ; 753                 if (rv != MQTT_OK) {
4335  d83d 5a            	decw	x
4336  d83e 270a          	jreq	L7012
4337                     ; 754                     client->error = rv;
4339  d840 1e21          	ldw	x,(OFST+1,sp)
4340  d842 161f          	ldw	y,(OFST-1,sp)
4341  d844 ef0a          	ldw	(10,x),y
4342                     ; 755                     mqtt_recv_ret = rv;
4344  d846 93            	ldw	x,y
4345                     ; 756                     break;
4347  d847 ccd933        	jp	LC016
4348  d84a               L7012:
4349                     ; 761             client->publish_response_callback(&client->publish_response_callback_state, &response.decoded.publish);
4351  d84a 96            	ldw	x,sp
4352  d84b 1c0012        	addw	x,#OFST-14
4353  d84e 89            	pushw	x
4354  d84f 1e23          	ldw	x,(OFST+3,sp)
4355  d851 1623          	ldw	y,(OFST+3,sp)
4356  d853 1c0012        	addw	x,#18
4357  d856 90ee10        	ldw	y,(16,y)
4358  d859 90fd          	call	(y)
4360  d85b 85            	popw	x
4361                     ; 762             break;
4363  d85c ccd957        	jra	L1702
4364  d85f               L1251:
4365                     ; 763         case MQTT_CONTROL_PUBACK:
4365                     ; 764             // release associated PUBLISH
4365                     ; 765             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.puback.packet_id);
4367  d85f 96            	ldw	x,sp
4368  d860 1c0012        	addw	x,#OFST-14
4369  d863 89            	pushw	x
4370  d864 4b03          	push	#3
4372                     ; 766             if (msg == NULL) {
4374  d866               LC018:
4375  d866 1e24          	ldw	x,(OFST+4,sp)
4376  d868 1c0022        	addw	x,#34
4377  d86b cde330        	call	_mqtt_mq_find
4378  d86e 5b03          	addw	sp,#3
4379  d870 1f1f          	ldw	(OFST-1,sp),x
4383  d872 2703ccd953    	jrne	L3412
4384                     ; 767                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4386                     ; 768                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4388  d877               LC017:
4396  d877 1e21          	ldw	x,(OFST+1,sp)
4397  d879 90ae8014      	ldw	y,#32788
4398  d87d ef0a          	ldw	(10,x),y
4406  d87f ae8014        	ldw	x,#32788
4407                     ; 769                 break;
4409  d882 ccd933        	jp	LC016
4410                     ; 771             msg->state = MQTT_QUEUED_COMPLETE;
4411                     ; 772             break;
4413  d885               L3251:
4414                     ; 773         case MQTT_CONTROL_PUBREC:
4414                     ; 774             // check if this is a duplicate
4414                     ; 775             if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubrec.packet_id) != NULL) {
4416  d885 96            	ldw	x,sp
4417  d886 1c0012        	addw	x,#OFST-14
4418  d889 89            	pushw	x
4419  d88a 4b06          	push	#6
4420  d88c 1e24          	ldw	x,(OFST+4,sp)
4421  d88e 1c0022        	addw	x,#34
4422  d891 cde330        	call	_mqtt_mq_find
4424  d894 5b03          	addw	sp,#3
4425  d896 5d            	tnzw	x
4426  d897 26c3          	jrne	L1702
4427                     ; 776                 break;
4429                     ; 779             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.pubrec.packet_id);
4431  d899 96            	ldw	x,sp
4432  d89a 1c0012        	addw	x,#OFST-14
4433  d89d 89            	pushw	x
4434  d89e 4b03          	push	#3
4435  d8a0 1e24          	ldw	x,(OFST+4,sp)
4436  d8a2 1c0022        	addw	x,#34
4437  d8a5 cde330        	call	_mqtt_mq_find
4439  d8a8 5b03          	addw	sp,#3
4440  d8aa 1f1f          	ldw	(OFST-1,sp),x
4442                     ; 780             if (msg == NULL) {
4444                     ; 781                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4445                     ; 782                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4446                     ; 783                 break;
4448  d8ac 27c9          	jreq	LC017
4449                     ; 785             msg->state = MQTT_QUEUED_COMPLETE;
4451  d8ae a602          	ld	a,#2
4452  d8b0 e704          	ld	(4,x),a
4453                     ; 787             rv = __mqtt_pubrel(client, response.decoded.pubrec.packet_id);
4455  d8b2 1e12          	ldw	x,(OFST-14,sp)
4456  d8b4 89            	pushw	x
4457  d8b5 1e23          	ldw	x,(OFST+3,sp)
4458  d8b7 cdd2e2        	call	___mqtt_pubrel
4460  d8ba 5b02          	addw	sp,#2
4461  d8bc 1f1f          	ldw	(OFST-1,sp),x
4463                     ; 788             if (rv != MQTT_OK) {
4465  d8be 5a            	decw	x
4466  d8bf 279b          	jreq	L1702
4467                     ; 789                 client->error = rv;
4469  d8c1 1e21          	ldw	x,(OFST+1,sp)
4470  d8c3 161f          	ldw	y,(OFST-1,sp)
4471  d8c5 ef0a          	ldw	(10,x),y
4472                     ; 790                 mqtt_recv_ret = rv;
4474  d8c7 93            	ldw	x,y
4475                     ; 791                 break;
4477  d8c8 2069          	jp	LC016
4478  d8ca               L5251:
4479                     ; 794         case MQTT_CONTROL_PUBREL:
4479                     ; 795             // release associated PUBREC
4479                     ; 796             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.pubrel.packet_id);
4481  d8ca 96            	ldw	x,sp
4482  d8cb 1c0012        	addw	x,#OFST-14
4483  d8ce 89            	pushw	x
4484  d8cf 4b05          	push	#5
4485  d8d1 1e24          	ldw	x,(OFST+4,sp)
4486  d8d3 1c0022        	addw	x,#34
4487  d8d6 cde330        	call	_mqtt_mq_find
4489  d8d9 5b03          	addw	sp,#3
4490  d8db 1f1f          	ldw	(OFST-1,sp),x
4492                     ; 797             if (msg == NULL) {
4494                     ; 798                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4495                     ; 799                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4496                     ; 800                 break;
4498  d8dd 2798          	jreq	LC017
4499                     ; 802             msg->state = MQTT_QUEUED_COMPLETE;
4501  d8df a602          	ld	a,#2
4502  d8e1 e704          	ld	(4,x),a
4503                     ; 804             rv = __mqtt_pubcomp(client, response.decoded.pubrec.packet_id);
4505  d8e3 1e12          	ldw	x,(OFST-14,sp)
4506  d8e5 89            	pushw	x
4507  d8e6 1e23          	ldw	x,(OFST+3,sp)
4508  d8e8 cdd357        	call	___mqtt_pubcomp
4510  d8eb 5b02          	addw	sp,#2
4511  d8ed 1f1f          	ldw	(OFST-1,sp),x
4513                     ; 805             if (rv != MQTT_OK) {
4515  d8ef 5a            	decw	x
4516  d8f0 2765          	jreq	L1702
4517                     ; 806                 client->error = rv;
4519  d8f2 1e21          	ldw	x,(OFST+1,sp)
4520  d8f4 161f          	ldw	y,(OFST-1,sp)
4521  d8f6 ef0a          	ldw	(10,x),y
4522                     ; 807                 mqtt_recv_ret = rv;
4524  d8f8 93            	ldw	x,y
4525                     ; 808                 break;
4527  d8f9 2038          	jp	LC016
4528  d8fb               L7251:
4529                     ; 811         case MQTT_CONTROL_PUBCOMP:
4529                     ; 812             // release associated PUBREL
4529                     ; 813             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubcomp.packet_id);
4531  d8fb 96            	ldw	x,sp
4532  d8fc 1c0012        	addw	x,#OFST-14
4533  d8ff 89            	pushw	x
4534  d900 4b06          	push	#6
4536                     ; 814             if (msg == NULL) {
4537                     ; 815                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4538                     ; 816                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4539                     ; 817                 break;
4541  d902 ccd866        	jp	LC018
4542                     ; 819             msg->state = MQTT_QUEUED_COMPLETE;
4543                     ; 820             break;
4545  d905               L1351:
4546                     ; 821         case MQTT_CONTROL_SUBACK:
4546                     ; 822             // release associated SUBSCRIBE
4546                     ; 823             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_SUBSCRIBE, &response.decoded.suback.packet_id);
4548  d905 96            	ldw	x,sp
4549  d906 1c0012        	addw	x,#OFST-14
4550  d909 89            	pushw	x
4551  d90a 4b08          	push	#8
4552  d90c 1e24          	ldw	x,(OFST+4,sp)
4553  d90e 1c0022        	addw	x,#34
4554  d911 cde330        	call	_mqtt_mq_find
4556  d914 5b03          	addw	sp,#3
4557  d916 1f1f          	ldw	(OFST-1,sp),x
4559                     ; 824             if (msg == NULL) {
4561                     ; 825                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4562                     ; 826                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4563                     ; 827                 break;
4565  d918 2603ccd877    	jreq	LC017
4566                     ; 829             msg->state = MQTT_QUEUED_COMPLETE;
4568  d91d a602          	ld	a,#2
4569  d91f e704          	ld	(4,x),a
4570                     ; 832             if (response.decoded.suback.return_codes[0] == MQTT_SUBACK_FAILURE) {
4572  d921 1e14          	ldw	x,(OFST-12,sp)
4573  d923 f6            	ld	a,(x)
4574  d924 a180          	cp	a,#128
4575  d926 262f          	jrne	L1702
4576                     ; 833                 client->error = MQTT_ERROR_SUBSCRIBE_FAILED;
4578  d928 1e21          	ldw	x,(OFST+1,sp)
4579  d92a 90ae8017      	ldw	y,#32791
4580  d92e ef0a          	ldw	(10,x),y
4581                     ; 834                 mqtt_recv_ret = MQTT_ERROR_SUBSCRIBE_FAILED;
4583  d930 ae8017        	ldw	x,#32791
4584  d933               LC016:
4585  d933 1f07          	ldw	(OFST-25,sp),x
4587                     ; 835                 break;
4589  d935 2020          	jra	L1702
4590  d937               L3351:
4591                     ; 838         case MQTT_CONTROL_UNSUBACK:
4591                     ; 839             // release associated UNSUBSCRIBE
4591                     ; 840             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_UNSUBSCRIBE, &response.decoded.unsuback.packet_id);
4593  d937 96            	ldw	x,sp
4594  d938 1c0012        	addw	x,#OFST-14
4595  d93b 89            	pushw	x
4596  d93c 4b0a          	push	#10
4598                     ; 841             if (msg == NULL) {
4599                     ; 842                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4600                     ; 843                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4601                     ; 844                 break;
4603  d93e ccd866        	jp	LC018
4604                     ; 846             msg->state = MQTT_QUEUED_COMPLETE;
4605                     ; 847             break;
4607  d941               L5351:
4608                     ; 848         case MQTT_CONTROL_PINGRESP:
4608                     ; 849             // release associated PINGREQ
4608                     ; 850             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PINGREQ, NULL);
4610  d941 5f            	clrw	x
4611  d942 89            	pushw	x
4612  d943 4b0c          	push	#12
4613  d945 1e24          	ldw	x,(OFST+4,sp)
4614  d947 1c0022        	addw	x,#34
4615  d94a cde330        	call	_mqtt_mq_find
4617  d94d 5b03          	addw	sp,#3
4618  d94f 1f1f          	ldw	(OFST-1,sp),x
4620                     ; 851             if (msg == NULL) {
4622                     ; 852                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4623                     ; 853                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4624                     ; 854                 break;
4626  d951 27c7          	jreq	LC017
4627  d953               L3412:
4628                     ; 856             msg->state = MQTT_QUEUED_COMPLETE;
4633  d953 a602          	ld	a,#2
4634  d955 e704          	ld	(4,x),a
4635                     ; 857             break;
4637  d957               L1702:
4638                     ; 890         void* dest = (unsigned char*)client->recv_buffer.mem_start;
4640  d957 1e21          	ldw	x,(OFST+1,sp)
4641  d959 ee1a          	ldw	x,(26,x)
4642  d95b 1f01          	ldw	(OFST-31,sp),x
4644                     ; 891         void* src  = (unsigned char*)client->recv_buffer.mem_start + consumed;
4646  d95d 1e21          	ldw	x,(OFST+1,sp)
4647  d95f ee1a          	ldw	x,(26,x)
4648  d961 72fb05        	addw	x,(OFST-27,sp)
4649  d964 1f03          	ldw	(OFST-29,sp),x
4651                     ; 892         uint16_t n = client->recv_buffer.curr - client->recv_buffer.mem_start - consumed;
4653  d966 1e21          	ldw	x,(OFST+1,sp)
4654  d968 1621          	ldw	y,(OFST+1,sp)
4655  d96a ee1e          	ldw	x,(30,x)
4656  d96c 01            	rrwa	x,a
4657  d96d 90e01b        	sub	a,(27,y)
4658  d970 01            	rrwa	x,a
4659  d971 90e21a        	sbc	a,(26,y)
4660  d974 01            	rrwa	x,a
4661  d975 72f005        	subw	x,(OFST-27,sp)
4662  d978 1f1f          	ldw	(OFST-1,sp),x
4664                     ; 893         memmove(dest, src, n);
4666  d97a 89            	pushw	x
4667  d97b 1e05          	ldw	x,(OFST-27,sp)
4668  d97d 89            	pushw	x
4669  d97e 1e05          	ldw	x,(OFST-27,sp)
4670  d980 cdf678        	call	_memmove
4672  d983 5b04          	addw	sp,#4
4673                     ; 894         client->recv_buffer.curr -= consumed;
4675  d985 1e21          	ldw	x,(OFST+1,sp)
4676  d987 9093          	ldw	y,x
4677  d989 ee1e          	ldw	x,(30,x)
4678  d98b 72f005        	subw	x,(OFST-27,sp)
4679  d98e 90ef1e        	ldw	(30,y),x
4680                     ; 895         client->recv_buffer.curr_sz += consumed;
4682  d991 1e21          	ldw	x,(OFST+1,sp)
4683  d993 9093          	ldw	y,x
4684  d995 ee20          	ldw	x,(32,x)
4685  d997 72fb05        	addw	x,(OFST-27,sp)
4686  d99a 90ef20        	ldw	(32,y),x
4687                     ; 904     return mqtt_recv_ret;
4689  d99d 1e07          	ldw	x,(OFST-25,sp)
4691  d99f ccd769        	jra	L403
4694                     .const:	section	.text
4695  9ecd               L5412_control_type_is_valid:
4696  9ecd 00            	dc.b	0
4697  9ece 01            	dc.b	1
4698  9ecf 01            	dc.b	1
4699  9ed0 01            	dc.b	1
4700  9ed1 01            	dc.b	1
4701  9ed2 01            	dc.b	1
4702  9ed3 01            	dc.b	1
4703  9ed4 01            	dc.b	1
4704  9ed5 01            	dc.b	1
4705  9ed6 01            	dc.b	1
4706  9ed7 01            	dc.b	1
4707  9ed8 01            	dc.b	1
4708  9ed9 01            	dc.b	1
4709  9eda 01            	dc.b	1
4710  9edb 01            	dc.b	1
4711  9edc 00            	dc.b	0
4712  9edd               L7412_required_flags:
4713  9edd 00            	dc.b	0
4714  9ede 00            	dc.b	0
4715  9edf 00            	dc.b	0
4716  9ee0 00            	dc.b	0
4717  9ee1 00            	dc.b	0
4718  9ee2 00            	dc.b	0
4719  9ee3 02            	dc.b	2
4720  9ee4 00            	dc.b	0
4721  9ee5 02            	dc.b	2
4722  9ee6 00            	dc.b	0
4723  9ee7 02            	dc.b	2
4724  9ee8 00            	dc.b	0
4725  9ee9 00            	dc.b	0
4726  9eea 00            	dc.b	0
4727  9eeb 00            	dc.b	0
4728  9eec 00            	dc.b	0
4729  9eed               L1512_mask_required_flags:
4730  9eed 00            	dc.b	0
4731  9eee 0f            	dc.b	15
4732  9eef 0f            	dc.b	15
4733  9ef0 00            	dc.b	0
4734  9ef1 0f            	dc.b	15
4735  9ef2 0f            	dc.b	15
4736  9ef3 0f            	dc.b	15
4737  9ef4 0f            	dc.b	15
4738  9ef5 0f            	dc.b	15
4739  9ef6 0f            	dc.b	15
4740  9ef7 0f            	dc.b	15
4741  9ef8 0f            	dc.b	15
4742  9ef9 0f            	dc.b	15
4743  9efa 0f            	dc.b	15
4744  9efb 0f            	dc.b	15
4745  9efc 00            	dc.b	0
4798                     ; 966 static int16_t mqtt_fixed_header_rule_violation(const struct mqtt_fixed_header *fixed_header)
4798                     ; 967 {
4799                     .text:	section	.text,new
4800  d9a2               L3512_mqtt_fixed_header_rule_violation:
4802  d9a2 89            	pushw	x
4803       00000002      OFST:	set	2
4806                     ; 972     control_type = fixed_header->control_type;
4808  d9a3 f6            	ld	a,(x)
4809  d9a4 6b02          	ld	(OFST+0,sp),a
4811                     ; 973     control_flags = fixed_header->control_flags;
4813  d9a6 e604          	ld	a,(4,x)
4814  d9a8 a40f          	and	a,#15
4815  d9aa 6b01          	ld	(OFST-1,sp),a
4817                     ; 976     if (control_type_is_valid[control_type] != 0x01) {
4819  d9ac 5f            	clrw	x
4820  d9ad 7b02          	ld	a,(OFST+0,sp)
4821  d9af 97            	ld	xl,a
4822  d9b0 d69ecd        	ld	a,(L5412_control_type_is_valid,x)
4823  d9b3 4a            	dec	a
4824  d9b4 2705          	jreq	L1022
4825                     ; 977         return MQTT_ERROR_CONTROL_FORBIDDEN_TYPE;
4827  d9b6 ae8002        	ldw	x,#32770
4829  d9b9 2017          	jra	L013
4830  d9bb               L1022:
4831                     ; 981     if(((control_flags ^ required_flags[control_type]) & mask_required_flags[control_type]) == 1) {
4833  d9bb 7b02          	ld	a,(OFST+0,sp)
4834  d9bd 5f            	clrw	x
4835  d9be 97            	ld	xl,a
4836  d9bf 905f          	clrw	y
4837  d9c1 9097          	ld	yl,a
4838  d9c3 90d69edd      	ld	a,(L7412_required_flags,y)
4839  d9c7 1801          	xor	a,(OFST-1,sp)
4840  d9c9 d49eed        	and	a,(L1512_mask_required_flags,x)
4841  d9cc 4a            	dec	a
4842  d9cd 2606          	jrne	L3022
4843                     ; 982         return MQTT_ERROR_CONTROL_INVALID_FLAGS;
4845  d9cf ae8003        	ldw	x,#32771
4847  d9d2               L013:
4849  d9d2 5b02          	addw	sp,#2
4850  d9d4 81            	ret	
4851  d9d5               L3022:
4852                     ; 985     return 0;
4854  d9d5 5f            	clrw	x
4856  d9d6 20fa          	jra	L013
4948                     ; 989 int16_t mqtt_unpack_fixed_header(struct mqtt_response *response, const uint8_t *buf, uint16_t bufsz)
4948                     ; 990 {
4949                     .text:	section	.text,new
4950  d9d8               _mqtt_unpack_fixed_header:
4952  d9d8 89            	pushw	x
4953  d9d9 520a          	subw	sp,#10
4954       0000000a      OFST:	set	10
4957                     ; 992     const uint8_t *start = buf;
4959  d9db 1e0f          	ldw	x,(OFST+5,sp)
4960  d9dd 1f05          	ldw	(OFST-5,sp),x
4962                     ; 997     if (response == NULL || buf == NULL) {
4964  d9df 1e0b          	ldw	x,(OFST+1,sp)
4965  d9e1 2704          	jreq	L3522
4967  d9e3 1e0f          	ldw	x,(OFST+5,sp)
4968  d9e5 2605          	jrne	L1522
4969  d9e7               L3522:
4970                     ; 998       return MQTT_ERROR_NULLPTR;
4972  d9e7 ae8001        	ldw	x,#32769
4974  d9ea 2009          	jra	L223
4975  d9ec               L1522:
4976                     ; 1000     fixed_header = &(response->fixed_header);
4978  d9ec 1e0b          	ldw	x,(OFST+1,sp)
4979  d9ee 1f07          	ldw	(OFST-3,sp),x
4981                     ; 1003     if (bufsz == 0) return 0;
4983  d9f0 1e11          	ldw	x,(OFST+7,sp)
4984  d9f2 2604          	jrne	L5522
4987  d9f4               LC019:
4990  d9f4 5f            	clrw	x
4992  d9f5               L223:
4994  d9f5 5b0c          	addw	sp,#12
4995  d9f7 81            	ret	
4996  d9f8               L5522:
4997                     ; 1006     fixed_header->control_type  = (uint8_t)(*buf >> 4);
4999  d9f8 1e0f          	ldw	x,(OFST+5,sp)
5000  d9fa f6            	ld	a,(x)
5001  d9fb 4e            	swap	a
5002  d9fc 1e07          	ldw	x,(OFST-3,sp)
5003  d9fe a40f          	and	a,#15
5004  da00 f7            	ld	(x),a
5005                     ; 1007     fixed_header->control_flags = (uint8_t)(*buf & 0x0F);
5007  da01 1e0f          	ldw	x,(OFST+5,sp)
5008  da03 f6            	ld	a,(x)
5009  da04 1e07          	ldw	x,(OFST-3,sp)
5010  da06 e804          	xor	a,(4,x)
5011  da08 a40f          	and	a,#15
5012  da0a e804          	xor	a,(4,x)
5013  da0c e704          	ld	(4,x),a
5014                     ; 1010     fixed_header->remaining_length = 0;
5016  da0e 4f            	clr	a
5017  da0f e708          	ld	(8,x),a
5018  da11 e707          	ld	(7,x),a
5019  da13 e706          	ld	(6,x),a
5020  da15 e705          	ld	(5,x),a
5021                     ; 1012     lshift = 0;
5023  da17 5f            	clrw	x
5024  da18 1f09          	ldw	(OFST-1,sp),x
5026  da1a               L7522:
5027                     ; 1015         if(lshift == 28) {
5029  da1a 1e09          	ldw	x,(OFST-1,sp)
5030  da1c a3001c        	cpw	x,#28
5031  da1f 2605          	jrne	L5622
5032                     ; 1016             return MQTT_ERROR_INVALID_REMAINING_LENGTH;
5034  da21 ae801a        	ldw	x,#32794
5036  da24 20cf          	jra	L223
5037  da26               L5622:
5038                     ; 1020         --bufsz;
5040  da26 1e11          	ldw	x,(OFST+7,sp)
5041  da28 5a            	decw	x
5042  da29 1f11          	ldw	(OFST+7,sp),x
5043                     ; 1021         ++buf;
5045  da2b 1e0f          	ldw	x,(OFST+5,sp)
5046  da2d 5c            	incw	x
5047  da2e 1f0f          	ldw	(OFST+5,sp),x
5048                     ; 1022         if (bufsz == 0) return 0;
5050  da30 1e11          	ldw	x,(OFST+7,sp)
5053  da32 27c0          	jreq	LC019
5054                     ; 1025         fixed_header->remaining_length += (*buf & 0x7F) << lshift;
5056  da34 160f          	ldw	y,(OFST+5,sp)
5057  da36 1e07          	ldw	x,(OFST-3,sp)
5058  da38 90f6          	ld	a,(y)
5059  da3a a47f          	and	a,#127
5060  da3c 905f          	clrw	y
5061  da3e 9097          	ld	yl,a
5062  da40 7b0a          	ld	a,(OFST+0,sp)
5063  da42 2705          	jreq	L413
5064  da44               L613:
5065  da44 9058          	sllw	y
5066  da46 4a            	dec	a
5067  da47 26fb          	jrne	L613
5068  da49               L413:
5069  da49 cdf8c3        	call	c_itoly
5071  da4c 1c0005        	addw	x,#5
5072  da4f cdf92f        	call	c_lgadd
5074                     ; 1026         lshift += 7;
5076  da52 1e09          	ldw	x,(OFST-1,sp)
5077  da54 1c0007        	addw	x,#7
5078  da57 1f09          	ldw	(OFST-1,sp),x
5080                     ; 1027     } while(*buf & 0x80); /* while continue bit is set */ 
5082  da59 1e0f          	ldw	x,(OFST+5,sp)
5083  da5b f6            	ld	a,(x)
5084  da5c 2bbc          	jrmi	L7522
5085                     ; 1030     --bufsz;
5087  da5e 1e11          	ldw	x,(OFST+7,sp)
5088  da60 5a            	decw	x
5089  da61 1f11          	ldw	(OFST+7,sp),x
5090                     ; 1031     ++buf;
5092  da63 1e0f          	ldw	x,(OFST+5,sp)
5093  da65 5c            	incw	x
5094  da66 1f0f          	ldw	(OFST+5,sp),x
5095                     ; 1034     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5097  da68 1e07          	ldw	x,(OFST-3,sp)
5098  da6a cdd9a2        	call	L3512_mqtt_fixed_header_rule_violation
5100  da6d 1f09          	ldw	(OFST-1,sp),x
5102                     ; 1035     if (errcode) return errcode;
5107  da6f 2684          	jrne	L223
5108                     ; 1038     if (bufsz < fixed_header->remaining_length) return 0;
5110  da71 1e11          	ldw	x,(OFST+7,sp)
5111  da73 cdfb31        	call	c_uitolx
5113  da76 96            	ldw	x,sp
5114  da77 5c            	incw	x
5115  da78 cdfad0        	call	c_rtol
5118  da7b 1e07          	ldw	x,(OFST-3,sp)
5119  da7d 1c0005        	addw	x,#5
5120  da80 cdf96a        	call	c_ltor
5122  da83 96            	ldw	x,sp
5123  da84 5c            	incw	x
5124  da85 cdf8ff        	call	c_lcmp
5128  da88 2303ccd9f4    	jrugt	LC019
5129                     ; 1041     return buf - start;
5131  da8d 1e0f          	ldw	x,(OFST+5,sp)
5132  da8f 72f005        	subw	x,(OFST-5,sp)
5134  da92 ccd9f5        	jra	L223
5214                     	switch	.const
5215  9efd               L033:
5216  9efd 00000080      	dc.l	128
5217                     ; 1045 int16_t mqtt_pack_fixed_header(uint8_t *buf, uint16_t bufsz, const struct mqtt_fixed_header *fixed_header)
5217                     ; 1046 {
5218                     .text:	section	.text,new
5219  da95               _mqtt_pack_fixed_header:
5221  da95 89            	pushw	x
5222  da96 520c          	subw	sp,#12
5223       0000000c      OFST:	set	12
5226                     ; 1047     const uint8_t *start = buf;
5228  da98 1f05          	ldw	(OFST-7,sp),x
5230                     ; 1052     if (fixed_header == NULL || buf == NULL) {
5232  da9a 1e13          	ldw	x,(OFST+7,sp)
5233  da9c 2704          	jreq	L5332
5235  da9e 1e0d          	ldw	x,(OFST+1,sp)
5236  daa0 2605          	jrne	L3332
5237  daa2               L5332:
5238                     ; 1053       return MQTT_ERROR_NULLPTR;
5240  daa2 ae8001        	ldw	x,#32769
5242  daa5 2009          	jra	L233
5243  daa7               L3332:
5244                     ; 1057     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5246  daa7 1e13          	ldw	x,(OFST+7,sp)
5247  daa9 cdd9a2        	call	L3512_mqtt_fixed_header_rule_violation
5249  daac 1f07          	ldw	(OFST-5,sp),x
5251                     ; 1058     if (errcode) return errcode;
5253  daae 2703          	jreq	L7332
5257  dab0               L233:
5259  dab0 5b0e          	addw	sp,#14
5260  dab2 81            	ret	
5261  dab3               L7332:
5262                     ; 1061     if (bufsz == 0) return 0;
5264  dab3 1e11          	ldw	x,(OFST+5,sp)
5265  dab5 2603          	jrne	L1432
5268  dab7 5f            	clrw	x
5270  dab8 20f6          	jra	L233
5271  daba               L1432:
5272                     ; 1064     *buf =  (uint8_t)((fixed_header->control_type << 4) & 0xF0);
5274  daba 1e13          	ldw	x,(OFST+7,sp)
5275  dabc f6            	ld	a,(x)
5276  dabd 97            	ld	xl,a
5277  dabe a610          	ld	a,#16
5278  dac0 42            	mul	x,a
5279  dac1 9f            	ld	a,xl
5280  dac2 1e0d          	ldw	x,(OFST+1,sp)
5281  dac4 a4f0          	and	a,#240
5282  dac6 f7            	ld	(x),a
5283                     ; 1065     *buf |= (uint8_t)(fixed_header->control_flags & 0x0F);
5285  dac7 1613          	ldw	y,(OFST+7,sp)
5286  dac9 90e604        	ld	a,(4,y)
5287  dacc a40f          	and	a,#15
5288  dace fa            	or	a,(x)
5289  dacf f7            	ld	(x),a
5290                     ; 1067     remaining_length = fixed_header->remaining_length;
5292  dad0 93            	ldw	x,y
5293  dad1 ee07          	ldw	x,(7,x)
5294  dad3 1f0b          	ldw	(OFST-1,sp),x
5295  dad5 93            	ldw	x,y
5296  dad6 ee05          	ldw	x,(5,x)
5297  dad8 1f09          	ldw	(OFST-3,sp),x
5299  dada               L3432:
5300                     ; 1075         --bufsz;
5302  dada 1e11          	ldw	x,(OFST+5,sp)
5303  dadc 5a            	decw	x
5304  dadd 1f11          	ldw	(OFST+5,sp),x
5305                     ; 1076         ++buf;
5307  dadf 1e0d          	ldw	x,(OFST+1,sp)
5308  dae1 5c            	incw	x
5309  dae2 1f0d          	ldw	(OFST+1,sp),x
5310                     ; 1077         if (bufsz == 0) return 0;
5312  dae4 1e11          	ldw	x,(OFST+5,sp)
5313  dae6 2603          	jrne	L1532
5316  dae8 5f            	clrw	x
5318  dae9 20c5          	jra	L233
5319  daeb               L1532:
5320                     ; 1080         *buf  = (uint8_t)(remaining_length & 0x7F);
5322  daeb 7b0c          	ld	a,(OFST+0,sp)
5323  daed 1e0d          	ldw	x,(OFST+1,sp)
5324  daef a47f          	and	a,#127
5325  daf1 f7            	ld	(x),a
5326                     ; 1081         if(remaining_length > 127) *buf |= 0x80;
5328  daf2 96            	ldw	x,sp
5329  daf3 1c0009        	addw	x,#OFST-3
5330  daf6 cdf96a        	call	c_ltor
5332  daf9 ae9efd        	ldw	x,#L033
5333  dafc cdf8ff        	call	c_lcmp
5335  daff 2506          	jrult	L3532
5338  db01 1e0d          	ldw	x,(OFST+1,sp)
5339  db03 f6            	ld	a,(x)
5340  db04 aa80          	or	a,#128
5341  db06 f7            	ld	(x),a
5342  db07               L3532:
5343                     ; 1082         remaining_length = remaining_length >> 7;
5345  db07 96            	ldw	x,sp
5346  db08 1c0009        	addw	x,#OFST-3
5347  db0b a607          	ld	a,#7
5348  db0d cdf95c        	call	c_lgursh
5351                     ; 1083     } while(*buf & 0x80);
5353  db10 1e0d          	ldw	x,(OFST+1,sp)
5354  db12 f6            	ld	a,(x)
5355  db13 2bc5          	jrmi	L3432
5356                     ; 1086     --bufsz;
5358  db15 1e11          	ldw	x,(OFST+5,sp)
5359  db17 5a            	decw	x
5360  db18 1f11          	ldw	(OFST+5,sp),x
5361                     ; 1087     ++buf;
5363  db1a 1e0d          	ldw	x,(OFST+1,sp)
5364  db1c 5c            	incw	x
5365  db1d 1f0d          	ldw	(OFST+1,sp),x
5366                     ; 1090     if (bufsz < fixed_header->remaining_length) return 0;
5368  db1f 1e11          	ldw	x,(OFST+5,sp)
5369  db21 cdfb31        	call	c_uitolx
5371  db24 96            	ldw	x,sp
5372  db25 5c            	incw	x
5373  db26 cdfad0        	call	c_rtol
5376  db29 1e13          	ldw	x,(OFST+7,sp)
5377  db2b 1c0005        	addw	x,#5
5378  db2e cdf96a        	call	c_ltor
5380  db31 96            	ldw	x,sp
5381  db32 5c            	incw	x
5382  db33 cdf8ff        	call	c_lcmp
5384  db36 2304          	jrule	L5532
5387  db38 5f            	clrw	x
5389  db39 ccdab0        	jra	L233
5390  db3c               L5532:
5391                     ; 1093     return buf - start;
5393  db3c 1e0d          	ldw	x,(OFST+1,sp)
5394  db3e 72f005        	subw	x,(OFST-7,sp)
5396  db41 ccdab0        	jra	L233
5549                     ; 1098 int16_t mqtt_pack_connection_request(uint8_t* buf, uint16_t bufsz,
5549                     ; 1099                                      const char* client_id,
5549                     ; 1100                                      const char* will_topic,
5549                     ; 1101                                      const void* will_message,
5549                     ; 1102                                      uint16_t will_message_size,
5549                     ; 1103                                      const char* user_name,
5549                     ; 1104                                      const char* password,
5549                     ; 1105                                      uint8_t connect_flags,
5549                     ; 1106                                      uint16_t keep_alive)
5549                     ; 1107 { 
5550                     .text:	section	.text,new
5551  db44               _mqtt_pack_connection_request:
5553  db44 89            	pushw	x
5554  db45 520d          	subw	sp,#13
5555       0000000d      OFST:	set	13
5558                     ; 1110     const uint8_t *const start = buf;
5560  db47 1f01          	ldw	(OFST-12,sp),x
5562                     ; 1114     fixed_header.control_type = MQTT_CONTROL_CONNECT;
5564  db49 a601          	ld	a,#1
5565  db4b 6b03          	ld	(OFST-10,sp),a
5567                     ; 1115     fixed_header.control_flags = 0x00;
5569  db4d 7b07          	ld	a,(OFST-6,sp)
5570  db4f a4f0          	and	a,#240
5571  db51 6b07          	ld	(OFST-6,sp),a
5573                     ; 1118     connect_flags = (uint8_t)(connect_flags & ~MQTT_CONNECT_RESERVED);
5575  db53 7b20          	ld	a,(OFST+19,sp)
5576  db55 a4fe          	and	a,#254
5577  db57 6b20          	ld	(OFST+19,sp),a
5578                     ; 1121     remaining_length = 10; /* size of variable header */
5580  db59 ae000a        	ldw	x,#10
5581  db5c 1f0c          	ldw	(OFST-1,sp),x
5583                     ; 1133     remaining_length += __mqtt_packed_cstrlen(client_id);
5585  db5e 1e14          	ldw	x,(OFST+7,sp)
5586  db60 cdf6dd        	call	_strlen
5588  db63 1c0002        	addw	x,#2
5589  db66 72fb0c        	addw	x,(OFST-1,sp)
5590  db69 1f0c          	ldw	(OFST-1,sp),x
5592                     ; 1163     connect_flags |= MQTT_CONNECT_WILL_FLAG;
5594  db6b 7b20          	ld	a,(OFST+19,sp)
5595                     ; 1164     connect_flags |= MQTT_CONNECT_WILL_RETAIN;
5597  db6d aa24          	or	a,#36
5598  db6f 6b20          	ld	(OFST+19,sp),a
5599                     ; 1165     remaining_length += __mqtt_packed_cstrlen(will_topic);
5601  db71 1e16          	ldw	x,(OFST+9,sp)
5602  db73 cdf6dd        	call	_strlen
5604  db76 1c0002        	addw	x,#2
5605  db79 72fb0c        	addw	x,(OFST-1,sp)
5606  db7c 1f0c          	ldw	(OFST-1,sp),x
5608                     ; 1166     remaining_length += 2 + will_message_size; /* size of will_message */
5610  db7e 1e1a          	ldw	x,(OFST+13,sp)
5611  db80 1c0002        	addw	x,#2
5612  db83 72fb0c        	addw	x,(OFST-1,sp)
5613  db86 1f0c          	ldw	(OFST-1,sp),x
5615                     ; 1168     if (user_name != NULL) {
5617  db88 1e1c          	ldw	x,(OFST+15,sp)
5618  db8a 2713          	jreq	L5442
5619                     ; 1170         connect_flags |= MQTT_CONNECT_USER_NAME;
5621  db8c 7b20          	ld	a,(OFST+19,sp)
5622  db8e aa80          	or	a,#128
5623  db90 6b20          	ld	(OFST+19,sp),a
5624                     ; 1171         remaining_length += __mqtt_packed_cstrlen(user_name);
5626  db92 cdf6dd        	call	_strlen
5628  db95 1c0002        	addw	x,#2
5629  db98 72fb0c        	addw	x,(OFST-1,sp)
5630  db9b 1f0c          	ldw	(OFST-1,sp),x
5633  db9d 2006          	jra	L7442
5634  db9f               L5442:
5635                     ; 1173     else connect_flags &= (uint8_t)(~MQTT_CONNECT_USER_NAME);
5637  db9f 7b20          	ld	a,(OFST+19,sp)
5638  dba1 a47f          	and	a,#127
5639  dba3 6b20          	ld	(OFST+19,sp),a
5640  dba5               L7442:
5641                     ; 1175     if (password != NULL) {
5643  dba5 1e1e          	ldw	x,(OFST+17,sp)
5644  dba7 2713          	jreq	L1542
5645                     ; 1177         connect_flags |= MQTT_CONNECT_PASSWORD;
5647  dba9 7b20          	ld	a,(OFST+19,sp)
5648  dbab aa40          	or	a,#64
5649  dbad 6b20          	ld	(OFST+19,sp),a
5650                     ; 1178         remaining_length += __mqtt_packed_cstrlen(password);
5652  dbaf cdf6dd        	call	_strlen
5654  dbb2 1c0002        	addw	x,#2
5655  dbb5 72fb0c        	addw	x,(OFST-1,sp)
5656  dbb8 1f0c          	ldw	(OFST-1,sp),x
5659  dbba 2008          	jra	L3542
5660  dbbc               L1542:
5661                     ; 1180     else connect_flags &= (uint8_t)(~MQTT_CONNECT_PASSWORD);
5663  dbbc 7b20          	ld	a,(OFST+19,sp)
5664  dbbe a4bf          	and	a,#191
5665  dbc0 6b20          	ld	(OFST+19,sp),a
5666  dbc2 1e0c          	ldw	x,(OFST-1,sp)
5667  dbc4               L3542:
5668                     ; 1183     fixed_header.remaining_length = remaining_length;
5670  dbc4 cdfb31        	call	c_uitolx
5672  dbc7 96            	ldw	x,sp
5673  dbc8 1c0008        	addw	x,#OFST-5
5674  dbcb cdfad0        	call	c_rtol
5677                     ; 1186     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
5679  dbce 96            	ldw	x,sp
5680  dbcf 1c0003        	addw	x,#OFST-10
5681  dbd2 89            	pushw	x
5682  dbd3 1e14          	ldw	x,(OFST+7,sp)
5683  dbd5 89            	pushw	x
5684  dbd6 1e12          	ldw	x,(OFST+5,sp)
5685  dbd8 cdda95        	call	_mqtt_pack_fixed_header
5687  dbdb 5b04          	addw	sp,#4
5688  dbdd 1f0c          	ldw	(OFST-1,sp),x
5690                     ; 1187     if (rv <= 0) {
5692  dbdf 9c            	rvf	
5693                     ; 1188       return rv; /* something went wrong */
5696  dbe0 2d1b          	jrsle	L073
5697                     ; 1191     buf += rv;
5699  dbe2 1e0e          	ldw	x,(OFST+1,sp)
5700  dbe4 72fb0c        	addw	x,(OFST-1,sp)
5701  dbe7 1f0e          	ldw	(OFST+1,sp),x
5702                     ; 1192     bufsz -= rv;
5704  dbe9 1e12          	ldw	x,(OFST+5,sp)
5705  dbeb 72f00c        	subw	x,(OFST-1,sp)
5706  dbee 1f12          	ldw	(OFST+5,sp),x
5707                     ; 1195     if (bufsz < fixed_header.remaining_length) return 0;
5709  dbf0 cdfb31        	call	c_uitolx
5711  dbf3 96            	ldw	x,sp
5712  dbf4 1c0008        	addw	x,#OFST-5
5713  dbf7 cdf8ff        	call	c_lcmp
5715  dbfa 2404          	jruge	L7542
5718  dbfc 5f            	clrw	x
5720  dbfd               L073:
5722  dbfd 5b0f          	addw	sp,#15
5723  dbff 81            	ret	
5724  dc00               L7542:
5725                     ; 1198     *buf++ = 0x00;
5727  dc00 1e0e          	ldw	x,(OFST+1,sp)
5728  dc02 7f            	clr	(x)
5729  dc03 5c            	incw	x
5730                     ; 1199     *buf++ = 0x04;
5732  dc04 a604          	ld	a,#4
5733  dc06 f7            	ld	(x),a
5734  dc07 5c            	incw	x
5735                     ; 1200     *buf++ = (uint8_t) 'M';
5737  dc08 a64d          	ld	a,#77
5738  dc0a f7            	ld	(x),a
5739  dc0b 5c            	incw	x
5740                     ; 1201     *buf++ = (uint8_t) 'Q';
5742  dc0c a651          	ld	a,#81
5743  dc0e f7            	ld	(x),a
5744  dc0f 5c            	incw	x
5745                     ; 1202     *buf++ = (uint8_t) 'T';
5747  dc10 a654          	ld	a,#84
5748  dc12 f7            	ld	(x),a
5749  dc13 5c            	incw	x
5750                     ; 1203     *buf++ = (uint8_t) 'T';
5752  dc14 f7            	ld	(x),a
5753  dc15 5c            	incw	x
5754                     ; 1204     *buf++ = MQTT_PROTOCOL_LEVEL;
5756  dc16 a604          	ld	a,#4
5757  dc18 f7            	ld	(x),a
5758  dc19 5c            	incw	x
5759                     ; 1205     *buf++ = connect_flags;
5761  dc1a 7b20          	ld	a,(OFST+19,sp)
5762  dc1c f7            	ld	(x),a
5763  dc1d 5c            	incw	x
5764  dc1e 1f0e          	ldw	(OFST+1,sp),x
5765                     ; 1206     buf += __mqtt_pack_uint16(buf, keep_alive);
5767  dc20 1e21          	ldw	x,(OFST+20,sp)
5768  dc22 89            	pushw	x
5769  dc23 1e10          	ldw	x,(OFST+3,sp)
5770  dc25 cde418        	call	___mqtt_pack_uint16
5772  dc28 5b02          	addw	sp,#2
5773  dc2a 72fb0e        	addw	x,(OFST+1,sp)
5774  dc2d 1f0e          	ldw	(OFST+1,sp),x
5775                     ; 1209     buf += __mqtt_pack_str(buf, client_id);
5777  dc2f 1e14          	ldw	x,(OFST+7,sp)
5778  dc31 89            	pushw	x
5779  dc32 1e10          	ldw	x,(OFST+3,sp)
5780  dc34 cde459        	call	___mqtt_pack_str
5782  dc37 5b02          	addw	sp,#2
5783  dc39 72fb0e        	addw	x,(OFST+1,sp)
5784  dc3c 1f0e          	ldw	(OFST+1,sp),x
5785                     ; 1210     if (connect_flags & MQTT_CONNECT_WILL_FLAG) {
5787  dc3e 7b20          	ld	a,(OFST+19,sp)
5788  dc40 a504          	bcp	a,#4
5789  dc42 273c          	jreq	L1642
5790                     ; 1211         buf += __mqtt_pack_str(buf, will_topic);
5792  dc44 1e16          	ldw	x,(OFST+9,sp)
5793  dc46 89            	pushw	x
5794  dc47 1e10          	ldw	x,(OFST+3,sp)
5795  dc49 cde459        	call	___mqtt_pack_str
5797  dc4c 5b02          	addw	sp,#2
5798  dc4e 72fb0e        	addw	x,(OFST+1,sp)
5799  dc51 1f0e          	ldw	(OFST+1,sp),x
5800                     ; 1212         buf += __mqtt_pack_uint16(buf, (uint16_t)will_message_size);
5802  dc53 1e1a          	ldw	x,(OFST+13,sp)
5803  dc55 89            	pushw	x
5804  dc56 1e10          	ldw	x,(OFST+3,sp)
5805  dc58 cde418        	call	___mqtt_pack_uint16
5807  dc5b 5b02          	addw	sp,#2
5808  dc5d 72fb0e        	addw	x,(OFST+1,sp)
5809  dc60 1f0e          	ldw	(OFST+1,sp),x
5810                     ; 1213         memcpy(buf, will_message, will_message_size);
5812  dc62 bf04          	ldw	c_x,x
5813  dc64 1618          	ldw	y,(OFST+11,sp)
5814  dc66 90bf07        	ldw	c_y,y
5815  dc69 1e1a          	ldw	x,(OFST+13,sp)
5816  dc6b 270a          	jreq	L063
5817  dc6d               L263:
5818  dc6d 5a            	decw	x
5819  dc6e 92d607        	ld	a,([c_y.w],x)
5820  dc71 92d704        	ld	([c_x.w],x),a
5821  dc74 5d            	tnzw	x
5822  dc75 26f6          	jrne	L263
5823  dc77               L063:
5824                     ; 1214         buf += will_message_size;
5826  dc77 1e0e          	ldw	x,(OFST+1,sp)
5827  dc79 72fb1a        	addw	x,(OFST+13,sp)
5828  dc7c 1f0e          	ldw	(OFST+1,sp),x
5829  dc7e 7b20          	ld	a,(OFST+19,sp)
5830  dc80               L1642:
5831                     ; 1217     if (connect_flags & MQTT_CONNECT_USER_NAME) buf += __mqtt_pack_str(buf, user_name);
5833  dc80 a580          	bcp	a,#128
5834  dc82 2711          	jreq	L3642
5837  dc84 1e1c          	ldw	x,(OFST+15,sp)
5838  dc86 89            	pushw	x
5839  dc87 1e10          	ldw	x,(OFST+3,sp)
5840  dc89 cde459        	call	___mqtt_pack_str
5842  dc8c 5b02          	addw	sp,#2
5843  dc8e 72fb0e        	addw	x,(OFST+1,sp)
5844  dc91 1f0e          	ldw	(OFST+1,sp),x
5845  dc93 7b20          	ld	a,(OFST+19,sp)
5846  dc95               L3642:
5847                     ; 1219     if (connect_flags & MQTT_CONNECT_PASSWORD) buf += __mqtt_pack_str(buf, password);
5849  dc95 a540          	bcp	a,#64
5850  dc97 270f          	jreq	L5642
5853  dc99 1e1e          	ldw	x,(OFST+17,sp)
5854  dc9b 89            	pushw	x
5855  dc9c 1e10          	ldw	x,(OFST+3,sp)
5856  dc9e cde459        	call	___mqtt_pack_str
5858  dca1 5b02          	addw	sp,#2
5859  dca3 72fb0e        	addw	x,(OFST+1,sp)
5860  dca6 1f0e          	ldw	(OFST+1,sp),x
5861  dca8               L5642:
5862                     ; 1222     return buf - start;
5864  dca8 72f001        	subw	x,(OFST-12,sp)
5866  dcab ccdbfd        	jra	L073
5936                     	switch	.const
5937  9f01               L473:
5938  9f01 00000002      	dc.l	2
5939                     ; 1227 int16_t mqtt_unpack_connack_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
5939                     ; 1228 {
5940                     .text:	section	.text,new
5941  dcae               _mqtt_unpack_connack_response:
5943  dcae 89            	pushw	x
5944  dcaf 5204          	subw	sp,#4
5945       00000004      OFST:	set	4
5948                     ; 1229     const uint8_t *const start = buf;
5950  dcb1 1e09          	ldw	x,(OFST+5,sp)
5951  dcb3 1f01          	ldw	(OFST-3,sp),x
5953                     ; 1233     if (mqtt_response->fixed_header.remaining_length != 2) {
5955  dcb5 1e05          	ldw	x,(OFST+1,sp)
5956  dcb7 1c0005        	addw	x,#5
5957  dcba cdf96a        	call	c_ltor
5959  dcbd ae9f01        	ldw	x,#L473
5960  dcc0 cdf8ff        	call	c_lcmp
5962  dcc3 2705          	jreq	L5252
5963                     ; 1234       return MQTT_ERROR_MALFORMED_RESPONSE;
5965  dcc5 ae800c        	ldw	x,#32780
5967  dcc8 2011          	jra	L673
5968  dcca               L5252:
5969                     ; 1237     response = &(mqtt_response->decoded.connack);
5971  dcca 1e05          	ldw	x,(OFST+1,sp)
5972  dccc 1c0009        	addw	x,#9
5973  dccf 1f03          	ldw	(OFST-1,sp),x
5975                     ; 1239     if (*buf & 0xFE) {
5977  dcd1 1e09          	ldw	x,(OFST+5,sp)
5978  dcd3 f6            	ld	a,(x)
5979  dcd4 a5fe          	bcp	a,#254
5980  dcd6 2706          	jreq	L7252
5981                     ; 1240       return MQTT_ERROR_CONNACK_FORBIDDEN_FLAGS; /* only bit 1 can be set */
5983  dcd8 ae8008        	ldw	x,#32776
5985  dcdb               L673:
5987  dcdb 5b06          	addw	sp,#6
5988  dcdd 81            	ret	
5989  dcde               L7252:
5990                     ; 1242     else response->session_present_flag = *buf++;
5992  dcde 5c            	incw	x
5993  dcdf 1f09          	ldw	(OFST+5,sp),x
5994  dce1 1e03          	ldw	x,(OFST-1,sp)
5995  dce3 f7            	ld	(x),a
5996                     ; 1244     if (*buf > 5u) {
5998  dce4 1e09          	ldw	x,(OFST+5,sp)
5999  dce6 f6            	ld	a,(x)
6000  dce7 a106          	cp	a,#6
6001  dce9 2505          	jrult	L3352
6002                     ; 1245       return MQTT_ERROR_CONNACK_FORBIDDEN_CODE; /* only bit 1 can be set */
6004  dceb ae8009        	ldw	x,#32777
6006  dcee 20eb          	jra	L673
6007  dcf0               L3352:
6008                     ; 1247     else response->return_code = (enum MQTTConnackReturnCode) *buf++;
6010  dcf0 5c            	incw	x
6011  dcf1 1f09          	ldw	(OFST+5,sp),x
6012  dcf3 1e03          	ldw	x,(OFST-1,sp)
6013  dcf5 e701          	ld	(1,x),a
6014                     ; 1249     return buf - start;
6016  dcf7 1e09          	ldw	x,(OFST+5,sp)
6017  dcf9 72f001        	subw	x,(OFST-3,sp)
6019  dcfc 20dd          	jra	L673
6073                     ; 1254 int16_t mqtt_pack_disconnect(uint8_t *buf, uint16_t bufsz)
6073                     ; 1255 {
6074                     .text:	section	.text,new
6075  dcfe               _mqtt_pack_disconnect:
6077  dcfe 89            	pushw	x
6078  dcff 5209          	subw	sp,#9
6079       00000009      OFST:	set	9
6082                     ; 1257     fixed_header.control_type = MQTT_CONTROL_DISCONNECT;
6084  dd01 a60e          	ld	a,#14
6085  dd03 6b01          	ld	(OFST-8,sp),a
6087                     ; 1258     fixed_header.control_flags = 0;
6089  dd05 7b05          	ld	a,(OFST-4,sp)
6090  dd07 a4f0          	and	a,#240
6091  dd09 6b05          	ld	(OFST-4,sp),a
6093                     ; 1259     fixed_header.remaining_length = 0;
6095  dd0b 5f            	clrw	x
6096  dd0c 1f08          	ldw	(OFST-1,sp),x
6097  dd0e 1f06          	ldw	(OFST-3,sp),x
6099                     ; 1260     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6101  dd10 96            	ldw	x,sp
6102  dd11 5c            	incw	x
6103  dd12 89            	pushw	x
6104  dd13 1e10          	ldw	x,(OFST+7,sp)
6105  dd15 89            	pushw	x
6106  dd16 1e0e          	ldw	x,(OFST+5,sp)
6107  dd18 cdda95        	call	_mqtt_pack_fixed_header
6109  dd1b 5b0f          	addw	sp,#15
6112  dd1d 81            	ret	
6166                     ; 1265 int16_t mqtt_pack_ping_request(uint8_t *buf, uint16_t bufsz)
6166                     ; 1266 {
6167                     .text:	section	.text,new
6168  dd1e               _mqtt_pack_ping_request:
6170  dd1e 89            	pushw	x
6171  dd1f 5209          	subw	sp,#9
6172       00000009      OFST:	set	9
6175                     ; 1268     fixed_header.control_type = MQTT_CONTROL_PINGREQ;
6177  dd21 a60c          	ld	a,#12
6178  dd23 6b01          	ld	(OFST-8,sp),a
6180                     ; 1269     fixed_header.control_flags = 0;
6182  dd25 7b05          	ld	a,(OFST-4,sp)
6183  dd27 a4f0          	and	a,#240
6184  dd29 6b05          	ld	(OFST-4,sp),a
6186                     ; 1270     fixed_header.remaining_length = 0;
6188  dd2b 5f            	clrw	x
6189  dd2c 1f08          	ldw	(OFST-1,sp),x
6190  dd2e 1f06          	ldw	(OFST-3,sp),x
6192                     ; 1271     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6194  dd30 96            	ldw	x,sp
6195  dd31 5c            	incw	x
6196  dd32 89            	pushw	x
6197  dd33 1e10          	ldw	x,(OFST+7,sp)
6198  dd35 89            	pushw	x
6199  dd36 1e0e          	ldw	x,(OFST+5,sp)
6200  dd38 cdda95        	call	_mqtt_pack_fixed_header
6202  dd3b 5b0f          	addw	sp,#15
6205  dd3d 81            	ret	
6337                     ; 1276 int16_t mqtt_pack_publish_request(uint8_t *buf, uint16_t bufsz,
6337                     ; 1277                                   const char* topic_name,
6337                     ; 1278                                   uint16_t packet_id,
6337                     ; 1279                                   const void* application_message,
6337                     ; 1280                                   uint16_t application_message_size,
6337                     ; 1281                                   uint8_t publish_flags)
6337                     ; 1282 {
6338                     .text:	section	.text,new
6339  dd3e               _mqtt_pack_publish_request:
6341  dd3e 89            	pushw	x
6342  dd3f 5212          	subw	sp,#18
6343       00000012      OFST:	set	18
6346                     ; 1283     const uint8_t *const start = buf;
6348  dd41 1f01          	ldw	(OFST-17,sp),x
6350                     ; 1290     if(buf == NULL || topic_name == NULL) {
6352  dd43 2704          	jreq	L5662
6354  dd45 1e19          	ldw	x,(OFST+7,sp)
6355  dd47 2605          	jrne	L3662
6356  dd49               L5662:
6357                     ; 1291       return MQTT_ERROR_NULLPTR;
6359  dd49 ae8001        	ldw	x,#32769
6361  dd4c 204f          	jra	L624
6362  dd4e               L3662:
6363                     ; 1295     inspected_qos = (uint8_t)((publish_flags & MQTT_PUBLISH_QOS_MASK) >> 1); /* mask */
6365  dd4e 7b21          	ld	a,(OFST+15,sp)
6366  dd50 a406          	and	a,#6
6367  dd52 44            	srl	a
6368  dd53 6b12          	ld	(OFST+0,sp),a
6370                     ; 1298     fixed_header.control_type = MQTT_CONTROL_PUBLISH;
6372  dd55 a603          	ld	a,#3
6373  dd57 6b03          	ld	(OFST-15,sp),a
6375                     ; 1301     remaining_length = (uint32_t)__mqtt_packed_cstrlen(topic_name);
6377  dd59 cdf6dd        	call	_strlen
6379  dd5c 1c0002        	addw	x,#2
6380  dd5f cdfb31        	call	c_uitolx
6382  dd62 96            	ldw	x,sp
6383  dd63 1c000e        	addw	x,#OFST-4
6384  dd66 cdfad0        	call	c_rtol
6387                     ; 1302     if (inspected_qos > 0) remaining_length += 2;
6389  dd69 7b12          	ld	a,(OFST+0,sp)
6390  dd6b 2709          	jreq	L7662
6393  dd6d 96            	ldw	x,sp
6394  dd6e 1c000e        	addw	x,#OFST-4
6395  dd71 a602          	ld	a,#2
6396  dd73 cdf91f        	call	c_lgadc
6399  dd76               L7662:
6400                     ; 1303     remaining_length += (uint32_t)application_message_size;
6402  dd76 1e1f          	ldw	x,(OFST+13,sp)
6403  dd78 cdfb31        	call	c_uitolx
6405  dd7b 96            	ldw	x,sp
6406  dd7c 1c000e        	addw	x,#OFST-4
6407  dd7f cdf92f        	call	c_lgadd
6410                     ; 1304     fixed_header.remaining_length = remaining_length;
6412  dd82 1e10          	ldw	x,(OFST-2,sp)
6413  dd84 1f0a          	ldw	(OFST-8,sp),x
6414  dd86 1e0e          	ldw	x,(OFST-4,sp)
6415  dd88 1f08          	ldw	(OFST-10,sp),x
6417                     ; 1307     if (inspected_qos == 0) publish_flags &= (uint8_t)(~MQTT_PUBLISH_DUP);
6419  dd8a 7b12          	ld	a,(OFST+0,sp)
6420  dd8c 2608          	jrne	L1762
6423  dd8e 7b21          	ld	a,(OFST+15,sp)
6424  dd90 a4f7          	and	a,#247
6425  dd92 6b21          	ld	(OFST+15,sp),a
6426  dd94 7b12          	ld	a,(OFST+0,sp)
6427  dd96               L1762:
6428                     ; 1310     if (inspected_qos == 3) {
6430  dd96 a103          	cp	a,#3
6431  dd98 2606          	jrne	L3762
6432                     ; 1311       return MQTT_ERROR_PUBLISH_FORBIDDEN_QOS;
6434  dd9a ae800a        	ldw	x,#32778
6436  dd9d               L624:
6438  dd9d 5b14          	addw	sp,#20
6439  dd9f 81            	ret	
6440  dda0               L3762:
6441                     ; 1313     fixed_header.control_flags = publish_flags;
6443  dda0 7b21          	ld	a,(OFST+15,sp)
6444  dda2 1807          	xor	a,(OFST-11,sp)
6445  dda4 a40f          	and	a,#15
6446  dda6 1807          	xor	a,(OFST-11,sp)
6447  dda8 6b07          	ld	(OFST-11,sp),a
6449                     ; 1316     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6451  ddaa 96            	ldw	x,sp
6452  ddab 1c0003        	addw	x,#OFST-15
6453  ddae 89            	pushw	x
6454  ddaf 1e19          	ldw	x,(OFST+7,sp)
6455  ddb1 89            	pushw	x
6456  ddb2 1e17          	ldw	x,(OFST+5,sp)
6457  ddb4 cdda95        	call	_mqtt_pack_fixed_header
6459  ddb7 5b04          	addw	sp,#4
6460  ddb9 1f0c          	ldw	(OFST-6,sp),x
6462                     ; 1317     if (rv <= 0) return rv; /* something went wrong */
6464  ddbb 9c            	rvf	
6468  ddbc 2ddf          	jrsle	L624
6469                     ; 1319     buf += rv;
6471  ddbe 1e13          	ldw	x,(OFST+1,sp)
6472  ddc0 72fb0c        	addw	x,(OFST-6,sp)
6473  ddc3 1f13          	ldw	(OFST+1,sp),x
6474                     ; 1320     bufsz -= rv;
6476  ddc5 1e17          	ldw	x,(OFST+5,sp)
6477  ddc7 72f00c        	subw	x,(OFST-6,sp)
6478  ddca 1f17          	ldw	(OFST+5,sp),x
6479                     ; 1323     if (bufsz < remaining_length) return 0;
6481  ddcc cdfb31        	call	c_uitolx
6483  ddcf 96            	ldw	x,sp
6484  ddd0 1c000e        	addw	x,#OFST-4
6485  ddd3 cdf8ff        	call	c_lcmp
6487  ddd6 2403          	jruge	L7762
6490  ddd8 5f            	clrw	x
6492  ddd9 20c2          	jra	L624
6493  dddb               L7762:
6494                     ; 1326     buf += __mqtt_pack_str(buf, topic_name);
6496  dddb 1e19          	ldw	x,(OFST+7,sp)
6497  dddd 89            	pushw	x
6498  ddde 1e15          	ldw	x,(OFST+3,sp)
6499  dde0 cde459        	call	___mqtt_pack_str
6501  dde3 5b02          	addw	sp,#2
6502  dde5 72fb13        	addw	x,(OFST+1,sp)
6503  dde8 1f13          	ldw	(OFST+1,sp),x
6504                     ; 1327     if (inspected_qos > 0) buf += __mqtt_pack_uint16(buf, packet_id);
6506  ddea 7b12          	ld	a,(OFST+0,sp)
6507  ddec 270f          	jreq	L1072
6510  ddee 1e1b          	ldw	x,(OFST+9,sp)
6511  ddf0 89            	pushw	x
6512  ddf1 1e15          	ldw	x,(OFST+3,sp)
6513  ddf3 cde418        	call	___mqtt_pack_uint16
6515  ddf6 5b02          	addw	sp,#2
6516  ddf8 72fb13        	addw	x,(OFST+1,sp)
6517  ddfb 1f13          	ldw	(OFST+1,sp),x
6518  ddfd               L1072:
6519                     ; 1330     memcpy(buf, application_message, application_message_size);
6521  ddfd bf04          	ldw	c_x,x
6522  ddff 161d          	ldw	y,(OFST+11,sp)
6523  de01 90bf07        	ldw	c_y,y
6524  de04 1e1f          	ldw	x,(OFST+13,sp)
6525  de06 270a          	jreq	L224
6526  de08               L424:
6527  de08 5a            	decw	x
6528  de09 92d607        	ld	a,([c_y.w],x)
6529  de0c 92d704        	ld	([c_x.w],x),a
6530  de0f 5d            	tnzw	x
6531  de10 26f6          	jrne	L424
6532  de12               L224:
6533                     ; 1331     buf += application_message_size;
6535  de12 1e13          	ldw	x,(OFST+1,sp)
6536  de14 72fb1f        	addw	x,(OFST+13,sp)
6537  de17 1f13          	ldw	(OFST+1,sp),x
6538                     ; 1333     return buf - start;
6540  de19 72f001        	subw	x,(OFST-17,sp)
6542  de1c ccdd9d        	jra	L624
6625                     	switch	.const
6626  9f05               L234:
6627  9f05 00000004      	dc.l	4
6628                     ; 1337 int16_t mqtt_unpack_publish_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
6628                     ; 1338 {    
6629                     .text:	section	.text,new
6630  de1f               _mqtt_unpack_publish_response:
6632  de1f 89            	pushw	x
6633  de20 5206          	subw	sp,#6
6634       00000006      OFST:	set	6
6637                     ; 1339     const uint8_t *const start = buf;
6639  de22 1e0b          	ldw	x,(OFST+5,sp)
6640  de24 1f01          	ldw	(OFST-5,sp),x
6642                     ; 1343     fixed_header = &(mqtt_response->fixed_header);
6644  de26 1e07          	ldw	x,(OFST+1,sp)
6645  de28 1f03          	ldw	(OFST-3,sp),x
6647                     ; 1344     response = &(mqtt_response->decoded.publish);
6649  de2a 1c0009        	addw	x,#9
6650  de2d 1f05          	ldw	(OFST-1,sp),x
6652                     ; 1347     response->dup_flag = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_DUP) >> 3);
6654  de2f 1e03          	ldw	x,(OFST-3,sp)
6655  de31 e604          	ld	a,(4,x)
6656  de33 a40f          	and	a,#15
6657  de35 44            	srl	a
6658  de36 44            	srl	a
6659  de37 1e05          	ldw	x,(OFST-1,sp)
6660  de39 44            	srl	a
6661  de3a f7            	ld	(x),a
6662                     ; 1348     response->qos_level = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_QOS_MASK) >> 1);
6664  de3b 1e03          	ldw	x,(OFST-3,sp)
6665  de3d e604          	ld	a,(4,x)
6666  de3f a406          	and	a,#6
6667  de41 1e05          	ldw	x,(OFST-1,sp)
6668  de43 44            	srl	a
6669  de44 e701          	ld	(1,x),a
6670                     ; 1349     response->retain_flag = (uint8_t)(fixed_header->control_flags & MQTT_PUBLISH_RETAIN);
6672  de46 1e03          	ldw	x,(OFST-3,sp)
6673  de48 e604          	ld	a,(4,x)
6674  de4a 1e05          	ldw	x,(OFST-1,sp)
6675  de4c a401          	and	a,#1
6676  de4e e702          	ld	(2,x),a
6677                     ; 1352     if (mqtt_response->fixed_header.remaining_length < 4) {
6679  de50 1e07          	ldw	x,(OFST+1,sp)
6680  de52 1c0005        	addw	x,#5
6681  de55 cdf96a        	call	c_ltor
6683  de58 ae9f05        	ldw	x,#L234
6684  de5b cdf8ff        	call	c_lcmp
6686  de5e 2405          	jruge	L7472
6687                     ; 1353         return MQTT_ERROR_MALFORMED_RESPONSE;
6689  de60 ae800c        	ldw	x,#32780
6691  de63 2072          	jra	L044
6692  de65               L7472:
6693                     ; 1357     response->topic_name_size = __mqtt_unpack_uint16(buf);
6695  de65 1e0b          	ldw	x,(OFST+5,sp)
6696  de67 cde43c        	call	___mqtt_unpack_uint16
6698  de6a 1605          	ldw	y,(OFST-1,sp)
6699  de6c 90ef03        	ldw	(3,y),x
6700                     ; 1358     buf += 2;
6702  de6f 1e0b          	ldw	x,(OFST+5,sp)
6703  de71 1c0002        	addw	x,#2
6704  de74 1f0b          	ldw	(OFST+5,sp),x
6705                     ; 1359     response->topic_name = buf;
6707  de76 93            	ldw	x,y
6708  de77 160b          	ldw	y,(OFST+5,sp)
6709  de79 ef05          	ldw	(5,x),y
6710                     ; 1360     buf += response->topic_name_size;
6712  de7b ee03          	ldw	x,(3,x)
6713  de7d 72fb0b        	addw	x,(OFST+5,sp)
6714  de80 1f0b          	ldw	(OFST+5,sp),x
6715                     ; 1362     if (response->qos_level > 0) {
6717  de82 1e05          	ldw	x,(OFST-1,sp)
6718  de84 6d01          	tnz	(1,x)
6719  de86 2712          	jreq	L1572
6720                     ; 1363         response->packet_id = __mqtt_unpack_uint16(buf);
6722  de88 1e0b          	ldw	x,(OFST+5,sp)
6723  de8a cde43c        	call	___mqtt_unpack_uint16
6725  de8d 1605          	ldw	y,(OFST-1,sp)
6726  de8f 90ef07        	ldw	(7,y),x
6727                     ; 1364         buf += 2;
6729  de92 1e0b          	ldw	x,(OFST+5,sp)
6730  de94 1c0002        	addw	x,#2
6731  de97 1f0b          	ldw	(OFST+5,sp),x
6732  de99 93            	ldw	x,y
6733  de9a               L1572:
6734                     ; 1368     response->application_message = buf;
6736  de9a 160b          	ldw	y,(OFST+5,sp)
6737  de9c ef09          	ldw	(9,x),y
6738                     ; 1369     if (response->qos_level == 0) {
6740  de9e 6d01          	tnz	(1,x)
6741  dea0 2614          	jrne	L3572
6742                     ; 1370         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 2);
6744  dea2 1e03          	ldw	x,(OFST-3,sp)
6745  dea4 1605          	ldw	y,(OFST-1,sp)
6746  dea6 ee07          	ldw	x,(7,x)
6747  dea8 01            	rrwa	x,a
6748  dea9 90e004        	sub	a,(4,y)
6749  deac 01            	rrwa	x,a
6750  dead 90e203        	sbc	a,(3,y)
6751  deb0 01            	rrwa	x,a
6752  deb1 1d0002        	subw	x,#2
6754  deb4 2012          	jra	L5572
6755  deb6               L3572:
6756                     ; 1373         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 4);
6758  deb6 1e03          	ldw	x,(OFST-3,sp)
6759  deb8 1605          	ldw	y,(OFST-1,sp)
6760  deba ee07          	ldw	x,(7,x)
6761  debc 01            	rrwa	x,a
6762  debd 90e004        	sub	a,(4,y)
6763  dec0 01            	rrwa	x,a
6764  dec1 90e203        	sbc	a,(3,y)
6765  dec4 01            	rrwa	x,a
6766  dec5 1d0004        	subw	x,#4
6767  dec8               L5572:
6768  dec8 90ef0b        	ldw	(11,y),x
6769                     ; 1375     buf += response->application_message_size;
6771  decb 1e05          	ldw	x,(OFST-1,sp)
6772  decd ee0b          	ldw	x,(11,x)
6773  decf 72fb0b        	addw	x,(OFST+5,sp)
6774  ded2 1f0b          	ldw	(OFST+5,sp),x
6775                     ; 1378     return buf - start;
6777  ded4 72f001        	subw	x,(OFST-5,sp)
6779  ded7               L044:
6781  ded7 5b08          	addw	sp,#8
6782  ded9 81            	ret	
6871                     ; 1383 int16_t mqtt_pack_pubxxx_request(uint8_t *buf, uint16_t bufsz, 
6871                     ; 1384                                  enum MQTTControlPacketType control_type,
6871                     ; 1385                                  uint16_t packet_id) 
6871                     ; 1386 {
6872                     .text:	section	.text,new
6873  deda               _mqtt_pack_pubxxx_request:
6875  deda 89            	pushw	x
6876  dedb 520d          	subw	sp,#13
6877       0000000d      OFST:	set	13
6880                     ; 1387     const uint8_t *const start = buf;
6882  dedd 1f01          	ldw	(OFST-12,sp),x
6884                     ; 1390     if (buf == NULL) {
6886  dedf 2605          	jrne	L7103
6887                     ; 1391       return MQTT_ERROR_NULLPTR;
6889  dee1 ae8001        	ldw	x,#32769
6891  dee4 2032          	jra	L054
6892  dee6               L7103:
6893                     ; 1395     fixed_header.control_type = control_type;
6895  dee6 7b14          	ld	a,(OFST+7,sp)
6896  dee8 6b05          	ld	(OFST-8,sp),a
6898                     ; 1396     if (control_type == MQTT_CONTROL_PUBREL) fixed_header.control_flags = 0x02;
6900  deea a106          	cp	a,#6
6901  deec 2608          	jrne	L1203
6904  deee 7b09          	ld	a,(OFST-4,sp)
6905  def0 a4f0          	and	a,#240
6906  def2 aa02          	or	a,#2
6908  def4 2004          	jra	L3203
6909  def6               L1203:
6910                     ; 1397     else fixed_header.control_flags = 0;
6912  def6 7b09          	ld	a,(OFST-4,sp)
6913  def8 a4f0          	and	a,#240
6914  defa               L3203:
6915  defa 6b09          	ld	(OFST-4,sp),a
6917                     ; 1399     fixed_header.remaining_length = 2;
6919  defc ae0002        	ldw	x,#2
6920  deff 1f0c          	ldw	(OFST-1,sp),x
6921  df01 5f            	clrw	x
6922  df02 1f0a          	ldw	(OFST-3,sp),x
6924                     ; 1400     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6926  df04 96            	ldw	x,sp
6927  df05 1c0005        	addw	x,#OFST-8
6928  df08 89            	pushw	x
6929  df09 1e14          	ldw	x,(OFST+7,sp)
6930  df0b 89            	pushw	x
6931  df0c 1e12          	ldw	x,(OFST+5,sp)
6932  df0e cdda95        	call	_mqtt_pack_fixed_header
6934  df11 5b04          	addw	sp,#4
6935  df13 1f03          	ldw	(OFST-10,sp),x
6937                     ; 1401     if (rv <= 0) return rv;
6939  df15 9c            	rvf	
6940  df16 2c03          	jrsgt	L5203
6944  df18               L054:
6946  df18 5b0f          	addw	sp,#15
6947  df1a 81            	ret	
6948  df1b               L5203:
6949                     ; 1402     buf += rv;
6951  df1b 1e0e          	ldw	x,(OFST+1,sp)
6952  df1d 72fb03        	addw	x,(OFST-10,sp)
6953  df20 1f0e          	ldw	(OFST+1,sp),x
6954                     ; 1403     bufsz -= rv;
6956  df22 1e12          	ldw	x,(OFST+5,sp)
6957  df24 72f003        	subw	x,(OFST-10,sp)
6958  df27 1f12          	ldw	(OFST+5,sp),x
6959                     ; 1405     if (bufsz < fixed_header.remaining_length) return 0;
6961  df29 cdfb31        	call	c_uitolx
6963  df2c 96            	ldw	x,sp
6964  df2d 1c000a        	addw	x,#OFST-3
6965  df30 cdf8ff        	call	c_lcmp
6967  df33 2403          	jruge	L7203
6970  df35 5f            	clrw	x
6972  df36 20e0          	jra	L054
6973  df38               L7203:
6974                     ; 1407     buf += __mqtt_pack_uint16(buf, packet_id);
6976  df38 1e15          	ldw	x,(OFST+8,sp)
6977  df3a 89            	pushw	x
6978  df3b 1e10          	ldw	x,(OFST+3,sp)
6979  df3d cde418        	call	___mqtt_pack_uint16
6981  df40 5b02          	addw	sp,#2
6982  df42 72fb0e        	addw	x,(OFST+1,sp)
6983  df45 1f0e          	ldw	(OFST+1,sp),x
6984                     ; 1409     return buf - start;
6986  df47 72f001        	subw	x,(OFST-12,sp)
6988  df4a 20cc          	jra	L054
7054                     ; 1413 int16_t mqtt_unpack_pubxxx_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7054                     ; 1414 {
7055                     .text:	section	.text,new
7056  df4c               _mqtt_unpack_pubxxx_response:
7058  df4c 89            	pushw	x
7059  df4d 5204          	subw	sp,#4
7060       00000004      OFST:	set	4
7063                     ; 1415     const uint8_t *const start = buf;
7065  df4f 1e09          	ldw	x,(OFST+5,sp)
7066  df51 1f01          	ldw	(OFST-3,sp),x
7068                     ; 1419     if (mqtt_response->fixed_header.remaining_length != 2) {
7070  df53 1e05          	ldw	x,(OFST+1,sp)
7071  df55 1c0005        	addw	x,#5
7072  df58 cdf96a        	call	c_ltor
7074  df5b ae9f01        	ldw	x,#L473
7075  df5e cdf8ff        	call	c_lcmp
7077  df61 2705          	jreq	L3603
7078                     ; 1420         return MQTT_ERROR_MALFORMED_RESPONSE;
7080  df63 ae800c        	ldw	x,#32780
7082  df66 2019          	jra	L654
7083  df68               L3603:
7084                     ; 1424     packet_id = __mqtt_unpack_uint16(buf);
7086  df68 1e09          	ldw	x,(OFST+5,sp)
7087  df6a cde43c        	call	___mqtt_unpack_uint16
7089  df6d 1f03          	ldw	(OFST-1,sp),x
7091                     ; 1425     buf += 2;
7093  df6f 1e09          	ldw	x,(OFST+5,sp)
7094  df71 1c0002        	addw	x,#2
7095  df74 1f09          	ldw	(OFST+5,sp),x
7096                     ; 1427     if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBACK) {
7098                     ; 1428         mqtt_response->decoded.puback.packet_id = packet_id;
7100                     ; 1430     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREC) {
7102                     ; 1431         mqtt_response->decoded.pubrec.packet_id = packet_id;
7104                     ; 1433     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREL) {
7106                     ; 1434         mqtt_response->decoded.pubrel.packet_id = packet_id;
7108                     ; 1437         mqtt_response->decoded.pubcomp.packet_id = packet_id;
7113  df76 1e05          	ldw	x,(OFST+1,sp)
7114  df78 1603          	ldw	y,(OFST-1,sp)
7115  df7a ef09          	ldw	(9,x),y
7116                     ; 1440     return buf - start;
7118  df7c 1e09          	ldw	x,(OFST+5,sp)
7119  df7e 72f001        	subw	x,(OFST-3,sp)
7121  df81               L654:
7123  df81 5b06          	addw	sp,#6
7124  df83 81            	ret	
7190                     	switch	.const
7191  9f09               L264:
7192  9f09 00000003      	dc.l	3
7193                     ; 1445 int16_t mqtt_unpack_suback_response (struct mqtt_response *mqtt_response, const uint8_t *buf)
7193                     ; 1446 {
7194                     .text:	section	.text,new
7195  df84               _mqtt_unpack_suback_response:
7197  df84 89            	pushw	x
7198  df85 5208          	subw	sp,#8
7199       00000008      OFST:	set	8
7202                     ; 1447     const uint8_t *const start = buf;
7204  df87 1e0d          	ldw	x,(OFST+5,sp)
7205  df89 1f03          	ldw	(OFST-5,sp),x
7207                     ; 1448     uint32_t remaining_length = mqtt_response->fixed_header.remaining_length;
7209  df8b 1e09          	ldw	x,(OFST+1,sp)
7210  df8d 9093          	ldw	y,x
7211  df8f ee07          	ldw	x,(7,x)
7212  df91 1f07          	ldw	(OFST-1,sp),x
7213  df93 93            	ldw	x,y
7214  df94 ee05          	ldw	x,(5,x)
7215  df96 1f05          	ldw	(OFST-3,sp),x
7217                     ; 1451     if (remaining_length < 3) {
7219  df98 96            	ldw	x,sp
7220  df99 1c0005        	addw	x,#OFST-3
7221  df9c cdf96a        	call	c_ltor
7223  df9f ae9f09        	ldw	x,#L264
7224  dfa2 cdf8ff        	call	c_lcmp
7226  dfa5 2405          	jruge	L3313
7227                     ; 1452       return MQTT_ERROR_MALFORMED_RESPONSE;
7229  dfa7 ae800c        	ldw	x,#32780
7231  dfaa 2037          	jra	L664
7232  dfac               L3313:
7233                     ; 1456     mqtt_response->decoded.suback.packet_id = __mqtt_unpack_uint16(buf);
7235  dfac 1e0d          	ldw	x,(OFST+5,sp)
7236  dfae cde43c        	call	___mqtt_unpack_uint16
7238  dfb1 1609          	ldw	y,(OFST+1,sp)
7239  dfb3 90ef09        	ldw	(9,y),x
7240                     ; 1457     buf += 2;
7242  dfb6 1e0d          	ldw	x,(OFST+5,sp)
7243  dfb8 1c0002        	addw	x,#2
7244  dfbb 1f0d          	ldw	(OFST+5,sp),x
7245                     ; 1458     remaining_length -= 2;
7247  dfbd 96            	ldw	x,sp
7248  dfbe 1c0005        	addw	x,#OFST-3
7249  dfc1 a602          	ld	a,#2
7250  dfc3 cdf946        	call	c_lgsbc
7253                     ; 1461     mqtt_response->decoded.suback.num_return_codes = (uint16_t) remaining_length;
7255  dfc6 1e09          	ldw	x,(OFST+1,sp)
7256  dfc8 1607          	ldw	y,(OFST-1,sp)
7257  dfca ef0d          	ldw	(13,x),y
7258                     ; 1462     mqtt_response->decoded.suback.return_codes = buf;
7260  dfcc 160d          	ldw	y,(OFST+5,sp)
7261  dfce ef0b          	ldw	(11,x),y
7262                     ; 1463     buf += remaining_length;
7264  dfd0 96            	ldw	x,sp
7265  dfd1 1c0005        	addw	x,#OFST-3
7266  dfd4 cdf96a        	call	c_ltor
7268  dfd7 be02          	ldw	x,c_lreg+2
7269  dfd9 1f01          	ldw	(OFST-7,sp),x
7271  dfdb 72fb0d        	addw	x,(OFST+5,sp)
7272  dfde 1f0d          	ldw	(OFST+5,sp),x
7273                     ; 1465     return buf - start;
7275  dfe0 72f003        	subw	x,(OFST-5,sp)
7277  dfe3               L664:
7279  dfe3 5b0a          	addw	sp,#10
7280  dfe5 81            	ret	
7406                     ; 1470 int16_t mqtt_pack_subscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7406                     ; 1471 {
7407                     .text:	section	.text,new
7408  dfe6               _mqtt_pack_subscribe_request:
7410  dfe6 89            	pushw	x
7411  dfe7 5229          	subw	sp,#41
7412       00000029      OFST:	set	41
7415                     ; 1473     const uint8_t *const start = buf;
7417  dfe9 1f03          	ldw	(OFST-38,sp),x
7419                     ; 1476     uint16_t num_subs = 0;
7421  dfeb 5f            	clrw	x
7422  dfec 1f26          	ldw	(OFST-3,sp),x
7424                     ; 1482     va_start(args, packet_id);
7426  dfee 96            	ldw	x,sp
7427  dfef 1c0032        	addw	x,#OFST+9
7428  dff2 1f28          	ldw	(OFST-1,sp),x
7430  dff4               L1123:
7431                     ; 1484         topic[num_subs] = va_arg(args, const char*);
7433  dff4 1e28          	ldw	x,(OFST-1,sp)
7434  dff6 1c0002        	addw	x,#2
7435  dff9 1f28          	ldw	(OFST-1,sp),x
7437  dffb 1d0002        	subw	x,#2
7438  dffe 9096          	ldw	y,sp
7439  e000 72a90016      	addw	y,#OFST-19
7440  e004 1701          	ldw	(OFST-40,sp),y
7442  e006 1626          	ldw	y,(OFST-3,sp)
7443  e008 9058          	sllw	y
7444  e00a 72f901        	addw	y,(OFST-40,sp)
7445  e00d fe            	ldw	x,(x)
7446  e00e 90ff          	ldw	(y),x
7447                     ; 1485         if (topic[num_subs] == NULL) {
7449  e010 96            	ldw	x,sp
7450  e011 1c0016        	addw	x,#OFST-19
7451  e014 1f01          	ldw	(OFST-40,sp),x
7453  e016 1e26          	ldw	x,(OFST-3,sp)
7454  e018 58            	sllw	x
7455  e019 72fb01        	addw	x,(OFST-40,sp)
7456  e01c e601          	ld	a,(1,x)
7457  e01e fa            	or	a,(x)
7458  e01f 2616          	jrne	L5123
7459                     ; 1487             break;
7460                     ; 1497     va_end(args);
7462                     ; 1500     fixed_header.control_type = MQTT_CONTROL_SUBSCRIBE;
7464  e021 a608          	ld	a,#8
7465  e023 6b0d          	ld	(OFST-28,sp),a
7467                     ; 1501     fixed_header.control_flags = 2u;
7469  e025 7b11          	ld	a,(OFST-24,sp)
7470  e027 a4f0          	and	a,#240
7471  e029 aa02          	or	a,#2
7472  e02b 6b11          	ld	(OFST-24,sp),a
7474                     ; 1502     fixed_header.remaining_length = 2u; /* size of variable header */
7476  e02d ae0002        	ldw	x,#2
7477  e030 1f14          	ldw	(OFST-21,sp),x
7478  e032 5f            	clrw	x
7479  e033 1f12          	ldw	(OFST-23,sp),x
7481                     ; 1503     for(i = 0; i < num_subs; ++i) {
7483  e035 203f          	jra	L5223
7484  e037               L5123:
7485                     ; 1490         max_qos[num_subs] = (uint8_t) va_arg(args, uint16_t);
7487  e037 1e28          	ldw	x,(OFST-1,sp)
7489  e039 e601          	ld	a,(1,x)
7490  e03b 1c0002        	addw	x,#2
7491  e03e 1f28          	ldw	(OFST-1,sp),x
7492  e040 96            	ldw	x,sp
7493  e041 1c0005        	addw	x,#OFST-36
7494  e044 72fb26        	addw	x,(OFST-3,sp)
7495  e047 f7            	ld	(x),a
7496                     ; 1492         ++num_subs;
7498  e048 1e26          	ldw	x,(OFST-3,sp)
7499  e04a 5c            	incw	x
7500  e04b 1f26          	ldw	(OFST-3,sp),x
7502                     ; 1493         if (num_subs >= MQTT_SUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7504  e04d a30008        	cpw	x,#8
7505  e050 25a2          	jrult	L1123
7506                     ; 1494             return MQTT_ERROR_SUBSCRIBE_TOO_MANY_TOPICS;
7508  e052 ae800b        	ldw	x,#32779
7510  e055 2039          	jra	L205
7511  e057               L1223:
7512                     ; 1505         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]) + 1;
7514  e057 1c0016        	addw	x,#OFST-19
7515  e05a 1f01          	ldw	(OFST-40,sp),x
7517  e05c 1e28          	ldw	x,(OFST-1,sp)
7518  e05e 58            	sllw	x
7519  e05f 72fb01        	addw	x,(OFST-40,sp)
7520  e062 fe            	ldw	x,(x)
7521  e063 cdf6dd        	call	_strlen
7523  e066 1c0003        	addw	x,#3
7524  e069 cdfb31        	call	c_uitolx
7526  e06c 96            	ldw	x,sp
7527  e06d 1c0012        	addw	x,#OFST-23
7528  e070 cdf92f        	call	c_lgadd
7531                     ; 1503     for(i = 0; i < num_subs; ++i) {
7533  e073 1e28          	ldw	x,(OFST-1,sp)
7534  e075 5c            	incw	x
7535  e076               L5223:
7537  e076 1f28          	ldw	(OFST-1,sp),x
7541  e078 1326          	cpw	x,(OFST-3,sp)
7542  e07a 96            	ldw	x,sp
7543  e07b 25da          	jrult	L1223
7544                     ; 1509     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
7546  e07d 1c000d        	addw	x,#OFST-28
7547  e080 89            	pushw	x
7548  e081 1e30          	ldw	x,(OFST+7,sp)
7549  e083 89            	pushw	x
7550  e084 1e2e          	ldw	x,(OFST+5,sp)
7551  e086 cdda95        	call	_mqtt_pack_fixed_header
7553  e089 5b04          	addw	sp,#4
7554  e08b 1f28          	ldw	(OFST-1,sp),x
7556                     ; 1510     if (rv <= 0) return rv;
7558  e08d 9c            	rvf	
7559  e08e 2c03          	jrsgt	L1323
7563  e090               L205:
7565  e090 5b2b          	addw	sp,#43
7566  e092 81            	ret	
7567  e093               L1323:
7568                     ; 1511     buf += rv;
7570  e093 1e2a          	ldw	x,(OFST+1,sp)
7571  e095 72fb28        	addw	x,(OFST-1,sp)
7572  e098 1f2a          	ldw	(OFST+1,sp),x
7573                     ; 1512     bufsz -= rv;
7575  e09a 1e2e          	ldw	x,(OFST+5,sp)
7576  e09c 72f028        	subw	x,(OFST-1,sp)
7577  e09f 1f2e          	ldw	(OFST+5,sp),x
7578                     ; 1515     if (bufsz < fixed_header.remaining_length) return 0;
7580  e0a1 cdfb31        	call	c_uitolx
7582  e0a4 96            	ldw	x,sp
7583  e0a5 1c0012        	addw	x,#OFST-23
7584  e0a8 cdf8ff        	call	c_lcmp
7586  e0ab 2403          	jruge	L3323
7589  e0ad 5f            	clrw	x
7591  e0ae 20e0          	jra	L205
7592  e0b0               L3323:
7593                     ; 1518     buf += __mqtt_pack_uint16(buf, packet_id);
7595  e0b0 1e30          	ldw	x,(OFST+7,sp)
7596  e0b2 89            	pushw	x
7597  e0b3 1e2c          	ldw	x,(OFST+3,sp)
7598  e0b5 cde418        	call	___mqtt_pack_uint16
7600  e0b8 5b02          	addw	sp,#2
7601  e0ba 72fb2a        	addw	x,(OFST+1,sp)
7602  e0bd 1f2a          	ldw	(OFST+1,sp),x
7603                     ; 1521     for(i = 0; i < num_subs; ++i) {
7605  e0bf 5f            	clrw	x
7607  e0c0 202b          	jra	L1423
7608  e0c2               L5323:
7609                     ; 1522         buf += __mqtt_pack_str(buf, topic[i]);
7611  e0c2 96            	ldw	x,sp
7612  e0c3 1c0016        	addw	x,#OFST-19
7613  e0c6 1f01          	ldw	(OFST-40,sp),x
7615  e0c8 1e28          	ldw	x,(OFST-1,sp)
7616  e0ca 58            	sllw	x
7617  e0cb 72fb01        	addw	x,(OFST-40,sp)
7618  e0ce fe            	ldw	x,(x)
7619  e0cf 89            	pushw	x
7620  e0d0 1e2c          	ldw	x,(OFST+3,sp)
7621  e0d2 cde459        	call	___mqtt_pack_str
7623  e0d5 5b02          	addw	sp,#2
7624  e0d7 72fb2a        	addw	x,(OFST+1,sp)
7625  e0da 1f2a          	ldw	(OFST+1,sp),x
7626                     ; 1523         *buf++ = max_qos[i];
7628  e0dc 96            	ldw	x,sp
7629  e0dd 1c0005        	addw	x,#OFST-36
7630  e0e0 72fb28        	addw	x,(OFST-1,sp)
7631  e0e3 f6            	ld	a,(x)
7632  e0e4 1e2a          	ldw	x,(OFST+1,sp)
7633  e0e6 f7            	ld	(x),a
7634  e0e7 5c            	incw	x
7635  e0e8 1f2a          	ldw	(OFST+1,sp),x
7636                     ; 1521     for(i = 0; i < num_subs; ++i) {
7638  e0ea 1e28          	ldw	x,(OFST-1,sp)
7639  e0ec 5c            	incw	x
7640  e0ed               L1423:
7641  e0ed 1f28          	ldw	(OFST-1,sp),x
7645  e0ef 1326          	cpw	x,(OFST-3,sp)
7646  e0f1 25cf          	jrult	L5323
7647                     ; 1526     return buf - start;
7649  e0f3 1e2a          	ldw	x,(OFST+1,sp)
7650  e0f5 72f003        	subw	x,(OFST-38,sp)
7652  e0f8 2096          	jra	L205
7711                     ; 1531 int16_t mqtt_unpack_unsuback_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7711                     ; 1532 {
7712                     .text:	section	.text,new
7713  e0fa               _mqtt_unpack_unsuback_response:
7715  e0fa 89            	pushw	x
7716  e0fb 89            	pushw	x
7717       00000002      OFST:	set	2
7720                     ; 1533     const uint8_t *const start = buf;
7722  e0fc 1e07          	ldw	x,(OFST+5,sp)
7723  e0fe 1f01          	ldw	(OFST-1,sp),x
7725                     ; 1535     if (mqtt_response->fixed_header.remaining_length != 2) {
7727  e100 1e03          	ldw	x,(OFST+1,sp)
7728  e102 1c0005        	addw	x,#5
7729  e105 cdf96a        	call	c_ltor
7731  e108 ae9f01        	ldw	x,#L473
7732  e10b cdf8ff        	call	c_lcmp
7734  e10e 2705          	jreq	L5723
7735                     ; 1536         return MQTT_ERROR_MALFORMED_RESPONSE;
7737  e110 ae800c        	ldw	x,#32780
7739  e113 2014          	jra	L015
7740  e115               L5723:
7741                     ; 1540     mqtt_response->decoded.unsuback.packet_id = __mqtt_unpack_uint16(buf);
7743  e115 1e07          	ldw	x,(OFST+5,sp)
7744  e117 cde43c        	call	___mqtt_unpack_uint16
7746  e11a 1603          	ldw	y,(OFST+1,sp)
7747  e11c 90ef09        	ldw	(9,y),x
7748                     ; 1541     buf += 2;
7750  e11f 1e07          	ldw	x,(OFST+5,sp)
7751  e121 1c0002        	addw	x,#2
7752  e124 1f07          	ldw	(OFST+5,sp),x
7753                     ; 1543     return buf - start;
7755  e126 72f001        	subw	x,(OFST-1,sp)
7757  e129               L015:
7759  e129 5b04          	addw	sp,#4
7760  e12b 81            	ret	
7876                     ; 1548 int16_t mqtt_pack_unsubscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7876                     ; 1549 {
7877                     .text:	section	.text,new
7878                     _mqtt_pack_unsubscribe_request:
7880                     	pushw	x
7881                     	subw	sp,#33
7882       00000021      OFST:	set	33
7885                     ; 1551     const uint8_t *const start = buf;
7887                     	ldw	(OFST-30,sp),x
7889                     ; 1554     uint16_t num_subs = 0;
7891                     	clrw	x
7892                     	ldw	(OFST-3,sp),x
7894                     ; 1559     va_start(args, packet_id);
7896                     	ldw	x,sp
7897                     	addw	x,#OFST+9
7898                     	ldw	(OFST-1,sp),x
7900                     L7433:
7901                     ; 1561         topic[num_subs] = va_arg(args, const char*);
7903                     	ldw	x,(OFST-1,sp)
7904                     	addw	x,#2
7905                     	ldw	(OFST-1,sp),x
7907                     	subw	x,#2
7908                     	ldw	y,sp
7909                     	addw	y,#OFST-19
7910                     	ldw	(OFST-32,sp),y
7912                     	ldw	y,(OFST-3,sp)
7913                     	sllw	y
7914                     	addw	y,(OFST-32,sp)
7915                     	ldw	x,(x)
7916                     	ldw	(y),x
7917                     ; 1562         if (topic[num_subs] == NULL) {
7919                     	ldw	x,sp
7920                     	addw	x,#OFST-19
7921                     	ldw	(OFST-32,sp),x
7923                     	ldw	x,(OFST-3,sp)
7924                     	sllw	x
7925                     	addw	x,(OFST-32,sp)
7926                     	ld	a,(1,x)
7927                     	or	a,(x)
7928                     	jrne	L3533
7929                     ; 1564             break;
7930                     ; 1572     va_end(args);
7932                     ; 1575     fixed_header.control_type = MQTT_CONTROL_UNSUBSCRIBE;
7934                     	ld	a,#10
7935                     	ld	(OFST-28,sp),a
7937                     ; 1576     fixed_header.control_flags = 2u;
7939                     	ld	a,(OFST-24,sp)
7940                     	and	a,#240
7941                     	or	a,#2
7942                     	ld	(OFST-24,sp),a
7944                     ; 1577     fixed_header.remaining_length = 2u; // size of variable header
7946                     	ldw	x,#2
7947                     	ldw	(OFST-21,sp),x
7948                     	clrw	x
7949                     	ldw	(OFST-23,sp),x
7951                     ; 1578     for(i = 0; i < num_subs; ++i) {
7953                     	jra	L3633
7954                     L3533:
7955                     ; 1567         ++num_subs;
7957                     	ldw	x,(OFST-3,sp)
7958                     	incw	x
7959                     	ldw	(OFST-3,sp),x
7961                     ; 1568         if (num_subs >= MQTT_UNSUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7963                     	cpw	x,#8
7964                     	jrult	L7433
7965                     ; 1569             return MQTT_ERROR_UNSUBSCRIBE_TOO_MANY_TOPICS;
7967                     	ldw	x,#32781
7969                     	jra	L425
7970                     L7533:
7971                     ; 1580         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]);
7973                     	addw	x,#OFST-19
7974                     	ldw	(OFST-32,sp),x
7976                     	ldw	x,(OFST-1,sp)
7977                     	sllw	x
7978                     	addw	x,(OFST-32,sp)
7979                     	ldw	x,(x)
7980                     	call	_strlen
7982                     	addw	x,#2
7983                     	call	c_uitolx
7985                     	ldw	x,sp
7986                     	addw	x,#OFST-23
7987                     	call	c_lgadd
7990                     ; 1578     for(i = 0; i < num_subs; ++i) {
7992                     	ldw	x,(OFST-1,sp)
7993                     	incw	x
7994                     L3633:
7996                     	ldw	(OFST-1,sp),x
8000                     	cpw	x,(OFST-3,sp)
8001                     	ldw	x,sp
8002                     	jrult	L7533
8003                     ; 1584     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
8005                     	addw	x,#OFST-28
8006                     	pushw	x
8007                     	ldw	x,(OFST+7,sp)
8008                     	pushw	x
8009                     	ldw	x,(OFST+5,sp)
8010                     	call	_mqtt_pack_fixed_header
8012                     	addw	sp,#4
8013                     	ldw	(OFST-1,sp),x
8015                     ; 1585     if (rv <= 0) return rv;
8017                     	rvf	
8018                     	jrsgt	L7633
8022                     L425:
8024                     	addw	sp,#35
8025                     	ret	
8026                     L7633:
8027                     ; 1586     buf += rv;
8029                     	ldw	x,(OFST+1,sp)
8030                     	addw	x,(OFST-1,sp)
8031                     	ldw	(OFST+1,sp),x
8032                     ; 1587     bufsz -= rv;
8034                     	ldw	x,(OFST+5,sp)
8035                     	subw	x,(OFST-1,sp)
8036                     	ldw	(OFST+5,sp),x
8037                     ; 1590     if (bufsz < fixed_header.remaining_length) return 0;
8039                     	call	c_uitolx
8041                     	ldw	x,sp
8042                     	addw	x,#OFST-23
8043                     	call	c_lcmp
8045                     	jruge	L1733
8048                     	clrw	x
8050                     	jra	L425
8051                     L1733:
8052                     ; 1593     buf += __mqtt_pack_uint16(buf, packet_id);
8054                     	ldw	x,(OFST+7,sp)
8055                     	pushw	x
8056                     	ldw	x,(OFST+3,sp)
8057                     	call	___mqtt_pack_uint16
8059                     	addw	sp,#2
8060                     	addw	x,(OFST+1,sp)
8061                     	ldw	(OFST+1,sp),x
8062                     ; 1596     for(i = 0; i < num_subs; ++i) buf += __mqtt_pack_str(buf, topic[i]);
8064                     	clrw	x
8066                     	jra	L7733
8067                     L3733:
8070                     	ldw	x,sp
8071                     	addw	x,#OFST-19
8072                     	ldw	(OFST-32,sp),x
8074                     	ldw	x,(OFST-1,sp)
8075                     	sllw	x
8076                     	addw	x,(OFST-32,sp)
8077                     	ldw	x,(x)
8078                     	pushw	x
8079                     	ldw	x,(OFST+3,sp)
8080                     	call	___mqtt_pack_str
8082                     	addw	sp,#2
8083                     	addw	x,(OFST+1,sp)
8084                     	ldw	(OFST+1,sp),x
8087                     	ldw	x,(OFST-1,sp)
8088                     	incw	x
8089                     L7733:
8090                     	ldw	(OFST-1,sp),x
8094                     	cpw	x,(OFST-3,sp)
8095                     	jrult	L3733
8096                     ; 1598     return buf - start;
8098                     	ldw	x,(OFST+1,sp)
8099                     	subw	x,(OFST-30,sp)
8101                     	jra	L425
8155                     ; 1603 void mqtt_mq_init(struct mqtt_message_queue *mq, void *buf, uint16_t bufsz) 
8155                     ; 1604 {  
8156                     .text:	section	.text,new
8157  e12c               _mqtt_mq_init:
8159  e12c 89            	pushw	x
8160       00000000      OFST:	set	0
8163                     ; 1605     if(buf != NULL)
8165  e12d 1e05          	ldw	x,(OFST+5,sp)
8166  e12f 2748          	jreq	L1343
8167                     ; 1607         mq->mem_start = buf;
8169  e131 1e01          	ldw	x,(OFST+1,sp)
8170  e133 1605          	ldw	y,(OFST+5,sp)
8171  e135 ff            	ldw	(x),y
8172                     ; 1608         mq->mem_end = (unsigned char*)buf + bufsz;
8174  e136 93            	ldw	x,y
8175  e137 1601          	ldw	y,(OFST+1,sp)
8176  e139 72fb07        	addw	x,(OFST+7,sp)
8177  e13c 90ef02        	ldw	(2,y),x
8178                     ; 1609         mq->curr = buf;
8180  e13f 93            	ldw	x,y
8181  e140 1605          	ldw	y,(OFST+5,sp)
8182  e142 ef04          	ldw	(4,x),y
8183                     ; 1610         mq->queue_tail = mq->mem_end;
8185  e144 9093          	ldw	y,x
8186  e146 90ee02        	ldw	y,(2,y)
8187  e149 ef08          	ldw	(8,x),y
8188                     ; 1611         mq->curr_sz = mqtt_mq_currsz(mq);
8190  e14b 1601          	ldw	y,(OFST+1,sp)
8191  e14d 90ee08        	ldw	y,(8,y)
8192  e150 72a2000c      	subw	y,#12
8193  e154 90bf07        	ldw	c_y,y
8194  e157 9093          	ldw	y,x
8195  e159 90ee04        	ldw	y,(4,y)
8196  e15c 90b307        	cpw	y,c_y
8197  e15f 2505          	jrult	L035
8198  e161 5f            	clrw	x
8199  e162 1601          	ldw	y,(OFST+1,sp)
8200  e164 2010          	jra	L235
8201  e166               L035:
8202  e166 ee08          	ldw	x,(8,x)
8203  e168 1d000c        	subw	x,#12
8204  e16b 1601          	ldw	y,(OFST+1,sp)
8205  e16d 01            	rrwa	x,a
8206  e16e 90e005        	sub	a,(5,y)
8207  e171 01            	rrwa	x,a
8208  e172 90e204        	sbc	a,(4,y)
8209  e175 01            	rrwa	x,a
8210  e176               L235:
8211  e176 90ef06        	ldw	(6,y),x
8212  e179               L1343:
8213                     ; 1613 }
8216  e179 85            	popw	x
8217  e17a 81            	ret	
8264                     ; 1616 struct mqtt_queued_message* mqtt_mq_register(struct mqtt_message_queue *mq, uint16_t nbytes)
8264                     ; 1617 {
8265                     .text:	section	.text,new
8266  e17b               _mqtt_mq_register:
8268  e17b 89            	pushw	x
8269       00000000      OFST:	set	0
8272                     ; 1619     --(mq->queue_tail);
8274  e17c 9093          	ldw	y,x
8275  e17e ee08          	ldw	x,(8,x)
8276  e180 1d000c        	subw	x,#12
8277  e183 90ef08        	ldw	(8,y),x
8278                     ; 1620     mq->queue_tail->start = mq->curr;
8280  e186 1e01          	ldw	x,(OFST+1,sp)
8281  e188 9093          	ldw	y,x
8282  e18a 90ee08        	ldw	y,(8,y)
8283  e18d ee04          	ldw	x,(4,x)
8284  e18f 90ff          	ldw	(y),x
8285                     ; 1621     mq->queue_tail->size = nbytes;
8287  e191 1e01          	ldw	x,(OFST+1,sp)
8288  e193 ee08          	ldw	x,(8,x)
8289  e195 1605          	ldw	y,(OFST+5,sp)
8290  e197 ef02          	ldw	(2,x),y
8291                     ; 1622     mq->queue_tail->state = MQTT_QUEUED_UNSENT;
8293  e199 1e01          	ldw	x,(OFST+1,sp)
8294  e19b ee08          	ldw	x,(8,x)
8295  e19d 6f04          	clr	(4,x)
8296                     ; 1625     mq->curr += nbytes;
8298  e19f 1e01          	ldw	x,(OFST+1,sp)
8299  e1a1 9093          	ldw	y,x
8300  e1a3 ee04          	ldw	x,(4,x)
8301  e1a5 72fb05        	addw	x,(OFST+5,sp)
8302  e1a8 90ef04        	ldw	(4,y),x
8303                     ; 1626     mq->curr_sz = mqtt_mq_currsz(mq);
8305  e1ab 1e01          	ldw	x,(OFST+1,sp)
8306  e1ad 9093          	ldw	y,x
8307  e1af 90ee08        	ldw	y,(8,y)
8308  e1b2 72a2000c      	subw	y,#12
8309  e1b6 90bf07        	ldw	c_y,y
8310  e1b9 9093          	ldw	y,x
8311  e1bb 90ee04        	ldw	y,(4,y)
8312  e1be 90b307        	cpw	y,c_y
8313  e1c1 2505          	jrult	L635
8314  e1c3 5f            	clrw	x
8315  e1c4 1601          	ldw	y,(OFST+1,sp)
8316  e1c6 2010          	jra	L045
8317  e1c8               L635:
8318  e1c8 ee08          	ldw	x,(8,x)
8319  e1ca 1d000c        	subw	x,#12
8320  e1cd 1601          	ldw	y,(OFST+1,sp)
8321  e1cf 01            	rrwa	x,a
8322  e1d0 90e005        	sub	a,(5,y)
8323  e1d3 01            	rrwa	x,a
8324  e1d4 90e204        	sbc	a,(4,y)
8325  e1d7 01            	rrwa	x,a
8326  e1d8               L045:
8327  e1d8 90ef06        	ldw	(6,y),x
8328                     ; 1628     return mq->queue_tail;
8330  e1db 1e01          	ldw	x,(OFST+1,sp)
8331  e1dd ee08          	ldw	x,(8,x)
8334  e1df 5b02          	addw	sp,#2
8335  e1e1 81            	ret	
8413                     ; 1632 void mqtt_mq_clean(struct mqtt_message_queue *mq) {
8414                     .text:	section	.text,new
8415  e1e2               _mqtt_mq_clean:
8417  e1e2 89            	pushw	x
8418  e1e3 5208          	subw	sp,#8
8419       00000008      OFST:	set	8
8422                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8424  e1e5 ee02          	ldw	x,(2,x)
8426  e1e7 2047          	jra	L5253
8427  e1e9               L5153:
8428                     ; 1636         if (new_head->state != MQTT_QUEUED_COMPLETE) break;
8430  e1e9 1e07          	ldw	x,(OFST-1,sp)
8431  e1eb e604          	ld	a,(4,x)
8432  e1ed a102          	cp	a,#2
8433  e1ef 273f          	jreq	L5253
8435  e1f1               L3253:
8436                     ; 1640     if (new_head < mq->queue_tail) {
8438  e1f1 1e09          	ldw	x,(OFST+1,sp)
8439  e1f3 ee08          	ldw	x,(8,x)
8440  e1f5 1307          	cpw	x,(OFST-1,sp)
8441  e1f7 2346          	jrule	L7253
8442                     ; 1641         mq->curr = mq->mem_start;
8444  e1f9 1e09          	ldw	x,(OFST+1,sp)
8445  e1fb 9093          	ldw	y,x
8446  e1fd 90fe          	ldw	y,(y)
8447  e1ff ef04          	ldw	(4,x),y
8448                     ; 1642         mq->queue_tail = mq->mem_end;
8450  e201 9093          	ldw	y,x
8451  e203 90ee02        	ldw	y,(2,y)
8452  e206 ef08          	ldw	(8,x),y
8453                     ; 1643         mq->curr_sz = mqtt_mq_currsz(mq);
8455  e208 72a2000c      	subw	y,#12
8456  e20c 90bf07        	ldw	c_y,y
8457  e20f 9093          	ldw	y,x
8458  e211 90ee04        	ldw	y,(4,y)
8459  e214 90b307        	cpw	y,c_y
8460  e217 2504          	jrult	L445
8461  e219               LC022:
8462  e219 5f            	clrw	x
8463  e21a cce328        	jp	L655
8464  e21d               L445:
8465  e21d ee08          	ldw	x,(8,x)
8466  e21f 1d000c        	subw	x,#12
8467  e222 1609          	ldw	y,(OFST+1,sp)
8468  e224 01            	rrwa	x,a
8469  e225 90e005        	sub	a,(5,y)
8470  e228 01            	rrwa	x,a
8471  e229 90e204        	sbc	a,(4,y)
8472  e22c 01            	rrwa	x,a
8473                     ; 1644         return;
8475  e22d cce32a        	jp	LC020
8476  e230               L5253:
8477                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8479  e230 1d000c        	subw	x,#12
8480  e233 1f07          	ldw	(OFST-1,sp),x
8484  e235 1e09          	ldw	x,(OFST+1,sp)
8485  e237 ee08          	ldw	x,(8,x)
8486  e239 1307          	cpw	x,(OFST-1,sp)
8487  e23b 23ac          	jrule	L5153
8488  e23d 20b2          	jra	L3253
8489  e23f               L7253:
8490                     ; 1646     else if (new_head == mqtt_mq_get(mq, 0)) {
8492  e23f 1e09          	ldw	x,(OFST+1,sp)
8493  e241 ee02          	ldw	x,(2,x)
8494  e243 1d000c        	subw	x,#12
8495  e246 1307          	cpw	x,(OFST-1,sp)
8496  e248 2603          	jrne	L1353
8497                     ; 1648         return;
8498  e24a               L065:
8501  e24a 5b0a          	addw	sp,#10
8502  e24c 81            	ret	
8503  e24d               L1353:
8504                     ; 1653         uint16_t n = mq->curr - new_head->start;
8506  e24d 1e09          	ldw	x,(OFST+1,sp)
8507  e24f 1607          	ldw	y,(OFST-1,sp)
8508  e251 ee04          	ldw	x,(4,x)
8509  e253 01            	rrwa	x,a
8510  e254 90e001        	sub	a,(1,y)
8511  e257 01            	rrwa	x,a
8512  e258 90f2          	sbc	a,(y)
8513  e25a 01            	rrwa	x,a
8514  e25b 1f05          	ldw	(OFST-3,sp),x
8516                     ; 1654         uint16_t removing = new_head->start - (uint8_t*) mq->mem_start;
8518  e25d 93            	ldw	x,y
8519  e25e 1609          	ldw	y,(OFST+1,sp)
8520  e260 fe            	ldw	x,(x)
8521  e261 01            	rrwa	x,a
8522  e262 90e001        	sub	a,(1,y)
8523  e265 01            	rrwa	x,a
8524  e266 90f2          	sbc	a,(y)
8525  e268 01            	rrwa	x,a
8526  e269 1f03          	ldw	(OFST-5,sp),x
8528                     ; 1655         memmove(mq->mem_start, new_head->start, n);
8530  e26b 1e05          	ldw	x,(OFST-3,sp)
8531  e26d 89            	pushw	x
8532  e26e 1e09          	ldw	x,(OFST+1,sp)
8533  e270 fe            	ldw	x,(x)
8534  e271 89            	pushw	x
8535  e272 1e0d          	ldw	x,(OFST+5,sp)
8536  e274 fe            	ldw	x,(x)
8537  e275 cdf678        	call	_memmove
8539  e278 5b04          	addw	sp,#4
8540                     ; 1656         mq->curr = (unsigned char*)mq->mem_start + n;
8542  e27a 1e09          	ldw	x,(OFST+1,sp)
8543  e27c fe            	ldw	x,(x)
8544  e27d 1609          	ldw	y,(OFST+1,sp)
8545  e27f 72fb05        	addw	x,(OFST-3,sp)
8546  e282 90ef04        	ldw	(4,y),x
8547                     ; 1660             int16_t new_tail_idx = new_head - mq->queue_tail;
8549  e285 1e07          	ldw	x,(OFST-1,sp)
8550  e287 01            	rrwa	x,a
8551  e288 90e009        	sub	a,(9,y)
8552  e28b 01            	rrwa	x,a
8553  e28c 90e208        	sbc	a,(8,y)
8554  e28f 01            	rrwa	x,a
8555  e290 a60c          	ld	a,#12
8556  e292 cdfae8        	call	c_sdivx
8558  e295 1f05          	ldw	(OFST-3,sp),x
8560                     ; 1661             memmove(mqtt_mq_get(mq, new_tail_idx), mq->queue_tail, sizeof(struct mqtt_queued_message) * (new_tail_idx + 1));
8562  e297 5c            	incw	x
8563  e298 a60c          	ld	a,#12
8564  e29a cdf6e9        	call	c_bmulx
8566  e29d 89            	pushw	x
8567  e29e 1e0b          	ldw	x,(OFST+3,sp)
8568  e2a0 ee08          	ldw	x,(8,x)
8569  e2a2 89            	pushw	x
8570  e2a3 1e09          	ldw	x,(OFST+1,sp)
8571  e2a5 a60c          	ld	a,#12
8572  e2a7 cdf6e9        	call	c_bmulx
8574  e2aa 1f05          	ldw	(OFST-3,sp),x
8576  e2ac 1e0d          	ldw	x,(OFST+5,sp)
8577  e2ae ee02          	ldw	x,(2,x)
8578  e2b0 1d000c        	subw	x,#12
8579  e2b3 72f005        	subw	x,(OFST-3,sp)
8580  e2b6 cdf678        	call	_memmove
8582  e2b9 5b04          	addw	sp,#4
8583                     ; 1662             mq->queue_tail = mqtt_mq_get(mq, new_tail_idx);
8585  e2bb 1e05          	ldw	x,(OFST-3,sp)
8586  e2bd a60c          	ld	a,#12
8587  e2bf cdf6e9        	call	c_bmulx
8589  e2c2 1f01          	ldw	(OFST-7,sp),x
8591  e2c4 1e09          	ldw	x,(OFST+1,sp)
8592  e2c6 ee02          	ldw	x,(2,x)
8593  e2c8 1d000c        	subw	x,#12
8594  e2cb 1609          	ldw	y,(OFST+1,sp)
8595  e2cd 72f001        	subw	x,(OFST-7,sp)
8596  e2d0 90ef08        	ldw	(8,y),x
8597                     ; 1666                 int16_t i = 0;
8599  e2d3 5f            	clrw	x
8601  e2d4 201e          	jra	L1453
8602  e2d6               L5353:
8603                     ; 1667                 for(; i < new_tail_idx + 1; ++i) mqtt_mq_get(mq, i)->start -= removing;
8605  e2d6 1e07          	ldw	x,(OFST-1,sp)
8606  e2d8 a60c          	ld	a,#12
8607  e2da cdf6e9        	call	c_bmulx
8609  e2dd 1f01          	ldw	(OFST-7,sp),x
8611  e2df 1e09          	ldw	x,(OFST+1,sp)
8612  e2e1 ee02          	ldw	x,(2,x)
8613  e2e3 1d000c        	subw	x,#12
8614  e2e6 72f001        	subw	x,(OFST-7,sp)
8615  e2e9 9093          	ldw	y,x
8616  e2eb fe            	ldw	x,(x)
8617  e2ec 72f003        	subw	x,(OFST-5,sp)
8618  e2ef 90ff          	ldw	(y),x
8621  e2f1 1e07          	ldw	x,(OFST-1,sp)
8622  e2f3 5c            	incw	x
8623  e2f4               L1453:
8624  e2f4 1f07          	ldw	(OFST-1,sp),x
8628  e2f6 1e05          	ldw	x,(OFST-3,sp)
8629  e2f8 5c            	incw	x
8630  e2f9 1307          	cpw	x,(OFST-1,sp)
8631  e2fb 2cd9          	jrsgt	L5353
8632                     ; 1673     mq->curr_sz = mqtt_mq_currsz(mq);
8634  e2fd 1e09          	ldw	x,(OFST+1,sp)
8635  e2ff 9093          	ldw	y,x
8636  e301 90ee08        	ldw	y,(8,y)
8637  e304 72a2000c      	subw	y,#12
8638  e308 90bf07        	ldw	c_y,y
8639  e30b 9093          	ldw	y,x
8640  e30d 90ee04        	ldw	y,(4,y)
8641  e310 90b307        	cpw	y,c_y
8642  e313 2503cce219    	jruge	LC022
8643  e318 ee08          	ldw	x,(8,x)
8644  e31a 1d000c        	subw	x,#12
8645  e31d 1609          	ldw	y,(OFST+1,sp)
8646  e31f 01            	rrwa	x,a
8647  e320 90e005        	sub	a,(5,y)
8648  e323 01            	rrwa	x,a
8649  e324 90e204        	sbc	a,(4,y)
8650  e327 01            	rrwa	x,a
8651  e328               L655:
8652  e328 1609          	ldw	y,(OFST+1,sp)
8653  e32a               LC020:
8654  e32a 90ef06        	ldw	(6,y),x
8655                     ; 1674 }
8657  e32d cce24a        	jra	L065
8729                     ; 1677 struct mqtt_queued_message* mqtt_mq_find(struct mqtt_message_queue *mq, enum MQTTControlPacketType control_type, uint16_t *packet_id)
8729                     ; 1678 {
8730                     .text:	section	.text,new
8731  e330               _mqtt_mq_find:
8733  e330 89            	pushw	x
8734  e331 89            	pushw	x
8735       00000002      OFST:	set	2
8738                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8740  e332 ee02          	ldw	x,(2,x)
8742  e334 2025          	jra	L1163
8743  e336               L5063:
8744                     ; 1681         if (curr->control_type == control_type) {
8746  e336 1e01          	ldw	x,(OFST-1,sp)
8747  e338 e609          	ld	a,(9,x)
8748  e33a 1107          	cp	a,(OFST+5,sp)
8749  e33c 261b          	jrne	L5163
8750                     ; 1682             if ((packet_id == NULL && curr->state != MQTT_QUEUED_COMPLETE) ||
8750                     ; 1683                 (packet_id != NULL && *packet_id == curr->packet_id)) {
8752  e33e 1e08          	ldw	x,(OFST+6,sp)
8753  e340 2608          	jrne	L3263
8755  e342 1e01          	ldw	x,(OFST-1,sp)
8756  e344 e604          	ld	a,(4,x)
8757  e346 a102          	cp	a,#2
8758  e348 261f          	jrne	L465
8759  e34a               L3263:
8761  e34a 1e08          	ldw	x,(OFST+6,sp)
8762  e34c 270b          	jreq	L5163
8764  e34e 1601          	ldw	y,(OFST-1,sp)
8765  e350 fe            	ldw	x,(x)
8766  e351 90e30a        	cpw	x,(10,y)
8767  e354 2603          	jrne	L5163
8768  e356 93            	ldw	x,y
8769                     ; 1684                 return curr;
8772  e357 2010          	jra	L465
8773  e359               L5163:
8774                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8776  e359 1e01          	ldw	x,(OFST-1,sp)
8777  e35b               L1163:
8778  e35b 1d000c        	subw	x,#12
8779  e35e 1f01          	ldw	(OFST-1,sp),x
8783  e360 1e03          	ldw	x,(OFST+1,sp)
8784  e362 ee08          	ldw	x,(8,x)
8785  e364 1301          	cpw	x,(OFST-1,sp)
8786  e366 23ce          	jrule	L5063
8787                     ; 1688     return NULL;
8789  e368 5f            	clrw	x
8791  e369               L465:
8793  e369 5b04          	addw	sp,#4
8794  e36b 81            	ret	
8872                     ; 1693 int16_t mqtt_unpack_response(struct mqtt_response* response, const uint8_t *buf, uint16_t bufsz)
8872                     ; 1694 {
8873                     .text:	section	.text,new
8874  e36c               _mqtt_unpack_response:
8876  e36c 89            	pushw	x
8877  e36d 5204          	subw	sp,#4
8878       00000004      OFST:	set	4
8881                     ; 1695     const uint8_t *const start = buf;
8883  e36f 1e09          	ldw	x,(OFST+5,sp)
8884  e371 1f01          	ldw	(OFST-3,sp),x
8886                     ; 1696     int16_t rv = mqtt_unpack_fixed_header(response, buf, bufsz);
8888  e373 1e0b          	ldw	x,(OFST+7,sp)
8889  e375 89            	pushw	x
8890  e376 1e0b          	ldw	x,(OFST+7,sp)
8891  e378 89            	pushw	x
8892  e379 1e09          	ldw	x,(OFST+5,sp)
8893  e37b cdd9d8        	call	_mqtt_unpack_fixed_header
8895  e37e 5b04          	addw	sp,#4
8896  e380 1f03          	ldw	(OFST-1,sp),x
8898                     ; 1698     if (rv <= 0) return rv;
8900  e382 9c            	rvf	
8904  e383 2d2c          	jrsle	L216
8905                     ; 1699     else buf += rv;
8907  e385 1e09          	ldw	x,(OFST+5,sp)
8908  e387 72fb03        	addw	x,(OFST-1,sp)
8909  e38a 1f09          	ldw	(OFST+5,sp),x
8910                     ; 1701     switch(response->fixed_header.control_type) {
8912  e38c 1e05          	ldw	x,(OFST+1,sp)
8913  e38e f6            	ld	a,(x)
8915                     ; 1728         default:
8915                     ; 1729             return MQTT_ERROR_RESPONSE_INVALID_CONTROL_TYPE;
8916  e38f a002          	sub	a,#2
8917  e391 2721          	jreq	L5263
8918  e393 4a            	dec	a
8919  e394 2728          	jreq	L7263
8920  e396 4a            	dec	a
8921  e397 272f          	jreq	L1363
8922  e399 4a            	dec	a
8923  e39a 2736          	jreq	L3363
8924  e39c 4a            	dec	a
8925  e39d 273d          	jreq	L5363
8926  e39f 4a            	dec	a
8927  e3a0 2744          	jreq	L7363
8928  e3a2 a002          	sub	a,#2
8929  e3a4 274a          	jreq	L1463
8930  e3a6 a002          	sub	a,#2
8931  e3a8 2750          	jreq	L3463
8932  e3aa a002          	sub	a,#2
8933  e3ac 2756          	jreq	L5463
8936  e3ae ae800e        	ldw	x,#32782
8938  e3b1               L216:
8940  e3b1 5b06          	addw	sp,#6
8941  e3b3 81            	ret	
8942  e3b4               L5263:
8943                     ; 1702         case MQTT_CONTROL_CONNACK:
8943                     ; 1703             rv = mqtt_unpack_connack_response(response, buf);
8945  e3b4 1e09          	ldw	x,(OFST+5,sp)
8946  e3b6 89            	pushw	x
8947  e3b7 1e07          	ldw	x,(OFST+3,sp)
8948  e3b9 cddcae        	call	_mqtt_unpack_connack_response
8950                     ; 1704             break;
8952  e3bc 204a          	jra	L3173
8953  e3be               L7263:
8954                     ; 1705         case MQTT_CONTROL_PUBLISH:
8954                     ; 1706             rv = mqtt_unpack_publish_response(response, buf);
8956  e3be 1e09          	ldw	x,(OFST+5,sp)
8957  e3c0 89            	pushw	x
8958  e3c1 1e07          	ldw	x,(OFST+3,sp)
8959  e3c3 cdde1f        	call	_mqtt_unpack_publish_response
8961                     ; 1707             break;
8963  e3c6 2040          	jra	L3173
8964  e3c8               L1363:
8965                     ; 1708         case MQTT_CONTROL_PUBACK:
8965                     ; 1709             rv = mqtt_unpack_pubxxx_response(response, buf);
8967  e3c8 1e09          	ldw	x,(OFST+5,sp)
8968  e3ca 89            	pushw	x
8969  e3cb 1e07          	ldw	x,(OFST+3,sp)
8970  e3cd cddf4c        	call	_mqtt_unpack_pubxxx_response
8972                     ; 1710             break;
8974  e3d0 2036          	jra	L3173
8975  e3d2               L3363:
8976                     ; 1711         case MQTT_CONTROL_PUBREC:
8976                     ; 1712             rv = mqtt_unpack_pubxxx_response(response, buf);
8978  e3d2 1e09          	ldw	x,(OFST+5,sp)
8979  e3d4 89            	pushw	x
8980  e3d5 1e07          	ldw	x,(OFST+3,sp)
8981  e3d7 cddf4c        	call	_mqtt_unpack_pubxxx_response
8983                     ; 1713             break;
8985  e3da 202c          	jra	L3173
8986  e3dc               L5363:
8987                     ; 1714         case MQTT_CONTROL_PUBREL:
8987                     ; 1715             rv = mqtt_unpack_pubxxx_response(response, buf);
8989  e3dc 1e09          	ldw	x,(OFST+5,sp)
8990  e3de 89            	pushw	x
8991  e3df 1e07          	ldw	x,(OFST+3,sp)
8992  e3e1 cddf4c        	call	_mqtt_unpack_pubxxx_response
8994                     ; 1716             break;
8996  e3e4 2022          	jra	L3173
8997  e3e6               L7363:
8998                     ; 1717         case MQTT_CONTROL_PUBCOMP:
8998                     ; 1718             rv = mqtt_unpack_pubxxx_response(response, buf);
9000  e3e6 1e09          	ldw	x,(OFST+5,sp)
9001  e3e8 89            	pushw	x
9002  e3e9 1e07          	ldw	x,(OFST+3,sp)
9003  e3eb cddf4c        	call	_mqtt_unpack_pubxxx_response
9005                     ; 1719             break;
9007  e3ee 2018          	jra	L3173
9008  e3f0               L1463:
9009                     ; 1720         case MQTT_CONTROL_SUBACK:
9009                     ; 1721             rv = mqtt_unpack_suback_response(response, buf);
9011  e3f0 1e09          	ldw	x,(OFST+5,sp)
9012  e3f2 89            	pushw	x
9013  e3f3 1e07          	ldw	x,(OFST+3,sp)
9014  e3f5 cddf84        	call	_mqtt_unpack_suback_response
9016                     ; 1722             break;
9018  e3f8 200e          	jra	L3173
9019  e3fa               L3463:
9020                     ; 1723         case MQTT_CONTROL_UNSUBACK:
9020                     ; 1724             rv = mqtt_unpack_unsuback_response(response, buf);
9022  e3fa 1e09          	ldw	x,(OFST+5,sp)
9023  e3fc 89            	pushw	x
9024  e3fd 1e07          	ldw	x,(OFST+3,sp)
9025  e3ff cde0fa        	call	_mqtt_unpack_unsuback_response
9027                     ; 1725             break;
9029  e402 2004          	jra	L3173
9030  e404               L5463:
9031                     ; 1726         case MQTT_CONTROL_PINGRESP:
9031                     ; 1727             return rv;
9033  e404 1e03          	ldw	x,(OFST-1,sp)
9035  e406 20a9          	jra	L216
9036  e408               L3173:
9037  e408 5b02          	addw	sp,#2
9038  e40a 1f03          	ldw	(OFST-1,sp),x
9040                     ; 1732     if (rv < 0) return rv;
9045  e40c 2ba3          	jrmi	L216
9046                     ; 1733     buf += rv;
9048  e40e 72fb09        	addw	x,(OFST+5,sp)
9049  e411 1f09          	ldw	(OFST+5,sp),x
9050                     ; 1734     return buf - start;
9052  e413 72f001        	subw	x,(OFST-3,sp)
9054  e416 2099          	jra	L216
9104                     ; 1751 int16_t __mqtt_pack_uint16(uint8_t *buf, uint16_t integer)
9104                     ; 1752 {
9105                     .text:	section	.text,new
9106  e418               ___mqtt_pack_uint16:
9108  e418 89            	pushw	x
9109  e419 89            	pushw	x
9110       00000002      OFST:	set	2
9113                     ; 1753   uint16_t integer_htons = HTONS(integer);
9115  e41a 1e07          	ldw	x,(OFST+5,sp)
9116  e41c 1f01          	ldw	(OFST-1,sp),x
9118                     ; 1754   memcpy(buf, &integer_htons, 2);
9120  e41e 1e03          	ldw	x,(OFST+1,sp)
9121  e420 bf04          	ldw	c_x,x
9122  e422 9096          	ldw	y,sp
9123  e424 905c          	incw	y
9124  e426 90bf07        	ldw	c_y,y
9125  e429 ae0002        	ldw	x,#2
9126  e42c               L616:
9127  e42c 5a            	decw	x
9128  e42d 92d607        	ld	a,([c_y.w],x)
9129  e430 92d704        	ld	([c_x.w],x),a
9130  e433 5d            	tnzw	x
9131  e434 26f6          	jrne	L616
9132                     ; 1755   return 2;
9134  e436 ae0002        	ldw	x,#2
9137  e439 5b04          	addw	sp,#4
9138  e43b 81            	ret	
9182                     ; 1759 uint16_t __mqtt_unpack_uint16(const uint8_t *buf)
9182                     ; 1760 {
9183                     .text:	section	.text,new
9184  e43c               ___mqtt_unpack_uint16:
9186  e43c 89            	pushw	x
9187  e43d 89            	pushw	x
9188       00000002      OFST:	set	2
9191                     ; 1762   memcpy(&integer_htons, buf, 2);
9193  e43e 96            	ldw	x,sp
9194  e43f 5c            	incw	x
9195  e440 bf04          	ldw	c_x,x
9196  e442 1603          	ldw	y,(OFST+1,sp)
9197  e444 90bf07        	ldw	c_y,y
9198  e447 ae0002        	ldw	x,#2
9199  e44a               L226:
9200  e44a 5a            	decw	x
9201  e44b 92d607        	ld	a,([c_y.w],x)
9202  e44e 92d704        	ld	([c_x.w],x),a
9203  e451 5d            	tnzw	x
9204  e452 26f6          	jrne	L226
9205                     ; 1763   return HTONS(integer_htons);
9207  e454 1e01          	ldw	x,(OFST-1,sp)
9210  e456 5b04          	addw	sp,#4
9211  e458 81            	ret	
9272                     ; 1767 int16_t __mqtt_pack_str(uint8_t *buf, const char* str)
9272                     ; 1768 {
9273                     .text:	section	.text,new
9274  e459               ___mqtt_pack_str:
9276  e459 89            	pushw	x
9277  e45a 5204          	subw	sp,#4
9278       00000004      OFST:	set	4
9281                     ; 1769     uint16_t length = (uint16_t)strlen(str);
9283  e45c 1e09          	ldw	x,(OFST+5,sp)
9284  e45e cdf6dd        	call	_strlen
9286  e461 1f01          	ldw	(OFST-3,sp),x
9288                     ; 1770     int16_t i = 0;
9290  e463 5f            	clrw	x
9291  e464 1f03          	ldw	(OFST-1,sp),x
9293                     ; 1772     buf += __mqtt_pack_uint16(buf, length);
9295  e466 1e01          	ldw	x,(OFST-3,sp)
9296  e468 89            	pushw	x
9297  e469 1e07          	ldw	x,(OFST+3,sp)
9298  e46b cde418        	call	___mqtt_pack_uint16
9300  e46e 5b02          	addw	sp,#2
9301  e470 72fb05        	addw	x,(OFST+1,sp)
9302  e473 1f05          	ldw	(OFST+1,sp),x
9304  e475 1e03          	ldw	x,(OFST-1,sp)
9305  e477 200f          	jra	L3104
9306  e479               L7004:
9307                     ; 1775     for(; i < length; ++i) *(buf++) = str[i];
9309  e479 72fb09        	addw	x,(OFST+5,sp)
9310  e47c f6            	ld	a,(x)
9311  e47d 1e05          	ldw	x,(OFST+1,sp)
9312  e47f f7            	ld	(x),a
9313  e480 5c            	incw	x
9314  e481 1f05          	ldw	(OFST+1,sp),x
9317  e483 1e03          	ldw	x,(OFST-1,sp)
9318  e485 5c            	incw	x
9319  e486 1f03          	ldw	(OFST-1,sp),x
9321  e488               L3104:
9324  e488 1301          	cpw	x,(OFST-3,sp)
9325  e48a 25ed          	jrult	L7004
9326                     ; 1778     return length + 2;
9328  e48c 1e01          	ldw	x,(OFST-3,sp)
9329  e48e 1c0002        	addw	x,#2
9332  e491 5b06          	addw	sp,#6
9333  e493 81            	ret	
9397                     	switch	.bss
9398  016f               _mqtt_sendbuf:
9399  016f 000000000000  	ds.b	300
9400                     	xdef	_mqtt_sendbuf
9401  029b               _MQTT_error_status:
9402  029b 00            	ds.b	1
9403                     	xdef	_MQTT_error_status
9404                     	xref	_second_counter
9405                     	xref	_uip_flags
9406                     	xref	_uip_len
9407                     	xdef	_mqtt_disconnect
9408                     	xdef	___mqtt_ping
9409                     	xdef	_mqtt_ping
9410                     	xdef	_mqtt_unsubscribe
9411                     	xdef	_mqtt_subscribe
9412                     	xdef	___mqtt_pubcomp
9413                     	xdef	___mqtt_pubrel
9414                     	xdef	___mqtt_pubrec
9415                     	xdef	___mqtt_puback
9416                     	xdef	_mqtt_publish
9417                     	xdef	_mqtt_connect
9418                     	xdef	_mqtt_init
9419                     	xdef	_mqtt_sync
9420                     	xdef	___mqtt_recv
9421                     	xdef	___mqtt_send
9422                     	xdef	___mqtt_next_pid
9423                     	xdef	_mqtt_mq_find
9424                     	xdef	_mqtt_mq_register
9425                     	xdef	_mqtt_mq_clean
9426                     	xdef	_mqtt_mq_init
9427                     	xdef	_mqtt_pack_disconnect
9428                     	xdef	_mqtt_pack_ping_request
9429                     	xdef	_mqtt_pack_unsubscribe_request
9430                     	xdef	_mqtt_pack_subscribe_request
9431                     	xdef	_mqtt_pack_pubxxx_request
9432                     	xdef	_mqtt_pack_publish_request
9433                     	xdef	_mqtt_pack_connection_request
9434                     	xdef	_mqtt_pack_fixed_header
9435                     	xdef	_mqtt_unpack_response
9436                     	xdef	_mqtt_unpack_unsuback_response
9437                     	xdef	_mqtt_unpack_suback_response
9438                     	xdef	_mqtt_unpack_pubxxx_response
9439                     	xdef	_mqtt_unpack_publish_response
9440                     	xdef	_mqtt_unpack_connack_response
9441                     	xdef	_mqtt_unpack_fixed_header
9442                     	xdef	___mqtt_pack_str
9443                     	xdef	___mqtt_unpack_uint16
9444                     	xdef	___mqtt_pack_uint16
9445                     	xref	_mqtt_pal_recvall
9446                     	xref	_mqtt_pal_sendall
9447                     	xref	_memmove
9448                     	xref	_strlen
9449                     	switch	.const
9450  9f0d               L5051:
9451  9f0d 3f400000      	dc.w	16192,0
9452                     	xref.b	c_lreg
9453                     	xref.b	c_x
9454                     	xref.b	c_y
9474                     	xref	c_lgsbc
9475                     	xref	c_lgadc
9476                     	xref	c_lgursh
9477                     	xref	c_uitolx
9478                     	xref	c_lgadd
9479                     	xref	c_itoly
9480                     	xref	c_ltor
9481                     	xref	c_rtol
9482                     	xref	c_ftol
9483                     	xref	c_fmul
9484                     	xref	c_uitof
9485                     	xref	c_lcmp
9486                     	xref	c_ladd
9487                     	xref	c_itolx
9488                     	xref	c_bmulx
9489                     	xref	c_bmuly
9490                     	xref	c_sdivx
9491                     	end
