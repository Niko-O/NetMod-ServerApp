   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
 508                     ; 77 int16_t mqtt_sync(struct mqtt_client *client)
 508                     ; 78 {
 510                     .text:	section	.text,new
 511  cf58               _mqtt_sync:
 513  cf58 89            	pushw	x
 514  cf59 89            	pushw	x
 515       00000002      OFST:	set	2
 518                     ; 86     if ((uip_newdata() || uip_acked()) && uip_len > 0) {
 520  cf5a 720202c405    	btjt	_uip_flags,#1,L172
 522  cf5f 720102c411    	btjf	_uip_flags,#0,L762
 523  cf64               L172:
 525  cf64 ce036f        	ldw	x,_uip_len
 526  cf67 270c          	jreq	L762
 527                     ; 87       err = __mqtt_recv(client);
 529  cf69 1e03          	ldw	x,(OFST+1,sp)
 530  cf6b cdd67e        	call	___mqtt_recv
 532  cf6e 1f01          	ldw	(OFST-1,sp),x
 534                     ; 88       if (err != MQTT_OK) {
 536  cf70 a30001        	cpw	x,#1
 537                     ; 89         return err;
 540  cf73 2616          	jrne	L772
 541  cf75               L762:
 542                     ; 98     err = __mqtt_send(client);
 544  cf75 1e03          	ldw	x,(OFST+1,sp)
 545  cf77 cdd49e        	call	___mqtt_send
 547  cf7a 1f01          	ldw	(OFST-1,sp),x
 549                     ; 101     if (err == MQTT_OK) {
 551  cf7c a30001        	cpw	x,#1
 552  cf7f 2606          	jrne	L572
 553                     ; 102       MQTT_error_status = 1;
 555  cf81 3501029b      	mov	_MQTT_error_status,#1
 557  cf85 2004          	jra	L772
 558  cf87               L572:
 559                     ; 104     else MQTT_error_status = 0;
 561  cf87 725f029b      	clr	_MQTT_error_status
 562  cf8b               L772:
 563                     ; 105     return err;
 567  cf8b 5b04          	addw	sp,#4
 568  cf8d 81            	ret	
 631                     ; 109 uint16_t __mqtt_next_pid(struct mqtt_client *client)
 631                     ; 110 {
 632                     .text:	section	.text,new
 633  cf8e               ___mqtt_next_pid:
 635  cf8e 89            	pushw	x
 636  cf8f 5204          	subw	sp,#4
 637       00000004      OFST:	set	4
 640                     ; 112     int16_t pid_exists = 0;
 642                     ; 113     if (client->pid_lfsr == 0) client->pid_lfsr = 163u;
 644  cf91 e601          	ld	a,(1,x)
 645  cf93 fa            	or	a,(x)
 646  cf94 2605          	jrne	L533
 649  cf96 90ae00a3      	ldw	y,#163
 650  cf9a ff            	ldw	(x),y
 651  cf9b               L533:
 652                     ; 119         unsigned lsb = client->pid_lfsr & 1;
 654  cf9b 1e05          	ldw	x,(OFST+1,sp)
 655  cf9d fe            	ldw	x,(x)
 656  cf9e 01            	rrwa	x,a
 657  cf9f a401          	and	a,#1
 658  cfa1 5f            	clrw	x
 659  cfa2 02            	rlwa	x,a
 660  cfa3 1f03          	ldw	(OFST-1,sp),x
 661  cfa5 01            	rrwa	x,a
 663                     ; 120         (client->pid_lfsr) >>= 1;
 665  cfa6 1e05          	ldw	x,(OFST+1,sp)
 666  cfa8 74            	srl	(x)
 667  cfa9 6601          	rrc	(1,x)
 668                     ; 121         if (lsb) client->pid_lfsr ^= 0xB400u;
 670  cfab 1e03          	ldw	x,(OFST-1,sp)
 671  cfad 2706          	jreq	L343
 674  cfaf 1e05          	ldw	x,(OFST+1,sp)
 675  cfb1 f6            	ld	a,(x)
 676  cfb2 a8b4          	xor	a,#180
 677  cfb4 f7            	ld	(x),a
 678  cfb5               L343:
 679                     ; 124         pid_exists = 0;
 681  cfb5 5f            	clrw	x
 682  cfb6 1f03          	ldw	(OFST-1,sp),x
 684                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 686  cfb8 1e05          	ldw	x,(OFST+1,sp)
 687  cfba ee24          	ldw	x,(36,x)
 689  cfbc 201b          	jra	L153
 690  cfbe               L543:
 691                     ; 126             if (curr->packet_id == client->pid_lfsr) {
 693  cfbe 1e01          	ldw	x,(OFST-3,sp)
 694  cfc0 1605          	ldw	y,(OFST+1,sp)
 695  cfc2 ee0a          	ldw	x,(10,x)
 696  cfc4 90f3          	cpw	x,(y)
 697  cfc6 260f          	jrne	L553
 698                     ; 127                 pid_exists = 1;
 700  cfc8 ae0001        	ldw	x,#1
 701  cfcb 1f03          	ldw	(OFST-1,sp),x
 703                     ; 128                 break;
 704  cfcd               L733:
 705                     ; 132     } while(pid_exists);
 707  cfcd 1e03          	ldw	x,(OFST-1,sp)
 708  cfcf 26ca          	jrne	L533
 709                     ; 134     return client->pid_lfsr;
 711  cfd1 1e05          	ldw	x,(OFST+1,sp)
 712  cfd3 fe            	ldw	x,(x)
 715  cfd4 5b06          	addw	sp,#6
 716  cfd6 81            	ret	
 717  cfd7               L553:
 718                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 720  cfd7 1e01          	ldw	x,(OFST-3,sp)
 721  cfd9               L153:
 722  cfd9 1d000c        	subw	x,#12
 723  cfdc 1f01          	ldw	(OFST-3,sp),x
 727  cfde 1e05          	ldw	x,(OFST+1,sp)
 728  cfe0 ee2a          	ldw	x,(42,x)
 729  cfe2 1301          	cpw	x,(OFST-3,sp)
 730  cfe4 23d8          	jrule	L543
 731  cfe6 20e5          	jra	L733
 815                     ; 138 int16_t mqtt_init(struct mqtt_client *client,
 815                     ; 139                uint8_t *sendbuf, uint16_t sendbufsz,
 815                     ; 140                uint8_t *recvbuf, uint16_t recvbufsz,
 815                     ; 141                void (*publish_response_callback)(void** state,struct mqtt_response_publish *publish))
 815                     ; 142 {
 816                     .text:	section	.text,new
 817  cfe8               _mqtt_init:
 819  cfe8 89            	pushw	x
 820       00000000      OFST:	set	0
 823                     ; 143     if (client == NULL || sendbuf == NULL || recvbuf == NULL) {
 825  cfe9 5d            	tnzw	x
 826  cfea 2708          	jreq	L124
 828  cfec 1e05          	ldw	x,(OFST+5,sp)
 829  cfee 2704          	jreq	L124
 831  cff0 1e09          	ldw	x,(OFST+9,sp)
 832  cff2 2605          	jrne	L714
 833  cff4               L124:
 834                     ; 144       return MQTT_ERROR_NULLPTR;
 836  cff4 ae8001        	ldw	x,#32769
 838  cff7 2044          	jra	L22
 839  cff9               L714:
 840                     ; 147     mqtt_mq_init(&client->mq, sendbuf, sendbufsz);
 842  cff9 1e07          	ldw	x,(OFST+7,sp)
 843  cffb 89            	pushw	x
 844  cffc 1e07          	ldw	x,(OFST+7,sp)
 845  cffe 89            	pushw	x
 846  cfff 1e05          	ldw	x,(OFST+5,sp)
 847  d001 1c0022        	addw	x,#34
 848  d004 cde0af        	call	_mqtt_mq_init
 850  d007 5b04          	addw	sp,#4
 851                     ; 149     client->recv_buffer.mem_start = recvbuf;
 853  d009 1e01          	ldw	x,(OFST+1,sp)
 854  d00b 1609          	ldw	y,(OFST+9,sp)
 855  d00d ef1a          	ldw	(26,x),y
 856                     ; 150     client->recv_buffer.mem_size = recvbufsz;
 858  d00f 160b          	ldw	y,(OFST+11,sp)
 859  d011 ef1c          	ldw	(28,x),y
 860                     ; 151     client->recv_buffer.curr = client->recv_buffer.mem_start;
 862  d013 9093          	ldw	y,x
 863  d015 90ee1a        	ldw	y,(26,y)
 864  d018 ef1e          	ldw	(30,x),y
 865                     ; 152     client->recv_buffer.curr_sz = client->recv_buffer.mem_size;
 867  d01a 9093          	ldw	y,x
 868  d01c 90ee1c        	ldw	y,(28,y)
 869  d01f ef20          	ldw	(32,x),y
 870                     ; 154     client->error = MQTT_ERROR_CONNECT_NOT_CALLED;
 872  d021 90ae800f      	ldw	y,#32783
 873  d025 ef0a          	ldw	(10,x),y
 874                     ; 155     client->response_timeout = 30;
 876  d027 90ae001e      	ldw	y,#30
 877  d02b ef0c          	ldw	(12,x),y
 878                     ; 156     client->number_of_timeouts = 0;
 880  d02d 905f          	clrw	y
 881  d02f ef0e          	ldw	(14,x),y
 882                     ; 157     client->publish_response_callback = publish_response_callback;
 884  d031 160d          	ldw	y,(OFST+13,sp)
 885  d033 ef10          	ldw	(16,x),y
 886                     ; 158     client->pid_lfsr = 0;
 888  d035 905f          	clrw	y
 889  d037 ff            	ldw	(x),y
 890                     ; 159     client->send_offset = 0;
 892  d038 ef04          	ldw	(4,x),y
 893                     ; 161     return MQTT_OK;
 895  d03a ae0001        	ldw	x,#1
 897  d03d               L22:
 899  d03d 5b02          	addw	sp,#2
 900  d03f 81            	ret	
1030                     ; 228 int16_t mqtt_connect(struct mqtt_client *client,
1030                     ; 229                      const char* client_id,
1030                     ; 230                      const char* will_topic,
1030                     ; 231                      const void* will_message,
1030                     ; 232                      uint16_t will_message_size,
1030                     ; 233                      const char* user_name,
1030                     ; 234                      const char* password,
1030                     ; 235                      uint8_t connect_flags,
1030                     ; 236                      uint16_t keep_alive)
1030                     ; 237 {
1031                     .text:	section	.text,new
1032  d040               _mqtt_connect:
1034  d040 89            	pushw	x
1035  d041 89            	pushw	x
1036       00000002      OFST:	set	2
1039                     ; 242     client->keep_alive = keep_alive;
1041  d042 1614          	ldw	y,(OFST+18,sp)
1042  d044 ef02          	ldw	(2,x),y
1043                     ; 244     if (client->error == MQTT_ERROR_CONNECT_NOT_CALLED) {
1045  d046 9093          	ldw	y,x
1046  d048 90ee0a        	ldw	y,(10,y)
1047  d04b 90a3800f      	cpw	y,#32783
1048  d04f 2606          	jrne	L705
1049                     ; 245         client->error = MQTT_OK;
1051  d051 90ae0001      	ldw	y,#1
1052  d055 ef0a          	ldw	(10,x),y
1053  d057               L705:
1054                     ; 249     MQTT_CLIENT_TRY_PACK(rv, msg, client, 
1056  d057 e60a          	ld	a,(10,x)
1057  d059 2a04          	jrpl	L115
1060  d05b ee0a          	ldw	x,(10,x)
1062  d05d 2031          	jra	L63
1063  d05f               L115:
1066  d05f 1e14          	ldw	x,(OFST+18,sp)
1067  d061 89            	pushw	x
1068  d062 7b15          	ld	a,(OFST+19,sp)
1069  d064 88            	push	a
1070  d065 1e14          	ldw	x,(OFST+18,sp)
1071  d067 89            	pushw	x
1072  d068 1e14          	ldw	x,(OFST+18,sp)
1073  d06a 89            	pushw	x
1074  d06b 1e14          	ldw	x,(OFST+18,sp)
1075  d06d 89            	pushw	x
1076  d06e 1e14          	ldw	x,(OFST+18,sp)
1077  d070 89            	pushw	x
1078  d071 1e14          	ldw	x,(OFST+18,sp)
1079  d073 89            	pushw	x
1080  d074 1e14          	ldw	x,(OFST+18,sp)
1081  d076 89            	pushw	x
1082  d077 1e12          	ldw	x,(OFST+16,sp)
1083  d079 ee28          	ldw	x,(40,x)
1084  d07b 89            	pushw	x
1085  d07c 1e14          	ldw	x,(OFST+18,sp)
1086  d07e ee26          	ldw	x,(38,x)
1087  d080 cddac7        	call	_mqtt_pack_connection_request
1089  d083 5b11          	addw	sp,#17
1090  d085 1f01          	ldw	(OFST-1,sp),x
1094  d087 2a0a          	jrpl	L315
1099  d089               LC001:
1101  d089 1e03          	ldw	x,(OFST+1,sp)
1102  d08b 1601          	ldw	y,(OFST-1,sp)
1103  d08d ef0a          	ldw	(10,x),y
1105  d08f 93            	ldw	x,y
1107  d090               L63:
1109  d090 5b04          	addw	sp,#4
1110  d092 81            	ret	
1111  d093               L315:
1114  d093 2641          	jrne	L515
1117  d095 1e03          	ldw	x,(OFST+1,sp)
1118  d097 1c0022        	addw	x,#34
1119  d09a cde165        	call	_mqtt_mq_clean
1123  d09d 1e14          	ldw	x,(OFST+18,sp)
1124  d09f 89            	pushw	x
1125  d0a0 7b15          	ld	a,(OFST+19,sp)
1126  d0a2 88            	push	a
1127  d0a3 1e14          	ldw	x,(OFST+18,sp)
1128  d0a5 89            	pushw	x
1129  d0a6 1e14          	ldw	x,(OFST+18,sp)
1130  d0a8 89            	pushw	x
1131  d0a9 1e14          	ldw	x,(OFST+18,sp)
1132  d0ab 89            	pushw	x
1133  d0ac 1e14          	ldw	x,(OFST+18,sp)
1134  d0ae 89            	pushw	x
1135  d0af 1e14          	ldw	x,(OFST+18,sp)
1136  d0b1 89            	pushw	x
1137  d0b2 1e14          	ldw	x,(OFST+18,sp)
1138  d0b4 89            	pushw	x
1139  d0b5 1e12          	ldw	x,(OFST+16,sp)
1140  d0b7 ee28          	ldw	x,(40,x)
1141  d0b9 89            	pushw	x
1142  d0ba 1e14          	ldw	x,(OFST+18,sp)
1143  d0bc ee26          	ldw	x,(38,x)
1144  d0be cddac7        	call	_mqtt_pack_connection_request
1146  d0c1 5b11          	addw	sp,#17
1147  d0c3 1f01          	ldw	(OFST-1,sp),x
1154  d0c5 2bc2          	jrmi	LC001
1157  d0c7 260d          	jrne	L515
1160  d0c9 1e03          	ldw	x,(OFST+1,sp)
1161  d0cb 90ae8010      	ldw	y,#32784
1162  d0cf ef0a          	ldw	(10,x),y
1165  d0d1 ae8010        	ldw	x,#32784
1167  d0d4 20ba          	jra	L63
1168  d0d6               L515:
1171  d0d6 89            	pushw	x
1172  d0d7 1e05          	ldw	x,(OFST+3,sp)
1173  d0d9 1c0022        	addw	x,#34
1174  d0dc cde0fe        	call	_mqtt_mq_register
1176  d0df 5b02          	addw	sp,#2
1178                     ; 266     msg->control_type = MQTT_CONTROL_CONNECT;
1181  d0e1 a601          	ld	a,#1
1182  d0e3 e709          	ld	(9,x),a
1183                     ; 268     return MQTT_OK;
1185  d0e5 ae0001        	ldw	x,#1
1187  d0e8 20a6          	jra	L63
1290                     ; 272 int16_t mqtt_publish(struct mqtt_client *client,
1290                     ; 273                      const char* topic_name,
1290                     ; 274                      const void* application_message,
1290                     ; 275                      uint16_t application_message_size,
1290                     ; 276                      uint8_t publish_flags)
1290                     ; 277 {
1291                     .text:	section	.text,new
1292  d0ea               _mqtt_publish:
1294  d0ea 89            	pushw	x
1295  d0eb 5204          	subw	sp,#4
1296       00000004      OFST:	set	4
1299                     ; 281     packet_id = __mqtt_next_pid(client);
1301  d0ed cdcf8e        	call	___mqtt_next_pid
1303  d0f0 1f01          	ldw	(OFST-3,sp),x
1305                     ; 284     MQTT_CLIENT_TRY_PACK(
1307  d0f2 1e05          	ldw	x,(OFST+1,sp)
1308  d0f4 e60a          	ld	a,(10,x)
1309  d0f6 2a04          	jrpl	L575
1312  d0f8 ee0a          	ldw	x,(10,x)
1314  d0fa 2028          	jra	L45
1315  d0fc               L575:
1318  d0fc 7b0f          	ld	a,(OFST+11,sp)
1319  d0fe 88            	push	a
1320  d0ff 1e0e          	ldw	x,(OFST+10,sp)
1321  d101 89            	pushw	x
1322  d102 1e0e          	ldw	x,(OFST+10,sp)
1323  d104 89            	pushw	x
1324  d105 1e06          	ldw	x,(OFST+2,sp)
1325  d107 89            	pushw	x
1326  d108 1e10          	ldw	x,(OFST+12,sp)
1327  d10a 89            	pushw	x
1328  d10b 1e0e          	ldw	x,(OFST+10,sp)
1329  d10d ee28          	ldw	x,(40,x)
1330  d10f 89            	pushw	x
1331  d110 1e10          	ldw	x,(OFST+12,sp)
1332  d112 ee26          	ldw	x,(38,x)
1333  d114 cddcc1        	call	_mqtt_pack_publish_request
1335  d117 5b0b          	addw	sp,#11
1336  d119 1f03          	ldw	(OFST-1,sp),x
1340  d11b 2a0a          	jrpl	L775
1345  d11d               LC002:
1347  d11d 1e05          	ldw	x,(OFST+1,sp)
1348  d11f 1603          	ldw	y,(OFST-1,sp)
1349  d121 ef0a          	ldw	(10,x),y
1351  d123 93            	ldw	x,y
1353  d124               L45:
1355  d124 5b06          	addw	sp,#6
1356  d126 81            	ret	
1357  d127               L775:
1360  d127 2638          	jrne	L106
1363  d129 1e05          	ldw	x,(OFST+1,sp)
1364  d12b 1c0022        	addw	x,#34
1365  d12e cde165        	call	_mqtt_mq_clean
1369  d131 7b0f          	ld	a,(OFST+11,sp)
1370  d133 88            	push	a
1371  d134 1e0e          	ldw	x,(OFST+10,sp)
1372  d136 89            	pushw	x
1373  d137 1e0e          	ldw	x,(OFST+10,sp)
1374  d139 89            	pushw	x
1375  d13a 1e06          	ldw	x,(OFST+2,sp)
1376  d13c 89            	pushw	x
1377  d13d 1e10          	ldw	x,(OFST+12,sp)
1378  d13f 89            	pushw	x
1379  d140 1e0e          	ldw	x,(OFST+10,sp)
1380  d142 ee28          	ldw	x,(40,x)
1381  d144 89            	pushw	x
1382  d145 1e10          	ldw	x,(OFST+12,sp)
1383  d147 ee26          	ldw	x,(38,x)
1384  d149 cddcc1        	call	_mqtt_pack_publish_request
1386  d14c 5b0b          	addw	sp,#11
1387  d14e 1f03          	ldw	(OFST-1,sp),x
1394  d150 2bcb          	jrmi	LC002
1397  d152 260d          	jrne	L106
1400  d154 1e05          	ldw	x,(OFST+1,sp)
1401  d156 90ae8010      	ldw	y,#32784
1402  d15a ef0a          	ldw	(10,x),y
1405  d15c ae8010        	ldw	x,#32784
1407  d15f 20c3          	jra	L45
1408  d161               L106:
1411  d161 89            	pushw	x
1412  d162 1e07          	ldw	x,(OFST+3,sp)
1413  d164 1c0022        	addw	x,#34
1414  d167 cde0fe        	call	_mqtt_mq_register
1416  d16a 5b02          	addw	sp,#2
1417  d16c 1f03          	ldw	(OFST-1,sp),x
1419                     ; 298     msg->control_type = MQTT_CONTROL_PUBLISH;
1422  d16e a603          	ld	a,#3
1423  d170 e709          	ld	(9,x),a
1424                     ; 299     msg->packet_id = packet_id;
1426  d172 1601          	ldw	y,(OFST-3,sp)
1427  d174 ef0a          	ldw	(10,x),y
1428                     ; 301     return MQTT_OK;
1430  d176 ae0001        	ldw	x,#1
1432  d179 20a9          	jra	L45
1498                     ; 305 int16_t __mqtt_puback(struct mqtt_client *client, uint16_t packet_id) {
1499                     .text:	section	.text,new
1500  d17b               ___mqtt_puback:
1502  d17b 89            	pushw	x
1503  d17c 89            	pushw	x
1504       00000002      OFST:	set	2
1507                     ; 310     MQTT_CLIENT_TRY_PACK(
1509  d17d e60a          	ld	a,(10,x)
1510  d17f 2a04          	jrpl	L546
1513  d181 ee0a          	ldw	x,(10,x)
1515  d183 201e          	jra	L07
1516  d185               L546:
1519  d185 1e07          	ldw	x,(OFST+5,sp)
1520  d187 89            	pushw	x
1521  d188 4b04          	push	#4
1522  d18a 1e06          	ldw	x,(OFST+4,sp)
1523  d18c ee28          	ldw	x,(40,x)
1524  d18e 89            	pushw	x
1525  d18f 1e08          	ldw	x,(OFST+6,sp)
1526  d191 ee26          	ldw	x,(38,x)
1527  d193 cdde5d        	call	_mqtt_pack_pubxxx_request
1529  d196 5b05          	addw	sp,#5
1530  d198 1f01          	ldw	(OFST-1,sp),x
1534  d19a 2a0a          	jrpl	L746
1539  d19c               LC003:
1541  d19c 1e03          	ldw	x,(OFST+1,sp)
1542  d19e 1601          	ldw	y,(OFST-1,sp)
1543  d1a0 ef0a          	ldw	(10,x),y
1545  d1a2 93            	ldw	x,y
1547  d1a3               L07:
1549  d1a3 5b04          	addw	sp,#4
1550  d1a5 81            	ret	
1551  d1a6               L746:
1554  d1a6 262e          	jrne	L156
1557  d1a8 1e03          	ldw	x,(OFST+1,sp)
1558  d1aa 1c0022        	addw	x,#34
1559  d1ad cde165        	call	_mqtt_mq_clean
1563  d1b0 1e07          	ldw	x,(OFST+5,sp)
1564  d1b2 89            	pushw	x
1565  d1b3 4b04          	push	#4
1566  d1b5 1e06          	ldw	x,(OFST+4,sp)
1567  d1b7 ee28          	ldw	x,(40,x)
1568  d1b9 89            	pushw	x
1569  d1ba 1e08          	ldw	x,(OFST+6,sp)
1570  d1bc ee26          	ldw	x,(38,x)
1571  d1be cdde5d        	call	_mqtt_pack_pubxxx_request
1573  d1c1 5b05          	addw	sp,#5
1574  d1c3 1f01          	ldw	(OFST-1,sp),x
1581  d1c5 2bd5          	jrmi	LC003
1584  d1c7 260d          	jrne	L156
1587  d1c9 1e03          	ldw	x,(OFST+1,sp)
1588  d1cb 90ae8010      	ldw	y,#32784
1589  d1cf ef0a          	ldw	(10,x),y
1592  d1d1 ae8010        	ldw	x,#32784
1594  d1d4 20cd          	jra	L07
1595  d1d6               L156:
1598  d1d6 89            	pushw	x
1599  d1d7 1e05          	ldw	x,(OFST+3,sp)
1600  d1d9 1c0022        	addw	x,#34
1601  d1dc cde0fe        	call	_mqtt_mq_register
1603  d1df 5b02          	addw	sp,#2
1604  d1e1 1f01          	ldw	(OFST-1,sp),x
1606                     ; 321     msg->control_type = MQTT_CONTROL_PUBACK;
1609  d1e3 a604          	ld	a,#4
1610  d1e5 e709          	ld	(9,x),a
1611                     ; 322     msg->packet_id = packet_id;
1613  d1e7 1607          	ldw	y,(OFST+5,sp)
1614  d1e9 ef0a          	ldw	(10,x),y
1615                     ; 324     return MQTT_OK;
1617  d1eb ae0001        	ldw	x,#1
1619  d1ee 20b3          	jra	L07
1685                     ; 328 int16_t __mqtt_pubrec(struct mqtt_client *client, uint16_t packet_id)
1685                     ; 329 {
1686                     .text:	section	.text,new
1687  d1f0               ___mqtt_pubrec:
1689  d1f0 89            	pushw	x
1690  d1f1 89            	pushw	x
1691       00000002      OFST:	set	2
1694                     ; 334     MQTT_CLIENT_TRY_PACK(
1696  d1f2 e60a          	ld	a,(10,x)
1697  d1f4 2a04          	jrpl	L517
1700  d1f6 ee0a          	ldw	x,(10,x)
1702  d1f8 201e          	jra	L401
1703  d1fa               L517:
1706  d1fa 1e07          	ldw	x,(OFST+5,sp)
1707  d1fc 89            	pushw	x
1708  d1fd 4b05          	push	#5
1709  d1ff 1e06          	ldw	x,(OFST+4,sp)
1710  d201 ee28          	ldw	x,(40,x)
1711  d203 89            	pushw	x
1712  d204 1e08          	ldw	x,(OFST+6,sp)
1713  d206 ee26          	ldw	x,(38,x)
1714  d208 cdde5d        	call	_mqtt_pack_pubxxx_request
1716  d20b 5b05          	addw	sp,#5
1717  d20d 1f01          	ldw	(OFST-1,sp),x
1721  d20f 2a0a          	jrpl	L717
1726  d211               LC004:
1728  d211 1e03          	ldw	x,(OFST+1,sp)
1729  d213 1601          	ldw	y,(OFST-1,sp)
1730  d215 ef0a          	ldw	(10,x),y
1732  d217 93            	ldw	x,y
1734  d218               L401:
1736  d218 5b04          	addw	sp,#4
1737  d21a 81            	ret	
1738  d21b               L717:
1741  d21b 262e          	jrne	L127
1744  d21d 1e03          	ldw	x,(OFST+1,sp)
1745  d21f 1c0022        	addw	x,#34
1746  d222 cde165        	call	_mqtt_mq_clean
1750  d225 1e07          	ldw	x,(OFST+5,sp)
1751  d227 89            	pushw	x
1752  d228 4b05          	push	#5
1753  d22a 1e06          	ldw	x,(OFST+4,sp)
1754  d22c ee28          	ldw	x,(40,x)
1755  d22e 89            	pushw	x
1756  d22f 1e08          	ldw	x,(OFST+6,sp)
1757  d231 ee26          	ldw	x,(38,x)
1758  d233 cdde5d        	call	_mqtt_pack_pubxxx_request
1760  d236 5b05          	addw	sp,#5
1761  d238 1f01          	ldw	(OFST-1,sp),x
1768  d23a 2bd5          	jrmi	LC004
1771  d23c 260d          	jrne	L127
1774  d23e 1e03          	ldw	x,(OFST+1,sp)
1775  d240 90ae8010      	ldw	y,#32784
1776  d244 ef0a          	ldw	(10,x),y
1779  d246 ae8010        	ldw	x,#32784
1781  d249 20cd          	jra	L401
1782  d24b               L127:
1785  d24b 89            	pushw	x
1786  d24c 1e05          	ldw	x,(OFST+3,sp)
1787  d24e 1c0022        	addw	x,#34
1788  d251 cde0fe        	call	_mqtt_mq_register
1790  d254 5b02          	addw	sp,#2
1791  d256 1f01          	ldw	(OFST-1,sp),x
1793                     ; 345     msg->control_type = MQTT_CONTROL_PUBREC;
1796  d258 a605          	ld	a,#5
1797  d25a e709          	ld	(9,x),a
1798                     ; 346     msg->packet_id = packet_id;
1800  d25c 1607          	ldw	y,(OFST+5,sp)
1801  d25e ef0a          	ldw	(10,x),y
1802                     ; 348     return MQTT_OK;
1804  d260 ae0001        	ldw	x,#1
1806  d263 20b3          	jra	L401
1872                     ; 352 int16_t __mqtt_pubrel(struct mqtt_client *client, uint16_t packet_id)
1872                     ; 353 {
1873                     .text:	section	.text,new
1874  d265               ___mqtt_pubrel:
1876  d265 89            	pushw	x
1877  d266 89            	pushw	x
1878       00000002      OFST:	set	2
1881                     ; 358     MQTT_CLIENT_TRY_PACK(
1883  d267 e60a          	ld	a,(10,x)
1884  d269 2a04          	jrpl	L567
1887  d26b ee0a          	ldw	x,(10,x)
1889  d26d 201e          	jra	L021
1890  d26f               L567:
1893  d26f 1e07          	ldw	x,(OFST+5,sp)
1894  d271 89            	pushw	x
1895  d272 4b06          	push	#6
1896  d274 1e06          	ldw	x,(OFST+4,sp)
1897  d276 ee28          	ldw	x,(40,x)
1898  d278 89            	pushw	x
1899  d279 1e08          	ldw	x,(OFST+6,sp)
1900  d27b ee26          	ldw	x,(38,x)
1901  d27d cdde5d        	call	_mqtt_pack_pubxxx_request
1903  d280 5b05          	addw	sp,#5
1904  d282 1f01          	ldw	(OFST-1,sp),x
1908  d284 2a0a          	jrpl	L767
1913  d286               LC005:
1915  d286 1e03          	ldw	x,(OFST+1,sp)
1916  d288 1601          	ldw	y,(OFST-1,sp)
1917  d28a ef0a          	ldw	(10,x),y
1919  d28c 93            	ldw	x,y
1921  d28d               L021:
1923  d28d 5b04          	addw	sp,#4
1924  d28f 81            	ret	
1925  d290               L767:
1928  d290 262e          	jrne	L177
1931  d292 1e03          	ldw	x,(OFST+1,sp)
1932  d294 1c0022        	addw	x,#34
1933  d297 cde165        	call	_mqtt_mq_clean
1937  d29a 1e07          	ldw	x,(OFST+5,sp)
1938  d29c 89            	pushw	x
1939  d29d 4b06          	push	#6
1940  d29f 1e06          	ldw	x,(OFST+4,sp)
1941  d2a1 ee28          	ldw	x,(40,x)
1942  d2a3 89            	pushw	x
1943  d2a4 1e08          	ldw	x,(OFST+6,sp)
1944  d2a6 ee26          	ldw	x,(38,x)
1945  d2a8 cdde5d        	call	_mqtt_pack_pubxxx_request
1947  d2ab 5b05          	addw	sp,#5
1948  d2ad 1f01          	ldw	(OFST-1,sp),x
1955  d2af 2bd5          	jrmi	LC005
1958  d2b1 260d          	jrne	L177
1961  d2b3 1e03          	ldw	x,(OFST+1,sp)
1962  d2b5 90ae8010      	ldw	y,#32784
1963  d2b9 ef0a          	ldw	(10,x),y
1966  d2bb ae8010        	ldw	x,#32784
1968  d2be 20cd          	jra	L021
1969  d2c0               L177:
1972  d2c0 89            	pushw	x
1973  d2c1 1e05          	ldw	x,(OFST+3,sp)
1974  d2c3 1c0022        	addw	x,#34
1975  d2c6 cde0fe        	call	_mqtt_mq_register
1977  d2c9 5b02          	addw	sp,#2
1978  d2cb 1f01          	ldw	(OFST-1,sp),x
1980                     ; 369     msg->control_type = MQTT_CONTROL_PUBREL;
1983  d2cd a606          	ld	a,#6
1984  d2cf e709          	ld	(9,x),a
1985                     ; 370     msg->packet_id = packet_id;
1987  d2d1 1607          	ldw	y,(OFST+5,sp)
1988  d2d3 ef0a          	ldw	(10,x),y
1989                     ; 372     return MQTT_OK;
1991  d2d5 ae0001        	ldw	x,#1
1993  d2d8 20b3          	jra	L021
2059                     ; 376 int16_t __mqtt_pubcomp(struct mqtt_client *client, uint16_t packet_id)
2059                     ; 377 {
2060                     .text:	section	.text,new
2061  d2da               ___mqtt_pubcomp:
2063  d2da 89            	pushw	x
2064  d2db 89            	pushw	x
2065       00000002      OFST:	set	2
2068                     ; 382     MQTT_CLIENT_TRY_PACK(
2070  d2dc e60a          	ld	a,(10,x)
2071  d2de 2a04          	jrpl	L5301
2074  d2e0 ee0a          	ldw	x,(10,x)
2076  d2e2 201e          	jra	L431
2077  d2e4               L5301:
2080  d2e4 1e07          	ldw	x,(OFST+5,sp)
2081  d2e6 89            	pushw	x
2082  d2e7 4b07          	push	#7
2083  d2e9 1e06          	ldw	x,(OFST+4,sp)
2084  d2eb ee28          	ldw	x,(40,x)
2085  d2ed 89            	pushw	x
2086  d2ee 1e08          	ldw	x,(OFST+6,sp)
2087  d2f0 ee26          	ldw	x,(38,x)
2088  d2f2 cdde5d        	call	_mqtt_pack_pubxxx_request
2090  d2f5 5b05          	addw	sp,#5
2091  d2f7 1f01          	ldw	(OFST-1,sp),x
2095  d2f9 2a0a          	jrpl	L7301
2100  d2fb               LC006:
2102  d2fb 1e03          	ldw	x,(OFST+1,sp)
2103  d2fd 1601          	ldw	y,(OFST-1,sp)
2104  d2ff ef0a          	ldw	(10,x),y
2106  d301 93            	ldw	x,y
2108  d302               L431:
2110  d302 5b04          	addw	sp,#4
2111  d304 81            	ret	
2112  d305               L7301:
2115  d305 262e          	jrne	L1401
2118  d307 1e03          	ldw	x,(OFST+1,sp)
2119  d309 1c0022        	addw	x,#34
2120  d30c cde165        	call	_mqtt_mq_clean
2124  d30f 1e07          	ldw	x,(OFST+5,sp)
2125  d311 89            	pushw	x
2126  d312 4b07          	push	#7
2127  d314 1e06          	ldw	x,(OFST+4,sp)
2128  d316 ee28          	ldw	x,(40,x)
2129  d318 89            	pushw	x
2130  d319 1e08          	ldw	x,(OFST+6,sp)
2131  d31b ee26          	ldw	x,(38,x)
2132  d31d cdde5d        	call	_mqtt_pack_pubxxx_request
2134  d320 5b05          	addw	sp,#5
2135  d322 1f01          	ldw	(OFST-1,sp),x
2142  d324 2bd5          	jrmi	LC006
2145  d326 260d          	jrne	L1401
2148  d328 1e03          	ldw	x,(OFST+1,sp)
2149  d32a 90ae8010      	ldw	y,#32784
2150  d32e ef0a          	ldw	(10,x),y
2153  d330 ae8010        	ldw	x,#32784
2155  d333 20cd          	jra	L431
2156  d335               L1401:
2159  d335 89            	pushw	x
2160  d336 1e05          	ldw	x,(OFST+3,sp)
2161  d338 1c0022        	addw	x,#34
2162  d33b cde0fe        	call	_mqtt_mq_register
2164  d33e 5b02          	addw	sp,#2
2165  d340 1f01          	ldw	(OFST-1,sp),x
2167                     ; 393     msg->control_type = MQTT_CONTROL_PUBCOMP;
2170  d342 a607          	ld	a,#7
2171  d344 e709          	ld	(9,x),a
2172                     ; 394     msg->packet_id = packet_id;
2174  d346 1607          	ldw	y,(OFST+5,sp)
2175  d348 ef0a          	ldw	(10,x),y
2176                     ; 396     return MQTT_OK;
2178  d34a ae0001        	ldw	x,#1
2180  d34d 20b3          	jra	L431
2264                     ; 400 int16_t mqtt_subscribe(struct mqtt_client *client,
2264                     ; 401                        const char* topic_name,
2264                     ; 402                        int16_t max_qos_level)
2264                     ; 403 {
2265                     .text:	section	.text,new
2266  d34f               _mqtt_subscribe:
2268  d34f 89            	pushw	x
2269  d350 5204          	subw	sp,#4
2270       00000004      OFST:	set	4
2273                     ; 407     packet_id = __mqtt_next_pid(client);
2275  d352 cdcf8e        	call	___mqtt_next_pid
2277  d355 1f01          	ldw	(OFST-3,sp),x
2279                     ; 410     MQTT_CLIENT_TRY_PACK(
2281  d357 1e05          	ldw	x,(OFST+1,sp)
2282  d359 e60a          	ld	a,(10,x)
2283  d35b 2a04          	jrpl	L3111
2286  d35d ee0a          	ldw	x,(10,x)
2288  d35f 2024          	jra	L251
2289  d361               L3111:
2292  d361 5f            	clrw	x
2293  d362 89            	pushw	x
2294  d363 1e0d          	ldw	x,(OFST+9,sp)
2295  d365 89            	pushw	x
2296  d366 1e0d          	ldw	x,(OFST+9,sp)
2297  d368 89            	pushw	x
2298  d369 1e07          	ldw	x,(OFST+3,sp)
2299  d36b 89            	pushw	x
2300  d36c 1e0d          	ldw	x,(OFST+9,sp)
2301  d36e ee28          	ldw	x,(40,x)
2302  d370 89            	pushw	x
2303  d371 1e0f          	ldw	x,(OFST+11,sp)
2304  d373 ee26          	ldw	x,(38,x)
2305  d375 cddf69        	call	_mqtt_pack_subscribe_request
2307  d378 5b0a          	addw	sp,#10
2308  d37a 1f03          	ldw	(OFST-1,sp),x
2312  d37c 2a0a          	jrpl	L5111
2317  d37e               LC007:
2319  d37e 1e05          	ldw	x,(OFST+1,sp)
2320  d380 1603          	ldw	y,(OFST-1,sp)
2321  d382 ef0a          	ldw	(10,x),y
2323  d384 93            	ldw	x,y
2325  d385               L251:
2327  d385 5b06          	addw	sp,#6
2328  d387 81            	ret	
2329  d388               L5111:
2332  d388 2634          	jrne	L7111
2335  d38a 1e05          	ldw	x,(OFST+1,sp)
2336  d38c 1c0022        	addw	x,#34
2337  d38f cde165        	call	_mqtt_mq_clean
2341  d392 5f            	clrw	x
2342  d393 89            	pushw	x
2343  d394 1e0d          	ldw	x,(OFST+9,sp)
2344  d396 89            	pushw	x
2345  d397 1e0d          	ldw	x,(OFST+9,sp)
2346  d399 89            	pushw	x
2347  d39a 1e07          	ldw	x,(OFST+3,sp)
2348  d39c 89            	pushw	x
2349  d39d 1e0d          	ldw	x,(OFST+9,sp)
2350  d39f ee28          	ldw	x,(40,x)
2351  d3a1 89            	pushw	x
2352  d3a2 1e0f          	ldw	x,(OFST+11,sp)
2353  d3a4 ee26          	ldw	x,(38,x)
2354  d3a6 cddf69        	call	_mqtt_pack_subscribe_request
2356  d3a9 5b0a          	addw	sp,#10
2357  d3ab 1f03          	ldw	(OFST-1,sp),x
2364  d3ad 2bcf          	jrmi	LC007
2367  d3af 260d          	jrne	L7111
2370  d3b1 1e05          	ldw	x,(OFST+1,sp)
2371  d3b3 90ae8010      	ldw	y,#32784
2372  d3b7 ef0a          	ldw	(10,x),y
2375  d3b9 ae8010        	ldw	x,#32784
2377  d3bc 20c7          	jra	L251
2378  d3be               L7111:
2381  d3be 89            	pushw	x
2382  d3bf 1e07          	ldw	x,(OFST+3,sp)
2383  d3c1 1c0022        	addw	x,#34
2384  d3c4 cde0fe        	call	_mqtt_mq_register
2386  d3c7 5b02          	addw	sp,#2
2387  d3c9 1f03          	ldw	(OFST-1,sp),x
2389                     ; 423     msg->control_type = MQTT_CONTROL_SUBSCRIBE;
2392  d3cb a608          	ld	a,#8
2393  d3cd e709          	ld	(9,x),a
2394                     ; 424     msg->packet_id = packet_id;
2396  d3cf 1601          	ldw	y,(OFST-3,sp)
2397  d3d1 ef0a          	ldw	(10,x),y
2398                     ; 425     return MQTT_OK;
2400  d3d3 ae0001        	ldw	x,#1
2402  d3d6 20ad          	jra	L251
2479                     ; 429 int16_t mqtt_unsubscribe(struct mqtt_client *client,
2479                     ; 430                          const char* topic_name)
2479                     ; 431 {
2480                     .text:	section	.text,new
2481                     _mqtt_unsubscribe:
2483                     	pushw	x
2484                     	subw	sp,#4
2485       00000004      OFST:	set	4
2488                     ; 432     uint16_t packet_id = __mqtt_next_pid(client);
2490                     	call	___mqtt_next_pid
2492                     	ldw	(OFST-3,sp),x
2494                     ; 437     MQTT_CLIENT_TRY_PACK(
2496                     	ldw	x,(OFST+1,sp)
2497                     	ld	a,(10,x)
2498                     	jrpl	L7611
2501                     	ldw	x,(10,x)
2503                     	jra	L071
2504                     L7611:
2507                     	clrw	x
2508                     	pushw	x
2509                     	ldw	x,(OFST+7,sp)
2510                     	pushw	x
2511                     	ldw	x,(OFST+1,sp)
2512                     	pushw	x
2513                     	ldw	x,(OFST+7,sp)
2514                     	ldw	x,(40,x)
2515                     	pushw	x
2516                     	ldw	x,(OFST+9,sp)
2517                     	ldw	x,(38,x)
2518                     	call	_mqtt_pack_unsubscribe_request
2520                     	addw	sp,#8
2521                     	ldw	(OFST-1,sp),x
2525                     	jrpl	L1711
2530                     LC008:
2532                     	ldw	x,(OFST+1,sp)
2533                     	ldw	y,(OFST-1,sp)
2534                     	ldw	(10,x),y
2536                     	ldw	x,y
2538                     L071:
2540                     	addw	sp,#6
2541                     	ret	
2542                     L1711:
2545                     	jrne	L3711
2548                     	ldw	x,(OFST+1,sp)
2549                     	addw	x,#34
2550                     	call	_mqtt_mq_clean
2554                     	clrw	x
2555                     	pushw	x
2556                     	ldw	x,(OFST+7,sp)
2557                     	pushw	x
2558                     	ldw	x,(OFST+1,sp)
2559                     	pushw	x
2560                     	ldw	x,(OFST+7,sp)
2561                     	ldw	x,(40,x)
2562                     	pushw	x
2563                     	ldw	x,(OFST+9,sp)
2564                     	ldw	x,(38,x)
2565                     	call	_mqtt_pack_unsubscribe_request
2567                     	addw	sp,#8
2568                     	ldw	(OFST-1,sp),x
2575                     	jrmi	LC008
2578                     	jrne	L3711
2581                     	ldw	x,(OFST+1,sp)
2582                     	ldw	y,#32784
2583                     	ldw	(10,x),y
2586                     	ldw	x,#32784
2588                     	jra	L071
2589                     L3711:
2592                     	pushw	x
2593                     	ldw	x,(OFST+3,sp)
2594                     	addw	x,#34
2595                     	call	_mqtt_mq_register
2597                     	addw	sp,#2
2598                     	ldw	(OFST-1,sp),x
2600                     ; 449     msg->control_type = MQTT_CONTROL_UNSUBSCRIBE;
2603                     	ld	a,#10
2604                     	ld	(9,x),a
2605                     ; 450     msg->packet_id = packet_id;
2607                     	ldw	y,(OFST-3,sp)
2608                     	ldw	(10,x),y
2609                     ; 452     return MQTT_OK;
2611                     	ldw	x,#1
2613                     	jra	L071
2658                     ; 456 int16_t mqtt_ping(struct mqtt_client *client)
2658                     ; 457 {
2659                     .text:	section	.text,new
2660                     _mqtt_ping:
2662                     	pushw	x
2663       00000002      OFST:	set	2
2666                     ; 459     rv = __mqtt_ping(client);
2668                     	call	___mqtt_ping
2671                     ; 460     return rv;
2675                     	addw	sp,#2
2676                     	ret	
2735                     ; 464 int16_t __mqtt_ping(struct mqtt_client *client) 
2735                     ; 465 {
2736                     .text:	section	.text,new
2737  d3d8               ___mqtt_ping:
2739  d3d8 89            	pushw	x
2740  d3d9 89            	pushw	x
2741       00000002      OFST:	set	2
2744                     ; 470     MQTT_CLIENT_TRY_PACK(
2746  d3da e60a          	ld	a,(10,x)
2747  d3dc 2a04          	jrpl	L7521
2750  d3de ee0a          	ldw	x,(10,x)
2752  d3e0 2017          	jra	L012
2753  d3e2               L7521:
2756  d3e2 ee28          	ldw	x,(40,x)
2757  d3e4 89            	pushw	x
2758  d3e5 1e05          	ldw	x,(OFST+3,sp)
2759  d3e7 ee26          	ldw	x,(38,x)
2760  d3e9 cddca1        	call	_mqtt_pack_ping_request
2762  d3ec 5b02          	addw	sp,#2
2763  d3ee 1f01          	ldw	(OFST-1,sp),x
2767  d3f0 2a0a          	jrpl	L1621
2772  d3f2               LC009:
2774  d3f2 1e03          	ldw	x,(OFST+1,sp)
2775  d3f4 1601          	ldw	y,(OFST-1,sp)
2776  d3f6 ef0a          	ldw	(10,x),y
2778  d3f8 93            	ldw	x,y
2780  d3f9               L012:
2782  d3f9 5b04          	addw	sp,#4
2783  d3fb 81            	ret	
2784  d3fc               L1621:
2787  d3fc 2629          	jrne	L3621
2790  d3fe 1e03          	ldw	x,(OFST+1,sp)
2791  d400 1c0022        	addw	x,#34
2792  d403 cde165        	call	_mqtt_mq_clean
2796  d406 1e03          	ldw	x,(OFST+1,sp)
2797  d408 ee28          	ldw	x,(40,x)
2798  d40a 89            	pushw	x
2799  d40b 1e05          	ldw	x,(OFST+3,sp)
2800  d40d ee26          	ldw	x,(38,x)
2801  d40f cddca1        	call	_mqtt_pack_ping_request
2803  d412 5b02          	addw	sp,#2
2804  d414 1f01          	ldw	(OFST-1,sp),x
2811  d416 2bda          	jrmi	LC009
2814  d418 260d          	jrne	L3621
2817  d41a 1e03          	ldw	x,(OFST+1,sp)
2818  d41c 90ae8010      	ldw	y,#32784
2819  d420 ef0a          	ldw	(10,x),y
2822  d422 ae8010        	ldw	x,#32784
2824  d425 20d2          	jra	L012
2825  d427               L3621:
2828  d427 89            	pushw	x
2829  d428 1e05          	ldw	x,(OFST+3,sp)
2830  d42a 1c0022        	addw	x,#34
2831  d42d cde0fe        	call	_mqtt_mq_register
2833  d430 5b02          	addw	sp,#2
2835                     ; 479     msg->control_type = MQTT_CONTROL_PINGREQ;
2838  d432 a60c          	ld	a,#12
2839  d434 e709          	ld	(9,x),a
2840                     ; 481     return MQTT_OK;
2842  d436 ae0001        	ldw	x,#1
2844  d439 20be          	jra	L012
2903                     ; 485 int16_t mqtt_disconnect(struct mqtt_client *client) 
2903                     ; 486 {
2904                     .text:	section	.text,new
2905  d43b               _mqtt_disconnect:
2907  d43b 89            	pushw	x
2908  d43c 89            	pushw	x
2909       00000002      OFST:	set	2
2912                     ; 491     MQTT_CLIENT_TRY_PACK(
2914  d43d e60a          	ld	a,(10,x)
2915  d43f 2a04          	jrpl	L5231
2918  d441 ee0a          	ldw	x,(10,x)
2920  d443 2017          	jra	L422
2921  d445               L5231:
2924  d445 ee28          	ldw	x,(40,x)
2925  d447 89            	pushw	x
2926  d448 1e05          	ldw	x,(OFST+3,sp)
2927  d44a ee26          	ldw	x,(38,x)
2928  d44c cddc81        	call	_mqtt_pack_disconnect
2930  d44f 5b02          	addw	sp,#2
2931  d451 1f01          	ldw	(OFST-1,sp),x
2935  d453 2a0a          	jrpl	L7231
2940  d455               LC010:
2942  d455 1e03          	ldw	x,(OFST+1,sp)
2943  d457 1601          	ldw	y,(OFST-1,sp)
2944  d459 ef0a          	ldw	(10,x),y
2946  d45b 93            	ldw	x,y
2948  d45c               L422:
2950  d45c 5b04          	addw	sp,#4
2951  d45e 81            	ret	
2952  d45f               L7231:
2955  d45f 2629          	jrne	L1331
2958  d461 1e03          	ldw	x,(OFST+1,sp)
2959  d463 1c0022        	addw	x,#34
2960  d466 cde165        	call	_mqtt_mq_clean
2964  d469 1e03          	ldw	x,(OFST+1,sp)
2965  d46b ee28          	ldw	x,(40,x)
2966  d46d 89            	pushw	x
2967  d46e 1e05          	ldw	x,(OFST+3,sp)
2968  d470 ee26          	ldw	x,(38,x)
2969  d472 cddc81        	call	_mqtt_pack_disconnect
2971  d475 5b02          	addw	sp,#2
2972  d477 1f01          	ldw	(OFST-1,sp),x
2979  d479 2bda          	jrmi	LC010
2982  d47b 260d          	jrne	L1331
2985  d47d 1e03          	ldw	x,(OFST+1,sp)
2986  d47f 90ae8010      	ldw	y,#32784
2987  d483 ef0a          	ldw	(10,x),y
2990  d485 ae8010        	ldw	x,#32784
2992  d488 20d2          	jra	L422
2993  d48a               L1331:
2996  d48a 89            	pushw	x
2997  d48b 1e05          	ldw	x,(OFST+3,sp)
2998  d48d 1c0022        	addw	x,#34
2999  d490 cde0fe        	call	_mqtt_mq_register
3001  d493 5b02          	addw	sp,#2
3003                     ; 500     msg->control_type = MQTT_CONTROL_DISCONNECT;
3006  d495 a60e          	ld	a,#14
3007  d497 e709          	ld	(9,x),a
3008                     ; 502     return MQTT_OK;
3010  d499 ae0001        	ldw	x,#1
3012  d49c 20be          	jra	L422
3120                     ; 506 int16_t __mqtt_send(struct mqtt_client *client) 
3120                     ; 507 {
3121                     .text:	section	.text,new
3122  d49e               ___mqtt_send:
3124  d49e 89            	pushw	x
3125  d49f 520d          	subw	sp,#13
3126       0000000d      OFST:	set	13
3129                     ; 510     int16_t inflight_qos2 = 0;
3131  d4a1 5f            	clrw	x
3132  d4a2 1f07          	ldw	(OFST-6,sp),x
3134                     ; 511     int16_t i = 0;
3136  d4a4 1f0b          	ldw	(OFST-2,sp),x
3138                     ; 513     if (client->error < 0 && client->error != MQTT_ERROR_SEND_BUFFER_IS_FULL) {
3140  d4a6 1e0e          	ldw	x,(OFST+1,sp)
3141  d4a8 6d0a          	tnz	(10,x)
3142  d4aa 2a10          	jrpl	L1241
3144  d4ac 9093          	ldw	y,x
3145  d4ae 90ee0a        	ldw	y,(10,y)
3146  d4b1 90a38010      	cpw	y,#32784
3147  d4b5 2705          	jreq	L1241
3148                     ; 514       return client->error;
3150  d4b7 ee0a          	ldw	x,(10,x)
3152  d4b9 ccd581        	jra	L432
3153  d4bc               L1241:
3154                     ; 518     len = mqtt_mq_length(&client->mq);
3156  d4bc ee24          	ldw	x,(36,x)
3157  d4be 160e          	ldw	y,(OFST+1,sp)
3158  d4c0 01            	rrwa	x,a
3159  d4c1 90e02b        	sub	a,(43,y)
3160  d4c4 01            	rrwa	x,a
3161  d4c5 90e22a        	sbc	a,(42,y)
3162  d4c8 01            	rrwa	x,a
3163  d4c9 a60c          	ld	a,#12
3164  d4cb cdfa6b        	call	c_sdivx
3166  d4ce 1f09          	ldw	(OFST-4,sp),x
3169  d4d0 ccd66c        	jra	L7241
3170  d4d3               L3241:
3171                     ; 520         struct mqtt_queued_message *msg = mqtt_mq_get(&client->mq, i);
3173  d4d3 a60c          	ld	a,#12
3174  d4d5 cdf66c        	call	c_bmulx
3176  d4d8 1f01          	ldw	(OFST-12,sp),x
3178  d4da 1e0e          	ldw	x,(OFST+1,sp)
3179  d4dc ee24          	ldw	x,(36,x)
3180  d4de 1d000c        	subw	x,#12
3181  d4e1 72f001        	subw	x,(OFST-12,sp)
3182  d4e4 1f05          	ldw	(OFST-8,sp),x
3184                     ; 521         int16_t resend = 0;
3186  d4e6 5f            	clrw	x
3187  d4e7 1f03          	ldw	(OFST-10,sp),x
3189                     ; 522         if (msg->state == MQTT_QUEUED_UNSENT) {
3191  d4e9 1e05          	ldw	x,(OFST-8,sp)
3192  d4eb e604          	ld	a,(4,x)
3193  d4ed 2607          	jrne	L3341
3194                     ; 524             resend = 1;
3196  d4ef ae0001        	ldw	x,#1
3197  d4f2 1f03          	ldw	(OFST-10,sp),x
3200  d4f4 202f          	jra	L5341
3201  d4f6               L3341:
3202                     ; 526 	else if (msg->state == MQTT_QUEUED_AWAITING_ACK) {
3204  d4f6 4a            	dec	a
3205  d4f7 262c          	jrne	L5341
3206                     ; 528             if (second_counter > msg->time_sent + client->response_timeout) {
3208  d4f9 1e0e          	ldw	x,(OFST+1,sp)
3209  d4fb ee0c          	ldw	x,(12,x)
3210  d4fd cdf838        	call	c_itolx
3212  d500 1e05          	ldw	x,(OFST-8,sp)
3213  d502 1c0005        	addw	x,#5
3214  d505 cdf86a        	call	c_ladd
3216  d508 ae029c        	ldw	x,#_second_counter
3217  d50b cdf882        	call	c_lcmp
3219  d50e 2415          	jruge	L5341
3220                     ; 529                 resend = 1;
3222  d510 ae0001        	ldw	x,#1
3223  d513 1f03          	ldw	(OFST-10,sp),x
3225                     ; 530                 client->number_of_timeouts += 1;
3227  d515 1e0e          	ldw	x,(OFST+1,sp)
3228  d517 9093          	ldw	y,x
3229  d519 ee0e          	ldw	x,(14,x)
3230  d51b 5c            	incw	x
3231  d51c 90ef0e        	ldw	(14,y),x
3232                     ; 531                 client->send_offset = 0;
3234  d51f 1e0e          	ldw	x,(OFST+1,sp)
3235  d521 905f          	clrw	y
3236  d523 ef04          	ldw	(4,x),y
3237  d525               L5341:
3238                     ; 536         if (msg->control_type == MQTT_CONTROL_PUBLISH
3238                     ; 537             && (msg->state == MQTT_QUEUED_UNSENT || msg->state == MQTT_QUEUED_AWAITING_ACK)) 
3240  d525 1e05          	ldw	x,(OFST-8,sp)
3241  d527 e609          	ld	a,(9,x)
3242  d529 a103          	cp	a,#3
3243  d52b 261f          	jrne	L3441
3245  d52d e604          	ld	a,(4,x)
3246  d52f 2704          	jreq	L5441
3248  d531 a101          	cp	a,#1
3249  d533 2617          	jrne	L3441
3250  d535               L5441:
3251                     ; 539             inspected = (uint8_t)(0x03 & ((msg->start[0]) >> 1)); // qos
3253  d535 fe            	ldw	x,(x)
3254  d536 f6            	ld	a,(x)
3255  d537 a406          	and	a,#6
3256  d539 44            	srl	a
3257  d53a 6b0d          	ld	(OFST+0,sp),a
3259                     ; 540             if (inspected == 2) {
3261  d53c a102          	cp	a,#2
3262  d53e 260c          	jrne	L3441
3263                     ; 541                 if (inflight_qos2) resend = 0;
3265  d540 1e07          	ldw	x,(OFST-6,sp)
3266  d542 2703          	jreq	L1541
3269  d544 5f            	clrw	x
3270  d545 1f03          	ldw	(OFST-10,sp),x
3272  d547               L1541:
3273                     ; 542                 inflight_qos2 = 1;
3275  d547 ae0001        	ldw	x,#1
3276  d54a 1f07          	ldw	(OFST-6,sp),x
3278  d54c               L3441:
3279                     ; 547         if (!resend) continue;
3281  d54c 1e03          	ldw	x,(OFST-10,sp)
3282  d54e 2603ccd643    	jreq	L5241
3285                     ; 551           int16_t tmp = mqtt_pal_sendall(msg->start + client->send_offset, msg->size - client->send_offset);
3287  d553 1e05          	ldw	x,(OFST-8,sp)
3288  d555 160e          	ldw	y,(OFST+1,sp)
3289  d557 ee02          	ldw	x,(2,x)
3290  d559 01            	rrwa	x,a
3291  d55a 90e005        	sub	a,(5,y)
3292  d55d 01            	rrwa	x,a
3293  d55e 90e204        	sbc	a,(4,y)
3294  d561 01            	rrwa	x,a
3295  d562 89            	pushw	x
3296  d563 1e10          	ldw	x,(OFST+3,sp)
3297  d565 1607          	ldw	y,(OFST-6,sp)
3298  d567 ee04          	ldw	x,(4,x)
3299  d569 01            	rrwa	x,a
3300  d56a 90eb01        	add	a,(1,y)
3301  d56d 01            	rrwa	x,a
3302  d56e 90f9          	adc	a,(y)
3303  d570 01            	rrwa	x,a
3304  d571 cde417        	call	_mqtt_pal_sendall
3306  d574 5b02          	addw	sp,#2
3307  d576 1f03          	ldw	(OFST-10,sp),x
3309                     ; 554           if (tmp < 0) {
3311  d578 2a0a          	jrpl	L5541
3312                     ; 555             client->error = tmp;
3314  d57a 1e0e          	ldw	x,(OFST+1,sp)
3315  d57c 1603          	ldw	y,(OFST-10,sp)
3316                     ; 556             return tmp;
3318  d57e               LC014:
3319  d57e ef0a          	ldw	(10,x),y
3321  d580 93            	ldw	x,y
3323  d581               L432:
3325  d581 5b0f          	addw	sp,#15
3326  d583 81            	ret	
3327  d584               L5541:
3328                     ; 559             client->send_offset += tmp;
3330  d584 1e0e          	ldw	x,(OFST+1,sp)
3331  d586 9093          	ldw	y,x
3332  d588 ee04          	ldw	x,(4,x)
3333  d58a 72fb03        	addw	x,(OFST-10,sp)
3334  d58d 90ef04        	ldw	(4,y),x
3335                     ; 560             if(client->send_offset < msg->size) {
3337  d590 1e0e          	ldw	x,(OFST+1,sp)
3338  d592 1605          	ldw	y,(OFST-8,sp)
3339  d594 ee04          	ldw	x,(4,x)
3340  d596 90e302        	cpw	x,(2,y)
3341  d599 2441          	jruge	L1641
3342                     ; 562               break;
3343  d59b               L1341:
3344                     ; 629         uint32_t keep_alive_timeout = client->time_of_last_send + (uint32_t)((float)(client->keep_alive) * 0.75);
3346  d59b 1e0e          	ldw	x,(OFST+1,sp)
3347  d59d ee02          	ldw	x,(2,x)
3348  d59f cdfa90        	call	c_uitof
3350  d5a2 ae9f09        	ldw	x,#L5051
3351  d5a5 cdf6e0        	call	c_fmul
3353  d5a8 cdf7bb        	call	c_ftol
3355  d5ab 1e0e          	ldw	x,(OFST+1,sp)
3356  d5ad 1c0006        	addw	x,#6
3357  d5b0 cdf86a        	call	c_ladd
3359  d5b3 96            	ldw	x,sp
3360  d5b4 1c0003        	addw	x,#OFST-10
3361  d5b7 cdfa53        	call	c_rtol
3364                     ; 630         if (second_counter > keep_alive_timeout) {
3366  d5ba ae029c        	ldw	x,#_second_counter
3367  d5bd cdf8ed        	call	c_ltor
3369  d5c0 96            	ldw	x,sp
3370  d5c1 1c0003        	addw	x,#OFST-10
3371  d5c4 cdf882        	call	c_lcmp
3373  d5c7 2203ccd678    	jrule	L1151
3374                     ; 631           int16_t rv = __mqtt_ping(client);
3376  d5cc 1e0e          	ldw	x,(OFST+1,sp)
3377  d5ce cdd3d8        	call	___mqtt_ping
3379  d5d1 1f09          	ldw	(OFST-4,sp),x
3381                     ; 632           if (rv != MQTT_OK) {
3383  d5d3 5a            	decw	x
3384  d5d4 27f3          	jreq	L1151
3385                     ; 633             client->error = rv;
3387  d5d6 1e0e          	ldw	x,(OFST+1,sp)
3388  d5d8 1609          	ldw	y,(OFST-4,sp)
3389                     ; 634             return rv;
3391  d5da 20a2          	jp	LC014
3392  d5dc               L1641:
3393                     ; 567               client->send_offset = 0;
3395  d5dc 1e0e          	ldw	x,(OFST+1,sp)
3396  d5de 905f          	clrw	y
3397  d5e0 ef04          	ldw	(4,x),y
3398                     ; 573         client->time_of_last_send = second_counter;
3400  d5e2 c6029f        	ld	a,_second_counter+3
3401  d5e5 e709          	ld	(9,x),a
3402  d5e7 c6029e        	ld	a,_second_counter+2
3403  d5ea e708          	ld	(8,x),a
3404  d5ec c6029d        	ld	a,_second_counter+1
3405  d5ef e707          	ld	(7,x),a
3406  d5f1 c6029c        	ld	a,_second_counter
3407  d5f4 e706          	ld	(6,x),a
3408                     ; 574         msg->time_sent = client->time_of_last_send;
3410  d5f6 1605          	ldw	y,(OFST-8,sp)
3411  d5f8 e609          	ld	a,(9,x)
3412  d5fa 90e708        	ld	(8,y),a
3413  d5fd e608          	ld	a,(8,x)
3414  d5ff 90e707        	ld	(7,y),a
3415  d602 e607          	ld	a,(7,x)
3416  d604 90e706        	ld	(6,y),a
3417  d607 e606          	ld	a,(6,x)
3418                     ; 593         switch (msg->control_type) {
3420  d609 93            	ldw	x,y
3421  d60a 90e705        	ld	(5,y),a
3422  d60d e609          	ld	a,(9,x)
3424                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3425  d60f 4a            	dec	a
3426  d610 2756          	jreq	L7431
3427  d612 a002          	sub	a,#2
3428  d614 2734          	jreq	L5431
3429  d616 4a            	dec	a
3430  d617 2726          	jreq	L3431
3431  d619 4a            	dec	a
3432  d61a 274c          	jreq	L7431
3433  d61c 4a            	dec	a
3434  d61d 2749          	jreq	L7431
3435  d61f 4a            	dec	a
3436  d620 271d          	jreq	L3431
3437  d622 4a            	dec	a
3438  d623 2743          	jreq	L7431
3439  d625 a002          	sub	a,#2
3440  d627 273f          	jreq	L7431
3441  d629 a002          	sub	a,#2
3442  d62b 273b          	jreq	L7431
3443  d62d a002          	sub	a,#2
3444  d62f 270e          	jreq	L3431
3445                     ; 621         default:
3445                     ; 622             client->error = MQTT_ERROR_MALFORMED_REQUEST;
3447  d631 1e0e          	ldw	x,(OFST+1,sp)
3448  d633 90ae8012      	ldw	y,#32786
3449  d637 ef0a          	ldw	(10,x),y
3450                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3452  d639 ae8012        	ldw	x,#32786
3454  d63c ccd581        	jra	L432
3455  d63f               L3431:
3456                     ; 594         case MQTT_CONTROL_PUBACK:
3456                     ; 595         case MQTT_CONTROL_PUBCOMP:
3456                     ; 596         case MQTT_CONTROL_DISCONNECT:
3456                     ; 597             msg->state = MQTT_QUEUED_COMPLETE;
3458  d63f a602          	ld	a,#2
3459  d641               LC011:
3460  d641 e704          	ld	(4,x),a
3461                     ; 598             break;
3462  d643               L5241:
3463                     ; 519     for(; i < len; ++i) {
3465  d643 1e0b          	ldw	x,(OFST-2,sp)
3466  d645 5c            	incw	x
3467  d646 1f0b          	ldw	(OFST-2,sp),x
3469  d648 2022          	jra	L7241
3470  d64a               L5431:
3471                     ; 599         case MQTT_CONTROL_PUBLISH:
3471                     ; 600             inspected = (uint8_t)(( MQTT_PUBLISH_QOS_MASK & (msg->start[0]) ) >> 1); /* qos */
3473  d64a fe            	ldw	x,(x)
3474  d64b f6            	ld	a,(x)
3475  d64c a406          	and	a,#6
3476  d64e 44            	srl	a
3477  d64f 6b0d          	ld	(OFST+0,sp),a
3479                     ; 601             if (inspected == 0) {
3481  d651 2604          	jrne	L1741
3482                     ; 602                 msg->state = MQTT_QUEUED_COMPLETE;
3484  d653 1e05          	ldw	x,(OFST-8,sp)
3486  d655 20e8          	jp	L3431
3487  d657               L1741:
3488                     ; 604 	    else if (inspected == 1) {
3490  d657 4a            	dec	a
3491  d658 260c          	jrne	L5741
3492                     ; 605                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3494  d65a 1e05          	ldw	x,(OFST-8,sp)
3495  d65c 4c            	inc	a
3496  d65d e704          	ld	(4,x),a
3497                     ; 607                 msg->start[0] |= MQTT_PUBLISH_DUP;
3499  d65f fe            	ldw	x,(x)
3500  d660 f6            	ld	a,(x)
3501  d661 aa08          	or	a,#8
3502  d663 f7            	ld	(x),a
3504  d664 20dd          	jra	L5241
3505  d666               L5741:
3506                     ; 610                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3508  d666 1e05          	ldw	x,(OFST-8,sp)
3509  d668               L7431:
3510                     ; 613         case MQTT_CONTROL_CONNECT:
3510                     ; 614         case MQTT_CONTROL_PUBREC:
3510                     ; 615         case MQTT_CONTROL_PUBREL:
3510                     ; 616         case MQTT_CONTROL_SUBSCRIBE:
3510                     ; 617         case MQTT_CONTROL_UNSUBSCRIBE:
3510                     ; 618         case MQTT_CONTROL_PINGREQ:
3510                     ; 619             msg->state = MQTT_QUEUED_AWAITING_ACK;
3512  d668 a601          	ld	a,#1
3513                     ; 620             break;
3515  d66a 20d5          	jp	LC011
3516  d66c               L7241:
3517                     ; 519     for(; i < len; ++i) {
3519  d66c 1e0b          	ldw	x,(OFST-2,sp)
3520  d66e 1309          	cpw	x,(OFST-4,sp)
3521  d670 2e03ccd4d3    	jrslt	L3241
3522  d675 ccd59b        	jra	L1341
3523  d678               L1151:
3524                     ; 639     return MQTT_OK;
3526  d678 ae0001        	ldw	x,#1
3528  d67b ccd581        	jra	L432
4080                     ; 643 int16_t __mqtt_recv(struct mqtt_client *client)
4080                     ; 644 {
4081                     .text:	section	.text,new
4082  d67e               ___mqtt_recv:
4084  d67e 89            	pushw	x
4085  d67f 5220          	subw	sp,#32
4086       00000020      OFST:	set	32
4089                     ; 646     int16_t mqtt_recv_ret = MQTT_OK;
4091  d681 ae0001        	ldw	x,#1
4092  d684 1f07          	ldw	(OFST-25,sp),x
4094                     ; 648     struct mqtt_queued_message *msg = NULL;
4096                     ; 656     rv = mqtt_pal_recvall(client->recv_buffer.curr, client->recv_buffer.curr_sz);
4098  d686 1e21          	ldw	x,(OFST+1,sp)
4099  d688 ee20          	ldw	x,(32,x)
4100  d68a 89            	pushw	x
4101  d68b 1e23          	ldw	x,(OFST+3,sp)
4102  d68d ee1e          	ldw	x,(30,x)
4103  d68f cde42e        	call	_mqtt_pal_recvall
4105  d692 5b02          	addw	sp,#2
4106  d694 1f1f          	ldw	(OFST-1,sp),x
4108                     ; 658     client->recv_buffer.curr += rv;
4110  d696 1e21          	ldw	x,(OFST+1,sp)
4111  d698 9093          	ldw	y,x
4112  d69a ee1e          	ldw	x,(30,x)
4113  d69c 72fb1f        	addw	x,(OFST-1,sp)
4114  d69f 90ef1e        	ldw	(30,y),x
4115                     ; 659     client->recv_buffer.curr_sz -= rv;
4117  d6a2 1e21          	ldw	x,(OFST+1,sp)
4118  d6a4 9093          	ldw	y,x
4119  d6a6 ee20          	ldw	x,(32,x)
4120  d6a8 72f01f        	subw	x,(OFST-1,sp)
4121  d6ab 90ef20        	ldw	(32,y),x
4122                     ; 662     consumed = mqtt_unpack_response(&response, client->recv_buffer.mem_start, client->recv_buffer.curr - client->recv_buffer.mem_start);
4124  d6ae 1e21          	ldw	x,(OFST+1,sp)
4125  d6b0 1621          	ldw	y,(OFST+1,sp)
4126  d6b2 ee1e          	ldw	x,(30,x)
4127  d6b4 01            	rrwa	x,a
4128  d6b5 90e01b        	sub	a,(27,y)
4129  d6b8 01            	rrwa	x,a
4130  d6b9 90e21a        	sbc	a,(26,y)
4131  d6bc 01            	rrwa	x,a
4132  d6bd 89            	pushw	x
4133  d6be 1e23          	ldw	x,(OFST+3,sp)
4134  d6c0 ee1a          	ldw	x,(26,x)
4135  d6c2 89            	pushw	x
4136  d6c3 96            	ldw	x,sp
4137  d6c4 1c000d        	addw	x,#OFST-19
4138  d6c7 cde2ef        	call	_mqtt_unpack_response
4140  d6ca 5b04          	addw	sp,#4
4141  d6cc 1f05          	ldw	(OFST-27,sp),x
4143                     ; 664     if (consumed < 0) {
4145  d6ce 2a09          	jrpl	L7502
4146                     ; 665         client->error = consumed;
4148  d6d0 1e21          	ldw	x,(OFST+1,sp)
4149  d6d2 1605          	ldw	y,(OFST-27,sp)
4150  d6d4 ef0a          	ldw	(10,x),y
4151                     ; 666         return consumed;
4153  d6d6 93            	ldw	x,y
4155  d6d7 2013          	jra	L403
4156  d6d9               L7502:
4157                     ; 668     else if (consumed == 0) {
4159  d6d9 2619          	jrne	L1602
4160                     ; 674         if (client->recv_buffer.curr_sz == 0) {
4162  d6db 1e21          	ldw	x,(OFST+1,sp)
4163  d6dd e621          	ld	a,(33,x)
4164  d6df ea20          	or	a,(32,x)
4165  d6e1 260c          	jrne	L5602
4166                     ; 675             client->error = MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4168  d6e3 90ae8013      	ldw	y,#32787
4169  d6e7 ef0a          	ldw	(10,x),y
4170                     ; 676             return MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4172  d6e9 ae8013        	ldw	x,#32787
4174  d6ec               L403:
4176  d6ec 5b22          	addw	sp,#34
4177  d6ee 81            	ret	
4178  d6ef               L5602:
4179                     ; 680         return MQTT_OK;
4181  d6ef ae0001        	ldw	x,#1
4183  d6f2 20f8          	jra	L403
4184  d6f4               L1602:
4185                     ; 712     switch (response.fixed_header.control_type) {
4187  d6f4 7b09          	ld	a,(OFST-23,sp)
4189                     ; 861             break;
4190  d6f6 a002          	sub	a,#2
4191  d6f8 2741          	jreq	L5151
4192  d6fa 4a            	dec	a
4193  d6fb 2603ccd77d    	jreq	L7151
4194  d700 4a            	dec	a
4195  d701 2603ccd7e2    	jreq	L1251
4196  d706 4a            	dec	a
4197  d707 2603ccd808    	jreq	L3251
4198  d70c 4a            	dec	a
4199  d70d 2603ccd84d    	jreq	L5251
4200  d712 4a            	dec	a
4201  d713 2603ccd87e    	jreq	L7251
4202  d718 a002          	sub	a,#2
4203  d71a 2603ccd888    	jreq	L1351
4204  d71f a002          	sub	a,#2
4205  d721 2603ccd8ba    	jreq	L3351
4206  d726 a002          	sub	a,#2
4207  d728 2603ccd8c4    	jreq	L5351
4208                     ; 858         default:
4208                     ; 859             client->error = MQTT_ERROR_MALFORMED_RESPONSE;
4210  d72d 1e21          	ldw	x,(OFST+1,sp)
4211  d72f 90ae800c      	ldw	y,#32780
4212  d733 ef0a          	ldw	(10,x),y
4213                     ; 860             mqtt_recv_ret = MQTT_ERROR_MALFORMED_RESPONSE;
4215  d735 ae800c        	ldw	x,#32780
4216                     ; 861             break;
4218  d738 ccd8b6        	jp	LC016
4219  d73b               L5151:
4220                     ; 713         case MQTT_CONTROL_CONNACK:
4220                     ; 714 
4220                     ; 715             // release associated CONNECT
4220                     ; 716             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_CONNECT, NULL);
4222  d73b 5f            	clrw	x
4223  d73c 89            	pushw	x
4224  d73d 4b01          	push	#1
4225  d73f 1e24          	ldw	x,(OFST+4,sp)
4226  d741 1c0022        	addw	x,#34
4227  d744 cde2b3        	call	_mqtt_mq_find
4229  d747 5b03          	addw	sp,#3
4230  d749 1f1f          	ldw	(OFST-1,sp),x
4232                     ; 717             if (msg == NULL) {
4234                     ; 718                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4235                     ; 719                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4236                     ; 720                 break;
4238  d74b 2603ccd7fa    	jreq	LC017
4239                     ; 722             msg->state = MQTT_QUEUED_COMPLETE;
4241  d750 a602          	ld	a,#2
4242  d752 e704          	ld	(4,x),a
4243                     ; 724             if (response.decoded.connack.return_code != MQTT_CONNACK_ACCEPTED) {
4245  d754 0d13          	tnz	(OFST-13,sp)
4246  d756 2603ccd8da    	jreq	L1702
4247                     ; 725                 if (response.decoded.connack.return_code == MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED) {
4249  d75b 7b13          	ld	a,(OFST-13,sp)
4250  d75d a102          	cp	a,#2
4251  d75f 260e          	jrne	L7702
4252                     ; 726                     client->error = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4254  d761 1e21          	ldw	x,(OFST+1,sp)
4255  d763 90ae8005      	ldw	y,#32773
4256  d767 ef0a          	ldw	(10,x),y
4257                     ; 727                     mqtt_recv_ret = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4259  d769 ae8005        	ldw	x,#32773
4261  d76c ccd8b6        	jp	LC016
4262  d76f               L7702:
4263                     ; 730                     client->error = MQTT_ERROR_CONNECTION_REFUSED;
4265  d76f 1e21          	ldw	x,(OFST+1,sp)
4266  d771 90ae8016      	ldw	y,#32790
4267  d775 ef0a          	ldw	(10,x),y
4268                     ; 731                     mqtt_recv_ret = MQTT_ERROR_CONNECTION_REFUSED;
4270  d777 ae8016        	ldw	x,#32790
4271  d77a ccd8b6        	jp	LC016
4272  d77d               L7151:
4273                     ; 736         case MQTT_CONTROL_PUBLISH:
4273                     ; 737             // stage response, none if qos==0, PUBACK if qos==1, PUBREC if qos==2
4273                     ; 738             if (response.decoded.publish.qos_level == 1) {
4275  d77d 7b13          	ld	a,(OFST-13,sp)
4276  d77f a101          	cp	a,#1
4277  d781 2619          	jrne	L3012
4278                     ; 739                 rv = __mqtt_puback(client, response.decoded.publish.packet_id);
4280  d783 1e19          	ldw	x,(OFST-7,sp)
4281  d785 89            	pushw	x
4282  d786 1e23          	ldw	x,(OFST+3,sp)
4283  d788 cdd17b        	call	___mqtt_puback
4285  d78b 5b02          	addw	sp,#2
4286  d78d 1f1f          	ldw	(OFST-1,sp),x
4288                     ; 740                 if (rv != MQTT_OK) {
4290  d78f 5a            	decw	x
4291  d790 273b          	jreq	L7012
4292                     ; 741                     client->error = rv;
4294  d792 1e21          	ldw	x,(OFST+1,sp)
4295  d794 161f          	ldw	y,(OFST-1,sp)
4296  d796 ef0a          	ldw	(10,x),y
4297                     ; 742                     mqtt_recv_ret = rv;
4299  d798 93            	ldw	x,y
4300                     ; 743                     break;
4302  d799 ccd8b6        	jp	LC016
4303  d79c               L3012:
4304                     ; 746             else if (response.decoded.publish.qos_level == 2) {
4306  d79c a102          	cp	a,#2
4307  d79e 262d          	jrne	L7012
4308                     ; 748                 if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.publish.packet_id) != NULL) {
4310  d7a0 96            	ldw	x,sp
4311  d7a1 1c0019        	addw	x,#OFST-7
4312  d7a4 89            	pushw	x
4313  d7a5 4b05          	push	#5
4314  d7a7 1e24          	ldw	x,(OFST+4,sp)
4315  d7a9 1c0022        	addw	x,#34
4316  d7ac cde2b3        	call	_mqtt_mq_find
4318  d7af 5b03          	addw	sp,#3
4319  d7b1 5d            	tnzw	x
4320  d7b2 26a4          	jrne	L1702
4321                     ; 749                     break;
4323                     ; 752                 rv = __mqtt_pubrec(client, response.decoded.publish.packet_id);
4325  d7b4 1e19          	ldw	x,(OFST-7,sp)
4326  d7b6 89            	pushw	x
4327  d7b7 1e23          	ldw	x,(OFST+3,sp)
4328  d7b9 cdd1f0        	call	___mqtt_pubrec
4330  d7bc 5b02          	addw	sp,#2
4331  d7be 1f1f          	ldw	(OFST-1,sp),x
4333                     ; 753                 if (rv != MQTT_OK) {
4335  d7c0 5a            	decw	x
4336  d7c1 270a          	jreq	L7012
4337                     ; 754                     client->error = rv;
4339  d7c3 1e21          	ldw	x,(OFST+1,sp)
4340  d7c5 161f          	ldw	y,(OFST-1,sp)
4341  d7c7 ef0a          	ldw	(10,x),y
4342                     ; 755                     mqtt_recv_ret = rv;
4344  d7c9 93            	ldw	x,y
4345                     ; 756                     break;
4347  d7ca ccd8b6        	jp	LC016
4348  d7cd               L7012:
4349                     ; 761             client->publish_response_callback(&client->publish_response_callback_state, &response.decoded.publish);
4351  d7cd 96            	ldw	x,sp
4352  d7ce 1c0012        	addw	x,#OFST-14
4353  d7d1 89            	pushw	x
4354  d7d2 1e23          	ldw	x,(OFST+3,sp)
4355  d7d4 1623          	ldw	y,(OFST+3,sp)
4356  d7d6 1c0012        	addw	x,#18
4357  d7d9 90ee10        	ldw	y,(16,y)
4358  d7dc 90fd          	call	(y)
4360  d7de 85            	popw	x
4361                     ; 762             break;
4363  d7df ccd8da        	jra	L1702
4364  d7e2               L1251:
4365                     ; 763         case MQTT_CONTROL_PUBACK:
4365                     ; 764             // release associated PUBLISH
4365                     ; 765             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.puback.packet_id);
4367  d7e2 96            	ldw	x,sp
4368  d7e3 1c0012        	addw	x,#OFST-14
4369  d7e6 89            	pushw	x
4370  d7e7 4b03          	push	#3
4372                     ; 766             if (msg == NULL) {
4374  d7e9               LC018:
4375  d7e9 1e24          	ldw	x,(OFST+4,sp)
4376  d7eb 1c0022        	addw	x,#34
4377  d7ee cde2b3        	call	_mqtt_mq_find
4378  d7f1 5b03          	addw	sp,#3
4379  d7f3 1f1f          	ldw	(OFST-1,sp),x
4383  d7f5 2703ccd8d6    	jrne	L3412
4384                     ; 767                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4386                     ; 768                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4388  d7fa               LC017:
4396  d7fa 1e21          	ldw	x,(OFST+1,sp)
4397  d7fc 90ae8014      	ldw	y,#32788
4398  d800 ef0a          	ldw	(10,x),y
4406  d802 ae8014        	ldw	x,#32788
4407                     ; 769                 break;
4409  d805 ccd8b6        	jp	LC016
4410                     ; 771             msg->state = MQTT_QUEUED_COMPLETE;
4411                     ; 772             break;
4413  d808               L3251:
4414                     ; 773         case MQTT_CONTROL_PUBREC:
4414                     ; 774             // check if this is a duplicate
4414                     ; 775             if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubrec.packet_id) != NULL) {
4416  d808 96            	ldw	x,sp
4417  d809 1c0012        	addw	x,#OFST-14
4418  d80c 89            	pushw	x
4419  d80d 4b06          	push	#6
4420  d80f 1e24          	ldw	x,(OFST+4,sp)
4421  d811 1c0022        	addw	x,#34
4422  d814 cde2b3        	call	_mqtt_mq_find
4424  d817 5b03          	addw	sp,#3
4425  d819 5d            	tnzw	x
4426  d81a 26c3          	jrne	L1702
4427                     ; 776                 break;
4429                     ; 779             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.pubrec.packet_id);
4431  d81c 96            	ldw	x,sp
4432  d81d 1c0012        	addw	x,#OFST-14
4433  d820 89            	pushw	x
4434  d821 4b03          	push	#3
4435  d823 1e24          	ldw	x,(OFST+4,sp)
4436  d825 1c0022        	addw	x,#34
4437  d828 cde2b3        	call	_mqtt_mq_find
4439  d82b 5b03          	addw	sp,#3
4440  d82d 1f1f          	ldw	(OFST-1,sp),x
4442                     ; 780             if (msg == NULL) {
4444                     ; 781                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4445                     ; 782                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4446                     ; 783                 break;
4448  d82f 27c9          	jreq	LC017
4449                     ; 785             msg->state = MQTT_QUEUED_COMPLETE;
4451  d831 a602          	ld	a,#2
4452  d833 e704          	ld	(4,x),a
4453                     ; 787             rv = __mqtt_pubrel(client, response.decoded.pubrec.packet_id);
4455  d835 1e12          	ldw	x,(OFST-14,sp)
4456  d837 89            	pushw	x
4457  d838 1e23          	ldw	x,(OFST+3,sp)
4458  d83a cdd265        	call	___mqtt_pubrel
4460  d83d 5b02          	addw	sp,#2
4461  d83f 1f1f          	ldw	(OFST-1,sp),x
4463                     ; 788             if (rv != MQTT_OK) {
4465  d841 5a            	decw	x
4466  d842 279b          	jreq	L1702
4467                     ; 789                 client->error = rv;
4469  d844 1e21          	ldw	x,(OFST+1,sp)
4470  d846 161f          	ldw	y,(OFST-1,sp)
4471  d848 ef0a          	ldw	(10,x),y
4472                     ; 790                 mqtt_recv_ret = rv;
4474  d84a 93            	ldw	x,y
4475                     ; 791                 break;
4477  d84b 2069          	jp	LC016
4478  d84d               L5251:
4479                     ; 794         case MQTT_CONTROL_PUBREL:
4479                     ; 795             // release associated PUBREC
4479                     ; 796             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.pubrel.packet_id);
4481  d84d 96            	ldw	x,sp
4482  d84e 1c0012        	addw	x,#OFST-14
4483  d851 89            	pushw	x
4484  d852 4b05          	push	#5
4485  d854 1e24          	ldw	x,(OFST+4,sp)
4486  d856 1c0022        	addw	x,#34
4487  d859 cde2b3        	call	_mqtt_mq_find
4489  d85c 5b03          	addw	sp,#3
4490  d85e 1f1f          	ldw	(OFST-1,sp),x
4492                     ; 797             if (msg == NULL) {
4494                     ; 798                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4495                     ; 799                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4496                     ; 800                 break;
4498  d860 2798          	jreq	LC017
4499                     ; 802             msg->state = MQTT_QUEUED_COMPLETE;
4501  d862 a602          	ld	a,#2
4502  d864 e704          	ld	(4,x),a
4503                     ; 804             rv = __mqtt_pubcomp(client, response.decoded.pubrec.packet_id);
4505  d866 1e12          	ldw	x,(OFST-14,sp)
4506  d868 89            	pushw	x
4507  d869 1e23          	ldw	x,(OFST+3,sp)
4508  d86b cdd2da        	call	___mqtt_pubcomp
4510  d86e 5b02          	addw	sp,#2
4511  d870 1f1f          	ldw	(OFST-1,sp),x
4513                     ; 805             if (rv != MQTT_OK) {
4515  d872 5a            	decw	x
4516  d873 2765          	jreq	L1702
4517                     ; 806                 client->error = rv;
4519  d875 1e21          	ldw	x,(OFST+1,sp)
4520  d877 161f          	ldw	y,(OFST-1,sp)
4521  d879 ef0a          	ldw	(10,x),y
4522                     ; 807                 mqtt_recv_ret = rv;
4524  d87b 93            	ldw	x,y
4525                     ; 808                 break;
4527  d87c 2038          	jp	LC016
4528  d87e               L7251:
4529                     ; 811         case MQTT_CONTROL_PUBCOMP:
4529                     ; 812             // release associated PUBREL
4529                     ; 813             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubcomp.packet_id);
4531  d87e 96            	ldw	x,sp
4532  d87f 1c0012        	addw	x,#OFST-14
4533  d882 89            	pushw	x
4534  d883 4b06          	push	#6
4536                     ; 814             if (msg == NULL) {
4537                     ; 815                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4538                     ; 816                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4539                     ; 817                 break;
4541  d885 ccd7e9        	jp	LC018
4542                     ; 819             msg->state = MQTT_QUEUED_COMPLETE;
4543                     ; 820             break;
4545  d888               L1351:
4546                     ; 821         case MQTT_CONTROL_SUBACK:
4546                     ; 822             // release associated SUBSCRIBE
4546                     ; 823             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_SUBSCRIBE, &response.decoded.suback.packet_id);
4548  d888 96            	ldw	x,sp
4549  d889 1c0012        	addw	x,#OFST-14
4550  d88c 89            	pushw	x
4551  d88d 4b08          	push	#8
4552  d88f 1e24          	ldw	x,(OFST+4,sp)
4553  d891 1c0022        	addw	x,#34
4554  d894 cde2b3        	call	_mqtt_mq_find
4556  d897 5b03          	addw	sp,#3
4557  d899 1f1f          	ldw	(OFST-1,sp),x
4559                     ; 824             if (msg == NULL) {
4561                     ; 825                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4562                     ; 826                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4563                     ; 827                 break;
4565  d89b 2603ccd7fa    	jreq	LC017
4566                     ; 829             msg->state = MQTT_QUEUED_COMPLETE;
4568  d8a0 a602          	ld	a,#2
4569  d8a2 e704          	ld	(4,x),a
4570                     ; 832             if (response.decoded.suback.return_codes[0] == MQTT_SUBACK_FAILURE) {
4572  d8a4 1e14          	ldw	x,(OFST-12,sp)
4573  d8a6 f6            	ld	a,(x)
4574  d8a7 a180          	cp	a,#128
4575  d8a9 262f          	jrne	L1702
4576                     ; 833                 client->error = MQTT_ERROR_SUBSCRIBE_FAILED;
4578  d8ab 1e21          	ldw	x,(OFST+1,sp)
4579  d8ad 90ae8017      	ldw	y,#32791
4580  d8b1 ef0a          	ldw	(10,x),y
4581                     ; 834                 mqtt_recv_ret = MQTT_ERROR_SUBSCRIBE_FAILED;
4583  d8b3 ae8017        	ldw	x,#32791
4584  d8b6               LC016:
4585  d8b6 1f07          	ldw	(OFST-25,sp),x
4587                     ; 835                 break;
4589  d8b8 2020          	jra	L1702
4590  d8ba               L3351:
4591                     ; 838         case MQTT_CONTROL_UNSUBACK:
4591                     ; 839             // release associated UNSUBSCRIBE
4591                     ; 840             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_UNSUBSCRIBE, &response.decoded.unsuback.packet_id);
4593  d8ba 96            	ldw	x,sp
4594  d8bb 1c0012        	addw	x,#OFST-14
4595  d8be 89            	pushw	x
4596  d8bf 4b0a          	push	#10
4598                     ; 841             if (msg == NULL) {
4599                     ; 842                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4600                     ; 843                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4601                     ; 844                 break;
4603  d8c1 ccd7e9        	jp	LC018
4604                     ; 846             msg->state = MQTT_QUEUED_COMPLETE;
4605                     ; 847             break;
4607  d8c4               L5351:
4608                     ; 848         case MQTT_CONTROL_PINGRESP:
4608                     ; 849             // release associated PINGREQ
4608                     ; 850             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PINGREQ, NULL);
4610  d8c4 5f            	clrw	x
4611  d8c5 89            	pushw	x
4612  d8c6 4b0c          	push	#12
4613  d8c8 1e24          	ldw	x,(OFST+4,sp)
4614  d8ca 1c0022        	addw	x,#34
4615  d8cd cde2b3        	call	_mqtt_mq_find
4617  d8d0 5b03          	addw	sp,#3
4618  d8d2 1f1f          	ldw	(OFST-1,sp),x
4620                     ; 851             if (msg == NULL) {
4622                     ; 852                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4623                     ; 853                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4624                     ; 854                 break;
4626  d8d4 27c7          	jreq	LC017
4627  d8d6               L3412:
4628                     ; 856             msg->state = MQTT_QUEUED_COMPLETE;
4633  d8d6 a602          	ld	a,#2
4634  d8d8 e704          	ld	(4,x),a
4635                     ; 857             break;
4637  d8da               L1702:
4638                     ; 890         void* dest = (unsigned char*)client->recv_buffer.mem_start;
4640  d8da 1e21          	ldw	x,(OFST+1,sp)
4641  d8dc ee1a          	ldw	x,(26,x)
4642  d8de 1f01          	ldw	(OFST-31,sp),x
4644                     ; 891         void* src  = (unsigned char*)client->recv_buffer.mem_start + consumed;
4646  d8e0 1e21          	ldw	x,(OFST+1,sp)
4647  d8e2 ee1a          	ldw	x,(26,x)
4648  d8e4 72fb05        	addw	x,(OFST-27,sp)
4649  d8e7 1f03          	ldw	(OFST-29,sp),x
4651                     ; 892         uint16_t n = client->recv_buffer.curr - client->recv_buffer.mem_start - consumed;
4653  d8e9 1e21          	ldw	x,(OFST+1,sp)
4654  d8eb 1621          	ldw	y,(OFST+1,sp)
4655  d8ed ee1e          	ldw	x,(30,x)
4656  d8ef 01            	rrwa	x,a
4657  d8f0 90e01b        	sub	a,(27,y)
4658  d8f3 01            	rrwa	x,a
4659  d8f4 90e21a        	sbc	a,(26,y)
4660  d8f7 01            	rrwa	x,a
4661  d8f8 72f005        	subw	x,(OFST-27,sp)
4662  d8fb 1f1f          	ldw	(OFST-1,sp),x
4664                     ; 893         memmove(dest, src, n);
4666  d8fd 89            	pushw	x
4667  d8fe 1e05          	ldw	x,(OFST-27,sp)
4668  d900 89            	pushw	x
4669  d901 1e05          	ldw	x,(OFST-27,sp)
4670  d903 cdf5fb        	call	_memmove
4672  d906 5b04          	addw	sp,#4
4673                     ; 894         client->recv_buffer.curr -= consumed;
4675  d908 1e21          	ldw	x,(OFST+1,sp)
4676  d90a 9093          	ldw	y,x
4677  d90c ee1e          	ldw	x,(30,x)
4678  d90e 72f005        	subw	x,(OFST-27,sp)
4679  d911 90ef1e        	ldw	(30,y),x
4680                     ; 895         client->recv_buffer.curr_sz += consumed;
4682  d914 1e21          	ldw	x,(OFST+1,sp)
4683  d916 9093          	ldw	y,x
4684  d918 ee20          	ldw	x,(32,x)
4685  d91a 72fb05        	addw	x,(OFST-27,sp)
4686  d91d 90ef20        	ldw	(32,y),x
4687                     ; 904     return mqtt_recv_ret;
4689  d920 1e07          	ldw	x,(OFST-25,sp)
4691  d922 ccd6ec        	jra	L403
4694                     .const:	section	.text
4695  9ec9               L5412_control_type_is_valid:
4696  9ec9 00            	dc.b	0
4697  9eca 01            	dc.b	1
4698  9ecb 01            	dc.b	1
4699  9ecc 01            	dc.b	1
4700  9ecd 01            	dc.b	1
4701  9ece 01            	dc.b	1
4702  9ecf 01            	dc.b	1
4703  9ed0 01            	dc.b	1
4704  9ed1 01            	dc.b	1
4705  9ed2 01            	dc.b	1
4706  9ed3 01            	dc.b	1
4707  9ed4 01            	dc.b	1
4708  9ed5 01            	dc.b	1
4709  9ed6 01            	dc.b	1
4710  9ed7 01            	dc.b	1
4711  9ed8 00            	dc.b	0
4712  9ed9               L7412_required_flags:
4713  9ed9 00            	dc.b	0
4714  9eda 00            	dc.b	0
4715  9edb 00            	dc.b	0
4716  9edc 00            	dc.b	0
4717  9edd 00            	dc.b	0
4718  9ede 00            	dc.b	0
4719  9edf 02            	dc.b	2
4720  9ee0 00            	dc.b	0
4721  9ee1 02            	dc.b	2
4722  9ee2 00            	dc.b	0
4723  9ee3 02            	dc.b	2
4724  9ee4 00            	dc.b	0
4725  9ee5 00            	dc.b	0
4726  9ee6 00            	dc.b	0
4727  9ee7 00            	dc.b	0
4728  9ee8 00            	dc.b	0
4729  9ee9               L1512_mask_required_flags:
4730  9ee9 00            	dc.b	0
4731  9eea 0f            	dc.b	15
4732  9eeb 0f            	dc.b	15
4733  9eec 00            	dc.b	0
4734  9eed 0f            	dc.b	15
4735  9eee 0f            	dc.b	15
4736  9eef 0f            	dc.b	15
4737  9ef0 0f            	dc.b	15
4738  9ef1 0f            	dc.b	15
4739  9ef2 0f            	dc.b	15
4740  9ef3 0f            	dc.b	15
4741  9ef4 0f            	dc.b	15
4742  9ef5 0f            	dc.b	15
4743  9ef6 0f            	dc.b	15
4744  9ef7 0f            	dc.b	15
4745  9ef8 00            	dc.b	0
4798                     ; 966 static int16_t mqtt_fixed_header_rule_violation(const struct mqtt_fixed_header *fixed_header)
4798                     ; 967 {
4799                     .text:	section	.text,new
4800  d925               L3512_mqtt_fixed_header_rule_violation:
4802  d925 89            	pushw	x
4803       00000002      OFST:	set	2
4806                     ; 972     control_type = fixed_header->control_type;
4808  d926 f6            	ld	a,(x)
4809  d927 6b02          	ld	(OFST+0,sp),a
4811                     ; 973     control_flags = fixed_header->control_flags;
4813  d929 e604          	ld	a,(4,x)
4814  d92b a40f          	and	a,#15
4815  d92d 6b01          	ld	(OFST-1,sp),a
4817                     ; 976     if (control_type_is_valid[control_type] != 0x01) {
4819  d92f 5f            	clrw	x
4820  d930 7b02          	ld	a,(OFST+0,sp)
4821  d932 97            	ld	xl,a
4822  d933 d69ec9        	ld	a,(L5412_control_type_is_valid,x)
4823  d936 4a            	dec	a
4824  d937 2705          	jreq	L1022
4825                     ; 977         return MQTT_ERROR_CONTROL_FORBIDDEN_TYPE;
4827  d939 ae8002        	ldw	x,#32770
4829  d93c 2017          	jra	L013
4830  d93e               L1022:
4831                     ; 981     if(((control_flags ^ required_flags[control_type]) & mask_required_flags[control_type]) == 1) {
4833  d93e 7b02          	ld	a,(OFST+0,sp)
4834  d940 5f            	clrw	x
4835  d941 97            	ld	xl,a
4836  d942 905f          	clrw	y
4837  d944 9097          	ld	yl,a
4838  d946 90d69ed9      	ld	a,(L7412_required_flags,y)
4839  d94a 1801          	xor	a,(OFST-1,sp)
4840  d94c d49ee9        	and	a,(L1512_mask_required_flags,x)
4841  d94f 4a            	dec	a
4842  d950 2606          	jrne	L3022
4843                     ; 982         return MQTT_ERROR_CONTROL_INVALID_FLAGS;
4845  d952 ae8003        	ldw	x,#32771
4847  d955               L013:
4849  d955 5b02          	addw	sp,#2
4850  d957 81            	ret	
4851  d958               L3022:
4852                     ; 985     return 0;
4854  d958 5f            	clrw	x
4856  d959 20fa          	jra	L013
4948                     ; 989 int16_t mqtt_unpack_fixed_header(struct mqtt_response *response, const uint8_t *buf, uint16_t bufsz)
4948                     ; 990 {
4949                     .text:	section	.text,new
4950  d95b               _mqtt_unpack_fixed_header:
4952  d95b 89            	pushw	x
4953  d95c 520a          	subw	sp,#10
4954       0000000a      OFST:	set	10
4957                     ; 992     const uint8_t *start = buf;
4959  d95e 1e0f          	ldw	x,(OFST+5,sp)
4960  d960 1f05          	ldw	(OFST-5,sp),x
4962                     ; 997     if (response == NULL || buf == NULL) {
4964  d962 1e0b          	ldw	x,(OFST+1,sp)
4965  d964 2704          	jreq	L3522
4967  d966 1e0f          	ldw	x,(OFST+5,sp)
4968  d968 2605          	jrne	L1522
4969  d96a               L3522:
4970                     ; 998       return MQTT_ERROR_NULLPTR;
4972  d96a ae8001        	ldw	x,#32769
4974  d96d 2009          	jra	L223
4975  d96f               L1522:
4976                     ; 1000     fixed_header = &(response->fixed_header);
4978  d96f 1e0b          	ldw	x,(OFST+1,sp)
4979  d971 1f07          	ldw	(OFST-3,sp),x
4981                     ; 1003     if (bufsz == 0) return 0;
4983  d973 1e11          	ldw	x,(OFST+7,sp)
4984  d975 2604          	jrne	L5522
4987  d977               LC019:
4990  d977 5f            	clrw	x
4992  d978               L223:
4994  d978 5b0c          	addw	sp,#12
4995  d97a 81            	ret	
4996  d97b               L5522:
4997                     ; 1006     fixed_header->control_type  = (uint8_t)(*buf >> 4);
4999  d97b 1e0f          	ldw	x,(OFST+5,sp)
5000  d97d f6            	ld	a,(x)
5001  d97e 4e            	swap	a
5002  d97f 1e07          	ldw	x,(OFST-3,sp)
5003  d981 a40f          	and	a,#15
5004  d983 f7            	ld	(x),a
5005                     ; 1007     fixed_header->control_flags = (uint8_t)(*buf & 0x0F);
5007  d984 1e0f          	ldw	x,(OFST+5,sp)
5008  d986 f6            	ld	a,(x)
5009  d987 1e07          	ldw	x,(OFST-3,sp)
5010  d989 e804          	xor	a,(4,x)
5011  d98b a40f          	and	a,#15
5012  d98d e804          	xor	a,(4,x)
5013  d98f e704          	ld	(4,x),a
5014                     ; 1010     fixed_header->remaining_length = 0;
5016  d991 4f            	clr	a
5017  d992 e708          	ld	(8,x),a
5018  d994 e707          	ld	(7,x),a
5019  d996 e706          	ld	(6,x),a
5020  d998 e705          	ld	(5,x),a
5021                     ; 1012     lshift = 0;
5023  d99a 5f            	clrw	x
5024  d99b 1f09          	ldw	(OFST-1,sp),x
5026  d99d               L7522:
5027                     ; 1015         if(lshift == 28) {
5029  d99d 1e09          	ldw	x,(OFST-1,sp)
5030  d99f a3001c        	cpw	x,#28
5031  d9a2 2605          	jrne	L5622
5032                     ; 1016             return MQTT_ERROR_INVALID_REMAINING_LENGTH;
5034  d9a4 ae801a        	ldw	x,#32794
5036  d9a7 20cf          	jra	L223
5037  d9a9               L5622:
5038                     ; 1020         --bufsz;
5040  d9a9 1e11          	ldw	x,(OFST+7,sp)
5041  d9ab 5a            	decw	x
5042  d9ac 1f11          	ldw	(OFST+7,sp),x
5043                     ; 1021         ++buf;
5045  d9ae 1e0f          	ldw	x,(OFST+5,sp)
5046  d9b0 5c            	incw	x
5047  d9b1 1f0f          	ldw	(OFST+5,sp),x
5048                     ; 1022         if (bufsz == 0) return 0;
5050  d9b3 1e11          	ldw	x,(OFST+7,sp)
5053  d9b5 27c0          	jreq	LC019
5054                     ; 1025         fixed_header->remaining_length += (*buf & 0x7F) << lshift;
5056  d9b7 160f          	ldw	y,(OFST+5,sp)
5057  d9b9 1e07          	ldw	x,(OFST-3,sp)
5058  d9bb 90f6          	ld	a,(y)
5059  d9bd a47f          	and	a,#127
5060  d9bf 905f          	clrw	y
5061  d9c1 9097          	ld	yl,a
5062  d9c3 7b0a          	ld	a,(OFST+0,sp)
5063  d9c5 2705          	jreq	L413
5064  d9c7               L613:
5065  d9c7 9058          	sllw	y
5066  d9c9 4a            	dec	a
5067  d9ca 26fb          	jrne	L613
5068  d9cc               L413:
5069  d9cc cdf846        	call	c_itoly
5071  d9cf 1c0005        	addw	x,#5
5072  d9d2 cdf8b2        	call	c_lgadd
5074                     ; 1026         lshift += 7;
5076  d9d5 1e09          	ldw	x,(OFST-1,sp)
5077  d9d7 1c0007        	addw	x,#7
5078  d9da 1f09          	ldw	(OFST-1,sp),x
5080                     ; 1027     } while(*buf & 0x80); /* while continue bit is set */ 
5082  d9dc 1e0f          	ldw	x,(OFST+5,sp)
5083  d9de f6            	ld	a,(x)
5084  d9df 2bbc          	jrmi	L7522
5085                     ; 1030     --bufsz;
5087  d9e1 1e11          	ldw	x,(OFST+7,sp)
5088  d9e3 5a            	decw	x
5089  d9e4 1f11          	ldw	(OFST+7,sp),x
5090                     ; 1031     ++buf;
5092  d9e6 1e0f          	ldw	x,(OFST+5,sp)
5093  d9e8 5c            	incw	x
5094  d9e9 1f0f          	ldw	(OFST+5,sp),x
5095                     ; 1034     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5097  d9eb 1e07          	ldw	x,(OFST-3,sp)
5098  d9ed cdd925        	call	L3512_mqtt_fixed_header_rule_violation
5100  d9f0 1f09          	ldw	(OFST-1,sp),x
5102                     ; 1035     if (errcode) return errcode;
5107  d9f2 2684          	jrne	L223
5108                     ; 1038     if (bufsz < fixed_header->remaining_length) return 0;
5110  d9f4 1e11          	ldw	x,(OFST+7,sp)
5111  d9f6 cdfab4        	call	c_uitolx
5113  d9f9 96            	ldw	x,sp
5114  d9fa 5c            	incw	x
5115  d9fb cdfa53        	call	c_rtol
5118  d9fe 1e07          	ldw	x,(OFST-3,sp)
5119  da00 1c0005        	addw	x,#5
5120  da03 cdf8ed        	call	c_ltor
5122  da06 96            	ldw	x,sp
5123  da07 5c            	incw	x
5124  da08 cdf882        	call	c_lcmp
5128  da0b 2303ccd977    	jrugt	LC019
5129                     ; 1041     return buf - start;
5131  da10 1e0f          	ldw	x,(OFST+5,sp)
5132  da12 72f005        	subw	x,(OFST-5,sp)
5134  da15 ccd978        	jra	L223
5214                     	switch	.const
5215  9ef9               L033:
5216  9ef9 00000080      	dc.l	128
5217                     ; 1045 int16_t mqtt_pack_fixed_header(uint8_t *buf, uint16_t bufsz, const struct mqtt_fixed_header *fixed_header)
5217                     ; 1046 {
5218                     .text:	section	.text,new
5219  da18               _mqtt_pack_fixed_header:
5221  da18 89            	pushw	x
5222  da19 520c          	subw	sp,#12
5223       0000000c      OFST:	set	12
5226                     ; 1047     const uint8_t *start = buf;
5228  da1b 1f05          	ldw	(OFST-7,sp),x
5230                     ; 1052     if (fixed_header == NULL || buf == NULL) {
5232  da1d 1e13          	ldw	x,(OFST+7,sp)
5233  da1f 2704          	jreq	L5332
5235  da21 1e0d          	ldw	x,(OFST+1,sp)
5236  da23 2605          	jrne	L3332
5237  da25               L5332:
5238                     ; 1053       return MQTT_ERROR_NULLPTR;
5240  da25 ae8001        	ldw	x,#32769
5242  da28 2009          	jra	L233
5243  da2a               L3332:
5244                     ; 1057     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5246  da2a 1e13          	ldw	x,(OFST+7,sp)
5247  da2c cdd925        	call	L3512_mqtt_fixed_header_rule_violation
5249  da2f 1f07          	ldw	(OFST-5,sp),x
5251                     ; 1058     if (errcode) return errcode;
5253  da31 2703          	jreq	L7332
5257  da33               L233:
5259  da33 5b0e          	addw	sp,#14
5260  da35 81            	ret	
5261  da36               L7332:
5262                     ; 1061     if (bufsz == 0) return 0;
5264  da36 1e11          	ldw	x,(OFST+5,sp)
5265  da38 2603          	jrne	L1432
5268  da3a 5f            	clrw	x
5270  da3b 20f6          	jra	L233
5271  da3d               L1432:
5272                     ; 1064     *buf =  (uint8_t)((fixed_header->control_type << 4) & 0xF0);
5274  da3d 1e13          	ldw	x,(OFST+7,sp)
5275  da3f f6            	ld	a,(x)
5276  da40 97            	ld	xl,a
5277  da41 a610          	ld	a,#16
5278  da43 42            	mul	x,a
5279  da44 9f            	ld	a,xl
5280  da45 1e0d          	ldw	x,(OFST+1,sp)
5281  da47 a4f0          	and	a,#240
5282  da49 f7            	ld	(x),a
5283                     ; 1065     *buf |= (uint8_t)(fixed_header->control_flags & 0x0F);
5285  da4a 1613          	ldw	y,(OFST+7,sp)
5286  da4c 90e604        	ld	a,(4,y)
5287  da4f a40f          	and	a,#15
5288  da51 fa            	or	a,(x)
5289  da52 f7            	ld	(x),a
5290                     ; 1067     remaining_length = fixed_header->remaining_length;
5292  da53 93            	ldw	x,y
5293  da54 ee07          	ldw	x,(7,x)
5294  da56 1f0b          	ldw	(OFST-1,sp),x
5295  da58 93            	ldw	x,y
5296  da59 ee05          	ldw	x,(5,x)
5297  da5b 1f09          	ldw	(OFST-3,sp),x
5299  da5d               L3432:
5300                     ; 1075         --bufsz;
5302  da5d 1e11          	ldw	x,(OFST+5,sp)
5303  da5f 5a            	decw	x
5304  da60 1f11          	ldw	(OFST+5,sp),x
5305                     ; 1076         ++buf;
5307  da62 1e0d          	ldw	x,(OFST+1,sp)
5308  da64 5c            	incw	x
5309  da65 1f0d          	ldw	(OFST+1,sp),x
5310                     ; 1077         if (bufsz == 0) return 0;
5312  da67 1e11          	ldw	x,(OFST+5,sp)
5313  da69 2603          	jrne	L1532
5316  da6b 5f            	clrw	x
5318  da6c 20c5          	jra	L233
5319  da6e               L1532:
5320                     ; 1080         *buf  = (uint8_t)(remaining_length & 0x7F);
5322  da6e 7b0c          	ld	a,(OFST+0,sp)
5323  da70 1e0d          	ldw	x,(OFST+1,sp)
5324  da72 a47f          	and	a,#127
5325  da74 f7            	ld	(x),a
5326                     ; 1081         if(remaining_length > 127) *buf |= 0x80;
5328  da75 96            	ldw	x,sp
5329  da76 1c0009        	addw	x,#OFST-3
5330  da79 cdf8ed        	call	c_ltor
5332  da7c ae9ef9        	ldw	x,#L033
5333  da7f cdf882        	call	c_lcmp
5335  da82 2506          	jrult	L3532
5338  da84 1e0d          	ldw	x,(OFST+1,sp)
5339  da86 f6            	ld	a,(x)
5340  da87 aa80          	or	a,#128
5341  da89 f7            	ld	(x),a
5342  da8a               L3532:
5343                     ; 1082         remaining_length = remaining_length >> 7;
5345  da8a 96            	ldw	x,sp
5346  da8b 1c0009        	addw	x,#OFST-3
5347  da8e a607          	ld	a,#7
5348  da90 cdf8df        	call	c_lgursh
5351                     ; 1083     } while(*buf & 0x80);
5353  da93 1e0d          	ldw	x,(OFST+1,sp)
5354  da95 f6            	ld	a,(x)
5355  da96 2bc5          	jrmi	L3432
5356                     ; 1086     --bufsz;
5358  da98 1e11          	ldw	x,(OFST+5,sp)
5359  da9a 5a            	decw	x
5360  da9b 1f11          	ldw	(OFST+5,sp),x
5361                     ; 1087     ++buf;
5363  da9d 1e0d          	ldw	x,(OFST+1,sp)
5364  da9f 5c            	incw	x
5365  daa0 1f0d          	ldw	(OFST+1,sp),x
5366                     ; 1090     if (bufsz < fixed_header->remaining_length) return 0;
5368  daa2 1e11          	ldw	x,(OFST+5,sp)
5369  daa4 cdfab4        	call	c_uitolx
5371  daa7 96            	ldw	x,sp
5372  daa8 5c            	incw	x
5373  daa9 cdfa53        	call	c_rtol
5376  daac 1e13          	ldw	x,(OFST+7,sp)
5377  daae 1c0005        	addw	x,#5
5378  dab1 cdf8ed        	call	c_ltor
5380  dab4 96            	ldw	x,sp
5381  dab5 5c            	incw	x
5382  dab6 cdf882        	call	c_lcmp
5384  dab9 2304          	jrule	L5532
5387  dabb 5f            	clrw	x
5389  dabc ccda33        	jra	L233
5390  dabf               L5532:
5391                     ; 1093     return buf - start;
5393  dabf 1e0d          	ldw	x,(OFST+1,sp)
5394  dac1 72f005        	subw	x,(OFST-7,sp)
5396  dac4 ccda33        	jra	L233
5549                     ; 1098 int16_t mqtt_pack_connection_request(uint8_t* buf, uint16_t bufsz,
5549                     ; 1099                                      const char* client_id,
5549                     ; 1100                                      const char* will_topic,
5549                     ; 1101                                      const void* will_message,
5549                     ; 1102                                      uint16_t will_message_size,
5549                     ; 1103                                      const char* user_name,
5549                     ; 1104                                      const char* password,
5549                     ; 1105                                      uint8_t connect_flags,
5549                     ; 1106                                      uint16_t keep_alive)
5549                     ; 1107 { 
5550                     .text:	section	.text,new
5551  dac7               _mqtt_pack_connection_request:
5553  dac7 89            	pushw	x
5554  dac8 520d          	subw	sp,#13
5555       0000000d      OFST:	set	13
5558                     ; 1110     const uint8_t *const start = buf;
5560  daca 1f01          	ldw	(OFST-12,sp),x
5562                     ; 1114     fixed_header.control_type = MQTT_CONTROL_CONNECT;
5564  dacc a601          	ld	a,#1
5565  dace 6b03          	ld	(OFST-10,sp),a
5567                     ; 1115     fixed_header.control_flags = 0x00;
5569  dad0 7b07          	ld	a,(OFST-6,sp)
5570  dad2 a4f0          	and	a,#240
5571  dad4 6b07          	ld	(OFST-6,sp),a
5573                     ; 1118     connect_flags = (uint8_t)(connect_flags & ~MQTT_CONNECT_RESERVED);
5575  dad6 7b20          	ld	a,(OFST+19,sp)
5576  dad8 a4fe          	and	a,#254
5577  dada 6b20          	ld	(OFST+19,sp),a
5578                     ; 1121     remaining_length = 10; /* size of variable header */
5580  dadc ae000a        	ldw	x,#10
5581  dadf 1f0c          	ldw	(OFST-1,sp),x
5583                     ; 1133     remaining_length += __mqtt_packed_cstrlen(client_id);
5585  dae1 1e14          	ldw	x,(OFST+7,sp)
5586  dae3 cdf660        	call	_strlen
5588  dae6 1c0002        	addw	x,#2
5589  dae9 72fb0c        	addw	x,(OFST-1,sp)
5590  daec 1f0c          	ldw	(OFST-1,sp),x
5592                     ; 1163     connect_flags |= MQTT_CONNECT_WILL_FLAG;
5594  daee 7b20          	ld	a,(OFST+19,sp)
5595                     ; 1164     connect_flags |= MQTT_CONNECT_WILL_RETAIN;
5597  daf0 aa24          	or	a,#36
5598  daf2 6b20          	ld	(OFST+19,sp),a
5599                     ; 1165     remaining_length += __mqtt_packed_cstrlen(will_topic);
5601  daf4 1e16          	ldw	x,(OFST+9,sp)
5602  daf6 cdf660        	call	_strlen
5604  daf9 1c0002        	addw	x,#2
5605  dafc 72fb0c        	addw	x,(OFST-1,sp)
5606  daff 1f0c          	ldw	(OFST-1,sp),x
5608                     ; 1166     remaining_length += 2 + will_message_size; /* size of will_message */
5610  db01 1e1a          	ldw	x,(OFST+13,sp)
5611  db03 1c0002        	addw	x,#2
5612  db06 72fb0c        	addw	x,(OFST-1,sp)
5613  db09 1f0c          	ldw	(OFST-1,sp),x
5615                     ; 1168     if (user_name != NULL) {
5617  db0b 1e1c          	ldw	x,(OFST+15,sp)
5618  db0d 2713          	jreq	L5442
5619                     ; 1170         connect_flags |= MQTT_CONNECT_USER_NAME;
5621  db0f 7b20          	ld	a,(OFST+19,sp)
5622  db11 aa80          	or	a,#128
5623  db13 6b20          	ld	(OFST+19,sp),a
5624                     ; 1171         remaining_length += __mqtt_packed_cstrlen(user_name);
5626  db15 cdf660        	call	_strlen
5628  db18 1c0002        	addw	x,#2
5629  db1b 72fb0c        	addw	x,(OFST-1,sp)
5630  db1e 1f0c          	ldw	(OFST-1,sp),x
5633  db20 2006          	jra	L7442
5634  db22               L5442:
5635                     ; 1173     else connect_flags &= (uint8_t)(~MQTT_CONNECT_USER_NAME);
5637  db22 7b20          	ld	a,(OFST+19,sp)
5638  db24 a47f          	and	a,#127
5639  db26 6b20          	ld	(OFST+19,sp),a
5640  db28               L7442:
5641                     ; 1175     if (password != NULL) {
5643  db28 1e1e          	ldw	x,(OFST+17,sp)
5644  db2a 2713          	jreq	L1542
5645                     ; 1177         connect_flags |= MQTT_CONNECT_PASSWORD;
5647  db2c 7b20          	ld	a,(OFST+19,sp)
5648  db2e aa40          	or	a,#64
5649  db30 6b20          	ld	(OFST+19,sp),a
5650                     ; 1178         remaining_length += __mqtt_packed_cstrlen(password);
5652  db32 cdf660        	call	_strlen
5654  db35 1c0002        	addw	x,#2
5655  db38 72fb0c        	addw	x,(OFST-1,sp)
5656  db3b 1f0c          	ldw	(OFST-1,sp),x
5659  db3d 2008          	jra	L3542
5660  db3f               L1542:
5661                     ; 1180     else connect_flags &= (uint8_t)(~MQTT_CONNECT_PASSWORD);
5663  db3f 7b20          	ld	a,(OFST+19,sp)
5664  db41 a4bf          	and	a,#191
5665  db43 6b20          	ld	(OFST+19,sp),a
5666  db45 1e0c          	ldw	x,(OFST-1,sp)
5667  db47               L3542:
5668                     ; 1183     fixed_header.remaining_length = remaining_length;
5670  db47 cdfab4        	call	c_uitolx
5672  db4a 96            	ldw	x,sp
5673  db4b 1c0008        	addw	x,#OFST-5
5674  db4e cdfa53        	call	c_rtol
5677                     ; 1186     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
5679  db51 96            	ldw	x,sp
5680  db52 1c0003        	addw	x,#OFST-10
5681  db55 89            	pushw	x
5682  db56 1e14          	ldw	x,(OFST+7,sp)
5683  db58 89            	pushw	x
5684  db59 1e12          	ldw	x,(OFST+5,sp)
5685  db5b cdda18        	call	_mqtt_pack_fixed_header
5687  db5e 5b04          	addw	sp,#4
5688  db60 1f0c          	ldw	(OFST-1,sp),x
5690                     ; 1187     if (rv <= 0) {
5692  db62 9c            	rvf	
5693                     ; 1188       return rv; /* something went wrong */
5696  db63 2d1b          	jrsle	L073
5697                     ; 1191     buf += rv;
5699  db65 1e0e          	ldw	x,(OFST+1,sp)
5700  db67 72fb0c        	addw	x,(OFST-1,sp)
5701  db6a 1f0e          	ldw	(OFST+1,sp),x
5702                     ; 1192     bufsz -= rv;
5704  db6c 1e12          	ldw	x,(OFST+5,sp)
5705  db6e 72f00c        	subw	x,(OFST-1,sp)
5706  db71 1f12          	ldw	(OFST+5,sp),x
5707                     ; 1195     if (bufsz < fixed_header.remaining_length) return 0;
5709  db73 cdfab4        	call	c_uitolx
5711  db76 96            	ldw	x,sp
5712  db77 1c0008        	addw	x,#OFST-5
5713  db7a cdf882        	call	c_lcmp
5715  db7d 2404          	jruge	L7542
5718  db7f 5f            	clrw	x
5720  db80               L073:
5722  db80 5b0f          	addw	sp,#15
5723  db82 81            	ret	
5724  db83               L7542:
5725                     ; 1198     *buf++ = 0x00;
5727  db83 1e0e          	ldw	x,(OFST+1,sp)
5728  db85 7f            	clr	(x)
5729  db86 5c            	incw	x
5730                     ; 1199     *buf++ = 0x04;
5732  db87 a604          	ld	a,#4
5733  db89 f7            	ld	(x),a
5734  db8a 5c            	incw	x
5735                     ; 1200     *buf++ = (uint8_t) 'M';
5737  db8b a64d          	ld	a,#77
5738  db8d f7            	ld	(x),a
5739  db8e 5c            	incw	x
5740                     ; 1201     *buf++ = (uint8_t) 'Q';
5742  db8f a651          	ld	a,#81
5743  db91 f7            	ld	(x),a
5744  db92 5c            	incw	x
5745                     ; 1202     *buf++ = (uint8_t) 'T';
5747  db93 a654          	ld	a,#84
5748  db95 f7            	ld	(x),a
5749  db96 5c            	incw	x
5750                     ; 1203     *buf++ = (uint8_t) 'T';
5752  db97 f7            	ld	(x),a
5753  db98 5c            	incw	x
5754                     ; 1204     *buf++ = MQTT_PROTOCOL_LEVEL;
5756  db99 a604          	ld	a,#4
5757  db9b f7            	ld	(x),a
5758  db9c 5c            	incw	x
5759                     ; 1205     *buf++ = connect_flags;
5761  db9d 7b20          	ld	a,(OFST+19,sp)
5762  db9f f7            	ld	(x),a
5763  dba0 5c            	incw	x
5764  dba1 1f0e          	ldw	(OFST+1,sp),x
5765                     ; 1206     buf += __mqtt_pack_uint16(buf, keep_alive);
5767  dba3 1e21          	ldw	x,(OFST+20,sp)
5768  dba5 89            	pushw	x
5769  dba6 1e10          	ldw	x,(OFST+3,sp)
5770  dba8 cde39b        	call	___mqtt_pack_uint16
5772  dbab 5b02          	addw	sp,#2
5773  dbad 72fb0e        	addw	x,(OFST+1,sp)
5774  dbb0 1f0e          	ldw	(OFST+1,sp),x
5775                     ; 1209     buf += __mqtt_pack_str(buf, client_id);
5777  dbb2 1e14          	ldw	x,(OFST+7,sp)
5778  dbb4 89            	pushw	x
5779  dbb5 1e10          	ldw	x,(OFST+3,sp)
5780  dbb7 cde3dc        	call	___mqtt_pack_str
5782  dbba 5b02          	addw	sp,#2
5783  dbbc 72fb0e        	addw	x,(OFST+1,sp)
5784  dbbf 1f0e          	ldw	(OFST+1,sp),x
5785                     ; 1210     if (connect_flags & MQTT_CONNECT_WILL_FLAG) {
5787  dbc1 7b20          	ld	a,(OFST+19,sp)
5788  dbc3 a504          	bcp	a,#4
5789  dbc5 273c          	jreq	L1642
5790                     ; 1211         buf += __mqtt_pack_str(buf, will_topic);
5792  dbc7 1e16          	ldw	x,(OFST+9,sp)
5793  dbc9 89            	pushw	x
5794  dbca 1e10          	ldw	x,(OFST+3,sp)
5795  dbcc cde3dc        	call	___mqtt_pack_str
5797  dbcf 5b02          	addw	sp,#2
5798  dbd1 72fb0e        	addw	x,(OFST+1,sp)
5799  dbd4 1f0e          	ldw	(OFST+1,sp),x
5800                     ; 1212         buf += __mqtt_pack_uint16(buf, (uint16_t)will_message_size);
5802  dbd6 1e1a          	ldw	x,(OFST+13,sp)
5803  dbd8 89            	pushw	x
5804  dbd9 1e10          	ldw	x,(OFST+3,sp)
5805  dbdb cde39b        	call	___mqtt_pack_uint16
5807  dbde 5b02          	addw	sp,#2
5808  dbe0 72fb0e        	addw	x,(OFST+1,sp)
5809  dbe3 1f0e          	ldw	(OFST+1,sp),x
5810                     ; 1213         memcpy(buf, will_message, will_message_size);
5812  dbe5 bf04          	ldw	c_x,x
5813  dbe7 1618          	ldw	y,(OFST+11,sp)
5814  dbe9 90bf07        	ldw	c_y,y
5815  dbec 1e1a          	ldw	x,(OFST+13,sp)
5816  dbee 270a          	jreq	L063
5817  dbf0               L263:
5818  dbf0 5a            	decw	x
5819  dbf1 92d607        	ld	a,([c_y.w],x)
5820  dbf4 92d704        	ld	([c_x.w],x),a
5821  dbf7 5d            	tnzw	x
5822  dbf8 26f6          	jrne	L263
5823  dbfa               L063:
5824                     ; 1214         buf += will_message_size;
5826  dbfa 1e0e          	ldw	x,(OFST+1,sp)
5827  dbfc 72fb1a        	addw	x,(OFST+13,sp)
5828  dbff 1f0e          	ldw	(OFST+1,sp),x
5829  dc01 7b20          	ld	a,(OFST+19,sp)
5830  dc03               L1642:
5831                     ; 1217     if (connect_flags & MQTT_CONNECT_USER_NAME) buf += __mqtt_pack_str(buf, user_name);
5833  dc03 a580          	bcp	a,#128
5834  dc05 2711          	jreq	L3642
5837  dc07 1e1c          	ldw	x,(OFST+15,sp)
5838  dc09 89            	pushw	x
5839  dc0a 1e10          	ldw	x,(OFST+3,sp)
5840  dc0c cde3dc        	call	___mqtt_pack_str
5842  dc0f 5b02          	addw	sp,#2
5843  dc11 72fb0e        	addw	x,(OFST+1,sp)
5844  dc14 1f0e          	ldw	(OFST+1,sp),x
5845  dc16 7b20          	ld	a,(OFST+19,sp)
5846  dc18               L3642:
5847                     ; 1219     if (connect_flags & MQTT_CONNECT_PASSWORD) buf += __mqtt_pack_str(buf, password);
5849  dc18 a540          	bcp	a,#64
5850  dc1a 270f          	jreq	L5642
5853  dc1c 1e1e          	ldw	x,(OFST+17,sp)
5854  dc1e 89            	pushw	x
5855  dc1f 1e10          	ldw	x,(OFST+3,sp)
5856  dc21 cde3dc        	call	___mqtt_pack_str
5858  dc24 5b02          	addw	sp,#2
5859  dc26 72fb0e        	addw	x,(OFST+1,sp)
5860  dc29 1f0e          	ldw	(OFST+1,sp),x
5861  dc2b               L5642:
5862                     ; 1222     return buf - start;
5864  dc2b 72f001        	subw	x,(OFST-12,sp)
5866  dc2e ccdb80        	jra	L073
5936                     	switch	.const
5937  9efd               L473:
5938  9efd 00000002      	dc.l	2
5939                     ; 1227 int16_t mqtt_unpack_connack_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
5939                     ; 1228 {
5940                     .text:	section	.text,new
5941  dc31               _mqtt_unpack_connack_response:
5943  dc31 89            	pushw	x
5944  dc32 5204          	subw	sp,#4
5945       00000004      OFST:	set	4
5948                     ; 1229     const uint8_t *const start = buf;
5950  dc34 1e09          	ldw	x,(OFST+5,sp)
5951  dc36 1f01          	ldw	(OFST-3,sp),x
5953                     ; 1233     if (mqtt_response->fixed_header.remaining_length != 2) {
5955  dc38 1e05          	ldw	x,(OFST+1,sp)
5956  dc3a 1c0005        	addw	x,#5
5957  dc3d cdf8ed        	call	c_ltor
5959  dc40 ae9efd        	ldw	x,#L473
5960  dc43 cdf882        	call	c_lcmp
5962  dc46 2705          	jreq	L5252
5963                     ; 1234       return MQTT_ERROR_MALFORMED_RESPONSE;
5965  dc48 ae800c        	ldw	x,#32780
5967  dc4b 2011          	jra	L673
5968  dc4d               L5252:
5969                     ; 1237     response = &(mqtt_response->decoded.connack);
5971  dc4d 1e05          	ldw	x,(OFST+1,sp)
5972  dc4f 1c0009        	addw	x,#9
5973  dc52 1f03          	ldw	(OFST-1,sp),x
5975                     ; 1239     if (*buf & 0xFE) {
5977  dc54 1e09          	ldw	x,(OFST+5,sp)
5978  dc56 f6            	ld	a,(x)
5979  dc57 a5fe          	bcp	a,#254
5980  dc59 2706          	jreq	L7252
5981                     ; 1240       return MQTT_ERROR_CONNACK_FORBIDDEN_FLAGS; /* only bit 1 can be set */
5983  dc5b ae8008        	ldw	x,#32776
5985  dc5e               L673:
5987  dc5e 5b06          	addw	sp,#6
5988  dc60 81            	ret	
5989  dc61               L7252:
5990                     ; 1242     else response->session_present_flag = *buf++;
5992  dc61 5c            	incw	x
5993  dc62 1f09          	ldw	(OFST+5,sp),x
5994  dc64 1e03          	ldw	x,(OFST-1,sp)
5995  dc66 f7            	ld	(x),a
5996                     ; 1244     if (*buf > 5u) {
5998  dc67 1e09          	ldw	x,(OFST+5,sp)
5999  dc69 f6            	ld	a,(x)
6000  dc6a a106          	cp	a,#6
6001  dc6c 2505          	jrult	L3352
6002                     ; 1245       return MQTT_ERROR_CONNACK_FORBIDDEN_CODE; /* only bit 1 can be set */
6004  dc6e ae8009        	ldw	x,#32777
6006  dc71 20eb          	jra	L673
6007  dc73               L3352:
6008                     ; 1247     else response->return_code = (enum MQTTConnackReturnCode) *buf++;
6010  dc73 5c            	incw	x
6011  dc74 1f09          	ldw	(OFST+5,sp),x
6012  dc76 1e03          	ldw	x,(OFST-1,sp)
6013  dc78 e701          	ld	(1,x),a
6014                     ; 1249     return buf - start;
6016  dc7a 1e09          	ldw	x,(OFST+5,sp)
6017  dc7c 72f001        	subw	x,(OFST-3,sp)
6019  dc7f 20dd          	jra	L673
6073                     ; 1254 int16_t mqtt_pack_disconnect(uint8_t *buf, uint16_t bufsz)
6073                     ; 1255 {
6074                     .text:	section	.text,new
6075  dc81               _mqtt_pack_disconnect:
6077  dc81 89            	pushw	x
6078  dc82 5209          	subw	sp,#9
6079       00000009      OFST:	set	9
6082                     ; 1257     fixed_header.control_type = MQTT_CONTROL_DISCONNECT;
6084  dc84 a60e          	ld	a,#14
6085  dc86 6b01          	ld	(OFST-8,sp),a
6087                     ; 1258     fixed_header.control_flags = 0;
6089  dc88 7b05          	ld	a,(OFST-4,sp)
6090  dc8a a4f0          	and	a,#240
6091  dc8c 6b05          	ld	(OFST-4,sp),a
6093                     ; 1259     fixed_header.remaining_length = 0;
6095  dc8e 5f            	clrw	x
6096  dc8f 1f08          	ldw	(OFST-1,sp),x
6097  dc91 1f06          	ldw	(OFST-3,sp),x
6099                     ; 1260     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6101  dc93 96            	ldw	x,sp
6102  dc94 5c            	incw	x
6103  dc95 89            	pushw	x
6104  dc96 1e10          	ldw	x,(OFST+7,sp)
6105  dc98 89            	pushw	x
6106  dc99 1e0e          	ldw	x,(OFST+5,sp)
6107  dc9b cdda18        	call	_mqtt_pack_fixed_header
6109  dc9e 5b0f          	addw	sp,#15
6112  dca0 81            	ret	
6166                     ; 1265 int16_t mqtt_pack_ping_request(uint8_t *buf, uint16_t bufsz)
6166                     ; 1266 {
6167                     .text:	section	.text,new
6168  dca1               _mqtt_pack_ping_request:
6170  dca1 89            	pushw	x
6171  dca2 5209          	subw	sp,#9
6172       00000009      OFST:	set	9
6175                     ; 1268     fixed_header.control_type = MQTT_CONTROL_PINGREQ;
6177  dca4 a60c          	ld	a,#12
6178  dca6 6b01          	ld	(OFST-8,sp),a
6180                     ; 1269     fixed_header.control_flags = 0;
6182  dca8 7b05          	ld	a,(OFST-4,sp)
6183  dcaa a4f0          	and	a,#240
6184  dcac 6b05          	ld	(OFST-4,sp),a
6186                     ; 1270     fixed_header.remaining_length = 0;
6188  dcae 5f            	clrw	x
6189  dcaf 1f08          	ldw	(OFST-1,sp),x
6190  dcb1 1f06          	ldw	(OFST-3,sp),x
6192                     ; 1271     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6194  dcb3 96            	ldw	x,sp
6195  dcb4 5c            	incw	x
6196  dcb5 89            	pushw	x
6197  dcb6 1e10          	ldw	x,(OFST+7,sp)
6198  dcb8 89            	pushw	x
6199  dcb9 1e0e          	ldw	x,(OFST+5,sp)
6200  dcbb cdda18        	call	_mqtt_pack_fixed_header
6202  dcbe 5b0f          	addw	sp,#15
6205  dcc0 81            	ret	
6337                     ; 1276 int16_t mqtt_pack_publish_request(uint8_t *buf, uint16_t bufsz,
6337                     ; 1277                                   const char* topic_name,
6337                     ; 1278                                   uint16_t packet_id,
6337                     ; 1279                                   const void* application_message,
6337                     ; 1280                                   uint16_t application_message_size,
6337                     ; 1281                                   uint8_t publish_flags)
6337                     ; 1282 {
6338                     .text:	section	.text,new
6339  dcc1               _mqtt_pack_publish_request:
6341  dcc1 89            	pushw	x
6342  dcc2 5212          	subw	sp,#18
6343       00000012      OFST:	set	18
6346                     ; 1283     const uint8_t *const start = buf;
6348  dcc4 1f01          	ldw	(OFST-17,sp),x
6350                     ; 1290     if(buf == NULL || topic_name == NULL) {
6352  dcc6 2704          	jreq	L5662
6354  dcc8 1e19          	ldw	x,(OFST+7,sp)
6355  dcca 2605          	jrne	L3662
6356  dccc               L5662:
6357                     ; 1291       return MQTT_ERROR_NULLPTR;
6359  dccc ae8001        	ldw	x,#32769
6361  dccf 204f          	jra	L624
6362  dcd1               L3662:
6363                     ; 1295     inspected_qos = (uint8_t)((publish_flags & MQTT_PUBLISH_QOS_MASK) >> 1); /* mask */
6365  dcd1 7b21          	ld	a,(OFST+15,sp)
6366  dcd3 a406          	and	a,#6
6367  dcd5 44            	srl	a
6368  dcd6 6b12          	ld	(OFST+0,sp),a
6370                     ; 1298     fixed_header.control_type = MQTT_CONTROL_PUBLISH;
6372  dcd8 a603          	ld	a,#3
6373  dcda 6b03          	ld	(OFST-15,sp),a
6375                     ; 1301     remaining_length = (uint32_t)__mqtt_packed_cstrlen(topic_name);
6377  dcdc cdf660        	call	_strlen
6379  dcdf 1c0002        	addw	x,#2
6380  dce2 cdfab4        	call	c_uitolx
6382  dce5 96            	ldw	x,sp
6383  dce6 1c000e        	addw	x,#OFST-4
6384  dce9 cdfa53        	call	c_rtol
6387                     ; 1302     if (inspected_qos > 0) remaining_length += 2;
6389  dcec 7b12          	ld	a,(OFST+0,sp)
6390  dcee 2709          	jreq	L7662
6393  dcf0 96            	ldw	x,sp
6394  dcf1 1c000e        	addw	x,#OFST-4
6395  dcf4 a602          	ld	a,#2
6396  dcf6 cdf8a2        	call	c_lgadc
6399  dcf9               L7662:
6400                     ; 1303     remaining_length += (uint32_t)application_message_size;
6402  dcf9 1e1f          	ldw	x,(OFST+13,sp)
6403  dcfb cdfab4        	call	c_uitolx
6405  dcfe 96            	ldw	x,sp
6406  dcff 1c000e        	addw	x,#OFST-4
6407  dd02 cdf8b2        	call	c_lgadd
6410                     ; 1304     fixed_header.remaining_length = remaining_length;
6412  dd05 1e10          	ldw	x,(OFST-2,sp)
6413  dd07 1f0a          	ldw	(OFST-8,sp),x
6414  dd09 1e0e          	ldw	x,(OFST-4,sp)
6415  dd0b 1f08          	ldw	(OFST-10,sp),x
6417                     ; 1307     if (inspected_qos == 0) publish_flags &= (uint8_t)(~MQTT_PUBLISH_DUP);
6419  dd0d 7b12          	ld	a,(OFST+0,sp)
6420  dd0f 2608          	jrne	L1762
6423  dd11 7b21          	ld	a,(OFST+15,sp)
6424  dd13 a4f7          	and	a,#247
6425  dd15 6b21          	ld	(OFST+15,sp),a
6426  dd17 7b12          	ld	a,(OFST+0,sp)
6427  dd19               L1762:
6428                     ; 1310     if (inspected_qos == 3) {
6430  dd19 a103          	cp	a,#3
6431  dd1b 2606          	jrne	L3762
6432                     ; 1311       return MQTT_ERROR_PUBLISH_FORBIDDEN_QOS;
6434  dd1d ae800a        	ldw	x,#32778
6436  dd20               L624:
6438  dd20 5b14          	addw	sp,#20
6439  dd22 81            	ret	
6440  dd23               L3762:
6441                     ; 1313     fixed_header.control_flags = publish_flags;
6443  dd23 7b21          	ld	a,(OFST+15,sp)
6444  dd25 1807          	xor	a,(OFST-11,sp)
6445  dd27 a40f          	and	a,#15
6446  dd29 1807          	xor	a,(OFST-11,sp)
6447  dd2b 6b07          	ld	(OFST-11,sp),a
6449                     ; 1316     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6451  dd2d 96            	ldw	x,sp
6452  dd2e 1c0003        	addw	x,#OFST-15
6453  dd31 89            	pushw	x
6454  dd32 1e19          	ldw	x,(OFST+7,sp)
6455  dd34 89            	pushw	x
6456  dd35 1e17          	ldw	x,(OFST+5,sp)
6457  dd37 cdda18        	call	_mqtt_pack_fixed_header
6459  dd3a 5b04          	addw	sp,#4
6460  dd3c 1f0c          	ldw	(OFST-6,sp),x
6462                     ; 1317     if (rv <= 0) return rv; /* something went wrong */
6464  dd3e 9c            	rvf	
6468  dd3f 2ddf          	jrsle	L624
6469                     ; 1319     buf += rv;
6471  dd41 1e13          	ldw	x,(OFST+1,sp)
6472  dd43 72fb0c        	addw	x,(OFST-6,sp)
6473  dd46 1f13          	ldw	(OFST+1,sp),x
6474                     ; 1320     bufsz -= rv;
6476  dd48 1e17          	ldw	x,(OFST+5,sp)
6477  dd4a 72f00c        	subw	x,(OFST-6,sp)
6478  dd4d 1f17          	ldw	(OFST+5,sp),x
6479                     ; 1323     if (bufsz < remaining_length) return 0;
6481  dd4f cdfab4        	call	c_uitolx
6483  dd52 96            	ldw	x,sp
6484  dd53 1c000e        	addw	x,#OFST-4
6485  dd56 cdf882        	call	c_lcmp
6487  dd59 2403          	jruge	L7762
6490  dd5b 5f            	clrw	x
6492  dd5c 20c2          	jra	L624
6493  dd5e               L7762:
6494                     ; 1326     buf += __mqtt_pack_str(buf, topic_name);
6496  dd5e 1e19          	ldw	x,(OFST+7,sp)
6497  dd60 89            	pushw	x
6498  dd61 1e15          	ldw	x,(OFST+3,sp)
6499  dd63 cde3dc        	call	___mqtt_pack_str
6501  dd66 5b02          	addw	sp,#2
6502  dd68 72fb13        	addw	x,(OFST+1,sp)
6503  dd6b 1f13          	ldw	(OFST+1,sp),x
6504                     ; 1327     if (inspected_qos > 0) buf += __mqtt_pack_uint16(buf, packet_id);
6506  dd6d 7b12          	ld	a,(OFST+0,sp)
6507  dd6f 270f          	jreq	L1072
6510  dd71 1e1b          	ldw	x,(OFST+9,sp)
6511  dd73 89            	pushw	x
6512  dd74 1e15          	ldw	x,(OFST+3,sp)
6513  dd76 cde39b        	call	___mqtt_pack_uint16
6515  dd79 5b02          	addw	sp,#2
6516  dd7b 72fb13        	addw	x,(OFST+1,sp)
6517  dd7e 1f13          	ldw	(OFST+1,sp),x
6518  dd80               L1072:
6519                     ; 1330     memcpy(buf, application_message, application_message_size);
6521  dd80 bf04          	ldw	c_x,x
6522  dd82 161d          	ldw	y,(OFST+11,sp)
6523  dd84 90bf07        	ldw	c_y,y
6524  dd87 1e1f          	ldw	x,(OFST+13,sp)
6525  dd89 270a          	jreq	L224
6526  dd8b               L424:
6527  dd8b 5a            	decw	x
6528  dd8c 92d607        	ld	a,([c_y.w],x)
6529  dd8f 92d704        	ld	([c_x.w],x),a
6530  dd92 5d            	tnzw	x
6531  dd93 26f6          	jrne	L424
6532  dd95               L224:
6533                     ; 1331     buf += application_message_size;
6535  dd95 1e13          	ldw	x,(OFST+1,sp)
6536  dd97 72fb1f        	addw	x,(OFST+13,sp)
6537  dd9a 1f13          	ldw	(OFST+1,sp),x
6538                     ; 1333     return buf - start;
6540  dd9c 72f001        	subw	x,(OFST-17,sp)
6542  dd9f ccdd20        	jra	L624
6625                     	switch	.const
6626  9f01               L234:
6627  9f01 00000004      	dc.l	4
6628                     ; 1337 int16_t mqtt_unpack_publish_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
6628                     ; 1338 {    
6629                     .text:	section	.text,new
6630  dda2               _mqtt_unpack_publish_response:
6632  dda2 89            	pushw	x
6633  dda3 5206          	subw	sp,#6
6634       00000006      OFST:	set	6
6637                     ; 1339     const uint8_t *const start = buf;
6639  dda5 1e0b          	ldw	x,(OFST+5,sp)
6640  dda7 1f01          	ldw	(OFST-5,sp),x
6642                     ; 1343     fixed_header = &(mqtt_response->fixed_header);
6644  dda9 1e07          	ldw	x,(OFST+1,sp)
6645  ddab 1f03          	ldw	(OFST-3,sp),x
6647                     ; 1344     response = &(mqtt_response->decoded.publish);
6649  ddad 1c0009        	addw	x,#9
6650  ddb0 1f05          	ldw	(OFST-1,sp),x
6652                     ; 1347     response->dup_flag = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_DUP) >> 3);
6654  ddb2 1e03          	ldw	x,(OFST-3,sp)
6655  ddb4 e604          	ld	a,(4,x)
6656  ddb6 a40f          	and	a,#15
6657  ddb8 44            	srl	a
6658  ddb9 44            	srl	a
6659  ddba 1e05          	ldw	x,(OFST-1,sp)
6660  ddbc 44            	srl	a
6661  ddbd f7            	ld	(x),a
6662                     ; 1348     response->qos_level = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_QOS_MASK) >> 1);
6664  ddbe 1e03          	ldw	x,(OFST-3,sp)
6665  ddc0 e604          	ld	a,(4,x)
6666  ddc2 a406          	and	a,#6
6667  ddc4 1e05          	ldw	x,(OFST-1,sp)
6668  ddc6 44            	srl	a
6669  ddc7 e701          	ld	(1,x),a
6670                     ; 1349     response->retain_flag = (uint8_t)(fixed_header->control_flags & MQTT_PUBLISH_RETAIN);
6672  ddc9 1e03          	ldw	x,(OFST-3,sp)
6673  ddcb e604          	ld	a,(4,x)
6674  ddcd 1e05          	ldw	x,(OFST-1,sp)
6675  ddcf a401          	and	a,#1
6676  ddd1 e702          	ld	(2,x),a
6677                     ; 1352     if (mqtt_response->fixed_header.remaining_length < 4) {
6679  ddd3 1e07          	ldw	x,(OFST+1,sp)
6680  ddd5 1c0005        	addw	x,#5
6681  ddd8 cdf8ed        	call	c_ltor
6683  dddb ae9f01        	ldw	x,#L234
6684  ddde cdf882        	call	c_lcmp
6686  dde1 2405          	jruge	L7472
6687                     ; 1353         return MQTT_ERROR_MALFORMED_RESPONSE;
6689  dde3 ae800c        	ldw	x,#32780
6691  dde6 2072          	jra	L044
6692  dde8               L7472:
6693                     ; 1357     response->topic_name_size = __mqtt_unpack_uint16(buf);
6695  dde8 1e0b          	ldw	x,(OFST+5,sp)
6696  ddea cde3bf        	call	___mqtt_unpack_uint16
6698  dded 1605          	ldw	y,(OFST-1,sp)
6699  ddef 90ef03        	ldw	(3,y),x
6700                     ; 1358     buf += 2;
6702  ddf2 1e0b          	ldw	x,(OFST+5,sp)
6703  ddf4 1c0002        	addw	x,#2
6704  ddf7 1f0b          	ldw	(OFST+5,sp),x
6705                     ; 1359     response->topic_name = buf;
6707  ddf9 93            	ldw	x,y
6708  ddfa 160b          	ldw	y,(OFST+5,sp)
6709  ddfc ef05          	ldw	(5,x),y
6710                     ; 1360     buf += response->topic_name_size;
6712  ddfe ee03          	ldw	x,(3,x)
6713  de00 72fb0b        	addw	x,(OFST+5,sp)
6714  de03 1f0b          	ldw	(OFST+5,sp),x
6715                     ; 1362     if (response->qos_level > 0) {
6717  de05 1e05          	ldw	x,(OFST-1,sp)
6718  de07 6d01          	tnz	(1,x)
6719  de09 2712          	jreq	L1572
6720                     ; 1363         response->packet_id = __mqtt_unpack_uint16(buf);
6722  de0b 1e0b          	ldw	x,(OFST+5,sp)
6723  de0d cde3bf        	call	___mqtt_unpack_uint16
6725  de10 1605          	ldw	y,(OFST-1,sp)
6726  de12 90ef07        	ldw	(7,y),x
6727                     ; 1364         buf += 2;
6729  de15 1e0b          	ldw	x,(OFST+5,sp)
6730  de17 1c0002        	addw	x,#2
6731  de1a 1f0b          	ldw	(OFST+5,sp),x
6732  de1c 93            	ldw	x,y
6733  de1d               L1572:
6734                     ; 1368     response->application_message = buf;
6736  de1d 160b          	ldw	y,(OFST+5,sp)
6737  de1f ef09          	ldw	(9,x),y
6738                     ; 1369     if (response->qos_level == 0) {
6740  de21 6d01          	tnz	(1,x)
6741  de23 2614          	jrne	L3572
6742                     ; 1370         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 2);
6744  de25 1e03          	ldw	x,(OFST-3,sp)
6745  de27 1605          	ldw	y,(OFST-1,sp)
6746  de29 ee07          	ldw	x,(7,x)
6747  de2b 01            	rrwa	x,a
6748  de2c 90e004        	sub	a,(4,y)
6749  de2f 01            	rrwa	x,a
6750  de30 90e203        	sbc	a,(3,y)
6751  de33 01            	rrwa	x,a
6752  de34 1d0002        	subw	x,#2
6754  de37 2012          	jra	L5572
6755  de39               L3572:
6756                     ; 1373         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 4);
6758  de39 1e03          	ldw	x,(OFST-3,sp)
6759  de3b 1605          	ldw	y,(OFST-1,sp)
6760  de3d ee07          	ldw	x,(7,x)
6761  de3f 01            	rrwa	x,a
6762  de40 90e004        	sub	a,(4,y)
6763  de43 01            	rrwa	x,a
6764  de44 90e203        	sbc	a,(3,y)
6765  de47 01            	rrwa	x,a
6766  de48 1d0004        	subw	x,#4
6767  de4b               L5572:
6768  de4b 90ef0b        	ldw	(11,y),x
6769                     ; 1375     buf += response->application_message_size;
6771  de4e 1e05          	ldw	x,(OFST-1,sp)
6772  de50 ee0b          	ldw	x,(11,x)
6773  de52 72fb0b        	addw	x,(OFST+5,sp)
6774  de55 1f0b          	ldw	(OFST+5,sp),x
6775                     ; 1378     return buf - start;
6777  de57 72f001        	subw	x,(OFST-5,sp)
6779  de5a               L044:
6781  de5a 5b08          	addw	sp,#8
6782  de5c 81            	ret	
6871                     ; 1383 int16_t mqtt_pack_pubxxx_request(uint8_t *buf, uint16_t bufsz, 
6871                     ; 1384                                  enum MQTTControlPacketType control_type,
6871                     ; 1385                                  uint16_t packet_id) 
6871                     ; 1386 {
6872                     .text:	section	.text,new
6873  de5d               _mqtt_pack_pubxxx_request:
6875  de5d 89            	pushw	x
6876  de5e 520d          	subw	sp,#13
6877       0000000d      OFST:	set	13
6880                     ; 1387     const uint8_t *const start = buf;
6882  de60 1f01          	ldw	(OFST-12,sp),x
6884                     ; 1390     if (buf == NULL) {
6886  de62 2605          	jrne	L7103
6887                     ; 1391       return MQTT_ERROR_NULLPTR;
6889  de64 ae8001        	ldw	x,#32769
6891  de67 2032          	jra	L054
6892  de69               L7103:
6893                     ; 1395     fixed_header.control_type = control_type;
6895  de69 7b14          	ld	a,(OFST+7,sp)
6896  de6b 6b05          	ld	(OFST-8,sp),a
6898                     ; 1396     if (control_type == MQTT_CONTROL_PUBREL) fixed_header.control_flags = 0x02;
6900  de6d a106          	cp	a,#6
6901  de6f 2608          	jrne	L1203
6904  de71 7b09          	ld	a,(OFST-4,sp)
6905  de73 a4f0          	and	a,#240
6906  de75 aa02          	or	a,#2
6908  de77 2004          	jra	L3203
6909  de79               L1203:
6910                     ; 1397     else fixed_header.control_flags = 0;
6912  de79 7b09          	ld	a,(OFST-4,sp)
6913  de7b a4f0          	and	a,#240
6914  de7d               L3203:
6915  de7d 6b09          	ld	(OFST-4,sp),a
6917                     ; 1399     fixed_header.remaining_length = 2;
6919  de7f ae0002        	ldw	x,#2
6920  de82 1f0c          	ldw	(OFST-1,sp),x
6921  de84 5f            	clrw	x
6922  de85 1f0a          	ldw	(OFST-3,sp),x
6924                     ; 1400     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6926  de87 96            	ldw	x,sp
6927  de88 1c0005        	addw	x,#OFST-8
6928  de8b 89            	pushw	x
6929  de8c 1e14          	ldw	x,(OFST+7,sp)
6930  de8e 89            	pushw	x
6931  de8f 1e12          	ldw	x,(OFST+5,sp)
6932  de91 cdda18        	call	_mqtt_pack_fixed_header
6934  de94 5b04          	addw	sp,#4
6935  de96 1f03          	ldw	(OFST-10,sp),x
6937                     ; 1401     if (rv <= 0) return rv;
6939  de98 9c            	rvf	
6940  de99 2c03          	jrsgt	L5203
6944  de9b               L054:
6946  de9b 5b0f          	addw	sp,#15
6947  de9d 81            	ret	
6948  de9e               L5203:
6949                     ; 1402     buf += rv;
6951  de9e 1e0e          	ldw	x,(OFST+1,sp)
6952  dea0 72fb03        	addw	x,(OFST-10,sp)
6953  dea3 1f0e          	ldw	(OFST+1,sp),x
6954                     ; 1403     bufsz -= rv;
6956  dea5 1e12          	ldw	x,(OFST+5,sp)
6957  dea7 72f003        	subw	x,(OFST-10,sp)
6958  deaa 1f12          	ldw	(OFST+5,sp),x
6959                     ; 1405     if (bufsz < fixed_header.remaining_length) return 0;
6961  deac cdfab4        	call	c_uitolx
6963  deaf 96            	ldw	x,sp
6964  deb0 1c000a        	addw	x,#OFST-3
6965  deb3 cdf882        	call	c_lcmp
6967  deb6 2403          	jruge	L7203
6970  deb8 5f            	clrw	x
6972  deb9 20e0          	jra	L054
6973  debb               L7203:
6974                     ; 1407     buf += __mqtt_pack_uint16(buf, packet_id);
6976  debb 1e15          	ldw	x,(OFST+8,sp)
6977  debd 89            	pushw	x
6978  debe 1e10          	ldw	x,(OFST+3,sp)
6979  dec0 cde39b        	call	___mqtt_pack_uint16
6981  dec3 5b02          	addw	sp,#2
6982  dec5 72fb0e        	addw	x,(OFST+1,sp)
6983  dec8 1f0e          	ldw	(OFST+1,sp),x
6984                     ; 1409     return buf - start;
6986  deca 72f001        	subw	x,(OFST-12,sp)
6988  decd 20cc          	jra	L054
7054                     ; 1413 int16_t mqtt_unpack_pubxxx_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7054                     ; 1414 {
7055                     .text:	section	.text,new
7056  decf               _mqtt_unpack_pubxxx_response:
7058  decf 89            	pushw	x
7059  ded0 5204          	subw	sp,#4
7060       00000004      OFST:	set	4
7063                     ; 1415     const uint8_t *const start = buf;
7065  ded2 1e09          	ldw	x,(OFST+5,sp)
7066  ded4 1f01          	ldw	(OFST-3,sp),x
7068                     ; 1419     if (mqtt_response->fixed_header.remaining_length != 2) {
7070  ded6 1e05          	ldw	x,(OFST+1,sp)
7071  ded8 1c0005        	addw	x,#5
7072  dedb cdf8ed        	call	c_ltor
7074  dede ae9efd        	ldw	x,#L473
7075  dee1 cdf882        	call	c_lcmp
7077  dee4 2705          	jreq	L3603
7078                     ; 1420         return MQTT_ERROR_MALFORMED_RESPONSE;
7080  dee6 ae800c        	ldw	x,#32780
7082  dee9 2019          	jra	L654
7083  deeb               L3603:
7084                     ; 1424     packet_id = __mqtt_unpack_uint16(buf);
7086  deeb 1e09          	ldw	x,(OFST+5,sp)
7087  deed cde3bf        	call	___mqtt_unpack_uint16
7089  def0 1f03          	ldw	(OFST-1,sp),x
7091                     ; 1425     buf += 2;
7093  def2 1e09          	ldw	x,(OFST+5,sp)
7094  def4 1c0002        	addw	x,#2
7095  def7 1f09          	ldw	(OFST+5,sp),x
7096                     ; 1427     if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBACK) {
7098                     ; 1428         mqtt_response->decoded.puback.packet_id = packet_id;
7100                     ; 1430     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREC) {
7102                     ; 1431         mqtt_response->decoded.pubrec.packet_id = packet_id;
7104                     ; 1433     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREL) {
7106                     ; 1434         mqtt_response->decoded.pubrel.packet_id = packet_id;
7108                     ; 1437         mqtt_response->decoded.pubcomp.packet_id = packet_id;
7113  def9 1e05          	ldw	x,(OFST+1,sp)
7114  defb 1603          	ldw	y,(OFST-1,sp)
7115  defd ef09          	ldw	(9,x),y
7116                     ; 1440     return buf - start;
7118  deff 1e09          	ldw	x,(OFST+5,sp)
7119  df01 72f001        	subw	x,(OFST-3,sp)
7121  df04               L654:
7123  df04 5b06          	addw	sp,#6
7124  df06 81            	ret	
7190                     	switch	.const
7191  9f05               L264:
7192  9f05 00000003      	dc.l	3
7193                     ; 1445 int16_t mqtt_unpack_suback_response (struct mqtt_response *mqtt_response, const uint8_t *buf)
7193                     ; 1446 {
7194                     .text:	section	.text,new
7195  df07               _mqtt_unpack_suback_response:
7197  df07 89            	pushw	x
7198  df08 5208          	subw	sp,#8
7199       00000008      OFST:	set	8
7202                     ; 1447     const uint8_t *const start = buf;
7204  df0a 1e0d          	ldw	x,(OFST+5,sp)
7205  df0c 1f03          	ldw	(OFST-5,sp),x
7207                     ; 1448     uint32_t remaining_length = mqtt_response->fixed_header.remaining_length;
7209  df0e 1e09          	ldw	x,(OFST+1,sp)
7210  df10 9093          	ldw	y,x
7211  df12 ee07          	ldw	x,(7,x)
7212  df14 1f07          	ldw	(OFST-1,sp),x
7213  df16 93            	ldw	x,y
7214  df17 ee05          	ldw	x,(5,x)
7215  df19 1f05          	ldw	(OFST-3,sp),x
7217                     ; 1451     if (remaining_length < 3) {
7219  df1b 96            	ldw	x,sp
7220  df1c 1c0005        	addw	x,#OFST-3
7221  df1f cdf8ed        	call	c_ltor
7223  df22 ae9f05        	ldw	x,#L264
7224  df25 cdf882        	call	c_lcmp
7226  df28 2405          	jruge	L3313
7227                     ; 1452       return MQTT_ERROR_MALFORMED_RESPONSE;
7229  df2a ae800c        	ldw	x,#32780
7231  df2d 2037          	jra	L664
7232  df2f               L3313:
7233                     ; 1456     mqtt_response->decoded.suback.packet_id = __mqtt_unpack_uint16(buf);
7235  df2f 1e0d          	ldw	x,(OFST+5,sp)
7236  df31 cde3bf        	call	___mqtt_unpack_uint16
7238  df34 1609          	ldw	y,(OFST+1,sp)
7239  df36 90ef09        	ldw	(9,y),x
7240                     ; 1457     buf += 2;
7242  df39 1e0d          	ldw	x,(OFST+5,sp)
7243  df3b 1c0002        	addw	x,#2
7244  df3e 1f0d          	ldw	(OFST+5,sp),x
7245                     ; 1458     remaining_length -= 2;
7247  df40 96            	ldw	x,sp
7248  df41 1c0005        	addw	x,#OFST-3
7249  df44 a602          	ld	a,#2
7250  df46 cdf8c9        	call	c_lgsbc
7253                     ; 1461     mqtt_response->decoded.suback.num_return_codes = (uint16_t) remaining_length;
7255  df49 1e09          	ldw	x,(OFST+1,sp)
7256  df4b 1607          	ldw	y,(OFST-1,sp)
7257  df4d ef0d          	ldw	(13,x),y
7258                     ; 1462     mqtt_response->decoded.suback.return_codes = buf;
7260  df4f 160d          	ldw	y,(OFST+5,sp)
7261  df51 ef0b          	ldw	(11,x),y
7262                     ; 1463     buf += remaining_length;
7264  df53 96            	ldw	x,sp
7265  df54 1c0005        	addw	x,#OFST-3
7266  df57 cdf8ed        	call	c_ltor
7268  df5a be02          	ldw	x,c_lreg+2
7269  df5c 1f01          	ldw	(OFST-7,sp),x
7271  df5e 72fb0d        	addw	x,(OFST+5,sp)
7272  df61 1f0d          	ldw	(OFST+5,sp),x
7273                     ; 1465     return buf - start;
7275  df63 72f003        	subw	x,(OFST-5,sp)
7277  df66               L664:
7279  df66 5b0a          	addw	sp,#10
7280  df68 81            	ret	
7406                     ; 1470 int16_t mqtt_pack_subscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7406                     ; 1471 {
7407                     .text:	section	.text,new
7408  df69               _mqtt_pack_subscribe_request:
7410  df69 89            	pushw	x
7411  df6a 5229          	subw	sp,#41
7412       00000029      OFST:	set	41
7415                     ; 1473     const uint8_t *const start = buf;
7417  df6c 1f03          	ldw	(OFST-38,sp),x
7419                     ; 1476     uint16_t num_subs = 0;
7421  df6e 5f            	clrw	x
7422  df6f 1f26          	ldw	(OFST-3,sp),x
7424                     ; 1482     va_start(args, packet_id);
7426  df71 96            	ldw	x,sp
7427  df72 1c0032        	addw	x,#OFST+9
7428  df75 1f28          	ldw	(OFST-1,sp),x
7430  df77               L1123:
7431                     ; 1484         topic[num_subs] = va_arg(args, const char*);
7433  df77 1e28          	ldw	x,(OFST-1,sp)
7434  df79 1c0002        	addw	x,#2
7435  df7c 1f28          	ldw	(OFST-1,sp),x
7437  df7e 1d0002        	subw	x,#2
7438  df81 9096          	ldw	y,sp
7439  df83 72a90016      	addw	y,#OFST-19
7440  df87 1701          	ldw	(OFST-40,sp),y
7442  df89 1626          	ldw	y,(OFST-3,sp)
7443  df8b 9058          	sllw	y
7444  df8d 72f901        	addw	y,(OFST-40,sp)
7445  df90 fe            	ldw	x,(x)
7446  df91 90ff          	ldw	(y),x
7447                     ; 1485         if (topic[num_subs] == NULL) {
7449  df93 96            	ldw	x,sp
7450  df94 1c0016        	addw	x,#OFST-19
7451  df97 1f01          	ldw	(OFST-40,sp),x
7453  df99 1e26          	ldw	x,(OFST-3,sp)
7454  df9b 58            	sllw	x
7455  df9c 72fb01        	addw	x,(OFST-40,sp)
7456  df9f e601          	ld	a,(1,x)
7457  dfa1 fa            	or	a,(x)
7458  dfa2 2616          	jrne	L5123
7459                     ; 1487             break;
7460                     ; 1497     va_end(args);
7462                     ; 1500     fixed_header.control_type = MQTT_CONTROL_SUBSCRIBE;
7464  dfa4 a608          	ld	a,#8
7465  dfa6 6b0d          	ld	(OFST-28,sp),a
7467                     ; 1501     fixed_header.control_flags = 2u;
7469  dfa8 7b11          	ld	a,(OFST-24,sp)
7470  dfaa a4f0          	and	a,#240
7471  dfac aa02          	or	a,#2
7472  dfae 6b11          	ld	(OFST-24,sp),a
7474                     ; 1502     fixed_header.remaining_length = 2u; /* size of variable header */
7476  dfb0 ae0002        	ldw	x,#2
7477  dfb3 1f14          	ldw	(OFST-21,sp),x
7478  dfb5 5f            	clrw	x
7479  dfb6 1f12          	ldw	(OFST-23,sp),x
7481                     ; 1503     for(i = 0; i < num_subs; ++i) {
7483  dfb8 203f          	jra	L5223
7484  dfba               L5123:
7485                     ; 1490         max_qos[num_subs] = (uint8_t) va_arg(args, uint16_t);
7487  dfba 1e28          	ldw	x,(OFST-1,sp)
7489  dfbc e601          	ld	a,(1,x)
7490  dfbe 1c0002        	addw	x,#2
7491  dfc1 1f28          	ldw	(OFST-1,sp),x
7492  dfc3 96            	ldw	x,sp
7493  dfc4 1c0005        	addw	x,#OFST-36
7494  dfc7 72fb26        	addw	x,(OFST-3,sp)
7495  dfca f7            	ld	(x),a
7496                     ; 1492         ++num_subs;
7498  dfcb 1e26          	ldw	x,(OFST-3,sp)
7499  dfcd 5c            	incw	x
7500  dfce 1f26          	ldw	(OFST-3,sp),x
7502                     ; 1493         if (num_subs >= MQTT_SUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7504  dfd0 a30008        	cpw	x,#8
7505  dfd3 25a2          	jrult	L1123
7506                     ; 1494             return MQTT_ERROR_SUBSCRIBE_TOO_MANY_TOPICS;
7508  dfd5 ae800b        	ldw	x,#32779
7510  dfd8 2039          	jra	L205
7511  dfda               L1223:
7512                     ; 1505         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]) + 1;
7514  dfda 1c0016        	addw	x,#OFST-19
7515  dfdd 1f01          	ldw	(OFST-40,sp),x
7517  dfdf 1e28          	ldw	x,(OFST-1,sp)
7518  dfe1 58            	sllw	x
7519  dfe2 72fb01        	addw	x,(OFST-40,sp)
7520  dfe5 fe            	ldw	x,(x)
7521  dfe6 cdf660        	call	_strlen
7523  dfe9 1c0003        	addw	x,#3
7524  dfec cdfab4        	call	c_uitolx
7526  dfef 96            	ldw	x,sp
7527  dff0 1c0012        	addw	x,#OFST-23
7528  dff3 cdf8b2        	call	c_lgadd
7531                     ; 1503     for(i = 0; i < num_subs; ++i) {
7533  dff6 1e28          	ldw	x,(OFST-1,sp)
7534  dff8 5c            	incw	x
7535  dff9               L5223:
7537  dff9 1f28          	ldw	(OFST-1,sp),x
7541  dffb 1326          	cpw	x,(OFST-3,sp)
7542  dffd 96            	ldw	x,sp
7543  dffe 25da          	jrult	L1223
7544                     ; 1509     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
7546  e000 1c000d        	addw	x,#OFST-28
7547  e003 89            	pushw	x
7548  e004 1e30          	ldw	x,(OFST+7,sp)
7549  e006 89            	pushw	x
7550  e007 1e2e          	ldw	x,(OFST+5,sp)
7551  e009 cdda18        	call	_mqtt_pack_fixed_header
7553  e00c 5b04          	addw	sp,#4
7554  e00e 1f28          	ldw	(OFST-1,sp),x
7556                     ; 1510     if (rv <= 0) return rv;
7558  e010 9c            	rvf	
7559  e011 2c03          	jrsgt	L1323
7563  e013               L205:
7565  e013 5b2b          	addw	sp,#43
7566  e015 81            	ret	
7567  e016               L1323:
7568                     ; 1511     buf += rv;
7570  e016 1e2a          	ldw	x,(OFST+1,sp)
7571  e018 72fb28        	addw	x,(OFST-1,sp)
7572  e01b 1f2a          	ldw	(OFST+1,sp),x
7573                     ; 1512     bufsz -= rv;
7575  e01d 1e2e          	ldw	x,(OFST+5,sp)
7576  e01f 72f028        	subw	x,(OFST-1,sp)
7577  e022 1f2e          	ldw	(OFST+5,sp),x
7578                     ; 1515     if (bufsz < fixed_header.remaining_length) return 0;
7580  e024 cdfab4        	call	c_uitolx
7582  e027 96            	ldw	x,sp
7583  e028 1c0012        	addw	x,#OFST-23
7584  e02b cdf882        	call	c_lcmp
7586  e02e 2403          	jruge	L3323
7589  e030 5f            	clrw	x
7591  e031 20e0          	jra	L205
7592  e033               L3323:
7593                     ; 1518     buf += __mqtt_pack_uint16(buf, packet_id);
7595  e033 1e30          	ldw	x,(OFST+7,sp)
7596  e035 89            	pushw	x
7597  e036 1e2c          	ldw	x,(OFST+3,sp)
7598  e038 cde39b        	call	___mqtt_pack_uint16
7600  e03b 5b02          	addw	sp,#2
7601  e03d 72fb2a        	addw	x,(OFST+1,sp)
7602  e040 1f2a          	ldw	(OFST+1,sp),x
7603                     ; 1521     for(i = 0; i < num_subs; ++i) {
7605  e042 5f            	clrw	x
7607  e043 202b          	jra	L1423
7608  e045               L5323:
7609                     ; 1522         buf += __mqtt_pack_str(buf, topic[i]);
7611  e045 96            	ldw	x,sp
7612  e046 1c0016        	addw	x,#OFST-19
7613  e049 1f01          	ldw	(OFST-40,sp),x
7615  e04b 1e28          	ldw	x,(OFST-1,sp)
7616  e04d 58            	sllw	x
7617  e04e 72fb01        	addw	x,(OFST-40,sp)
7618  e051 fe            	ldw	x,(x)
7619  e052 89            	pushw	x
7620  e053 1e2c          	ldw	x,(OFST+3,sp)
7621  e055 cde3dc        	call	___mqtt_pack_str
7623  e058 5b02          	addw	sp,#2
7624  e05a 72fb2a        	addw	x,(OFST+1,sp)
7625  e05d 1f2a          	ldw	(OFST+1,sp),x
7626                     ; 1523         *buf++ = max_qos[i];
7628  e05f 96            	ldw	x,sp
7629  e060 1c0005        	addw	x,#OFST-36
7630  e063 72fb28        	addw	x,(OFST-1,sp)
7631  e066 f6            	ld	a,(x)
7632  e067 1e2a          	ldw	x,(OFST+1,sp)
7633  e069 f7            	ld	(x),a
7634  e06a 5c            	incw	x
7635  e06b 1f2a          	ldw	(OFST+1,sp),x
7636                     ; 1521     for(i = 0; i < num_subs; ++i) {
7638  e06d 1e28          	ldw	x,(OFST-1,sp)
7639  e06f 5c            	incw	x
7640  e070               L1423:
7641  e070 1f28          	ldw	(OFST-1,sp),x
7645  e072 1326          	cpw	x,(OFST-3,sp)
7646  e074 25cf          	jrult	L5323
7647                     ; 1526     return buf - start;
7649  e076 1e2a          	ldw	x,(OFST+1,sp)
7650  e078 72f003        	subw	x,(OFST-38,sp)
7652  e07b 2096          	jra	L205
7711                     ; 1531 int16_t mqtt_unpack_unsuback_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7711                     ; 1532 {
7712                     .text:	section	.text,new
7713  e07d               _mqtt_unpack_unsuback_response:
7715  e07d 89            	pushw	x
7716  e07e 89            	pushw	x
7717       00000002      OFST:	set	2
7720                     ; 1533     const uint8_t *const start = buf;
7722  e07f 1e07          	ldw	x,(OFST+5,sp)
7723  e081 1f01          	ldw	(OFST-1,sp),x
7725                     ; 1535     if (mqtt_response->fixed_header.remaining_length != 2) {
7727  e083 1e03          	ldw	x,(OFST+1,sp)
7728  e085 1c0005        	addw	x,#5
7729  e088 cdf8ed        	call	c_ltor
7731  e08b ae9efd        	ldw	x,#L473
7732  e08e cdf882        	call	c_lcmp
7734  e091 2705          	jreq	L5723
7735                     ; 1536         return MQTT_ERROR_MALFORMED_RESPONSE;
7737  e093 ae800c        	ldw	x,#32780
7739  e096 2014          	jra	L015
7740  e098               L5723:
7741                     ; 1540     mqtt_response->decoded.unsuback.packet_id = __mqtt_unpack_uint16(buf);
7743  e098 1e07          	ldw	x,(OFST+5,sp)
7744  e09a cde3bf        	call	___mqtt_unpack_uint16
7746  e09d 1603          	ldw	y,(OFST+1,sp)
7747  e09f 90ef09        	ldw	(9,y),x
7748                     ; 1541     buf += 2;
7750  e0a2 1e07          	ldw	x,(OFST+5,sp)
7751  e0a4 1c0002        	addw	x,#2
7752  e0a7 1f07          	ldw	(OFST+5,sp),x
7753                     ; 1543     return buf - start;
7755  e0a9 72f001        	subw	x,(OFST-1,sp)
7757  e0ac               L015:
7759  e0ac 5b04          	addw	sp,#4
7760  e0ae 81            	ret	
7876                     ; 1548 int16_t mqtt_pack_unsubscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7876                     ; 1549 {
7877                     .text:	section	.text,new
7878                     _mqtt_pack_unsubscribe_request:
7880                     	pushw	x
7881                     	subw	sp,#33
7882       00000021      OFST:	set	33
7885                     ; 1551     const uint8_t *const start = buf;
7887                     	ldw	(OFST-30,sp),x
7889                     ; 1554     uint16_t num_subs = 0;
7891                     	clrw	x
7892                     	ldw	(OFST-3,sp),x
7894                     ; 1559     va_start(args, packet_id);
7896                     	ldw	x,sp
7897                     	addw	x,#OFST+9
7898                     	ldw	(OFST-1,sp),x
7900                     L7433:
7901                     ; 1561         topic[num_subs] = va_arg(args, const char*);
7903                     	ldw	x,(OFST-1,sp)
7904                     	addw	x,#2
7905                     	ldw	(OFST-1,sp),x
7907                     	subw	x,#2
7908                     	ldw	y,sp
7909                     	addw	y,#OFST-19
7910                     	ldw	(OFST-32,sp),y
7912                     	ldw	y,(OFST-3,sp)
7913                     	sllw	y
7914                     	addw	y,(OFST-32,sp)
7915                     	ldw	x,(x)
7916                     	ldw	(y),x
7917                     ; 1562         if (topic[num_subs] == NULL) {
7919                     	ldw	x,sp
7920                     	addw	x,#OFST-19
7921                     	ldw	(OFST-32,sp),x
7923                     	ldw	x,(OFST-3,sp)
7924                     	sllw	x
7925                     	addw	x,(OFST-32,sp)
7926                     	ld	a,(1,x)
7927                     	or	a,(x)
7928                     	jrne	L3533
7929                     ; 1564             break;
7930                     ; 1572     va_end(args);
7932                     ; 1575     fixed_header.control_type = MQTT_CONTROL_UNSUBSCRIBE;
7934                     	ld	a,#10
7935                     	ld	(OFST-28,sp),a
7937                     ; 1576     fixed_header.control_flags = 2u;
7939                     	ld	a,(OFST-24,sp)
7940                     	and	a,#240
7941                     	or	a,#2
7942                     	ld	(OFST-24,sp),a
7944                     ; 1577     fixed_header.remaining_length = 2u; // size of variable header
7946                     	ldw	x,#2
7947                     	ldw	(OFST-21,sp),x
7948                     	clrw	x
7949                     	ldw	(OFST-23,sp),x
7951                     ; 1578     for(i = 0; i < num_subs; ++i) {
7953                     	jra	L3633
7954                     L3533:
7955                     ; 1567         ++num_subs;
7957                     	ldw	x,(OFST-3,sp)
7958                     	incw	x
7959                     	ldw	(OFST-3,sp),x
7961                     ; 1568         if (num_subs >= MQTT_UNSUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7963                     	cpw	x,#8
7964                     	jrult	L7433
7965                     ; 1569             return MQTT_ERROR_UNSUBSCRIBE_TOO_MANY_TOPICS;
7967                     	ldw	x,#32781
7969                     	jra	L425
7970                     L7533:
7971                     ; 1580         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]);
7973                     	addw	x,#OFST-19
7974                     	ldw	(OFST-32,sp),x
7976                     	ldw	x,(OFST-1,sp)
7977                     	sllw	x
7978                     	addw	x,(OFST-32,sp)
7979                     	ldw	x,(x)
7980                     	call	_strlen
7982                     	addw	x,#2
7983                     	call	c_uitolx
7985                     	ldw	x,sp
7986                     	addw	x,#OFST-23
7987                     	call	c_lgadd
7990                     ; 1578     for(i = 0; i < num_subs; ++i) {
7992                     	ldw	x,(OFST-1,sp)
7993                     	incw	x
7994                     L3633:
7996                     	ldw	(OFST-1,sp),x
8000                     	cpw	x,(OFST-3,sp)
8001                     	ldw	x,sp
8002                     	jrult	L7533
8003                     ; 1584     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
8005                     	addw	x,#OFST-28
8006                     	pushw	x
8007                     	ldw	x,(OFST+7,sp)
8008                     	pushw	x
8009                     	ldw	x,(OFST+5,sp)
8010                     	call	_mqtt_pack_fixed_header
8012                     	addw	sp,#4
8013                     	ldw	(OFST-1,sp),x
8015                     ; 1585     if (rv <= 0) return rv;
8017                     	rvf	
8018                     	jrsgt	L7633
8022                     L425:
8024                     	addw	sp,#35
8025                     	ret	
8026                     L7633:
8027                     ; 1586     buf += rv;
8029                     	ldw	x,(OFST+1,sp)
8030                     	addw	x,(OFST-1,sp)
8031                     	ldw	(OFST+1,sp),x
8032                     ; 1587     bufsz -= rv;
8034                     	ldw	x,(OFST+5,sp)
8035                     	subw	x,(OFST-1,sp)
8036                     	ldw	(OFST+5,sp),x
8037                     ; 1590     if (bufsz < fixed_header.remaining_length) return 0;
8039                     	call	c_uitolx
8041                     	ldw	x,sp
8042                     	addw	x,#OFST-23
8043                     	call	c_lcmp
8045                     	jruge	L1733
8048                     	clrw	x
8050                     	jra	L425
8051                     L1733:
8052                     ; 1593     buf += __mqtt_pack_uint16(buf, packet_id);
8054                     	ldw	x,(OFST+7,sp)
8055                     	pushw	x
8056                     	ldw	x,(OFST+3,sp)
8057                     	call	___mqtt_pack_uint16
8059                     	addw	sp,#2
8060                     	addw	x,(OFST+1,sp)
8061                     	ldw	(OFST+1,sp),x
8062                     ; 1596     for(i = 0; i < num_subs; ++i) buf += __mqtt_pack_str(buf, topic[i]);
8064                     	clrw	x
8066                     	jra	L7733
8067                     L3733:
8070                     	ldw	x,sp
8071                     	addw	x,#OFST-19
8072                     	ldw	(OFST-32,sp),x
8074                     	ldw	x,(OFST-1,sp)
8075                     	sllw	x
8076                     	addw	x,(OFST-32,sp)
8077                     	ldw	x,(x)
8078                     	pushw	x
8079                     	ldw	x,(OFST+3,sp)
8080                     	call	___mqtt_pack_str
8082                     	addw	sp,#2
8083                     	addw	x,(OFST+1,sp)
8084                     	ldw	(OFST+1,sp),x
8087                     	ldw	x,(OFST-1,sp)
8088                     	incw	x
8089                     L7733:
8090                     	ldw	(OFST-1,sp),x
8094                     	cpw	x,(OFST-3,sp)
8095                     	jrult	L3733
8096                     ; 1598     return buf - start;
8098                     	ldw	x,(OFST+1,sp)
8099                     	subw	x,(OFST-30,sp)
8101                     	jra	L425
8155                     ; 1603 void mqtt_mq_init(struct mqtt_message_queue *mq, void *buf, uint16_t bufsz) 
8155                     ; 1604 {  
8156                     .text:	section	.text,new
8157  e0af               _mqtt_mq_init:
8159  e0af 89            	pushw	x
8160       00000000      OFST:	set	0
8163                     ; 1605     if(buf != NULL)
8165  e0b0 1e05          	ldw	x,(OFST+5,sp)
8166  e0b2 2748          	jreq	L1343
8167                     ; 1607         mq->mem_start = buf;
8169  e0b4 1e01          	ldw	x,(OFST+1,sp)
8170  e0b6 1605          	ldw	y,(OFST+5,sp)
8171  e0b8 ff            	ldw	(x),y
8172                     ; 1608         mq->mem_end = (unsigned char*)buf + bufsz;
8174  e0b9 93            	ldw	x,y
8175  e0ba 1601          	ldw	y,(OFST+1,sp)
8176  e0bc 72fb07        	addw	x,(OFST+7,sp)
8177  e0bf 90ef02        	ldw	(2,y),x
8178                     ; 1609         mq->curr = buf;
8180  e0c2 93            	ldw	x,y
8181  e0c3 1605          	ldw	y,(OFST+5,sp)
8182  e0c5 ef04          	ldw	(4,x),y
8183                     ; 1610         mq->queue_tail = mq->mem_end;
8185  e0c7 9093          	ldw	y,x
8186  e0c9 90ee02        	ldw	y,(2,y)
8187  e0cc ef08          	ldw	(8,x),y
8188                     ; 1611         mq->curr_sz = mqtt_mq_currsz(mq);
8190  e0ce 1601          	ldw	y,(OFST+1,sp)
8191  e0d0 90ee08        	ldw	y,(8,y)
8192  e0d3 72a2000c      	subw	y,#12
8193  e0d7 90bf07        	ldw	c_y,y
8194  e0da 9093          	ldw	y,x
8195  e0dc 90ee04        	ldw	y,(4,y)
8196  e0df 90b307        	cpw	y,c_y
8197  e0e2 2505          	jrult	L035
8198  e0e4 5f            	clrw	x
8199  e0e5 1601          	ldw	y,(OFST+1,sp)
8200  e0e7 2010          	jra	L235
8201  e0e9               L035:
8202  e0e9 ee08          	ldw	x,(8,x)
8203  e0eb 1d000c        	subw	x,#12
8204  e0ee 1601          	ldw	y,(OFST+1,sp)
8205  e0f0 01            	rrwa	x,a
8206  e0f1 90e005        	sub	a,(5,y)
8207  e0f4 01            	rrwa	x,a
8208  e0f5 90e204        	sbc	a,(4,y)
8209  e0f8 01            	rrwa	x,a
8210  e0f9               L235:
8211  e0f9 90ef06        	ldw	(6,y),x
8212  e0fc               L1343:
8213                     ; 1613 }
8216  e0fc 85            	popw	x
8217  e0fd 81            	ret	
8264                     ; 1616 struct mqtt_queued_message* mqtt_mq_register(struct mqtt_message_queue *mq, uint16_t nbytes)
8264                     ; 1617 {
8265                     .text:	section	.text,new
8266  e0fe               _mqtt_mq_register:
8268  e0fe 89            	pushw	x
8269       00000000      OFST:	set	0
8272                     ; 1619     --(mq->queue_tail);
8274  e0ff 9093          	ldw	y,x
8275  e101 ee08          	ldw	x,(8,x)
8276  e103 1d000c        	subw	x,#12
8277  e106 90ef08        	ldw	(8,y),x
8278                     ; 1620     mq->queue_tail->start = mq->curr;
8280  e109 1e01          	ldw	x,(OFST+1,sp)
8281  e10b 9093          	ldw	y,x
8282  e10d 90ee08        	ldw	y,(8,y)
8283  e110 ee04          	ldw	x,(4,x)
8284  e112 90ff          	ldw	(y),x
8285                     ; 1621     mq->queue_tail->size = nbytes;
8287  e114 1e01          	ldw	x,(OFST+1,sp)
8288  e116 ee08          	ldw	x,(8,x)
8289  e118 1605          	ldw	y,(OFST+5,sp)
8290  e11a ef02          	ldw	(2,x),y
8291                     ; 1622     mq->queue_tail->state = MQTT_QUEUED_UNSENT;
8293  e11c 1e01          	ldw	x,(OFST+1,sp)
8294  e11e ee08          	ldw	x,(8,x)
8295  e120 6f04          	clr	(4,x)
8296                     ; 1625     mq->curr += nbytes;
8298  e122 1e01          	ldw	x,(OFST+1,sp)
8299  e124 9093          	ldw	y,x
8300  e126 ee04          	ldw	x,(4,x)
8301  e128 72fb05        	addw	x,(OFST+5,sp)
8302  e12b 90ef04        	ldw	(4,y),x
8303                     ; 1626     mq->curr_sz = mqtt_mq_currsz(mq);
8305  e12e 1e01          	ldw	x,(OFST+1,sp)
8306  e130 9093          	ldw	y,x
8307  e132 90ee08        	ldw	y,(8,y)
8308  e135 72a2000c      	subw	y,#12
8309  e139 90bf07        	ldw	c_y,y
8310  e13c 9093          	ldw	y,x
8311  e13e 90ee04        	ldw	y,(4,y)
8312  e141 90b307        	cpw	y,c_y
8313  e144 2505          	jrult	L635
8314  e146 5f            	clrw	x
8315  e147 1601          	ldw	y,(OFST+1,sp)
8316  e149 2010          	jra	L045
8317  e14b               L635:
8318  e14b ee08          	ldw	x,(8,x)
8319  e14d 1d000c        	subw	x,#12
8320  e150 1601          	ldw	y,(OFST+1,sp)
8321  e152 01            	rrwa	x,a
8322  e153 90e005        	sub	a,(5,y)
8323  e156 01            	rrwa	x,a
8324  e157 90e204        	sbc	a,(4,y)
8325  e15a 01            	rrwa	x,a
8326  e15b               L045:
8327  e15b 90ef06        	ldw	(6,y),x
8328                     ; 1628     return mq->queue_tail;
8330  e15e 1e01          	ldw	x,(OFST+1,sp)
8331  e160 ee08          	ldw	x,(8,x)
8334  e162 5b02          	addw	sp,#2
8335  e164 81            	ret	
8413                     ; 1632 void mqtt_mq_clean(struct mqtt_message_queue *mq) {
8414                     .text:	section	.text,new
8415  e165               _mqtt_mq_clean:
8417  e165 89            	pushw	x
8418  e166 5208          	subw	sp,#8
8419       00000008      OFST:	set	8
8422                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8424  e168 ee02          	ldw	x,(2,x)
8426  e16a 2047          	jra	L5253
8427  e16c               L5153:
8428                     ; 1636         if (new_head->state != MQTT_QUEUED_COMPLETE) break;
8430  e16c 1e07          	ldw	x,(OFST-1,sp)
8431  e16e e604          	ld	a,(4,x)
8432  e170 a102          	cp	a,#2
8433  e172 273f          	jreq	L5253
8435  e174               L3253:
8436                     ; 1640     if (new_head < mq->queue_tail) {
8438  e174 1e09          	ldw	x,(OFST+1,sp)
8439  e176 ee08          	ldw	x,(8,x)
8440  e178 1307          	cpw	x,(OFST-1,sp)
8441  e17a 2346          	jrule	L7253
8442                     ; 1641         mq->curr = mq->mem_start;
8444  e17c 1e09          	ldw	x,(OFST+1,sp)
8445  e17e 9093          	ldw	y,x
8446  e180 90fe          	ldw	y,(y)
8447  e182 ef04          	ldw	(4,x),y
8448                     ; 1642         mq->queue_tail = mq->mem_end;
8450  e184 9093          	ldw	y,x
8451  e186 90ee02        	ldw	y,(2,y)
8452  e189 ef08          	ldw	(8,x),y
8453                     ; 1643         mq->curr_sz = mqtt_mq_currsz(mq);
8455  e18b 72a2000c      	subw	y,#12
8456  e18f 90bf07        	ldw	c_y,y
8457  e192 9093          	ldw	y,x
8458  e194 90ee04        	ldw	y,(4,y)
8459  e197 90b307        	cpw	y,c_y
8460  e19a 2504          	jrult	L445
8461  e19c               LC022:
8462  e19c 5f            	clrw	x
8463  e19d cce2ab        	jp	L655
8464  e1a0               L445:
8465  e1a0 ee08          	ldw	x,(8,x)
8466  e1a2 1d000c        	subw	x,#12
8467  e1a5 1609          	ldw	y,(OFST+1,sp)
8468  e1a7 01            	rrwa	x,a
8469  e1a8 90e005        	sub	a,(5,y)
8470  e1ab 01            	rrwa	x,a
8471  e1ac 90e204        	sbc	a,(4,y)
8472  e1af 01            	rrwa	x,a
8473                     ; 1644         return;
8475  e1b0 cce2ad        	jp	LC020
8476  e1b3               L5253:
8477                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8479  e1b3 1d000c        	subw	x,#12
8480  e1b6 1f07          	ldw	(OFST-1,sp),x
8484  e1b8 1e09          	ldw	x,(OFST+1,sp)
8485  e1ba ee08          	ldw	x,(8,x)
8486  e1bc 1307          	cpw	x,(OFST-1,sp)
8487  e1be 23ac          	jrule	L5153
8488  e1c0 20b2          	jra	L3253
8489  e1c2               L7253:
8490                     ; 1646     else if (new_head == mqtt_mq_get(mq, 0)) {
8492  e1c2 1e09          	ldw	x,(OFST+1,sp)
8493  e1c4 ee02          	ldw	x,(2,x)
8494  e1c6 1d000c        	subw	x,#12
8495  e1c9 1307          	cpw	x,(OFST-1,sp)
8496  e1cb 2603          	jrne	L1353
8497                     ; 1648         return;
8498  e1cd               L065:
8501  e1cd 5b0a          	addw	sp,#10
8502  e1cf 81            	ret	
8503  e1d0               L1353:
8504                     ; 1653         uint16_t n = mq->curr - new_head->start;
8506  e1d0 1e09          	ldw	x,(OFST+1,sp)
8507  e1d2 1607          	ldw	y,(OFST-1,sp)
8508  e1d4 ee04          	ldw	x,(4,x)
8509  e1d6 01            	rrwa	x,a
8510  e1d7 90e001        	sub	a,(1,y)
8511  e1da 01            	rrwa	x,a
8512  e1db 90f2          	sbc	a,(y)
8513  e1dd 01            	rrwa	x,a
8514  e1de 1f05          	ldw	(OFST-3,sp),x
8516                     ; 1654         uint16_t removing = new_head->start - (uint8_t*) mq->mem_start;
8518  e1e0 93            	ldw	x,y
8519  e1e1 1609          	ldw	y,(OFST+1,sp)
8520  e1e3 fe            	ldw	x,(x)
8521  e1e4 01            	rrwa	x,a
8522  e1e5 90e001        	sub	a,(1,y)
8523  e1e8 01            	rrwa	x,a
8524  e1e9 90f2          	sbc	a,(y)
8525  e1eb 01            	rrwa	x,a
8526  e1ec 1f03          	ldw	(OFST-5,sp),x
8528                     ; 1655         memmove(mq->mem_start, new_head->start, n);
8530  e1ee 1e05          	ldw	x,(OFST-3,sp)
8531  e1f0 89            	pushw	x
8532  e1f1 1e09          	ldw	x,(OFST+1,sp)
8533  e1f3 fe            	ldw	x,(x)
8534  e1f4 89            	pushw	x
8535  e1f5 1e0d          	ldw	x,(OFST+5,sp)
8536  e1f7 fe            	ldw	x,(x)
8537  e1f8 cdf5fb        	call	_memmove
8539  e1fb 5b04          	addw	sp,#4
8540                     ; 1656         mq->curr = (unsigned char*)mq->mem_start + n;
8542  e1fd 1e09          	ldw	x,(OFST+1,sp)
8543  e1ff fe            	ldw	x,(x)
8544  e200 1609          	ldw	y,(OFST+1,sp)
8545  e202 72fb05        	addw	x,(OFST-3,sp)
8546  e205 90ef04        	ldw	(4,y),x
8547                     ; 1660             int16_t new_tail_idx = new_head - mq->queue_tail;
8549  e208 1e07          	ldw	x,(OFST-1,sp)
8550  e20a 01            	rrwa	x,a
8551  e20b 90e009        	sub	a,(9,y)
8552  e20e 01            	rrwa	x,a
8553  e20f 90e208        	sbc	a,(8,y)
8554  e212 01            	rrwa	x,a
8555  e213 a60c          	ld	a,#12
8556  e215 cdfa6b        	call	c_sdivx
8558  e218 1f05          	ldw	(OFST-3,sp),x
8560                     ; 1661             memmove(mqtt_mq_get(mq, new_tail_idx), mq->queue_tail, sizeof(struct mqtt_queued_message) * (new_tail_idx + 1));
8562  e21a 5c            	incw	x
8563  e21b a60c          	ld	a,#12
8564  e21d cdf66c        	call	c_bmulx
8566  e220 89            	pushw	x
8567  e221 1e0b          	ldw	x,(OFST+3,sp)
8568  e223 ee08          	ldw	x,(8,x)
8569  e225 89            	pushw	x
8570  e226 1e09          	ldw	x,(OFST+1,sp)
8571  e228 a60c          	ld	a,#12
8572  e22a cdf66c        	call	c_bmulx
8574  e22d 1f05          	ldw	(OFST-3,sp),x
8576  e22f 1e0d          	ldw	x,(OFST+5,sp)
8577  e231 ee02          	ldw	x,(2,x)
8578  e233 1d000c        	subw	x,#12
8579  e236 72f005        	subw	x,(OFST-3,sp)
8580  e239 cdf5fb        	call	_memmove
8582  e23c 5b04          	addw	sp,#4
8583                     ; 1662             mq->queue_tail = mqtt_mq_get(mq, new_tail_idx);
8585  e23e 1e05          	ldw	x,(OFST-3,sp)
8586  e240 a60c          	ld	a,#12
8587  e242 cdf66c        	call	c_bmulx
8589  e245 1f01          	ldw	(OFST-7,sp),x
8591  e247 1e09          	ldw	x,(OFST+1,sp)
8592  e249 ee02          	ldw	x,(2,x)
8593  e24b 1d000c        	subw	x,#12
8594  e24e 1609          	ldw	y,(OFST+1,sp)
8595  e250 72f001        	subw	x,(OFST-7,sp)
8596  e253 90ef08        	ldw	(8,y),x
8597                     ; 1666                 int16_t i = 0;
8599  e256 5f            	clrw	x
8601  e257 201e          	jra	L1453
8602  e259               L5353:
8603                     ; 1667                 for(; i < new_tail_idx + 1; ++i) mqtt_mq_get(mq, i)->start -= removing;
8605  e259 1e07          	ldw	x,(OFST-1,sp)
8606  e25b a60c          	ld	a,#12
8607  e25d cdf66c        	call	c_bmulx
8609  e260 1f01          	ldw	(OFST-7,sp),x
8611  e262 1e09          	ldw	x,(OFST+1,sp)
8612  e264 ee02          	ldw	x,(2,x)
8613  e266 1d000c        	subw	x,#12
8614  e269 72f001        	subw	x,(OFST-7,sp)
8615  e26c 9093          	ldw	y,x
8616  e26e fe            	ldw	x,(x)
8617  e26f 72f003        	subw	x,(OFST-5,sp)
8618  e272 90ff          	ldw	(y),x
8621  e274 1e07          	ldw	x,(OFST-1,sp)
8622  e276 5c            	incw	x
8623  e277               L1453:
8624  e277 1f07          	ldw	(OFST-1,sp),x
8628  e279 1e05          	ldw	x,(OFST-3,sp)
8629  e27b 5c            	incw	x
8630  e27c 1307          	cpw	x,(OFST-1,sp)
8631  e27e 2cd9          	jrsgt	L5353
8632                     ; 1673     mq->curr_sz = mqtt_mq_currsz(mq);
8634  e280 1e09          	ldw	x,(OFST+1,sp)
8635  e282 9093          	ldw	y,x
8636  e284 90ee08        	ldw	y,(8,y)
8637  e287 72a2000c      	subw	y,#12
8638  e28b 90bf07        	ldw	c_y,y
8639  e28e 9093          	ldw	y,x
8640  e290 90ee04        	ldw	y,(4,y)
8641  e293 90b307        	cpw	y,c_y
8642  e296 2503cce19c    	jruge	LC022
8643  e29b ee08          	ldw	x,(8,x)
8644  e29d 1d000c        	subw	x,#12
8645  e2a0 1609          	ldw	y,(OFST+1,sp)
8646  e2a2 01            	rrwa	x,a
8647  e2a3 90e005        	sub	a,(5,y)
8648  e2a6 01            	rrwa	x,a
8649  e2a7 90e204        	sbc	a,(4,y)
8650  e2aa 01            	rrwa	x,a
8651  e2ab               L655:
8652  e2ab 1609          	ldw	y,(OFST+1,sp)
8653  e2ad               LC020:
8654  e2ad 90ef06        	ldw	(6,y),x
8655                     ; 1674 }
8657  e2b0 cce1cd        	jra	L065
8729                     ; 1677 struct mqtt_queued_message* mqtt_mq_find(struct mqtt_message_queue *mq, enum MQTTControlPacketType control_type, uint16_t *packet_id)
8729                     ; 1678 {
8730                     .text:	section	.text,new
8731  e2b3               _mqtt_mq_find:
8733  e2b3 89            	pushw	x
8734  e2b4 89            	pushw	x
8735       00000002      OFST:	set	2
8738                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8740  e2b5 ee02          	ldw	x,(2,x)
8742  e2b7 2025          	jra	L1163
8743  e2b9               L5063:
8744                     ; 1681         if (curr->control_type == control_type) {
8746  e2b9 1e01          	ldw	x,(OFST-1,sp)
8747  e2bb e609          	ld	a,(9,x)
8748  e2bd 1107          	cp	a,(OFST+5,sp)
8749  e2bf 261b          	jrne	L5163
8750                     ; 1682             if ((packet_id == NULL && curr->state != MQTT_QUEUED_COMPLETE) ||
8750                     ; 1683                 (packet_id != NULL && *packet_id == curr->packet_id)) {
8752  e2c1 1e08          	ldw	x,(OFST+6,sp)
8753  e2c3 2608          	jrne	L3263
8755  e2c5 1e01          	ldw	x,(OFST-1,sp)
8756  e2c7 e604          	ld	a,(4,x)
8757  e2c9 a102          	cp	a,#2
8758  e2cb 261f          	jrne	L465
8759  e2cd               L3263:
8761  e2cd 1e08          	ldw	x,(OFST+6,sp)
8762  e2cf 270b          	jreq	L5163
8764  e2d1 1601          	ldw	y,(OFST-1,sp)
8765  e2d3 fe            	ldw	x,(x)
8766  e2d4 90e30a        	cpw	x,(10,y)
8767  e2d7 2603          	jrne	L5163
8768  e2d9 93            	ldw	x,y
8769                     ; 1684                 return curr;
8772  e2da 2010          	jra	L465
8773  e2dc               L5163:
8774                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8776  e2dc 1e01          	ldw	x,(OFST-1,sp)
8777  e2de               L1163:
8778  e2de 1d000c        	subw	x,#12
8779  e2e1 1f01          	ldw	(OFST-1,sp),x
8783  e2e3 1e03          	ldw	x,(OFST+1,sp)
8784  e2e5 ee08          	ldw	x,(8,x)
8785  e2e7 1301          	cpw	x,(OFST-1,sp)
8786  e2e9 23ce          	jrule	L5063
8787                     ; 1688     return NULL;
8789  e2eb 5f            	clrw	x
8791  e2ec               L465:
8793  e2ec 5b04          	addw	sp,#4
8794  e2ee 81            	ret	
8872                     ; 1693 int16_t mqtt_unpack_response(struct mqtt_response* response, const uint8_t *buf, uint16_t bufsz)
8872                     ; 1694 {
8873                     .text:	section	.text,new
8874  e2ef               _mqtt_unpack_response:
8876  e2ef 89            	pushw	x
8877  e2f0 5204          	subw	sp,#4
8878       00000004      OFST:	set	4
8881                     ; 1695     const uint8_t *const start = buf;
8883  e2f2 1e09          	ldw	x,(OFST+5,sp)
8884  e2f4 1f01          	ldw	(OFST-3,sp),x
8886                     ; 1696     int16_t rv = mqtt_unpack_fixed_header(response, buf, bufsz);
8888  e2f6 1e0b          	ldw	x,(OFST+7,sp)
8889  e2f8 89            	pushw	x
8890  e2f9 1e0b          	ldw	x,(OFST+7,sp)
8891  e2fb 89            	pushw	x
8892  e2fc 1e09          	ldw	x,(OFST+5,sp)
8893  e2fe cdd95b        	call	_mqtt_unpack_fixed_header
8895  e301 5b04          	addw	sp,#4
8896  e303 1f03          	ldw	(OFST-1,sp),x
8898                     ; 1698     if (rv <= 0) return rv;
8900  e305 9c            	rvf	
8904  e306 2d2c          	jrsle	L216
8905                     ; 1699     else buf += rv;
8907  e308 1e09          	ldw	x,(OFST+5,sp)
8908  e30a 72fb03        	addw	x,(OFST-1,sp)
8909  e30d 1f09          	ldw	(OFST+5,sp),x
8910                     ; 1701     switch(response->fixed_header.control_type) {
8912  e30f 1e05          	ldw	x,(OFST+1,sp)
8913  e311 f6            	ld	a,(x)
8915                     ; 1728         default:
8915                     ; 1729             return MQTT_ERROR_RESPONSE_INVALID_CONTROL_TYPE;
8916  e312 a002          	sub	a,#2
8917  e314 2721          	jreq	L5263
8918  e316 4a            	dec	a
8919  e317 2728          	jreq	L7263
8920  e319 4a            	dec	a
8921  e31a 272f          	jreq	L1363
8922  e31c 4a            	dec	a
8923  e31d 2736          	jreq	L3363
8924  e31f 4a            	dec	a
8925  e320 273d          	jreq	L5363
8926  e322 4a            	dec	a
8927  e323 2744          	jreq	L7363
8928  e325 a002          	sub	a,#2
8929  e327 274a          	jreq	L1463
8930  e329 a002          	sub	a,#2
8931  e32b 2750          	jreq	L3463
8932  e32d a002          	sub	a,#2
8933  e32f 2756          	jreq	L5463
8936  e331 ae800e        	ldw	x,#32782
8938  e334               L216:
8940  e334 5b06          	addw	sp,#6
8941  e336 81            	ret	
8942  e337               L5263:
8943                     ; 1702         case MQTT_CONTROL_CONNACK:
8943                     ; 1703             rv = mqtt_unpack_connack_response(response, buf);
8945  e337 1e09          	ldw	x,(OFST+5,sp)
8946  e339 89            	pushw	x
8947  e33a 1e07          	ldw	x,(OFST+3,sp)
8948  e33c cddc31        	call	_mqtt_unpack_connack_response
8950                     ; 1704             break;
8952  e33f 204a          	jra	L3173
8953  e341               L7263:
8954                     ; 1705         case MQTT_CONTROL_PUBLISH:
8954                     ; 1706             rv = mqtt_unpack_publish_response(response, buf);
8956  e341 1e09          	ldw	x,(OFST+5,sp)
8957  e343 89            	pushw	x
8958  e344 1e07          	ldw	x,(OFST+3,sp)
8959  e346 cddda2        	call	_mqtt_unpack_publish_response
8961                     ; 1707             break;
8963  e349 2040          	jra	L3173
8964  e34b               L1363:
8965                     ; 1708         case MQTT_CONTROL_PUBACK:
8965                     ; 1709             rv = mqtt_unpack_pubxxx_response(response, buf);
8967  e34b 1e09          	ldw	x,(OFST+5,sp)
8968  e34d 89            	pushw	x
8969  e34e 1e07          	ldw	x,(OFST+3,sp)
8970  e350 cddecf        	call	_mqtt_unpack_pubxxx_response
8972                     ; 1710             break;
8974  e353 2036          	jra	L3173
8975  e355               L3363:
8976                     ; 1711         case MQTT_CONTROL_PUBREC:
8976                     ; 1712             rv = mqtt_unpack_pubxxx_response(response, buf);
8978  e355 1e09          	ldw	x,(OFST+5,sp)
8979  e357 89            	pushw	x
8980  e358 1e07          	ldw	x,(OFST+3,sp)
8981  e35a cddecf        	call	_mqtt_unpack_pubxxx_response
8983                     ; 1713             break;
8985  e35d 202c          	jra	L3173
8986  e35f               L5363:
8987                     ; 1714         case MQTT_CONTROL_PUBREL:
8987                     ; 1715             rv = mqtt_unpack_pubxxx_response(response, buf);
8989  e35f 1e09          	ldw	x,(OFST+5,sp)
8990  e361 89            	pushw	x
8991  e362 1e07          	ldw	x,(OFST+3,sp)
8992  e364 cddecf        	call	_mqtt_unpack_pubxxx_response
8994                     ; 1716             break;
8996  e367 2022          	jra	L3173
8997  e369               L7363:
8998                     ; 1717         case MQTT_CONTROL_PUBCOMP:
8998                     ; 1718             rv = mqtt_unpack_pubxxx_response(response, buf);
9000  e369 1e09          	ldw	x,(OFST+5,sp)
9001  e36b 89            	pushw	x
9002  e36c 1e07          	ldw	x,(OFST+3,sp)
9003  e36e cddecf        	call	_mqtt_unpack_pubxxx_response
9005                     ; 1719             break;
9007  e371 2018          	jra	L3173
9008  e373               L1463:
9009                     ; 1720         case MQTT_CONTROL_SUBACK:
9009                     ; 1721             rv = mqtt_unpack_suback_response(response, buf);
9011  e373 1e09          	ldw	x,(OFST+5,sp)
9012  e375 89            	pushw	x
9013  e376 1e07          	ldw	x,(OFST+3,sp)
9014  e378 cddf07        	call	_mqtt_unpack_suback_response
9016                     ; 1722             break;
9018  e37b 200e          	jra	L3173
9019  e37d               L3463:
9020                     ; 1723         case MQTT_CONTROL_UNSUBACK:
9020                     ; 1724             rv = mqtt_unpack_unsuback_response(response, buf);
9022  e37d 1e09          	ldw	x,(OFST+5,sp)
9023  e37f 89            	pushw	x
9024  e380 1e07          	ldw	x,(OFST+3,sp)
9025  e382 cde07d        	call	_mqtt_unpack_unsuback_response
9027                     ; 1725             break;
9029  e385 2004          	jra	L3173
9030  e387               L5463:
9031                     ; 1726         case MQTT_CONTROL_PINGRESP:
9031                     ; 1727             return rv;
9033  e387 1e03          	ldw	x,(OFST-1,sp)
9035  e389 20a9          	jra	L216
9036  e38b               L3173:
9037  e38b 5b02          	addw	sp,#2
9038  e38d 1f03          	ldw	(OFST-1,sp),x
9040                     ; 1732     if (rv < 0) return rv;
9045  e38f 2ba3          	jrmi	L216
9046                     ; 1733     buf += rv;
9048  e391 72fb09        	addw	x,(OFST+5,sp)
9049  e394 1f09          	ldw	(OFST+5,sp),x
9050                     ; 1734     return buf - start;
9052  e396 72f001        	subw	x,(OFST-3,sp)
9054  e399 2099          	jra	L216
9104                     ; 1751 int16_t __mqtt_pack_uint16(uint8_t *buf, uint16_t integer)
9104                     ; 1752 {
9105                     .text:	section	.text,new
9106  e39b               ___mqtt_pack_uint16:
9108  e39b 89            	pushw	x
9109  e39c 89            	pushw	x
9110       00000002      OFST:	set	2
9113                     ; 1753   uint16_t integer_htons = HTONS(integer);
9115  e39d 1e07          	ldw	x,(OFST+5,sp)
9116  e39f 1f01          	ldw	(OFST-1,sp),x
9118                     ; 1754   memcpy(buf, &integer_htons, 2);
9120  e3a1 1e03          	ldw	x,(OFST+1,sp)
9121  e3a3 bf04          	ldw	c_x,x
9122  e3a5 9096          	ldw	y,sp
9123  e3a7 905c          	incw	y
9124  e3a9 90bf07        	ldw	c_y,y
9125  e3ac ae0002        	ldw	x,#2
9126  e3af               L616:
9127  e3af 5a            	decw	x
9128  e3b0 92d607        	ld	a,([c_y.w],x)
9129  e3b3 92d704        	ld	([c_x.w],x),a
9130  e3b6 5d            	tnzw	x
9131  e3b7 26f6          	jrne	L616
9132                     ; 1755   return 2;
9134  e3b9 ae0002        	ldw	x,#2
9137  e3bc 5b04          	addw	sp,#4
9138  e3be 81            	ret	
9182                     ; 1759 uint16_t __mqtt_unpack_uint16(const uint8_t *buf)
9182                     ; 1760 {
9183                     .text:	section	.text,new
9184  e3bf               ___mqtt_unpack_uint16:
9186  e3bf 89            	pushw	x
9187  e3c0 89            	pushw	x
9188       00000002      OFST:	set	2
9191                     ; 1762   memcpy(&integer_htons, buf, 2);
9193  e3c1 96            	ldw	x,sp
9194  e3c2 5c            	incw	x
9195  e3c3 bf04          	ldw	c_x,x
9196  e3c5 1603          	ldw	y,(OFST+1,sp)
9197  e3c7 90bf07        	ldw	c_y,y
9198  e3ca ae0002        	ldw	x,#2
9199  e3cd               L226:
9200  e3cd 5a            	decw	x
9201  e3ce 92d607        	ld	a,([c_y.w],x)
9202  e3d1 92d704        	ld	([c_x.w],x),a
9203  e3d4 5d            	tnzw	x
9204  e3d5 26f6          	jrne	L226
9205                     ; 1763   return HTONS(integer_htons);
9207  e3d7 1e01          	ldw	x,(OFST-1,sp)
9210  e3d9 5b04          	addw	sp,#4
9211  e3db 81            	ret	
9272                     ; 1767 int16_t __mqtt_pack_str(uint8_t *buf, const char* str)
9272                     ; 1768 {
9273                     .text:	section	.text,new
9274  e3dc               ___mqtt_pack_str:
9276  e3dc 89            	pushw	x
9277  e3dd 5204          	subw	sp,#4
9278       00000004      OFST:	set	4
9281                     ; 1769     uint16_t length = (uint16_t)strlen(str);
9283  e3df 1e09          	ldw	x,(OFST+5,sp)
9284  e3e1 cdf660        	call	_strlen
9286  e3e4 1f01          	ldw	(OFST-3,sp),x
9288                     ; 1770     int16_t i = 0;
9290  e3e6 5f            	clrw	x
9291  e3e7 1f03          	ldw	(OFST-1,sp),x
9293                     ; 1772     buf += __mqtt_pack_uint16(buf, length);
9295  e3e9 1e01          	ldw	x,(OFST-3,sp)
9296  e3eb 89            	pushw	x
9297  e3ec 1e07          	ldw	x,(OFST+3,sp)
9298  e3ee cde39b        	call	___mqtt_pack_uint16
9300  e3f1 5b02          	addw	sp,#2
9301  e3f3 72fb05        	addw	x,(OFST+1,sp)
9302  e3f6 1f05          	ldw	(OFST+1,sp),x
9304  e3f8 1e03          	ldw	x,(OFST-1,sp)
9305  e3fa 200f          	jra	L3104
9306  e3fc               L7004:
9307                     ; 1775     for(; i < length; ++i) *(buf++) = str[i];
9309  e3fc 72fb09        	addw	x,(OFST+5,sp)
9310  e3ff f6            	ld	a,(x)
9311  e400 1e05          	ldw	x,(OFST+1,sp)
9312  e402 f7            	ld	(x),a
9313  e403 5c            	incw	x
9314  e404 1f05          	ldw	(OFST+1,sp),x
9317  e406 1e03          	ldw	x,(OFST-1,sp)
9318  e408 5c            	incw	x
9319  e409 1f03          	ldw	(OFST-1,sp),x
9321  e40b               L3104:
9324  e40b 1301          	cpw	x,(OFST-3,sp)
9325  e40d 25ed          	jrult	L7004
9326                     ; 1778     return length + 2;
9328  e40f 1e01          	ldw	x,(OFST-3,sp)
9329  e411 1c0002        	addw	x,#2
9332  e414 5b06          	addw	sp,#6
9333  e416 81            	ret	
9397                     	switch	.bss
9398  016f               _mqtt_sendbuf:
9399  016f 000000000000  	ds.b	300
9400                     	xdef	_mqtt_sendbuf
9401  029b               _MQTT_error_status:
9402  029b 00            	ds.b	1
9403                     	xdef	_MQTT_error_status
9404                     	xref	_second_counter
9405                     	xref	_uip_flags
9406                     	xref	_uip_len
9407                     	xdef	_mqtt_disconnect
9408                     	xdef	___mqtt_ping
9409                     	xdef	_mqtt_ping
9410                     	xdef	_mqtt_unsubscribe
9411                     	xdef	_mqtt_subscribe
9412                     	xdef	___mqtt_pubcomp
9413                     	xdef	___mqtt_pubrel
9414                     	xdef	___mqtt_pubrec
9415                     	xdef	___mqtt_puback
9416                     	xdef	_mqtt_publish
9417                     	xdef	_mqtt_connect
9418                     	xdef	_mqtt_init
9419                     	xdef	_mqtt_sync
9420                     	xdef	___mqtt_recv
9421                     	xdef	___mqtt_send
9422                     	xdef	___mqtt_next_pid
9423                     	xdef	_mqtt_mq_find
9424                     	xdef	_mqtt_mq_register
9425                     	xdef	_mqtt_mq_clean
9426                     	xdef	_mqtt_mq_init
9427                     	xdef	_mqtt_pack_disconnect
9428                     	xdef	_mqtt_pack_ping_request
9429                     	xdef	_mqtt_pack_unsubscribe_request
9430                     	xdef	_mqtt_pack_subscribe_request
9431                     	xdef	_mqtt_pack_pubxxx_request
9432                     	xdef	_mqtt_pack_publish_request
9433                     	xdef	_mqtt_pack_connection_request
9434                     	xdef	_mqtt_pack_fixed_header
9435                     	xdef	_mqtt_unpack_response
9436                     	xdef	_mqtt_unpack_unsuback_response
9437                     	xdef	_mqtt_unpack_suback_response
9438                     	xdef	_mqtt_unpack_pubxxx_response
9439                     	xdef	_mqtt_unpack_publish_response
9440                     	xdef	_mqtt_unpack_connack_response
9441                     	xdef	_mqtt_unpack_fixed_header
9442                     	xdef	___mqtt_pack_str
9443                     	xdef	___mqtt_unpack_uint16
9444                     	xdef	___mqtt_pack_uint16
9445                     	xref	_mqtt_pal_recvall
9446                     	xref	_mqtt_pal_sendall
9447                     	xref	_memmove
9448                     	xref	_strlen
9449                     	switch	.const
9450  9f09               L5051:
9451  9f09 3f400000      	dc.w	16192,0
9452                     	xref.b	c_lreg
9453                     	xref.b	c_x
9454                     	xref.b	c_y
9474                     	xref	c_lgsbc
9475                     	xref	c_lgadc
9476                     	xref	c_lgursh
9477                     	xref	c_uitolx
9478                     	xref	c_lgadd
9479                     	xref	c_itoly
9480                     	xref	c_ltor
9481                     	xref	c_rtol
9482                     	xref	c_ftol
9483                     	xref	c_fmul
9484                     	xref	c_uitof
9485                     	xref	c_lcmp
9486                     	xref	c_ladd
9487                     	xref	c_itolx
9488                     	xref	c_bmulx
9489                     	xref	c_bmuly
9490                     	xref	c_sdivx
9491                     	end
