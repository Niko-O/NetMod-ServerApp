   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
 508                     ; 77 int16_t mqtt_sync(struct mqtt_client *client)
 508                     ; 78 {
 510                     .text:	section	.text,new
 511  cfa0               _mqtt_sync:
 513  cfa0 89            	pushw	x
 514  cfa1 89            	pushw	x
 515       00000002      OFST:	set	2
 518                     ; 86     if ((uip_newdata() || uip_acked()) && uip_len > 0) {
 520  cfa2 720202c405    	btjt	_uip_flags,#1,L172
 522  cfa7 720102c411    	btjf	_uip_flags,#0,L762
 523  cfac               L172:
 525  cfac ce036f        	ldw	x,_uip_len
 526  cfaf 270c          	jreq	L762
 527                     ; 87       err = __mqtt_recv(client);
 529  cfb1 1e03          	ldw	x,(OFST+1,sp)
 530  cfb3 cdd6c6        	call	___mqtt_recv
 532  cfb6 1f01          	ldw	(OFST-1,sp),x
 534                     ; 88       if (err != MQTT_OK) {
 536  cfb8 a30001        	cpw	x,#1
 537                     ; 89         return err;
 540  cfbb 2616          	jrne	L772
 541  cfbd               L762:
 542                     ; 98     err = __mqtt_send(client);
 544  cfbd 1e03          	ldw	x,(OFST+1,sp)
 545  cfbf cdd4e6        	call	___mqtt_send
 547  cfc2 1f01          	ldw	(OFST-1,sp),x
 549                     ; 101     if (err == MQTT_OK) {
 551  cfc4 a30001        	cpw	x,#1
 552  cfc7 2606          	jrne	L572
 553                     ; 102       MQTT_error_status = 1;
 555  cfc9 3501029b      	mov	_MQTT_error_status,#1
 557  cfcd 2004          	jra	L772
 558  cfcf               L572:
 559                     ; 104     else MQTT_error_status = 0;
 561  cfcf 725f029b      	clr	_MQTT_error_status
 562  cfd3               L772:
 563                     ; 105     return err;
 567  cfd3 5b04          	addw	sp,#4
 568  cfd5 81            	ret	
 631                     ; 109 uint16_t __mqtt_next_pid(struct mqtt_client *client)
 631                     ; 110 {
 632                     .text:	section	.text,new
 633  cfd6               ___mqtt_next_pid:
 635  cfd6 89            	pushw	x
 636  cfd7 5204          	subw	sp,#4
 637       00000004      OFST:	set	4
 640                     ; 112     int16_t pid_exists = 0;
 642                     ; 113     if (client->pid_lfsr == 0) client->pid_lfsr = 163u;
 644  cfd9 e601          	ld	a,(1,x)
 645  cfdb fa            	or	a,(x)
 646  cfdc 2605          	jrne	L533
 649  cfde 90ae00a3      	ldw	y,#163
 650  cfe2 ff            	ldw	(x),y
 651  cfe3               L533:
 652                     ; 119         unsigned lsb = client->pid_lfsr & 1;
 654  cfe3 1e05          	ldw	x,(OFST+1,sp)
 655  cfe5 fe            	ldw	x,(x)
 656  cfe6 01            	rrwa	x,a
 657  cfe7 a401          	and	a,#1
 658  cfe9 5f            	clrw	x
 659  cfea 02            	rlwa	x,a
 660  cfeb 1f03          	ldw	(OFST-1,sp),x
 661  cfed 01            	rrwa	x,a
 663                     ; 120         (client->pid_lfsr) >>= 1;
 665  cfee 1e05          	ldw	x,(OFST+1,sp)
 666  cff0 74            	srl	(x)
 667  cff1 6601          	rrc	(1,x)
 668                     ; 121         if (lsb) client->pid_lfsr ^= 0xB400u;
 670  cff3 1e03          	ldw	x,(OFST-1,sp)
 671  cff5 2706          	jreq	L343
 674  cff7 1e05          	ldw	x,(OFST+1,sp)
 675  cff9 f6            	ld	a,(x)
 676  cffa a8b4          	xor	a,#180
 677  cffc f7            	ld	(x),a
 678  cffd               L343:
 679                     ; 124         pid_exists = 0;
 681  cffd 5f            	clrw	x
 682  cffe 1f03          	ldw	(OFST-1,sp),x
 684                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 686  d000 1e05          	ldw	x,(OFST+1,sp)
 687  d002 ee24          	ldw	x,(36,x)
 689  d004 201b          	jra	L153
 690  d006               L543:
 691                     ; 126             if (curr->packet_id == client->pid_lfsr) {
 693  d006 1e01          	ldw	x,(OFST-3,sp)
 694  d008 1605          	ldw	y,(OFST+1,sp)
 695  d00a ee0a          	ldw	x,(10,x)
 696  d00c 90f3          	cpw	x,(y)
 697  d00e 260f          	jrne	L553
 698                     ; 127                 pid_exists = 1;
 700  d010 ae0001        	ldw	x,#1
 701  d013 1f03          	ldw	(OFST-1,sp),x
 703                     ; 128                 break;
 704  d015               L733:
 705                     ; 132     } while(pid_exists);
 707  d015 1e03          	ldw	x,(OFST-1,sp)
 708  d017 26ca          	jrne	L533
 709                     ; 134     return client->pid_lfsr;
 711  d019 1e05          	ldw	x,(OFST+1,sp)
 712  d01b fe            	ldw	x,(x)
 715  d01c 5b06          	addw	sp,#6
 716  d01e 81            	ret	
 717  d01f               L553:
 718                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 720  d01f 1e01          	ldw	x,(OFST-3,sp)
 721  d021               L153:
 722  d021 1d000c        	subw	x,#12
 723  d024 1f01          	ldw	(OFST-3,sp),x
 727  d026 1e05          	ldw	x,(OFST+1,sp)
 728  d028 ee2a          	ldw	x,(42,x)
 729  d02a 1301          	cpw	x,(OFST-3,sp)
 730  d02c 23d8          	jrule	L543
 731  d02e 20e5          	jra	L733
 815                     ; 138 int16_t mqtt_init(struct mqtt_client *client,
 815                     ; 139                uint8_t *sendbuf, uint16_t sendbufsz,
 815                     ; 140                uint8_t *recvbuf, uint16_t recvbufsz,
 815                     ; 141                void (*publish_response_callback)(void** state,struct mqtt_response_publish *publish))
 815                     ; 142 {
 816                     .text:	section	.text,new
 817  d030               _mqtt_init:
 819  d030 89            	pushw	x
 820       00000000      OFST:	set	0
 823                     ; 143     if (client == NULL || sendbuf == NULL || recvbuf == NULL) {
 825  d031 5d            	tnzw	x
 826  d032 2708          	jreq	L124
 828  d034 1e05          	ldw	x,(OFST+5,sp)
 829  d036 2704          	jreq	L124
 831  d038 1e09          	ldw	x,(OFST+9,sp)
 832  d03a 2605          	jrne	L714
 833  d03c               L124:
 834                     ; 144       return MQTT_ERROR_NULLPTR;
 836  d03c ae8001        	ldw	x,#32769
 838  d03f 2044          	jra	L22
 839  d041               L714:
 840                     ; 147     mqtt_mq_init(&client->mq, sendbuf, sendbufsz);
 842  d041 1e07          	ldw	x,(OFST+7,sp)
 843  d043 89            	pushw	x
 844  d044 1e07          	ldw	x,(OFST+7,sp)
 845  d046 89            	pushw	x
 846  d047 1e05          	ldw	x,(OFST+5,sp)
 847  d049 1c0022        	addw	x,#34
 848  d04c cde0f7        	call	_mqtt_mq_init
 850  d04f 5b04          	addw	sp,#4
 851                     ; 149     client->recv_buffer.mem_start = recvbuf;
 853  d051 1e01          	ldw	x,(OFST+1,sp)
 854  d053 1609          	ldw	y,(OFST+9,sp)
 855  d055 ef1a          	ldw	(26,x),y
 856                     ; 150     client->recv_buffer.mem_size = recvbufsz;
 858  d057 160b          	ldw	y,(OFST+11,sp)
 859  d059 ef1c          	ldw	(28,x),y
 860                     ; 151     client->recv_buffer.curr = client->recv_buffer.mem_start;
 862  d05b 9093          	ldw	y,x
 863  d05d 90ee1a        	ldw	y,(26,y)
 864  d060 ef1e          	ldw	(30,x),y
 865                     ; 152     client->recv_buffer.curr_sz = client->recv_buffer.mem_size;
 867  d062 9093          	ldw	y,x
 868  d064 90ee1c        	ldw	y,(28,y)
 869  d067 ef20          	ldw	(32,x),y
 870                     ; 154     client->error = MQTT_ERROR_CONNECT_NOT_CALLED;
 872  d069 90ae800f      	ldw	y,#32783
 873  d06d ef0a          	ldw	(10,x),y
 874                     ; 155     client->response_timeout = 30;
 876  d06f 90ae001e      	ldw	y,#30
 877  d073 ef0c          	ldw	(12,x),y
 878                     ; 156     client->number_of_timeouts = 0;
 880  d075 905f          	clrw	y
 881  d077 ef0e          	ldw	(14,x),y
 882                     ; 157     client->publish_response_callback = publish_response_callback;
 884  d079 160d          	ldw	y,(OFST+13,sp)
 885  d07b ef10          	ldw	(16,x),y
 886                     ; 158     client->pid_lfsr = 0;
 888  d07d 905f          	clrw	y
 889  d07f ff            	ldw	(x),y
 890                     ; 159     client->send_offset = 0;
 892  d080 ef04          	ldw	(4,x),y
 893                     ; 161     return MQTT_OK;
 895  d082 ae0001        	ldw	x,#1
 897  d085               L22:
 899  d085 5b02          	addw	sp,#2
 900  d087 81            	ret	
1030                     ; 228 int16_t mqtt_connect(struct mqtt_client *client,
1030                     ; 229                      const char* client_id,
1030                     ; 230                      const char* will_topic,
1030                     ; 231                      const void* will_message,
1030                     ; 232                      uint16_t will_message_size,
1030                     ; 233                      const char* user_name,
1030                     ; 234                      const char* password,
1030                     ; 235                      uint8_t connect_flags,
1030                     ; 236                      uint16_t keep_alive)
1030                     ; 237 {
1031                     .text:	section	.text,new
1032  d088               _mqtt_connect:
1034  d088 89            	pushw	x
1035  d089 89            	pushw	x
1036       00000002      OFST:	set	2
1039                     ; 242     client->keep_alive = keep_alive;
1041  d08a 1614          	ldw	y,(OFST+18,sp)
1042  d08c ef02          	ldw	(2,x),y
1043                     ; 244     if (client->error == MQTT_ERROR_CONNECT_NOT_CALLED) {
1045  d08e 9093          	ldw	y,x
1046  d090 90ee0a        	ldw	y,(10,y)
1047  d093 90a3800f      	cpw	y,#32783
1048  d097 2606          	jrne	L705
1049                     ; 245         client->error = MQTT_OK;
1051  d099 90ae0001      	ldw	y,#1
1052  d09d ef0a          	ldw	(10,x),y
1053  d09f               L705:
1054                     ; 249     MQTT_CLIENT_TRY_PACK(rv, msg, client, 
1056  d09f e60a          	ld	a,(10,x)
1057  d0a1 2a04          	jrpl	L115
1060  d0a3 ee0a          	ldw	x,(10,x)
1062  d0a5 2031          	jra	L63
1063  d0a7               L115:
1066  d0a7 1e14          	ldw	x,(OFST+18,sp)
1067  d0a9 89            	pushw	x
1068  d0aa 7b15          	ld	a,(OFST+19,sp)
1069  d0ac 88            	push	a
1070  d0ad 1e14          	ldw	x,(OFST+18,sp)
1071  d0af 89            	pushw	x
1072  d0b0 1e14          	ldw	x,(OFST+18,sp)
1073  d0b2 89            	pushw	x
1074  d0b3 1e14          	ldw	x,(OFST+18,sp)
1075  d0b5 89            	pushw	x
1076  d0b6 1e14          	ldw	x,(OFST+18,sp)
1077  d0b8 89            	pushw	x
1078  d0b9 1e14          	ldw	x,(OFST+18,sp)
1079  d0bb 89            	pushw	x
1080  d0bc 1e14          	ldw	x,(OFST+18,sp)
1081  d0be 89            	pushw	x
1082  d0bf 1e12          	ldw	x,(OFST+16,sp)
1083  d0c1 ee28          	ldw	x,(40,x)
1084  d0c3 89            	pushw	x
1085  d0c4 1e14          	ldw	x,(OFST+18,sp)
1086  d0c6 ee26          	ldw	x,(38,x)
1087  d0c8 cddb0f        	call	_mqtt_pack_connection_request
1089  d0cb 5b11          	addw	sp,#17
1090  d0cd 1f01          	ldw	(OFST-1,sp),x
1094  d0cf 2a0a          	jrpl	L315
1099  d0d1               LC001:
1101  d0d1 1e03          	ldw	x,(OFST+1,sp)
1102  d0d3 1601          	ldw	y,(OFST-1,sp)
1103  d0d5 ef0a          	ldw	(10,x),y
1105  d0d7 93            	ldw	x,y
1107  d0d8               L63:
1109  d0d8 5b04          	addw	sp,#4
1110  d0da 81            	ret	
1111  d0db               L315:
1114  d0db 2641          	jrne	L515
1117  d0dd 1e03          	ldw	x,(OFST+1,sp)
1118  d0df 1c0022        	addw	x,#34
1119  d0e2 cde1ad        	call	_mqtt_mq_clean
1123  d0e5 1e14          	ldw	x,(OFST+18,sp)
1124  d0e7 89            	pushw	x
1125  d0e8 7b15          	ld	a,(OFST+19,sp)
1126  d0ea 88            	push	a
1127  d0eb 1e14          	ldw	x,(OFST+18,sp)
1128  d0ed 89            	pushw	x
1129  d0ee 1e14          	ldw	x,(OFST+18,sp)
1130  d0f0 89            	pushw	x
1131  d0f1 1e14          	ldw	x,(OFST+18,sp)
1132  d0f3 89            	pushw	x
1133  d0f4 1e14          	ldw	x,(OFST+18,sp)
1134  d0f6 89            	pushw	x
1135  d0f7 1e14          	ldw	x,(OFST+18,sp)
1136  d0f9 89            	pushw	x
1137  d0fa 1e14          	ldw	x,(OFST+18,sp)
1138  d0fc 89            	pushw	x
1139  d0fd 1e12          	ldw	x,(OFST+16,sp)
1140  d0ff ee28          	ldw	x,(40,x)
1141  d101 89            	pushw	x
1142  d102 1e14          	ldw	x,(OFST+18,sp)
1143  d104 ee26          	ldw	x,(38,x)
1144  d106 cddb0f        	call	_mqtt_pack_connection_request
1146  d109 5b11          	addw	sp,#17
1147  d10b 1f01          	ldw	(OFST-1,sp),x
1154  d10d 2bc2          	jrmi	LC001
1157  d10f 260d          	jrne	L515
1160  d111 1e03          	ldw	x,(OFST+1,sp)
1161  d113 90ae8010      	ldw	y,#32784
1162  d117 ef0a          	ldw	(10,x),y
1165  d119 ae8010        	ldw	x,#32784
1167  d11c 20ba          	jra	L63
1168  d11e               L515:
1171  d11e 89            	pushw	x
1172  d11f 1e05          	ldw	x,(OFST+3,sp)
1173  d121 1c0022        	addw	x,#34
1174  d124 cde146        	call	_mqtt_mq_register
1176  d127 5b02          	addw	sp,#2
1178                     ; 266     msg->control_type = MQTT_CONTROL_CONNECT;
1181  d129 a601          	ld	a,#1
1182  d12b e709          	ld	(9,x),a
1183                     ; 268     return MQTT_OK;
1185  d12d ae0001        	ldw	x,#1
1187  d130 20a6          	jra	L63
1290                     ; 272 int16_t mqtt_publish(struct mqtt_client *client,
1290                     ; 273                      const char* topic_name,
1290                     ; 274                      const void* application_message,
1290                     ; 275                      uint16_t application_message_size,
1290                     ; 276                      uint8_t publish_flags)
1290                     ; 277 {
1291                     .text:	section	.text,new
1292  d132               _mqtt_publish:
1294  d132 89            	pushw	x
1295  d133 5204          	subw	sp,#4
1296       00000004      OFST:	set	4
1299                     ; 281     packet_id = __mqtt_next_pid(client);
1301  d135 cdcfd6        	call	___mqtt_next_pid
1303  d138 1f01          	ldw	(OFST-3,sp),x
1305                     ; 284     MQTT_CLIENT_TRY_PACK(
1307  d13a 1e05          	ldw	x,(OFST+1,sp)
1308  d13c e60a          	ld	a,(10,x)
1309  d13e 2a04          	jrpl	L575
1312  d140 ee0a          	ldw	x,(10,x)
1314  d142 2028          	jra	L45
1315  d144               L575:
1318  d144 7b0f          	ld	a,(OFST+11,sp)
1319  d146 88            	push	a
1320  d147 1e0e          	ldw	x,(OFST+10,sp)
1321  d149 89            	pushw	x
1322  d14a 1e0e          	ldw	x,(OFST+10,sp)
1323  d14c 89            	pushw	x
1324  d14d 1e06          	ldw	x,(OFST+2,sp)
1325  d14f 89            	pushw	x
1326  d150 1e10          	ldw	x,(OFST+12,sp)
1327  d152 89            	pushw	x
1328  d153 1e0e          	ldw	x,(OFST+10,sp)
1329  d155 ee28          	ldw	x,(40,x)
1330  d157 89            	pushw	x
1331  d158 1e10          	ldw	x,(OFST+12,sp)
1332  d15a ee26          	ldw	x,(38,x)
1333  d15c cddd09        	call	_mqtt_pack_publish_request
1335  d15f 5b0b          	addw	sp,#11
1336  d161 1f03          	ldw	(OFST-1,sp),x
1340  d163 2a0a          	jrpl	L775
1345  d165               LC002:
1347  d165 1e05          	ldw	x,(OFST+1,sp)
1348  d167 1603          	ldw	y,(OFST-1,sp)
1349  d169 ef0a          	ldw	(10,x),y
1351  d16b 93            	ldw	x,y
1353  d16c               L45:
1355  d16c 5b06          	addw	sp,#6
1356  d16e 81            	ret	
1357  d16f               L775:
1360  d16f 2638          	jrne	L106
1363  d171 1e05          	ldw	x,(OFST+1,sp)
1364  d173 1c0022        	addw	x,#34
1365  d176 cde1ad        	call	_mqtt_mq_clean
1369  d179 7b0f          	ld	a,(OFST+11,sp)
1370  d17b 88            	push	a
1371  d17c 1e0e          	ldw	x,(OFST+10,sp)
1372  d17e 89            	pushw	x
1373  d17f 1e0e          	ldw	x,(OFST+10,sp)
1374  d181 89            	pushw	x
1375  d182 1e06          	ldw	x,(OFST+2,sp)
1376  d184 89            	pushw	x
1377  d185 1e10          	ldw	x,(OFST+12,sp)
1378  d187 89            	pushw	x
1379  d188 1e0e          	ldw	x,(OFST+10,sp)
1380  d18a ee28          	ldw	x,(40,x)
1381  d18c 89            	pushw	x
1382  d18d 1e10          	ldw	x,(OFST+12,sp)
1383  d18f ee26          	ldw	x,(38,x)
1384  d191 cddd09        	call	_mqtt_pack_publish_request
1386  d194 5b0b          	addw	sp,#11
1387  d196 1f03          	ldw	(OFST-1,sp),x
1394  d198 2bcb          	jrmi	LC002
1397  d19a 260d          	jrne	L106
1400  d19c 1e05          	ldw	x,(OFST+1,sp)
1401  d19e 90ae8010      	ldw	y,#32784
1402  d1a2 ef0a          	ldw	(10,x),y
1405  d1a4 ae8010        	ldw	x,#32784
1407  d1a7 20c3          	jra	L45
1408  d1a9               L106:
1411  d1a9 89            	pushw	x
1412  d1aa 1e07          	ldw	x,(OFST+3,sp)
1413  d1ac 1c0022        	addw	x,#34
1414  d1af cde146        	call	_mqtt_mq_register
1416  d1b2 5b02          	addw	sp,#2
1417  d1b4 1f03          	ldw	(OFST-1,sp),x
1419                     ; 298     msg->control_type = MQTT_CONTROL_PUBLISH;
1422  d1b6 a603          	ld	a,#3
1423  d1b8 e709          	ld	(9,x),a
1424                     ; 299     msg->packet_id = packet_id;
1426  d1ba 1601          	ldw	y,(OFST-3,sp)
1427  d1bc ef0a          	ldw	(10,x),y
1428                     ; 301     return MQTT_OK;
1430  d1be ae0001        	ldw	x,#1
1432  d1c1 20a9          	jra	L45
1498                     ; 305 int16_t __mqtt_puback(struct mqtt_client *client, uint16_t packet_id) {
1499                     .text:	section	.text,new
1500  d1c3               ___mqtt_puback:
1502  d1c3 89            	pushw	x
1503  d1c4 89            	pushw	x
1504       00000002      OFST:	set	2
1507                     ; 310     MQTT_CLIENT_TRY_PACK(
1509  d1c5 e60a          	ld	a,(10,x)
1510  d1c7 2a04          	jrpl	L546
1513  d1c9 ee0a          	ldw	x,(10,x)
1515  d1cb 201e          	jra	L07
1516  d1cd               L546:
1519  d1cd 1e07          	ldw	x,(OFST+5,sp)
1520  d1cf 89            	pushw	x
1521  d1d0 4b04          	push	#4
1522  d1d2 1e06          	ldw	x,(OFST+4,sp)
1523  d1d4 ee28          	ldw	x,(40,x)
1524  d1d6 89            	pushw	x
1525  d1d7 1e08          	ldw	x,(OFST+6,sp)
1526  d1d9 ee26          	ldw	x,(38,x)
1527  d1db cddea5        	call	_mqtt_pack_pubxxx_request
1529  d1de 5b05          	addw	sp,#5
1530  d1e0 1f01          	ldw	(OFST-1,sp),x
1534  d1e2 2a0a          	jrpl	L746
1539  d1e4               LC003:
1541  d1e4 1e03          	ldw	x,(OFST+1,sp)
1542  d1e6 1601          	ldw	y,(OFST-1,sp)
1543  d1e8 ef0a          	ldw	(10,x),y
1545  d1ea 93            	ldw	x,y
1547  d1eb               L07:
1549  d1eb 5b04          	addw	sp,#4
1550  d1ed 81            	ret	
1551  d1ee               L746:
1554  d1ee 262e          	jrne	L156
1557  d1f0 1e03          	ldw	x,(OFST+1,sp)
1558  d1f2 1c0022        	addw	x,#34
1559  d1f5 cde1ad        	call	_mqtt_mq_clean
1563  d1f8 1e07          	ldw	x,(OFST+5,sp)
1564  d1fa 89            	pushw	x
1565  d1fb 4b04          	push	#4
1566  d1fd 1e06          	ldw	x,(OFST+4,sp)
1567  d1ff ee28          	ldw	x,(40,x)
1568  d201 89            	pushw	x
1569  d202 1e08          	ldw	x,(OFST+6,sp)
1570  d204 ee26          	ldw	x,(38,x)
1571  d206 cddea5        	call	_mqtt_pack_pubxxx_request
1573  d209 5b05          	addw	sp,#5
1574  d20b 1f01          	ldw	(OFST-1,sp),x
1581  d20d 2bd5          	jrmi	LC003
1584  d20f 260d          	jrne	L156
1587  d211 1e03          	ldw	x,(OFST+1,sp)
1588  d213 90ae8010      	ldw	y,#32784
1589  d217 ef0a          	ldw	(10,x),y
1592  d219 ae8010        	ldw	x,#32784
1594  d21c 20cd          	jra	L07
1595  d21e               L156:
1598  d21e 89            	pushw	x
1599  d21f 1e05          	ldw	x,(OFST+3,sp)
1600  d221 1c0022        	addw	x,#34
1601  d224 cde146        	call	_mqtt_mq_register
1603  d227 5b02          	addw	sp,#2
1604  d229 1f01          	ldw	(OFST-1,sp),x
1606                     ; 321     msg->control_type = MQTT_CONTROL_PUBACK;
1609  d22b a604          	ld	a,#4
1610  d22d e709          	ld	(9,x),a
1611                     ; 322     msg->packet_id = packet_id;
1613  d22f 1607          	ldw	y,(OFST+5,sp)
1614  d231 ef0a          	ldw	(10,x),y
1615                     ; 324     return MQTT_OK;
1617  d233 ae0001        	ldw	x,#1
1619  d236 20b3          	jra	L07
1685                     ; 328 int16_t __mqtt_pubrec(struct mqtt_client *client, uint16_t packet_id)
1685                     ; 329 {
1686                     .text:	section	.text,new
1687  d238               ___mqtt_pubrec:
1689  d238 89            	pushw	x
1690  d239 89            	pushw	x
1691       00000002      OFST:	set	2
1694                     ; 334     MQTT_CLIENT_TRY_PACK(
1696  d23a e60a          	ld	a,(10,x)
1697  d23c 2a04          	jrpl	L517
1700  d23e ee0a          	ldw	x,(10,x)
1702  d240 201e          	jra	L401
1703  d242               L517:
1706  d242 1e07          	ldw	x,(OFST+5,sp)
1707  d244 89            	pushw	x
1708  d245 4b05          	push	#5
1709  d247 1e06          	ldw	x,(OFST+4,sp)
1710  d249 ee28          	ldw	x,(40,x)
1711  d24b 89            	pushw	x
1712  d24c 1e08          	ldw	x,(OFST+6,sp)
1713  d24e ee26          	ldw	x,(38,x)
1714  d250 cddea5        	call	_mqtt_pack_pubxxx_request
1716  d253 5b05          	addw	sp,#5
1717  d255 1f01          	ldw	(OFST-1,sp),x
1721  d257 2a0a          	jrpl	L717
1726  d259               LC004:
1728  d259 1e03          	ldw	x,(OFST+1,sp)
1729  d25b 1601          	ldw	y,(OFST-1,sp)
1730  d25d ef0a          	ldw	(10,x),y
1732  d25f 93            	ldw	x,y
1734  d260               L401:
1736  d260 5b04          	addw	sp,#4
1737  d262 81            	ret	
1738  d263               L717:
1741  d263 262e          	jrne	L127
1744  d265 1e03          	ldw	x,(OFST+1,sp)
1745  d267 1c0022        	addw	x,#34
1746  d26a cde1ad        	call	_mqtt_mq_clean
1750  d26d 1e07          	ldw	x,(OFST+5,sp)
1751  d26f 89            	pushw	x
1752  d270 4b05          	push	#5
1753  d272 1e06          	ldw	x,(OFST+4,sp)
1754  d274 ee28          	ldw	x,(40,x)
1755  d276 89            	pushw	x
1756  d277 1e08          	ldw	x,(OFST+6,sp)
1757  d279 ee26          	ldw	x,(38,x)
1758  d27b cddea5        	call	_mqtt_pack_pubxxx_request
1760  d27e 5b05          	addw	sp,#5
1761  d280 1f01          	ldw	(OFST-1,sp),x
1768  d282 2bd5          	jrmi	LC004
1771  d284 260d          	jrne	L127
1774  d286 1e03          	ldw	x,(OFST+1,sp)
1775  d288 90ae8010      	ldw	y,#32784
1776  d28c ef0a          	ldw	(10,x),y
1779  d28e ae8010        	ldw	x,#32784
1781  d291 20cd          	jra	L401
1782  d293               L127:
1785  d293 89            	pushw	x
1786  d294 1e05          	ldw	x,(OFST+3,sp)
1787  d296 1c0022        	addw	x,#34
1788  d299 cde146        	call	_mqtt_mq_register
1790  d29c 5b02          	addw	sp,#2
1791  d29e 1f01          	ldw	(OFST-1,sp),x
1793                     ; 345     msg->control_type = MQTT_CONTROL_PUBREC;
1796  d2a0 a605          	ld	a,#5
1797  d2a2 e709          	ld	(9,x),a
1798                     ; 346     msg->packet_id = packet_id;
1800  d2a4 1607          	ldw	y,(OFST+5,sp)
1801  d2a6 ef0a          	ldw	(10,x),y
1802                     ; 348     return MQTT_OK;
1804  d2a8 ae0001        	ldw	x,#1
1806  d2ab 20b3          	jra	L401
1872                     ; 352 int16_t __mqtt_pubrel(struct mqtt_client *client, uint16_t packet_id)
1872                     ; 353 {
1873                     .text:	section	.text,new
1874  d2ad               ___mqtt_pubrel:
1876  d2ad 89            	pushw	x
1877  d2ae 89            	pushw	x
1878       00000002      OFST:	set	2
1881                     ; 358     MQTT_CLIENT_TRY_PACK(
1883  d2af e60a          	ld	a,(10,x)
1884  d2b1 2a04          	jrpl	L567
1887  d2b3 ee0a          	ldw	x,(10,x)
1889  d2b5 201e          	jra	L021
1890  d2b7               L567:
1893  d2b7 1e07          	ldw	x,(OFST+5,sp)
1894  d2b9 89            	pushw	x
1895  d2ba 4b06          	push	#6
1896  d2bc 1e06          	ldw	x,(OFST+4,sp)
1897  d2be ee28          	ldw	x,(40,x)
1898  d2c0 89            	pushw	x
1899  d2c1 1e08          	ldw	x,(OFST+6,sp)
1900  d2c3 ee26          	ldw	x,(38,x)
1901  d2c5 cddea5        	call	_mqtt_pack_pubxxx_request
1903  d2c8 5b05          	addw	sp,#5
1904  d2ca 1f01          	ldw	(OFST-1,sp),x
1908  d2cc 2a0a          	jrpl	L767
1913  d2ce               LC005:
1915  d2ce 1e03          	ldw	x,(OFST+1,sp)
1916  d2d0 1601          	ldw	y,(OFST-1,sp)
1917  d2d2 ef0a          	ldw	(10,x),y
1919  d2d4 93            	ldw	x,y
1921  d2d5               L021:
1923  d2d5 5b04          	addw	sp,#4
1924  d2d7 81            	ret	
1925  d2d8               L767:
1928  d2d8 262e          	jrne	L177
1931  d2da 1e03          	ldw	x,(OFST+1,sp)
1932  d2dc 1c0022        	addw	x,#34
1933  d2df cde1ad        	call	_mqtt_mq_clean
1937  d2e2 1e07          	ldw	x,(OFST+5,sp)
1938  d2e4 89            	pushw	x
1939  d2e5 4b06          	push	#6
1940  d2e7 1e06          	ldw	x,(OFST+4,sp)
1941  d2e9 ee28          	ldw	x,(40,x)
1942  d2eb 89            	pushw	x
1943  d2ec 1e08          	ldw	x,(OFST+6,sp)
1944  d2ee ee26          	ldw	x,(38,x)
1945  d2f0 cddea5        	call	_mqtt_pack_pubxxx_request
1947  d2f3 5b05          	addw	sp,#5
1948  d2f5 1f01          	ldw	(OFST-1,sp),x
1955  d2f7 2bd5          	jrmi	LC005
1958  d2f9 260d          	jrne	L177
1961  d2fb 1e03          	ldw	x,(OFST+1,sp)
1962  d2fd 90ae8010      	ldw	y,#32784
1963  d301 ef0a          	ldw	(10,x),y
1966  d303 ae8010        	ldw	x,#32784
1968  d306 20cd          	jra	L021
1969  d308               L177:
1972  d308 89            	pushw	x
1973  d309 1e05          	ldw	x,(OFST+3,sp)
1974  d30b 1c0022        	addw	x,#34
1975  d30e cde146        	call	_mqtt_mq_register
1977  d311 5b02          	addw	sp,#2
1978  d313 1f01          	ldw	(OFST-1,sp),x
1980                     ; 369     msg->control_type = MQTT_CONTROL_PUBREL;
1983  d315 a606          	ld	a,#6
1984  d317 e709          	ld	(9,x),a
1985                     ; 370     msg->packet_id = packet_id;
1987  d319 1607          	ldw	y,(OFST+5,sp)
1988  d31b ef0a          	ldw	(10,x),y
1989                     ; 372     return MQTT_OK;
1991  d31d ae0001        	ldw	x,#1
1993  d320 20b3          	jra	L021
2059                     ; 376 int16_t __mqtt_pubcomp(struct mqtt_client *client, uint16_t packet_id)
2059                     ; 377 {
2060                     .text:	section	.text,new
2061  d322               ___mqtt_pubcomp:
2063  d322 89            	pushw	x
2064  d323 89            	pushw	x
2065       00000002      OFST:	set	2
2068                     ; 382     MQTT_CLIENT_TRY_PACK(
2070  d324 e60a          	ld	a,(10,x)
2071  d326 2a04          	jrpl	L5301
2074  d328 ee0a          	ldw	x,(10,x)
2076  d32a 201e          	jra	L431
2077  d32c               L5301:
2080  d32c 1e07          	ldw	x,(OFST+5,sp)
2081  d32e 89            	pushw	x
2082  d32f 4b07          	push	#7
2083  d331 1e06          	ldw	x,(OFST+4,sp)
2084  d333 ee28          	ldw	x,(40,x)
2085  d335 89            	pushw	x
2086  d336 1e08          	ldw	x,(OFST+6,sp)
2087  d338 ee26          	ldw	x,(38,x)
2088  d33a cddea5        	call	_mqtt_pack_pubxxx_request
2090  d33d 5b05          	addw	sp,#5
2091  d33f 1f01          	ldw	(OFST-1,sp),x
2095  d341 2a0a          	jrpl	L7301
2100  d343               LC006:
2102  d343 1e03          	ldw	x,(OFST+1,sp)
2103  d345 1601          	ldw	y,(OFST-1,sp)
2104  d347 ef0a          	ldw	(10,x),y
2106  d349 93            	ldw	x,y
2108  d34a               L431:
2110  d34a 5b04          	addw	sp,#4
2111  d34c 81            	ret	
2112  d34d               L7301:
2115  d34d 262e          	jrne	L1401
2118  d34f 1e03          	ldw	x,(OFST+1,sp)
2119  d351 1c0022        	addw	x,#34
2120  d354 cde1ad        	call	_mqtt_mq_clean
2124  d357 1e07          	ldw	x,(OFST+5,sp)
2125  d359 89            	pushw	x
2126  d35a 4b07          	push	#7
2127  d35c 1e06          	ldw	x,(OFST+4,sp)
2128  d35e ee28          	ldw	x,(40,x)
2129  d360 89            	pushw	x
2130  d361 1e08          	ldw	x,(OFST+6,sp)
2131  d363 ee26          	ldw	x,(38,x)
2132  d365 cddea5        	call	_mqtt_pack_pubxxx_request
2134  d368 5b05          	addw	sp,#5
2135  d36a 1f01          	ldw	(OFST-1,sp),x
2142  d36c 2bd5          	jrmi	LC006
2145  d36e 260d          	jrne	L1401
2148  d370 1e03          	ldw	x,(OFST+1,sp)
2149  d372 90ae8010      	ldw	y,#32784
2150  d376 ef0a          	ldw	(10,x),y
2153  d378 ae8010        	ldw	x,#32784
2155  d37b 20cd          	jra	L431
2156  d37d               L1401:
2159  d37d 89            	pushw	x
2160  d37e 1e05          	ldw	x,(OFST+3,sp)
2161  d380 1c0022        	addw	x,#34
2162  d383 cde146        	call	_mqtt_mq_register
2164  d386 5b02          	addw	sp,#2
2165  d388 1f01          	ldw	(OFST-1,sp),x
2167                     ; 393     msg->control_type = MQTT_CONTROL_PUBCOMP;
2170  d38a a607          	ld	a,#7
2171  d38c e709          	ld	(9,x),a
2172                     ; 394     msg->packet_id = packet_id;
2174  d38e 1607          	ldw	y,(OFST+5,sp)
2175  d390 ef0a          	ldw	(10,x),y
2176                     ; 396     return MQTT_OK;
2178  d392 ae0001        	ldw	x,#1
2180  d395 20b3          	jra	L431
2264                     ; 400 int16_t mqtt_subscribe(struct mqtt_client *client,
2264                     ; 401                        const char* topic_name,
2264                     ; 402                        int16_t max_qos_level)
2264                     ; 403 {
2265                     .text:	section	.text,new
2266  d397               _mqtt_subscribe:
2268  d397 89            	pushw	x
2269  d398 5204          	subw	sp,#4
2270       00000004      OFST:	set	4
2273                     ; 407     packet_id = __mqtt_next_pid(client);
2275  d39a cdcfd6        	call	___mqtt_next_pid
2277  d39d 1f01          	ldw	(OFST-3,sp),x
2279                     ; 410     MQTT_CLIENT_TRY_PACK(
2281  d39f 1e05          	ldw	x,(OFST+1,sp)
2282  d3a1 e60a          	ld	a,(10,x)
2283  d3a3 2a04          	jrpl	L3111
2286  d3a5 ee0a          	ldw	x,(10,x)
2288  d3a7 2024          	jra	L251
2289  d3a9               L3111:
2292  d3a9 5f            	clrw	x
2293  d3aa 89            	pushw	x
2294  d3ab 1e0d          	ldw	x,(OFST+9,sp)
2295  d3ad 89            	pushw	x
2296  d3ae 1e0d          	ldw	x,(OFST+9,sp)
2297  d3b0 89            	pushw	x
2298  d3b1 1e07          	ldw	x,(OFST+3,sp)
2299  d3b3 89            	pushw	x
2300  d3b4 1e0d          	ldw	x,(OFST+9,sp)
2301  d3b6 ee28          	ldw	x,(40,x)
2302  d3b8 89            	pushw	x
2303  d3b9 1e0f          	ldw	x,(OFST+11,sp)
2304  d3bb ee26          	ldw	x,(38,x)
2305  d3bd cddfb1        	call	_mqtt_pack_subscribe_request
2307  d3c0 5b0a          	addw	sp,#10
2308  d3c2 1f03          	ldw	(OFST-1,sp),x
2312  d3c4 2a0a          	jrpl	L5111
2317  d3c6               LC007:
2319  d3c6 1e05          	ldw	x,(OFST+1,sp)
2320  d3c8 1603          	ldw	y,(OFST-1,sp)
2321  d3ca ef0a          	ldw	(10,x),y
2323  d3cc 93            	ldw	x,y
2325  d3cd               L251:
2327  d3cd 5b06          	addw	sp,#6
2328  d3cf 81            	ret	
2329  d3d0               L5111:
2332  d3d0 2634          	jrne	L7111
2335  d3d2 1e05          	ldw	x,(OFST+1,sp)
2336  d3d4 1c0022        	addw	x,#34
2337  d3d7 cde1ad        	call	_mqtt_mq_clean
2341  d3da 5f            	clrw	x
2342  d3db 89            	pushw	x
2343  d3dc 1e0d          	ldw	x,(OFST+9,sp)
2344  d3de 89            	pushw	x
2345  d3df 1e0d          	ldw	x,(OFST+9,sp)
2346  d3e1 89            	pushw	x
2347  d3e2 1e07          	ldw	x,(OFST+3,sp)
2348  d3e4 89            	pushw	x
2349  d3e5 1e0d          	ldw	x,(OFST+9,sp)
2350  d3e7 ee28          	ldw	x,(40,x)
2351  d3e9 89            	pushw	x
2352  d3ea 1e0f          	ldw	x,(OFST+11,sp)
2353  d3ec ee26          	ldw	x,(38,x)
2354  d3ee cddfb1        	call	_mqtt_pack_subscribe_request
2356  d3f1 5b0a          	addw	sp,#10
2357  d3f3 1f03          	ldw	(OFST-1,sp),x
2364  d3f5 2bcf          	jrmi	LC007
2367  d3f7 260d          	jrne	L7111
2370  d3f9 1e05          	ldw	x,(OFST+1,sp)
2371  d3fb 90ae8010      	ldw	y,#32784
2372  d3ff ef0a          	ldw	(10,x),y
2375  d401 ae8010        	ldw	x,#32784
2377  d404 20c7          	jra	L251
2378  d406               L7111:
2381  d406 89            	pushw	x
2382  d407 1e07          	ldw	x,(OFST+3,sp)
2383  d409 1c0022        	addw	x,#34
2384  d40c cde146        	call	_mqtt_mq_register
2386  d40f 5b02          	addw	sp,#2
2387  d411 1f03          	ldw	(OFST-1,sp),x
2389                     ; 423     msg->control_type = MQTT_CONTROL_SUBSCRIBE;
2392  d413 a608          	ld	a,#8
2393  d415 e709          	ld	(9,x),a
2394                     ; 424     msg->packet_id = packet_id;
2396  d417 1601          	ldw	y,(OFST-3,sp)
2397  d419 ef0a          	ldw	(10,x),y
2398                     ; 425     return MQTT_OK;
2400  d41b ae0001        	ldw	x,#1
2402  d41e 20ad          	jra	L251
2479                     ; 429 int16_t mqtt_unsubscribe(struct mqtt_client *client,
2479                     ; 430                          const char* topic_name)
2479                     ; 431 {
2480                     .text:	section	.text,new
2481                     _mqtt_unsubscribe:
2483                     	pushw	x
2484                     	subw	sp,#4
2485       00000004      OFST:	set	4
2488                     ; 432     uint16_t packet_id = __mqtt_next_pid(client);
2490                     	call	___mqtt_next_pid
2492                     	ldw	(OFST-3,sp),x
2494                     ; 437     MQTT_CLIENT_TRY_PACK(
2496                     	ldw	x,(OFST+1,sp)
2497                     	ld	a,(10,x)
2498                     	jrpl	L7611
2501                     	ldw	x,(10,x)
2503                     	jra	L071
2504                     L7611:
2507                     	clrw	x
2508                     	pushw	x
2509                     	ldw	x,(OFST+7,sp)
2510                     	pushw	x
2511                     	ldw	x,(OFST+1,sp)
2512                     	pushw	x
2513                     	ldw	x,(OFST+7,sp)
2514                     	ldw	x,(40,x)
2515                     	pushw	x
2516                     	ldw	x,(OFST+9,sp)
2517                     	ldw	x,(38,x)
2518                     	call	_mqtt_pack_unsubscribe_request
2520                     	addw	sp,#8
2521                     	ldw	(OFST-1,sp),x
2525                     	jrpl	L1711
2530                     LC008:
2532                     	ldw	x,(OFST+1,sp)
2533                     	ldw	y,(OFST-1,sp)
2534                     	ldw	(10,x),y
2536                     	ldw	x,y
2538                     L071:
2540                     	addw	sp,#6
2541                     	ret	
2542                     L1711:
2545                     	jrne	L3711
2548                     	ldw	x,(OFST+1,sp)
2549                     	addw	x,#34
2550                     	call	_mqtt_mq_clean
2554                     	clrw	x
2555                     	pushw	x
2556                     	ldw	x,(OFST+7,sp)
2557                     	pushw	x
2558                     	ldw	x,(OFST+1,sp)
2559                     	pushw	x
2560                     	ldw	x,(OFST+7,sp)
2561                     	ldw	x,(40,x)
2562                     	pushw	x
2563                     	ldw	x,(OFST+9,sp)
2564                     	ldw	x,(38,x)
2565                     	call	_mqtt_pack_unsubscribe_request
2567                     	addw	sp,#8
2568                     	ldw	(OFST-1,sp),x
2575                     	jrmi	LC008
2578                     	jrne	L3711
2581                     	ldw	x,(OFST+1,sp)
2582                     	ldw	y,#32784
2583                     	ldw	(10,x),y
2586                     	ldw	x,#32784
2588                     	jra	L071
2589                     L3711:
2592                     	pushw	x
2593                     	ldw	x,(OFST+3,sp)
2594                     	addw	x,#34
2595                     	call	_mqtt_mq_register
2597                     	addw	sp,#2
2598                     	ldw	(OFST-1,sp),x
2600                     ; 449     msg->control_type = MQTT_CONTROL_UNSUBSCRIBE;
2603                     	ld	a,#10
2604                     	ld	(9,x),a
2605                     ; 450     msg->packet_id = packet_id;
2607                     	ldw	y,(OFST-3,sp)
2608                     	ldw	(10,x),y
2609                     ; 452     return MQTT_OK;
2611                     	ldw	x,#1
2613                     	jra	L071
2658                     ; 456 int16_t mqtt_ping(struct mqtt_client *client)
2658                     ; 457 {
2659                     .text:	section	.text,new
2660                     _mqtt_ping:
2662                     	pushw	x
2663       00000002      OFST:	set	2
2666                     ; 459     rv = __mqtt_ping(client);
2668                     	call	___mqtt_ping
2671                     ; 460     return rv;
2675                     	addw	sp,#2
2676                     	ret	
2735                     ; 464 int16_t __mqtt_ping(struct mqtt_client *client) 
2735                     ; 465 {
2736                     .text:	section	.text,new
2737  d420               ___mqtt_ping:
2739  d420 89            	pushw	x
2740  d421 89            	pushw	x
2741       00000002      OFST:	set	2
2744                     ; 470     MQTT_CLIENT_TRY_PACK(
2746  d422 e60a          	ld	a,(10,x)
2747  d424 2a04          	jrpl	L7521
2750  d426 ee0a          	ldw	x,(10,x)
2752  d428 2017          	jra	L012
2753  d42a               L7521:
2756  d42a ee28          	ldw	x,(40,x)
2757  d42c 89            	pushw	x
2758  d42d 1e05          	ldw	x,(OFST+3,sp)
2759  d42f ee26          	ldw	x,(38,x)
2760  d431 cddce9        	call	_mqtt_pack_ping_request
2762  d434 5b02          	addw	sp,#2
2763  d436 1f01          	ldw	(OFST-1,sp),x
2767  d438 2a0a          	jrpl	L1621
2772  d43a               LC009:
2774  d43a 1e03          	ldw	x,(OFST+1,sp)
2775  d43c 1601          	ldw	y,(OFST-1,sp)
2776  d43e ef0a          	ldw	(10,x),y
2778  d440 93            	ldw	x,y
2780  d441               L012:
2782  d441 5b04          	addw	sp,#4
2783  d443 81            	ret	
2784  d444               L1621:
2787  d444 2629          	jrne	L3621
2790  d446 1e03          	ldw	x,(OFST+1,sp)
2791  d448 1c0022        	addw	x,#34
2792  d44b cde1ad        	call	_mqtt_mq_clean
2796  d44e 1e03          	ldw	x,(OFST+1,sp)
2797  d450 ee28          	ldw	x,(40,x)
2798  d452 89            	pushw	x
2799  d453 1e05          	ldw	x,(OFST+3,sp)
2800  d455 ee26          	ldw	x,(38,x)
2801  d457 cddce9        	call	_mqtt_pack_ping_request
2803  d45a 5b02          	addw	sp,#2
2804  d45c 1f01          	ldw	(OFST-1,sp),x
2811  d45e 2bda          	jrmi	LC009
2814  d460 260d          	jrne	L3621
2817  d462 1e03          	ldw	x,(OFST+1,sp)
2818  d464 90ae8010      	ldw	y,#32784
2819  d468 ef0a          	ldw	(10,x),y
2822  d46a ae8010        	ldw	x,#32784
2824  d46d 20d2          	jra	L012
2825  d46f               L3621:
2828  d46f 89            	pushw	x
2829  d470 1e05          	ldw	x,(OFST+3,sp)
2830  d472 1c0022        	addw	x,#34
2831  d475 cde146        	call	_mqtt_mq_register
2833  d478 5b02          	addw	sp,#2
2835                     ; 479     msg->control_type = MQTT_CONTROL_PINGREQ;
2838  d47a a60c          	ld	a,#12
2839  d47c e709          	ld	(9,x),a
2840                     ; 481     return MQTT_OK;
2842  d47e ae0001        	ldw	x,#1
2844  d481 20be          	jra	L012
2903                     ; 485 int16_t mqtt_disconnect(struct mqtt_client *client) 
2903                     ; 486 {
2904                     .text:	section	.text,new
2905  d483               _mqtt_disconnect:
2907  d483 89            	pushw	x
2908  d484 89            	pushw	x
2909       00000002      OFST:	set	2
2912                     ; 491     MQTT_CLIENT_TRY_PACK(
2914  d485 e60a          	ld	a,(10,x)
2915  d487 2a04          	jrpl	L5231
2918  d489 ee0a          	ldw	x,(10,x)
2920  d48b 2017          	jra	L422
2921  d48d               L5231:
2924  d48d ee28          	ldw	x,(40,x)
2925  d48f 89            	pushw	x
2926  d490 1e05          	ldw	x,(OFST+3,sp)
2927  d492 ee26          	ldw	x,(38,x)
2928  d494 cddcc9        	call	_mqtt_pack_disconnect
2930  d497 5b02          	addw	sp,#2
2931  d499 1f01          	ldw	(OFST-1,sp),x
2935  d49b 2a0a          	jrpl	L7231
2940  d49d               LC010:
2942  d49d 1e03          	ldw	x,(OFST+1,sp)
2943  d49f 1601          	ldw	y,(OFST-1,sp)
2944  d4a1 ef0a          	ldw	(10,x),y
2946  d4a3 93            	ldw	x,y
2948  d4a4               L422:
2950  d4a4 5b04          	addw	sp,#4
2951  d4a6 81            	ret	
2952  d4a7               L7231:
2955  d4a7 2629          	jrne	L1331
2958  d4a9 1e03          	ldw	x,(OFST+1,sp)
2959  d4ab 1c0022        	addw	x,#34
2960  d4ae cde1ad        	call	_mqtt_mq_clean
2964  d4b1 1e03          	ldw	x,(OFST+1,sp)
2965  d4b3 ee28          	ldw	x,(40,x)
2966  d4b5 89            	pushw	x
2967  d4b6 1e05          	ldw	x,(OFST+3,sp)
2968  d4b8 ee26          	ldw	x,(38,x)
2969  d4ba cddcc9        	call	_mqtt_pack_disconnect
2971  d4bd 5b02          	addw	sp,#2
2972  d4bf 1f01          	ldw	(OFST-1,sp),x
2979  d4c1 2bda          	jrmi	LC010
2982  d4c3 260d          	jrne	L1331
2985  d4c5 1e03          	ldw	x,(OFST+1,sp)
2986  d4c7 90ae8010      	ldw	y,#32784
2987  d4cb ef0a          	ldw	(10,x),y
2990  d4cd ae8010        	ldw	x,#32784
2992  d4d0 20d2          	jra	L422
2993  d4d2               L1331:
2996  d4d2 89            	pushw	x
2997  d4d3 1e05          	ldw	x,(OFST+3,sp)
2998  d4d5 1c0022        	addw	x,#34
2999  d4d8 cde146        	call	_mqtt_mq_register
3001  d4db 5b02          	addw	sp,#2
3003                     ; 500     msg->control_type = MQTT_CONTROL_DISCONNECT;
3006  d4dd a60e          	ld	a,#14
3007  d4df e709          	ld	(9,x),a
3008                     ; 502     return MQTT_OK;
3010  d4e1 ae0001        	ldw	x,#1
3012  d4e4 20be          	jra	L422
3120                     ; 506 int16_t __mqtt_send(struct mqtt_client *client) 
3120                     ; 507 {
3121                     .text:	section	.text,new
3122  d4e6               ___mqtt_send:
3124  d4e6 89            	pushw	x
3125  d4e7 520d          	subw	sp,#13
3126       0000000d      OFST:	set	13
3129                     ; 510     int16_t inflight_qos2 = 0;
3131  d4e9 5f            	clrw	x
3132  d4ea 1f07          	ldw	(OFST-6,sp),x
3134                     ; 511     int16_t i = 0;
3136  d4ec 1f0b          	ldw	(OFST-2,sp),x
3138                     ; 513     if (client->error < 0 && client->error != MQTT_ERROR_SEND_BUFFER_IS_FULL) {
3140  d4ee 1e0e          	ldw	x,(OFST+1,sp)
3141  d4f0 6d0a          	tnz	(10,x)
3142  d4f2 2a10          	jrpl	L1241
3144  d4f4 9093          	ldw	y,x
3145  d4f6 90ee0a        	ldw	y,(10,y)
3146  d4f9 90a38010      	cpw	y,#32784
3147  d4fd 2705          	jreq	L1241
3148                     ; 514       return client->error;
3150  d4ff ee0a          	ldw	x,(10,x)
3152  d501 ccd5c9        	jra	L432
3153  d504               L1241:
3154                     ; 518     len = mqtt_mq_length(&client->mq);
3156  d504 ee24          	ldw	x,(36,x)
3157  d506 160e          	ldw	y,(OFST+1,sp)
3158  d508 01            	rrwa	x,a
3159  d509 90e02b        	sub	a,(43,y)
3160  d50c 01            	rrwa	x,a
3161  d50d 90e22a        	sbc	a,(42,y)
3162  d510 01            	rrwa	x,a
3163  d511 a60c          	ld	a,#12
3164  d513 cdfab3        	call	c_sdivx
3166  d516 1f09          	ldw	(OFST-4,sp),x
3169  d518 ccd6b4        	jra	L7241
3170  d51b               L3241:
3171                     ; 520         struct mqtt_queued_message *msg = mqtt_mq_get(&client->mq, i);
3173  d51b a60c          	ld	a,#12
3174  d51d cdf6b4        	call	c_bmulx
3176  d520 1f01          	ldw	(OFST-12,sp),x
3178  d522 1e0e          	ldw	x,(OFST+1,sp)
3179  d524 ee24          	ldw	x,(36,x)
3180  d526 1d000c        	subw	x,#12
3181  d529 72f001        	subw	x,(OFST-12,sp)
3182  d52c 1f05          	ldw	(OFST-8,sp),x
3184                     ; 521         int16_t resend = 0;
3186  d52e 5f            	clrw	x
3187  d52f 1f03          	ldw	(OFST-10,sp),x
3189                     ; 522         if (msg->state == MQTT_QUEUED_UNSENT) {
3191  d531 1e05          	ldw	x,(OFST-8,sp)
3192  d533 e604          	ld	a,(4,x)
3193  d535 2607          	jrne	L3341
3194                     ; 524             resend = 1;
3196  d537 ae0001        	ldw	x,#1
3197  d53a 1f03          	ldw	(OFST-10,sp),x
3200  d53c 202f          	jra	L5341
3201  d53e               L3341:
3202                     ; 526 	else if (msg->state == MQTT_QUEUED_AWAITING_ACK) {
3204  d53e 4a            	dec	a
3205  d53f 262c          	jrne	L5341
3206                     ; 528             if (second_counter > msg->time_sent + client->response_timeout) {
3208  d541 1e0e          	ldw	x,(OFST+1,sp)
3209  d543 ee0c          	ldw	x,(12,x)
3210  d545 cdf880        	call	c_itolx
3212  d548 1e05          	ldw	x,(OFST-8,sp)
3213  d54a 1c0005        	addw	x,#5
3214  d54d cdf8b2        	call	c_ladd
3216  d550 ae029c        	ldw	x,#_second_counter
3217  d553 cdf8ca        	call	c_lcmp
3219  d556 2415          	jruge	L5341
3220                     ; 529                 resend = 1;
3222  d558 ae0001        	ldw	x,#1
3223  d55b 1f03          	ldw	(OFST-10,sp),x
3225                     ; 530                 client->number_of_timeouts += 1;
3227  d55d 1e0e          	ldw	x,(OFST+1,sp)
3228  d55f 9093          	ldw	y,x
3229  d561 ee0e          	ldw	x,(14,x)
3230  d563 5c            	incw	x
3231  d564 90ef0e        	ldw	(14,y),x
3232                     ; 531                 client->send_offset = 0;
3234  d567 1e0e          	ldw	x,(OFST+1,sp)
3235  d569 905f          	clrw	y
3236  d56b ef04          	ldw	(4,x),y
3237  d56d               L5341:
3238                     ; 536         if (msg->control_type == MQTT_CONTROL_PUBLISH
3238                     ; 537             && (msg->state == MQTT_QUEUED_UNSENT || msg->state == MQTT_QUEUED_AWAITING_ACK)) 
3240  d56d 1e05          	ldw	x,(OFST-8,sp)
3241  d56f e609          	ld	a,(9,x)
3242  d571 a103          	cp	a,#3
3243  d573 261f          	jrne	L3441
3245  d575 e604          	ld	a,(4,x)
3246  d577 2704          	jreq	L5441
3248  d579 a101          	cp	a,#1
3249  d57b 2617          	jrne	L3441
3250  d57d               L5441:
3251                     ; 539             inspected = (uint8_t)(0x03 & ((msg->start[0]) >> 1)); // qos
3253  d57d fe            	ldw	x,(x)
3254  d57e f6            	ld	a,(x)
3255  d57f a406          	and	a,#6
3256  d581 44            	srl	a
3257  d582 6b0d          	ld	(OFST+0,sp),a
3259                     ; 540             if (inspected == 2) {
3261  d584 a102          	cp	a,#2
3262  d586 260c          	jrne	L3441
3263                     ; 541                 if (inflight_qos2) resend = 0;
3265  d588 1e07          	ldw	x,(OFST-6,sp)
3266  d58a 2703          	jreq	L1541
3269  d58c 5f            	clrw	x
3270  d58d 1f03          	ldw	(OFST-10,sp),x
3272  d58f               L1541:
3273                     ; 542                 inflight_qos2 = 1;
3275  d58f ae0001        	ldw	x,#1
3276  d592 1f07          	ldw	(OFST-6,sp),x
3278  d594               L3441:
3279                     ; 547         if (!resend) continue;
3281  d594 1e03          	ldw	x,(OFST-10,sp)
3282  d596 2603ccd68b    	jreq	L5241
3285                     ; 551           int16_t tmp = mqtt_pal_sendall(msg->start + client->send_offset, msg->size - client->send_offset);
3287  d59b 1e05          	ldw	x,(OFST-8,sp)
3288  d59d 160e          	ldw	y,(OFST+1,sp)
3289  d59f ee02          	ldw	x,(2,x)
3290  d5a1 01            	rrwa	x,a
3291  d5a2 90e005        	sub	a,(5,y)
3292  d5a5 01            	rrwa	x,a
3293  d5a6 90e204        	sbc	a,(4,y)
3294  d5a9 01            	rrwa	x,a
3295  d5aa 89            	pushw	x
3296  d5ab 1e10          	ldw	x,(OFST+3,sp)
3297  d5ad 1607          	ldw	y,(OFST-6,sp)
3298  d5af ee04          	ldw	x,(4,x)
3299  d5b1 01            	rrwa	x,a
3300  d5b2 90eb01        	add	a,(1,y)
3301  d5b5 01            	rrwa	x,a
3302  d5b6 90f9          	adc	a,(y)
3303  d5b8 01            	rrwa	x,a
3304  d5b9 cde45f        	call	_mqtt_pal_sendall
3306  d5bc 5b02          	addw	sp,#2
3307  d5be 1f03          	ldw	(OFST-10,sp),x
3309                     ; 554           if (tmp < 0) {
3311  d5c0 2a0a          	jrpl	L5541
3312                     ; 555             client->error = tmp;
3314  d5c2 1e0e          	ldw	x,(OFST+1,sp)
3315  d5c4 1603          	ldw	y,(OFST-10,sp)
3316                     ; 556             return tmp;
3318  d5c6               LC014:
3319  d5c6 ef0a          	ldw	(10,x),y
3321  d5c8 93            	ldw	x,y
3323  d5c9               L432:
3325  d5c9 5b0f          	addw	sp,#15
3326  d5cb 81            	ret	
3327  d5cc               L5541:
3328                     ; 559             client->send_offset += tmp;
3330  d5cc 1e0e          	ldw	x,(OFST+1,sp)
3331  d5ce 9093          	ldw	y,x
3332  d5d0 ee04          	ldw	x,(4,x)
3333  d5d2 72fb03        	addw	x,(OFST-10,sp)
3334  d5d5 90ef04        	ldw	(4,y),x
3335                     ; 560             if(client->send_offset < msg->size) {
3337  d5d8 1e0e          	ldw	x,(OFST+1,sp)
3338  d5da 1605          	ldw	y,(OFST-8,sp)
3339  d5dc ee04          	ldw	x,(4,x)
3340  d5de 90e302        	cpw	x,(2,y)
3341  d5e1 2441          	jruge	L1641
3342                     ; 562               break;
3343  d5e3               L1341:
3344                     ; 629         uint32_t keep_alive_timeout = client->time_of_last_send + (uint32_t)((float)(client->keep_alive) * 0.75);
3346  d5e3 1e0e          	ldw	x,(OFST+1,sp)
3347  d5e5 ee02          	ldw	x,(2,x)
3348  d5e7 cdfad8        	call	c_uitof
3350  d5ea ae9f09        	ldw	x,#L5051
3351  d5ed cdf728        	call	c_fmul
3353  d5f0 cdf803        	call	c_ftol
3355  d5f3 1e0e          	ldw	x,(OFST+1,sp)
3356  d5f5 1c0006        	addw	x,#6
3357  d5f8 cdf8b2        	call	c_ladd
3359  d5fb 96            	ldw	x,sp
3360  d5fc 1c0003        	addw	x,#OFST-10
3361  d5ff cdfa9b        	call	c_rtol
3364                     ; 630         if (second_counter > keep_alive_timeout) {
3366  d602 ae029c        	ldw	x,#_second_counter
3367  d605 cdf935        	call	c_ltor
3369  d608 96            	ldw	x,sp
3370  d609 1c0003        	addw	x,#OFST-10
3371  d60c cdf8ca        	call	c_lcmp
3373  d60f 2203ccd6c0    	jrule	L1151
3374                     ; 631           int16_t rv = __mqtt_ping(client);
3376  d614 1e0e          	ldw	x,(OFST+1,sp)
3377  d616 cdd420        	call	___mqtt_ping
3379  d619 1f09          	ldw	(OFST-4,sp),x
3381                     ; 632           if (rv != MQTT_OK) {
3383  d61b 5a            	decw	x
3384  d61c 27f3          	jreq	L1151
3385                     ; 633             client->error = rv;
3387  d61e 1e0e          	ldw	x,(OFST+1,sp)
3388  d620 1609          	ldw	y,(OFST-4,sp)
3389                     ; 634             return rv;
3391  d622 20a2          	jp	LC014
3392  d624               L1641:
3393                     ; 567               client->send_offset = 0;
3395  d624 1e0e          	ldw	x,(OFST+1,sp)
3396  d626 905f          	clrw	y
3397  d628 ef04          	ldw	(4,x),y
3398                     ; 573         client->time_of_last_send = second_counter;
3400  d62a c6029f        	ld	a,_second_counter+3
3401  d62d e709          	ld	(9,x),a
3402  d62f c6029e        	ld	a,_second_counter+2
3403  d632 e708          	ld	(8,x),a
3404  d634 c6029d        	ld	a,_second_counter+1
3405  d637 e707          	ld	(7,x),a
3406  d639 c6029c        	ld	a,_second_counter
3407  d63c e706          	ld	(6,x),a
3408                     ; 574         msg->time_sent = client->time_of_last_send;
3410  d63e 1605          	ldw	y,(OFST-8,sp)
3411  d640 e609          	ld	a,(9,x)
3412  d642 90e708        	ld	(8,y),a
3413  d645 e608          	ld	a,(8,x)
3414  d647 90e707        	ld	(7,y),a
3415  d64a e607          	ld	a,(7,x)
3416  d64c 90e706        	ld	(6,y),a
3417  d64f e606          	ld	a,(6,x)
3418                     ; 593         switch (msg->control_type) {
3420  d651 93            	ldw	x,y
3421  d652 90e705        	ld	(5,y),a
3422  d655 e609          	ld	a,(9,x)
3424                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3425  d657 4a            	dec	a
3426  d658 2756          	jreq	L7431
3427  d65a a002          	sub	a,#2
3428  d65c 2734          	jreq	L5431
3429  d65e 4a            	dec	a
3430  d65f 2726          	jreq	L3431
3431  d661 4a            	dec	a
3432  d662 274c          	jreq	L7431
3433  d664 4a            	dec	a
3434  d665 2749          	jreq	L7431
3435  d667 4a            	dec	a
3436  d668 271d          	jreq	L3431
3437  d66a 4a            	dec	a
3438  d66b 2743          	jreq	L7431
3439  d66d a002          	sub	a,#2
3440  d66f 273f          	jreq	L7431
3441  d671 a002          	sub	a,#2
3442  d673 273b          	jreq	L7431
3443  d675 a002          	sub	a,#2
3444  d677 270e          	jreq	L3431
3445                     ; 621         default:
3445                     ; 622             client->error = MQTT_ERROR_MALFORMED_REQUEST;
3447  d679 1e0e          	ldw	x,(OFST+1,sp)
3448  d67b 90ae8012      	ldw	y,#32786
3449  d67f ef0a          	ldw	(10,x),y
3450                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3452  d681 ae8012        	ldw	x,#32786
3454  d684 ccd5c9        	jra	L432
3455  d687               L3431:
3456                     ; 594         case MQTT_CONTROL_PUBACK:
3456                     ; 595         case MQTT_CONTROL_PUBCOMP:
3456                     ; 596         case MQTT_CONTROL_DISCONNECT:
3456                     ; 597             msg->state = MQTT_QUEUED_COMPLETE;
3458  d687 a602          	ld	a,#2
3459  d689               LC011:
3460  d689 e704          	ld	(4,x),a
3461                     ; 598             break;
3462  d68b               L5241:
3463                     ; 519     for(; i < len; ++i) {
3465  d68b 1e0b          	ldw	x,(OFST-2,sp)
3466  d68d 5c            	incw	x
3467  d68e 1f0b          	ldw	(OFST-2,sp),x
3469  d690 2022          	jra	L7241
3470  d692               L5431:
3471                     ; 599         case MQTT_CONTROL_PUBLISH:
3471                     ; 600             inspected = (uint8_t)(( MQTT_PUBLISH_QOS_MASK & (msg->start[0]) ) >> 1); /* qos */
3473  d692 fe            	ldw	x,(x)
3474  d693 f6            	ld	a,(x)
3475  d694 a406          	and	a,#6
3476  d696 44            	srl	a
3477  d697 6b0d          	ld	(OFST+0,sp),a
3479                     ; 601             if (inspected == 0) {
3481  d699 2604          	jrne	L1741
3482                     ; 602                 msg->state = MQTT_QUEUED_COMPLETE;
3484  d69b 1e05          	ldw	x,(OFST-8,sp)
3486  d69d 20e8          	jp	L3431
3487  d69f               L1741:
3488                     ; 604 	    else if (inspected == 1) {
3490  d69f 4a            	dec	a
3491  d6a0 260c          	jrne	L5741
3492                     ; 605                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3494  d6a2 1e05          	ldw	x,(OFST-8,sp)
3495  d6a4 4c            	inc	a
3496  d6a5 e704          	ld	(4,x),a
3497                     ; 607                 msg->start[0] |= MQTT_PUBLISH_DUP;
3499  d6a7 fe            	ldw	x,(x)
3500  d6a8 f6            	ld	a,(x)
3501  d6a9 aa08          	or	a,#8
3502  d6ab f7            	ld	(x),a
3504  d6ac 20dd          	jra	L5241
3505  d6ae               L5741:
3506                     ; 610                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3508  d6ae 1e05          	ldw	x,(OFST-8,sp)
3509  d6b0               L7431:
3510                     ; 613         case MQTT_CONTROL_CONNECT:
3510                     ; 614         case MQTT_CONTROL_PUBREC:
3510                     ; 615         case MQTT_CONTROL_PUBREL:
3510                     ; 616         case MQTT_CONTROL_SUBSCRIBE:
3510                     ; 617         case MQTT_CONTROL_UNSUBSCRIBE:
3510                     ; 618         case MQTT_CONTROL_PINGREQ:
3510                     ; 619             msg->state = MQTT_QUEUED_AWAITING_ACK;
3512  d6b0 a601          	ld	a,#1
3513                     ; 620             break;
3515  d6b2 20d5          	jp	LC011
3516  d6b4               L7241:
3517                     ; 519     for(; i < len; ++i) {
3519  d6b4 1e0b          	ldw	x,(OFST-2,sp)
3520  d6b6 1309          	cpw	x,(OFST-4,sp)
3521  d6b8 2e03ccd51b    	jrslt	L3241
3522  d6bd ccd5e3        	jra	L1341
3523  d6c0               L1151:
3524                     ; 639     return MQTT_OK;
3526  d6c0 ae0001        	ldw	x,#1
3528  d6c3 ccd5c9        	jra	L432
4080                     ; 643 int16_t __mqtt_recv(struct mqtt_client *client)
4080                     ; 644 {
4081                     .text:	section	.text,new
4082  d6c6               ___mqtt_recv:
4084  d6c6 89            	pushw	x
4085  d6c7 5220          	subw	sp,#32
4086       00000020      OFST:	set	32
4089                     ; 646     int16_t mqtt_recv_ret = MQTT_OK;
4091  d6c9 ae0001        	ldw	x,#1
4092  d6cc 1f07          	ldw	(OFST-25,sp),x
4094                     ; 648     struct mqtt_queued_message *msg = NULL;
4096                     ; 656     rv = mqtt_pal_recvall(client->recv_buffer.curr, client->recv_buffer.curr_sz);
4098  d6ce 1e21          	ldw	x,(OFST+1,sp)
4099  d6d0 ee20          	ldw	x,(32,x)
4100  d6d2 89            	pushw	x
4101  d6d3 1e23          	ldw	x,(OFST+3,sp)
4102  d6d5 ee1e          	ldw	x,(30,x)
4103  d6d7 cde476        	call	_mqtt_pal_recvall
4105  d6da 5b02          	addw	sp,#2
4106  d6dc 1f1f          	ldw	(OFST-1,sp),x
4108                     ; 658     client->recv_buffer.curr += rv;
4110  d6de 1e21          	ldw	x,(OFST+1,sp)
4111  d6e0 9093          	ldw	y,x
4112  d6e2 ee1e          	ldw	x,(30,x)
4113  d6e4 72fb1f        	addw	x,(OFST-1,sp)
4114  d6e7 90ef1e        	ldw	(30,y),x
4115                     ; 659     client->recv_buffer.curr_sz -= rv;
4117  d6ea 1e21          	ldw	x,(OFST+1,sp)
4118  d6ec 9093          	ldw	y,x
4119  d6ee ee20          	ldw	x,(32,x)
4120  d6f0 72f01f        	subw	x,(OFST-1,sp)
4121  d6f3 90ef20        	ldw	(32,y),x
4122                     ; 662     consumed = mqtt_unpack_response(&response, client->recv_buffer.mem_start, client->recv_buffer.curr - client->recv_buffer.mem_start);
4124  d6f6 1e21          	ldw	x,(OFST+1,sp)
4125  d6f8 1621          	ldw	y,(OFST+1,sp)
4126  d6fa ee1e          	ldw	x,(30,x)
4127  d6fc 01            	rrwa	x,a
4128  d6fd 90e01b        	sub	a,(27,y)
4129  d700 01            	rrwa	x,a
4130  d701 90e21a        	sbc	a,(26,y)
4131  d704 01            	rrwa	x,a
4132  d705 89            	pushw	x
4133  d706 1e23          	ldw	x,(OFST+3,sp)
4134  d708 ee1a          	ldw	x,(26,x)
4135  d70a 89            	pushw	x
4136  d70b 96            	ldw	x,sp
4137  d70c 1c000d        	addw	x,#OFST-19
4138  d70f cde337        	call	_mqtt_unpack_response
4140  d712 5b04          	addw	sp,#4
4141  d714 1f05          	ldw	(OFST-27,sp),x
4143                     ; 664     if (consumed < 0) {
4145  d716 2a09          	jrpl	L7502
4146                     ; 665         client->error = consumed;
4148  d718 1e21          	ldw	x,(OFST+1,sp)
4149  d71a 1605          	ldw	y,(OFST-27,sp)
4150  d71c ef0a          	ldw	(10,x),y
4151                     ; 666         return consumed;
4153  d71e 93            	ldw	x,y
4155  d71f 2013          	jra	L403
4156  d721               L7502:
4157                     ; 668     else if (consumed == 0) {
4159  d721 2619          	jrne	L1602
4160                     ; 674         if (client->recv_buffer.curr_sz == 0) {
4162  d723 1e21          	ldw	x,(OFST+1,sp)
4163  d725 e621          	ld	a,(33,x)
4164  d727 ea20          	or	a,(32,x)
4165  d729 260c          	jrne	L5602
4166                     ; 675             client->error = MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4168  d72b 90ae8013      	ldw	y,#32787
4169  d72f ef0a          	ldw	(10,x),y
4170                     ; 676             return MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4172  d731 ae8013        	ldw	x,#32787
4174  d734               L403:
4176  d734 5b22          	addw	sp,#34
4177  d736 81            	ret	
4178  d737               L5602:
4179                     ; 680         return MQTT_OK;
4181  d737 ae0001        	ldw	x,#1
4183  d73a 20f8          	jra	L403
4184  d73c               L1602:
4185                     ; 712     switch (response.fixed_header.control_type) {
4187  d73c 7b09          	ld	a,(OFST-23,sp)
4189                     ; 861             break;
4190  d73e a002          	sub	a,#2
4191  d740 2741          	jreq	L5151
4192  d742 4a            	dec	a
4193  d743 2603ccd7c5    	jreq	L7151
4194  d748 4a            	dec	a
4195  d749 2603ccd82a    	jreq	L1251
4196  d74e 4a            	dec	a
4197  d74f 2603ccd850    	jreq	L3251
4198  d754 4a            	dec	a
4199  d755 2603ccd895    	jreq	L5251
4200  d75a 4a            	dec	a
4201  d75b 2603ccd8c6    	jreq	L7251
4202  d760 a002          	sub	a,#2
4203  d762 2603ccd8d0    	jreq	L1351
4204  d767 a002          	sub	a,#2
4205  d769 2603ccd902    	jreq	L3351
4206  d76e a002          	sub	a,#2
4207  d770 2603ccd90c    	jreq	L5351
4208                     ; 858         default:
4208                     ; 859             client->error = MQTT_ERROR_MALFORMED_RESPONSE;
4210  d775 1e21          	ldw	x,(OFST+1,sp)
4211  d777 90ae800c      	ldw	y,#32780
4212  d77b ef0a          	ldw	(10,x),y
4213                     ; 860             mqtt_recv_ret = MQTT_ERROR_MALFORMED_RESPONSE;
4215  d77d ae800c        	ldw	x,#32780
4216                     ; 861             break;
4218  d780 ccd8fe        	jp	LC016
4219  d783               L5151:
4220                     ; 713         case MQTT_CONTROL_CONNACK:
4220                     ; 714 
4220                     ; 715             // release associated CONNECT
4220                     ; 716             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_CONNECT, NULL);
4222  d783 5f            	clrw	x
4223  d784 89            	pushw	x
4224  d785 4b01          	push	#1
4225  d787 1e24          	ldw	x,(OFST+4,sp)
4226  d789 1c0022        	addw	x,#34
4227  d78c cde2fb        	call	_mqtt_mq_find
4229  d78f 5b03          	addw	sp,#3
4230  d791 1f1f          	ldw	(OFST-1,sp),x
4232                     ; 717             if (msg == NULL) {
4234                     ; 718                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4235                     ; 719                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4236                     ; 720                 break;
4238  d793 2603ccd842    	jreq	LC017
4239                     ; 722             msg->state = MQTT_QUEUED_COMPLETE;
4241  d798 a602          	ld	a,#2
4242  d79a e704          	ld	(4,x),a
4243                     ; 724             if (response.decoded.connack.return_code != MQTT_CONNACK_ACCEPTED) {
4245  d79c 0d13          	tnz	(OFST-13,sp)
4246  d79e 2603ccd922    	jreq	L1702
4247                     ; 725                 if (response.decoded.connack.return_code == MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED) {
4249  d7a3 7b13          	ld	a,(OFST-13,sp)
4250  d7a5 a102          	cp	a,#2
4251  d7a7 260e          	jrne	L7702
4252                     ; 726                     client->error = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4254  d7a9 1e21          	ldw	x,(OFST+1,sp)
4255  d7ab 90ae8005      	ldw	y,#32773
4256  d7af ef0a          	ldw	(10,x),y
4257                     ; 727                     mqtt_recv_ret = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4259  d7b1 ae8005        	ldw	x,#32773
4261  d7b4 ccd8fe        	jp	LC016
4262  d7b7               L7702:
4263                     ; 730                     client->error = MQTT_ERROR_CONNECTION_REFUSED;
4265  d7b7 1e21          	ldw	x,(OFST+1,sp)
4266  d7b9 90ae8016      	ldw	y,#32790
4267  d7bd ef0a          	ldw	(10,x),y
4268                     ; 731                     mqtt_recv_ret = MQTT_ERROR_CONNECTION_REFUSED;
4270  d7bf ae8016        	ldw	x,#32790
4271  d7c2 ccd8fe        	jp	LC016
4272  d7c5               L7151:
4273                     ; 736         case MQTT_CONTROL_PUBLISH:
4273                     ; 737             // stage response, none if qos==0, PUBACK if qos==1, PUBREC if qos==2
4273                     ; 738             if (response.decoded.publish.qos_level == 1) {
4275  d7c5 7b13          	ld	a,(OFST-13,sp)
4276  d7c7 a101          	cp	a,#1
4277  d7c9 2619          	jrne	L3012
4278                     ; 739                 rv = __mqtt_puback(client, response.decoded.publish.packet_id);
4280  d7cb 1e19          	ldw	x,(OFST-7,sp)
4281  d7cd 89            	pushw	x
4282  d7ce 1e23          	ldw	x,(OFST+3,sp)
4283  d7d0 cdd1c3        	call	___mqtt_puback
4285  d7d3 5b02          	addw	sp,#2
4286  d7d5 1f1f          	ldw	(OFST-1,sp),x
4288                     ; 740                 if (rv != MQTT_OK) {
4290  d7d7 5a            	decw	x
4291  d7d8 273b          	jreq	L7012
4292                     ; 741                     client->error = rv;
4294  d7da 1e21          	ldw	x,(OFST+1,sp)
4295  d7dc 161f          	ldw	y,(OFST-1,sp)
4296  d7de ef0a          	ldw	(10,x),y
4297                     ; 742                     mqtt_recv_ret = rv;
4299  d7e0 93            	ldw	x,y
4300                     ; 743                     break;
4302  d7e1 ccd8fe        	jp	LC016
4303  d7e4               L3012:
4304                     ; 746             else if (response.decoded.publish.qos_level == 2) {
4306  d7e4 a102          	cp	a,#2
4307  d7e6 262d          	jrne	L7012
4308                     ; 748                 if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.publish.packet_id) != NULL) {
4310  d7e8 96            	ldw	x,sp
4311  d7e9 1c0019        	addw	x,#OFST-7
4312  d7ec 89            	pushw	x
4313  d7ed 4b05          	push	#5
4314  d7ef 1e24          	ldw	x,(OFST+4,sp)
4315  d7f1 1c0022        	addw	x,#34
4316  d7f4 cde2fb        	call	_mqtt_mq_find
4318  d7f7 5b03          	addw	sp,#3
4319  d7f9 5d            	tnzw	x
4320  d7fa 26a4          	jrne	L1702
4321                     ; 749                     break;
4323                     ; 752                 rv = __mqtt_pubrec(client, response.decoded.publish.packet_id);
4325  d7fc 1e19          	ldw	x,(OFST-7,sp)
4326  d7fe 89            	pushw	x
4327  d7ff 1e23          	ldw	x,(OFST+3,sp)
4328  d801 cdd238        	call	___mqtt_pubrec
4330  d804 5b02          	addw	sp,#2
4331  d806 1f1f          	ldw	(OFST-1,sp),x
4333                     ; 753                 if (rv != MQTT_OK) {
4335  d808 5a            	decw	x
4336  d809 270a          	jreq	L7012
4337                     ; 754                     client->error = rv;
4339  d80b 1e21          	ldw	x,(OFST+1,sp)
4340  d80d 161f          	ldw	y,(OFST-1,sp)
4341  d80f ef0a          	ldw	(10,x),y
4342                     ; 755                     mqtt_recv_ret = rv;
4344  d811 93            	ldw	x,y
4345                     ; 756                     break;
4347  d812 ccd8fe        	jp	LC016
4348  d815               L7012:
4349                     ; 761             client->publish_response_callback(&client->publish_response_callback_state, &response.decoded.publish);
4351  d815 96            	ldw	x,sp
4352  d816 1c0012        	addw	x,#OFST-14
4353  d819 89            	pushw	x
4354  d81a 1e23          	ldw	x,(OFST+3,sp)
4355  d81c 1623          	ldw	y,(OFST+3,sp)
4356  d81e 1c0012        	addw	x,#18
4357  d821 90ee10        	ldw	y,(16,y)
4358  d824 90fd          	call	(y)
4360  d826 85            	popw	x
4361                     ; 762             break;
4363  d827 ccd922        	jra	L1702
4364  d82a               L1251:
4365                     ; 763         case MQTT_CONTROL_PUBACK:
4365                     ; 764             // release associated PUBLISH
4365                     ; 765             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.puback.packet_id);
4367  d82a 96            	ldw	x,sp
4368  d82b 1c0012        	addw	x,#OFST-14
4369  d82e 89            	pushw	x
4370  d82f 4b03          	push	#3
4372                     ; 766             if (msg == NULL) {
4374  d831               LC018:
4375  d831 1e24          	ldw	x,(OFST+4,sp)
4376  d833 1c0022        	addw	x,#34
4377  d836 cde2fb        	call	_mqtt_mq_find
4378  d839 5b03          	addw	sp,#3
4379  d83b 1f1f          	ldw	(OFST-1,sp),x
4383  d83d 2703ccd91e    	jrne	L3412
4384                     ; 767                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4386                     ; 768                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4388  d842               LC017:
4396  d842 1e21          	ldw	x,(OFST+1,sp)
4397  d844 90ae8014      	ldw	y,#32788
4398  d848 ef0a          	ldw	(10,x),y
4406  d84a ae8014        	ldw	x,#32788
4407                     ; 769                 break;
4409  d84d ccd8fe        	jp	LC016
4410                     ; 771             msg->state = MQTT_QUEUED_COMPLETE;
4411                     ; 772             break;
4413  d850               L3251:
4414                     ; 773         case MQTT_CONTROL_PUBREC:
4414                     ; 774             // check if this is a duplicate
4414                     ; 775             if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubrec.packet_id) != NULL) {
4416  d850 96            	ldw	x,sp
4417  d851 1c0012        	addw	x,#OFST-14
4418  d854 89            	pushw	x
4419  d855 4b06          	push	#6
4420  d857 1e24          	ldw	x,(OFST+4,sp)
4421  d859 1c0022        	addw	x,#34
4422  d85c cde2fb        	call	_mqtt_mq_find
4424  d85f 5b03          	addw	sp,#3
4425  d861 5d            	tnzw	x
4426  d862 26c3          	jrne	L1702
4427                     ; 776                 break;
4429                     ; 779             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.pubrec.packet_id);
4431  d864 96            	ldw	x,sp
4432  d865 1c0012        	addw	x,#OFST-14
4433  d868 89            	pushw	x
4434  d869 4b03          	push	#3
4435  d86b 1e24          	ldw	x,(OFST+4,sp)
4436  d86d 1c0022        	addw	x,#34
4437  d870 cde2fb        	call	_mqtt_mq_find
4439  d873 5b03          	addw	sp,#3
4440  d875 1f1f          	ldw	(OFST-1,sp),x
4442                     ; 780             if (msg == NULL) {
4444                     ; 781                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4445                     ; 782                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4446                     ; 783                 break;
4448  d877 27c9          	jreq	LC017
4449                     ; 785             msg->state = MQTT_QUEUED_COMPLETE;
4451  d879 a602          	ld	a,#2
4452  d87b e704          	ld	(4,x),a
4453                     ; 787             rv = __mqtt_pubrel(client, response.decoded.pubrec.packet_id);
4455  d87d 1e12          	ldw	x,(OFST-14,sp)
4456  d87f 89            	pushw	x
4457  d880 1e23          	ldw	x,(OFST+3,sp)
4458  d882 cdd2ad        	call	___mqtt_pubrel
4460  d885 5b02          	addw	sp,#2
4461  d887 1f1f          	ldw	(OFST-1,sp),x
4463                     ; 788             if (rv != MQTT_OK) {
4465  d889 5a            	decw	x
4466  d88a 279b          	jreq	L1702
4467                     ; 789                 client->error = rv;
4469  d88c 1e21          	ldw	x,(OFST+1,sp)
4470  d88e 161f          	ldw	y,(OFST-1,sp)
4471  d890 ef0a          	ldw	(10,x),y
4472                     ; 790                 mqtt_recv_ret = rv;
4474  d892 93            	ldw	x,y
4475                     ; 791                 break;
4477  d893 2069          	jp	LC016
4478  d895               L5251:
4479                     ; 794         case MQTT_CONTROL_PUBREL:
4479                     ; 795             // release associated PUBREC
4479                     ; 796             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.pubrel.packet_id);
4481  d895 96            	ldw	x,sp
4482  d896 1c0012        	addw	x,#OFST-14
4483  d899 89            	pushw	x
4484  d89a 4b05          	push	#5
4485  d89c 1e24          	ldw	x,(OFST+4,sp)
4486  d89e 1c0022        	addw	x,#34
4487  d8a1 cde2fb        	call	_mqtt_mq_find
4489  d8a4 5b03          	addw	sp,#3
4490  d8a6 1f1f          	ldw	(OFST-1,sp),x
4492                     ; 797             if (msg == NULL) {
4494                     ; 798                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4495                     ; 799                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4496                     ; 800                 break;
4498  d8a8 2798          	jreq	LC017
4499                     ; 802             msg->state = MQTT_QUEUED_COMPLETE;
4501  d8aa a602          	ld	a,#2
4502  d8ac e704          	ld	(4,x),a
4503                     ; 804             rv = __mqtt_pubcomp(client, response.decoded.pubrec.packet_id);
4505  d8ae 1e12          	ldw	x,(OFST-14,sp)
4506  d8b0 89            	pushw	x
4507  d8b1 1e23          	ldw	x,(OFST+3,sp)
4508  d8b3 cdd322        	call	___mqtt_pubcomp
4510  d8b6 5b02          	addw	sp,#2
4511  d8b8 1f1f          	ldw	(OFST-1,sp),x
4513                     ; 805             if (rv != MQTT_OK) {
4515  d8ba 5a            	decw	x
4516  d8bb 2765          	jreq	L1702
4517                     ; 806                 client->error = rv;
4519  d8bd 1e21          	ldw	x,(OFST+1,sp)
4520  d8bf 161f          	ldw	y,(OFST-1,sp)
4521  d8c1 ef0a          	ldw	(10,x),y
4522                     ; 807                 mqtt_recv_ret = rv;
4524  d8c3 93            	ldw	x,y
4525                     ; 808                 break;
4527  d8c4 2038          	jp	LC016
4528  d8c6               L7251:
4529                     ; 811         case MQTT_CONTROL_PUBCOMP:
4529                     ; 812             // release associated PUBREL
4529                     ; 813             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubcomp.packet_id);
4531  d8c6 96            	ldw	x,sp
4532  d8c7 1c0012        	addw	x,#OFST-14
4533  d8ca 89            	pushw	x
4534  d8cb 4b06          	push	#6
4536                     ; 814             if (msg == NULL) {
4537                     ; 815                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4538                     ; 816                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4539                     ; 817                 break;
4541  d8cd ccd831        	jp	LC018
4542                     ; 819             msg->state = MQTT_QUEUED_COMPLETE;
4543                     ; 820             break;
4545  d8d0               L1351:
4546                     ; 821         case MQTT_CONTROL_SUBACK:
4546                     ; 822             // release associated SUBSCRIBE
4546                     ; 823             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_SUBSCRIBE, &response.decoded.suback.packet_id);
4548  d8d0 96            	ldw	x,sp
4549  d8d1 1c0012        	addw	x,#OFST-14
4550  d8d4 89            	pushw	x
4551  d8d5 4b08          	push	#8
4552  d8d7 1e24          	ldw	x,(OFST+4,sp)
4553  d8d9 1c0022        	addw	x,#34
4554  d8dc cde2fb        	call	_mqtt_mq_find
4556  d8df 5b03          	addw	sp,#3
4557  d8e1 1f1f          	ldw	(OFST-1,sp),x
4559                     ; 824             if (msg == NULL) {
4561                     ; 825                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4562                     ; 826                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4563                     ; 827                 break;
4565  d8e3 2603ccd842    	jreq	LC017
4566                     ; 829             msg->state = MQTT_QUEUED_COMPLETE;
4568  d8e8 a602          	ld	a,#2
4569  d8ea e704          	ld	(4,x),a
4570                     ; 832             if (response.decoded.suback.return_codes[0] == MQTT_SUBACK_FAILURE) {
4572  d8ec 1e14          	ldw	x,(OFST-12,sp)
4573  d8ee f6            	ld	a,(x)
4574  d8ef a180          	cp	a,#128
4575  d8f1 262f          	jrne	L1702
4576                     ; 833                 client->error = MQTT_ERROR_SUBSCRIBE_FAILED;
4578  d8f3 1e21          	ldw	x,(OFST+1,sp)
4579  d8f5 90ae8017      	ldw	y,#32791
4580  d8f9 ef0a          	ldw	(10,x),y
4581                     ; 834                 mqtt_recv_ret = MQTT_ERROR_SUBSCRIBE_FAILED;
4583  d8fb ae8017        	ldw	x,#32791
4584  d8fe               LC016:
4585  d8fe 1f07          	ldw	(OFST-25,sp),x
4587                     ; 835                 break;
4589  d900 2020          	jra	L1702
4590  d902               L3351:
4591                     ; 838         case MQTT_CONTROL_UNSUBACK:
4591                     ; 839             // release associated UNSUBSCRIBE
4591                     ; 840             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_UNSUBSCRIBE, &response.decoded.unsuback.packet_id);
4593  d902 96            	ldw	x,sp
4594  d903 1c0012        	addw	x,#OFST-14
4595  d906 89            	pushw	x
4596  d907 4b0a          	push	#10
4598                     ; 841             if (msg == NULL) {
4599                     ; 842                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4600                     ; 843                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4601                     ; 844                 break;
4603  d909 ccd831        	jp	LC018
4604                     ; 846             msg->state = MQTT_QUEUED_COMPLETE;
4605                     ; 847             break;
4607  d90c               L5351:
4608                     ; 848         case MQTT_CONTROL_PINGRESP:
4608                     ; 849             // release associated PINGREQ
4608                     ; 850             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PINGREQ, NULL);
4610  d90c 5f            	clrw	x
4611  d90d 89            	pushw	x
4612  d90e 4b0c          	push	#12
4613  d910 1e24          	ldw	x,(OFST+4,sp)
4614  d912 1c0022        	addw	x,#34
4615  d915 cde2fb        	call	_mqtt_mq_find
4617  d918 5b03          	addw	sp,#3
4618  d91a 1f1f          	ldw	(OFST-1,sp),x
4620                     ; 851             if (msg == NULL) {
4622                     ; 852                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4623                     ; 853                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4624                     ; 854                 break;
4626  d91c 27c7          	jreq	LC017
4627  d91e               L3412:
4628                     ; 856             msg->state = MQTT_QUEUED_COMPLETE;
4633  d91e a602          	ld	a,#2
4634  d920 e704          	ld	(4,x),a
4635                     ; 857             break;
4637  d922               L1702:
4638                     ; 890         void* dest = (unsigned char*)client->recv_buffer.mem_start;
4640  d922 1e21          	ldw	x,(OFST+1,sp)
4641  d924 ee1a          	ldw	x,(26,x)
4642  d926 1f01          	ldw	(OFST-31,sp),x
4644                     ; 891         void* src  = (unsigned char*)client->recv_buffer.mem_start + consumed;
4646  d928 1e21          	ldw	x,(OFST+1,sp)
4647  d92a ee1a          	ldw	x,(26,x)
4648  d92c 72fb05        	addw	x,(OFST-27,sp)
4649  d92f 1f03          	ldw	(OFST-29,sp),x
4651                     ; 892         uint16_t n = client->recv_buffer.curr - client->recv_buffer.mem_start - consumed;
4653  d931 1e21          	ldw	x,(OFST+1,sp)
4654  d933 1621          	ldw	y,(OFST+1,sp)
4655  d935 ee1e          	ldw	x,(30,x)
4656  d937 01            	rrwa	x,a
4657  d938 90e01b        	sub	a,(27,y)
4658  d93b 01            	rrwa	x,a
4659  d93c 90e21a        	sbc	a,(26,y)
4660  d93f 01            	rrwa	x,a
4661  d940 72f005        	subw	x,(OFST-27,sp)
4662  d943 1f1f          	ldw	(OFST-1,sp),x
4664                     ; 893         memmove(dest, src, n);
4666  d945 89            	pushw	x
4667  d946 1e05          	ldw	x,(OFST-27,sp)
4668  d948 89            	pushw	x
4669  d949 1e05          	ldw	x,(OFST-27,sp)
4670  d94b cdf643        	call	_memmove
4672  d94e 5b04          	addw	sp,#4
4673                     ; 894         client->recv_buffer.curr -= consumed;
4675  d950 1e21          	ldw	x,(OFST+1,sp)
4676  d952 9093          	ldw	y,x
4677  d954 ee1e          	ldw	x,(30,x)
4678  d956 72f005        	subw	x,(OFST-27,sp)
4679  d959 90ef1e        	ldw	(30,y),x
4680                     ; 895         client->recv_buffer.curr_sz += consumed;
4682  d95c 1e21          	ldw	x,(OFST+1,sp)
4683  d95e 9093          	ldw	y,x
4684  d960 ee20          	ldw	x,(32,x)
4685  d962 72fb05        	addw	x,(OFST-27,sp)
4686  d965 90ef20        	ldw	(32,y),x
4687                     ; 904     return mqtt_recv_ret;
4689  d968 1e07          	ldw	x,(OFST-25,sp)
4691  d96a ccd734        	jra	L403
4694                     .const:	section	.text
4695  9ec9               L5412_control_type_is_valid:
4696  9ec9 00            	dc.b	0
4697  9eca 01            	dc.b	1
4698  9ecb 01            	dc.b	1
4699  9ecc 01            	dc.b	1
4700  9ecd 01            	dc.b	1
4701  9ece 01            	dc.b	1
4702  9ecf 01            	dc.b	1
4703  9ed0 01            	dc.b	1
4704  9ed1 01            	dc.b	1
4705  9ed2 01            	dc.b	1
4706  9ed3 01            	dc.b	1
4707  9ed4 01            	dc.b	1
4708  9ed5 01            	dc.b	1
4709  9ed6 01            	dc.b	1
4710  9ed7 01            	dc.b	1
4711  9ed8 00            	dc.b	0
4712  9ed9               L7412_required_flags:
4713  9ed9 00            	dc.b	0
4714  9eda 00            	dc.b	0
4715  9edb 00            	dc.b	0
4716  9edc 00            	dc.b	0
4717  9edd 00            	dc.b	0
4718  9ede 00            	dc.b	0
4719  9edf 02            	dc.b	2
4720  9ee0 00            	dc.b	0
4721  9ee1 02            	dc.b	2
4722  9ee2 00            	dc.b	0
4723  9ee3 02            	dc.b	2
4724  9ee4 00            	dc.b	0
4725  9ee5 00            	dc.b	0
4726  9ee6 00            	dc.b	0
4727  9ee7 00            	dc.b	0
4728  9ee8 00            	dc.b	0
4729  9ee9               L1512_mask_required_flags:
4730  9ee9 00            	dc.b	0
4731  9eea 0f            	dc.b	15
4732  9eeb 0f            	dc.b	15
4733  9eec 00            	dc.b	0
4734  9eed 0f            	dc.b	15
4735  9eee 0f            	dc.b	15
4736  9eef 0f            	dc.b	15
4737  9ef0 0f            	dc.b	15
4738  9ef1 0f            	dc.b	15
4739  9ef2 0f            	dc.b	15
4740  9ef3 0f            	dc.b	15
4741  9ef4 0f            	dc.b	15
4742  9ef5 0f            	dc.b	15
4743  9ef6 0f            	dc.b	15
4744  9ef7 0f            	dc.b	15
4745  9ef8 00            	dc.b	0
4798                     ; 966 static int16_t mqtt_fixed_header_rule_violation(const struct mqtt_fixed_header *fixed_header)
4798                     ; 967 {
4799                     .text:	section	.text,new
4800  d96d               L3512_mqtt_fixed_header_rule_violation:
4802  d96d 89            	pushw	x
4803       00000002      OFST:	set	2
4806                     ; 972     control_type = fixed_header->control_type;
4808  d96e f6            	ld	a,(x)
4809  d96f 6b02          	ld	(OFST+0,sp),a
4811                     ; 973     control_flags = fixed_header->control_flags;
4813  d971 e604          	ld	a,(4,x)
4814  d973 a40f          	and	a,#15
4815  d975 6b01          	ld	(OFST-1,sp),a
4817                     ; 976     if (control_type_is_valid[control_type] != 0x01) {
4819  d977 5f            	clrw	x
4820  d978 7b02          	ld	a,(OFST+0,sp)
4821  d97a 97            	ld	xl,a
4822  d97b d69ec9        	ld	a,(L5412_control_type_is_valid,x)
4823  d97e 4a            	dec	a
4824  d97f 2705          	jreq	L1022
4825                     ; 977         return MQTT_ERROR_CONTROL_FORBIDDEN_TYPE;
4827  d981 ae8002        	ldw	x,#32770
4829  d984 2017          	jra	L013
4830  d986               L1022:
4831                     ; 981     if(((control_flags ^ required_flags[control_type]) & mask_required_flags[control_type]) == 1) {
4833  d986 7b02          	ld	a,(OFST+0,sp)
4834  d988 5f            	clrw	x
4835  d989 97            	ld	xl,a
4836  d98a 905f          	clrw	y
4837  d98c 9097          	ld	yl,a
4838  d98e 90d69ed9      	ld	a,(L7412_required_flags,y)
4839  d992 1801          	xor	a,(OFST-1,sp)
4840  d994 d49ee9        	and	a,(L1512_mask_required_flags,x)
4841  d997 4a            	dec	a
4842  d998 2606          	jrne	L3022
4843                     ; 982         return MQTT_ERROR_CONTROL_INVALID_FLAGS;
4845  d99a ae8003        	ldw	x,#32771
4847  d99d               L013:
4849  d99d 5b02          	addw	sp,#2
4850  d99f 81            	ret	
4851  d9a0               L3022:
4852                     ; 985     return 0;
4854  d9a0 5f            	clrw	x
4856  d9a1 20fa          	jra	L013
4948                     ; 989 int16_t mqtt_unpack_fixed_header(struct mqtt_response *response, const uint8_t *buf, uint16_t bufsz)
4948                     ; 990 {
4949                     .text:	section	.text,new
4950  d9a3               _mqtt_unpack_fixed_header:
4952  d9a3 89            	pushw	x
4953  d9a4 520a          	subw	sp,#10
4954       0000000a      OFST:	set	10
4957                     ; 992     const uint8_t *start = buf;
4959  d9a6 1e0f          	ldw	x,(OFST+5,sp)
4960  d9a8 1f05          	ldw	(OFST-5,sp),x
4962                     ; 997     if (response == NULL || buf == NULL) {
4964  d9aa 1e0b          	ldw	x,(OFST+1,sp)
4965  d9ac 2704          	jreq	L3522
4967  d9ae 1e0f          	ldw	x,(OFST+5,sp)
4968  d9b0 2605          	jrne	L1522
4969  d9b2               L3522:
4970                     ; 998       return MQTT_ERROR_NULLPTR;
4972  d9b2 ae8001        	ldw	x,#32769
4974  d9b5 2009          	jra	L223
4975  d9b7               L1522:
4976                     ; 1000     fixed_header = &(response->fixed_header);
4978  d9b7 1e0b          	ldw	x,(OFST+1,sp)
4979  d9b9 1f07          	ldw	(OFST-3,sp),x
4981                     ; 1003     if (bufsz == 0) return 0;
4983  d9bb 1e11          	ldw	x,(OFST+7,sp)
4984  d9bd 2604          	jrne	L5522
4987  d9bf               LC019:
4990  d9bf 5f            	clrw	x
4992  d9c0               L223:
4994  d9c0 5b0c          	addw	sp,#12
4995  d9c2 81            	ret	
4996  d9c3               L5522:
4997                     ; 1006     fixed_header->control_type  = (uint8_t)(*buf >> 4);
4999  d9c3 1e0f          	ldw	x,(OFST+5,sp)
5000  d9c5 f6            	ld	a,(x)
5001  d9c6 4e            	swap	a
5002  d9c7 1e07          	ldw	x,(OFST-3,sp)
5003  d9c9 a40f          	and	a,#15
5004  d9cb f7            	ld	(x),a
5005                     ; 1007     fixed_header->control_flags = (uint8_t)(*buf & 0x0F);
5007  d9cc 1e0f          	ldw	x,(OFST+5,sp)
5008  d9ce f6            	ld	a,(x)
5009  d9cf 1e07          	ldw	x,(OFST-3,sp)
5010  d9d1 e804          	xor	a,(4,x)
5011  d9d3 a40f          	and	a,#15
5012  d9d5 e804          	xor	a,(4,x)
5013  d9d7 e704          	ld	(4,x),a
5014                     ; 1010     fixed_header->remaining_length = 0;
5016  d9d9 4f            	clr	a
5017  d9da e708          	ld	(8,x),a
5018  d9dc e707          	ld	(7,x),a
5019  d9de e706          	ld	(6,x),a
5020  d9e0 e705          	ld	(5,x),a
5021                     ; 1012     lshift = 0;
5023  d9e2 5f            	clrw	x
5024  d9e3 1f09          	ldw	(OFST-1,sp),x
5026  d9e5               L7522:
5027                     ; 1015         if(lshift == 28) {
5029  d9e5 1e09          	ldw	x,(OFST-1,sp)
5030  d9e7 a3001c        	cpw	x,#28
5031  d9ea 2605          	jrne	L5622
5032                     ; 1016             return MQTT_ERROR_INVALID_REMAINING_LENGTH;
5034  d9ec ae801a        	ldw	x,#32794
5036  d9ef 20cf          	jra	L223
5037  d9f1               L5622:
5038                     ; 1020         --bufsz;
5040  d9f1 1e11          	ldw	x,(OFST+7,sp)
5041  d9f3 5a            	decw	x
5042  d9f4 1f11          	ldw	(OFST+7,sp),x
5043                     ; 1021         ++buf;
5045  d9f6 1e0f          	ldw	x,(OFST+5,sp)
5046  d9f8 5c            	incw	x
5047  d9f9 1f0f          	ldw	(OFST+5,sp),x
5048                     ; 1022         if (bufsz == 0) return 0;
5050  d9fb 1e11          	ldw	x,(OFST+7,sp)
5053  d9fd 27c0          	jreq	LC019
5054                     ; 1025         fixed_header->remaining_length += (*buf & 0x7F) << lshift;
5056  d9ff 160f          	ldw	y,(OFST+5,sp)
5057  da01 1e07          	ldw	x,(OFST-3,sp)
5058  da03 90f6          	ld	a,(y)
5059  da05 a47f          	and	a,#127
5060  da07 905f          	clrw	y
5061  da09 9097          	ld	yl,a
5062  da0b 7b0a          	ld	a,(OFST+0,sp)
5063  da0d 2705          	jreq	L413
5064  da0f               L613:
5065  da0f 9058          	sllw	y
5066  da11 4a            	dec	a
5067  da12 26fb          	jrne	L613
5068  da14               L413:
5069  da14 cdf88e        	call	c_itoly
5071  da17 1c0005        	addw	x,#5
5072  da1a cdf8fa        	call	c_lgadd
5074                     ; 1026         lshift += 7;
5076  da1d 1e09          	ldw	x,(OFST-1,sp)
5077  da1f 1c0007        	addw	x,#7
5078  da22 1f09          	ldw	(OFST-1,sp),x
5080                     ; 1027     } while(*buf & 0x80); /* while continue bit is set */ 
5082  da24 1e0f          	ldw	x,(OFST+5,sp)
5083  da26 f6            	ld	a,(x)
5084  da27 2bbc          	jrmi	L7522
5085                     ; 1030     --bufsz;
5087  da29 1e11          	ldw	x,(OFST+7,sp)
5088  da2b 5a            	decw	x
5089  da2c 1f11          	ldw	(OFST+7,sp),x
5090                     ; 1031     ++buf;
5092  da2e 1e0f          	ldw	x,(OFST+5,sp)
5093  da30 5c            	incw	x
5094  da31 1f0f          	ldw	(OFST+5,sp),x
5095                     ; 1034     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5097  da33 1e07          	ldw	x,(OFST-3,sp)
5098  da35 cdd96d        	call	L3512_mqtt_fixed_header_rule_violation
5100  da38 1f09          	ldw	(OFST-1,sp),x
5102                     ; 1035     if (errcode) return errcode;
5107  da3a 2684          	jrne	L223
5108                     ; 1038     if (bufsz < fixed_header->remaining_length) return 0;
5110  da3c 1e11          	ldw	x,(OFST+7,sp)
5111  da3e cdfafc        	call	c_uitolx
5113  da41 96            	ldw	x,sp
5114  da42 5c            	incw	x
5115  da43 cdfa9b        	call	c_rtol
5118  da46 1e07          	ldw	x,(OFST-3,sp)
5119  da48 1c0005        	addw	x,#5
5120  da4b cdf935        	call	c_ltor
5122  da4e 96            	ldw	x,sp
5123  da4f 5c            	incw	x
5124  da50 cdf8ca        	call	c_lcmp
5128  da53 2303ccd9bf    	jrugt	LC019
5129                     ; 1041     return buf - start;
5131  da58 1e0f          	ldw	x,(OFST+5,sp)
5132  da5a 72f005        	subw	x,(OFST-5,sp)
5134  da5d ccd9c0        	jra	L223
5214                     	switch	.const
5215  9ef9               L033:
5216  9ef9 00000080      	dc.l	128
5217                     ; 1045 int16_t mqtt_pack_fixed_header(uint8_t *buf, uint16_t bufsz, const struct mqtt_fixed_header *fixed_header)
5217                     ; 1046 {
5218                     .text:	section	.text,new
5219  da60               _mqtt_pack_fixed_header:
5221  da60 89            	pushw	x
5222  da61 520c          	subw	sp,#12
5223       0000000c      OFST:	set	12
5226                     ; 1047     const uint8_t *start = buf;
5228  da63 1f05          	ldw	(OFST-7,sp),x
5230                     ; 1052     if (fixed_header == NULL || buf == NULL) {
5232  da65 1e13          	ldw	x,(OFST+7,sp)
5233  da67 2704          	jreq	L5332
5235  da69 1e0d          	ldw	x,(OFST+1,sp)
5236  da6b 2605          	jrne	L3332
5237  da6d               L5332:
5238                     ; 1053       return MQTT_ERROR_NULLPTR;
5240  da6d ae8001        	ldw	x,#32769
5242  da70 2009          	jra	L233
5243  da72               L3332:
5244                     ; 1057     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5246  da72 1e13          	ldw	x,(OFST+7,sp)
5247  da74 cdd96d        	call	L3512_mqtt_fixed_header_rule_violation
5249  da77 1f07          	ldw	(OFST-5,sp),x
5251                     ; 1058     if (errcode) return errcode;
5253  da79 2703          	jreq	L7332
5257  da7b               L233:
5259  da7b 5b0e          	addw	sp,#14
5260  da7d 81            	ret	
5261  da7e               L7332:
5262                     ; 1061     if (bufsz == 0) return 0;
5264  da7e 1e11          	ldw	x,(OFST+5,sp)
5265  da80 2603          	jrne	L1432
5268  da82 5f            	clrw	x
5270  da83 20f6          	jra	L233
5271  da85               L1432:
5272                     ; 1064     *buf =  (uint8_t)((fixed_header->control_type << 4) & 0xF0);
5274  da85 1e13          	ldw	x,(OFST+7,sp)
5275  da87 f6            	ld	a,(x)
5276  da88 97            	ld	xl,a
5277  da89 a610          	ld	a,#16
5278  da8b 42            	mul	x,a
5279  da8c 9f            	ld	a,xl
5280  da8d 1e0d          	ldw	x,(OFST+1,sp)
5281  da8f a4f0          	and	a,#240
5282  da91 f7            	ld	(x),a
5283                     ; 1065     *buf |= (uint8_t)(fixed_header->control_flags & 0x0F);
5285  da92 1613          	ldw	y,(OFST+7,sp)
5286  da94 90e604        	ld	a,(4,y)
5287  da97 a40f          	and	a,#15
5288  da99 fa            	or	a,(x)
5289  da9a f7            	ld	(x),a
5290                     ; 1067     remaining_length = fixed_header->remaining_length;
5292  da9b 93            	ldw	x,y
5293  da9c ee07          	ldw	x,(7,x)
5294  da9e 1f0b          	ldw	(OFST-1,sp),x
5295  daa0 93            	ldw	x,y
5296  daa1 ee05          	ldw	x,(5,x)
5297  daa3 1f09          	ldw	(OFST-3,sp),x
5299  daa5               L3432:
5300                     ; 1075         --bufsz;
5302  daa5 1e11          	ldw	x,(OFST+5,sp)
5303  daa7 5a            	decw	x
5304  daa8 1f11          	ldw	(OFST+5,sp),x
5305                     ; 1076         ++buf;
5307  daaa 1e0d          	ldw	x,(OFST+1,sp)
5308  daac 5c            	incw	x
5309  daad 1f0d          	ldw	(OFST+1,sp),x
5310                     ; 1077         if (bufsz == 0) return 0;
5312  daaf 1e11          	ldw	x,(OFST+5,sp)
5313  dab1 2603          	jrne	L1532
5316  dab3 5f            	clrw	x
5318  dab4 20c5          	jra	L233
5319  dab6               L1532:
5320                     ; 1080         *buf  = (uint8_t)(remaining_length & 0x7F);
5322  dab6 7b0c          	ld	a,(OFST+0,sp)
5323  dab8 1e0d          	ldw	x,(OFST+1,sp)
5324  daba a47f          	and	a,#127
5325  dabc f7            	ld	(x),a
5326                     ; 1081         if(remaining_length > 127) *buf |= 0x80;
5328  dabd 96            	ldw	x,sp
5329  dabe 1c0009        	addw	x,#OFST-3
5330  dac1 cdf935        	call	c_ltor
5332  dac4 ae9ef9        	ldw	x,#L033
5333  dac7 cdf8ca        	call	c_lcmp
5335  daca 2506          	jrult	L3532
5338  dacc 1e0d          	ldw	x,(OFST+1,sp)
5339  dace f6            	ld	a,(x)
5340  dacf aa80          	or	a,#128
5341  dad1 f7            	ld	(x),a
5342  dad2               L3532:
5343                     ; 1082         remaining_length = remaining_length >> 7;
5345  dad2 96            	ldw	x,sp
5346  dad3 1c0009        	addw	x,#OFST-3
5347  dad6 a607          	ld	a,#7
5348  dad8 cdf927        	call	c_lgursh
5351                     ; 1083     } while(*buf & 0x80);
5353  dadb 1e0d          	ldw	x,(OFST+1,sp)
5354  dadd f6            	ld	a,(x)
5355  dade 2bc5          	jrmi	L3432
5356                     ; 1086     --bufsz;
5358  dae0 1e11          	ldw	x,(OFST+5,sp)
5359  dae2 5a            	decw	x
5360  dae3 1f11          	ldw	(OFST+5,sp),x
5361                     ; 1087     ++buf;
5363  dae5 1e0d          	ldw	x,(OFST+1,sp)
5364  dae7 5c            	incw	x
5365  dae8 1f0d          	ldw	(OFST+1,sp),x
5366                     ; 1090     if (bufsz < fixed_header->remaining_length) return 0;
5368  daea 1e11          	ldw	x,(OFST+5,sp)
5369  daec cdfafc        	call	c_uitolx
5371  daef 96            	ldw	x,sp
5372  daf0 5c            	incw	x
5373  daf1 cdfa9b        	call	c_rtol
5376  daf4 1e13          	ldw	x,(OFST+7,sp)
5377  daf6 1c0005        	addw	x,#5
5378  daf9 cdf935        	call	c_ltor
5380  dafc 96            	ldw	x,sp
5381  dafd 5c            	incw	x
5382  dafe cdf8ca        	call	c_lcmp
5384  db01 2304          	jrule	L5532
5387  db03 5f            	clrw	x
5389  db04 ccda7b        	jra	L233
5390  db07               L5532:
5391                     ; 1093     return buf - start;
5393  db07 1e0d          	ldw	x,(OFST+1,sp)
5394  db09 72f005        	subw	x,(OFST-7,sp)
5396  db0c ccda7b        	jra	L233
5549                     ; 1098 int16_t mqtt_pack_connection_request(uint8_t* buf, uint16_t bufsz,
5549                     ; 1099                                      const char* client_id,
5549                     ; 1100                                      const char* will_topic,
5549                     ; 1101                                      const void* will_message,
5549                     ; 1102                                      uint16_t will_message_size,
5549                     ; 1103                                      const char* user_name,
5549                     ; 1104                                      const char* password,
5549                     ; 1105                                      uint8_t connect_flags,
5549                     ; 1106                                      uint16_t keep_alive)
5549                     ; 1107 { 
5550                     .text:	section	.text,new
5551  db0f               _mqtt_pack_connection_request:
5553  db0f 89            	pushw	x
5554  db10 520d          	subw	sp,#13
5555       0000000d      OFST:	set	13
5558                     ; 1110     const uint8_t *const start = buf;
5560  db12 1f01          	ldw	(OFST-12,sp),x
5562                     ; 1114     fixed_header.control_type = MQTT_CONTROL_CONNECT;
5564  db14 a601          	ld	a,#1
5565  db16 6b03          	ld	(OFST-10,sp),a
5567                     ; 1115     fixed_header.control_flags = 0x00;
5569  db18 7b07          	ld	a,(OFST-6,sp)
5570  db1a a4f0          	and	a,#240
5571  db1c 6b07          	ld	(OFST-6,sp),a
5573                     ; 1118     connect_flags = (uint8_t)(connect_flags & ~MQTT_CONNECT_RESERVED);
5575  db1e 7b20          	ld	a,(OFST+19,sp)
5576  db20 a4fe          	and	a,#254
5577  db22 6b20          	ld	(OFST+19,sp),a
5578                     ; 1121     remaining_length = 10; /* size of variable header */
5580  db24 ae000a        	ldw	x,#10
5581  db27 1f0c          	ldw	(OFST-1,sp),x
5583                     ; 1133     remaining_length += __mqtt_packed_cstrlen(client_id);
5585  db29 1e14          	ldw	x,(OFST+7,sp)
5586  db2b cdf6a8        	call	_strlen
5588  db2e 1c0002        	addw	x,#2
5589  db31 72fb0c        	addw	x,(OFST-1,sp)
5590  db34 1f0c          	ldw	(OFST-1,sp),x
5592                     ; 1163     connect_flags |= MQTT_CONNECT_WILL_FLAG;
5594  db36 7b20          	ld	a,(OFST+19,sp)
5595                     ; 1164     connect_flags |= MQTT_CONNECT_WILL_RETAIN;
5597  db38 aa24          	or	a,#36
5598  db3a 6b20          	ld	(OFST+19,sp),a
5599                     ; 1165     remaining_length += __mqtt_packed_cstrlen(will_topic);
5601  db3c 1e16          	ldw	x,(OFST+9,sp)
5602  db3e cdf6a8        	call	_strlen
5604  db41 1c0002        	addw	x,#2
5605  db44 72fb0c        	addw	x,(OFST-1,sp)
5606  db47 1f0c          	ldw	(OFST-1,sp),x
5608                     ; 1166     remaining_length += 2 + will_message_size; /* size of will_message */
5610  db49 1e1a          	ldw	x,(OFST+13,sp)
5611  db4b 1c0002        	addw	x,#2
5612  db4e 72fb0c        	addw	x,(OFST-1,sp)
5613  db51 1f0c          	ldw	(OFST-1,sp),x
5615                     ; 1168     if (user_name != NULL) {
5617  db53 1e1c          	ldw	x,(OFST+15,sp)
5618  db55 2713          	jreq	L5442
5619                     ; 1170         connect_flags |= MQTT_CONNECT_USER_NAME;
5621  db57 7b20          	ld	a,(OFST+19,sp)
5622  db59 aa80          	or	a,#128
5623  db5b 6b20          	ld	(OFST+19,sp),a
5624                     ; 1171         remaining_length += __mqtt_packed_cstrlen(user_name);
5626  db5d cdf6a8        	call	_strlen
5628  db60 1c0002        	addw	x,#2
5629  db63 72fb0c        	addw	x,(OFST-1,sp)
5630  db66 1f0c          	ldw	(OFST-1,sp),x
5633  db68 2006          	jra	L7442
5634  db6a               L5442:
5635                     ; 1173     else connect_flags &= (uint8_t)(~MQTT_CONNECT_USER_NAME);
5637  db6a 7b20          	ld	a,(OFST+19,sp)
5638  db6c a47f          	and	a,#127
5639  db6e 6b20          	ld	(OFST+19,sp),a
5640  db70               L7442:
5641                     ; 1175     if (password != NULL) {
5643  db70 1e1e          	ldw	x,(OFST+17,sp)
5644  db72 2713          	jreq	L1542
5645                     ; 1177         connect_flags |= MQTT_CONNECT_PASSWORD;
5647  db74 7b20          	ld	a,(OFST+19,sp)
5648  db76 aa40          	or	a,#64
5649  db78 6b20          	ld	(OFST+19,sp),a
5650                     ; 1178         remaining_length += __mqtt_packed_cstrlen(password);
5652  db7a cdf6a8        	call	_strlen
5654  db7d 1c0002        	addw	x,#2
5655  db80 72fb0c        	addw	x,(OFST-1,sp)
5656  db83 1f0c          	ldw	(OFST-1,sp),x
5659  db85 2008          	jra	L3542
5660  db87               L1542:
5661                     ; 1180     else connect_flags &= (uint8_t)(~MQTT_CONNECT_PASSWORD);
5663  db87 7b20          	ld	a,(OFST+19,sp)
5664  db89 a4bf          	and	a,#191
5665  db8b 6b20          	ld	(OFST+19,sp),a
5666  db8d 1e0c          	ldw	x,(OFST-1,sp)
5667  db8f               L3542:
5668                     ; 1183     fixed_header.remaining_length = remaining_length;
5670  db8f cdfafc        	call	c_uitolx
5672  db92 96            	ldw	x,sp
5673  db93 1c0008        	addw	x,#OFST-5
5674  db96 cdfa9b        	call	c_rtol
5677                     ; 1186     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
5679  db99 96            	ldw	x,sp
5680  db9a 1c0003        	addw	x,#OFST-10
5681  db9d 89            	pushw	x
5682  db9e 1e14          	ldw	x,(OFST+7,sp)
5683  dba0 89            	pushw	x
5684  dba1 1e12          	ldw	x,(OFST+5,sp)
5685  dba3 cdda60        	call	_mqtt_pack_fixed_header
5687  dba6 5b04          	addw	sp,#4
5688  dba8 1f0c          	ldw	(OFST-1,sp),x
5690                     ; 1187     if (rv <= 0) {
5692  dbaa 9c            	rvf	
5693                     ; 1188       return rv; /* something went wrong */
5696  dbab 2d1b          	jrsle	L073
5697                     ; 1191     buf += rv;
5699  dbad 1e0e          	ldw	x,(OFST+1,sp)
5700  dbaf 72fb0c        	addw	x,(OFST-1,sp)
5701  dbb2 1f0e          	ldw	(OFST+1,sp),x
5702                     ; 1192     bufsz -= rv;
5704  dbb4 1e12          	ldw	x,(OFST+5,sp)
5705  dbb6 72f00c        	subw	x,(OFST-1,sp)
5706  dbb9 1f12          	ldw	(OFST+5,sp),x
5707                     ; 1195     if (bufsz < fixed_header.remaining_length) return 0;
5709  dbbb cdfafc        	call	c_uitolx
5711  dbbe 96            	ldw	x,sp
5712  dbbf 1c0008        	addw	x,#OFST-5
5713  dbc2 cdf8ca        	call	c_lcmp
5715  dbc5 2404          	jruge	L7542
5718  dbc7 5f            	clrw	x
5720  dbc8               L073:
5722  dbc8 5b0f          	addw	sp,#15
5723  dbca 81            	ret	
5724  dbcb               L7542:
5725                     ; 1198     *buf++ = 0x00;
5727  dbcb 1e0e          	ldw	x,(OFST+1,sp)
5728  dbcd 7f            	clr	(x)
5729  dbce 5c            	incw	x
5730                     ; 1199     *buf++ = 0x04;
5732  dbcf a604          	ld	a,#4
5733  dbd1 f7            	ld	(x),a
5734  dbd2 5c            	incw	x
5735                     ; 1200     *buf++ = (uint8_t) 'M';
5737  dbd3 a64d          	ld	a,#77
5738  dbd5 f7            	ld	(x),a
5739  dbd6 5c            	incw	x
5740                     ; 1201     *buf++ = (uint8_t) 'Q';
5742  dbd7 a651          	ld	a,#81
5743  dbd9 f7            	ld	(x),a
5744  dbda 5c            	incw	x
5745                     ; 1202     *buf++ = (uint8_t) 'T';
5747  dbdb a654          	ld	a,#84
5748  dbdd f7            	ld	(x),a
5749  dbde 5c            	incw	x
5750                     ; 1203     *buf++ = (uint8_t) 'T';
5752  dbdf f7            	ld	(x),a
5753  dbe0 5c            	incw	x
5754                     ; 1204     *buf++ = MQTT_PROTOCOL_LEVEL;
5756  dbe1 a604          	ld	a,#4
5757  dbe3 f7            	ld	(x),a
5758  dbe4 5c            	incw	x
5759                     ; 1205     *buf++ = connect_flags;
5761  dbe5 7b20          	ld	a,(OFST+19,sp)
5762  dbe7 f7            	ld	(x),a
5763  dbe8 5c            	incw	x
5764  dbe9 1f0e          	ldw	(OFST+1,sp),x
5765                     ; 1206     buf += __mqtt_pack_uint16(buf, keep_alive);
5767  dbeb 1e21          	ldw	x,(OFST+20,sp)
5768  dbed 89            	pushw	x
5769  dbee 1e10          	ldw	x,(OFST+3,sp)
5770  dbf0 cde3e3        	call	___mqtt_pack_uint16
5772  dbf3 5b02          	addw	sp,#2
5773  dbf5 72fb0e        	addw	x,(OFST+1,sp)
5774  dbf8 1f0e          	ldw	(OFST+1,sp),x
5775                     ; 1209     buf += __mqtt_pack_str(buf, client_id);
5777  dbfa 1e14          	ldw	x,(OFST+7,sp)
5778  dbfc 89            	pushw	x
5779  dbfd 1e10          	ldw	x,(OFST+3,sp)
5780  dbff cde424        	call	___mqtt_pack_str
5782  dc02 5b02          	addw	sp,#2
5783  dc04 72fb0e        	addw	x,(OFST+1,sp)
5784  dc07 1f0e          	ldw	(OFST+1,sp),x
5785                     ; 1210     if (connect_flags & MQTT_CONNECT_WILL_FLAG) {
5787  dc09 7b20          	ld	a,(OFST+19,sp)
5788  dc0b a504          	bcp	a,#4
5789  dc0d 273c          	jreq	L1642
5790                     ; 1211         buf += __mqtt_pack_str(buf, will_topic);
5792  dc0f 1e16          	ldw	x,(OFST+9,sp)
5793  dc11 89            	pushw	x
5794  dc12 1e10          	ldw	x,(OFST+3,sp)
5795  dc14 cde424        	call	___mqtt_pack_str
5797  dc17 5b02          	addw	sp,#2
5798  dc19 72fb0e        	addw	x,(OFST+1,sp)
5799  dc1c 1f0e          	ldw	(OFST+1,sp),x
5800                     ; 1212         buf += __mqtt_pack_uint16(buf, (uint16_t)will_message_size);
5802  dc1e 1e1a          	ldw	x,(OFST+13,sp)
5803  dc20 89            	pushw	x
5804  dc21 1e10          	ldw	x,(OFST+3,sp)
5805  dc23 cde3e3        	call	___mqtt_pack_uint16
5807  dc26 5b02          	addw	sp,#2
5808  dc28 72fb0e        	addw	x,(OFST+1,sp)
5809  dc2b 1f0e          	ldw	(OFST+1,sp),x
5810                     ; 1213         memcpy(buf, will_message, will_message_size);
5812  dc2d bf04          	ldw	c_x,x
5813  dc2f 1618          	ldw	y,(OFST+11,sp)
5814  dc31 90bf07        	ldw	c_y,y
5815  dc34 1e1a          	ldw	x,(OFST+13,sp)
5816  dc36 270a          	jreq	L063
5817  dc38               L263:
5818  dc38 5a            	decw	x
5819  dc39 92d607        	ld	a,([c_y.w],x)
5820  dc3c 92d704        	ld	([c_x.w],x),a
5821  dc3f 5d            	tnzw	x
5822  dc40 26f6          	jrne	L263
5823  dc42               L063:
5824                     ; 1214         buf += will_message_size;
5826  dc42 1e0e          	ldw	x,(OFST+1,sp)
5827  dc44 72fb1a        	addw	x,(OFST+13,sp)
5828  dc47 1f0e          	ldw	(OFST+1,sp),x
5829  dc49 7b20          	ld	a,(OFST+19,sp)
5830  dc4b               L1642:
5831                     ; 1217     if (connect_flags & MQTT_CONNECT_USER_NAME) buf += __mqtt_pack_str(buf, user_name);
5833  dc4b a580          	bcp	a,#128
5834  dc4d 2711          	jreq	L3642
5837  dc4f 1e1c          	ldw	x,(OFST+15,sp)
5838  dc51 89            	pushw	x
5839  dc52 1e10          	ldw	x,(OFST+3,sp)
5840  dc54 cde424        	call	___mqtt_pack_str
5842  dc57 5b02          	addw	sp,#2
5843  dc59 72fb0e        	addw	x,(OFST+1,sp)
5844  dc5c 1f0e          	ldw	(OFST+1,sp),x
5845  dc5e 7b20          	ld	a,(OFST+19,sp)
5846  dc60               L3642:
5847                     ; 1219     if (connect_flags & MQTT_CONNECT_PASSWORD) buf += __mqtt_pack_str(buf, password);
5849  dc60 a540          	bcp	a,#64
5850  dc62 270f          	jreq	L5642
5853  dc64 1e1e          	ldw	x,(OFST+17,sp)
5854  dc66 89            	pushw	x
5855  dc67 1e10          	ldw	x,(OFST+3,sp)
5856  dc69 cde424        	call	___mqtt_pack_str
5858  dc6c 5b02          	addw	sp,#2
5859  dc6e 72fb0e        	addw	x,(OFST+1,sp)
5860  dc71 1f0e          	ldw	(OFST+1,sp),x
5861  dc73               L5642:
5862                     ; 1222     return buf - start;
5864  dc73 72f001        	subw	x,(OFST-12,sp)
5866  dc76 ccdbc8        	jra	L073
5936                     	switch	.const
5937  9efd               L473:
5938  9efd 00000002      	dc.l	2
5939                     ; 1227 int16_t mqtt_unpack_connack_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
5939                     ; 1228 {
5940                     .text:	section	.text,new
5941  dc79               _mqtt_unpack_connack_response:
5943  dc79 89            	pushw	x
5944  dc7a 5204          	subw	sp,#4
5945       00000004      OFST:	set	4
5948                     ; 1229     const uint8_t *const start = buf;
5950  dc7c 1e09          	ldw	x,(OFST+5,sp)
5951  dc7e 1f01          	ldw	(OFST-3,sp),x
5953                     ; 1233     if (mqtt_response->fixed_header.remaining_length != 2) {
5955  dc80 1e05          	ldw	x,(OFST+1,sp)
5956  dc82 1c0005        	addw	x,#5
5957  dc85 cdf935        	call	c_ltor
5959  dc88 ae9efd        	ldw	x,#L473
5960  dc8b cdf8ca        	call	c_lcmp
5962  dc8e 2705          	jreq	L5252
5963                     ; 1234       return MQTT_ERROR_MALFORMED_RESPONSE;
5965  dc90 ae800c        	ldw	x,#32780
5967  dc93 2011          	jra	L673
5968  dc95               L5252:
5969                     ; 1237     response = &(mqtt_response->decoded.connack);
5971  dc95 1e05          	ldw	x,(OFST+1,sp)
5972  dc97 1c0009        	addw	x,#9
5973  dc9a 1f03          	ldw	(OFST-1,sp),x
5975                     ; 1239     if (*buf & 0xFE) {
5977  dc9c 1e09          	ldw	x,(OFST+5,sp)
5978  dc9e f6            	ld	a,(x)
5979  dc9f a5fe          	bcp	a,#254
5980  dca1 2706          	jreq	L7252
5981                     ; 1240       return MQTT_ERROR_CONNACK_FORBIDDEN_FLAGS; /* only bit 1 can be set */
5983  dca3 ae8008        	ldw	x,#32776
5985  dca6               L673:
5987  dca6 5b06          	addw	sp,#6
5988  dca8 81            	ret	
5989  dca9               L7252:
5990                     ; 1242     else response->session_present_flag = *buf++;
5992  dca9 5c            	incw	x
5993  dcaa 1f09          	ldw	(OFST+5,sp),x
5994  dcac 1e03          	ldw	x,(OFST-1,sp)
5995  dcae f7            	ld	(x),a
5996                     ; 1244     if (*buf > 5u) {
5998  dcaf 1e09          	ldw	x,(OFST+5,sp)
5999  dcb1 f6            	ld	a,(x)
6000  dcb2 a106          	cp	a,#6
6001  dcb4 2505          	jrult	L3352
6002                     ; 1245       return MQTT_ERROR_CONNACK_FORBIDDEN_CODE; /* only bit 1 can be set */
6004  dcb6 ae8009        	ldw	x,#32777
6006  dcb9 20eb          	jra	L673
6007  dcbb               L3352:
6008                     ; 1247     else response->return_code = (enum MQTTConnackReturnCode) *buf++;
6010  dcbb 5c            	incw	x
6011  dcbc 1f09          	ldw	(OFST+5,sp),x
6012  dcbe 1e03          	ldw	x,(OFST-1,sp)
6013  dcc0 e701          	ld	(1,x),a
6014                     ; 1249     return buf - start;
6016  dcc2 1e09          	ldw	x,(OFST+5,sp)
6017  dcc4 72f001        	subw	x,(OFST-3,sp)
6019  dcc7 20dd          	jra	L673
6073                     ; 1254 int16_t mqtt_pack_disconnect(uint8_t *buf, uint16_t bufsz)
6073                     ; 1255 {
6074                     .text:	section	.text,new
6075  dcc9               _mqtt_pack_disconnect:
6077  dcc9 89            	pushw	x
6078  dcca 5209          	subw	sp,#9
6079       00000009      OFST:	set	9
6082                     ; 1257     fixed_header.control_type = MQTT_CONTROL_DISCONNECT;
6084  dccc a60e          	ld	a,#14
6085  dcce 6b01          	ld	(OFST-8,sp),a
6087                     ; 1258     fixed_header.control_flags = 0;
6089  dcd0 7b05          	ld	a,(OFST-4,sp)
6090  dcd2 a4f0          	and	a,#240
6091  dcd4 6b05          	ld	(OFST-4,sp),a
6093                     ; 1259     fixed_header.remaining_length = 0;
6095  dcd6 5f            	clrw	x
6096  dcd7 1f08          	ldw	(OFST-1,sp),x
6097  dcd9 1f06          	ldw	(OFST-3,sp),x
6099                     ; 1260     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6101  dcdb 96            	ldw	x,sp
6102  dcdc 5c            	incw	x
6103  dcdd 89            	pushw	x
6104  dcde 1e10          	ldw	x,(OFST+7,sp)
6105  dce0 89            	pushw	x
6106  dce1 1e0e          	ldw	x,(OFST+5,sp)
6107  dce3 cdda60        	call	_mqtt_pack_fixed_header
6109  dce6 5b0f          	addw	sp,#15
6112  dce8 81            	ret	
6166                     ; 1265 int16_t mqtt_pack_ping_request(uint8_t *buf, uint16_t bufsz)
6166                     ; 1266 {
6167                     .text:	section	.text,new
6168  dce9               _mqtt_pack_ping_request:
6170  dce9 89            	pushw	x
6171  dcea 5209          	subw	sp,#9
6172       00000009      OFST:	set	9
6175                     ; 1268     fixed_header.control_type = MQTT_CONTROL_PINGREQ;
6177  dcec a60c          	ld	a,#12
6178  dcee 6b01          	ld	(OFST-8,sp),a
6180                     ; 1269     fixed_header.control_flags = 0;
6182  dcf0 7b05          	ld	a,(OFST-4,sp)
6183  dcf2 a4f0          	and	a,#240
6184  dcf4 6b05          	ld	(OFST-4,sp),a
6186                     ; 1270     fixed_header.remaining_length = 0;
6188  dcf6 5f            	clrw	x
6189  dcf7 1f08          	ldw	(OFST-1,sp),x
6190  dcf9 1f06          	ldw	(OFST-3,sp),x
6192                     ; 1271     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6194  dcfb 96            	ldw	x,sp
6195  dcfc 5c            	incw	x
6196  dcfd 89            	pushw	x
6197  dcfe 1e10          	ldw	x,(OFST+7,sp)
6198  dd00 89            	pushw	x
6199  dd01 1e0e          	ldw	x,(OFST+5,sp)
6200  dd03 cdda60        	call	_mqtt_pack_fixed_header
6202  dd06 5b0f          	addw	sp,#15
6205  dd08 81            	ret	
6337                     ; 1276 int16_t mqtt_pack_publish_request(uint8_t *buf, uint16_t bufsz,
6337                     ; 1277                                   const char* topic_name,
6337                     ; 1278                                   uint16_t packet_id,
6337                     ; 1279                                   const void* application_message,
6337                     ; 1280                                   uint16_t application_message_size,
6337                     ; 1281                                   uint8_t publish_flags)
6337                     ; 1282 {
6338                     .text:	section	.text,new
6339  dd09               _mqtt_pack_publish_request:
6341  dd09 89            	pushw	x
6342  dd0a 5212          	subw	sp,#18
6343       00000012      OFST:	set	18
6346                     ; 1283     const uint8_t *const start = buf;
6348  dd0c 1f01          	ldw	(OFST-17,sp),x
6350                     ; 1290     if(buf == NULL || topic_name == NULL) {
6352  dd0e 2704          	jreq	L5662
6354  dd10 1e19          	ldw	x,(OFST+7,sp)
6355  dd12 2605          	jrne	L3662
6356  dd14               L5662:
6357                     ; 1291       return MQTT_ERROR_NULLPTR;
6359  dd14 ae8001        	ldw	x,#32769
6361  dd17 204f          	jra	L624
6362  dd19               L3662:
6363                     ; 1295     inspected_qos = (uint8_t)((publish_flags & MQTT_PUBLISH_QOS_MASK) >> 1); /* mask */
6365  dd19 7b21          	ld	a,(OFST+15,sp)
6366  dd1b a406          	and	a,#6
6367  dd1d 44            	srl	a
6368  dd1e 6b12          	ld	(OFST+0,sp),a
6370                     ; 1298     fixed_header.control_type = MQTT_CONTROL_PUBLISH;
6372  dd20 a603          	ld	a,#3
6373  dd22 6b03          	ld	(OFST-15,sp),a
6375                     ; 1301     remaining_length = (uint32_t)__mqtt_packed_cstrlen(topic_name);
6377  dd24 cdf6a8        	call	_strlen
6379  dd27 1c0002        	addw	x,#2
6380  dd2a cdfafc        	call	c_uitolx
6382  dd2d 96            	ldw	x,sp
6383  dd2e 1c000e        	addw	x,#OFST-4
6384  dd31 cdfa9b        	call	c_rtol
6387                     ; 1302     if (inspected_qos > 0) remaining_length += 2;
6389  dd34 7b12          	ld	a,(OFST+0,sp)
6390  dd36 2709          	jreq	L7662
6393  dd38 96            	ldw	x,sp
6394  dd39 1c000e        	addw	x,#OFST-4
6395  dd3c a602          	ld	a,#2
6396  dd3e cdf8ea        	call	c_lgadc
6399  dd41               L7662:
6400                     ; 1303     remaining_length += (uint32_t)application_message_size;
6402  dd41 1e1f          	ldw	x,(OFST+13,sp)
6403  dd43 cdfafc        	call	c_uitolx
6405  dd46 96            	ldw	x,sp
6406  dd47 1c000e        	addw	x,#OFST-4
6407  dd4a cdf8fa        	call	c_lgadd
6410                     ; 1304     fixed_header.remaining_length = remaining_length;
6412  dd4d 1e10          	ldw	x,(OFST-2,sp)
6413  dd4f 1f0a          	ldw	(OFST-8,sp),x
6414  dd51 1e0e          	ldw	x,(OFST-4,sp)
6415  dd53 1f08          	ldw	(OFST-10,sp),x
6417                     ; 1307     if (inspected_qos == 0) publish_flags &= (uint8_t)(~MQTT_PUBLISH_DUP);
6419  dd55 7b12          	ld	a,(OFST+0,sp)
6420  dd57 2608          	jrne	L1762
6423  dd59 7b21          	ld	a,(OFST+15,sp)
6424  dd5b a4f7          	and	a,#247
6425  dd5d 6b21          	ld	(OFST+15,sp),a
6426  dd5f 7b12          	ld	a,(OFST+0,sp)
6427  dd61               L1762:
6428                     ; 1310     if (inspected_qos == 3) {
6430  dd61 a103          	cp	a,#3
6431  dd63 2606          	jrne	L3762
6432                     ; 1311       return MQTT_ERROR_PUBLISH_FORBIDDEN_QOS;
6434  dd65 ae800a        	ldw	x,#32778
6436  dd68               L624:
6438  dd68 5b14          	addw	sp,#20
6439  dd6a 81            	ret	
6440  dd6b               L3762:
6441                     ; 1313     fixed_header.control_flags = publish_flags;
6443  dd6b 7b21          	ld	a,(OFST+15,sp)
6444  dd6d 1807          	xor	a,(OFST-11,sp)
6445  dd6f a40f          	and	a,#15
6446  dd71 1807          	xor	a,(OFST-11,sp)
6447  dd73 6b07          	ld	(OFST-11,sp),a
6449                     ; 1316     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6451  dd75 96            	ldw	x,sp
6452  dd76 1c0003        	addw	x,#OFST-15
6453  dd79 89            	pushw	x
6454  dd7a 1e19          	ldw	x,(OFST+7,sp)
6455  dd7c 89            	pushw	x
6456  dd7d 1e17          	ldw	x,(OFST+5,sp)
6457  dd7f cdda60        	call	_mqtt_pack_fixed_header
6459  dd82 5b04          	addw	sp,#4
6460  dd84 1f0c          	ldw	(OFST-6,sp),x
6462                     ; 1317     if (rv <= 0) return rv; /* something went wrong */
6464  dd86 9c            	rvf	
6468  dd87 2ddf          	jrsle	L624
6469                     ; 1319     buf += rv;
6471  dd89 1e13          	ldw	x,(OFST+1,sp)
6472  dd8b 72fb0c        	addw	x,(OFST-6,sp)
6473  dd8e 1f13          	ldw	(OFST+1,sp),x
6474                     ; 1320     bufsz -= rv;
6476  dd90 1e17          	ldw	x,(OFST+5,sp)
6477  dd92 72f00c        	subw	x,(OFST-6,sp)
6478  dd95 1f17          	ldw	(OFST+5,sp),x
6479                     ; 1323     if (bufsz < remaining_length) return 0;
6481  dd97 cdfafc        	call	c_uitolx
6483  dd9a 96            	ldw	x,sp
6484  dd9b 1c000e        	addw	x,#OFST-4
6485  dd9e cdf8ca        	call	c_lcmp
6487  dda1 2403          	jruge	L7762
6490  dda3 5f            	clrw	x
6492  dda4 20c2          	jra	L624
6493  dda6               L7762:
6494                     ; 1326     buf += __mqtt_pack_str(buf, topic_name);
6496  dda6 1e19          	ldw	x,(OFST+7,sp)
6497  dda8 89            	pushw	x
6498  dda9 1e15          	ldw	x,(OFST+3,sp)
6499  ddab cde424        	call	___mqtt_pack_str
6501  ddae 5b02          	addw	sp,#2
6502  ddb0 72fb13        	addw	x,(OFST+1,sp)
6503  ddb3 1f13          	ldw	(OFST+1,sp),x
6504                     ; 1327     if (inspected_qos > 0) buf += __mqtt_pack_uint16(buf, packet_id);
6506  ddb5 7b12          	ld	a,(OFST+0,sp)
6507  ddb7 270f          	jreq	L1072
6510  ddb9 1e1b          	ldw	x,(OFST+9,sp)
6511  ddbb 89            	pushw	x
6512  ddbc 1e15          	ldw	x,(OFST+3,sp)
6513  ddbe cde3e3        	call	___mqtt_pack_uint16
6515  ddc1 5b02          	addw	sp,#2
6516  ddc3 72fb13        	addw	x,(OFST+1,sp)
6517  ddc6 1f13          	ldw	(OFST+1,sp),x
6518  ddc8               L1072:
6519                     ; 1330     memcpy(buf, application_message, application_message_size);
6521  ddc8 bf04          	ldw	c_x,x
6522  ddca 161d          	ldw	y,(OFST+11,sp)
6523  ddcc 90bf07        	ldw	c_y,y
6524  ddcf 1e1f          	ldw	x,(OFST+13,sp)
6525  ddd1 270a          	jreq	L224
6526  ddd3               L424:
6527  ddd3 5a            	decw	x
6528  ddd4 92d607        	ld	a,([c_y.w],x)
6529  ddd7 92d704        	ld	([c_x.w],x),a
6530  ddda 5d            	tnzw	x
6531  dddb 26f6          	jrne	L424
6532  dddd               L224:
6533                     ; 1331     buf += application_message_size;
6535  dddd 1e13          	ldw	x,(OFST+1,sp)
6536  dddf 72fb1f        	addw	x,(OFST+13,sp)
6537  dde2 1f13          	ldw	(OFST+1,sp),x
6538                     ; 1333     return buf - start;
6540  dde4 72f001        	subw	x,(OFST-17,sp)
6542  dde7 ccdd68        	jra	L624
6625                     	switch	.const
6626  9f01               L234:
6627  9f01 00000004      	dc.l	4
6628                     ; 1337 int16_t mqtt_unpack_publish_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
6628                     ; 1338 {    
6629                     .text:	section	.text,new
6630  ddea               _mqtt_unpack_publish_response:
6632  ddea 89            	pushw	x
6633  ddeb 5206          	subw	sp,#6
6634       00000006      OFST:	set	6
6637                     ; 1339     const uint8_t *const start = buf;
6639  dded 1e0b          	ldw	x,(OFST+5,sp)
6640  ddef 1f01          	ldw	(OFST-5,sp),x
6642                     ; 1343     fixed_header = &(mqtt_response->fixed_header);
6644  ddf1 1e07          	ldw	x,(OFST+1,sp)
6645  ddf3 1f03          	ldw	(OFST-3,sp),x
6647                     ; 1344     response = &(mqtt_response->decoded.publish);
6649  ddf5 1c0009        	addw	x,#9
6650  ddf8 1f05          	ldw	(OFST-1,sp),x
6652                     ; 1347     response->dup_flag = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_DUP) >> 3);
6654  ddfa 1e03          	ldw	x,(OFST-3,sp)
6655  ddfc e604          	ld	a,(4,x)
6656  ddfe a40f          	and	a,#15
6657  de00 44            	srl	a
6658  de01 44            	srl	a
6659  de02 1e05          	ldw	x,(OFST-1,sp)
6660  de04 44            	srl	a
6661  de05 f7            	ld	(x),a
6662                     ; 1348     response->qos_level = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_QOS_MASK) >> 1);
6664  de06 1e03          	ldw	x,(OFST-3,sp)
6665  de08 e604          	ld	a,(4,x)
6666  de0a a406          	and	a,#6
6667  de0c 1e05          	ldw	x,(OFST-1,sp)
6668  de0e 44            	srl	a
6669  de0f e701          	ld	(1,x),a
6670                     ; 1349     response->retain_flag = (uint8_t)(fixed_header->control_flags & MQTT_PUBLISH_RETAIN);
6672  de11 1e03          	ldw	x,(OFST-3,sp)
6673  de13 e604          	ld	a,(4,x)
6674  de15 1e05          	ldw	x,(OFST-1,sp)
6675  de17 a401          	and	a,#1
6676  de19 e702          	ld	(2,x),a
6677                     ; 1352     if (mqtt_response->fixed_header.remaining_length < 4) {
6679  de1b 1e07          	ldw	x,(OFST+1,sp)
6680  de1d 1c0005        	addw	x,#5
6681  de20 cdf935        	call	c_ltor
6683  de23 ae9f01        	ldw	x,#L234
6684  de26 cdf8ca        	call	c_lcmp
6686  de29 2405          	jruge	L7472
6687                     ; 1353         return MQTT_ERROR_MALFORMED_RESPONSE;
6689  de2b ae800c        	ldw	x,#32780
6691  de2e 2072          	jra	L044
6692  de30               L7472:
6693                     ; 1357     response->topic_name_size = __mqtt_unpack_uint16(buf);
6695  de30 1e0b          	ldw	x,(OFST+5,sp)
6696  de32 cde407        	call	___mqtt_unpack_uint16
6698  de35 1605          	ldw	y,(OFST-1,sp)
6699  de37 90ef03        	ldw	(3,y),x
6700                     ; 1358     buf += 2;
6702  de3a 1e0b          	ldw	x,(OFST+5,sp)
6703  de3c 1c0002        	addw	x,#2
6704  de3f 1f0b          	ldw	(OFST+5,sp),x
6705                     ; 1359     response->topic_name = buf;
6707  de41 93            	ldw	x,y
6708  de42 160b          	ldw	y,(OFST+5,sp)
6709  de44 ef05          	ldw	(5,x),y
6710                     ; 1360     buf += response->topic_name_size;
6712  de46 ee03          	ldw	x,(3,x)
6713  de48 72fb0b        	addw	x,(OFST+5,sp)
6714  de4b 1f0b          	ldw	(OFST+5,sp),x
6715                     ; 1362     if (response->qos_level > 0) {
6717  de4d 1e05          	ldw	x,(OFST-1,sp)
6718  de4f 6d01          	tnz	(1,x)
6719  de51 2712          	jreq	L1572
6720                     ; 1363         response->packet_id = __mqtt_unpack_uint16(buf);
6722  de53 1e0b          	ldw	x,(OFST+5,sp)
6723  de55 cde407        	call	___mqtt_unpack_uint16
6725  de58 1605          	ldw	y,(OFST-1,sp)
6726  de5a 90ef07        	ldw	(7,y),x
6727                     ; 1364         buf += 2;
6729  de5d 1e0b          	ldw	x,(OFST+5,sp)
6730  de5f 1c0002        	addw	x,#2
6731  de62 1f0b          	ldw	(OFST+5,sp),x
6732  de64 93            	ldw	x,y
6733  de65               L1572:
6734                     ; 1368     response->application_message = buf;
6736  de65 160b          	ldw	y,(OFST+5,sp)
6737  de67 ef09          	ldw	(9,x),y
6738                     ; 1369     if (response->qos_level == 0) {
6740  de69 6d01          	tnz	(1,x)
6741  de6b 2614          	jrne	L3572
6742                     ; 1370         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 2);
6744  de6d 1e03          	ldw	x,(OFST-3,sp)
6745  de6f 1605          	ldw	y,(OFST-1,sp)
6746  de71 ee07          	ldw	x,(7,x)
6747  de73 01            	rrwa	x,a
6748  de74 90e004        	sub	a,(4,y)
6749  de77 01            	rrwa	x,a
6750  de78 90e203        	sbc	a,(3,y)
6751  de7b 01            	rrwa	x,a
6752  de7c 1d0002        	subw	x,#2
6754  de7f 2012          	jra	L5572
6755  de81               L3572:
6756                     ; 1373         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 4);
6758  de81 1e03          	ldw	x,(OFST-3,sp)
6759  de83 1605          	ldw	y,(OFST-1,sp)
6760  de85 ee07          	ldw	x,(7,x)
6761  de87 01            	rrwa	x,a
6762  de88 90e004        	sub	a,(4,y)
6763  de8b 01            	rrwa	x,a
6764  de8c 90e203        	sbc	a,(3,y)
6765  de8f 01            	rrwa	x,a
6766  de90 1d0004        	subw	x,#4
6767  de93               L5572:
6768  de93 90ef0b        	ldw	(11,y),x
6769                     ; 1375     buf += response->application_message_size;
6771  de96 1e05          	ldw	x,(OFST-1,sp)
6772  de98 ee0b          	ldw	x,(11,x)
6773  de9a 72fb0b        	addw	x,(OFST+5,sp)
6774  de9d 1f0b          	ldw	(OFST+5,sp),x
6775                     ; 1378     return buf - start;
6777  de9f 72f001        	subw	x,(OFST-5,sp)
6779  dea2               L044:
6781  dea2 5b08          	addw	sp,#8
6782  dea4 81            	ret	
6871                     ; 1383 int16_t mqtt_pack_pubxxx_request(uint8_t *buf, uint16_t bufsz, 
6871                     ; 1384                                  enum MQTTControlPacketType control_type,
6871                     ; 1385                                  uint16_t packet_id) 
6871                     ; 1386 {
6872                     .text:	section	.text,new
6873  dea5               _mqtt_pack_pubxxx_request:
6875  dea5 89            	pushw	x
6876  dea6 520d          	subw	sp,#13
6877       0000000d      OFST:	set	13
6880                     ; 1387     const uint8_t *const start = buf;
6882  dea8 1f01          	ldw	(OFST-12,sp),x
6884                     ; 1390     if (buf == NULL) {
6886  deaa 2605          	jrne	L7103
6887                     ; 1391       return MQTT_ERROR_NULLPTR;
6889  deac ae8001        	ldw	x,#32769
6891  deaf 2032          	jra	L054
6892  deb1               L7103:
6893                     ; 1395     fixed_header.control_type = control_type;
6895  deb1 7b14          	ld	a,(OFST+7,sp)
6896  deb3 6b05          	ld	(OFST-8,sp),a
6898                     ; 1396     if (control_type == MQTT_CONTROL_PUBREL) fixed_header.control_flags = 0x02;
6900  deb5 a106          	cp	a,#6
6901  deb7 2608          	jrne	L1203
6904  deb9 7b09          	ld	a,(OFST-4,sp)
6905  debb a4f0          	and	a,#240
6906  debd aa02          	or	a,#2
6908  debf 2004          	jra	L3203
6909  dec1               L1203:
6910                     ; 1397     else fixed_header.control_flags = 0;
6912  dec1 7b09          	ld	a,(OFST-4,sp)
6913  dec3 a4f0          	and	a,#240
6914  dec5               L3203:
6915  dec5 6b09          	ld	(OFST-4,sp),a
6917                     ; 1399     fixed_header.remaining_length = 2;
6919  dec7 ae0002        	ldw	x,#2
6920  deca 1f0c          	ldw	(OFST-1,sp),x
6921  decc 5f            	clrw	x
6922  decd 1f0a          	ldw	(OFST-3,sp),x
6924                     ; 1400     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6926  decf 96            	ldw	x,sp
6927  ded0 1c0005        	addw	x,#OFST-8
6928  ded3 89            	pushw	x
6929  ded4 1e14          	ldw	x,(OFST+7,sp)
6930  ded6 89            	pushw	x
6931  ded7 1e12          	ldw	x,(OFST+5,sp)
6932  ded9 cdda60        	call	_mqtt_pack_fixed_header
6934  dedc 5b04          	addw	sp,#4
6935  dede 1f03          	ldw	(OFST-10,sp),x
6937                     ; 1401     if (rv <= 0) return rv;
6939  dee0 9c            	rvf	
6940  dee1 2c03          	jrsgt	L5203
6944  dee3               L054:
6946  dee3 5b0f          	addw	sp,#15
6947  dee5 81            	ret	
6948  dee6               L5203:
6949                     ; 1402     buf += rv;
6951  dee6 1e0e          	ldw	x,(OFST+1,sp)
6952  dee8 72fb03        	addw	x,(OFST-10,sp)
6953  deeb 1f0e          	ldw	(OFST+1,sp),x
6954                     ; 1403     bufsz -= rv;
6956  deed 1e12          	ldw	x,(OFST+5,sp)
6957  deef 72f003        	subw	x,(OFST-10,sp)
6958  def2 1f12          	ldw	(OFST+5,sp),x
6959                     ; 1405     if (bufsz < fixed_header.remaining_length) return 0;
6961  def4 cdfafc        	call	c_uitolx
6963  def7 96            	ldw	x,sp
6964  def8 1c000a        	addw	x,#OFST-3
6965  defb cdf8ca        	call	c_lcmp
6967  defe 2403          	jruge	L7203
6970  df00 5f            	clrw	x
6972  df01 20e0          	jra	L054
6973  df03               L7203:
6974                     ; 1407     buf += __mqtt_pack_uint16(buf, packet_id);
6976  df03 1e15          	ldw	x,(OFST+8,sp)
6977  df05 89            	pushw	x
6978  df06 1e10          	ldw	x,(OFST+3,sp)
6979  df08 cde3e3        	call	___mqtt_pack_uint16
6981  df0b 5b02          	addw	sp,#2
6982  df0d 72fb0e        	addw	x,(OFST+1,sp)
6983  df10 1f0e          	ldw	(OFST+1,sp),x
6984                     ; 1409     return buf - start;
6986  df12 72f001        	subw	x,(OFST-12,sp)
6988  df15 20cc          	jra	L054
7054                     ; 1413 int16_t mqtt_unpack_pubxxx_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7054                     ; 1414 {
7055                     .text:	section	.text,new
7056  df17               _mqtt_unpack_pubxxx_response:
7058  df17 89            	pushw	x
7059  df18 5204          	subw	sp,#4
7060       00000004      OFST:	set	4
7063                     ; 1415     const uint8_t *const start = buf;
7065  df1a 1e09          	ldw	x,(OFST+5,sp)
7066  df1c 1f01          	ldw	(OFST-3,sp),x
7068                     ; 1419     if (mqtt_response->fixed_header.remaining_length != 2) {
7070  df1e 1e05          	ldw	x,(OFST+1,sp)
7071  df20 1c0005        	addw	x,#5
7072  df23 cdf935        	call	c_ltor
7074  df26 ae9efd        	ldw	x,#L473
7075  df29 cdf8ca        	call	c_lcmp
7077  df2c 2705          	jreq	L3603
7078                     ; 1420         return MQTT_ERROR_MALFORMED_RESPONSE;
7080  df2e ae800c        	ldw	x,#32780
7082  df31 2019          	jra	L654
7083  df33               L3603:
7084                     ; 1424     packet_id = __mqtt_unpack_uint16(buf);
7086  df33 1e09          	ldw	x,(OFST+5,sp)
7087  df35 cde407        	call	___mqtt_unpack_uint16
7089  df38 1f03          	ldw	(OFST-1,sp),x
7091                     ; 1425     buf += 2;
7093  df3a 1e09          	ldw	x,(OFST+5,sp)
7094  df3c 1c0002        	addw	x,#2
7095  df3f 1f09          	ldw	(OFST+5,sp),x
7096                     ; 1427     if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBACK) {
7098                     ; 1428         mqtt_response->decoded.puback.packet_id = packet_id;
7100                     ; 1430     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREC) {
7102                     ; 1431         mqtt_response->decoded.pubrec.packet_id = packet_id;
7104                     ; 1433     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREL) {
7106                     ; 1434         mqtt_response->decoded.pubrel.packet_id = packet_id;
7108                     ; 1437         mqtt_response->decoded.pubcomp.packet_id = packet_id;
7113  df41 1e05          	ldw	x,(OFST+1,sp)
7114  df43 1603          	ldw	y,(OFST-1,sp)
7115  df45 ef09          	ldw	(9,x),y
7116                     ; 1440     return buf - start;
7118  df47 1e09          	ldw	x,(OFST+5,sp)
7119  df49 72f001        	subw	x,(OFST-3,sp)
7121  df4c               L654:
7123  df4c 5b06          	addw	sp,#6
7124  df4e 81            	ret	
7190                     	switch	.const
7191  9f05               L264:
7192  9f05 00000003      	dc.l	3
7193                     ; 1445 int16_t mqtt_unpack_suback_response (struct mqtt_response *mqtt_response, const uint8_t *buf)
7193                     ; 1446 {
7194                     .text:	section	.text,new
7195  df4f               _mqtt_unpack_suback_response:
7197  df4f 89            	pushw	x
7198  df50 5208          	subw	sp,#8
7199       00000008      OFST:	set	8
7202                     ; 1447     const uint8_t *const start = buf;
7204  df52 1e0d          	ldw	x,(OFST+5,sp)
7205  df54 1f03          	ldw	(OFST-5,sp),x
7207                     ; 1448     uint32_t remaining_length = mqtt_response->fixed_header.remaining_length;
7209  df56 1e09          	ldw	x,(OFST+1,sp)
7210  df58 9093          	ldw	y,x
7211  df5a ee07          	ldw	x,(7,x)
7212  df5c 1f07          	ldw	(OFST-1,sp),x
7213  df5e 93            	ldw	x,y
7214  df5f ee05          	ldw	x,(5,x)
7215  df61 1f05          	ldw	(OFST-3,sp),x
7217                     ; 1451     if (remaining_length < 3) {
7219  df63 96            	ldw	x,sp
7220  df64 1c0005        	addw	x,#OFST-3
7221  df67 cdf935        	call	c_ltor
7223  df6a ae9f05        	ldw	x,#L264
7224  df6d cdf8ca        	call	c_lcmp
7226  df70 2405          	jruge	L3313
7227                     ; 1452       return MQTT_ERROR_MALFORMED_RESPONSE;
7229  df72 ae800c        	ldw	x,#32780
7231  df75 2037          	jra	L664
7232  df77               L3313:
7233                     ; 1456     mqtt_response->decoded.suback.packet_id = __mqtt_unpack_uint16(buf);
7235  df77 1e0d          	ldw	x,(OFST+5,sp)
7236  df79 cde407        	call	___mqtt_unpack_uint16
7238  df7c 1609          	ldw	y,(OFST+1,sp)
7239  df7e 90ef09        	ldw	(9,y),x
7240                     ; 1457     buf += 2;
7242  df81 1e0d          	ldw	x,(OFST+5,sp)
7243  df83 1c0002        	addw	x,#2
7244  df86 1f0d          	ldw	(OFST+5,sp),x
7245                     ; 1458     remaining_length -= 2;
7247  df88 96            	ldw	x,sp
7248  df89 1c0005        	addw	x,#OFST-3
7249  df8c a602          	ld	a,#2
7250  df8e cdf911        	call	c_lgsbc
7253                     ; 1461     mqtt_response->decoded.suback.num_return_codes = (uint16_t) remaining_length;
7255  df91 1e09          	ldw	x,(OFST+1,sp)
7256  df93 1607          	ldw	y,(OFST-1,sp)
7257  df95 ef0d          	ldw	(13,x),y
7258                     ; 1462     mqtt_response->decoded.suback.return_codes = buf;
7260  df97 160d          	ldw	y,(OFST+5,sp)
7261  df99 ef0b          	ldw	(11,x),y
7262                     ; 1463     buf += remaining_length;
7264  df9b 96            	ldw	x,sp
7265  df9c 1c0005        	addw	x,#OFST-3
7266  df9f cdf935        	call	c_ltor
7268  dfa2 be02          	ldw	x,c_lreg+2
7269  dfa4 1f01          	ldw	(OFST-7,sp),x
7271  dfa6 72fb0d        	addw	x,(OFST+5,sp)
7272  dfa9 1f0d          	ldw	(OFST+5,sp),x
7273                     ; 1465     return buf - start;
7275  dfab 72f003        	subw	x,(OFST-5,sp)
7277  dfae               L664:
7279  dfae 5b0a          	addw	sp,#10
7280  dfb0 81            	ret	
7406                     ; 1470 int16_t mqtt_pack_subscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7406                     ; 1471 {
7407                     .text:	section	.text,new
7408  dfb1               _mqtt_pack_subscribe_request:
7410  dfb1 89            	pushw	x
7411  dfb2 5229          	subw	sp,#41
7412       00000029      OFST:	set	41
7415                     ; 1473     const uint8_t *const start = buf;
7417  dfb4 1f03          	ldw	(OFST-38,sp),x
7419                     ; 1476     uint16_t num_subs = 0;
7421  dfb6 5f            	clrw	x
7422  dfb7 1f26          	ldw	(OFST-3,sp),x
7424                     ; 1482     va_start(args, packet_id);
7426  dfb9 96            	ldw	x,sp
7427  dfba 1c0032        	addw	x,#OFST+9
7428  dfbd 1f28          	ldw	(OFST-1,sp),x
7430  dfbf               L1123:
7431                     ; 1484         topic[num_subs] = va_arg(args, const char*);
7433  dfbf 1e28          	ldw	x,(OFST-1,sp)
7434  dfc1 1c0002        	addw	x,#2
7435  dfc4 1f28          	ldw	(OFST-1,sp),x
7437  dfc6 1d0002        	subw	x,#2
7438  dfc9 9096          	ldw	y,sp
7439  dfcb 72a90016      	addw	y,#OFST-19
7440  dfcf 1701          	ldw	(OFST-40,sp),y
7442  dfd1 1626          	ldw	y,(OFST-3,sp)
7443  dfd3 9058          	sllw	y
7444  dfd5 72f901        	addw	y,(OFST-40,sp)
7445  dfd8 fe            	ldw	x,(x)
7446  dfd9 90ff          	ldw	(y),x
7447                     ; 1485         if (topic[num_subs] == NULL) {
7449  dfdb 96            	ldw	x,sp
7450  dfdc 1c0016        	addw	x,#OFST-19
7451  dfdf 1f01          	ldw	(OFST-40,sp),x
7453  dfe1 1e26          	ldw	x,(OFST-3,sp)
7454  dfe3 58            	sllw	x
7455  dfe4 72fb01        	addw	x,(OFST-40,sp)
7456  dfe7 e601          	ld	a,(1,x)
7457  dfe9 fa            	or	a,(x)
7458  dfea 2616          	jrne	L5123
7459                     ; 1487             break;
7460                     ; 1497     va_end(args);
7462                     ; 1500     fixed_header.control_type = MQTT_CONTROL_SUBSCRIBE;
7464  dfec a608          	ld	a,#8
7465  dfee 6b0d          	ld	(OFST-28,sp),a
7467                     ; 1501     fixed_header.control_flags = 2u;
7469  dff0 7b11          	ld	a,(OFST-24,sp)
7470  dff2 a4f0          	and	a,#240
7471  dff4 aa02          	or	a,#2
7472  dff6 6b11          	ld	(OFST-24,sp),a
7474                     ; 1502     fixed_header.remaining_length = 2u; /* size of variable header */
7476  dff8 ae0002        	ldw	x,#2
7477  dffb 1f14          	ldw	(OFST-21,sp),x
7478  dffd 5f            	clrw	x
7479  dffe 1f12          	ldw	(OFST-23,sp),x
7481                     ; 1503     for(i = 0; i < num_subs; ++i) {
7483  e000 203f          	jra	L5223
7484  e002               L5123:
7485                     ; 1490         max_qos[num_subs] = (uint8_t) va_arg(args, uint16_t);
7487  e002 1e28          	ldw	x,(OFST-1,sp)
7489  e004 e601          	ld	a,(1,x)
7490  e006 1c0002        	addw	x,#2
7491  e009 1f28          	ldw	(OFST-1,sp),x
7492  e00b 96            	ldw	x,sp
7493  e00c 1c0005        	addw	x,#OFST-36
7494  e00f 72fb26        	addw	x,(OFST-3,sp)
7495  e012 f7            	ld	(x),a
7496                     ; 1492         ++num_subs;
7498  e013 1e26          	ldw	x,(OFST-3,sp)
7499  e015 5c            	incw	x
7500  e016 1f26          	ldw	(OFST-3,sp),x
7502                     ; 1493         if (num_subs >= MQTT_SUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7504  e018 a30008        	cpw	x,#8
7505  e01b 25a2          	jrult	L1123
7506                     ; 1494             return MQTT_ERROR_SUBSCRIBE_TOO_MANY_TOPICS;
7508  e01d ae800b        	ldw	x,#32779
7510  e020 2039          	jra	L205
7511  e022               L1223:
7512                     ; 1505         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]) + 1;
7514  e022 1c0016        	addw	x,#OFST-19
7515  e025 1f01          	ldw	(OFST-40,sp),x
7517  e027 1e28          	ldw	x,(OFST-1,sp)
7518  e029 58            	sllw	x
7519  e02a 72fb01        	addw	x,(OFST-40,sp)
7520  e02d fe            	ldw	x,(x)
7521  e02e cdf6a8        	call	_strlen
7523  e031 1c0003        	addw	x,#3
7524  e034 cdfafc        	call	c_uitolx
7526  e037 96            	ldw	x,sp
7527  e038 1c0012        	addw	x,#OFST-23
7528  e03b cdf8fa        	call	c_lgadd
7531                     ; 1503     for(i = 0; i < num_subs; ++i) {
7533  e03e 1e28          	ldw	x,(OFST-1,sp)
7534  e040 5c            	incw	x
7535  e041               L5223:
7537  e041 1f28          	ldw	(OFST-1,sp),x
7541  e043 1326          	cpw	x,(OFST-3,sp)
7542  e045 96            	ldw	x,sp
7543  e046 25da          	jrult	L1223
7544                     ; 1509     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
7546  e048 1c000d        	addw	x,#OFST-28
7547  e04b 89            	pushw	x
7548  e04c 1e30          	ldw	x,(OFST+7,sp)
7549  e04e 89            	pushw	x
7550  e04f 1e2e          	ldw	x,(OFST+5,sp)
7551  e051 cdda60        	call	_mqtt_pack_fixed_header
7553  e054 5b04          	addw	sp,#4
7554  e056 1f28          	ldw	(OFST-1,sp),x
7556                     ; 1510     if (rv <= 0) return rv;
7558  e058 9c            	rvf	
7559  e059 2c03          	jrsgt	L1323
7563  e05b               L205:
7565  e05b 5b2b          	addw	sp,#43
7566  e05d 81            	ret	
7567  e05e               L1323:
7568                     ; 1511     buf += rv;
7570  e05e 1e2a          	ldw	x,(OFST+1,sp)
7571  e060 72fb28        	addw	x,(OFST-1,sp)
7572  e063 1f2a          	ldw	(OFST+1,sp),x
7573                     ; 1512     bufsz -= rv;
7575  e065 1e2e          	ldw	x,(OFST+5,sp)
7576  e067 72f028        	subw	x,(OFST-1,sp)
7577  e06a 1f2e          	ldw	(OFST+5,sp),x
7578                     ; 1515     if (bufsz < fixed_header.remaining_length) return 0;
7580  e06c cdfafc        	call	c_uitolx
7582  e06f 96            	ldw	x,sp
7583  e070 1c0012        	addw	x,#OFST-23
7584  e073 cdf8ca        	call	c_lcmp
7586  e076 2403          	jruge	L3323
7589  e078 5f            	clrw	x
7591  e079 20e0          	jra	L205
7592  e07b               L3323:
7593                     ; 1518     buf += __mqtt_pack_uint16(buf, packet_id);
7595  e07b 1e30          	ldw	x,(OFST+7,sp)
7596  e07d 89            	pushw	x
7597  e07e 1e2c          	ldw	x,(OFST+3,sp)
7598  e080 cde3e3        	call	___mqtt_pack_uint16
7600  e083 5b02          	addw	sp,#2
7601  e085 72fb2a        	addw	x,(OFST+1,sp)
7602  e088 1f2a          	ldw	(OFST+1,sp),x
7603                     ; 1521     for(i = 0; i < num_subs; ++i) {
7605  e08a 5f            	clrw	x
7607  e08b 202b          	jra	L1423
7608  e08d               L5323:
7609                     ; 1522         buf += __mqtt_pack_str(buf, topic[i]);
7611  e08d 96            	ldw	x,sp
7612  e08e 1c0016        	addw	x,#OFST-19
7613  e091 1f01          	ldw	(OFST-40,sp),x
7615  e093 1e28          	ldw	x,(OFST-1,sp)
7616  e095 58            	sllw	x
7617  e096 72fb01        	addw	x,(OFST-40,sp)
7618  e099 fe            	ldw	x,(x)
7619  e09a 89            	pushw	x
7620  e09b 1e2c          	ldw	x,(OFST+3,sp)
7621  e09d cde424        	call	___mqtt_pack_str
7623  e0a0 5b02          	addw	sp,#2
7624  e0a2 72fb2a        	addw	x,(OFST+1,sp)
7625  e0a5 1f2a          	ldw	(OFST+1,sp),x
7626                     ; 1523         *buf++ = max_qos[i];
7628  e0a7 96            	ldw	x,sp
7629  e0a8 1c0005        	addw	x,#OFST-36
7630  e0ab 72fb28        	addw	x,(OFST-1,sp)
7631  e0ae f6            	ld	a,(x)
7632  e0af 1e2a          	ldw	x,(OFST+1,sp)
7633  e0b1 f7            	ld	(x),a
7634  e0b2 5c            	incw	x
7635  e0b3 1f2a          	ldw	(OFST+1,sp),x
7636                     ; 1521     for(i = 0; i < num_subs; ++i) {
7638  e0b5 1e28          	ldw	x,(OFST-1,sp)
7639  e0b7 5c            	incw	x
7640  e0b8               L1423:
7641  e0b8 1f28          	ldw	(OFST-1,sp),x
7645  e0ba 1326          	cpw	x,(OFST-3,sp)
7646  e0bc 25cf          	jrult	L5323
7647                     ; 1526     return buf - start;
7649  e0be 1e2a          	ldw	x,(OFST+1,sp)
7650  e0c0 72f003        	subw	x,(OFST-38,sp)
7652  e0c3 2096          	jra	L205
7711                     ; 1531 int16_t mqtt_unpack_unsuback_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7711                     ; 1532 {
7712                     .text:	section	.text,new
7713  e0c5               _mqtt_unpack_unsuback_response:
7715  e0c5 89            	pushw	x
7716  e0c6 89            	pushw	x
7717       00000002      OFST:	set	2
7720                     ; 1533     const uint8_t *const start = buf;
7722  e0c7 1e07          	ldw	x,(OFST+5,sp)
7723  e0c9 1f01          	ldw	(OFST-1,sp),x
7725                     ; 1535     if (mqtt_response->fixed_header.remaining_length != 2) {
7727  e0cb 1e03          	ldw	x,(OFST+1,sp)
7728  e0cd 1c0005        	addw	x,#5
7729  e0d0 cdf935        	call	c_ltor
7731  e0d3 ae9efd        	ldw	x,#L473
7732  e0d6 cdf8ca        	call	c_lcmp
7734  e0d9 2705          	jreq	L5723
7735                     ; 1536         return MQTT_ERROR_MALFORMED_RESPONSE;
7737  e0db ae800c        	ldw	x,#32780
7739  e0de 2014          	jra	L015
7740  e0e0               L5723:
7741                     ; 1540     mqtt_response->decoded.unsuback.packet_id = __mqtt_unpack_uint16(buf);
7743  e0e0 1e07          	ldw	x,(OFST+5,sp)
7744  e0e2 cde407        	call	___mqtt_unpack_uint16
7746  e0e5 1603          	ldw	y,(OFST+1,sp)
7747  e0e7 90ef09        	ldw	(9,y),x
7748                     ; 1541     buf += 2;
7750  e0ea 1e07          	ldw	x,(OFST+5,sp)
7751  e0ec 1c0002        	addw	x,#2
7752  e0ef 1f07          	ldw	(OFST+5,sp),x
7753                     ; 1543     return buf - start;
7755  e0f1 72f001        	subw	x,(OFST-1,sp)
7757  e0f4               L015:
7759  e0f4 5b04          	addw	sp,#4
7760  e0f6 81            	ret	
7876                     ; 1548 int16_t mqtt_pack_unsubscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7876                     ; 1549 {
7877                     .text:	section	.text,new
7878                     _mqtt_pack_unsubscribe_request:
7880                     	pushw	x
7881                     	subw	sp,#33
7882       00000021      OFST:	set	33
7885                     ; 1551     const uint8_t *const start = buf;
7887                     	ldw	(OFST-30,sp),x
7889                     ; 1554     uint16_t num_subs = 0;
7891                     	clrw	x
7892                     	ldw	(OFST-3,sp),x
7894                     ; 1559     va_start(args, packet_id);
7896                     	ldw	x,sp
7897                     	addw	x,#OFST+9
7898                     	ldw	(OFST-1,sp),x
7900                     L7433:
7901                     ; 1561         topic[num_subs] = va_arg(args, const char*);
7903                     	ldw	x,(OFST-1,sp)
7904                     	addw	x,#2
7905                     	ldw	(OFST-1,sp),x
7907                     	subw	x,#2
7908                     	ldw	y,sp
7909                     	addw	y,#OFST-19
7910                     	ldw	(OFST-32,sp),y
7912                     	ldw	y,(OFST-3,sp)
7913                     	sllw	y
7914                     	addw	y,(OFST-32,sp)
7915                     	ldw	x,(x)
7916                     	ldw	(y),x
7917                     ; 1562         if (topic[num_subs] == NULL) {
7919                     	ldw	x,sp
7920                     	addw	x,#OFST-19
7921                     	ldw	(OFST-32,sp),x
7923                     	ldw	x,(OFST-3,sp)
7924                     	sllw	x
7925                     	addw	x,(OFST-32,sp)
7926                     	ld	a,(1,x)
7927                     	or	a,(x)
7928                     	jrne	L3533
7929                     ; 1564             break;
7930                     ; 1572     va_end(args);
7932                     ; 1575     fixed_header.control_type = MQTT_CONTROL_UNSUBSCRIBE;
7934                     	ld	a,#10
7935                     	ld	(OFST-28,sp),a
7937                     ; 1576     fixed_header.control_flags = 2u;
7939                     	ld	a,(OFST-24,sp)
7940                     	and	a,#240
7941                     	or	a,#2
7942                     	ld	(OFST-24,sp),a
7944                     ; 1577     fixed_header.remaining_length = 2u; // size of variable header
7946                     	ldw	x,#2
7947                     	ldw	(OFST-21,sp),x
7948                     	clrw	x
7949                     	ldw	(OFST-23,sp),x
7951                     ; 1578     for(i = 0; i < num_subs; ++i) {
7953                     	jra	L3633
7954                     L3533:
7955                     ; 1567         ++num_subs;
7957                     	ldw	x,(OFST-3,sp)
7958                     	incw	x
7959                     	ldw	(OFST-3,sp),x
7961                     ; 1568         if (num_subs >= MQTT_UNSUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7963                     	cpw	x,#8
7964                     	jrult	L7433
7965                     ; 1569             return MQTT_ERROR_UNSUBSCRIBE_TOO_MANY_TOPICS;
7967                     	ldw	x,#32781
7969                     	jra	L425
7970                     L7533:
7971                     ; 1580         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]);
7973                     	addw	x,#OFST-19
7974                     	ldw	(OFST-32,sp),x
7976                     	ldw	x,(OFST-1,sp)
7977                     	sllw	x
7978                     	addw	x,(OFST-32,sp)
7979                     	ldw	x,(x)
7980                     	call	_strlen
7982                     	addw	x,#2
7983                     	call	c_uitolx
7985                     	ldw	x,sp
7986                     	addw	x,#OFST-23
7987                     	call	c_lgadd
7990                     ; 1578     for(i = 0; i < num_subs; ++i) {
7992                     	ldw	x,(OFST-1,sp)
7993                     	incw	x
7994                     L3633:
7996                     	ldw	(OFST-1,sp),x
8000                     	cpw	x,(OFST-3,sp)
8001                     	ldw	x,sp
8002                     	jrult	L7533
8003                     ; 1584     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
8005                     	addw	x,#OFST-28
8006                     	pushw	x
8007                     	ldw	x,(OFST+7,sp)
8008                     	pushw	x
8009                     	ldw	x,(OFST+5,sp)
8010                     	call	_mqtt_pack_fixed_header
8012                     	addw	sp,#4
8013                     	ldw	(OFST-1,sp),x
8015                     ; 1585     if (rv <= 0) return rv;
8017                     	rvf	
8018                     	jrsgt	L7633
8022                     L425:
8024                     	addw	sp,#35
8025                     	ret	
8026                     L7633:
8027                     ; 1586     buf += rv;
8029                     	ldw	x,(OFST+1,sp)
8030                     	addw	x,(OFST-1,sp)
8031                     	ldw	(OFST+1,sp),x
8032                     ; 1587     bufsz -= rv;
8034                     	ldw	x,(OFST+5,sp)
8035                     	subw	x,(OFST-1,sp)
8036                     	ldw	(OFST+5,sp),x
8037                     ; 1590     if (bufsz < fixed_header.remaining_length) return 0;
8039                     	call	c_uitolx
8041                     	ldw	x,sp
8042                     	addw	x,#OFST-23
8043                     	call	c_lcmp
8045                     	jruge	L1733
8048                     	clrw	x
8050                     	jra	L425
8051                     L1733:
8052                     ; 1593     buf += __mqtt_pack_uint16(buf, packet_id);
8054                     	ldw	x,(OFST+7,sp)
8055                     	pushw	x
8056                     	ldw	x,(OFST+3,sp)
8057                     	call	___mqtt_pack_uint16
8059                     	addw	sp,#2
8060                     	addw	x,(OFST+1,sp)
8061                     	ldw	(OFST+1,sp),x
8062                     ; 1596     for(i = 0; i < num_subs; ++i) buf += __mqtt_pack_str(buf, topic[i]);
8064                     	clrw	x
8066                     	jra	L7733
8067                     L3733:
8070                     	ldw	x,sp
8071                     	addw	x,#OFST-19
8072                     	ldw	(OFST-32,sp),x
8074                     	ldw	x,(OFST-1,sp)
8075                     	sllw	x
8076                     	addw	x,(OFST-32,sp)
8077                     	ldw	x,(x)
8078                     	pushw	x
8079                     	ldw	x,(OFST+3,sp)
8080                     	call	___mqtt_pack_str
8082                     	addw	sp,#2
8083                     	addw	x,(OFST+1,sp)
8084                     	ldw	(OFST+1,sp),x
8087                     	ldw	x,(OFST-1,sp)
8088                     	incw	x
8089                     L7733:
8090                     	ldw	(OFST-1,sp),x
8094                     	cpw	x,(OFST-3,sp)
8095                     	jrult	L3733
8096                     ; 1598     return buf - start;
8098                     	ldw	x,(OFST+1,sp)
8099                     	subw	x,(OFST-30,sp)
8101                     	jra	L425
8155                     ; 1603 void mqtt_mq_init(struct mqtt_message_queue *mq, void *buf, uint16_t bufsz) 
8155                     ; 1604 {  
8156                     .text:	section	.text,new
8157  e0f7               _mqtt_mq_init:
8159  e0f7 89            	pushw	x
8160       00000000      OFST:	set	0
8163                     ; 1605     if(buf != NULL)
8165  e0f8 1e05          	ldw	x,(OFST+5,sp)
8166  e0fa 2748          	jreq	L1343
8167                     ; 1607         mq->mem_start = buf;
8169  e0fc 1e01          	ldw	x,(OFST+1,sp)
8170  e0fe 1605          	ldw	y,(OFST+5,sp)
8171  e100 ff            	ldw	(x),y
8172                     ; 1608         mq->mem_end = (unsigned char*)buf + bufsz;
8174  e101 93            	ldw	x,y
8175  e102 1601          	ldw	y,(OFST+1,sp)
8176  e104 72fb07        	addw	x,(OFST+7,sp)
8177  e107 90ef02        	ldw	(2,y),x
8178                     ; 1609         mq->curr = buf;
8180  e10a 93            	ldw	x,y
8181  e10b 1605          	ldw	y,(OFST+5,sp)
8182  e10d ef04          	ldw	(4,x),y
8183                     ; 1610         mq->queue_tail = mq->mem_end;
8185  e10f 9093          	ldw	y,x
8186  e111 90ee02        	ldw	y,(2,y)
8187  e114 ef08          	ldw	(8,x),y
8188                     ; 1611         mq->curr_sz = mqtt_mq_currsz(mq);
8190  e116 1601          	ldw	y,(OFST+1,sp)
8191  e118 90ee08        	ldw	y,(8,y)
8192  e11b 72a2000c      	subw	y,#12
8193  e11f 90bf07        	ldw	c_y,y
8194  e122 9093          	ldw	y,x
8195  e124 90ee04        	ldw	y,(4,y)
8196  e127 90b307        	cpw	y,c_y
8197  e12a 2505          	jrult	L035
8198  e12c 5f            	clrw	x
8199  e12d 1601          	ldw	y,(OFST+1,sp)
8200  e12f 2010          	jra	L235
8201  e131               L035:
8202  e131 ee08          	ldw	x,(8,x)
8203  e133 1d000c        	subw	x,#12
8204  e136 1601          	ldw	y,(OFST+1,sp)
8205  e138 01            	rrwa	x,a
8206  e139 90e005        	sub	a,(5,y)
8207  e13c 01            	rrwa	x,a
8208  e13d 90e204        	sbc	a,(4,y)
8209  e140 01            	rrwa	x,a
8210  e141               L235:
8211  e141 90ef06        	ldw	(6,y),x
8212  e144               L1343:
8213                     ; 1613 }
8216  e144 85            	popw	x
8217  e145 81            	ret	
8264                     ; 1616 struct mqtt_queued_message* mqtt_mq_register(struct mqtt_message_queue *mq, uint16_t nbytes)
8264                     ; 1617 {
8265                     .text:	section	.text,new
8266  e146               _mqtt_mq_register:
8268  e146 89            	pushw	x
8269       00000000      OFST:	set	0
8272                     ; 1619     --(mq->queue_tail);
8274  e147 9093          	ldw	y,x
8275  e149 ee08          	ldw	x,(8,x)
8276  e14b 1d000c        	subw	x,#12
8277  e14e 90ef08        	ldw	(8,y),x
8278                     ; 1620     mq->queue_tail->start = mq->curr;
8280  e151 1e01          	ldw	x,(OFST+1,sp)
8281  e153 9093          	ldw	y,x
8282  e155 90ee08        	ldw	y,(8,y)
8283  e158 ee04          	ldw	x,(4,x)
8284  e15a 90ff          	ldw	(y),x
8285                     ; 1621     mq->queue_tail->size = nbytes;
8287  e15c 1e01          	ldw	x,(OFST+1,sp)
8288  e15e ee08          	ldw	x,(8,x)
8289  e160 1605          	ldw	y,(OFST+5,sp)
8290  e162 ef02          	ldw	(2,x),y
8291                     ; 1622     mq->queue_tail->state = MQTT_QUEUED_UNSENT;
8293  e164 1e01          	ldw	x,(OFST+1,sp)
8294  e166 ee08          	ldw	x,(8,x)
8295  e168 6f04          	clr	(4,x)
8296                     ; 1625     mq->curr += nbytes;
8298  e16a 1e01          	ldw	x,(OFST+1,sp)
8299  e16c 9093          	ldw	y,x
8300  e16e ee04          	ldw	x,(4,x)
8301  e170 72fb05        	addw	x,(OFST+5,sp)
8302  e173 90ef04        	ldw	(4,y),x
8303                     ; 1626     mq->curr_sz = mqtt_mq_currsz(mq);
8305  e176 1e01          	ldw	x,(OFST+1,sp)
8306  e178 9093          	ldw	y,x
8307  e17a 90ee08        	ldw	y,(8,y)
8308  e17d 72a2000c      	subw	y,#12
8309  e181 90bf07        	ldw	c_y,y
8310  e184 9093          	ldw	y,x
8311  e186 90ee04        	ldw	y,(4,y)
8312  e189 90b307        	cpw	y,c_y
8313  e18c 2505          	jrult	L635
8314  e18e 5f            	clrw	x
8315  e18f 1601          	ldw	y,(OFST+1,sp)
8316  e191 2010          	jra	L045
8317  e193               L635:
8318  e193 ee08          	ldw	x,(8,x)
8319  e195 1d000c        	subw	x,#12
8320  e198 1601          	ldw	y,(OFST+1,sp)
8321  e19a 01            	rrwa	x,a
8322  e19b 90e005        	sub	a,(5,y)
8323  e19e 01            	rrwa	x,a
8324  e19f 90e204        	sbc	a,(4,y)
8325  e1a2 01            	rrwa	x,a
8326  e1a3               L045:
8327  e1a3 90ef06        	ldw	(6,y),x
8328                     ; 1628     return mq->queue_tail;
8330  e1a6 1e01          	ldw	x,(OFST+1,sp)
8331  e1a8 ee08          	ldw	x,(8,x)
8334  e1aa 5b02          	addw	sp,#2
8335  e1ac 81            	ret	
8413                     ; 1632 void mqtt_mq_clean(struct mqtt_message_queue *mq) {
8414                     .text:	section	.text,new
8415  e1ad               _mqtt_mq_clean:
8417  e1ad 89            	pushw	x
8418  e1ae 5208          	subw	sp,#8
8419       00000008      OFST:	set	8
8422                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8424  e1b0 ee02          	ldw	x,(2,x)
8426  e1b2 2047          	jra	L5253
8427  e1b4               L5153:
8428                     ; 1636         if (new_head->state != MQTT_QUEUED_COMPLETE) break;
8430  e1b4 1e07          	ldw	x,(OFST-1,sp)
8431  e1b6 e604          	ld	a,(4,x)
8432  e1b8 a102          	cp	a,#2
8433  e1ba 273f          	jreq	L5253
8435  e1bc               L3253:
8436                     ; 1640     if (new_head < mq->queue_tail) {
8438  e1bc 1e09          	ldw	x,(OFST+1,sp)
8439  e1be ee08          	ldw	x,(8,x)
8440  e1c0 1307          	cpw	x,(OFST-1,sp)
8441  e1c2 2346          	jrule	L7253
8442                     ; 1641         mq->curr = mq->mem_start;
8444  e1c4 1e09          	ldw	x,(OFST+1,sp)
8445  e1c6 9093          	ldw	y,x
8446  e1c8 90fe          	ldw	y,(y)
8447  e1ca ef04          	ldw	(4,x),y
8448                     ; 1642         mq->queue_tail = mq->mem_end;
8450  e1cc 9093          	ldw	y,x
8451  e1ce 90ee02        	ldw	y,(2,y)
8452  e1d1 ef08          	ldw	(8,x),y
8453                     ; 1643         mq->curr_sz = mqtt_mq_currsz(mq);
8455  e1d3 72a2000c      	subw	y,#12
8456  e1d7 90bf07        	ldw	c_y,y
8457  e1da 9093          	ldw	y,x
8458  e1dc 90ee04        	ldw	y,(4,y)
8459  e1df 90b307        	cpw	y,c_y
8460  e1e2 2504          	jrult	L445
8461  e1e4               LC022:
8462  e1e4 5f            	clrw	x
8463  e1e5 cce2f3        	jp	L655
8464  e1e8               L445:
8465  e1e8 ee08          	ldw	x,(8,x)
8466  e1ea 1d000c        	subw	x,#12
8467  e1ed 1609          	ldw	y,(OFST+1,sp)
8468  e1ef 01            	rrwa	x,a
8469  e1f0 90e005        	sub	a,(5,y)
8470  e1f3 01            	rrwa	x,a
8471  e1f4 90e204        	sbc	a,(4,y)
8472  e1f7 01            	rrwa	x,a
8473                     ; 1644         return;
8475  e1f8 cce2f5        	jp	LC020
8476  e1fb               L5253:
8477                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8479  e1fb 1d000c        	subw	x,#12
8480  e1fe 1f07          	ldw	(OFST-1,sp),x
8484  e200 1e09          	ldw	x,(OFST+1,sp)
8485  e202 ee08          	ldw	x,(8,x)
8486  e204 1307          	cpw	x,(OFST-1,sp)
8487  e206 23ac          	jrule	L5153
8488  e208 20b2          	jra	L3253
8489  e20a               L7253:
8490                     ; 1646     else if (new_head == mqtt_mq_get(mq, 0)) {
8492  e20a 1e09          	ldw	x,(OFST+1,sp)
8493  e20c ee02          	ldw	x,(2,x)
8494  e20e 1d000c        	subw	x,#12
8495  e211 1307          	cpw	x,(OFST-1,sp)
8496  e213 2603          	jrne	L1353
8497                     ; 1648         return;
8498  e215               L065:
8501  e215 5b0a          	addw	sp,#10
8502  e217 81            	ret	
8503  e218               L1353:
8504                     ; 1653         uint16_t n = mq->curr - new_head->start;
8506  e218 1e09          	ldw	x,(OFST+1,sp)
8507  e21a 1607          	ldw	y,(OFST-1,sp)
8508  e21c ee04          	ldw	x,(4,x)
8509  e21e 01            	rrwa	x,a
8510  e21f 90e001        	sub	a,(1,y)
8511  e222 01            	rrwa	x,a
8512  e223 90f2          	sbc	a,(y)
8513  e225 01            	rrwa	x,a
8514  e226 1f05          	ldw	(OFST-3,sp),x
8516                     ; 1654         uint16_t removing = new_head->start - (uint8_t*) mq->mem_start;
8518  e228 93            	ldw	x,y
8519  e229 1609          	ldw	y,(OFST+1,sp)
8520  e22b fe            	ldw	x,(x)
8521  e22c 01            	rrwa	x,a
8522  e22d 90e001        	sub	a,(1,y)
8523  e230 01            	rrwa	x,a
8524  e231 90f2          	sbc	a,(y)
8525  e233 01            	rrwa	x,a
8526  e234 1f03          	ldw	(OFST-5,sp),x
8528                     ; 1655         memmove(mq->mem_start, new_head->start, n);
8530  e236 1e05          	ldw	x,(OFST-3,sp)
8531  e238 89            	pushw	x
8532  e239 1e09          	ldw	x,(OFST+1,sp)
8533  e23b fe            	ldw	x,(x)
8534  e23c 89            	pushw	x
8535  e23d 1e0d          	ldw	x,(OFST+5,sp)
8536  e23f fe            	ldw	x,(x)
8537  e240 cdf643        	call	_memmove
8539  e243 5b04          	addw	sp,#4
8540                     ; 1656         mq->curr = (unsigned char*)mq->mem_start + n;
8542  e245 1e09          	ldw	x,(OFST+1,sp)
8543  e247 fe            	ldw	x,(x)
8544  e248 1609          	ldw	y,(OFST+1,sp)
8545  e24a 72fb05        	addw	x,(OFST-3,sp)
8546  e24d 90ef04        	ldw	(4,y),x
8547                     ; 1660             int16_t new_tail_idx = new_head - mq->queue_tail;
8549  e250 1e07          	ldw	x,(OFST-1,sp)
8550  e252 01            	rrwa	x,a
8551  e253 90e009        	sub	a,(9,y)
8552  e256 01            	rrwa	x,a
8553  e257 90e208        	sbc	a,(8,y)
8554  e25a 01            	rrwa	x,a
8555  e25b a60c          	ld	a,#12
8556  e25d cdfab3        	call	c_sdivx
8558  e260 1f05          	ldw	(OFST-3,sp),x
8560                     ; 1661             memmove(mqtt_mq_get(mq, new_tail_idx), mq->queue_tail, sizeof(struct mqtt_queued_message) * (new_tail_idx + 1));
8562  e262 5c            	incw	x
8563  e263 a60c          	ld	a,#12
8564  e265 cdf6b4        	call	c_bmulx
8566  e268 89            	pushw	x
8567  e269 1e0b          	ldw	x,(OFST+3,sp)
8568  e26b ee08          	ldw	x,(8,x)
8569  e26d 89            	pushw	x
8570  e26e 1e09          	ldw	x,(OFST+1,sp)
8571  e270 a60c          	ld	a,#12
8572  e272 cdf6b4        	call	c_bmulx
8574  e275 1f05          	ldw	(OFST-3,sp),x
8576  e277 1e0d          	ldw	x,(OFST+5,sp)
8577  e279 ee02          	ldw	x,(2,x)
8578  e27b 1d000c        	subw	x,#12
8579  e27e 72f005        	subw	x,(OFST-3,sp)
8580  e281 cdf643        	call	_memmove
8582  e284 5b04          	addw	sp,#4
8583                     ; 1662             mq->queue_tail = mqtt_mq_get(mq, new_tail_idx);
8585  e286 1e05          	ldw	x,(OFST-3,sp)
8586  e288 a60c          	ld	a,#12
8587  e28a cdf6b4        	call	c_bmulx
8589  e28d 1f01          	ldw	(OFST-7,sp),x
8591  e28f 1e09          	ldw	x,(OFST+1,sp)
8592  e291 ee02          	ldw	x,(2,x)
8593  e293 1d000c        	subw	x,#12
8594  e296 1609          	ldw	y,(OFST+1,sp)
8595  e298 72f001        	subw	x,(OFST-7,sp)
8596  e29b 90ef08        	ldw	(8,y),x
8597                     ; 1666                 int16_t i = 0;
8599  e29e 5f            	clrw	x
8601  e29f 201e          	jra	L1453
8602  e2a1               L5353:
8603                     ; 1667                 for(; i < new_tail_idx + 1; ++i) mqtt_mq_get(mq, i)->start -= removing;
8605  e2a1 1e07          	ldw	x,(OFST-1,sp)
8606  e2a3 a60c          	ld	a,#12
8607  e2a5 cdf6b4        	call	c_bmulx
8609  e2a8 1f01          	ldw	(OFST-7,sp),x
8611  e2aa 1e09          	ldw	x,(OFST+1,sp)
8612  e2ac ee02          	ldw	x,(2,x)
8613  e2ae 1d000c        	subw	x,#12
8614  e2b1 72f001        	subw	x,(OFST-7,sp)
8615  e2b4 9093          	ldw	y,x
8616  e2b6 fe            	ldw	x,(x)
8617  e2b7 72f003        	subw	x,(OFST-5,sp)
8618  e2ba 90ff          	ldw	(y),x
8621  e2bc 1e07          	ldw	x,(OFST-1,sp)
8622  e2be 5c            	incw	x
8623  e2bf               L1453:
8624  e2bf 1f07          	ldw	(OFST-1,sp),x
8628  e2c1 1e05          	ldw	x,(OFST-3,sp)
8629  e2c3 5c            	incw	x
8630  e2c4 1307          	cpw	x,(OFST-1,sp)
8631  e2c6 2cd9          	jrsgt	L5353
8632                     ; 1673     mq->curr_sz = mqtt_mq_currsz(mq);
8634  e2c8 1e09          	ldw	x,(OFST+1,sp)
8635  e2ca 9093          	ldw	y,x
8636  e2cc 90ee08        	ldw	y,(8,y)
8637  e2cf 72a2000c      	subw	y,#12
8638  e2d3 90bf07        	ldw	c_y,y
8639  e2d6 9093          	ldw	y,x
8640  e2d8 90ee04        	ldw	y,(4,y)
8641  e2db 90b307        	cpw	y,c_y
8642  e2de 2503cce1e4    	jruge	LC022
8643  e2e3 ee08          	ldw	x,(8,x)
8644  e2e5 1d000c        	subw	x,#12
8645  e2e8 1609          	ldw	y,(OFST+1,sp)
8646  e2ea 01            	rrwa	x,a
8647  e2eb 90e005        	sub	a,(5,y)
8648  e2ee 01            	rrwa	x,a
8649  e2ef 90e204        	sbc	a,(4,y)
8650  e2f2 01            	rrwa	x,a
8651  e2f3               L655:
8652  e2f3 1609          	ldw	y,(OFST+1,sp)
8653  e2f5               LC020:
8654  e2f5 90ef06        	ldw	(6,y),x
8655                     ; 1674 }
8657  e2f8 cce215        	jra	L065
8729                     ; 1677 struct mqtt_queued_message* mqtt_mq_find(struct mqtt_message_queue *mq, enum MQTTControlPacketType control_type, uint16_t *packet_id)
8729                     ; 1678 {
8730                     .text:	section	.text,new
8731  e2fb               _mqtt_mq_find:
8733  e2fb 89            	pushw	x
8734  e2fc 89            	pushw	x
8735       00000002      OFST:	set	2
8738                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8740  e2fd ee02          	ldw	x,(2,x)
8742  e2ff 2025          	jra	L1163
8743  e301               L5063:
8744                     ; 1681         if (curr->control_type == control_type) {
8746  e301 1e01          	ldw	x,(OFST-1,sp)
8747  e303 e609          	ld	a,(9,x)
8748  e305 1107          	cp	a,(OFST+5,sp)
8749  e307 261b          	jrne	L5163
8750                     ; 1682             if ((packet_id == NULL && curr->state != MQTT_QUEUED_COMPLETE) ||
8750                     ; 1683                 (packet_id != NULL && *packet_id == curr->packet_id)) {
8752  e309 1e08          	ldw	x,(OFST+6,sp)
8753  e30b 2608          	jrne	L3263
8755  e30d 1e01          	ldw	x,(OFST-1,sp)
8756  e30f e604          	ld	a,(4,x)
8757  e311 a102          	cp	a,#2
8758  e313 261f          	jrne	L465
8759  e315               L3263:
8761  e315 1e08          	ldw	x,(OFST+6,sp)
8762  e317 270b          	jreq	L5163
8764  e319 1601          	ldw	y,(OFST-1,sp)
8765  e31b fe            	ldw	x,(x)
8766  e31c 90e30a        	cpw	x,(10,y)
8767  e31f 2603          	jrne	L5163
8768  e321 93            	ldw	x,y
8769                     ; 1684                 return curr;
8772  e322 2010          	jra	L465
8773  e324               L5163:
8774                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8776  e324 1e01          	ldw	x,(OFST-1,sp)
8777  e326               L1163:
8778  e326 1d000c        	subw	x,#12
8779  e329 1f01          	ldw	(OFST-1,sp),x
8783  e32b 1e03          	ldw	x,(OFST+1,sp)
8784  e32d ee08          	ldw	x,(8,x)
8785  e32f 1301          	cpw	x,(OFST-1,sp)
8786  e331 23ce          	jrule	L5063
8787                     ; 1688     return NULL;
8789  e333 5f            	clrw	x
8791  e334               L465:
8793  e334 5b04          	addw	sp,#4
8794  e336 81            	ret	
8872                     ; 1693 int16_t mqtt_unpack_response(struct mqtt_response* response, const uint8_t *buf, uint16_t bufsz)
8872                     ; 1694 {
8873                     .text:	section	.text,new
8874  e337               _mqtt_unpack_response:
8876  e337 89            	pushw	x
8877  e338 5204          	subw	sp,#4
8878       00000004      OFST:	set	4
8881                     ; 1695     const uint8_t *const start = buf;
8883  e33a 1e09          	ldw	x,(OFST+5,sp)
8884  e33c 1f01          	ldw	(OFST-3,sp),x
8886                     ; 1696     int16_t rv = mqtt_unpack_fixed_header(response, buf, bufsz);
8888  e33e 1e0b          	ldw	x,(OFST+7,sp)
8889  e340 89            	pushw	x
8890  e341 1e0b          	ldw	x,(OFST+7,sp)
8891  e343 89            	pushw	x
8892  e344 1e09          	ldw	x,(OFST+5,sp)
8893  e346 cdd9a3        	call	_mqtt_unpack_fixed_header
8895  e349 5b04          	addw	sp,#4
8896  e34b 1f03          	ldw	(OFST-1,sp),x
8898                     ; 1698     if (rv <= 0) return rv;
8900  e34d 9c            	rvf	
8904  e34e 2d2c          	jrsle	L216
8905                     ; 1699     else buf += rv;
8907  e350 1e09          	ldw	x,(OFST+5,sp)
8908  e352 72fb03        	addw	x,(OFST-1,sp)
8909  e355 1f09          	ldw	(OFST+5,sp),x
8910                     ; 1701     switch(response->fixed_header.control_type) {
8912  e357 1e05          	ldw	x,(OFST+1,sp)
8913  e359 f6            	ld	a,(x)
8915                     ; 1728         default:
8915                     ; 1729             return MQTT_ERROR_RESPONSE_INVALID_CONTROL_TYPE;
8916  e35a a002          	sub	a,#2
8917  e35c 2721          	jreq	L5263
8918  e35e 4a            	dec	a
8919  e35f 2728          	jreq	L7263
8920  e361 4a            	dec	a
8921  e362 272f          	jreq	L1363
8922  e364 4a            	dec	a
8923  e365 2736          	jreq	L3363
8924  e367 4a            	dec	a
8925  e368 273d          	jreq	L5363
8926  e36a 4a            	dec	a
8927  e36b 2744          	jreq	L7363
8928  e36d a002          	sub	a,#2
8929  e36f 274a          	jreq	L1463
8930  e371 a002          	sub	a,#2
8931  e373 2750          	jreq	L3463
8932  e375 a002          	sub	a,#2
8933  e377 2756          	jreq	L5463
8936  e379 ae800e        	ldw	x,#32782
8938  e37c               L216:
8940  e37c 5b06          	addw	sp,#6
8941  e37e 81            	ret	
8942  e37f               L5263:
8943                     ; 1702         case MQTT_CONTROL_CONNACK:
8943                     ; 1703             rv = mqtt_unpack_connack_response(response, buf);
8945  e37f 1e09          	ldw	x,(OFST+5,sp)
8946  e381 89            	pushw	x
8947  e382 1e07          	ldw	x,(OFST+3,sp)
8948  e384 cddc79        	call	_mqtt_unpack_connack_response
8950                     ; 1704             break;
8952  e387 204a          	jra	L3173
8953  e389               L7263:
8954                     ; 1705         case MQTT_CONTROL_PUBLISH:
8954                     ; 1706             rv = mqtt_unpack_publish_response(response, buf);
8956  e389 1e09          	ldw	x,(OFST+5,sp)
8957  e38b 89            	pushw	x
8958  e38c 1e07          	ldw	x,(OFST+3,sp)
8959  e38e cdddea        	call	_mqtt_unpack_publish_response
8961                     ; 1707             break;
8963  e391 2040          	jra	L3173
8964  e393               L1363:
8965                     ; 1708         case MQTT_CONTROL_PUBACK:
8965                     ; 1709             rv = mqtt_unpack_pubxxx_response(response, buf);
8967  e393 1e09          	ldw	x,(OFST+5,sp)
8968  e395 89            	pushw	x
8969  e396 1e07          	ldw	x,(OFST+3,sp)
8970  e398 cddf17        	call	_mqtt_unpack_pubxxx_response
8972                     ; 1710             break;
8974  e39b 2036          	jra	L3173
8975  e39d               L3363:
8976                     ; 1711         case MQTT_CONTROL_PUBREC:
8976                     ; 1712             rv = mqtt_unpack_pubxxx_response(response, buf);
8978  e39d 1e09          	ldw	x,(OFST+5,sp)
8979  e39f 89            	pushw	x
8980  e3a0 1e07          	ldw	x,(OFST+3,sp)
8981  e3a2 cddf17        	call	_mqtt_unpack_pubxxx_response
8983                     ; 1713             break;
8985  e3a5 202c          	jra	L3173
8986  e3a7               L5363:
8987                     ; 1714         case MQTT_CONTROL_PUBREL:
8987                     ; 1715             rv = mqtt_unpack_pubxxx_response(response, buf);
8989  e3a7 1e09          	ldw	x,(OFST+5,sp)
8990  e3a9 89            	pushw	x
8991  e3aa 1e07          	ldw	x,(OFST+3,sp)
8992  e3ac cddf17        	call	_mqtt_unpack_pubxxx_response
8994                     ; 1716             break;
8996  e3af 2022          	jra	L3173
8997  e3b1               L7363:
8998                     ; 1717         case MQTT_CONTROL_PUBCOMP:
8998                     ; 1718             rv = mqtt_unpack_pubxxx_response(response, buf);
9000  e3b1 1e09          	ldw	x,(OFST+5,sp)
9001  e3b3 89            	pushw	x
9002  e3b4 1e07          	ldw	x,(OFST+3,sp)
9003  e3b6 cddf17        	call	_mqtt_unpack_pubxxx_response
9005                     ; 1719             break;
9007  e3b9 2018          	jra	L3173
9008  e3bb               L1463:
9009                     ; 1720         case MQTT_CONTROL_SUBACK:
9009                     ; 1721             rv = mqtt_unpack_suback_response(response, buf);
9011  e3bb 1e09          	ldw	x,(OFST+5,sp)
9012  e3bd 89            	pushw	x
9013  e3be 1e07          	ldw	x,(OFST+3,sp)
9014  e3c0 cddf4f        	call	_mqtt_unpack_suback_response
9016                     ; 1722             break;
9018  e3c3 200e          	jra	L3173
9019  e3c5               L3463:
9020                     ; 1723         case MQTT_CONTROL_UNSUBACK:
9020                     ; 1724             rv = mqtt_unpack_unsuback_response(response, buf);
9022  e3c5 1e09          	ldw	x,(OFST+5,sp)
9023  e3c7 89            	pushw	x
9024  e3c8 1e07          	ldw	x,(OFST+3,sp)
9025  e3ca cde0c5        	call	_mqtt_unpack_unsuback_response
9027                     ; 1725             break;
9029  e3cd 2004          	jra	L3173
9030  e3cf               L5463:
9031                     ; 1726         case MQTT_CONTROL_PINGRESP:
9031                     ; 1727             return rv;
9033  e3cf 1e03          	ldw	x,(OFST-1,sp)
9035  e3d1 20a9          	jra	L216
9036  e3d3               L3173:
9037  e3d3 5b02          	addw	sp,#2
9038  e3d5 1f03          	ldw	(OFST-1,sp),x
9040                     ; 1732     if (rv < 0) return rv;
9045  e3d7 2ba3          	jrmi	L216
9046                     ; 1733     buf += rv;
9048  e3d9 72fb09        	addw	x,(OFST+5,sp)
9049  e3dc 1f09          	ldw	(OFST+5,sp),x
9050                     ; 1734     return buf - start;
9052  e3de 72f001        	subw	x,(OFST-3,sp)
9054  e3e1 2099          	jra	L216
9104                     ; 1751 int16_t __mqtt_pack_uint16(uint8_t *buf, uint16_t integer)
9104                     ; 1752 {
9105                     .text:	section	.text,new
9106  e3e3               ___mqtt_pack_uint16:
9108  e3e3 89            	pushw	x
9109  e3e4 89            	pushw	x
9110       00000002      OFST:	set	2
9113                     ; 1753   uint16_t integer_htons = HTONS(integer);
9115  e3e5 1e07          	ldw	x,(OFST+5,sp)
9116  e3e7 1f01          	ldw	(OFST-1,sp),x
9118                     ; 1754   memcpy(buf, &integer_htons, 2);
9120  e3e9 1e03          	ldw	x,(OFST+1,sp)
9121  e3eb bf04          	ldw	c_x,x
9122  e3ed 9096          	ldw	y,sp
9123  e3ef 905c          	incw	y
9124  e3f1 90bf07        	ldw	c_y,y
9125  e3f4 ae0002        	ldw	x,#2
9126  e3f7               L616:
9127  e3f7 5a            	decw	x
9128  e3f8 92d607        	ld	a,([c_y.w],x)
9129  e3fb 92d704        	ld	([c_x.w],x),a
9130  e3fe 5d            	tnzw	x
9131  e3ff 26f6          	jrne	L616
9132                     ; 1755   return 2;
9134  e401 ae0002        	ldw	x,#2
9137  e404 5b04          	addw	sp,#4
9138  e406 81            	ret	
9182                     ; 1759 uint16_t __mqtt_unpack_uint16(const uint8_t *buf)
9182                     ; 1760 {
9183                     .text:	section	.text,new
9184  e407               ___mqtt_unpack_uint16:
9186  e407 89            	pushw	x
9187  e408 89            	pushw	x
9188       00000002      OFST:	set	2
9191                     ; 1762   memcpy(&integer_htons, buf, 2);
9193  e409 96            	ldw	x,sp
9194  e40a 5c            	incw	x
9195  e40b bf04          	ldw	c_x,x
9196  e40d 1603          	ldw	y,(OFST+1,sp)
9197  e40f 90bf07        	ldw	c_y,y
9198  e412 ae0002        	ldw	x,#2
9199  e415               L226:
9200  e415 5a            	decw	x
9201  e416 92d607        	ld	a,([c_y.w],x)
9202  e419 92d704        	ld	([c_x.w],x),a
9203  e41c 5d            	tnzw	x
9204  e41d 26f6          	jrne	L226
9205                     ; 1763   return HTONS(integer_htons);
9207  e41f 1e01          	ldw	x,(OFST-1,sp)
9210  e421 5b04          	addw	sp,#4
9211  e423 81            	ret	
9272                     ; 1767 int16_t __mqtt_pack_str(uint8_t *buf, const char* str)
9272                     ; 1768 {
9273                     .text:	section	.text,new
9274  e424               ___mqtt_pack_str:
9276  e424 89            	pushw	x
9277  e425 5204          	subw	sp,#4
9278       00000004      OFST:	set	4
9281                     ; 1769     uint16_t length = (uint16_t)strlen(str);
9283  e427 1e09          	ldw	x,(OFST+5,sp)
9284  e429 cdf6a8        	call	_strlen
9286  e42c 1f01          	ldw	(OFST-3,sp),x
9288                     ; 1770     int16_t i = 0;
9290  e42e 5f            	clrw	x
9291  e42f 1f03          	ldw	(OFST-1,sp),x
9293                     ; 1772     buf += __mqtt_pack_uint16(buf, length);
9295  e431 1e01          	ldw	x,(OFST-3,sp)
9296  e433 89            	pushw	x
9297  e434 1e07          	ldw	x,(OFST+3,sp)
9298  e436 cde3e3        	call	___mqtt_pack_uint16
9300  e439 5b02          	addw	sp,#2
9301  e43b 72fb05        	addw	x,(OFST+1,sp)
9302  e43e 1f05          	ldw	(OFST+1,sp),x
9304  e440 1e03          	ldw	x,(OFST-1,sp)
9305  e442 200f          	jra	L3104
9306  e444               L7004:
9307                     ; 1775     for(; i < length; ++i) *(buf++) = str[i];
9309  e444 72fb09        	addw	x,(OFST+5,sp)
9310  e447 f6            	ld	a,(x)
9311  e448 1e05          	ldw	x,(OFST+1,sp)
9312  e44a f7            	ld	(x),a
9313  e44b 5c            	incw	x
9314  e44c 1f05          	ldw	(OFST+1,sp),x
9317  e44e 1e03          	ldw	x,(OFST-1,sp)
9318  e450 5c            	incw	x
9319  e451 1f03          	ldw	(OFST-1,sp),x
9321  e453               L3104:
9324  e453 1301          	cpw	x,(OFST-3,sp)
9325  e455 25ed          	jrult	L7004
9326                     ; 1778     return length + 2;
9328  e457 1e01          	ldw	x,(OFST-3,sp)
9329  e459 1c0002        	addw	x,#2
9332  e45c 5b06          	addw	sp,#6
9333  e45e 81            	ret	
9397                     	switch	.bss
9398  016f               _mqtt_sendbuf:
9399  016f 000000000000  	ds.b	300
9400                     	xdef	_mqtt_sendbuf
9401  029b               _MQTT_error_status:
9402  029b 00            	ds.b	1
9403                     	xdef	_MQTT_error_status
9404                     	xref	_second_counter
9405                     	xref	_uip_flags
9406                     	xref	_uip_len
9407                     	xdef	_mqtt_disconnect
9408                     	xdef	___mqtt_ping
9409                     	xdef	_mqtt_ping
9410                     	xdef	_mqtt_unsubscribe
9411                     	xdef	_mqtt_subscribe
9412                     	xdef	___mqtt_pubcomp
9413                     	xdef	___mqtt_pubrel
9414                     	xdef	___mqtt_pubrec
9415                     	xdef	___mqtt_puback
9416                     	xdef	_mqtt_publish
9417                     	xdef	_mqtt_connect
9418                     	xdef	_mqtt_init
9419                     	xdef	_mqtt_sync
9420                     	xdef	___mqtt_recv
9421                     	xdef	___mqtt_send
9422                     	xdef	___mqtt_next_pid
9423                     	xdef	_mqtt_mq_find
9424                     	xdef	_mqtt_mq_register
9425                     	xdef	_mqtt_mq_clean
9426                     	xdef	_mqtt_mq_init
9427                     	xdef	_mqtt_pack_disconnect
9428                     	xdef	_mqtt_pack_ping_request
9429                     	xdef	_mqtt_pack_unsubscribe_request
9430                     	xdef	_mqtt_pack_subscribe_request
9431                     	xdef	_mqtt_pack_pubxxx_request
9432                     	xdef	_mqtt_pack_publish_request
9433                     	xdef	_mqtt_pack_connection_request
9434                     	xdef	_mqtt_pack_fixed_header
9435                     	xdef	_mqtt_unpack_response
9436                     	xdef	_mqtt_unpack_unsuback_response
9437                     	xdef	_mqtt_unpack_suback_response
9438                     	xdef	_mqtt_unpack_pubxxx_response
9439                     	xdef	_mqtt_unpack_publish_response
9440                     	xdef	_mqtt_unpack_connack_response
9441                     	xdef	_mqtt_unpack_fixed_header
9442                     	xdef	___mqtt_pack_str
9443                     	xdef	___mqtt_unpack_uint16
9444                     	xdef	___mqtt_pack_uint16
9445                     	xref	_mqtt_pal_recvall
9446                     	xref	_mqtt_pal_sendall
9447                     	xref	_memmove
9448                     	xref	_strlen
9449                     	switch	.const
9450  9f09               L5051:
9451  9f09 3f400000      	dc.w	16192,0
9452                     	xref.b	c_lreg
9453                     	xref.b	c_x
9454                     	xref.b	c_y
9474                     	xref	c_lgsbc
9475                     	xref	c_lgadc
9476                     	xref	c_lgursh
9477                     	xref	c_uitolx
9478                     	xref	c_lgadd
9479                     	xref	c_itoly
9480                     	xref	c_ltor
9481                     	xref	c_rtol
9482                     	xref	c_ftol
9483                     	xref	c_fmul
9484                     	xref	c_uitof
9485                     	xref	c_lcmp
9486                     	xref	c_ladd
9487                     	xref	c_itolx
9488                     	xref	c_bmulx
9489                     	xref	c_bmuly
9490                     	xref	c_sdivx
9491                     	end
