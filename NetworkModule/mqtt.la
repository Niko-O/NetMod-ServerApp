   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
 508                     ; 77 int16_t mqtt_sync(struct mqtt_client *client)
 508                     ; 78 {
 510                     .text:	section	.text,new
 511  cd4f               _mqtt_sync:
 513  cd4f 89            	pushw	x
 514  cd50 89            	pushw	x
 515       00000002      OFST:	set	2
 518                     ; 86     if ((uip_newdata() || uip_acked()) && uip_len > 0) {
 520  cd51 720202c805    	btjt	_uip_flags,#1,L172
 522  cd56 720102c811    	btjf	_uip_flags,#0,L762
 523  cd5b               L172:
 525  cd5b ce0373        	ldw	x,_uip_len
 526  cd5e 270c          	jreq	L762
 527                     ; 87       err = __mqtt_recv(client);
 529  cd60 1e03          	ldw	x,(OFST+1,sp)
 530  cd62 cdd475        	call	___mqtt_recv
 532  cd65 1f01          	ldw	(OFST-1,sp),x
 534                     ; 88       if (err != MQTT_OK) {
 536  cd67 a30001        	cpw	x,#1
 537                     ; 89         return err;
 540  cd6a 2616          	jrne	L772
 541  cd6c               L762:
 542                     ; 98     err = __mqtt_send(client);
 544  cd6c 1e03          	ldw	x,(OFST+1,sp)
 545  cd6e cdd295        	call	___mqtt_send
 547  cd71 1f01          	ldw	(OFST-1,sp),x
 549                     ; 101     if (err == MQTT_OK) {
 551  cd73 a30001        	cpw	x,#1
 552  cd76 2606          	jrne	L572
 553                     ; 102       MQTT_error_status = 1;
 555  cd78 3501029b      	mov	_MQTT_error_status,#1
 557  cd7c 2004          	jra	L772
 558  cd7e               L572:
 559                     ; 104     else MQTT_error_status = 0;
 561  cd7e 725f029b      	clr	_MQTT_error_status
 562  cd82               L772:
 563                     ; 105     return err;
 567  cd82 5b04          	addw	sp,#4
 568  cd84 81            	ret	
 631                     ; 109 uint16_t __mqtt_next_pid(struct mqtt_client *client)
 631                     ; 110 {
 632                     .text:	section	.text,new
 633  cd85               ___mqtt_next_pid:
 635  cd85 89            	pushw	x
 636  cd86 5204          	subw	sp,#4
 637       00000004      OFST:	set	4
 640                     ; 112     int16_t pid_exists = 0;
 642                     ; 113     if (client->pid_lfsr == 0) client->pid_lfsr = 163u;
 644  cd88 e601          	ld	a,(1,x)
 645  cd8a fa            	or	a,(x)
 646  cd8b 2605          	jrne	L533
 649  cd8d 90ae00a3      	ldw	y,#163
 650  cd91 ff            	ldw	(x),y
 651  cd92               L533:
 652                     ; 119         unsigned lsb = client->pid_lfsr & 1;
 654  cd92 1e05          	ldw	x,(OFST+1,sp)
 655  cd94 fe            	ldw	x,(x)
 656  cd95 01            	rrwa	x,a
 657  cd96 a401          	and	a,#1
 658  cd98 5f            	clrw	x
 659  cd99 02            	rlwa	x,a
 660  cd9a 1f03          	ldw	(OFST-1,sp),x
 661  cd9c 01            	rrwa	x,a
 663                     ; 120         (client->pid_lfsr) >>= 1;
 665  cd9d 1e05          	ldw	x,(OFST+1,sp)
 666  cd9f 74            	srl	(x)
 667  cda0 6601          	rrc	(1,x)
 668                     ; 121         if (lsb) client->pid_lfsr ^= 0xB400u;
 670  cda2 1e03          	ldw	x,(OFST-1,sp)
 671  cda4 2706          	jreq	L343
 674  cda6 1e05          	ldw	x,(OFST+1,sp)
 675  cda8 f6            	ld	a,(x)
 676  cda9 a8b4          	xor	a,#180
 677  cdab f7            	ld	(x),a
 678  cdac               L343:
 679                     ; 124         pid_exists = 0;
 681  cdac 5f            	clrw	x
 682  cdad 1f03          	ldw	(OFST-1,sp),x
 684                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 686  cdaf 1e05          	ldw	x,(OFST+1,sp)
 687  cdb1 ee24          	ldw	x,(36,x)
 689  cdb3 201b          	jra	L153
 690  cdb5               L543:
 691                     ; 126             if (curr->packet_id == client->pid_lfsr) {
 693  cdb5 1e01          	ldw	x,(OFST-3,sp)
 694  cdb7 1605          	ldw	y,(OFST+1,sp)
 695  cdb9 ee0a          	ldw	x,(10,x)
 696  cdbb 90f3          	cpw	x,(y)
 697  cdbd 260f          	jrne	L553
 698                     ; 127                 pid_exists = 1;
 700  cdbf ae0001        	ldw	x,#1
 701  cdc2 1f03          	ldw	(OFST-1,sp),x
 703                     ; 128                 break;
 704  cdc4               L733:
 705                     ; 132     } while(pid_exists);
 707  cdc4 1e03          	ldw	x,(OFST-1,sp)
 708  cdc6 26ca          	jrne	L533
 709                     ; 134     return client->pid_lfsr;
 711  cdc8 1e05          	ldw	x,(OFST+1,sp)
 712  cdca fe            	ldw	x,(x)
 715  cdcb 5b06          	addw	sp,#6
 716  cdcd 81            	ret	
 717  cdce               L553:
 718                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 720  cdce 1e01          	ldw	x,(OFST-3,sp)
 721  cdd0               L153:
 722  cdd0 1d000c        	subw	x,#12
 723  cdd3 1f01          	ldw	(OFST-3,sp),x
 727  cdd5 1e05          	ldw	x,(OFST+1,sp)
 728  cdd7 ee2a          	ldw	x,(42,x)
 729  cdd9 1301          	cpw	x,(OFST-3,sp)
 730  cddb 23d8          	jrule	L543
 731  cddd 20e5          	jra	L733
 815                     ; 138 int16_t mqtt_init(struct mqtt_client *client,
 815                     ; 139                uint8_t *sendbuf, uint16_t sendbufsz,
 815                     ; 140                uint8_t *recvbuf, uint16_t recvbufsz,
 815                     ; 141                void (*publish_response_callback)(void** state,struct mqtt_response_publish *publish))
 815                     ; 142 {
 816                     .text:	section	.text,new
 817  cddf               _mqtt_init:
 819  cddf 89            	pushw	x
 820       00000000      OFST:	set	0
 823                     ; 143     if (client == NULL || sendbuf == NULL || recvbuf == NULL) {
 825  cde0 5d            	tnzw	x
 826  cde1 2708          	jreq	L124
 828  cde3 1e05          	ldw	x,(OFST+5,sp)
 829  cde5 2704          	jreq	L124
 831  cde7 1e09          	ldw	x,(OFST+9,sp)
 832  cde9 2605          	jrne	L714
 833  cdeb               L124:
 834                     ; 144       return MQTT_ERROR_NULLPTR;
 836  cdeb ae8001        	ldw	x,#32769
 838  cdee 2044          	jra	L22
 839  cdf0               L714:
 840                     ; 147     mqtt_mq_init(&client->mq, sendbuf, sendbufsz);
 842  cdf0 1e07          	ldw	x,(OFST+7,sp)
 843  cdf2 89            	pushw	x
 844  cdf3 1e07          	ldw	x,(OFST+7,sp)
 845  cdf5 89            	pushw	x
 846  cdf6 1e05          	ldw	x,(OFST+5,sp)
 847  cdf8 1c0022        	addw	x,#34
 848  cdfb cddea6        	call	_mqtt_mq_init
 850  cdfe 5b04          	addw	sp,#4
 851                     ; 149     client->recv_buffer.mem_start = recvbuf;
 853  ce00 1e01          	ldw	x,(OFST+1,sp)
 854  ce02 1609          	ldw	y,(OFST+9,sp)
 855  ce04 ef1a          	ldw	(26,x),y
 856                     ; 150     client->recv_buffer.mem_size = recvbufsz;
 858  ce06 160b          	ldw	y,(OFST+11,sp)
 859  ce08 ef1c          	ldw	(28,x),y
 860                     ; 151     client->recv_buffer.curr = client->recv_buffer.mem_start;
 862  ce0a 9093          	ldw	y,x
 863  ce0c 90ee1a        	ldw	y,(26,y)
 864  ce0f ef1e          	ldw	(30,x),y
 865                     ; 152     client->recv_buffer.curr_sz = client->recv_buffer.mem_size;
 867  ce11 9093          	ldw	y,x
 868  ce13 90ee1c        	ldw	y,(28,y)
 869  ce16 ef20          	ldw	(32,x),y
 870                     ; 154     client->error = MQTT_ERROR_CONNECT_NOT_CALLED;
 872  ce18 90ae800f      	ldw	y,#32783
 873  ce1c ef0a          	ldw	(10,x),y
 874                     ; 155     client->response_timeout = 30;
 876  ce1e 90ae001e      	ldw	y,#30
 877  ce22 ef0c          	ldw	(12,x),y
 878                     ; 156     client->number_of_timeouts = 0;
 880  ce24 905f          	clrw	y
 881  ce26 ef0e          	ldw	(14,x),y
 882                     ; 157     client->publish_response_callback = publish_response_callback;
 884  ce28 160d          	ldw	y,(OFST+13,sp)
 885  ce2a ef10          	ldw	(16,x),y
 886                     ; 158     client->pid_lfsr = 0;
 888  ce2c 905f          	clrw	y
 889  ce2e ff            	ldw	(x),y
 890                     ; 159     client->send_offset = 0;
 892  ce2f ef04          	ldw	(4,x),y
 893                     ; 161     return MQTT_OK;
 895  ce31 ae0001        	ldw	x,#1
 897  ce34               L22:
 899  ce34 5b02          	addw	sp,#2
 900  ce36 81            	ret	
1030                     ; 228 int16_t mqtt_connect(struct mqtt_client *client,
1030                     ; 229                      const char* client_id,
1030                     ; 230                      const char* will_topic,
1030                     ; 231                      const void* will_message,
1030                     ; 232                      uint16_t will_message_size,
1030                     ; 233                      const char* user_name,
1030                     ; 234                      const char* password,
1030                     ; 235                      uint8_t connect_flags,
1030                     ; 236                      uint16_t keep_alive)
1030                     ; 237 {
1031                     .text:	section	.text,new
1032  ce37               _mqtt_connect:
1034  ce37 89            	pushw	x
1035  ce38 89            	pushw	x
1036       00000002      OFST:	set	2
1039                     ; 242     client->keep_alive = keep_alive;
1041  ce39 1614          	ldw	y,(OFST+18,sp)
1042  ce3b ef02          	ldw	(2,x),y
1043                     ; 244     if (client->error == MQTT_ERROR_CONNECT_NOT_CALLED) {
1045  ce3d 9093          	ldw	y,x
1046  ce3f 90ee0a        	ldw	y,(10,y)
1047  ce42 90a3800f      	cpw	y,#32783
1048  ce46 2606          	jrne	L705
1049                     ; 245         client->error = MQTT_OK;
1051  ce48 90ae0001      	ldw	y,#1
1052  ce4c ef0a          	ldw	(10,x),y
1053  ce4e               L705:
1054                     ; 249     MQTT_CLIENT_TRY_PACK(rv, msg, client, 
1056  ce4e e60a          	ld	a,(10,x)
1057  ce50 2a04          	jrpl	L115
1060  ce52 ee0a          	ldw	x,(10,x)
1062  ce54 2031          	jra	L63
1063  ce56               L115:
1066  ce56 1e14          	ldw	x,(OFST+18,sp)
1067  ce58 89            	pushw	x
1068  ce59 7b15          	ld	a,(OFST+19,sp)
1069  ce5b 88            	push	a
1070  ce5c 1e14          	ldw	x,(OFST+18,sp)
1071  ce5e 89            	pushw	x
1072  ce5f 1e14          	ldw	x,(OFST+18,sp)
1073  ce61 89            	pushw	x
1074  ce62 1e14          	ldw	x,(OFST+18,sp)
1075  ce64 89            	pushw	x
1076  ce65 1e14          	ldw	x,(OFST+18,sp)
1077  ce67 89            	pushw	x
1078  ce68 1e14          	ldw	x,(OFST+18,sp)
1079  ce6a 89            	pushw	x
1080  ce6b 1e14          	ldw	x,(OFST+18,sp)
1081  ce6d 89            	pushw	x
1082  ce6e 1e12          	ldw	x,(OFST+16,sp)
1083  ce70 ee28          	ldw	x,(40,x)
1084  ce72 89            	pushw	x
1085  ce73 1e14          	ldw	x,(OFST+18,sp)
1086  ce75 ee26          	ldw	x,(38,x)
1087  ce77 cdd8be        	call	_mqtt_pack_connection_request
1089  ce7a 5b11          	addw	sp,#17
1090  ce7c 1f01          	ldw	(OFST-1,sp),x
1094  ce7e 2a0a          	jrpl	L315
1099  ce80               LC001:
1101  ce80 1e03          	ldw	x,(OFST+1,sp)
1102  ce82 1601          	ldw	y,(OFST-1,sp)
1103  ce84 ef0a          	ldw	(10,x),y
1105  ce86 93            	ldw	x,y
1107  ce87               L63:
1109  ce87 5b04          	addw	sp,#4
1110  ce89 81            	ret	
1111  ce8a               L315:
1114  ce8a 2641          	jrne	L515
1117  ce8c 1e03          	ldw	x,(OFST+1,sp)
1118  ce8e 1c0022        	addw	x,#34
1119  ce91 cddf5c        	call	_mqtt_mq_clean
1123  ce94 1e14          	ldw	x,(OFST+18,sp)
1124  ce96 89            	pushw	x
1125  ce97 7b15          	ld	a,(OFST+19,sp)
1126  ce99 88            	push	a
1127  ce9a 1e14          	ldw	x,(OFST+18,sp)
1128  ce9c 89            	pushw	x
1129  ce9d 1e14          	ldw	x,(OFST+18,sp)
1130  ce9f 89            	pushw	x
1131  cea0 1e14          	ldw	x,(OFST+18,sp)
1132  cea2 89            	pushw	x
1133  cea3 1e14          	ldw	x,(OFST+18,sp)
1134  cea5 89            	pushw	x
1135  cea6 1e14          	ldw	x,(OFST+18,sp)
1136  cea8 89            	pushw	x
1137  cea9 1e14          	ldw	x,(OFST+18,sp)
1138  ceab 89            	pushw	x
1139  ceac 1e12          	ldw	x,(OFST+16,sp)
1140  ceae ee28          	ldw	x,(40,x)
1141  ceb0 89            	pushw	x
1142  ceb1 1e14          	ldw	x,(OFST+18,sp)
1143  ceb3 ee26          	ldw	x,(38,x)
1144  ceb5 cdd8be        	call	_mqtt_pack_connection_request
1146  ceb8 5b11          	addw	sp,#17
1147  ceba 1f01          	ldw	(OFST-1,sp),x
1154  cebc 2bc2          	jrmi	LC001
1157  cebe 260d          	jrne	L515
1160  cec0 1e03          	ldw	x,(OFST+1,sp)
1161  cec2 90ae8010      	ldw	y,#32784
1162  cec6 ef0a          	ldw	(10,x),y
1165  cec8 ae8010        	ldw	x,#32784
1167  cecb 20ba          	jra	L63
1168  cecd               L515:
1171  cecd 89            	pushw	x
1172  cece 1e05          	ldw	x,(OFST+3,sp)
1173  ced0 1c0022        	addw	x,#34
1174  ced3 cddef5        	call	_mqtt_mq_register
1176  ced6 5b02          	addw	sp,#2
1178                     ; 266     msg->control_type = MQTT_CONTROL_CONNECT;
1181  ced8 a601          	ld	a,#1
1182  ceda e709          	ld	(9,x),a
1183                     ; 268     return MQTT_OK;
1185  cedc ae0001        	ldw	x,#1
1187  cedf 20a6          	jra	L63
1290                     ; 272 int16_t mqtt_publish(struct mqtt_client *client,
1290                     ; 273                      const char* topic_name,
1290                     ; 274                      const void* application_message,
1290                     ; 275                      uint16_t application_message_size,
1290                     ; 276                      uint8_t publish_flags)
1290                     ; 277 {
1291                     .text:	section	.text,new
1292  cee1               _mqtt_publish:
1294  cee1 89            	pushw	x
1295  cee2 5204          	subw	sp,#4
1296       00000004      OFST:	set	4
1299                     ; 281     packet_id = __mqtt_next_pid(client);
1301  cee4 cdcd85        	call	___mqtt_next_pid
1303  cee7 1f01          	ldw	(OFST-3,sp),x
1305                     ; 284     MQTT_CLIENT_TRY_PACK(
1307  cee9 1e05          	ldw	x,(OFST+1,sp)
1308  ceeb e60a          	ld	a,(10,x)
1309  ceed 2a04          	jrpl	L575
1312  ceef ee0a          	ldw	x,(10,x)
1314  cef1 2028          	jra	L45
1315  cef3               L575:
1318  cef3 7b0f          	ld	a,(OFST+11,sp)
1319  cef5 88            	push	a
1320  cef6 1e0e          	ldw	x,(OFST+10,sp)
1321  cef8 89            	pushw	x
1322  cef9 1e0e          	ldw	x,(OFST+10,sp)
1323  cefb 89            	pushw	x
1324  cefc 1e06          	ldw	x,(OFST+2,sp)
1325  cefe 89            	pushw	x
1326  ceff 1e10          	ldw	x,(OFST+12,sp)
1327  cf01 89            	pushw	x
1328  cf02 1e0e          	ldw	x,(OFST+10,sp)
1329  cf04 ee28          	ldw	x,(40,x)
1330  cf06 89            	pushw	x
1331  cf07 1e10          	ldw	x,(OFST+12,sp)
1332  cf09 ee26          	ldw	x,(38,x)
1333  cf0b cddab8        	call	_mqtt_pack_publish_request
1335  cf0e 5b0b          	addw	sp,#11
1336  cf10 1f03          	ldw	(OFST-1,sp),x
1340  cf12 2a0a          	jrpl	L775
1345  cf14               LC002:
1347  cf14 1e05          	ldw	x,(OFST+1,sp)
1348  cf16 1603          	ldw	y,(OFST-1,sp)
1349  cf18 ef0a          	ldw	(10,x),y
1351  cf1a 93            	ldw	x,y
1353  cf1b               L45:
1355  cf1b 5b06          	addw	sp,#6
1356  cf1d 81            	ret	
1357  cf1e               L775:
1360  cf1e 2638          	jrne	L106
1363  cf20 1e05          	ldw	x,(OFST+1,sp)
1364  cf22 1c0022        	addw	x,#34
1365  cf25 cddf5c        	call	_mqtt_mq_clean
1369  cf28 7b0f          	ld	a,(OFST+11,sp)
1370  cf2a 88            	push	a
1371  cf2b 1e0e          	ldw	x,(OFST+10,sp)
1372  cf2d 89            	pushw	x
1373  cf2e 1e0e          	ldw	x,(OFST+10,sp)
1374  cf30 89            	pushw	x
1375  cf31 1e06          	ldw	x,(OFST+2,sp)
1376  cf33 89            	pushw	x
1377  cf34 1e10          	ldw	x,(OFST+12,sp)
1378  cf36 89            	pushw	x
1379  cf37 1e0e          	ldw	x,(OFST+10,sp)
1380  cf39 ee28          	ldw	x,(40,x)
1381  cf3b 89            	pushw	x
1382  cf3c 1e10          	ldw	x,(OFST+12,sp)
1383  cf3e ee26          	ldw	x,(38,x)
1384  cf40 cddab8        	call	_mqtt_pack_publish_request
1386  cf43 5b0b          	addw	sp,#11
1387  cf45 1f03          	ldw	(OFST-1,sp),x
1394  cf47 2bcb          	jrmi	LC002
1397  cf49 260d          	jrne	L106
1400  cf4b 1e05          	ldw	x,(OFST+1,sp)
1401  cf4d 90ae8010      	ldw	y,#32784
1402  cf51 ef0a          	ldw	(10,x),y
1405  cf53 ae8010        	ldw	x,#32784
1407  cf56 20c3          	jra	L45
1408  cf58               L106:
1411  cf58 89            	pushw	x
1412  cf59 1e07          	ldw	x,(OFST+3,sp)
1413  cf5b 1c0022        	addw	x,#34
1414  cf5e cddef5        	call	_mqtt_mq_register
1416  cf61 5b02          	addw	sp,#2
1417  cf63 1f03          	ldw	(OFST-1,sp),x
1419                     ; 298     msg->control_type = MQTT_CONTROL_PUBLISH;
1422  cf65 a603          	ld	a,#3
1423  cf67 e709          	ld	(9,x),a
1424                     ; 299     msg->packet_id = packet_id;
1426  cf69 1601          	ldw	y,(OFST-3,sp)
1427  cf6b ef0a          	ldw	(10,x),y
1428                     ; 301     return MQTT_OK;
1430  cf6d ae0001        	ldw	x,#1
1432  cf70 20a9          	jra	L45
1498                     ; 305 int16_t __mqtt_puback(struct mqtt_client *client, uint16_t packet_id) {
1499                     .text:	section	.text,new
1500  cf72               ___mqtt_puback:
1502  cf72 89            	pushw	x
1503  cf73 89            	pushw	x
1504       00000002      OFST:	set	2
1507                     ; 310     MQTT_CLIENT_TRY_PACK(
1509  cf74 e60a          	ld	a,(10,x)
1510  cf76 2a04          	jrpl	L546
1513  cf78 ee0a          	ldw	x,(10,x)
1515  cf7a 201e          	jra	L07
1516  cf7c               L546:
1519  cf7c 1e07          	ldw	x,(OFST+5,sp)
1520  cf7e 89            	pushw	x
1521  cf7f 4b04          	push	#4
1522  cf81 1e06          	ldw	x,(OFST+4,sp)
1523  cf83 ee28          	ldw	x,(40,x)
1524  cf85 89            	pushw	x
1525  cf86 1e08          	ldw	x,(OFST+6,sp)
1526  cf88 ee26          	ldw	x,(38,x)
1527  cf8a cddc54        	call	_mqtt_pack_pubxxx_request
1529  cf8d 5b05          	addw	sp,#5
1530  cf8f 1f01          	ldw	(OFST-1,sp),x
1534  cf91 2a0a          	jrpl	L746
1539  cf93               LC003:
1541  cf93 1e03          	ldw	x,(OFST+1,sp)
1542  cf95 1601          	ldw	y,(OFST-1,sp)
1543  cf97 ef0a          	ldw	(10,x),y
1545  cf99 93            	ldw	x,y
1547  cf9a               L07:
1549  cf9a 5b04          	addw	sp,#4
1550  cf9c 81            	ret	
1551  cf9d               L746:
1554  cf9d 262e          	jrne	L156
1557  cf9f 1e03          	ldw	x,(OFST+1,sp)
1558  cfa1 1c0022        	addw	x,#34
1559  cfa4 cddf5c        	call	_mqtt_mq_clean
1563  cfa7 1e07          	ldw	x,(OFST+5,sp)
1564  cfa9 89            	pushw	x
1565  cfaa 4b04          	push	#4
1566  cfac 1e06          	ldw	x,(OFST+4,sp)
1567  cfae ee28          	ldw	x,(40,x)
1568  cfb0 89            	pushw	x
1569  cfb1 1e08          	ldw	x,(OFST+6,sp)
1570  cfb3 ee26          	ldw	x,(38,x)
1571  cfb5 cddc54        	call	_mqtt_pack_pubxxx_request
1573  cfb8 5b05          	addw	sp,#5
1574  cfba 1f01          	ldw	(OFST-1,sp),x
1581  cfbc 2bd5          	jrmi	LC003
1584  cfbe 260d          	jrne	L156
1587  cfc0 1e03          	ldw	x,(OFST+1,sp)
1588  cfc2 90ae8010      	ldw	y,#32784
1589  cfc6 ef0a          	ldw	(10,x),y
1592  cfc8 ae8010        	ldw	x,#32784
1594  cfcb 20cd          	jra	L07
1595  cfcd               L156:
1598  cfcd 89            	pushw	x
1599  cfce 1e05          	ldw	x,(OFST+3,sp)
1600  cfd0 1c0022        	addw	x,#34
1601  cfd3 cddef5        	call	_mqtt_mq_register
1603  cfd6 5b02          	addw	sp,#2
1604  cfd8 1f01          	ldw	(OFST-1,sp),x
1606                     ; 321     msg->control_type = MQTT_CONTROL_PUBACK;
1609  cfda a604          	ld	a,#4
1610  cfdc e709          	ld	(9,x),a
1611                     ; 322     msg->packet_id = packet_id;
1613  cfde 1607          	ldw	y,(OFST+5,sp)
1614  cfe0 ef0a          	ldw	(10,x),y
1615                     ; 324     return MQTT_OK;
1617  cfe2 ae0001        	ldw	x,#1
1619  cfe5 20b3          	jra	L07
1685                     ; 328 int16_t __mqtt_pubrec(struct mqtt_client *client, uint16_t packet_id)
1685                     ; 329 {
1686                     .text:	section	.text,new
1687  cfe7               ___mqtt_pubrec:
1689  cfe7 89            	pushw	x
1690  cfe8 89            	pushw	x
1691       00000002      OFST:	set	2
1694                     ; 334     MQTT_CLIENT_TRY_PACK(
1696  cfe9 e60a          	ld	a,(10,x)
1697  cfeb 2a04          	jrpl	L517
1700  cfed ee0a          	ldw	x,(10,x)
1702  cfef 201e          	jra	L401
1703  cff1               L517:
1706  cff1 1e07          	ldw	x,(OFST+5,sp)
1707  cff3 89            	pushw	x
1708  cff4 4b05          	push	#5
1709  cff6 1e06          	ldw	x,(OFST+4,sp)
1710  cff8 ee28          	ldw	x,(40,x)
1711  cffa 89            	pushw	x
1712  cffb 1e08          	ldw	x,(OFST+6,sp)
1713  cffd ee26          	ldw	x,(38,x)
1714  cfff cddc54        	call	_mqtt_pack_pubxxx_request
1716  d002 5b05          	addw	sp,#5
1717  d004 1f01          	ldw	(OFST-1,sp),x
1721  d006 2a0a          	jrpl	L717
1726  d008               LC004:
1728  d008 1e03          	ldw	x,(OFST+1,sp)
1729  d00a 1601          	ldw	y,(OFST-1,sp)
1730  d00c ef0a          	ldw	(10,x),y
1732  d00e 93            	ldw	x,y
1734  d00f               L401:
1736  d00f 5b04          	addw	sp,#4
1737  d011 81            	ret	
1738  d012               L717:
1741  d012 262e          	jrne	L127
1744  d014 1e03          	ldw	x,(OFST+1,sp)
1745  d016 1c0022        	addw	x,#34
1746  d019 cddf5c        	call	_mqtt_mq_clean
1750  d01c 1e07          	ldw	x,(OFST+5,sp)
1751  d01e 89            	pushw	x
1752  d01f 4b05          	push	#5
1753  d021 1e06          	ldw	x,(OFST+4,sp)
1754  d023 ee28          	ldw	x,(40,x)
1755  d025 89            	pushw	x
1756  d026 1e08          	ldw	x,(OFST+6,sp)
1757  d028 ee26          	ldw	x,(38,x)
1758  d02a cddc54        	call	_mqtt_pack_pubxxx_request
1760  d02d 5b05          	addw	sp,#5
1761  d02f 1f01          	ldw	(OFST-1,sp),x
1768  d031 2bd5          	jrmi	LC004
1771  d033 260d          	jrne	L127
1774  d035 1e03          	ldw	x,(OFST+1,sp)
1775  d037 90ae8010      	ldw	y,#32784
1776  d03b ef0a          	ldw	(10,x),y
1779  d03d ae8010        	ldw	x,#32784
1781  d040 20cd          	jra	L401
1782  d042               L127:
1785  d042 89            	pushw	x
1786  d043 1e05          	ldw	x,(OFST+3,sp)
1787  d045 1c0022        	addw	x,#34
1788  d048 cddef5        	call	_mqtt_mq_register
1790  d04b 5b02          	addw	sp,#2
1791  d04d 1f01          	ldw	(OFST-1,sp),x
1793                     ; 345     msg->control_type = MQTT_CONTROL_PUBREC;
1796  d04f a605          	ld	a,#5
1797  d051 e709          	ld	(9,x),a
1798                     ; 346     msg->packet_id = packet_id;
1800  d053 1607          	ldw	y,(OFST+5,sp)
1801  d055 ef0a          	ldw	(10,x),y
1802                     ; 348     return MQTT_OK;
1804  d057 ae0001        	ldw	x,#1
1806  d05a 20b3          	jra	L401
1872                     ; 352 int16_t __mqtt_pubrel(struct mqtt_client *client, uint16_t packet_id)
1872                     ; 353 {
1873                     .text:	section	.text,new
1874  d05c               ___mqtt_pubrel:
1876  d05c 89            	pushw	x
1877  d05d 89            	pushw	x
1878       00000002      OFST:	set	2
1881                     ; 358     MQTT_CLIENT_TRY_PACK(
1883  d05e e60a          	ld	a,(10,x)
1884  d060 2a04          	jrpl	L567
1887  d062 ee0a          	ldw	x,(10,x)
1889  d064 201e          	jra	L021
1890  d066               L567:
1893  d066 1e07          	ldw	x,(OFST+5,sp)
1894  d068 89            	pushw	x
1895  d069 4b06          	push	#6
1896  d06b 1e06          	ldw	x,(OFST+4,sp)
1897  d06d ee28          	ldw	x,(40,x)
1898  d06f 89            	pushw	x
1899  d070 1e08          	ldw	x,(OFST+6,sp)
1900  d072 ee26          	ldw	x,(38,x)
1901  d074 cddc54        	call	_mqtt_pack_pubxxx_request
1903  d077 5b05          	addw	sp,#5
1904  d079 1f01          	ldw	(OFST-1,sp),x
1908  d07b 2a0a          	jrpl	L767
1913  d07d               LC005:
1915  d07d 1e03          	ldw	x,(OFST+1,sp)
1916  d07f 1601          	ldw	y,(OFST-1,sp)
1917  d081 ef0a          	ldw	(10,x),y
1919  d083 93            	ldw	x,y
1921  d084               L021:
1923  d084 5b04          	addw	sp,#4
1924  d086 81            	ret	
1925  d087               L767:
1928  d087 262e          	jrne	L177
1931  d089 1e03          	ldw	x,(OFST+1,sp)
1932  d08b 1c0022        	addw	x,#34
1933  d08e cddf5c        	call	_mqtt_mq_clean
1937  d091 1e07          	ldw	x,(OFST+5,sp)
1938  d093 89            	pushw	x
1939  d094 4b06          	push	#6
1940  d096 1e06          	ldw	x,(OFST+4,sp)
1941  d098 ee28          	ldw	x,(40,x)
1942  d09a 89            	pushw	x
1943  d09b 1e08          	ldw	x,(OFST+6,sp)
1944  d09d ee26          	ldw	x,(38,x)
1945  d09f cddc54        	call	_mqtt_pack_pubxxx_request
1947  d0a2 5b05          	addw	sp,#5
1948  d0a4 1f01          	ldw	(OFST-1,sp),x
1955  d0a6 2bd5          	jrmi	LC005
1958  d0a8 260d          	jrne	L177
1961  d0aa 1e03          	ldw	x,(OFST+1,sp)
1962  d0ac 90ae8010      	ldw	y,#32784
1963  d0b0 ef0a          	ldw	(10,x),y
1966  d0b2 ae8010        	ldw	x,#32784
1968  d0b5 20cd          	jra	L021
1969  d0b7               L177:
1972  d0b7 89            	pushw	x
1973  d0b8 1e05          	ldw	x,(OFST+3,sp)
1974  d0ba 1c0022        	addw	x,#34
1975  d0bd cddef5        	call	_mqtt_mq_register
1977  d0c0 5b02          	addw	sp,#2
1978  d0c2 1f01          	ldw	(OFST-1,sp),x
1980                     ; 369     msg->control_type = MQTT_CONTROL_PUBREL;
1983  d0c4 a606          	ld	a,#6
1984  d0c6 e709          	ld	(9,x),a
1985                     ; 370     msg->packet_id = packet_id;
1987  d0c8 1607          	ldw	y,(OFST+5,sp)
1988  d0ca ef0a          	ldw	(10,x),y
1989                     ; 372     return MQTT_OK;
1991  d0cc ae0001        	ldw	x,#1
1993  d0cf 20b3          	jra	L021
2059                     ; 376 int16_t __mqtt_pubcomp(struct mqtt_client *client, uint16_t packet_id)
2059                     ; 377 {
2060                     .text:	section	.text,new
2061  d0d1               ___mqtt_pubcomp:
2063  d0d1 89            	pushw	x
2064  d0d2 89            	pushw	x
2065       00000002      OFST:	set	2
2068                     ; 382     MQTT_CLIENT_TRY_PACK(
2070  d0d3 e60a          	ld	a,(10,x)
2071  d0d5 2a04          	jrpl	L5301
2074  d0d7 ee0a          	ldw	x,(10,x)
2076  d0d9 201e          	jra	L431
2077  d0db               L5301:
2080  d0db 1e07          	ldw	x,(OFST+5,sp)
2081  d0dd 89            	pushw	x
2082  d0de 4b07          	push	#7
2083  d0e0 1e06          	ldw	x,(OFST+4,sp)
2084  d0e2 ee28          	ldw	x,(40,x)
2085  d0e4 89            	pushw	x
2086  d0e5 1e08          	ldw	x,(OFST+6,sp)
2087  d0e7 ee26          	ldw	x,(38,x)
2088  d0e9 cddc54        	call	_mqtt_pack_pubxxx_request
2090  d0ec 5b05          	addw	sp,#5
2091  d0ee 1f01          	ldw	(OFST-1,sp),x
2095  d0f0 2a0a          	jrpl	L7301
2100  d0f2               LC006:
2102  d0f2 1e03          	ldw	x,(OFST+1,sp)
2103  d0f4 1601          	ldw	y,(OFST-1,sp)
2104  d0f6 ef0a          	ldw	(10,x),y
2106  d0f8 93            	ldw	x,y
2108  d0f9               L431:
2110  d0f9 5b04          	addw	sp,#4
2111  d0fb 81            	ret	
2112  d0fc               L7301:
2115  d0fc 262e          	jrne	L1401
2118  d0fe 1e03          	ldw	x,(OFST+1,sp)
2119  d100 1c0022        	addw	x,#34
2120  d103 cddf5c        	call	_mqtt_mq_clean
2124  d106 1e07          	ldw	x,(OFST+5,sp)
2125  d108 89            	pushw	x
2126  d109 4b07          	push	#7
2127  d10b 1e06          	ldw	x,(OFST+4,sp)
2128  d10d ee28          	ldw	x,(40,x)
2129  d10f 89            	pushw	x
2130  d110 1e08          	ldw	x,(OFST+6,sp)
2131  d112 ee26          	ldw	x,(38,x)
2132  d114 cddc54        	call	_mqtt_pack_pubxxx_request
2134  d117 5b05          	addw	sp,#5
2135  d119 1f01          	ldw	(OFST-1,sp),x
2142  d11b 2bd5          	jrmi	LC006
2145  d11d 260d          	jrne	L1401
2148  d11f 1e03          	ldw	x,(OFST+1,sp)
2149  d121 90ae8010      	ldw	y,#32784
2150  d125 ef0a          	ldw	(10,x),y
2153  d127 ae8010        	ldw	x,#32784
2155  d12a 20cd          	jra	L431
2156  d12c               L1401:
2159  d12c 89            	pushw	x
2160  d12d 1e05          	ldw	x,(OFST+3,sp)
2161  d12f 1c0022        	addw	x,#34
2162  d132 cddef5        	call	_mqtt_mq_register
2164  d135 5b02          	addw	sp,#2
2165  d137 1f01          	ldw	(OFST-1,sp),x
2167                     ; 393     msg->control_type = MQTT_CONTROL_PUBCOMP;
2170  d139 a607          	ld	a,#7
2171  d13b e709          	ld	(9,x),a
2172                     ; 394     msg->packet_id = packet_id;
2174  d13d 1607          	ldw	y,(OFST+5,sp)
2175  d13f ef0a          	ldw	(10,x),y
2176                     ; 396     return MQTT_OK;
2178  d141 ae0001        	ldw	x,#1
2180  d144 20b3          	jra	L431
2264                     ; 400 int16_t mqtt_subscribe(struct mqtt_client *client,
2264                     ; 401                        const char* topic_name,
2264                     ; 402                        int16_t max_qos_level)
2264                     ; 403 {
2265                     .text:	section	.text,new
2266  d146               _mqtt_subscribe:
2268  d146 89            	pushw	x
2269  d147 5204          	subw	sp,#4
2270       00000004      OFST:	set	4
2273                     ; 407     packet_id = __mqtt_next_pid(client);
2275  d149 cdcd85        	call	___mqtt_next_pid
2277  d14c 1f01          	ldw	(OFST-3,sp),x
2279                     ; 410     MQTT_CLIENT_TRY_PACK(
2281  d14e 1e05          	ldw	x,(OFST+1,sp)
2282  d150 e60a          	ld	a,(10,x)
2283  d152 2a04          	jrpl	L3111
2286  d154 ee0a          	ldw	x,(10,x)
2288  d156 2024          	jra	L251
2289  d158               L3111:
2292  d158 5f            	clrw	x
2293  d159 89            	pushw	x
2294  d15a 1e0d          	ldw	x,(OFST+9,sp)
2295  d15c 89            	pushw	x
2296  d15d 1e0d          	ldw	x,(OFST+9,sp)
2297  d15f 89            	pushw	x
2298  d160 1e07          	ldw	x,(OFST+3,sp)
2299  d162 89            	pushw	x
2300  d163 1e0d          	ldw	x,(OFST+9,sp)
2301  d165 ee28          	ldw	x,(40,x)
2302  d167 89            	pushw	x
2303  d168 1e0f          	ldw	x,(OFST+11,sp)
2304  d16a ee26          	ldw	x,(38,x)
2305  d16c cddd60        	call	_mqtt_pack_subscribe_request
2307  d16f 5b0a          	addw	sp,#10
2308  d171 1f03          	ldw	(OFST-1,sp),x
2312  d173 2a0a          	jrpl	L5111
2317  d175               LC007:
2319  d175 1e05          	ldw	x,(OFST+1,sp)
2320  d177 1603          	ldw	y,(OFST-1,sp)
2321  d179 ef0a          	ldw	(10,x),y
2323  d17b 93            	ldw	x,y
2325  d17c               L251:
2327  d17c 5b06          	addw	sp,#6
2328  d17e 81            	ret	
2329  d17f               L5111:
2332  d17f 2634          	jrne	L7111
2335  d181 1e05          	ldw	x,(OFST+1,sp)
2336  d183 1c0022        	addw	x,#34
2337  d186 cddf5c        	call	_mqtt_mq_clean
2341  d189 5f            	clrw	x
2342  d18a 89            	pushw	x
2343  d18b 1e0d          	ldw	x,(OFST+9,sp)
2344  d18d 89            	pushw	x
2345  d18e 1e0d          	ldw	x,(OFST+9,sp)
2346  d190 89            	pushw	x
2347  d191 1e07          	ldw	x,(OFST+3,sp)
2348  d193 89            	pushw	x
2349  d194 1e0d          	ldw	x,(OFST+9,sp)
2350  d196 ee28          	ldw	x,(40,x)
2351  d198 89            	pushw	x
2352  d199 1e0f          	ldw	x,(OFST+11,sp)
2353  d19b ee26          	ldw	x,(38,x)
2354  d19d cddd60        	call	_mqtt_pack_subscribe_request
2356  d1a0 5b0a          	addw	sp,#10
2357  d1a2 1f03          	ldw	(OFST-1,sp),x
2364  d1a4 2bcf          	jrmi	LC007
2367  d1a6 260d          	jrne	L7111
2370  d1a8 1e05          	ldw	x,(OFST+1,sp)
2371  d1aa 90ae8010      	ldw	y,#32784
2372  d1ae ef0a          	ldw	(10,x),y
2375  d1b0 ae8010        	ldw	x,#32784
2377  d1b3 20c7          	jra	L251
2378  d1b5               L7111:
2381  d1b5 89            	pushw	x
2382  d1b6 1e07          	ldw	x,(OFST+3,sp)
2383  d1b8 1c0022        	addw	x,#34
2384  d1bb cddef5        	call	_mqtt_mq_register
2386  d1be 5b02          	addw	sp,#2
2387  d1c0 1f03          	ldw	(OFST-1,sp),x
2389                     ; 423     msg->control_type = MQTT_CONTROL_SUBSCRIBE;
2392  d1c2 a608          	ld	a,#8
2393  d1c4 e709          	ld	(9,x),a
2394                     ; 424     msg->packet_id = packet_id;
2396  d1c6 1601          	ldw	y,(OFST-3,sp)
2397  d1c8 ef0a          	ldw	(10,x),y
2398                     ; 425     return MQTT_OK;
2400  d1ca ae0001        	ldw	x,#1
2402  d1cd 20ad          	jra	L251
2479                     ; 429 int16_t mqtt_unsubscribe(struct mqtt_client *client,
2479                     ; 430                          const char* topic_name)
2479                     ; 431 {
2480                     .text:	section	.text,new
2481                     _mqtt_unsubscribe:
2483                     	pushw	x
2484                     	subw	sp,#4
2485       00000004      OFST:	set	4
2488                     ; 432     uint16_t packet_id = __mqtt_next_pid(client);
2490                     	call	___mqtt_next_pid
2492                     	ldw	(OFST-3,sp),x
2494                     ; 437     MQTT_CLIENT_TRY_PACK(
2496                     	ldw	x,(OFST+1,sp)
2497                     	ld	a,(10,x)
2498                     	jrpl	L7611
2501                     	ldw	x,(10,x)
2503                     	jra	L071
2504                     L7611:
2507                     	clrw	x
2508                     	pushw	x
2509                     	ldw	x,(OFST+7,sp)
2510                     	pushw	x
2511                     	ldw	x,(OFST+1,sp)
2512                     	pushw	x
2513                     	ldw	x,(OFST+7,sp)
2514                     	ldw	x,(40,x)
2515                     	pushw	x
2516                     	ldw	x,(OFST+9,sp)
2517                     	ldw	x,(38,x)
2518                     	call	_mqtt_pack_unsubscribe_request
2520                     	addw	sp,#8
2521                     	ldw	(OFST-1,sp),x
2525                     	jrpl	L1711
2530                     LC008:
2532                     	ldw	x,(OFST+1,sp)
2533                     	ldw	y,(OFST-1,sp)
2534                     	ldw	(10,x),y
2536                     	ldw	x,y
2538                     L071:
2540                     	addw	sp,#6
2541                     	ret	
2542                     L1711:
2545                     	jrne	L3711
2548                     	ldw	x,(OFST+1,sp)
2549                     	addw	x,#34
2550                     	call	_mqtt_mq_clean
2554                     	clrw	x
2555                     	pushw	x
2556                     	ldw	x,(OFST+7,sp)
2557                     	pushw	x
2558                     	ldw	x,(OFST+1,sp)
2559                     	pushw	x
2560                     	ldw	x,(OFST+7,sp)
2561                     	ldw	x,(40,x)
2562                     	pushw	x
2563                     	ldw	x,(OFST+9,sp)
2564                     	ldw	x,(38,x)
2565                     	call	_mqtt_pack_unsubscribe_request
2567                     	addw	sp,#8
2568                     	ldw	(OFST-1,sp),x
2575                     	jrmi	LC008
2578                     	jrne	L3711
2581                     	ldw	x,(OFST+1,sp)
2582                     	ldw	y,#32784
2583                     	ldw	(10,x),y
2586                     	ldw	x,#32784
2588                     	jra	L071
2589                     L3711:
2592                     	pushw	x
2593                     	ldw	x,(OFST+3,sp)
2594                     	addw	x,#34
2595                     	call	_mqtt_mq_register
2597                     	addw	sp,#2
2598                     	ldw	(OFST-1,sp),x
2600                     ; 449     msg->control_type = MQTT_CONTROL_UNSUBSCRIBE;
2603                     	ld	a,#10
2604                     	ld	(9,x),a
2605                     ; 450     msg->packet_id = packet_id;
2607                     	ldw	y,(OFST-3,sp)
2608                     	ldw	(10,x),y
2609                     ; 452     return MQTT_OK;
2611                     	ldw	x,#1
2613                     	jra	L071
2658                     ; 456 int16_t mqtt_ping(struct mqtt_client *client)
2658                     ; 457 {
2659                     .text:	section	.text,new
2660                     _mqtt_ping:
2662                     	pushw	x
2663       00000002      OFST:	set	2
2666                     ; 459     rv = __mqtt_ping(client);
2668                     	call	___mqtt_ping
2671                     ; 460     return rv;
2675                     	addw	sp,#2
2676                     	ret	
2735                     ; 464 int16_t __mqtt_ping(struct mqtt_client *client) 
2735                     ; 465 {
2736                     .text:	section	.text,new
2737  d1cf               ___mqtt_ping:
2739  d1cf 89            	pushw	x
2740  d1d0 89            	pushw	x
2741       00000002      OFST:	set	2
2744                     ; 470     MQTT_CLIENT_TRY_PACK(
2746  d1d1 e60a          	ld	a,(10,x)
2747  d1d3 2a04          	jrpl	L7521
2750  d1d5 ee0a          	ldw	x,(10,x)
2752  d1d7 2017          	jra	L012
2753  d1d9               L7521:
2756  d1d9 ee28          	ldw	x,(40,x)
2757  d1db 89            	pushw	x
2758  d1dc 1e05          	ldw	x,(OFST+3,sp)
2759  d1de ee26          	ldw	x,(38,x)
2760  d1e0 cdda98        	call	_mqtt_pack_ping_request
2762  d1e3 5b02          	addw	sp,#2
2763  d1e5 1f01          	ldw	(OFST-1,sp),x
2767  d1e7 2a0a          	jrpl	L1621
2772  d1e9               LC009:
2774  d1e9 1e03          	ldw	x,(OFST+1,sp)
2775  d1eb 1601          	ldw	y,(OFST-1,sp)
2776  d1ed ef0a          	ldw	(10,x),y
2778  d1ef 93            	ldw	x,y
2780  d1f0               L012:
2782  d1f0 5b04          	addw	sp,#4
2783  d1f2 81            	ret	
2784  d1f3               L1621:
2787  d1f3 2629          	jrne	L3621
2790  d1f5 1e03          	ldw	x,(OFST+1,sp)
2791  d1f7 1c0022        	addw	x,#34
2792  d1fa cddf5c        	call	_mqtt_mq_clean
2796  d1fd 1e03          	ldw	x,(OFST+1,sp)
2797  d1ff ee28          	ldw	x,(40,x)
2798  d201 89            	pushw	x
2799  d202 1e05          	ldw	x,(OFST+3,sp)
2800  d204 ee26          	ldw	x,(38,x)
2801  d206 cdda98        	call	_mqtt_pack_ping_request
2803  d209 5b02          	addw	sp,#2
2804  d20b 1f01          	ldw	(OFST-1,sp),x
2811  d20d 2bda          	jrmi	LC009
2814  d20f 260d          	jrne	L3621
2817  d211 1e03          	ldw	x,(OFST+1,sp)
2818  d213 90ae8010      	ldw	y,#32784
2819  d217 ef0a          	ldw	(10,x),y
2822  d219 ae8010        	ldw	x,#32784
2824  d21c 20d2          	jra	L012
2825  d21e               L3621:
2828  d21e 89            	pushw	x
2829  d21f 1e05          	ldw	x,(OFST+3,sp)
2830  d221 1c0022        	addw	x,#34
2831  d224 cddef5        	call	_mqtt_mq_register
2833  d227 5b02          	addw	sp,#2
2835                     ; 479     msg->control_type = MQTT_CONTROL_PINGREQ;
2838  d229 a60c          	ld	a,#12
2839  d22b e709          	ld	(9,x),a
2840                     ; 481     return MQTT_OK;
2842  d22d ae0001        	ldw	x,#1
2844  d230 20be          	jra	L012
2903                     ; 485 int16_t mqtt_disconnect(struct mqtt_client *client) 
2903                     ; 486 {
2904                     .text:	section	.text,new
2905  d232               _mqtt_disconnect:
2907  d232 89            	pushw	x
2908  d233 89            	pushw	x
2909       00000002      OFST:	set	2
2912                     ; 491     MQTT_CLIENT_TRY_PACK(
2914  d234 e60a          	ld	a,(10,x)
2915  d236 2a04          	jrpl	L5231
2918  d238 ee0a          	ldw	x,(10,x)
2920  d23a 2017          	jra	L422
2921  d23c               L5231:
2924  d23c ee28          	ldw	x,(40,x)
2925  d23e 89            	pushw	x
2926  d23f 1e05          	ldw	x,(OFST+3,sp)
2927  d241 ee26          	ldw	x,(38,x)
2928  d243 cdda78        	call	_mqtt_pack_disconnect
2930  d246 5b02          	addw	sp,#2
2931  d248 1f01          	ldw	(OFST-1,sp),x
2935  d24a 2a0a          	jrpl	L7231
2940  d24c               LC010:
2942  d24c 1e03          	ldw	x,(OFST+1,sp)
2943  d24e 1601          	ldw	y,(OFST-1,sp)
2944  d250 ef0a          	ldw	(10,x),y
2946  d252 93            	ldw	x,y
2948  d253               L422:
2950  d253 5b04          	addw	sp,#4
2951  d255 81            	ret	
2952  d256               L7231:
2955  d256 2629          	jrne	L1331
2958  d258 1e03          	ldw	x,(OFST+1,sp)
2959  d25a 1c0022        	addw	x,#34
2960  d25d cddf5c        	call	_mqtt_mq_clean
2964  d260 1e03          	ldw	x,(OFST+1,sp)
2965  d262 ee28          	ldw	x,(40,x)
2966  d264 89            	pushw	x
2967  d265 1e05          	ldw	x,(OFST+3,sp)
2968  d267 ee26          	ldw	x,(38,x)
2969  d269 cdda78        	call	_mqtt_pack_disconnect
2971  d26c 5b02          	addw	sp,#2
2972  d26e 1f01          	ldw	(OFST-1,sp),x
2979  d270 2bda          	jrmi	LC010
2982  d272 260d          	jrne	L1331
2985  d274 1e03          	ldw	x,(OFST+1,sp)
2986  d276 90ae8010      	ldw	y,#32784
2987  d27a ef0a          	ldw	(10,x),y
2990  d27c ae8010        	ldw	x,#32784
2992  d27f 20d2          	jra	L422
2993  d281               L1331:
2996  d281 89            	pushw	x
2997  d282 1e05          	ldw	x,(OFST+3,sp)
2998  d284 1c0022        	addw	x,#34
2999  d287 cddef5        	call	_mqtt_mq_register
3001  d28a 5b02          	addw	sp,#2
3003                     ; 500     msg->control_type = MQTT_CONTROL_DISCONNECT;
3006  d28c a60e          	ld	a,#14
3007  d28e e709          	ld	(9,x),a
3008                     ; 502     return MQTT_OK;
3010  d290 ae0001        	ldw	x,#1
3012  d293 20be          	jra	L422
3120                     ; 506 int16_t __mqtt_send(struct mqtt_client *client) 
3120                     ; 507 {
3121                     .text:	section	.text,new
3122  d295               ___mqtt_send:
3124  d295 89            	pushw	x
3125  d296 520d          	subw	sp,#13
3126       0000000d      OFST:	set	13
3129                     ; 510     int16_t inflight_qos2 = 0;
3131  d298 5f            	clrw	x
3132  d299 1f07          	ldw	(OFST-6,sp),x
3134                     ; 511     int16_t i = 0;
3136  d29b 1f0b          	ldw	(OFST-2,sp),x
3138                     ; 513     if (client->error < 0 && client->error != MQTT_ERROR_SEND_BUFFER_IS_FULL) {
3140  d29d 1e0e          	ldw	x,(OFST+1,sp)
3141  d29f 6d0a          	tnz	(10,x)
3142  d2a1 2a10          	jrpl	L1241
3144  d2a3 9093          	ldw	y,x
3145  d2a5 90ee0a        	ldw	y,(10,y)
3146  d2a8 90a38010      	cpw	y,#32784
3147  d2ac 2705          	jreq	L1241
3148                     ; 514       return client->error;
3150  d2ae ee0a          	ldw	x,(10,x)
3152  d2b0 ccd378        	jra	L432
3153  d2b3               L1241:
3154                     ; 518     len = mqtt_mq_length(&client->mq);
3156  d2b3 ee24          	ldw	x,(36,x)
3157  d2b5 160e          	ldw	y,(OFST+1,sp)
3158  d2b7 01            	rrwa	x,a
3159  d2b8 90e02b        	sub	a,(43,y)
3160  d2bb 01            	rrwa	x,a
3161  d2bc 90e22a        	sbc	a,(42,y)
3162  d2bf 01            	rrwa	x,a
3163  d2c0 a60c          	ld	a,#12
3164  d2c2 cdf861        	call	c_sdivx
3166  d2c5 1f09          	ldw	(OFST-4,sp),x
3169  d2c7 ccd463        	jra	L7241
3170  d2ca               L3241:
3171                     ; 520         struct mqtt_queued_message *msg = mqtt_mq_get(&client->mq, i);
3173  d2ca a60c          	ld	a,#12
3174  d2cc cdf462        	call	c_bmulx
3176  d2cf 1f01          	ldw	(OFST-12,sp),x
3178  d2d1 1e0e          	ldw	x,(OFST+1,sp)
3179  d2d3 ee24          	ldw	x,(36,x)
3180  d2d5 1d000c        	subw	x,#12
3181  d2d8 72f001        	subw	x,(OFST-12,sp)
3182  d2db 1f05          	ldw	(OFST-8,sp),x
3184                     ; 521         int16_t resend = 0;
3186  d2dd 5f            	clrw	x
3187  d2de 1f03          	ldw	(OFST-10,sp),x
3189                     ; 522         if (msg->state == MQTT_QUEUED_UNSENT) {
3191  d2e0 1e05          	ldw	x,(OFST-8,sp)
3192  d2e2 e604          	ld	a,(4,x)
3193  d2e4 2607          	jrne	L3341
3194                     ; 524             resend = 1;
3196  d2e6 ae0001        	ldw	x,#1
3197  d2e9 1f03          	ldw	(OFST-10,sp),x
3200  d2eb 202f          	jra	L5341
3201  d2ed               L3341:
3202                     ; 526 	else if (msg->state == MQTT_QUEUED_AWAITING_ACK) {
3204  d2ed 4a            	dec	a
3205  d2ee 262c          	jrne	L5341
3206                     ; 528             if (second_counter > msg->time_sent + client->response_timeout) {
3208  d2f0 1e0e          	ldw	x,(OFST+1,sp)
3209  d2f2 ee0c          	ldw	x,(12,x)
3210  d2f4 cdf62e        	call	c_itolx
3212  d2f7 1e05          	ldw	x,(OFST-8,sp)
3213  d2f9 1c0005        	addw	x,#5
3214  d2fc cdf660        	call	c_ladd
3216  d2ff ae029c        	ldw	x,#_second_counter
3217  d302 cdf678        	call	c_lcmp
3219  d305 2415          	jruge	L5341
3220                     ; 529                 resend = 1;
3222  d307 ae0001        	ldw	x,#1
3223  d30a 1f03          	ldw	(OFST-10,sp),x
3225                     ; 530                 client->number_of_timeouts += 1;
3227  d30c 1e0e          	ldw	x,(OFST+1,sp)
3228  d30e 9093          	ldw	y,x
3229  d310 ee0e          	ldw	x,(14,x)
3230  d312 5c            	incw	x
3231  d313 90ef0e        	ldw	(14,y),x
3232                     ; 531                 client->send_offset = 0;
3234  d316 1e0e          	ldw	x,(OFST+1,sp)
3235  d318 905f          	clrw	y
3236  d31a ef04          	ldw	(4,x),y
3237  d31c               L5341:
3238                     ; 536         if (msg->control_type == MQTT_CONTROL_PUBLISH
3238                     ; 537             && (msg->state == MQTT_QUEUED_UNSENT || msg->state == MQTT_QUEUED_AWAITING_ACK)) 
3240  d31c 1e05          	ldw	x,(OFST-8,sp)
3241  d31e e609          	ld	a,(9,x)
3242  d320 a103          	cp	a,#3
3243  d322 261f          	jrne	L3441
3245  d324 e604          	ld	a,(4,x)
3246  d326 2704          	jreq	L5441
3248  d328 a101          	cp	a,#1
3249  d32a 2617          	jrne	L3441
3250  d32c               L5441:
3251                     ; 539             inspected = (uint8_t)(0x03 & ((msg->start[0]) >> 1)); // qos
3253  d32c fe            	ldw	x,(x)
3254  d32d f6            	ld	a,(x)
3255  d32e a406          	and	a,#6
3256  d330 44            	srl	a
3257  d331 6b0d          	ld	(OFST+0,sp),a
3259                     ; 540             if (inspected == 2) {
3261  d333 a102          	cp	a,#2
3262  d335 260c          	jrne	L3441
3263                     ; 541                 if (inflight_qos2) resend = 0;
3265  d337 1e07          	ldw	x,(OFST-6,sp)
3266  d339 2703          	jreq	L1541
3269  d33b 5f            	clrw	x
3270  d33c 1f03          	ldw	(OFST-10,sp),x
3272  d33e               L1541:
3273                     ; 542                 inflight_qos2 = 1;
3275  d33e ae0001        	ldw	x,#1
3276  d341 1f07          	ldw	(OFST-6,sp),x
3278  d343               L3441:
3279                     ; 547         if (!resend) continue;
3281  d343 1e03          	ldw	x,(OFST-10,sp)
3282  d345 2603ccd43a    	jreq	L5241
3285                     ; 551           int16_t tmp = mqtt_pal_sendall(msg->start + client->send_offset, msg->size - client->send_offset);
3287  d34a 1e05          	ldw	x,(OFST-8,sp)
3288  d34c 160e          	ldw	y,(OFST+1,sp)
3289  d34e ee02          	ldw	x,(2,x)
3290  d350 01            	rrwa	x,a
3291  d351 90e005        	sub	a,(5,y)
3292  d354 01            	rrwa	x,a
3293  d355 90e204        	sbc	a,(4,y)
3294  d358 01            	rrwa	x,a
3295  d359 89            	pushw	x
3296  d35a 1e10          	ldw	x,(OFST+3,sp)
3297  d35c 1607          	ldw	y,(OFST-6,sp)
3298  d35e ee04          	ldw	x,(4,x)
3299  d360 01            	rrwa	x,a
3300  d361 90eb01        	add	a,(1,y)
3301  d364 01            	rrwa	x,a
3302  d365 90f9          	adc	a,(y)
3303  d367 01            	rrwa	x,a
3304  d368 cde20e        	call	_mqtt_pal_sendall
3306  d36b 5b02          	addw	sp,#2
3307  d36d 1f03          	ldw	(OFST-10,sp),x
3309                     ; 554           if (tmp < 0) {
3311  d36f 2a0a          	jrpl	L5541
3312                     ; 555             client->error = tmp;
3314  d371 1e0e          	ldw	x,(OFST+1,sp)
3315  d373 1603          	ldw	y,(OFST-10,sp)
3316                     ; 556             return tmp;
3318  d375               LC014:
3319  d375 ef0a          	ldw	(10,x),y
3321  d377 93            	ldw	x,y
3323  d378               L432:
3325  d378 5b0f          	addw	sp,#15
3326  d37a 81            	ret	
3327  d37b               L5541:
3328                     ; 559             client->send_offset += tmp;
3330  d37b 1e0e          	ldw	x,(OFST+1,sp)
3331  d37d 9093          	ldw	y,x
3332  d37f ee04          	ldw	x,(4,x)
3333  d381 72fb03        	addw	x,(OFST-10,sp)
3334  d384 90ef04        	ldw	(4,y),x
3335                     ; 560             if(client->send_offset < msg->size) {
3337  d387 1e0e          	ldw	x,(OFST+1,sp)
3338  d389 1605          	ldw	y,(OFST-8,sp)
3339  d38b ee04          	ldw	x,(4,x)
3340  d38d 90e302        	cpw	x,(2,y)
3341  d390 2441          	jruge	L1641
3342                     ; 562               break;
3343  d392               L1341:
3344                     ; 629         uint32_t keep_alive_timeout = client->time_of_last_send + (uint32_t)((float)(client->keep_alive) * 0.75);
3346  d392 1e0e          	ldw	x,(OFST+1,sp)
3347  d394 ee02          	ldw	x,(2,x)
3348  d396 cdf886        	call	c_uitof
3350  d399 ae9d6c        	ldw	x,#L5051
3351  d39c cdf4d6        	call	c_fmul
3353  d39f cdf5b1        	call	c_ftol
3355  d3a2 1e0e          	ldw	x,(OFST+1,sp)
3356  d3a4 1c0006        	addw	x,#6
3357  d3a7 cdf660        	call	c_ladd
3359  d3aa 96            	ldw	x,sp
3360  d3ab 1c0003        	addw	x,#OFST-10
3361  d3ae cdf849        	call	c_rtol
3364                     ; 630         if (second_counter > keep_alive_timeout) {
3366  d3b1 ae029c        	ldw	x,#_second_counter
3367  d3b4 cdf6e3        	call	c_ltor
3369  d3b7 96            	ldw	x,sp
3370  d3b8 1c0003        	addw	x,#OFST-10
3371  d3bb cdf678        	call	c_lcmp
3373  d3be 2203ccd46f    	jrule	L1151
3374                     ; 631           int16_t rv = __mqtt_ping(client);
3376  d3c3 1e0e          	ldw	x,(OFST+1,sp)
3377  d3c5 cdd1cf        	call	___mqtt_ping
3379  d3c8 1f09          	ldw	(OFST-4,sp),x
3381                     ; 632           if (rv != MQTT_OK) {
3383  d3ca 5a            	decw	x
3384  d3cb 27f3          	jreq	L1151
3385                     ; 633             client->error = rv;
3387  d3cd 1e0e          	ldw	x,(OFST+1,sp)
3388  d3cf 1609          	ldw	y,(OFST-4,sp)
3389                     ; 634             return rv;
3391  d3d1 20a2          	jp	LC014
3392  d3d3               L1641:
3393                     ; 567               client->send_offset = 0;
3395  d3d3 1e0e          	ldw	x,(OFST+1,sp)
3396  d3d5 905f          	clrw	y
3397  d3d7 ef04          	ldw	(4,x),y
3398                     ; 573         client->time_of_last_send = second_counter;
3400  d3d9 c6029f        	ld	a,_second_counter+3
3401  d3dc e709          	ld	(9,x),a
3402  d3de c6029e        	ld	a,_second_counter+2
3403  d3e1 e708          	ld	(8,x),a
3404  d3e3 c6029d        	ld	a,_second_counter+1
3405  d3e6 e707          	ld	(7,x),a
3406  d3e8 c6029c        	ld	a,_second_counter
3407  d3eb e706          	ld	(6,x),a
3408                     ; 574         msg->time_sent = client->time_of_last_send;
3410  d3ed 1605          	ldw	y,(OFST-8,sp)
3411  d3ef e609          	ld	a,(9,x)
3412  d3f1 90e708        	ld	(8,y),a
3413  d3f4 e608          	ld	a,(8,x)
3414  d3f6 90e707        	ld	(7,y),a
3415  d3f9 e607          	ld	a,(7,x)
3416  d3fb 90e706        	ld	(6,y),a
3417  d3fe e606          	ld	a,(6,x)
3418                     ; 593         switch (msg->control_type) {
3420  d400 93            	ldw	x,y
3421  d401 90e705        	ld	(5,y),a
3422  d404 e609          	ld	a,(9,x)
3424                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3425  d406 4a            	dec	a
3426  d407 2756          	jreq	L7431
3427  d409 a002          	sub	a,#2
3428  d40b 2734          	jreq	L5431
3429  d40d 4a            	dec	a
3430  d40e 2726          	jreq	L3431
3431  d410 4a            	dec	a
3432  d411 274c          	jreq	L7431
3433  d413 4a            	dec	a
3434  d414 2749          	jreq	L7431
3435  d416 4a            	dec	a
3436  d417 271d          	jreq	L3431
3437  d419 4a            	dec	a
3438  d41a 2743          	jreq	L7431
3439  d41c a002          	sub	a,#2
3440  d41e 273f          	jreq	L7431
3441  d420 a002          	sub	a,#2
3442  d422 273b          	jreq	L7431
3443  d424 a002          	sub	a,#2
3444  d426 270e          	jreq	L3431
3445                     ; 621         default:
3445                     ; 622             client->error = MQTT_ERROR_MALFORMED_REQUEST;
3447  d428 1e0e          	ldw	x,(OFST+1,sp)
3448  d42a 90ae8012      	ldw	y,#32786
3449  d42e ef0a          	ldw	(10,x),y
3450                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3452  d430 ae8012        	ldw	x,#32786
3454  d433 ccd378        	jra	L432
3455  d436               L3431:
3456                     ; 594         case MQTT_CONTROL_PUBACK:
3456                     ; 595         case MQTT_CONTROL_PUBCOMP:
3456                     ; 596         case MQTT_CONTROL_DISCONNECT:
3456                     ; 597             msg->state = MQTT_QUEUED_COMPLETE;
3458  d436 a602          	ld	a,#2
3459  d438               LC011:
3460  d438 e704          	ld	(4,x),a
3461                     ; 598             break;
3462  d43a               L5241:
3463                     ; 519     for(; i < len; ++i) {
3465  d43a 1e0b          	ldw	x,(OFST-2,sp)
3466  d43c 5c            	incw	x
3467  d43d 1f0b          	ldw	(OFST-2,sp),x
3469  d43f 2022          	jra	L7241
3470  d441               L5431:
3471                     ; 599         case MQTT_CONTROL_PUBLISH:
3471                     ; 600             inspected = (uint8_t)(( MQTT_PUBLISH_QOS_MASK & (msg->start[0]) ) >> 1); /* qos */
3473  d441 fe            	ldw	x,(x)
3474  d442 f6            	ld	a,(x)
3475  d443 a406          	and	a,#6
3476  d445 44            	srl	a
3477  d446 6b0d          	ld	(OFST+0,sp),a
3479                     ; 601             if (inspected == 0) {
3481  d448 2604          	jrne	L1741
3482                     ; 602                 msg->state = MQTT_QUEUED_COMPLETE;
3484  d44a 1e05          	ldw	x,(OFST-8,sp)
3486  d44c 20e8          	jp	L3431
3487  d44e               L1741:
3488                     ; 604 	    else if (inspected == 1) {
3490  d44e 4a            	dec	a
3491  d44f 260c          	jrne	L5741
3492                     ; 605                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3494  d451 1e05          	ldw	x,(OFST-8,sp)
3495  d453 4c            	inc	a
3496  d454 e704          	ld	(4,x),a
3497                     ; 607                 msg->start[0] |= MQTT_PUBLISH_DUP;
3499  d456 fe            	ldw	x,(x)
3500  d457 f6            	ld	a,(x)
3501  d458 aa08          	or	a,#8
3502  d45a f7            	ld	(x),a
3504  d45b 20dd          	jra	L5241
3505  d45d               L5741:
3506                     ; 610                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3508  d45d 1e05          	ldw	x,(OFST-8,sp)
3509  d45f               L7431:
3510                     ; 613         case MQTT_CONTROL_CONNECT:
3510                     ; 614         case MQTT_CONTROL_PUBREC:
3510                     ; 615         case MQTT_CONTROL_PUBREL:
3510                     ; 616         case MQTT_CONTROL_SUBSCRIBE:
3510                     ; 617         case MQTT_CONTROL_UNSUBSCRIBE:
3510                     ; 618         case MQTT_CONTROL_PINGREQ:
3510                     ; 619             msg->state = MQTT_QUEUED_AWAITING_ACK;
3512  d45f a601          	ld	a,#1
3513                     ; 620             break;
3515  d461 20d5          	jp	LC011
3516  d463               L7241:
3517                     ; 519     for(; i < len; ++i) {
3519  d463 1e0b          	ldw	x,(OFST-2,sp)
3520  d465 1309          	cpw	x,(OFST-4,sp)
3521  d467 2e03ccd2ca    	jrslt	L3241
3522  d46c ccd392        	jra	L1341
3523  d46f               L1151:
3524                     ; 639     return MQTT_OK;
3526  d46f ae0001        	ldw	x,#1
3528  d472 ccd378        	jra	L432
4080                     ; 643 int16_t __mqtt_recv(struct mqtt_client *client)
4080                     ; 644 {
4081                     .text:	section	.text,new
4082  d475               ___mqtt_recv:
4084  d475 89            	pushw	x
4085  d476 5220          	subw	sp,#32
4086       00000020      OFST:	set	32
4089                     ; 646     int16_t mqtt_recv_ret = MQTT_OK;
4091  d478 ae0001        	ldw	x,#1
4092  d47b 1f07          	ldw	(OFST-25,sp),x
4094                     ; 648     struct mqtt_queued_message *msg = NULL;
4096                     ; 656     rv = mqtt_pal_recvall(client->recv_buffer.curr, client->recv_buffer.curr_sz);
4098  d47d 1e21          	ldw	x,(OFST+1,sp)
4099  d47f ee20          	ldw	x,(32,x)
4100  d481 89            	pushw	x
4101  d482 1e23          	ldw	x,(OFST+3,sp)
4102  d484 ee1e          	ldw	x,(30,x)
4103  d486 cde225        	call	_mqtt_pal_recvall
4105  d489 5b02          	addw	sp,#2
4106  d48b 1f1f          	ldw	(OFST-1,sp),x
4108                     ; 658     client->recv_buffer.curr += rv;
4110  d48d 1e21          	ldw	x,(OFST+1,sp)
4111  d48f 9093          	ldw	y,x
4112  d491 ee1e          	ldw	x,(30,x)
4113  d493 72fb1f        	addw	x,(OFST-1,sp)
4114  d496 90ef1e        	ldw	(30,y),x
4115                     ; 659     client->recv_buffer.curr_sz -= rv;
4117  d499 1e21          	ldw	x,(OFST+1,sp)
4118  d49b 9093          	ldw	y,x
4119  d49d ee20          	ldw	x,(32,x)
4120  d49f 72f01f        	subw	x,(OFST-1,sp)
4121  d4a2 90ef20        	ldw	(32,y),x
4122                     ; 662     consumed = mqtt_unpack_response(&response, client->recv_buffer.mem_start, client->recv_buffer.curr - client->recv_buffer.mem_start);
4124  d4a5 1e21          	ldw	x,(OFST+1,sp)
4125  d4a7 1621          	ldw	y,(OFST+1,sp)
4126  d4a9 ee1e          	ldw	x,(30,x)
4127  d4ab 01            	rrwa	x,a
4128  d4ac 90e01b        	sub	a,(27,y)
4129  d4af 01            	rrwa	x,a
4130  d4b0 90e21a        	sbc	a,(26,y)
4131  d4b3 01            	rrwa	x,a
4132  d4b4 89            	pushw	x
4133  d4b5 1e23          	ldw	x,(OFST+3,sp)
4134  d4b7 ee1a          	ldw	x,(26,x)
4135  d4b9 89            	pushw	x
4136  d4ba 96            	ldw	x,sp
4137  d4bb 1c000d        	addw	x,#OFST-19
4138  d4be cde0e6        	call	_mqtt_unpack_response
4140  d4c1 5b04          	addw	sp,#4
4141  d4c3 1f05          	ldw	(OFST-27,sp),x
4143                     ; 664     if (consumed < 0) {
4145  d4c5 2a09          	jrpl	L7502
4146                     ; 665         client->error = consumed;
4148  d4c7 1e21          	ldw	x,(OFST+1,sp)
4149  d4c9 1605          	ldw	y,(OFST-27,sp)
4150  d4cb ef0a          	ldw	(10,x),y
4151                     ; 666         return consumed;
4153  d4cd 93            	ldw	x,y
4155  d4ce 2013          	jra	L403
4156  d4d0               L7502:
4157                     ; 668     else if (consumed == 0) {
4159  d4d0 2619          	jrne	L1602
4160                     ; 674         if (client->recv_buffer.curr_sz == 0) {
4162  d4d2 1e21          	ldw	x,(OFST+1,sp)
4163  d4d4 e621          	ld	a,(33,x)
4164  d4d6 ea20          	or	a,(32,x)
4165  d4d8 260c          	jrne	L5602
4166                     ; 675             client->error = MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4168  d4da 90ae8013      	ldw	y,#32787
4169  d4de ef0a          	ldw	(10,x),y
4170                     ; 676             return MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4172  d4e0 ae8013        	ldw	x,#32787
4174  d4e3               L403:
4176  d4e3 5b22          	addw	sp,#34
4177  d4e5 81            	ret	
4178  d4e6               L5602:
4179                     ; 680         return MQTT_OK;
4181  d4e6 ae0001        	ldw	x,#1
4183  d4e9 20f8          	jra	L403
4184  d4eb               L1602:
4185                     ; 712     switch (response.fixed_header.control_type) {
4187  d4eb 7b09          	ld	a,(OFST-23,sp)
4189                     ; 861             break;
4190  d4ed a002          	sub	a,#2
4191  d4ef 2741          	jreq	L5151
4192  d4f1 4a            	dec	a
4193  d4f2 2603ccd574    	jreq	L7151
4194  d4f7 4a            	dec	a
4195  d4f8 2603ccd5d9    	jreq	L1251
4196  d4fd 4a            	dec	a
4197  d4fe 2603ccd5ff    	jreq	L3251
4198  d503 4a            	dec	a
4199  d504 2603ccd644    	jreq	L5251
4200  d509 4a            	dec	a
4201  d50a 2603ccd675    	jreq	L7251
4202  d50f a002          	sub	a,#2
4203  d511 2603ccd67f    	jreq	L1351
4204  d516 a002          	sub	a,#2
4205  d518 2603ccd6b1    	jreq	L3351
4206  d51d a002          	sub	a,#2
4207  d51f 2603ccd6bb    	jreq	L5351
4208                     ; 858         default:
4208                     ; 859             client->error = MQTT_ERROR_MALFORMED_RESPONSE;
4210  d524 1e21          	ldw	x,(OFST+1,sp)
4211  d526 90ae800c      	ldw	y,#32780
4212  d52a ef0a          	ldw	(10,x),y
4213                     ; 860             mqtt_recv_ret = MQTT_ERROR_MALFORMED_RESPONSE;
4215  d52c ae800c        	ldw	x,#32780
4216                     ; 861             break;
4218  d52f ccd6ad        	jp	LC016
4219  d532               L5151:
4220                     ; 713         case MQTT_CONTROL_CONNACK:
4220                     ; 714 
4220                     ; 715             // release associated CONNECT
4220                     ; 716             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_CONNECT, NULL);
4222  d532 5f            	clrw	x
4223  d533 89            	pushw	x
4224  d534 4b01          	push	#1
4225  d536 1e24          	ldw	x,(OFST+4,sp)
4226  d538 1c0022        	addw	x,#34
4227  d53b cde0aa        	call	_mqtt_mq_find
4229  d53e 5b03          	addw	sp,#3
4230  d540 1f1f          	ldw	(OFST-1,sp),x
4232                     ; 717             if (msg == NULL) {
4234                     ; 718                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4235                     ; 719                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4236                     ; 720                 break;
4238  d542 2603ccd5f1    	jreq	LC017
4239                     ; 722             msg->state = MQTT_QUEUED_COMPLETE;
4241  d547 a602          	ld	a,#2
4242  d549 e704          	ld	(4,x),a
4243                     ; 724             if (response.decoded.connack.return_code != MQTT_CONNACK_ACCEPTED) {
4245  d54b 0d13          	tnz	(OFST-13,sp)
4246  d54d 2603ccd6d1    	jreq	L1702
4247                     ; 725                 if (response.decoded.connack.return_code == MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED) {
4249  d552 7b13          	ld	a,(OFST-13,sp)
4250  d554 a102          	cp	a,#2
4251  d556 260e          	jrne	L7702
4252                     ; 726                     client->error = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4254  d558 1e21          	ldw	x,(OFST+1,sp)
4255  d55a 90ae8005      	ldw	y,#32773
4256  d55e ef0a          	ldw	(10,x),y
4257                     ; 727                     mqtt_recv_ret = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4259  d560 ae8005        	ldw	x,#32773
4261  d563 ccd6ad        	jp	LC016
4262  d566               L7702:
4263                     ; 730                     client->error = MQTT_ERROR_CONNECTION_REFUSED;
4265  d566 1e21          	ldw	x,(OFST+1,sp)
4266  d568 90ae8016      	ldw	y,#32790
4267  d56c ef0a          	ldw	(10,x),y
4268                     ; 731                     mqtt_recv_ret = MQTT_ERROR_CONNECTION_REFUSED;
4270  d56e ae8016        	ldw	x,#32790
4271  d571 ccd6ad        	jp	LC016
4272  d574               L7151:
4273                     ; 736         case MQTT_CONTROL_PUBLISH:
4273                     ; 737             // stage response, none if qos==0, PUBACK if qos==1, PUBREC if qos==2
4273                     ; 738             if (response.decoded.publish.qos_level == 1) {
4275  d574 7b13          	ld	a,(OFST-13,sp)
4276  d576 a101          	cp	a,#1
4277  d578 2619          	jrne	L3012
4278                     ; 739                 rv = __mqtt_puback(client, response.decoded.publish.packet_id);
4280  d57a 1e19          	ldw	x,(OFST-7,sp)
4281  d57c 89            	pushw	x
4282  d57d 1e23          	ldw	x,(OFST+3,sp)
4283  d57f cdcf72        	call	___mqtt_puback
4285  d582 5b02          	addw	sp,#2
4286  d584 1f1f          	ldw	(OFST-1,sp),x
4288                     ; 740                 if (rv != MQTT_OK) {
4290  d586 5a            	decw	x
4291  d587 273b          	jreq	L7012
4292                     ; 741                     client->error = rv;
4294  d589 1e21          	ldw	x,(OFST+1,sp)
4295  d58b 161f          	ldw	y,(OFST-1,sp)
4296  d58d ef0a          	ldw	(10,x),y
4297                     ; 742                     mqtt_recv_ret = rv;
4299  d58f 93            	ldw	x,y
4300                     ; 743                     break;
4302  d590 ccd6ad        	jp	LC016
4303  d593               L3012:
4304                     ; 746             else if (response.decoded.publish.qos_level == 2) {
4306  d593 a102          	cp	a,#2
4307  d595 262d          	jrne	L7012
4308                     ; 748                 if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.publish.packet_id) != NULL) {
4310  d597 96            	ldw	x,sp
4311  d598 1c0019        	addw	x,#OFST-7
4312  d59b 89            	pushw	x
4313  d59c 4b05          	push	#5
4314  d59e 1e24          	ldw	x,(OFST+4,sp)
4315  d5a0 1c0022        	addw	x,#34
4316  d5a3 cde0aa        	call	_mqtt_mq_find
4318  d5a6 5b03          	addw	sp,#3
4319  d5a8 5d            	tnzw	x
4320  d5a9 26a4          	jrne	L1702
4321                     ; 749                     break;
4323                     ; 752                 rv = __mqtt_pubrec(client, response.decoded.publish.packet_id);
4325  d5ab 1e19          	ldw	x,(OFST-7,sp)
4326  d5ad 89            	pushw	x
4327  d5ae 1e23          	ldw	x,(OFST+3,sp)
4328  d5b0 cdcfe7        	call	___mqtt_pubrec
4330  d5b3 5b02          	addw	sp,#2
4331  d5b5 1f1f          	ldw	(OFST-1,sp),x
4333                     ; 753                 if (rv != MQTT_OK) {
4335  d5b7 5a            	decw	x
4336  d5b8 270a          	jreq	L7012
4337                     ; 754                     client->error = rv;
4339  d5ba 1e21          	ldw	x,(OFST+1,sp)
4340  d5bc 161f          	ldw	y,(OFST-1,sp)
4341  d5be ef0a          	ldw	(10,x),y
4342                     ; 755                     mqtt_recv_ret = rv;
4344  d5c0 93            	ldw	x,y
4345                     ; 756                     break;
4347  d5c1 ccd6ad        	jp	LC016
4348  d5c4               L7012:
4349                     ; 761             client->publish_response_callback(&client->publish_response_callback_state, &response.decoded.publish);
4351  d5c4 96            	ldw	x,sp
4352  d5c5 1c0012        	addw	x,#OFST-14
4353  d5c8 89            	pushw	x
4354  d5c9 1e23          	ldw	x,(OFST+3,sp)
4355  d5cb 1623          	ldw	y,(OFST+3,sp)
4356  d5cd 1c0012        	addw	x,#18
4357  d5d0 90ee10        	ldw	y,(16,y)
4358  d5d3 90fd          	call	(y)
4360  d5d5 85            	popw	x
4361                     ; 762             break;
4363  d5d6 ccd6d1        	jra	L1702
4364  d5d9               L1251:
4365                     ; 763         case MQTT_CONTROL_PUBACK:
4365                     ; 764             // release associated PUBLISH
4365                     ; 765             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.puback.packet_id);
4367  d5d9 96            	ldw	x,sp
4368  d5da 1c0012        	addw	x,#OFST-14
4369  d5dd 89            	pushw	x
4370  d5de 4b03          	push	#3
4372                     ; 766             if (msg == NULL) {
4374  d5e0               LC018:
4375  d5e0 1e24          	ldw	x,(OFST+4,sp)
4376  d5e2 1c0022        	addw	x,#34
4377  d5e5 cde0aa        	call	_mqtt_mq_find
4378  d5e8 5b03          	addw	sp,#3
4379  d5ea 1f1f          	ldw	(OFST-1,sp),x
4383  d5ec 2703ccd6cd    	jrne	L3412
4384                     ; 767                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4386                     ; 768                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4388  d5f1               LC017:
4396  d5f1 1e21          	ldw	x,(OFST+1,sp)
4397  d5f3 90ae8014      	ldw	y,#32788
4398  d5f7 ef0a          	ldw	(10,x),y
4406  d5f9 ae8014        	ldw	x,#32788
4407                     ; 769                 break;
4409  d5fc ccd6ad        	jp	LC016
4410                     ; 771             msg->state = MQTT_QUEUED_COMPLETE;
4411                     ; 772             break;
4413  d5ff               L3251:
4414                     ; 773         case MQTT_CONTROL_PUBREC:
4414                     ; 774             // check if this is a duplicate
4414                     ; 775             if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubrec.packet_id) != NULL) {
4416  d5ff 96            	ldw	x,sp
4417  d600 1c0012        	addw	x,#OFST-14
4418  d603 89            	pushw	x
4419  d604 4b06          	push	#6
4420  d606 1e24          	ldw	x,(OFST+4,sp)
4421  d608 1c0022        	addw	x,#34
4422  d60b cde0aa        	call	_mqtt_mq_find
4424  d60e 5b03          	addw	sp,#3
4425  d610 5d            	tnzw	x
4426  d611 26c3          	jrne	L1702
4427                     ; 776                 break;
4429                     ; 779             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.pubrec.packet_id);
4431  d613 96            	ldw	x,sp
4432  d614 1c0012        	addw	x,#OFST-14
4433  d617 89            	pushw	x
4434  d618 4b03          	push	#3
4435  d61a 1e24          	ldw	x,(OFST+4,sp)
4436  d61c 1c0022        	addw	x,#34
4437  d61f cde0aa        	call	_mqtt_mq_find
4439  d622 5b03          	addw	sp,#3
4440  d624 1f1f          	ldw	(OFST-1,sp),x
4442                     ; 780             if (msg == NULL) {
4444                     ; 781                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4445                     ; 782                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4446                     ; 783                 break;
4448  d626 27c9          	jreq	LC017
4449                     ; 785             msg->state = MQTT_QUEUED_COMPLETE;
4451  d628 a602          	ld	a,#2
4452  d62a e704          	ld	(4,x),a
4453                     ; 787             rv = __mqtt_pubrel(client, response.decoded.pubrec.packet_id);
4455  d62c 1e12          	ldw	x,(OFST-14,sp)
4456  d62e 89            	pushw	x
4457  d62f 1e23          	ldw	x,(OFST+3,sp)
4458  d631 cdd05c        	call	___mqtt_pubrel
4460  d634 5b02          	addw	sp,#2
4461  d636 1f1f          	ldw	(OFST-1,sp),x
4463                     ; 788             if (rv != MQTT_OK) {
4465  d638 5a            	decw	x
4466  d639 279b          	jreq	L1702
4467                     ; 789                 client->error = rv;
4469  d63b 1e21          	ldw	x,(OFST+1,sp)
4470  d63d 161f          	ldw	y,(OFST-1,sp)
4471  d63f ef0a          	ldw	(10,x),y
4472                     ; 790                 mqtt_recv_ret = rv;
4474  d641 93            	ldw	x,y
4475                     ; 791                 break;
4477  d642 2069          	jp	LC016
4478  d644               L5251:
4479                     ; 794         case MQTT_CONTROL_PUBREL:
4479                     ; 795             // release associated PUBREC
4479                     ; 796             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.pubrel.packet_id);
4481  d644 96            	ldw	x,sp
4482  d645 1c0012        	addw	x,#OFST-14
4483  d648 89            	pushw	x
4484  d649 4b05          	push	#5
4485  d64b 1e24          	ldw	x,(OFST+4,sp)
4486  d64d 1c0022        	addw	x,#34
4487  d650 cde0aa        	call	_mqtt_mq_find
4489  d653 5b03          	addw	sp,#3
4490  d655 1f1f          	ldw	(OFST-1,sp),x
4492                     ; 797             if (msg == NULL) {
4494                     ; 798                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4495                     ; 799                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4496                     ; 800                 break;
4498  d657 2798          	jreq	LC017
4499                     ; 802             msg->state = MQTT_QUEUED_COMPLETE;
4501  d659 a602          	ld	a,#2
4502  d65b e704          	ld	(4,x),a
4503                     ; 804             rv = __mqtt_pubcomp(client, response.decoded.pubrec.packet_id);
4505  d65d 1e12          	ldw	x,(OFST-14,sp)
4506  d65f 89            	pushw	x
4507  d660 1e23          	ldw	x,(OFST+3,sp)
4508  d662 cdd0d1        	call	___mqtt_pubcomp
4510  d665 5b02          	addw	sp,#2
4511  d667 1f1f          	ldw	(OFST-1,sp),x
4513                     ; 805             if (rv != MQTT_OK) {
4515  d669 5a            	decw	x
4516  d66a 2765          	jreq	L1702
4517                     ; 806                 client->error = rv;
4519  d66c 1e21          	ldw	x,(OFST+1,sp)
4520  d66e 161f          	ldw	y,(OFST-1,sp)
4521  d670 ef0a          	ldw	(10,x),y
4522                     ; 807                 mqtt_recv_ret = rv;
4524  d672 93            	ldw	x,y
4525                     ; 808                 break;
4527  d673 2038          	jp	LC016
4528  d675               L7251:
4529                     ; 811         case MQTT_CONTROL_PUBCOMP:
4529                     ; 812             // release associated PUBREL
4529                     ; 813             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubcomp.packet_id);
4531  d675 96            	ldw	x,sp
4532  d676 1c0012        	addw	x,#OFST-14
4533  d679 89            	pushw	x
4534  d67a 4b06          	push	#6
4536                     ; 814             if (msg == NULL) {
4537                     ; 815                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4538                     ; 816                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4539                     ; 817                 break;
4541  d67c ccd5e0        	jp	LC018
4542                     ; 819             msg->state = MQTT_QUEUED_COMPLETE;
4543                     ; 820             break;
4545  d67f               L1351:
4546                     ; 821         case MQTT_CONTROL_SUBACK:
4546                     ; 822             // release associated SUBSCRIBE
4546                     ; 823             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_SUBSCRIBE, &response.decoded.suback.packet_id);
4548  d67f 96            	ldw	x,sp
4549  d680 1c0012        	addw	x,#OFST-14
4550  d683 89            	pushw	x
4551  d684 4b08          	push	#8
4552  d686 1e24          	ldw	x,(OFST+4,sp)
4553  d688 1c0022        	addw	x,#34
4554  d68b cde0aa        	call	_mqtt_mq_find
4556  d68e 5b03          	addw	sp,#3
4557  d690 1f1f          	ldw	(OFST-1,sp),x
4559                     ; 824             if (msg == NULL) {
4561                     ; 825                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4562                     ; 826                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4563                     ; 827                 break;
4565  d692 2603ccd5f1    	jreq	LC017
4566                     ; 829             msg->state = MQTT_QUEUED_COMPLETE;
4568  d697 a602          	ld	a,#2
4569  d699 e704          	ld	(4,x),a
4570                     ; 832             if (response.decoded.suback.return_codes[0] == MQTT_SUBACK_FAILURE) {
4572  d69b 1e14          	ldw	x,(OFST-12,sp)
4573  d69d f6            	ld	a,(x)
4574  d69e a180          	cp	a,#128
4575  d6a0 262f          	jrne	L1702
4576                     ; 833                 client->error = MQTT_ERROR_SUBSCRIBE_FAILED;
4578  d6a2 1e21          	ldw	x,(OFST+1,sp)
4579  d6a4 90ae8017      	ldw	y,#32791
4580  d6a8 ef0a          	ldw	(10,x),y
4581                     ; 834                 mqtt_recv_ret = MQTT_ERROR_SUBSCRIBE_FAILED;
4583  d6aa ae8017        	ldw	x,#32791
4584  d6ad               LC016:
4585  d6ad 1f07          	ldw	(OFST-25,sp),x
4587                     ; 835                 break;
4589  d6af 2020          	jra	L1702
4590  d6b1               L3351:
4591                     ; 838         case MQTT_CONTROL_UNSUBACK:
4591                     ; 839             // release associated UNSUBSCRIBE
4591                     ; 840             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_UNSUBSCRIBE, &response.decoded.unsuback.packet_id);
4593  d6b1 96            	ldw	x,sp
4594  d6b2 1c0012        	addw	x,#OFST-14
4595  d6b5 89            	pushw	x
4596  d6b6 4b0a          	push	#10
4598                     ; 841             if (msg == NULL) {
4599                     ; 842                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4600                     ; 843                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4601                     ; 844                 break;
4603  d6b8 ccd5e0        	jp	LC018
4604                     ; 846             msg->state = MQTT_QUEUED_COMPLETE;
4605                     ; 847             break;
4607  d6bb               L5351:
4608                     ; 848         case MQTT_CONTROL_PINGRESP:
4608                     ; 849             // release associated PINGREQ
4608                     ; 850             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PINGREQ, NULL);
4610  d6bb 5f            	clrw	x
4611  d6bc 89            	pushw	x
4612  d6bd 4b0c          	push	#12
4613  d6bf 1e24          	ldw	x,(OFST+4,sp)
4614  d6c1 1c0022        	addw	x,#34
4615  d6c4 cde0aa        	call	_mqtt_mq_find
4617  d6c7 5b03          	addw	sp,#3
4618  d6c9 1f1f          	ldw	(OFST-1,sp),x
4620                     ; 851             if (msg == NULL) {
4622                     ; 852                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4623                     ; 853                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4624                     ; 854                 break;
4626  d6cb 27c7          	jreq	LC017
4627  d6cd               L3412:
4628                     ; 856             msg->state = MQTT_QUEUED_COMPLETE;
4633  d6cd a602          	ld	a,#2
4634  d6cf e704          	ld	(4,x),a
4635                     ; 857             break;
4637  d6d1               L1702:
4638                     ; 890         void* dest = (unsigned char*)client->recv_buffer.mem_start;
4640  d6d1 1e21          	ldw	x,(OFST+1,sp)
4641  d6d3 ee1a          	ldw	x,(26,x)
4642  d6d5 1f01          	ldw	(OFST-31,sp),x
4644                     ; 891         void* src  = (unsigned char*)client->recv_buffer.mem_start + consumed;
4646  d6d7 1e21          	ldw	x,(OFST+1,sp)
4647  d6d9 ee1a          	ldw	x,(26,x)
4648  d6db 72fb05        	addw	x,(OFST-27,sp)
4649  d6de 1f03          	ldw	(OFST-29,sp),x
4651                     ; 892         uint16_t n = client->recv_buffer.curr - client->recv_buffer.mem_start - consumed;
4653  d6e0 1e21          	ldw	x,(OFST+1,sp)
4654  d6e2 1621          	ldw	y,(OFST+1,sp)
4655  d6e4 ee1e          	ldw	x,(30,x)
4656  d6e6 01            	rrwa	x,a
4657  d6e7 90e01b        	sub	a,(27,y)
4658  d6ea 01            	rrwa	x,a
4659  d6eb 90e21a        	sbc	a,(26,y)
4660  d6ee 01            	rrwa	x,a
4661  d6ef 72f005        	subw	x,(OFST-27,sp)
4662  d6f2 1f1f          	ldw	(OFST-1,sp),x
4664                     ; 893         memmove(dest, src, n);
4666  d6f4 89            	pushw	x
4667  d6f5 1e05          	ldw	x,(OFST-27,sp)
4668  d6f7 89            	pushw	x
4669  d6f8 1e05          	ldw	x,(OFST-27,sp)
4670  d6fa cdf3f1        	call	_memmove
4672  d6fd 5b04          	addw	sp,#4
4673                     ; 894         client->recv_buffer.curr -= consumed;
4675  d6ff 1e21          	ldw	x,(OFST+1,sp)
4676  d701 9093          	ldw	y,x
4677  d703 ee1e          	ldw	x,(30,x)
4678  d705 72f005        	subw	x,(OFST-27,sp)
4679  d708 90ef1e        	ldw	(30,y),x
4680                     ; 895         client->recv_buffer.curr_sz += consumed;
4682  d70b 1e21          	ldw	x,(OFST+1,sp)
4683  d70d 9093          	ldw	y,x
4684  d70f ee20          	ldw	x,(32,x)
4685  d711 72fb05        	addw	x,(OFST-27,sp)
4686  d714 90ef20        	ldw	(32,y),x
4687                     ; 904     return mqtt_recv_ret;
4689  d717 1e07          	ldw	x,(OFST-25,sp)
4691  d719 ccd4e3        	jra	L403
4694                     .const:	section	.text
4695  9d2c               L5412_control_type_is_valid:
4696  9d2c 00            	dc.b	0
4697  9d2d 01            	dc.b	1
4698  9d2e 01            	dc.b	1
4699  9d2f 01            	dc.b	1
4700  9d30 01            	dc.b	1
4701  9d31 01            	dc.b	1
4702  9d32 01            	dc.b	1
4703  9d33 01            	dc.b	1
4704  9d34 01            	dc.b	1
4705  9d35 01            	dc.b	1
4706  9d36 01            	dc.b	1
4707  9d37 01            	dc.b	1
4708  9d38 01            	dc.b	1
4709  9d39 01            	dc.b	1
4710  9d3a 01            	dc.b	1
4711  9d3b 00            	dc.b	0
4712  9d3c               L7412_required_flags:
4713  9d3c 00            	dc.b	0
4714  9d3d 00            	dc.b	0
4715  9d3e 00            	dc.b	0
4716  9d3f 00            	dc.b	0
4717  9d40 00            	dc.b	0
4718  9d41 00            	dc.b	0
4719  9d42 02            	dc.b	2
4720  9d43 00            	dc.b	0
4721  9d44 02            	dc.b	2
4722  9d45 00            	dc.b	0
4723  9d46 02            	dc.b	2
4724  9d47 00            	dc.b	0
4725  9d48 00            	dc.b	0
4726  9d49 00            	dc.b	0
4727  9d4a 00            	dc.b	0
4728  9d4b 00            	dc.b	0
4729  9d4c               L1512_mask_required_flags:
4730  9d4c 00            	dc.b	0
4731  9d4d 0f            	dc.b	15
4732  9d4e 0f            	dc.b	15
4733  9d4f 00            	dc.b	0
4734  9d50 0f            	dc.b	15
4735  9d51 0f            	dc.b	15
4736  9d52 0f            	dc.b	15
4737  9d53 0f            	dc.b	15
4738  9d54 0f            	dc.b	15
4739  9d55 0f            	dc.b	15
4740  9d56 0f            	dc.b	15
4741  9d57 0f            	dc.b	15
4742  9d58 0f            	dc.b	15
4743  9d59 0f            	dc.b	15
4744  9d5a 0f            	dc.b	15
4745  9d5b 00            	dc.b	0
4798                     ; 966 static int16_t mqtt_fixed_header_rule_violation(const struct mqtt_fixed_header *fixed_header)
4798                     ; 967 {
4799                     .text:	section	.text,new
4800  d71c               L3512_mqtt_fixed_header_rule_violation:
4802  d71c 89            	pushw	x
4803       00000002      OFST:	set	2
4806                     ; 972     control_type = fixed_header->control_type;
4808  d71d f6            	ld	a,(x)
4809  d71e 6b02          	ld	(OFST+0,sp),a
4811                     ; 973     control_flags = fixed_header->control_flags;
4813  d720 e604          	ld	a,(4,x)
4814  d722 a40f          	and	a,#15
4815  d724 6b01          	ld	(OFST-1,sp),a
4817                     ; 976     if (control_type_is_valid[control_type] != 0x01) {
4819  d726 5f            	clrw	x
4820  d727 7b02          	ld	a,(OFST+0,sp)
4821  d729 97            	ld	xl,a
4822  d72a d69d2c        	ld	a,(L5412_control_type_is_valid,x)
4823  d72d 4a            	dec	a
4824  d72e 2705          	jreq	L1022
4825                     ; 977         return MQTT_ERROR_CONTROL_FORBIDDEN_TYPE;
4827  d730 ae8002        	ldw	x,#32770
4829  d733 2017          	jra	L013
4830  d735               L1022:
4831                     ; 981     if(((control_flags ^ required_flags[control_type]) & mask_required_flags[control_type]) == 1) {
4833  d735 7b02          	ld	a,(OFST+0,sp)
4834  d737 5f            	clrw	x
4835  d738 97            	ld	xl,a
4836  d739 905f          	clrw	y
4837  d73b 9097          	ld	yl,a
4838  d73d 90d69d3c      	ld	a,(L7412_required_flags,y)
4839  d741 1801          	xor	a,(OFST-1,sp)
4840  d743 d49d4c        	and	a,(L1512_mask_required_flags,x)
4841  d746 4a            	dec	a
4842  d747 2606          	jrne	L3022
4843                     ; 982         return MQTT_ERROR_CONTROL_INVALID_FLAGS;
4845  d749 ae8003        	ldw	x,#32771
4847  d74c               L013:
4849  d74c 5b02          	addw	sp,#2
4850  d74e 81            	ret	
4851  d74f               L3022:
4852                     ; 985     return 0;
4854  d74f 5f            	clrw	x
4856  d750 20fa          	jra	L013
4948                     ; 989 int16_t mqtt_unpack_fixed_header(struct mqtt_response *response, const uint8_t *buf, uint16_t bufsz)
4948                     ; 990 {
4949                     .text:	section	.text,new
4950  d752               _mqtt_unpack_fixed_header:
4952  d752 89            	pushw	x
4953  d753 520a          	subw	sp,#10
4954       0000000a      OFST:	set	10
4957                     ; 992     const uint8_t *start = buf;
4959  d755 1e0f          	ldw	x,(OFST+5,sp)
4960  d757 1f05          	ldw	(OFST-5,sp),x
4962                     ; 997     if (response == NULL || buf == NULL) {
4964  d759 1e0b          	ldw	x,(OFST+1,sp)
4965  d75b 2704          	jreq	L3522
4967  d75d 1e0f          	ldw	x,(OFST+5,sp)
4968  d75f 2605          	jrne	L1522
4969  d761               L3522:
4970                     ; 998       return MQTT_ERROR_NULLPTR;
4972  d761 ae8001        	ldw	x,#32769
4974  d764 2009          	jra	L223
4975  d766               L1522:
4976                     ; 1000     fixed_header = &(response->fixed_header);
4978  d766 1e0b          	ldw	x,(OFST+1,sp)
4979  d768 1f07          	ldw	(OFST-3,sp),x
4981                     ; 1003     if (bufsz == 0) return 0;
4983  d76a 1e11          	ldw	x,(OFST+7,sp)
4984  d76c 2604          	jrne	L5522
4987  d76e               LC019:
4990  d76e 5f            	clrw	x
4992  d76f               L223:
4994  d76f 5b0c          	addw	sp,#12
4995  d771 81            	ret	
4996  d772               L5522:
4997                     ; 1006     fixed_header->control_type  = (uint8_t)(*buf >> 4);
4999  d772 1e0f          	ldw	x,(OFST+5,sp)
5000  d774 f6            	ld	a,(x)
5001  d775 4e            	swap	a
5002  d776 1e07          	ldw	x,(OFST-3,sp)
5003  d778 a40f          	and	a,#15
5004  d77a f7            	ld	(x),a
5005                     ; 1007     fixed_header->control_flags = (uint8_t)(*buf & 0x0F);
5007  d77b 1e0f          	ldw	x,(OFST+5,sp)
5008  d77d f6            	ld	a,(x)
5009  d77e 1e07          	ldw	x,(OFST-3,sp)
5010  d780 e804          	xor	a,(4,x)
5011  d782 a40f          	and	a,#15
5012  d784 e804          	xor	a,(4,x)
5013  d786 e704          	ld	(4,x),a
5014                     ; 1010     fixed_header->remaining_length = 0;
5016  d788 4f            	clr	a
5017  d789 e708          	ld	(8,x),a
5018  d78b e707          	ld	(7,x),a
5019  d78d e706          	ld	(6,x),a
5020  d78f e705          	ld	(5,x),a
5021                     ; 1012     lshift = 0;
5023  d791 5f            	clrw	x
5024  d792 1f09          	ldw	(OFST-1,sp),x
5026  d794               L7522:
5027                     ; 1015         if(lshift == 28) {
5029  d794 1e09          	ldw	x,(OFST-1,sp)
5030  d796 a3001c        	cpw	x,#28
5031  d799 2605          	jrne	L5622
5032                     ; 1016             return MQTT_ERROR_INVALID_REMAINING_LENGTH;
5034  d79b ae801a        	ldw	x,#32794
5036  d79e 20cf          	jra	L223
5037  d7a0               L5622:
5038                     ; 1020         --bufsz;
5040  d7a0 1e11          	ldw	x,(OFST+7,sp)
5041  d7a2 5a            	decw	x
5042  d7a3 1f11          	ldw	(OFST+7,sp),x
5043                     ; 1021         ++buf;
5045  d7a5 1e0f          	ldw	x,(OFST+5,sp)
5046  d7a7 5c            	incw	x
5047  d7a8 1f0f          	ldw	(OFST+5,sp),x
5048                     ; 1022         if (bufsz == 0) return 0;
5050  d7aa 1e11          	ldw	x,(OFST+7,sp)
5053  d7ac 27c0          	jreq	LC019
5054                     ; 1025         fixed_header->remaining_length += (*buf & 0x7F) << lshift;
5056  d7ae 160f          	ldw	y,(OFST+5,sp)
5057  d7b0 1e07          	ldw	x,(OFST-3,sp)
5058  d7b2 90f6          	ld	a,(y)
5059  d7b4 a47f          	and	a,#127
5060  d7b6 905f          	clrw	y
5061  d7b8 9097          	ld	yl,a
5062  d7ba 7b0a          	ld	a,(OFST+0,sp)
5063  d7bc 2705          	jreq	L413
5064  d7be               L613:
5065  d7be 9058          	sllw	y
5066  d7c0 4a            	dec	a
5067  d7c1 26fb          	jrne	L613
5068  d7c3               L413:
5069  d7c3 cdf63c        	call	c_itoly
5071  d7c6 1c0005        	addw	x,#5
5072  d7c9 cdf6a8        	call	c_lgadd
5074                     ; 1026         lshift += 7;
5076  d7cc 1e09          	ldw	x,(OFST-1,sp)
5077  d7ce 1c0007        	addw	x,#7
5078  d7d1 1f09          	ldw	(OFST-1,sp),x
5080                     ; 1027     } while(*buf & 0x80); /* while continue bit is set */ 
5082  d7d3 1e0f          	ldw	x,(OFST+5,sp)
5083  d7d5 f6            	ld	a,(x)
5084  d7d6 2bbc          	jrmi	L7522
5085                     ; 1030     --bufsz;
5087  d7d8 1e11          	ldw	x,(OFST+7,sp)
5088  d7da 5a            	decw	x
5089  d7db 1f11          	ldw	(OFST+7,sp),x
5090                     ; 1031     ++buf;
5092  d7dd 1e0f          	ldw	x,(OFST+5,sp)
5093  d7df 5c            	incw	x
5094  d7e0 1f0f          	ldw	(OFST+5,sp),x
5095                     ; 1034     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5097  d7e2 1e07          	ldw	x,(OFST-3,sp)
5098  d7e4 cdd71c        	call	L3512_mqtt_fixed_header_rule_violation
5100  d7e7 1f09          	ldw	(OFST-1,sp),x
5102                     ; 1035     if (errcode) return errcode;
5107  d7e9 2684          	jrne	L223
5108                     ; 1038     if (bufsz < fixed_header->remaining_length) return 0;
5110  d7eb 1e11          	ldw	x,(OFST+7,sp)
5111  d7ed cdf8aa        	call	c_uitolx
5113  d7f0 96            	ldw	x,sp
5114  d7f1 5c            	incw	x
5115  d7f2 cdf849        	call	c_rtol
5118  d7f5 1e07          	ldw	x,(OFST-3,sp)
5119  d7f7 1c0005        	addw	x,#5
5120  d7fa cdf6e3        	call	c_ltor
5122  d7fd 96            	ldw	x,sp
5123  d7fe 5c            	incw	x
5124  d7ff cdf678        	call	c_lcmp
5128  d802 2303ccd76e    	jrugt	LC019
5129                     ; 1041     return buf - start;
5131  d807 1e0f          	ldw	x,(OFST+5,sp)
5132  d809 72f005        	subw	x,(OFST-5,sp)
5134  d80c ccd76f        	jra	L223
5214                     	switch	.const
5215  9d5c               L033:
5216  9d5c 00000080      	dc.l	128
5217                     ; 1045 int16_t mqtt_pack_fixed_header(uint8_t *buf, uint16_t bufsz, const struct mqtt_fixed_header *fixed_header)
5217                     ; 1046 {
5218                     .text:	section	.text,new
5219  d80f               _mqtt_pack_fixed_header:
5221  d80f 89            	pushw	x
5222  d810 520c          	subw	sp,#12
5223       0000000c      OFST:	set	12
5226                     ; 1047     const uint8_t *start = buf;
5228  d812 1f05          	ldw	(OFST-7,sp),x
5230                     ; 1052     if (fixed_header == NULL || buf == NULL) {
5232  d814 1e13          	ldw	x,(OFST+7,sp)
5233  d816 2704          	jreq	L5332
5235  d818 1e0d          	ldw	x,(OFST+1,sp)
5236  d81a 2605          	jrne	L3332
5237  d81c               L5332:
5238                     ; 1053       return MQTT_ERROR_NULLPTR;
5240  d81c ae8001        	ldw	x,#32769
5242  d81f 2009          	jra	L233
5243  d821               L3332:
5244                     ; 1057     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5246  d821 1e13          	ldw	x,(OFST+7,sp)
5247  d823 cdd71c        	call	L3512_mqtt_fixed_header_rule_violation
5249  d826 1f07          	ldw	(OFST-5,sp),x
5251                     ; 1058     if (errcode) return errcode;
5253  d828 2703          	jreq	L7332
5257  d82a               L233:
5259  d82a 5b0e          	addw	sp,#14
5260  d82c 81            	ret	
5261  d82d               L7332:
5262                     ; 1061     if (bufsz == 0) return 0;
5264  d82d 1e11          	ldw	x,(OFST+5,sp)
5265  d82f 2603          	jrne	L1432
5268  d831 5f            	clrw	x
5270  d832 20f6          	jra	L233
5271  d834               L1432:
5272                     ; 1064     *buf =  (uint8_t)((fixed_header->control_type << 4) & 0xF0);
5274  d834 1e13          	ldw	x,(OFST+7,sp)
5275  d836 f6            	ld	a,(x)
5276  d837 97            	ld	xl,a
5277  d838 a610          	ld	a,#16
5278  d83a 42            	mul	x,a
5279  d83b 9f            	ld	a,xl
5280  d83c 1e0d          	ldw	x,(OFST+1,sp)
5281  d83e a4f0          	and	a,#240
5282  d840 f7            	ld	(x),a
5283                     ; 1065     *buf |= (uint8_t)(fixed_header->control_flags & 0x0F);
5285  d841 1613          	ldw	y,(OFST+7,sp)
5286  d843 90e604        	ld	a,(4,y)
5287  d846 a40f          	and	a,#15
5288  d848 fa            	or	a,(x)
5289  d849 f7            	ld	(x),a
5290                     ; 1067     remaining_length = fixed_header->remaining_length;
5292  d84a 93            	ldw	x,y
5293  d84b ee07          	ldw	x,(7,x)
5294  d84d 1f0b          	ldw	(OFST-1,sp),x
5295  d84f 93            	ldw	x,y
5296  d850 ee05          	ldw	x,(5,x)
5297  d852 1f09          	ldw	(OFST-3,sp),x
5299  d854               L3432:
5300                     ; 1075         --bufsz;
5302  d854 1e11          	ldw	x,(OFST+5,sp)
5303  d856 5a            	decw	x
5304  d857 1f11          	ldw	(OFST+5,sp),x
5305                     ; 1076         ++buf;
5307  d859 1e0d          	ldw	x,(OFST+1,sp)
5308  d85b 5c            	incw	x
5309  d85c 1f0d          	ldw	(OFST+1,sp),x
5310                     ; 1077         if (bufsz == 0) return 0;
5312  d85e 1e11          	ldw	x,(OFST+5,sp)
5313  d860 2603          	jrne	L1532
5316  d862 5f            	clrw	x
5318  d863 20c5          	jra	L233
5319  d865               L1532:
5320                     ; 1080         *buf  = (uint8_t)(remaining_length & 0x7F);
5322  d865 7b0c          	ld	a,(OFST+0,sp)
5323  d867 1e0d          	ldw	x,(OFST+1,sp)
5324  d869 a47f          	and	a,#127
5325  d86b f7            	ld	(x),a
5326                     ; 1081         if(remaining_length > 127) *buf |= 0x80;
5328  d86c 96            	ldw	x,sp
5329  d86d 1c0009        	addw	x,#OFST-3
5330  d870 cdf6e3        	call	c_ltor
5332  d873 ae9d5c        	ldw	x,#L033
5333  d876 cdf678        	call	c_lcmp
5335  d879 2506          	jrult	L3532
5338  d87b 1e0d          	ldw	x,(OFST+1,sp)
5339  d87d f6            	ld	a,(x)
5340  d87e aa80          	or	a,#128
5341  d880 f7            	ld	(x),a
5342  d881               L3532:
5343                     ; 1082         remaining_length = remaining_length >> 7;
5345  d881 96            	ldw	x,sp
5346  d882 1c0009        	addw	x,#OFST-3
5347  d885 a607          	ld	a,#7
5348  d887 cdf6d5        	call	c_lgursh
5351                     ; 1083     } while(*buf & 0x80);
5353  d88a 1e0d          	ldw	x,(OFST+1,sp)
5354  d88c f6            	ld	a,(x)
5355  d88d 2bc5          	jrmi	L3432
5356                     ; 1086     --bufsz;
5358  d88f 1e11          	ldw	x,(OFST+5,sp)
5359  d891 5a            	decw	x
5360  d892 1f11          	ldw	(OFST+5,sp),x
5361                     ; 1087     ++buf;
5363  d894 1e0d          	ldw	x,(OFST+1,sp)
5364  d896 5c            	incw	x
5365  d897 1f0d          	ldw	(OFST+1,sp),x
5366                     ; 1090     if (bufsz < fixed_header->remaining_length) return 0;
5368  d899 1e11          	ldw	x,(OFST+5,sp)
5369  d89b cdf8aa        	call	c_uitolx
5371  d89e 96            	ldw	x,sp
5372  d89f 5c            	incw	x
5373  d8a0 cdf849        	call	c_rtol
5376  d8a3 1e13          	ldw	x,(OFST+7,sp)
5377  d8a5 1c0005        	addw	x,#5
5378  d8a8 cdf6e3        	call	c_ltor
5380  d8ab 96            	ldw	x,sp
5381  d8ac 5c            	incw	x
5382  d8ad cdf678        	call	c_lcmp
5384  d8b0 2304          	jrule	L5532
5387  d8b2 5f            	clrw	x
5389  d8b3 ccd82a        	jra	L233
5390  d8b6               L5532:
5391                     ; 1093     return buf - start;
5393  d8b6 1e0d          	ldw	x,(OFST+1,sp)
5394  d8b8 72f005        	subw	x,(OFST-7,sp)
5396  d8bb ccd82a        	jra	L233
5549                     ; 1098 int16_t mqtt_pack_connection_request(uint8_t* buf, uint16_t bufsz,
5549                     ; 1099                                      const char* client_id,
5549                     ; 1100                                      const char* will_topic,
5549                     ; 1101                                      const void* will_message,
5549                     ; 1102                                      uint16_t will_message_size,
5549                     ; 1103                                      const char* user_name,
5549                     ; 1104                                      const char* password,
5549                     ; 1105                                      uint8_t connect_flags,
5549                     ; 1106                                      uint16_t keep_alive)
5549                     ; 1107 { 
5550                     .text:	section	.text,new
5551  d8be               _mqtt_pack_connection_request:
5553  d8be 89            	pushw	x
5554  d8bf 520d          	subw	sp,#13
5555       0000000d      OFST:	set	13
5558                     ; 1110     const uint8_t *const start = buf;
5560  d8c1 1f01          	ldw	(OFST-12,sp),x
5562                     ; 1114     fixed_header.control_type = MQTT_CONTROL_CONNECT;
5564  d8c3 a601          	ld	a,#1
5565  d8c5 6b03          	ld	(OFST-10,sp),a
5567                     ; 1115     fixed_header.control_flags = 0x00;
5569  d8c7 7b07          	ld	a,(OFST-6,sp)
5570  d8c9 a4f0          	and	a,#240
5571  d8cb 6b07          	ld	(OFST-6,sp),a
5573                     ; 1118     connect_flags = (uint8_t)(connect_flags & ~MQTT_CONNECT_RESERVED);
5575  d8cd 7b20          	ld	a,(OFST+19,sp)
5576  d8cf a4fe          	and	a,#254
5577  d8d1 6b20          	ld	(OFST+19,sp),a
5578                     ; 1121     remaining_length = 10; /* size of variable header */
5580  d8d3 ae000a        	ldw	x,#10
5581  d8d6 1f0c          	ldw	(OFST-1,sp),x
5583                     ; 1133     remaining_length += __mqtt_packed_cstrlen(client_id);
5585  d8d8 1e14          	ldw	x,(OFST+7,sp)
5586  d8da cdf456        	call	_strlen
5588  d8dd 1c0002        	addw	x,#2
5589  d8e0 72fb0c        	addw	x,(OFST-1,sp)
5590  d8e3 1f0c          	ldw	(OFST-1,sp),x
5592                     ; 1163     connect_flags |= MQTT_CONNECT_WILL_FLAG;
5594  d8e5 7b20          	ld	a,(OFST+19,sp)
5595                     ; 1164     connect_flags |= MQTT_CONNECT_WILL_RETAIN;
5597  d8e7 aa24          	or	a,#36
5598  d8e9 6b20          	ld	(OFST+19,sp),a
5599                     ; 1165     remaining_length += __mqtt_packed_cstrlen(will_topic);
5601  d8eb 1e16          	ldw	x,(OFST+9,sp)
5602  d8ed cdf456        	call	_strlen
5604  d8f0 1c0002        	addw	x,#2
5605  d8f3 72fb0c        	addw	x,(OFST-1,sp)
5606  d8f6 1f0c          	ldw	(OFST-1,sp),x
5608                     ; 1166     remaining_length += 2 + will_message_size; /* size of will_message */
5610  d8f8 1e1a          	ldw	x,(OFST+13,sp)
5611  d8fa 1c0002        	addw	x,#2
5612  d8fd 72fb0c        	addw	x,(OFST-1,sp)
5613  d900 1f0c          	ldw	(OFST-1,sp),x
5615                     ; 1168     if (user_name != NULL) {
5617  d902 1e1c          	ldw	x,(OFST+15,sp)
5618  d904 2713          	jreq	L5442
5619                     ; 1170         connect_flags |= MQTT_CONNECT_USER_NAME;
5621  d906 7b20          	ld	a,(OFST+19,sp)
5622  d908 aa80          	or	a,#128
5623  d90a 6b20          	ld	(OFST+19,sp),a
5624                     ; 1171         remaining_length += __mqtt_packed_cstrlen(user_name);
5626  d90c cdf456        	call	_strlen
5628  d90f 1c0002        	addw	x,#2
5629  d912 72fb0c        	addw	x,(OFST-1,sp)
5630  d915 1f0c          	ldw	(OFST-1,sp),x
5633  d917 2006          	jra	L7442
5634  d919               L5442:
5635                     ; 1173     else connect_flags &= (uint8_t)(~MQTT_CONNECT_USER_NAME);
5637  d919 7b20          	ld	a,(OFST+19,sp)
5638  d91b a47f          	and	a,#127
5639  d91d 6b20          	ld	(OFST+19,sp),a
5640  d91f               L7442:
5641                     ; 1175     if (password != NULL) {
5643  d91f 1e1e          	ldw	x,(OFST+17,sp)
5644  d921 2713          	jreq	L1542
5645                     ; 1177         connect_flags |= MQTT_CONNECT_PASSWORD;
5647  d923 7b20          	ld	a,(OFST+19,sp)
5648  d925 aa40          	or	a,#64
5649  d927 6b20          	ld	(OFST+19,sp),a
5650                     ; 1178         remaining_length += __mqtt_packed_cstrlen(password);
5652  d929 cdf456        	call	_strlen
5654  d92c 1c0002        	addw	x,#2
5655  d92f 72fb0c        	addw	x,(OFST-1,sp)
5656  d932 1f0c          	ldw	(OFST-1,sp),x
5659  d934 2008          	jra	L3542
5660  d936               L1542:
5661                     ; 1180     else connect_flags &= (uint8_t)(~MQTT_CONNECT_PASSWORD);
5663  d936 7b20          	ld	a,(OFST+19,sp)
5664  d938 a4bf          	and	a,#191
5665  d93a 6b20          	ld	(OFST+19,sp),a
5666  d93c 1e0c          	ldw	x,(OFST-1,sp)
5667  d93e               L3542:
5668                     ; 1183     fixed_header.remaining_length = remaining_length;
5670  d93e cdf8aa        	call	c_uitolx
5672  d941 96            	ldw	x,sp
5673  d942 1c0008        	addw	x,#OFST-5
5674  d945 cdf849        	call	c_rtol
5677                     ; 1186     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
5679  d948 96            	ldw	x,sp
5680  d949 1c0003        	addw	x,#OFST-10
5681  d94c 89            	pushw	x
5682  d94d 1e14          	ldw	x,(OFST+7,sp)
5683  d94f 89            	pushw	x
5684  d950 1e12          	ldw	x,(OFST+5,sp)
5685  d952 cdd80f        	call	_mqtt_pack_fixed_header
5687  d955 5b04          	addw	sp,#4
5688  d957 1f0c          	ldw	(OFST-1,sp),x
5690                     ; 1187     if (rv <= 0) {
5692  d959 9c            	rvf	
5693                     ; 1188       return rv; /* something went wrong */
5696  d95a 2d1b          	jrsle	L073
5697                     ; 1191     buf += rv;
5699  d95c 1e0e          	ldw	x,(OFST+1,sp)
5700  d95e 72fb0c        	addw	x,(OFST-1,sp)
5701  d961 1f0e          	ldw	(OFST+1,sp),x
5702                     ; 1192     bufsz -= rv;
5704  d963 1e12          	ldw	x,(OFST+5,sp)
5705  d965 72f00c        	subw	x,(OFST-1,sp)
5706  d968 1f12          	ldw	(OFST+5,sp),x
5707                     ; 1195     if (bufsz < fixed_header.remaining_length) return 0;
5709  d96a cdf8aa        	call	c_uitolx
5711  d96d 96            	ldw	x,sp
5712  d96e 1c0008        	addw	x,#OFST-5
5713  d971 cdf678        	call	c_lcmp
5715  d974 2404          	jruge	L7542
5718  d976 5f            	clrw	x
5720  d977               L073:
5722  d977 5b0f          	addw	sp,#15
5723  d979 81            	ret	
5724  d97a               L7542:
5725                     ; 1198     *buf++ = 0x00;
5727  d97a 1e0e          	ldw	x,(OFST+1,sp)
5728  d97c 7f            	clr	(x)
5729  d97d 5c            	incw	x
5730                     ; 1199     *buf++ = 0x04;
5732  d97e a604          	ld	a,#4
5733  d980 f7            	ld	(x),a
5734  d981 5c            	incw	x
5735                     ; 1200     *buf++ = (uint8_t) 'M';
5737  d982 a64d          	ld	a,#77
5738  d984 f7            	ld	(x),a
5739  d985 5c            	incw	x
5740                     ; 1201     *buf++ = (uint8_t) 'Q';
5742  d986 a651          	ld	a,#81
5743  d988 f7            	ld	(x),a
5744  d989 5c            	incw	x
5745                     ; 1202     *buf++ = (uint8_t) 'T';
5747  d98a a654          	ld	a,#84
5748  d98c f7            	ld	(x),a
5749  d98d 5c            	incw	x
5750                     ; 1203     *buf++ = (uint8_t) 'T';
5752  d98e f7            	ld	(x),a
5753  d98f 5c            	incw	x
5754                     ; 1204     *buf++ = MQTT_PROTOCOL_LEVEL;
5756  d990 a604          	ld	a,#4
5757  d992 f7            	ld	(x),a
5758  d993 5c            	incw	x
5759                     ; 1205     *buf++ = connect_flags;
5761  d994 7b20          	ld	a,(OFST+19,sp)
5762  d996 f7            	ld	(x),a
5763  d997 5c            	incw	x
5764  d998 1f0e          	ldw	(OFST+1,sp),x
5765                     ; 1206     buf += __mqtt_pack_uint16(buf, keep_alive);
5767  d99a 1e21          	ldw	x,(OFST+20,sp)
5768  d99c 89            	pushw	x
5769  d99d 1e10          	ldw	x,(OFST+3,sp)
5770  d99f cde192        	call	___mqtt_pack_uint16
5772  d9a2 5b02          	addw	sp,#2
5773  d9a4 72fb0e        	addw	x,(OFST+1,sp)
5774  d9a7 1f0e          	ldw	(OFST+1,sp),x
5775                     ; 1209     buf += __mqtt_pack_str(buf, client_id);
5777  d9a9 1e14          	ldw	x,(OFST+7,sp)
5778  d9ab 89            	pushw	x
5779  d9ac 1e10          	ldw	x,(OFST+3,sp)
5780  d9ae cde1d3        	call	___mqtt_pack_str
5782  d9b1 5b02          	addw	sp,#2
5783  d9b3 72fb0e        	addw	x,(OFST+1,sp)
5784  d9b6 1f0e          	ldw	(OFST+1,sp),x
5785                     ; 1210     if (connect_flags & MQTT_CONNECT_WILL_FLAG) {
5787  d9b8 7b20          	ld	a,(OFST+19,sp)
5788  d9ba a504          	bcp	a,#4
5789  d9bc 273c          	jreq	L1642
5790                     ; 1211         buf += __mqtt_pack_str(buf, will_topic);
5792  d9be 1e16          	ldw	x,(OFST+9,sp)
5793  d9c0 89            	pushw	x
5794  d9c1 1e10          	ldw	x,(OFST+3,sp)
5795  d9c3 cde1d3        	call	___mqtt_pack_str
5797  d9c6 5b02          	addw	sp,#2
5798  d9c8 72fb0e        	addw	x,(OFST+1,sp)
5799  d9cb 1f0e          	ldw	(OFST+1,sp),x
5800                     ; 1212         buf += __mqtt_pack_uint16(buf, (uint16_t)will_message_size);
5802  d9cd 1e1a          	ldw	x,(OFST+13,sp)
5803  d9cf 89            	pushw	x
5804  d9d0 1e10          	ldw	x,(OFST+3,sp)
5805  d9d2 cde192        	call	___mqtt_pack_uint16
5807  d9d5 5b02          	addw	sp,#2
5808  d9d7 72fb0e        	addw	x,(OFST+1,sp)
5809  d9da 1f0e          	ldw	(OFST+1,sp),x
5810                     ; 1213         memcpy(buf, will_message, will_message_size);
5812  d9dc bf04          	ldw	c_x,x
5813  d9de 1618          	ldw	y,(OFST+11,sp)
5814  d9e0 90bf07        	ldw	c_y,y
5815  d9e3 1e1a          	ldw	x,(OFST+13,sp)
5816  d9e5 270a          	jreq	L063
5817  d9e7               L263:
5818  d9e7 5a            	decw	x
5819  d9e8 92d607        	ld	a,([c_y.w],x)
5820  d9eb 92d704        	ld	([c_x.w],x),a
5821  d9ee 5d            	tnzw	x
5822  d9ef 26f6          	jrne	L263
5823  d9f1               L063:
5824                     ; 1214         buf += will_message_size;
5826  d9f1 1e0e          	ldw	x,(OFST+1,sp)
5827  d9f3 72fb1a        	addw	x,(OFST+13,sp)
5828  d9f6 1f0e          	ldw	(OFST+1,sp),x
5829  d9f8 7b20          	ld	a,(OFST+19,sp)
5830  d9fa               L1642:
5831                     ; 1217     if (connect_flags & MQTT_CONNECT_USER_NAME) buf += __mqtt_pack_str(buf, user_name);
5833  d9fa a580          	bcp	a,#128
5834  d9fc 2711          	jreq	L3642
5837  d9fe 1e1c          	ldw	x,(OFST+15,sp)
5838  da00 89            	pushw	x
5839  da01 1e10          	ldw	x,(OFST+3,sp)
5840  da03 cde1d3        	call	___mqtt_pack_str
5842  da06 5b02          	addw	sp,#2
5843  da08 72fb0e        	addw	x,(OFST+1,sp)
5844  da0b 1f0e          	ldw	(OFST+1,sp),x
5845  da0d 7b20          	ld	a,(OFST+19,sp)
5846  da0f               L3642:
5847                     ; 1219     if (connect_flags & MQTT_CONNECT_PASSWORD) buf += __mqtt_pack_str(buf, password);
5849  da0f a540          	bcp	a,#64
5850  da11 270f          	jreq	L5642
5853  da13 1e1e          	ldw	x,(OFST+17,sp)
5854  da15 89            	pushw	x
5855  da16 1e10          	ldw	x,(OFST+3,sp)
5856  da18 cde1d3        	call	___mqtt_pack_str
5858  da1b 5b02          	addw	sp,#2
5859  da1d 72fb0e        	addw	x,(OFST+1,sp)
5860  da20 1f0e          	ldw	(OFST+1,sp),x
5861  da22               L5642:
5862                     ; 1222     return buf - start;
5864  da22 72f001        	subw	x,(OFST-12,sp)
5866  da25 ccd977        	jra	L073
5936                     	switch	.const
5937  9d60               L473:
5938  9d60 00000002      	dc.l	2
5939                     ; 1227 int16_t mqtt_unpack_connack_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
5939                     ; 1228 {
5940                     .text:	section	.text,new
5941  da28               _mqtt_unpack_connack_response:
5943  da28 89            	pushw	x
5944  da29 5204          	subw	sp,#4
5945       00000004      OFST:	set	4
5948                     ; 1229     const uint8_t *const start = buf;
5950  da2b 1e09          	ldw	x,(OFST+5,sp)
5951  da2d 1f01          	ldw	(OFST-3,sp),x
5953                     ; 1233     if (mqtt_response->fixed_header.remaining_length != 2) {
5955  da2f 1e05          	ldw	x,(OFST+1,sp)
5956  da31 1c0005        	addw	x,#5
5957  da34 cdf6e3        	call	c_ltor
5959  da37 ae9d60        	ldw	x,#L473
5960  da3a cdf678        	call	c_lcmp
5962  da3d 2705          	jreq	L5252
5963                     ; 1234       return MQTT_ERROR_MALFORMED_RESPONSE;
5965  da3f ae800c        	ldw	x,#32780
5967  da42 2011          	jra	L673
5968  da44               L5252:
5969                     ; 1237     response = &(mqtt_response->decoded.connack);
5971  da44 1e05          	ldw	x,(OFST+1,sp)
5972  da46 1c0009        	addw	x,#9
5973  da49 1f03          	ldw	(OFST-1,sp),x
5975                     ; 1239     if (*buf & 0xFE) {
5977  da4b 1e09          	ldw	x,(OFST+5,sp)
5978  da4d f6            	ld	a,(x)
5979  da4e a5fe          	bcp	a,#254
5980  da50 2706          	jreq	L7252
5981                     ; 1240       return MQTT_ERROR_CONNACK_FORBIDDEN_FLAGS; /* only bit 1 can be set */
5983  da52 ae8008        	ldw	x,#32776
5985  da55               L673:
5987  da55 5b06          	addw	sp,#6
5988  da57 81            	ret	
5989  da58               L7252:
5990                     ; 1242     else response->session_present_flag = *buf++;
5992  da58 5c            	incw	x
5993  da59 1f09          	ldw	(OFST+5,sp),x
5994  da5b 1e03          	ldw	x,(OFST-1,sp)
5995  da5d f7            	ld	(x),a
5996                     ; 1244     if (*buf > 5u) {
5998  da5e 1e09          	ldw	x,(OFST+5,sp)
5999  da60 f6            	ld	a,(x)
6000  da61 a106          	cp	a,#6
6001  da63 2505          	jrult	L3352
6002                     ; 1245       return MQTT_ERROR_CONNACK_FORBIDDEN_CODE; /* only bit 1 can be set */
6004  da65 ae8009        	ldw	x,#32777
6006  da68 20eb          	jra	L673
6007  da6a               L3352:
6008                     ; 1247     else response->return_code = (enum MQTTConnackReturnCode) *buf++;
6010  da6a 5c            	incw	x
6011  da6b 1f09          	ldw	(OFST+5,sp),x
6012  da6d 1e03          	ldw	x,(OFST-1,sp)
6013  da6f e701          	ld	(1,x),a
6014                     ; 1249     return buf - start;
6016  da71 1e09          	ldw	x,(OFST+5,sp)
6017  da73 72f001        	subw	x,(OFST-3,sp)
6019  da76 20dd          	jra	L673
6073                     ; 1254 int16_t mqtt_pack_disconnect(uint8_t *buf, uint16_t bufsz)
6073                     ; 1255 {
6074                     .text:	section	.text,new
6075  da78               _mqtt_pack_disconnect:
6077  da78 89            	pushw	x
6078  da79 5209          	subw	sp,#9
6079       00000009      OFST:	set	9
6082                     ; 1257     fixed_header.control_type = MQTT_CONTROL_DISCONNECT;
6084  da7b a60e          	ld	a,#14
6085  da7d 6b01          	ld	(OFST-8,sp),a
6087                     ; 1258     fixed_header.control_flags = 0;
6089  da7f 7b05          	ld	a,(OFST-4,sp)
6090  da81 a4f0          	and	a,#240
6091  da83 6b05          	ld	(OFST-4,sp),a
6093                     ; 1259     fixed_header.remaining_length = 0;
6095  da85 5f            	clrw	x
6096  da86 1f08          	ldw	(OFST-1,sp),x
6097  da88 1f06          	ldw	(OFST-3,sp),x
6099                     ; 1260     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6101  da8a 96            	ldw	x,sp
6102  da8b 5c            	incw	x
6103  da8c 89            	pushw	x
6104  da8d 1e10          	ldw	x,(OFST+7,sp)
6105  da8f 89            	pushw	x
6106  da90 1e0e          	ldw	x,(OFST+5,sp)
6107  da92 cdd80f        	call	_mqtt_pack_fixed_header
6109  da95 5b0f          	addw	sp,#15
6112  da97 81            	ret	
6166                     ; 1265 int16_t mqtt_pack_ping_request(uint8_t *buf, uint16_t bufsz)
6166                     ; 1266 {
6167                     .text:	section	.text,new
6168  da98               _mqtt_pack_ping_request:
6170  da98 89            	pushw	x
6171  da99 5209          	subw	sp,#9
6172       00000009      OFST:	set	9
6175                     ; 1268     fixed_header.control_type = MQTT_CONTROL_PINGREQ;
6177  da9b a60c          	ld	a,#12
6178  da9d 6b01          	ld	(OFST-8,sp),a
6180                     ; 1269     fixed_header.control_flags = 0;
6182  da9f 7b05          	ld	a,(OFST-4,sp)
6183  daa1 a4f0          	and	a,#240
6184  daa3 6b05          	ld	(OFST-4,sp),a
6186                     ; 1270     fixed_header.remaining_length = 0;
6188  daa5 5f            	clrw	x
6189  daa6 1f08          	ldw	(OFST-1,sp),x
6190  daa8 1f06          	ldw	(OFST-3,sp),x
6192                     ; 1271     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6194  daaa 96            	ldw	x,sp
6195  daab 5c            	incw	x
6196  daac 89            	pushw	x
6197  daad 1e10          	ldw	x,(OFST+7,sp)
6198  daaf 89            	pushw	x
6199  dab0 1e0e          	ldw	x,(OFST+5,sp)
6200  dab2 cdd80f        	call	_mqtt_pack_fixed_header
6202  dab5 5b0f          	addw	sp,#15
6205  dab7 81            	ret	
6337                     ; 1276 int16_t mqtt_pack_publish_request(uint8_t *buf, uint16_t bufsz,
6337                     ; 1277                                   const char* topic_name,
6337                     ; 1278                                   uint16_t packet_id,
6337                     ; 1279                                   const void* application_message,
6337                     ; 1280                                   uint16_t application_message_size,
6337                     ; 1281                                   uint8_t publish_flags)
6337                     ; 1282 {
6338                     .text:	section	.text,new
6339  dab8               _mqtt_pack_publish_request:
6341  dab8 89            	pushw	x
6342  dab9 5212          	subw	sp,#18
6343       00000012      OFST:	set	18
6346                     ; 1283     const uint8_t *const start = buf;
6348  dabb 1f01          	ldw	(OFST-17,sp),x
6350                     ; 1290     if(buf == NULL || topic_name == NULL) {
6352  dabd 2704          	jreq	L5662
6354  dabf 1e19          	ldw	x,(OFST+7,sp)
6355  dac1 2605          	jrne	L3662
6356  dac3               L5662:
6357                     ; 1291       return MQTT_ERROR_NULLPTR;
6359  dac3 ae8001        	ldw	x,#32769
6361  dac6 204f          	jra	L624
6362  dac8               L3662:
6363                     ; 1295     inspected_qos = (uint8_t)((publish_flags & MQTT_PUBLISH_QOS_MASK) >> 1); /* mask */
6365  dac8 7b21          	ld	a,(OFST+15,sp)
6366  daca a406          	and	a,#6
6367  dacc 44            	srl	a
6368  dacd 6b12          	ld	(OFST+0,sp),a
6370                     ; 1298     fixed_header.control_type = MQTT_CONTROL_PUBLISH;
6372  dacf a603          	ld	a,#3
6373  dad1 6b03          	ld	(OFST-15,sp),a
6375                     ; 1301     remaining_length = (uint32_t)__mqtt_packed_cstrlen(topic_name);
6377  dad3 cdf456        	call	_strlen
6379  dad6 1c0002        	addw	x,#2
6380  dad9 cdf8aa        	call	c_uitolx
6382  dadc 96            	ldw	x,sp
6383  dadd 1c000e        	addw	x,#OFST-4
6384  dae0 cdf849        	call	c_rtol
6387                     ; 1302     if (inspected_qos > 0) remaining_length += 2;
6389  dae3 7b12          	ld	a,(OFST+0,sp)
6390  dae5 2709          	jreq	L7662
6393  dae7 96            	ldw	x,sp
6394  dae8 1c000e        	addw	x,#OFST-4
6395  daeb a602          	ld	a,#2
6396  daed cdf698        	call	c_lgadc
6399  daf0               L7662:
6400                     ; 1303     remaining_length += (uint32_t)application_message_size;
6402  daf0 1e1f          	ldw	x,(OFST+13,sp)
6403  daf2 cdf8aa        	call	c_uitolx
6405  daf5 96            	ldw	x,sp
6406  daf6 1c000e        	addw	x,#OFST-4
6407  daf9 cdf6a8        	call	c_lgadd
6410                     ; 1304     fixed_header.remaining_length = remaining_length;
6412  dafc 1e10          	ldw	x,(OFST-2,sp)
6413  dafe 1f0a          	ldw	(OFST-8,sp),x
6414  db00 1e0e          	ldw	x,(OFST-4,sp)
6415  db02 1f08          	ldw	(OFST-10,sp),x
6417                     ; 1307     if (inspected_qos == 0) publish_flags &= (uint8_t)(~MQTT_PUBLISH_DUP);
6419  db04 7b12          	ld	a,(OFST+0,sp)
6420  db06 2608          	jrne	L1762
6423  db08 7b21          	ld	a,(OFST+15,sp)
6424  db0a a4f7          	and	a,#247
6425  db0c 6b21          	ld	(OFST+15,sp),a
6426  db0e 7b12          	ld	a,(OFST+0,sp)
6427  db10               L1762:
6428                     ; 1310     if (inspected_qos == 3) {
6430  db10 a103          	cp	a,#3
6431  db12 2606          	jrne	L3762
6432                     ; 1311       return MQTT_ERROR_PUBLISH_FORBIDDEN_QOS;
6434  db14 ae800a        	ldw	x,#32778
6436  db17               L624:
6438  db17 5b14          	addw	sp,#20
6439  db19 81            	ret	
6440  db1a               L3762:
6441                     ; 1313     fixed_header.control_flags = publish_flags;
6443  db1a 7b21          	ld	a,(OFST+15,sp)
6444  db1c 1807          	xor	a,(OFST-11,sp)
6445  db1e a40f          	and	a,#15
6446  db20 1807          	xor	a,(OFST-11,sp)
6447  db22 6b07          	ld	(OFST-11,sp),a
6449                     ; 1316     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6451  db24 96            	ldw	x,sp
6452  db25 1c0003        	addw	x,#OFST-15
6453  db28 89            	pushw	x
6454  db29 1e19          	ldw	x,(OFST+7,sp)
6455  db2b 89            	pushw	x
6456  db2c 1e17          	ldw	x,(OFST+5,sp)
6457  db2e cdd80f        	call	_mqtt_pack_fixed_header
6459  db31 5b04          	addw	sp,#4
6460  db33 1f0c          	ldw	(OFST-6,sp),x
6462                     ; 1317     if (rv <= 0) return rv; /* something went wrong */
6464  db35 9c            	rvf	
6468  db36 2ddf          	jrsle	L624
6469                     ; 1319     buf += rv;
6471  db38 1e13          	ldw	x,(OFST+1,sp)
6472  db3a 72fb0c        	addw	x,(OFST-6,sp)
6473  db3d 1f13          	ldw	(OFST+1,sp),x
6474                     ; 1320     bufsz -= rv;
6476  db3f 1e17          	ldw	x,(OFST+5,sp)
6477  db41 72f00c        	subw	x,(OFST-6,sp)
6478  db44 1f17          	ldw	(OFST+5,sp),x
6479                     ; 1323     if (bufsz < remaining_length) return 0;
6481  db46 cdf8aa        	call	c_uitolx
6483  db49 96            	ldw	x,sp
6484  db4a 1c000e        	addw	x,#OFST-4
6485  db4d cdf678        	call	c_lcmp
6487  db50 2403          	jruge	L7762
6490  db52 5f            	clrw	x
6492  db53 20c2          	jra	L624
6493  db55               L7762:
6494                     ; 1326     buf += __mqtt_pack_str(buf, topic_name);
6496  db55 1e19          	ldw	x,(OFST+7,sp)
6497  db57 89            	pushw	x
6498  db58 1e15          	ldw	x,(OFST+3,sp)
6499  db5a cde1d3        	call	___mqtt_pack_str
6501  db5d 5b02          	addw	sp,#2
6502  db5f 72fb13        	addw	x,(OFST+1,sp)
6503  db62 1f13          	ldw	(OFST+1,sp),x
6504                     ; 1327     if (inspected_qos > 0) buf += __mqtt_pack_uint16(buf, packet_id);
6506  db64 7b12          	ld	a,(OFST+0,sp)
6507  db66 270f          	jreq	L1072
6510  db68 1e1b          	ldw	x,(OFST+9,sp)
6511  db6a 89            	pushw	x
6512  db6b 1e15          	ldw	x,(OFST+3,sp)
6513  db6d cde192        	call	___mqtt_pack_uint16
6515  db70 5b02          	addw	sp,#2
6516  db72 72fb13        	addw	x,(OFST+1,sp)
6517  db75 1f13          	ldw	(OFST+1,sp),x
6518  db77               L1072:
6519                     ; 1330     memcpy(buf, application_message, application_message_size);
6521  db77 bf04          	ldw	c_x,x
6522  db79 161d          	ldw	y,(OFST+11,sp)
6523  db7b 90bf07        	ldw	c_y,y
6524  db7e 1e1f          	ldw	x,(OFST+13,sp)
6525  db80 270a          	jreq	L224
6526  db82               L424:
6527  db82 5a            	decw	x
6528  db83 92d607        	ld	a,([c_y.w],x)
6529  db86 92d704        	ld	([c_x.w],x),a
6530  db89 5d            	tnzw	x
6531  db8a 26f6          	jrne	L424
6532  db8c               L224:
6533                     ; 1331     buf += application_message_size;
6535  db8c 1e13          	ldw	x,(OFST+1,sp)
6536  db8e 72fb1f        	addw	x,(OFST+13,sp)
6537  db91 1f13          	ldw	(OFST+1,sp),x
6538                     ; 1333     return buf - start;
6540  db93 72f001        	subw	x,(OFST-17,sp)
6542  db96 ccdb17        	jra	L624
6625                     	switch	.const
6626  9d64               L234:
6627  9d64 00000004      	dc.l	4
6628                     ; 1337 int16_t mqtt_unpack_publish_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
6628                     ; 1338 {    
6629                     .text:	section	.text,new
6630  db99               _mqtt_unpack_publish_response:
6632  db99 89            	pushw	x
6633  db9a 5206          	subw	sp,#6
6634       00000006      OFST:	set	6
6637                     ; 1339     const uint8_t *const start = buf;
6639  db9c 1e0b          	ldw	x,(OFST+5,sp)
6640  db9e 1f01          	ldw	(OFST-5,sp),x
6642                     ; 1343     fixed_header = &(mqtt_response->fixed_header);
6644  dba0 1e07          	ldw	x,(OFST+1,sp)
6645  dba2 1f03          	ldw	(OFST-3,sp),x
6647                     ; 1344     response = &(mqtt_response->decoded.publish);
6649  dba4 1c0009        	addw	x,#9
6650  dba7 1f05          	ldw	(OFST-1,sp),x
6652                     ; 1347     response->dup_flag = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_DUP) >> 3);
6654  dba9 1e03          	ldw	x,(OFST-3,sp)
6655  dbab e604          	ld	a,(4,x)
6656  dbad a40f          	and	a,#15
6657  dbaf 44            	srl	a
6658  dbb0 44            	srl	a
6659  dbb1 1e05          	ldw	x,(OFST-1,sp)
6660  dbb3 44            	srl	a
6661  dbb4 f7            	ld	(x),a
6662                     ; 1348     response->qos_level = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_QOS_MASK) >> 1);
6664  dbb5 1e03          	ldw	x,(OFST-3,sp)
6665  dbb7 e604          	ld	a,(4,x)
6666  dbb9 a406          	and	a,#6
6667  dbbb 1e05          	ldw	x,(OFST-1,sp)
6668  dbbd 44            	srl	a
6669  dbbe e701          	ld	(1,x),a
6670                     ; 1349     response->retain_flag = (uint8_t)(fixed_header->control_flags & MQTT_PUBLISH_RETAIN);
6672  dbc0 1e03          	ldw	x,(OFST-3,sp)
6673  dbc2 e604          	ld	a,(4,x)
6674  dbc4 1e05          	ldw	x,(OFST-1,sp)
6675  dbc6 a401          	and	a,#1
6676  dbc8 e702          	ld	(2,x),a
6677                     ; 1352     if (mqtt_response->fixed_header.remaining_length < 4) {
6679  dbca 1e07          	ldw	x,(OFST+1,sp)
6680  dbcc 1c0005        	addw	x,#5
6681  dbcf cdf6e3        	call	c_ltor
6683  dbd2 ae9d64        	ldw	x,#L234
6684  dbd5 cdf678        	call	c_lcmp
6686  dbd8 2405          	jruge	L7472
6687                     ; 1353         return MQTT_ERROR_MALFORMED_RESPONSE;
6689  dbda ae800c        	ldw	x,#32780
6691  dbdd 2072          	jra	L044
6692  dbdf               L7472:
6693                     ; 1357     response->topic_name_size = __mqtt_unpack_uint16(buf);
6695  dbdf 1e0b          	ldw	x,(OFST+5,sp)
6696  dbe1 cde1b6        	call	___mqtt_unpack_uint16
6698  dbe4 1605          	ldw	y,(OFST-1,sp)
6699  dbe6 90ef03        	ldw	(3,y),x
6700                     ; 1358     buf += 2;
6702  dbe9 1e0b          	ldw	x,(OFST+5,sp)
6703  dbeb 1c0002        	addw	x,#2
6704  dbee 1f0b          	ldw	(OFST+5,sp),x
6705                     ; 1359     response->topic_name = buf;
6707  dbf0 93            	ldw	x,y
6708  dbf1 160b          	ldw	y,(OFST+5,sp)
6709  dbf3 ef05          	ldw	(5,x),y
6710                     ; 1360     buf += response->topic_name_size;
6712  dbf5 ee03          	ldw	x,(3,x)
6713  dbf7 72fb0b        	addw	x,(OFST+5,sp)
6714  dbfa 1f0b          	ldw	(OFST+5,sp),x
6715                     ; 1362     if (response->qos_level > 0) {
6717  dbfc 1e05          	ldw	x,(OFST-1,sp)
6718  dbfe 6d01          	tnz	(1,x)
6719  dc00 2712          	jreq	L1572
6720                     ; 1363         response->packet_id = __mqtt_unpack_uint16(buf);
6722  dc02 1e0b          	ldw	x,(OFST+5,sp)
6723  dc04 cde1b6        	call	___mqtt_unpack_uint16
6725  dc07 1605          	ldw	y,(OFST-1,sp)
6726  dc09 90ef07        	ldw	(7,y),x
6727                     ; 1364         buf += 2;
6729  dc0c 1e0b          	ldw	x,(OFST+5,sp)
6730  dc0e 1c0002        	addw	x,#2
6731  dc11 1f0b          	ldw	(OFST+5,sp),x
6732  dc13 93            	ldw	x,y
6733  dc14               L1572:
6734                     ; 1368     response->application_message = buf;
6736  dc14 160b          	ldw	y,(OFST+5,sp)
6737  dc16 ef09          	ldw	(9,x),y
6738                     ; 1369     if (response->qos_level == 0) {
6740  dc18 6d01          	tnz	(1,x)
6741  dc1a 2614          	jrne	L3572
6742                     ; 1370         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 2);
6744  dc1c 1e03          	ldw	x,(OFST-3,sp)
6745  dc1e 1605          	ldw	y,(OFST-1,sp)
6746  dc20 ee07          	ldw	x,(7,x)
6747  dc22 01            	rrwa	x,a
6748  dc23 90e004        	sub	a,(4,y)
6749  dc26 01            	rrwa	x,a
6750  dc27 90e203        	sbc	a,(3,y)
6751  dc2a 01            	rrwa	x,a
6752  dc2b 1d0002        	subw	x,#2
6754  dc2e 2012          	jra	L5572
6755  dc30               L3572:
6756                     ; 1373         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 4);
6758  dc30 1e03          	ldw	x,(OFST-3,sp)
6759  dc32 1605          	ldw	y,(OFST-1,sp)
6760  dc34 ee07          	ldw	x,(7,x)
6761  dc36 01            	rrwa	x,a
6762  dc37 90e004        	sub	a,(4,y)
6763  dc3a 01            	rrwa	x,a
6764  dc3b 90e203        	sbc	a,(3,y)
6765  dc3e 01            	rrwa	x,a
6766  dc3f 1d0004        	subw	x,#4
6767  dc42               L5572:
6768  dc42 90ef0b        	ldw	(11,y),x
6769                     ; 1375     buf += response->application_message_size;
6771  dc45 1e05          	ldw	x,(OFST-1,sp)
6772  dc47 ee0b          	ldw	x,(11,x)
6773  dc49 72fb0b        	addw	x,(OFST+5,sp)
6774  dc4c 1f0b          	ldw	(OFST+5,sp),x
6775                     ; 1378     return buf - start;
6777  dc4e 72f001        	subw	x,(OFST-5,sp)
6779  dc51               L044:
6781  dc51 5b08          	addw	sp,#8
6782  dc53 81            	ret	
6871                     ; 1383 int16_t mqtt_pack_pubxxx_request(uint8_t *buf, uint16_t bufsz, 
6871                     ; 1384                                  enum MQTTControlPacketType control_type,
6871                     ; 1385                                  uint16_t packet_id) 
6871                     ; 1386 {
6872                     .text:	section	.text,new
6873  dc54               _mqtt_pack_pubxxx_request:
6875  dc54 89            	pushw	x
6876  dc55 520d          	subw	sp,#13
6877       0000000d      OFST:	set	13
6880                     ; 1387     const uint8_t *const start = buf;
6882  dc57 1f01          	ldw	(OFST-12,sp),x
6884                     ; 1390     if (buf == NULL) {
6886  dc59 2605          	jrne	L7103
6887                     ; 1391       return MQTT_ERROR_NULLPTR;
6889  dc5b ae8001        	ldw	x,#32769
6891  dc5e 2032          	jra	L054
6892  dc60               L7103:
6893                     ; 1395     fixed_header.control_type = control_type;
6895  dc60 7b14          	ld	a,(OFST+7,sp)
6896  dc62 6b05          	ld	(OFST-8,sp),a
6898                     ; 1396     if (control_type == MQTT_CONTROL_PUBREL) fixed_header.control_flags = 0x02;
6900  dc64 a106          	cp	a,#6
6901  dc66 2608          	jrne	L1203
6904  dc68 7b09          	ld	a,(OFST-4,sp)
6905  dc6a a4f0          	and	a,#240
6906  dc6c aa02          	or	a,#2
6908  dc6e 2004          	jra	L3203
6909  dc70               L1203:
6910                     ; 1397     else fixed_header.control_flags = 0;
6912  dc70 7b09          	ld	a,(OFST-4,sp)
6913  dc72 a4f0          	and	a,#240
6914  dc74               L3203:
6915  dc74 6b09          	ld	(OFST-4,sp),a
6917                     ; 1399     fixed_header.remaining_length = 2;
6919  dc76 ae0002        	ldw	x,#2
6920  dc79 1f0c          	ldw	(OFST-1,sp),x
6921  dc7b 5f            	clrw	x
6922  dc7c 1f0a          	ldw	(OFST-3,sp),x
6924                     ; 1400     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6926  dc7e 96            	ldw	x,sp
6927  dc7f 1c0005        	addw	x,#OFST-8
6928  dc82 89            	pushw	x
6929  dc83 1e14          	ldw	x,(OFST+7,sp)
6930  dc85 89            	pushw	x
6931  dc86 1e12          	ldw	x,(OFST+5,sp)
6932  dc88 cdd80f        	call	_mqtt_pack_fixed_header
6934  dc8b 5b04          	addw	sp,#4
6935  dc8d 1f03          	ldw	(OFST-10,sp),x
6937                     ; 1401     if (rv <= 0) return rv;
6939  dc8f 9c            	rvf	
6940  dc90 2c03          	jrsgt	L5203
6944  dc92               L054:
6946  dc92 5b0f          	addw	sp,#15
6947  dc94 81            	ret	
6948  dc95               L5203:
6949                     ; 1402     buf += rv;
6951  dc95 1e0e          	ldw	x,(OFST+1,sp)
6952  dc97 72fb03        	addw	x,(OFST-10,sp)
6953  dc9a 1f0e          	ldw	(OFST+1,sp),x
6954                     ; 1403     bufsz -= rv;
6956  dc9c 1e12          	ldw	x,(OFST+5,sp)
6957  dc9e 72f003        	subw	x,(OFST-10,sp)
6958  dca1 1f12          	ldw	(OFST+5,sp),x
6959                     ; 1405     if (bufsz < fixed_header.remaining_length) return 0;
6961  dca3 cdf8aa        	call	c_uitolx
6963  dca6 96            	ldw	x,sp
6964  dca7 1c000a        	addw	x,#OFST-3
6965  dcaa cdf678        	call	c_lcmp
6967  dcad 2403          	jruge	L7203
6970  dcaf 5f            	clrw	x
6972  dcb0 20e0          	jra	L054
6973  dcb2               L7203:
6974                     ; 1407     buf += __mqtt_pack_uint16(buf, packet_id);
6976  dcb2 1e15          	ldw	x,(OFST+8,sp)
6977  dcb4 89            	pushw	x
6978  dcb5 1e10          	ldw	x,(OFST+3,sp)
6979  dcb7 cde192        	call	___mqtt_pack_uint16
6981  dcba 5b02          	addw	sp,#2
6982  dcbc 72fb0e        	addw	x,(OFST+1,sp)
6983  dcbf 1f0e          	ldw	(OFST+1,sp),x
6984                     ; 1409     return buf - start;
6986  dcc1 72f001        	subw	x,(OFST-12,sp)
6988  dcc4 20cc          	jra	L054
7054                     ; 1413 int16_t mqtt_unpack_pubxxx_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7054                     ; 1414 {
7055                     .text:	section	.text,new
7056  dcc6               _mqtt_unpack_pubxxx_response:
7058  dcc6 89            	pushw	x
7059  dcc7 5204          	subw	sp,#4
7060       00000004      OFST:	set	4
7063                     ; 1415     const uint8_t *const start = buf;
7065  dcc9 1e09          	ldw	x,(OFST+5,sp)
7066  dccb 1f01          	ldw	(OFST-3,sp),x
7068                     ; 1419     if (mqtt_response->fixed_header.remaining_length != 2) {
7070  dccd 1e05          	ldw	x,(OFST+1,sp)
7071  dccf 1c0005        	addw	x,#5
7072  dcd2 cdf6e3        	call	c_ltor
7074  dcd5 ae9d60        	ldw	x,#L473
7075  dcd8 cdf678        	call	c_lcmp
7077  dcdb 2705          	jreq	L3603
7078                     ; 1420         return MQTT_ERROR_MALFORMED_RESPONSE;
7080  dcdd ae800c        	ldw	x,#32780
7082  dce0 2019          	jra	L654
7083  dce2               L3603:
7084                     ; 1424     packet_id = __mqtt_unpack_uint16(buf);
7086  dce2 1e09          	ldw	x,(OFST+5,sp)
7087  dce4 cde1b6        	call	___mqtt_unpack_uint16
7089  dce7 1f03          	ldw	(OFST-1,sp),x
7091                     ; 1425     buf += 2;
7093  dce9 1e09          	ldw	x,(OFST+5,sp)
7094  dceb 1c0002        	addw	x,#2
7095  dcee 1f09          	ldw	(OFST+5,sp),x
7096                     ; 1427     if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBACK) {
7098                     ; 1428         mqtt_response->decoded.puback.packet_id = packet_id;
7100                     ; 1430     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREC) {
7102                     ; 1431         mqtt_response->decoded.pubrec.packet_id = packet_id;
7104                     ; 1433     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREL) {
7106                     ; 1434         mqtt_response->decoded.pubrel.packet_id = packet_id;
7108                     ; 1437         mqtt_response->decoded.pubcomp.packet_id = packet_id;
7113  dcf0 1e05          	ldw	x,(OFST+1,sp)
7114  dcf2 1603          	ldw	y,(OFST-1,sp)
7115  dcf4 ef09          	ldw	(9,x),y
7116                     ; 1440     return buf - start;
7118  dcf6 1e09          	ldw	x,(OFST+5,sp)
7119  dcf8 72f001        	subw	x,(OFST-3,sp)
7121  dcfb               L654:
7123  dcfb 5b06          	addw	sp,#6
7124  dcfd 81            	ret	
7190                     	switch	.const
7191  9d68               L264:
7192  9d68 00000003      	dc.l	3
7193                     ; 1445 int16_t mqtt_unpack_suback_response (struct mqtt_response *mqtt_response, const uint8_t *buf)
7193                     ; 1446 {
7194                     .text:	section	.text,new
7195  dcfe               _mqtt_unpack_suback_response:
7197  dcfe 89            	pushw	x
7198  dcff 5208          	subw	sp,#8
7199       00000008      OFST:	set	8
7202                     ; 1447     const uint8_t *const start = buf;
7204  dd01 1e0d          	ldw	x,(OFST+5,sp)
7205  dd03 1f03          	ldw	(OFST-5,sp),x
7207                     ; 1448     uint32_t remaining_length = mqtt_response->fixed_header.remaining_length;
7209  dd05 1e09          	ldw	x,(OFST+1,sp)
7210  dd07 9093          	ldw	y,x
7211  dd09 ee07          	ldw	x,(7,x)
7212  dd0b 1f07          	ldw	(OFST-1,sp),x
7213  dd0d 93            	ldw	x,y
7214  dd0e ee05          	ldw	x,(5,x)
7215  dd10 1f05          	ldw	(OFST-3,sp),x
7217                     ; 1451     if (remaining_length < 3) {
7219  dd12 96            	ldw	x,sp
7220  dd13 1c0005        	addw	x,#OFST-3
7221  dd16 cdf6e3        	call	c_ltor
7223  dd19 ae9d68        	ldw	x,#L264
7224  dd1c cdf678        	call	c_lcmp
7226  dd1f 2405          	jruge	L3313
7227                     ; 1452       return MQTT_ERROR_MALFORMED_RESPONSE;
7229  dd21 ae800c        	ldw	x,#32780
7231  dd24 2037          	jra	L664
7232  dd26               L3313:
7233                     ; 1456     mqtt_response->decoded.suback.packet_id = __mqtt_unpack_uint16(buf);
7235  dd26 1e0d          	ldw	x,(OFST+5,sp)
7236  dd28 cde1b6        	call	___mqtt_unpack_uint16
7238  dd2b 1609          	ldw	y,(OFST+1,sp)
7239  dd2d 90ef09        	ldw	(9,y),x
7240                     ; 1457     buf += 2;
7242  dd30 1e0d          	ldw	x,(OFST+5,sp)
7243  dd32 1c0002        	addw	x,#2
7244  dd35 1f0d          	ldw	(OFST+5,sp),x
7245                     ; 1458     remaining_length -= 2;
7247  dd37 96            	ldw	x,sp
7248  dd38 1c0005        	addw	x,#OFST-3
7249  dd3b a602          	ld	a,#2
7250  dd3d cdf6bf        	call	c_lgsbc
7253                     ; 1461     mqtt_response->decoded.suback.num_return_codes = (uint16_t) remaining_length;
7255  dd40 1e09          	ldw	x,(OFST+1,sp)
7256  dd42 1607          	ldw	y,(OFST-1,sp)
7257  dd44 ef0d          	ldw	(13,x),y
7258                     ; 1462     mqtt_response->decoded.suback.return_codes = buf;
7260  dd46 160d          	ldw	y,(OFST+5,sp)
7261  dd48 ef0b          	ldw	(11,x),y
7262                     ; 1463     buf += remaining_length;
7264  dd4a 96            	ldw	x,sp
7265  dd4b 1c0005        	addw	x,#OFST-3
7266  dd4e cdf6e3        	call	c_ltor
7268  dd51 be02          	ldw	x,c_lreg+2
7269  dd53 1f01          	ldw	(OFST-7,sp),x
7271  dd55 72fb0d        	addw	x,(OFST+5,sp)
7272  dd58 1f0d          	ldw	(OFST+5,sp),x
7273                     ; 1465     return buf - start;
7275  dd5a 72f003        	subw	x,(OFST-5,sp)
7277  dd5d               L664:
7279  dd5d 5b0a          	addw	sp,#10
7280  dd5f 81            	ret	
7406                     ; 1470 int16_t mqtt_pack_subscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7406                     ; 1471 {
7407                     .text:	section	.text,new
7408  dd60               _mqtt_pack_subscribe_request:
7410  dd60 89            	pushw	x
7411  dd61 5229          	subw	sp,#41
7412       00000029      OFST:	set	41
7415                     ; 1473     const uint8_t *const start = buf;
7417  dd63 1f03          	ldw	(OFST-38,sp),x
7419                     ; 1476     uint16_t num_subs = 0;
7421  dd65 5f            	clrw	x
7422  dd66 1f26          	ldw	(OFST-3,sp),x
7424                     ; 1482     va_start(args, packet_id);
7426  dd68 96            	ldw	x,sp
7427  dd69 1c0032        	addw	x,#OFST+9
7428  dd6c 1f28          	ldw	(OFST-1,sp),x
7430  dd6e               L1123:
7431                     ; 1484         topic[num_subs] = va_arg(args, const char*);
7433  dd6e 1e28          	ldw	x,(OFST-1,sp)
7434  dd70 1c0002        	addw	x,#2
7435  dd73 1f28          	ldw	(OFST-1,sp),x
7437  dd75 1d0002        	subw	x,#2
7438  dd78 9096          	ldw	y,sp
7439  dd7a 72a90016      	addw	y,#OFST-19
7440  dd7e 1701          	ldw	(OFST-40,sp),y
7442  dd80 1626          	ldw	y,(OFST-3,sp)
7443  dd82 9058          	sllw	y
7444  dd84 72f901        	addw	y,(OFST-40,sp)
7445  dd87 fe            	ldw	x,(x)
7446  dd88 90ff          	ldw	(y),x
7447                     ; 1485         if (topic[num_subs] == NULL) {
7449  dd8a 96            	ldw	x,sp
7450  dd8b 1c0016        	addw	x,#OFST-19
7451  dd8e 1f01          	ldw	(OFST-40,sp),x
7453  dd90 1e26          	ldw	x,(OFST-3,sp)
7454  dd92 58            	sllw	x
7455  dd93 72fb01        	addw	x,(OFST-40,sp)
7456  dd96 e601          	ld	a,(1,x)
7457  dd98 fa            	or	a,(x)
7458  dd99 2616          	jrne	L5123
7459                     ; 1487             break;
7460                     ; 1497     va_end(args);
7462                     ; 1500     fixed_header.control_type = MQTT_CONTROL_SUBSCRIBE;
7464  dd9b a608          	ld	a,#8
7465  dd9d 6b0d          	ld	(OFST-28,sp),a
7467                     ; 1501     fixed_header.control_flags = 2u;
7469  dd9f 7b11          	ld	a,(OFST-24,sp)
7470  dda1 a4f0          	and	a,#240
7471  dda3 aa02          	or	a,#2
7472  dda5 6b11          	ld	(OFST-24,sp),a
7474                     ; 1502     fixed_header.remaining_length = 2u; /* size of variable header */
7476  dda7 ae0002        	ldw	x,#2
7477  ddaa 1f14          	ldw	(OFST-21,sp),x
7478  ddac 5f            	clrw	x
7479  ddad 1f12          	ldw	(OFST-23,sp),x
7481                     ; 1503     for(i = 0; i < num_subs; ++i) {
7483  ddaf 203f          	jra	L5223
7484  ddb1               L5123:
7485                     ; 1490         max_qos[num_subs] = (uint8_t) va_arg(args, uint16_t);
7487  ddb1 1e28          	ldw	x,(OFST-1,sp)
7489  ddb3 e601          	ld	a,(1,x)
7490  ddb5 1c0002        	addw	x,#2
7491  ddb8 1f28          	ldw	(OFST-1,sp),x
7492  ddba 96            	ldw	x,sp
7493  ddbb 1c0005        	addw	x,#OFST-36
7494  ddbe 72fb26        	addw	x,(OFST-3,sp)
7495  ddc1 f7            	ld	(x),a
7496                     ; 1492         ++num_subs;
7498  ddc2 1e26          	ldw	x,(OFST-3,sp)
7499  ddc4 5c            	incw	x
7500  ddc5 1f26          	ldw	(OFST-3,sp),x
7502                     ; 1493         if (num_subs >= MQTT_SUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7504  ddc7 a30008        	cpw	x,#8
7505  ddca 25a2          	jrult	L1123
7506                     ; 1494             return MQTT_ERROR_SUBSCRIBE_TOO_MANY_TOPICS;
7508  ddcc ae800b        	ldw	x,#32779
7510  ddcf 2039          	jra	L205
7511  ddd1               L1223:
7512                     ; 1505         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]) + 1;
7514  ddd1 1c0016        	addw	x,#OFST-19
7515  ddd4 1f01          	ldw	(OFST-40,sp),x
7517  ddd6 1e28          	ldw	x,(OFST-1,sp)
7518  ddd8 58            	sllw	x
7519  ddd9 72fb01        	addw	x,(OFST-40,sp)
7520  dddc fe            	ldw	x,(x)
7521  dddd cdf456        	call	_strlen
7523  dde0 1c0003        	addw	x,#3
7524  dde3 cdf8aa        	call	c_uitolx
7526  dde6 96            	ldw	x,sp
7527  dde7 1c0012        	addw	x,#OFST-23
7528  ddea cdf6a8        	call	c_lgadd
7531                     ; 1503     for(i = 0; i < num_subs; ++i) {
7533  dded 1e28          	ldw	x,(OFST-1,sp)
7534  ddef 5c            	incw	x
7535  ddf0               L5223:
7537  ddf0 1f28          	ldw	(OFST-1,sp),x
7541  ddf2 1326          	cpw	x,(OFST-3,sp)
7542  ddf4 96            	ldw	x,sp
7543  ddf5 25da          	jrult	L1223
7544                     ; 1509     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
7546  ddf7 1c000d        	addw	x,#OFST-28
7547  ddfa 89            	pushw	x
7548  ddfb 1e30          	ldw	x,(OFST+7,sp)
7549  ddfd 89            	pushw	x
7550  ddfe 1e2e          	ldw	x,(OFST+5,sp)
7551  de00 cdd80f        	call	_mqtt_pack_fixed_header
7553  de03 5b04          	addw	sp,#4
7554  de05 1f28          	ldw	(OFST-1,sp),x
7556                     ; 1510     if (rv <= 0) return rv;
7558  de07 9c            	rvf	
7559  de08 2c03          	jrsgt	L1323
7563  de0a               L205:
7565  de0a 5b2b          	addw	sp,#43
7566  de0c 81            	ret	
7567  de0d               L1323:
7568                     ; 1511     buf += rv;
7570  de0d 1e2a          	ldw	x,(OFST+1,sp)
7571  de0f 72fb28        	addw	x,(OFST-1,sp)
7572  de12 1f2a          	ldw	(OFST+1,sp),x
7573                     ; 1512     bufsz -= rv;
7575  de14 1e2e          	ldw	x,(OFST+5,sp)
7576  de16 72f028        	subw	x,(OFST-1,sp)
7577  de19 1f2e          	ldw	(OFST+5,sp),x
7578                     ; 1515     if (bufsz < fixed_header.remaining_length) return 0;
7580  de1b cdf8aa        	call	c_uitolx
7582  de1e 96            	ldw	x,sp
7583  de1f 1c0012        	addw	x,#OFST-23
7584  de22 cdf678        	call	c_lcmp
7586  de25 2403          	jruge	L3323
7589  de27 5f            	clrw	x
7591  de28 20e0          	jra	L205
7592  de2a               L3323:
7593                     ; 1518     buf += __mqtt_pack_uint16(buf, packet_id);
7595  de2a 1e30          	ldw	x,(OFST+7,sp)
7596  de2c 89            	pushw	x
7597  de2d 1e2c          	ldw	x,(OFST+3,sp)
7598  de2f cde192        	call	___mqtt_pack_uint16
7600  de32 5b02          	addw	sp,#2
7601  de34 72fb2a        	addw	x,(OFST+1,sp)
7602  de37 1f2a          	ldw	(OFST+1,sp),x
7603                     ; 1521     for(i = 0; i < num_subs; ++i) {
7605  de39 5f            	clrw	x
7607  de3a 202b          	jra	L1423
7608  de3c               L5323:
7609                     ; 1522         buf += __mqtt_pack_str(buf, topic[i]);
7611  de3c 96            	ldw	x,sp
7612  de3d 1c0016        	addw	x,#OFST-19
7613  de40 1f01          	ldw	(OFST-40,sp),x
7615  de42 1e28          	ldw	x,(OFST-1,sp)
7616  de44 58            	sllw	x
7617  de45 72fb01        	addw	x,(OFST-40,sp)
7618  de48 fe            	ldw	x,(x)
7619  de49 89            	pushw	x
7620  de4a 1e2c          	ldw	x,(OFST+3,sp)
7621  de4c cde1d3        	call	___mqtt_pack_str
7623  de4f 5b02          	addw	sp,#2
7624  de51 72fb2a        	addw	x,(OFST+1,sp)
7625  de54 1f2a          	ldw	(OFST+1,sp),x
7626                     ; 1523         *buf++ = max_qos[i];
7628  de56 96            	ldw	x,sp
7629  de57 1c0005        	addw	x,#OFST-36
7630  de5a 72fb28        	addw	x,(OFST-1,sp)
7631  de5d f6            	ld	a,(x)
7632  de5e 1e2a          	ldw	x,(OFST+1,sp)
7633  de60 f7            	ld	(x),a
7634  de61 5c            	incw	x
7635  de62 1f2a          	ldw	(OFST+1,sp),x
7636                     ; 1521     for(i = 0; i < num_subs; ++i) {
7638  de64 1e28          	ldw	x,(OFST-1,sp)
7639  de66 5c            	incw	x
7640  de67               L1423:
7641  de67 1f28          	ldw	(OFST-1,sp),x
7645  de69 1326          	cpw	x,(OFST-3,sp)
7646  de6b 25cf          	jrult	L5323
7647                     ; 1526     return buf - start;
7649  de6d 1e2a          	ldw	x,(OFST+1,sp)
7650  de6f 72f003        	subw	x,(OFST-38,sp)
7652  de72 2096          	jra	L205
7711                     ; 1531 int16_t mqtt_unpack_unsuback_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7711                     ; 1532 {
7712                     .text:	section	.text,new
7713  de74               _mqtt_unpack_unsuback_response:
7715  de74 89            	pushw	x
7716  de75 89            	pushw	x
7717       00000002      OFST:	set	2
7720                     ; 1533     const uint8_t *const start = buf;
7722  de76 1e07          	ldw	x,(OFST+5,sp)
7723  de78 1f01          	ldw	(OFST-1,sp),x
7725                     ; 1535     if (mqtt_response->fixed_header.remaining_length != 2) {
7727  de7a 1e03          	ldw	x,(OFST+1,sp)
7728  de7c 1c0005        	addw	x,#5
7729  de7f cdf6e3        	call	c_ltor
7731  de82 ae9d60        	ldw	x,#L473
7732  de85 cdf678        	call	c_lcmp
7734  de88 2705          	jreq	L5723
7735                     ; 1536         return MQTT_ERROR_MALFORMED_RESPONSE;
7737  de8a ae800c        	ldw	x,#32780
7739  de8d 2014          	jra	L015
7740  de8f               L5723:
7741                     ; 1540     mqtt_response->decoded.unsuback.packet_id = __mqtt_unpack_uint16(buf);
7743  de8f 1e07          	ldw	x,(OFST+5,sp)
7744  de91 cde1b6        	call	___mqtt_unpack_uint16
7746  de94 1603          	ldw	y,(OFST+1,sp)
7747  de96 90ef09        	ldw	(9,y),x
7748                     ; 1541     buf += 2;
7750  de99 1e07          	ldw	x,(OFST+5,sp)
7751  de9b 1c0002        	addw	x,#2
7752  de9e 1f07          	ldw	(OFST+5,sp),x
7753                     ; 1543     return buf - start;
7755  dea0 72f001        	subw	x,(OFST-1,sp)
7757  dea3               L015:
7759  dea3 5b04          	addw	sp,#4
7760  dea5 81            	ret	
7876                     ; 1548 int16_t mqtt_pack_unsubscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7876                     ; 1549 {
7877                     .text:	section	.text,new
7878                     _mqtt_pack_unsubscribe_request:
7880                     	pushw	x
7881                     	subw	sp,#33
7882       00000021      OFST:	set	33
7885                     ; 1551     const uint8_t *const start = buf;
7887                     	ldw	(OFST-30,sp),x
7889                     ; 1554     uint16_t num_subs = 0;
7891                     	clrw	x
7892                     	ldw	(OFST-3,sp),x
7894                     ; 1559     va_start(args, packet_id);
7896                     	ldw	x,sp
7897                     	addw	x,#OFST+9
7898                     	ldw	(OFST-1,sp),x
7900                     L7433:
7901                     ; 1561         topic[num_subs] = va_arg(args, const char*);
7903                     	ldw	x,(OFST-1,sp)
7904                     	addw	x,#2
7905                     	ldw	(OFST-1,sp),x
7907                     	subw	x,#2
7908                     	ldw	y,sp
7909                     	addw	y,#OFST-19
7910                     	ldw	(OFST-32,sp),y
7912                     	ldw	y,(OFST-3,sp)
7913                     	sllw	y
7914                     	addw	y,(OFST-32,sp)
7915                     	ldw	x,(x)
7916                     	ldw	(y),x
7917                     ; 1562         if (topic[num_subs] == NULL) {
7919                     	ldw	x,sp
7920                     	addw	x,#OFST-19
7921                     	ldw	(OFST-32,sp),x
7923                     	ldw	x,(OFST-3,sp)
7924                     	sllw	x
7925                     	addw	x,(OFST-32,sp)
7926                     	ld	a,(1,x)
7927                     	or	a,(x)
7928                     	jrne	L3533
7929                     ; 1564             break;
7930                     ; 1572     va_end(args);
7932                     ; 1575     fixed_header.control_type = MQTT_CONTROL_UNSUBSCRIBE;
7934                     	ld	a,#10
7935                     	ld	(OFST-28,sp),a
7937                     ; 1576     fixed_header.control_flags = 2u;
7939                     	ld	a,(OFST-24,sp)
7940                     	and	a,#240
7941                     	or	a,#2
7942                     	ld	(OFST-24,sp),a
7944                     ; 1577     fixed_header.remaining_length = 2u; // size of variable header
7946                     	ldw	x,#2
7947                     	ldw	(OFST-21,sp),x
7948                     	clrw	x
7949                     	ldw	(OFST-23,sp),x
7951                     ; 1578     for(i = 0; i < num_subs; ++i) {
7953                     	jra	L3633
7954                     L3533:
7955                     ; 1567         ++num_subs;
7957                     	ldw	x,(OFST-3,sp)
7958                     	incw	x
7959                     	ldw	(OFST-3,sp),x
7961                     ; 1568         if (num_subs >= MQTT_UNSUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7963                     	cpw	x,#8
7964                     	jrult	L7433
7965                     ; 1569             return MQTT_ERROR_UNSUBSCRIBE_TOO_MANY_TOPICS;
7967                     	ldw	x,#32781
7969                     	jra	L425
7970                     L7533:
7971                     ; 1580         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]);
7973                     	addw	x,#OFST-19
7974                     	ldw	(OFST-32,sp),x
7976                     	ldw	x,(OFST-1,sp)
7977                     	sllw	x
7978                     	addw	x,(OFST-32,sp)
7979                     	ldw	x,(x)
7980                     	call	_strlen
7982                     	addw	x,#2
7983                     	call	c_uitolx
7985                     	ldw	x,sp
7986                     	addw	x,#OFST-23
7987                     	call	c_lgadd
7990                     ; 1578     for(i = 0; i < num_subs; ++i) {
7992                     	ldw	x,(OFST-1,sp)
7993                     	incw	x
7994                     L3633:
7996                     	ldw	(OFST-1,sp),x
8000                     	cpw	x,(OFST-3,sp)
8001                     	ldw	x,sp
8002                     	jrult	L7533
8003                     ; 1584     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
8005                     	addw	x,#OFST-28
8006                     	pushw	x
8007                     	ldw	x,(OFST+7,sp)
8008                     	pushw	x
8009                     	ldw	x,(OFST+5,sp)
8010                     	call	_mqtt_pack_fixed_header
8012                     	addw	sp,#4
8013                     	ldw	(OFST-1,sp),x
8015                     ; 1585     if (rv <= 0) return rv;
8017                     	rvf	
8018                     	jrsgt	L7633
8022                     L425:
8024                     	addw	sp,#35
8025                     	ret	
8026                     L7633:
8027                     ; 1586     buf += rv;
8029                     	ldw	x,(OFST+1,sp)
8030                     	addw	x,(OFST-1,sp)
8031                     	ldw	(OFST+1,sp),x
8032                     ; 1587     bufsz -= rv;
8034                     	ldw	x,(OFST+5,sp)
8035                     	subw	x,(OFST-1,sp)
8036                     	ldw	(OFST+5,sp),x
8037                     ; 1590     if (bufsz < fixed_header.remaining_length) return 0;
8039                     	call	c_uitolx
8041                     	ldw	x,sp
8042                     	addw	x,#OFST-23
8043                     	call	c_lcmp
8045                     	jruge	L1733
8048                     	clrw	x
8050                     	jra	L425
8051                     L1733:
8052                     ; 1593     buf += __mqtt_pack_uint16(buf, packet_id);
8054                     	ldw	x,(OFST+7,sp)
8055                     	pushw	x
8056                     	ldw	x,(OFST+3,sp)
8057                     	call	___mqtt_pack_uint16
8059                     	addw	sp,#2
8060                     	addw	x,(OFST+1,sp)
8061                     	ldw	(OFST+1,sp),x
8062                     ; 1596     for(i = 0; i < num_subs; ++i) buf += __mqtt_pack_str(buf, topic[i]);
8064                     	clrw	x
8066                     	jra	L7733
8067                     L3733:
8070                     	ldw	x,sp
8071                     	addw	x,#OFST-19
8072                     	ldw	(OFST-32,sp),x
8074                     	ldw	x,(OFST-1,sp)
8075                     	sllw	x
8076                     	addw	x,(OFST-32,sp)
8077                     	ldw	x,(x)
8078                     	pushw	x
8079                     	ldw	x,(OFST+3,sp)
8080                     	call	___mqtt_pack_str
8082                     	addw	sp,#2
8083                     	addw	x,(OFST+1,sp)
8084                     	ldw	(OFST+1,sp),x
8087                     	ldw	x,(OFST-1,sp)
8088                     	incw	x
8089                     L7733:
8090                     	ldw	(OFST-1,sp),x
8094                     	cpw	x,(OFST-3,sp)
8095                     	jrult	L3733
8096                     ; 1598     return buf - start;
8098                     	ldw	x,(OFST+1,sp)
8099                     	subw	x,(OFST-30,sp)
8101                     	jra	L425
8155                     ; 1603 void mqtt_mq_init(struct mqtt_message_queue *mq, void *buf, uint16_t bufsz) 
8155                     ; 1604 {  
8156                     .text:	section	.text,new
8157  dea6               _mqtt_mq_init:
8159  dea6 89            	pushw	x
8160       00000000      OFST:	set	0
8163                     ; 1605     if(buf != NULL)
8165  dea7 1e05          	ldw	x,(OFST+5,sp)
8166  dea9 2748          	jreq	L1343
8167                     ; 1607         mq->mem_start = buf;
8169  deab 1e01          	ldw	x,(OFST+1,sp)
8170  dead 1605          	ldw	y,(OFST+5,sp)
8171  deaf ff            	ldw	(x),y
8172                     ; 1608         mq->mem_end = (unsigned char*)buf + bufsz;
8174  deb0 93            	ldw	x,y
8175  deb1 1601          	ldw	y,(OFST+1,sp)
8176  deb3 72fb07        	addw	x,(OFST+7,sp)
8177  deb6 90ef02        	ldw	(2,y),x
8178                     ; 1609         mq->curr = buf;
8180  deb9 93            	ldw	x,y
8181  deba 1605          	ldw	y,(OFST+5,sp)
8182  debc ef04          	ldw	(4,x),y
8183                     ; 1610         mq->queue_tail = mq->mem_end;
8185  debe 9093          	ldw	y,x
8186  dec0 90ee02        	ldw	y,(2,y)
8187  dec3 ef08          	ldw	(8,x),y
8188                     ; 1611         mq->curr_sz = mqtt_mq_currsz(mq);
8190  dec5 1601          	ldw	y,(OFST+1,sp)
8191  dec7 90ee08        	ldw	y,(8,y)
8192  deca 72a2000c      	subw	y,#12
8193  dece 90bf07        	ldw	c_y,y
8194  ded1 9093          	ldw	y,x
8195  ded3 90ee04        	ldw	y,(4,y)
8196  ded6 90b307        	cpw	y,c_y
8197  ded9 2505          	jrult	L035
8198  dedb 5f            	clrw	x
8199  dedc 1601          	ldw	y,(OFST+1,sp)
8200  dede 2010          	jra	L235
8201  dee0               L035:
8202  dee0 ee08          	ldw	x,(8,x)
8203  dee2 1d000c        	subw	x,#12
8204  dee5 1601          	ldw	y,(OFST+1,sp)
8205  dee7 01            	rrwa	x,a
8206  dee8 90e005        	sub	a,(5,y)
8207  deeb 01            	rrwa	x,a
8208  deec 90e204        	sbc	a,(4,y)
8209  deef 01            	rrwa	x,a
8210  def0               L235:
8211  def0 90ef06        	ldw	(6,y),x
8212  def3               L1343:
8213                     ; 1613 }
8216  def3 85            	popw	x
8217  def4 81            	ret	
8264                     ; 1616 struct mqtt_queued_message* mqtt_mq_register(struct mqtt_message_queue *mq, uint16_t nbytes)
8264                     ; 1617 {
8265                     .text:	section	.text,new
8266  def5               _mqtt_mq_register:
8268  def5 89            	pushw	x
8269       00000000      OFST:	set	0
8272                     ; 1619     --(mq->queue_tail);
8274  def6 9093          	ldw	y,x
8275  def8 ee08          	ldw	x,(8,x)
8276  defa 1d000c        	subw	x,#12
8277  defd 90ef08        	ldw	(8,y),x
8278                     ; 1620     mq->queue_tail->start = mq->curr;
8280  df00 1e01          	ldw	x,(OFST+1,sp)
8281  df02 9093          	ldw	y,x
8282  df04 90ee08        	ldw	y,(8,y)
8283  df07 ee04          	ldw	x,(4,x)
8284  df09 90ff          	ldw	(y),x
8285                     ; 1621     mq->queue_tail->size = nbytes;
8287  df0b 1e01          	ldw	x,(OFST+1,sp)
8288  df0d ee08          	ldw	x,(8,x)
8289  df0f 1605          	ldw	y,(OFST+5,sp)
8290  df11 ef02          	ldw	(2,x),y
8291                     ; 1622     mq->queue_tail->state = MQTT_QUEUED_UNSENT;
8293  df13 1e01          	ldw	x,(OFST+1,sp)
8294  df15 ee08          	ldw	x,(8,x)
8295  df17 6f04          	clr	(4,x)
8296                     ; 1625     mq->curr += nbytes;
8298  df19 1e01          	ldw	x,(OFST+1,sp)
8299  df1b 9093          	ldw	y,x
8300  df1d ee04          	ldw	x,(4,x)
8301  df1f 72fb05        	addw	x,(OFST+5,sp)
8302  df22 90ef04        	ldw	(4,y),x
8303                     ; 1626     mq->curr_sz = mqtt_mq_currsz(mq);
8305  df25 1e01          	ldw	x,(OFST+1,sp)
8306  df27 9093          	ldw	y,x
8307  df29 90ee08        	ldw	y,(8,y)
8308  df2c 72a2000c      	subw	y,#12
8309  df30 90bf07        	ldw	c_y,y
8310  df33 9093          	ldw	y,x
8311  df35 90ee04        	ldw	y,(4,y)
8312  df38 90b307        	cpw	y,c_y
8313  df3b 2505          	jrult	L635
8314  df3d 5f            	clrw	x
8315  df3e 1601          	ldw	y,(OFST+1,sp)
8316  df40 2010          	jra	L045
8317  df42               L635:
8318  df42 ee08          	ldw	x,(8,x)
8319  df44 1d000c        	subw	x,#12
8320  df47 1601          	ldw	y,(OFST+1,sp)
8321  df49 01            	rrwa	x,a
8322  df4a 90e005        	sub	a,(5,y)
8323  df4d 01            	rrwa	x,a
8324  df4e 90e204        	sbc	a,(4,y)
8325  df51 01            	rrwa	x,a
8326  df52               L045:
8327  df52 90ef06        	ldw	(6,y),x
8328                     ; 1628     return mq->queue_tail;
8330  df55 1e01          	ldw	x,(OFST+1,sp)
8331  df57 ee08          	ldw	x,(8,x)
8334  df59 5b02          	addw	sp,#2
8335  df5b 81            	ret	
8413                     ; 1632 void mqtt_mq_clean(struct mqtt_message_queue *mq) {
8414                     .text:	section	.text,new
8415  df5c               _mqtt_mq_clean:
8417  df5c 89            	pushw	x
8418  df5d 5208          	subw	sp,#8
8419       00000008      OFST:	set	8
8422                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8424  df5f ee02          	ldw	x,(2,x)
8426  df61 2047          	jra	L5253
8427  df63               L5153:
8428                     ; 1636         if (new_head->state != MQTT_QUEUED_COMPLETE) break;
8430  df63 1e07          	ldw	x,(OFST-1,sp)
8431  df65 e604          	ld	a,(4,x)
8432  df67 a102          	cp	a,#2
8433  df69 273f          	jreq	L5253
8435  df6b               L3253:
8436                     ; 1640     if (new_head < mq->queue_tail) {
8438  df6b 1e09          	ldw	x,(OFST+1,sp)
8439  df6d ee08          	ldw	x,(8,x)
8440  df6f 1307          	cpw	x,(OFST-1,sp)
8441  df71 2346          	jrule	L7253
8442                     ; 1641         mq->curr = mq->mem_start;
8444  df73 1e09          	ldw	x,(OFST+1,sp)
8445  df75 9093          	ldw	y,x
8446  df77 90fe          	ldw	y,(y)
8447  df79 ef04          	ldw	(4,x),y
8448                     ; 1642         mq->queue_tail = mq->mem_end;
8450  df7b 9093          	ldw	y,x
8451  df7d 90ee02        	ldw	y,(2,y)
8452  df80 ef08          	ldw	(8,x),y
8453                     ; 1643         mq->curr_sz = mqtt_mq_currsz(mq);
8455  df82 72a2000c      	subw	y,#12
8456  df86 90bf07        	ldw	c_y,y
8457  df89 9093          	ldw	y,x
8458  df8b 90ee04        	ldw	y,(4,y)
8459  df8e 90b307        	cpw	y,c_y
8460  df91 2504          	jrult	L445
8461  df93               LC022:
8462  df93 5f            	clrw	x
8463  df94 cce0a2        	jp	L655
8464  df97               L445:
8465  df97 ee08          	ldw	x,(8,x)
8466  df99 1d000c        	subw	x,#12
8467  df9c 1609          	ldw	y,(OFST+1,sp)
8468  df9e 01            	rrwa	x,a
8469  df9f 90e005        	sub	a,(5,y)
8470  dfa2 01            	rrwa	x,a
8471  dfa3 90e204        	sbc	a,(4,y)
8472  dfa6 01            	rrwa	x,a
8473                     ; 1644         return;
8475  dfa7 cce0a4        	jp	LC020
8476  dfaa               L5253:
8477                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8479  dfaa 1d000c        	subw	x,#12
8480  dfad 1f07          	ldw	(OFST-1,sp),x
8484  dfaf 1e09          	ldw	x,(OFST+1,sp)
8485  dfb1 ee08          	ldw	x,(8,x)
8486  dfb3 1307          	cpw	x,(OFST-1,sp)
8487  dfb5 23ac          	jrule	L5153
8488  dfb7 20b2          	jra	L3253
8489  dfb9               L7253:
8490                     ; 1646     else if (new_head == mqtt_mq_get(mq, 0)) {
8492  dfb9 1e09          	ldw	x,(OFST+1,sp)
8493  dfbb ee02          	ldw	x,(2,x)
8494  dfbd 1d000c        	subw	x,#12
8495  dfc0 1307          	cpw	x,(OFST-1,sp)
8496  dfc2 2603          	jrne	L1353
8497                     ; 1648         return;
8498  dfc4               L065:
8501  dfc4 5b0a          	addw	sp,#10
8502  dfc6 81            	ret	
8503  dfc7               L1353:
8504                     ; 1653         uint16_t n = mq->curr - new_head->start;
8506  dfc7 1e09          	ldw	x,(OFST+1,sp)
8507  dfc9 1607          	ldw	y,(OFST-1,sp)
8508  dfcb ee04          	ldw	x,(4,x)
8509  dfcd 01            	rrwa	x,a
8510  dfce 90e001        	sub	a,(1,y)
8511  dfd1 01            	rrwa	x,a
8512  dfd2 90f2          	sbc	a,(y)
8513  dfd4 01            	rrwa	x,a
8514  dfd5 1f05          	ldw	(OFST-3,sp),x
8516                     ; 1654         uint16_t removing = new_head->start - (uint8_t*) mq->mem_start;
8518  dfd7 93            	ldw	x,y
8519  dfd8 1609          	ldw	y,(OFST+1,sp)
8520  dfda fe            	ldw	x,(x)
8521  dfdb 01            	rrwa	x,a
8522  dfdc 90e001        	sub	a,(1,y)
8523  dfdf 01            	rrwa	x,a
8524  dfe0 90f2          	sbc	a,(y)
8525  dfe2 01            	rrwa	x,a
8526  dfe3 1f03          	ldw	(OFST-5,sp),x
8528                     ; 1655         memmove(mq->mem_start, new_head->start, n);
8530  dfe5 1e05          	ldw	x,(OFST-3,sp)
8531  dfe7 89            	pushw	x
8532  dfe8 1e09          	ldw	x,(OFST+1,sp)
8533  dfea fe            	ldw	x,(x)
8534  dfeb 89            	pushw	x
8535  dfec 1e0d          	ldw	x,(OFST+5,sp)
8536  dfee fe            	ldw	x,(x)
8537  dfef cdf3f1        	call	_memmove
8539  dff2 5b04          	addw	sp,#4
8540                     ; 1656         mq->curr = (unsigned char*)mq->mem_start + n;
8542  dff4 1e09          	ldw	x,(OFST+1,sp)
8543  dff6 fe            	ldw	x,(x)
8544  dff7 1609          	ldw	y,(OFST+1,sp)
8545  dff9 72fb05        	addw	x,(OFST-3,sp)
8546  dffc 90ef04        	ldw	(4,y),x
8547                     ; 1660             int16_t new_tail_idx = new_head - mq->queue_tail;
8549  dfff 1e07          	ldw	x,(OFST-1,sp)
8550  e001 01            	rrwa	x,a
8551  e002 90e009        	sub	a,(9,y)
8552  e005 01            	rrwa	x,a
8553  e006 90e208        	sbc	a,(8,y)
8554  e009 01            	rrwa	x,a
8555  e00a a60c          	ld	a,#12
8556  e00c cdf861        	call	c_sdivx
8558  e00f 1f05          	ldw	(OFST-3,sp),x
8560                     ; 1661             memmove(mqtt_mq_get(mq, new_tail_idx), mq->queue_tail, sizeof(struct mqtt_queued_message) * (new_tail_idx + 1));
8562  e011 5c            	incw	x
8563  e012 a60c          	ld	a,#12
8564  e014 cdf462        	call	c_bmulx
8566  e017 89            	pushw	x
8567  e018 1e0b          	ldw	x,(OFST+3,sp)
8568  e01a ee08          	ldw	x,(8,x)
8569  e01c 89            	pushw	x
8570  e01d 1e09          	ldw	x,(OFST+1,sp)
8571  e01f a60c          	ld	a,#12
8572  e021 cdf462        	call	c_bmulx
8574  e024 1f05          	ldw	(OFST-3,sp),x
8576  e026 1e0d          	ldw	x,(OFST+5,sp)
8577  e028 ee02          	ldw	x,(2,x)
8578  e02a 1d000c        	subw	x,#12
8579  e02d 72f005        	subw	x,(OFST-3,sp)
8580  e030 cdf3f1        	call	_memmove
8582  e033 5b04          	addw	sp,#4
8583                     ; 1662             mq->queue_tail = mqtt_mq_get(mq, new_tail_idx);
8585  e035 1e05          	ldw	x,(OFST-3,sp)
8586  e037 a60c          	ld	a,#12
8587  e039 cdf462        	call	c_bmulx
8589  e03c 1f01          	ldw	(OFST-7,sp),x
8591  e03e 1e09          	ldw	x,(OFST+1,sp)
8592  e040 ee02          	ldw	x,(2,x)
8593  e042 1d000c        	subw	x,#12
8594  e045 1609          	ldw	y,(OFST+1,sp)
8595  e047 72f001        	subw	x,(OFST-7,sp)
8596  e04a 90ef08        	ldw	(8,y),x
8597                     ; 1666                 int16_t i = 0;
8599  e04d 5f            	clrw	x
8601  e04e 201e          	jra	L1453
8602  e050               L5353:
8603                     ; 1667                 for(; i < new_tail_idx + 1; ++i) mqtt_mq_get(mq, i)->start -= removing;
8605  e050 1e07          	ldw	x,(OFST-1,sp)
8606  e052 a60c          	ld	a,#12
8607  e054 cdf462        	call	c_bmulx
8609  e057 1f01          	ldw	(OFST-7,sp),x
8611  e059 1e09          	ldw	x,(OFST+1,sp)
8612  e05b ee02          	ldw	x,(2,x)
8613  e05d 1d000c        	subw	x,#12
8614  e060 72f001        	subw	x,(OFST-7,sp)
8615  e063 9093          	ldw	y,x
8616  e065 fe            	ldw	x,(x)
8617  e066 72f003        	subw	x,(OFST-5,sp)
8618  e069 90ff          	ldw	(y),x
8621  e06b 1e07          	ldw	x,(OFST-1,sp)
8622  e06d 5c            	incw	x
8623  e06e               L1453:
8624  e06e 1f07          	ldw	(OFST-1,sp),x
8628  e070 1e05          	ldw	x,(OFST-3,sp)
8629  e072 5c            	incw	x
8630  e073 1307          	cpw	x,(OFST-1,sp)
8631  e075 2cd9          	jrsgt	L5353
8632                     ; 1673     mq->curr_sz = mqtt_mq_currsz(mq);
8634  e077 1e09          	ldw	x,(OFST+1,sp)
8635  e079 9093          	ldw	y,x
8636  e07b 90ee08        	ldw	y,(8,y)
8637  e07e 72a2000c      	subw	y,#12
8638  e082 90bf07        	ldw	c_y,y
8639  e085 9093          	ldw	y,x
8640  e087 90ee04        	ldw	y,(4,y)
8641  e08a 90b307        	cpw	y,c_y
8642  e08d 2503ccdf93    	jruge	LC022
8643  e092 ee08          	ldw	x,(8,x)
8644  e094 1d000c        	subw	x,#12
8645  e097 1609          	ldw	y,(OFST+1,sp)
8646  e099 01            	rrwa	x,a
8647  e09a 90e005        	sub	a,(5,y)
8648  e09d 01            	rrwa	x,a
8649  e09e 90e204        	sbc	a,(4,y)
8650  e0a1 01            	rrwa	x,a
8651  e0a2               L655:
8652  e0a2 1609          	ldw	y,(OFST+1,sp)
8653  e0a4               LC020:
8654  e0a4 90ef06        	ldw	(6,y),x
8655                     ; 1674 }
8657  e0a7 ccdfc4        	jra	L065
8729                     ; 1677 struct mqtt_queued_message* mqtt_mq_find(struct mqtt_message_queue *mq, enum MQTTControlPacketType control_type, uint16_t *packet_id)
8729                     ; 1678 {
8730                     .text:	section	.text,new
8731  e0aa               _mqtt_mq_find:
8733  e0aa 89            	pushw	x
8734  e0ab 89            	pushw	x
8735       00000002      OFST:	set	2
8738                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8740  e0ac ee02          	ldw	x,(2,x)
8742  e0ae 2025          	jra	L1163
8743  e0b0               L5063:
8744                     ; 1681         if (curr->control_type == control_type) {
8746  e0b0 1e01          	ldw	x,(OFST-1,sp)
8747  e0b2 e609          	ld	a,(9,x)
8748  e0b4 1107          	cp	a,(OFST+5,sp)
8749  e0b6 261b          	jrne	L5163
8750                     ; 1682             if ((packet_id == NULL && curr->state != MQTT_QUEUED_COMPLETE) ||
8750                     ; 1683                 (packet_id != NULL && *packet_id == curr->packet_id)) {
8752  e0b8 1e08          	ldw	x,(OFST+6,sp)
8753  e0ba 2608          	jrne	L3263
8755  e0bc 1e01          	ldw	x,(OFST-1,sp)
8756  e0be e604          	ld	a,(4,x)
8757  e0c0 a102          	cp	a,#2
8758  e0c2 261f          	jrne	L465
8759  e0c4               L3263:
8761  e0c4 1e08          	ldw	x,(OFST+6,sp)
8762  e0c6 270b          	jreq	L5163
8764  e0c8 1601          	ldw	y,(OFST-1,sp)
8765  e0ca fe            	ldw	x,(x)
8766  e0cb 90e30a        	cpw	x,(10,y)
8767  e0ce 2603          	jrne	L5163
8768  e0d0 93            	ldw	x,y
8769                     ; 1684                 return curr;
8772  e0d1 2010          	jra	L465
8773  e0d3               L5163:
8774                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8776  e0d3 1e01          	ldw	x,(OFST-1,sp)
8777  e0d5               L1163:
8778  e0d5 1d000c        	subw	x,#12
8779  e0d8 1f01          	ldw	(OFST-1,sp),x
8783  e0da 1e03          	ldw	x,(OFST+1,sp)
8784  e0dc ee08          	ldw	x,(8,x)
8785  e0de 1301          	cpw	x,(OFST-1,sp)
8786  e0e0 23ce          	jrule	L5063
8787                     ; 1688     return NULL;
8789  e0e2 5f            	clrw	x
8791  e0e3               L465:
8793  e0e3 5b04          	addw	sp,#4
8794  e0e5 81            	ret	
8872                     ; 1693 int16_t mqtt_unpack_response(struct mqtt_response* response, const uint8_t *buf, uint16_t bufsz)
8872                     ; 1694 {
8873                     .text:	section	.text,new
8874  e0e6               _mqtt_unpack_response:
8876  e0e6 89            	pushw	x
8877  e0e7 5204          	subw	sp,#4
8878       00000004      OFST:	set	4
8881                     ; 1695     const uint8_t *const start = buf;
8883  e0e9 1e09          	ldw	x,(OFST+5,sp)
8884  e0eb 1f01          	ldw	(OFST-3,sp),x
8886                     ; 1696     int16_t rv = mqtt_unpack_fixed_header(response, buf, bufsz);
8888  e0ed 1e0b          	ldw	x,(OFST+7,sp)
8889  e0ef 89            	pushw	x
8890  e0f0 1e0b          	ldw	x,(OFST+7,sp)
8891  e0f2 89            	pushw	x
8892  e0f3 1e09          	ldw	x,(OFST+5,sp)
8893  e0f5 cdd752        	call	_mqtt_unpack_fixed_header
8895  e0f8 5b04          	addw	sp,#4
8896  e0fa 1f03          	ldw	(OFST-1,sp),x
8898                     ; 1698     if (rv <= 0) return rv;
8900  e0fc 9c            	rvf	
8904  e0fd 2d2c          	jrsle	L216
8905                     ; 1699     else buf += rv;
8907  e0ff 1e09          	ldw	x,(OFST+5,sp)
8908  e101 72fb03        	addw	x,(OFST-1,sp)
8909  e104 1f09          	ldw	(OFST+5,sp),x
8910                     ; 1701     switch(response->fixed_header.control_type) {
8912  e106 1e05          	ldw	x,(OFST+1,sp)
8913  e108 f6            	ld	a,(x)
8915                     ; 1728         default:
8915                     ; 1729             return MQTT_ERROR_RESPONSE_INVALID_CONTROL_TYPE;
8916  e109 a002          	sub	a,#2
8917  e10b 2721          	jreq	L5263
8918  e10d 4a            	dec	a
8919  e10e 2728          	jreq	L7263
8920  e110 4a            	dec	a
8921  e111 272f          	jreq	L1363
8922  e113 4a            	dec	a
8923  e114 2736          	jreq	L3363
8924  e116 4a            	dec	a
8925  e117 273d          	jreq	L5363
8926  e119 4a            	dec	a
8927  e11a 2744          	jreq	L7363
8928  e11c a002          	sub	a,#2
8929  e11e 274a          	jreq	L1463
8930  e120 a002          	sub	a,#2
8931  e122 2750          	jreq	L3463
8932  e124 a002          	sub	a,#2
8933  e126 2756          	jreq	L5463
8936  e128 ae800e        	ldw	x,#32782
8938  e12b               L216:
8940  e12b 5b06          	addw	sp,#6
8941  e12d 81            	ret	
8942  e12e               L5263:
8943                     ; 1702         case MQTT_CONTROL_CONNACK:
8943                     ; 1703             rv = mqtt_unpack_connack_response(response, buf);
8945  e12e 1e09          	ldw	x,(OFST+5,sp)
8946  e130 89            	pushw	x
8947  e131 1e07          	ldw	x,(OFST+3,sp)
8948  e133 cdda28        	call	_mqtt_unpack_connack_response
8950                     ; 1704             break;
8952  e136 204a          	jra	L3173
8953  e138               L7263:
8954                     ; 1705         case MQTT_CONTROL_PUBLISH:
8954                     ; 1706             rv = mqtt_unpack_publish_response(response, buf);
8956  e138 1e09          	ldw	x,(OFST+5,sp)
8957  e13a 89            	pushw	x
8958  e13b 1e07          	ldw	x,(OFST+3,sp)
8959  e13d cddb99        	call	_mqtt_unpack_publish_response
8961                     ; 1707             break;
8963  e140 2040          	jra	L3173
8964  e142               L1363:
8965                     ; 1708         case MQTT_CONTROL_PUBACK:
8965                     ; 1709             rv = mqtt_unpack_pubxxx_response(response, buf);
8967  e142 1e09          	ldw	x,(OFST+5,sp)
8968  e144 89            	pushw	x
8969  e145 1e07          	ldw	x,(OFST+3,sp)
8970  e147 cddcc6        	call	_mqtt_unpack_pubxxx_response
8972                     ; 1710             break;
8974  e14a 2036          	jra	L3173
8975  e14c               L3363:
8976                     ; 1711         case MQTT_CONTROL_PUBREC:
8976                     ; 1712             rv = mqtt_unpack_pubxxx_response(response, buf);
8978  e14c 1e09          	ldw	x,(OFST+5,sp)
8979  e14e 89            	pushw	x
8980  e14f 1e07          	ldw	x,(OFST+3,sp)
8981  e151 cddcc6        	call	_mqtt_unpack_pubxxx_response
8983                     ; 1713             break;
8985  e154 202c          	jra	L3173
8986  e156               L5363:
8987                     ; 1714         case MQTT_CONTROL_PUBREL:
8987                     ; 1715             rv = mqtt_unpack_pubxxx_response(response, buf);
8989  e156 1e09          	ldw	x,(OFST+5,sp)
8990  e158 89            	pushw	x
8991  e159 1e07          	ldw	x,(OFST+3,sp)
8992  e15b cddcc6        	call	_mqtt_unpack_pubxxx_response
8994                     ; 1716             break;
8996  e15e 2022          	jra	L3173
8997  e160               L7363:
8998                     ; 1717         case MQTT_CONTROL_PUBCOMP:
8998                     ; 1718             rv = mqtt_unpack_pubxxx_response(response, buf);
9000  e160 1e09          	ldw	x,(OFST+5,sp)
9001  e162 89            	pushw	x
9002  e163 1e07          	ldw	x,(OFST+3,sp)
9003  e165 cddcc6        	call	_mqtt_unpack_pubxxx_response
9005                     ; 1719             break;
9007  e168 2018          	jra	L3173
9008  e16a               L1463:
9009                     ; 1720         case MQTT_CONTROL_SUBACK:
9009                     ; 1721             rv = mqtt_unpack_suback_response(response, buf);
9011  e16a 1e09          	ldw	x,(OFST+5,sp)
9012  e16c 89            	pushw	x
9013  e16d 1e07          	ldw	x,(OFST+3,sp)
9014  e16f cddcfe        	call	_mqtt_unpack_suback_response
9016                     ; 1722             break;
9018  e172 200e          	jra	L3173
9019  e174               L3463:
9020                     ; 1723         case MQTT_CONTROL_UNSUBACK:
9020                     ; 1724             rv = mqtt_unpack_unsuback_response(response, buf);
9022  e174 1e09          	ldw	x,(OFST+5,sp)
9023  e176 89            	pushw	x
9024  e177 1e07          	ldw	x,(OFST+3,sp)
9025  e179 cdde74        	call	_mqtt_unpack_unsuback_response
9027                     ; 1725             break;
9029  e17c 2004          	jra	L3173
9030  e17e               L5463:
9031                     ; 1726         case MQTT_CONTROL_PINGRESP:
9031                     ; 1727             return rv;
9033  e17e 1e03          	ldw	x,(OFST-1,sp)
9035  e180 20a9          	jra	L216
9036  e182               L3173:
9037  e182 5b02          	addw	sp,#2
9038  e184 1f03          	ldw	(OFST-1,sp),x
9040                     ; 1732     if (rv < 0) return rv;
9045  e186 2ba3          	jrmi	L216
9046                     ; 1733     buf += rv;
9048  e188 72fb09        	addw	x,(OFST+5,sp)
9049  e18b 1f09          	ldw	(OFST+5,sp),x
9050                     ; 1734     return buf - start;
9052  e18d 72f001        	subw	x,(OFST-3,sp)
9054  e190 2099          	jra	L216
9104                     ; 1751 int16_t __mqtt_pack_uint16(uint8_t *buf, uint16_t integer)
9104                     ; 1752 {
9105                     .text:	section	.text,new
9106  e192               ___mqtt_pack_uint16:
9108  e192 89            	pushw	x
9109  e193 89            	pushw	x
9110       00000002      OFST:	set	2
9113                     ; 1753   uint16_t integer_htons = HTONS(integer);
9115  e194 1e07          	ldw	x,(OFST+5,sp)
9116  e196 1f01          	ldw	(OFST-1,sp),x
9118                     ; 1754   memcpy(buf, &integer_htons, 2);
9120  e198 1e03          	ldw	x,(OFST+1,sp)
9121  e19a bf04          	ldw	c_x,x
9122  e19c 9096          	ldw	y,sp
9123  e19e 905c          	incw	y
9124  e1a0 90bf07        	ldw	c_y,y
9125  e1a3 ae0002        	ldw	x,#2
9126  e1a6               L616:
9127  e1a6 5a            	decw	x
9128  e1a7 92d607        	ld	a,([c_y.w],x)
9129  e1aa 92d704        	ld	([c_x.w],x),a
9130  e1ad 5d            	tnzw	x
9131  e1ae 26f6          	jrne	L616
9132                     ; 1755   return 2;
9134  e1b0 ae0002        	ldw	x,#2
9137  e1b3 5b04          	addw	sp,#4
9138  e1b5 81            	ret	
9182                     ; 1759 uint16_t __mqtt_unpack_uint16(const uint8_t *buf)
9182                     ; 1760 {
9183                     .text:	section	.text,new
9184  e1b6               ___mqtt_unpack_uint16:
9186  e1b6 89            	pushw	x
9187  e1b7 89            	pushw	x
9188       00000002      OFST:	set	2
9191                     ; 1762   memcpy(&integer_htons, buf, 2);
9193  e1b8 96            	ldw	x,sp
9194  e1b9 5c            	incw	x
9195  e1ba bf04          	ldw	c_x,x
9196  e1bc 1603          	ldw	y,(OFST+1,sp)
9197  e1be 90bf07        	ldw	c_y,y
9198  e1c1 ae0002        	ldw	x,#2
9199  e1c4               L226:
9200  e1c4 5a            	decw	x
9201  e1c5 92d607        	ld	a,([c_y.w],x)
9202  e1c8 92d704        	ld	([c_x.w],x),a
9203  e1cb 5d            	tnzw	x
9204  e1cc 26f6          	jrne	L226
9205                     ; 1763   return HTONS(integer_htons);
9207  e1ce 1e01          	ldw	x,(OFST-1,sp)
9210  e1d0 5b04          	addw	sp,#4
9211  e1d2 81            	ret	
9272                     ; 1767 int16_t __mqtt_pack_str(uint8_t *buf, const char* str)
9272                     ; 1768 {
9273                     .text:	section	.text,new
9274  e1d3               ___mqtt_pack_str:
9276  e1d3 89            	pushw	x
9277  e1d4 5204          	subw	sp,#4
9278       00000004      OFST:	set	4
9281                     ; 1769     uint16_t length = (uint16_t)strlen(str);
9283  e1d6 1e09          	ldw	x,(OFST+5,sp)
9284  e1d8 cdf456        	call	_strlen
9286  e1db 1f01          	ldw	(OFST-3,sp),x
9288                     ; 1770     int16_t i = 0;
9290  e1dd 5f            	clrw	x
9291  e1de 1f03          	ldw	(OFST-1,sp),x
9293                     ; 1772     buf += __mqtt_pack_uint16(buf, length);
9295  e1e0 1e01          	ldw	x,(OFST-3,sp)
9296  e1e2 89            	pushw	x
9297  e1e3 1e07          	ldw	x,(OFST+3,sp)
9298  e1e5 cde192        	call	___mqtt_pack_uint16
9300  e1e8 5b02          	addw	sp,#2
9301  e1ea 72fb05        	addw	x,(OFST+1,sp)
9302  e1ed 1f05          	ldw	(OFST+1,sp),x
9304  e1ef 1e03          	ldw	x,(OFST-1,sp)
9305  e1f1 200f          	jra	L3104
9306  e1f3               L7004:
9307                     ; 1775     for(; i < length; ++i) *(buf++) = str[i];
9309  e1f3 72fb09        	addw	x,(OFST+5,sp)
9310  e1f6 f6            	ld	a,(x)
9311  e1f7 1e05          	ldw	x,(OFST+1,sp)
9312  e1f9 f7            	ld	(x),a
9313  e1fa 5c            	incw	x
9314  e1fb 1f05          	ldw	(OFST+1,sp),x
9317  e1fd 1e03          	ldw	x,(OFST-1,sp)
9318  e1ff 5c            	incw	x
9319  e200 1f03          	ldw	(OFST-1,sp),x
9321  e202               L3104:
9324  e202 1301          	cpw	x,(OFST-3,sp)
9325  e204 25ed          	jrult	L7004
9326                     ; 1778     return length + 2;
9328  e206 1e01          	ldw	x,(OFST-3,sp)
9329  e208 1c0002        	addw	x,#2
9332  e20b 5b06          	addw	sp,#6
9333  e20d 81            	ret	
9397                     	switch	.bss
9398  016f               _mqtt_sendbuf:
9399  016f 000000000000  	ds.b	300
9400                     	xdef	_mqtt_sendbuf
9401  029b               _MQTT_error_status:
9402  029b 00            	ds.b	1
9403                     	xdef	_MQTT_error_status
9404                     	xref	_second_counter
9405                     	xref	_uip_flags
9406                     	xref	_uip_len
9407                     	xdef	_mqtt_disconnect
9408                     	xdef	___mqtt_ping
9409                     	xdef	_mqtt_ping
9410                     	xdef	_mqtt_unsubscribe
9411                     	xdef	_mqtt_subscribe
9412                     	xdef	___mqtt_pubcomp
9413                     	xdef	___mqtt_pubrel
9414                     	xdef	___mqtt_pubrec
9415                     	xdef	___mqtt_puback
9416                     	xdef	_mqtt_publish
9417                     	xdef	_mqtt_connect
9418                     	xdef	_mqtt_init
9419                     	xdef	_mqtt_sync
9420                     	xdef	___mqtt_recv
9421                     	xdef	___mqtt_send
9422                     	xdef	___mqtt_next_pid
9423                     	xdef	_mqtt_mq_find
9424                     	xdef	_mqtt_mq_register
9425                     	xdef	_mqtt_mq_clean
9426                     	xdef	_mqtt_mq_init
9427                     	xdef	_mqtt_pack_disconnect
9428                     	xdef	_mqtt_pack_ping_request
9429                     	xdef	_mqtt_pack_unsubscribe_request
9430                     	xdef	_mqtt_pack_subscribe_request
9431                     	xdef	_mqtt_pack_pubxxx_request
9432                     	xdef	_mqtt_pack_publish_request
9433                     	xdef	_mqtt_pack_connection_request
9434                     	xdef	_mqtt_pack_fixed_header
9435                     	xdef	_mqtt_unpack_response
9436                     	xdef	_mqtt_unpack_unsuback_response
9437                     	xdef	_mqtt_unpack_suback_response
9438                     	xdef	_mqtt_unpack_pubxxx_response
9439                     	xdef	_mqtt_unpack_publish_response
9440                     	xdef	_mqtt_unpack_connack_response
9441                     	xdef	_mqtt_unpack_fixed_header
9442                     	xdef	___mqtt_pack_str
9443                     	xdef	___mqtt_unpack_uint16
9444                     	xdef	___mqtt_pack_uint16
9445                     	xref	_mqtt_pal_recvall
9446                     	xref	_mqtt_pal_sendall
9447                     	xref	_memmove
9448                     	xref	_strlen
9449                     	switch	.const
9450  9d6c               L5051:
9451  9d6c 3f400000      	dc.w	16192,0
9452                     	xref.b	c_lreg
9453                     	xref.b	c_x
9454                     	xref.b	c_y
9474                     	xref	c_lgsbc
9475                     	xref	c_lgadc
9476                     	xref	c_lgursh
9477                     	xref	c_uitolx
9478                     	xref	c_lgadd
9479                     	xref	c_itoly
9480                     	xref	c_ltor
9481                     	xref	c_rtol
9482                     	xref	c_ftol
9483                     	xref	c_fmul
9484                     	xref	c_uitof
9485                     	xref	c_lcmp
9486                     	xref	c_ladd
9487                     	xref	c_itolx
9488                     	xref	c_bmulx
9489                     	xref	c_bmuly
9490                     	xref	c_sdivx
9491                     	end
