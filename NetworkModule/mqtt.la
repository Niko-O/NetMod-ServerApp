   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
 508                     ; 77 int16_t mqtt_sync(struct mqtt_client *client)
 508                     ; 78 {
 510                     .text:	section	.text,new
 511  cff9               _mqtt_sync:
 513  cff9 89            	pushw	x
 514  cffa 89            	pushw	x
 515       00000002      OFST:	set	2
 518                     ; 86     if ((uip_newdata() || uip_acked()) && uip_len > 0) {
 520  cffb 720202c805    	btjt	_uip_flags,#1,L172
 522  d000 720102c811    	btjf	_uip_flags,#0,L762
 523  d005               L172:
 525  d005 ce0373        	ldw	x,_uip_len
 526  d008 270c          	jreq	L762
 527                     ; 87       err = __mqtt_recv(client);
 529  d00a 1e03          	ldw	x,(OFST+1,sp)
 530  d00c cdd71f        	call	___mqtt_recv
 532  d00f 1f01          	ldw	(OFST-1,sp),x
 534                     ; 88       if (err != MQTT_OK) {
 536  d011 a30001        	cpw	x,#1
 537                     ; 89         return err;
 540  d014 2616          	jrne	L772
 541  d016               L762:
 542                     ; 98     err = __mqtt_send(client);
 544  d016 1e03          	ldw	x,(OFST+1,sp)
 545  d018 cdd53f        	call	___mqtt_send
 547  d01b 1f01          	ldw	(OFST-1,sp),x
 549                     ; 101     if (err == MQTT_OK) {
 551  d01d a30001        	cpw	x,#1
 552  d020 2606          	jrne	L572
 553                     ; 102       MQTT_error_status = 1;
 555  d022 3501029b      	mov	_MQTT_error_status,#1
 557  d026 2004          	jra	L772
 558  d028               L572:
 559                     ; 104     else MQTT_error_status = 0;
 561  d028 725f029b      	clr	_MQTT_error_status
 562  d02c               L772:
 563                     ; 105     return err;
 567  d02c 5b04          	addw	sp,#4
 568  d02e 81            	ret	
 631                     ; 109 uint16_t __mqtt_next_pid(struct mqtt_client *client)
 631                     ; 110 {
 632                     .text:	section	.text,new
 633  d02f               ___mqtt_next_pid:
 635  d02f 89            	pushw	x
 636  d030 5204          	subw	sp,#4
 637       00000004      OFST:	set	4
 640                     ; 112     int16_t pid_exists = 0;
 642                     ; 113     if (client->pid_lfsr == 0) client->pid_lfsr = 163u;
 644  d032 e601          	ld	a,(1,x)
 645  d034 fa            	or	a,(x)
 646  d035 2605          	jrne	L533
 649  d037 90ae00a3      	ldw	y,#163
 650  d03b ff            	ldw	(x),y
 651  d03c               L533:
 652                     ; 119         unsigned lsb = client->pid_lfsr & 1;
 654  d03c 1e05          	ldw	x,(OFST+1,sp)
 655  d03e fe            	ldw	x,(x)
 656  d03f 01            	rrwa	x,a
 657  d040 a401          	and	a,#1
 658  d042 5f            	clrw	x
 659  d043 02            	rlwa	x,a
 660  d044 1f03          	ldw	(OFST-1,sp),x
 661  d046 01            	rrwa	x,a
 663                     ; 120         (client->pid_lfsr) >>= 1;
 665  d047 1e05          	ldw	x,(OFST+1,sp)
 666  d049 74            	srl	(x)
 667  d04a 6601          	rrc	(1,x)
 668                     ; 121         if (lsb) client->pid_lfsr ^= 0xB400u;
 670  d04c 1e03          	ldw	x,(OFST-1,sp)
 671  d04e 2706          	jreq	L343
 674  d050 1e05          	ldw	x,(OFST+1,sp)
 675  d052 f6            	ld	a,(x)
 676  d053 a8b4          	xor	a,#180
 677  d055 f7            	ld	(x),a
 678  d056               L343:
 679                     ; 124         pid_exists = 0;
 681  d056 5f            	clrw	x
 682  d057 1f03          	ldw	(OFST-1,sp),x
 684                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 686  d059 1e05          	ldw	x,(OFST+1,sp)
 687  d05b ee24          	ldw	x,(36,x)
 689  d05d 201b          	jra	L153
 690  d05f               L543:
 691                     ; 126             if (curr->packet_id == client->pid_lfsr) {
 693  d05f 1e01          	ldw	x,(OFST-3,sp)
 694  d061 1605          	ldw	y,(OFST+1,sp)
 695  d063 ee0a          	ldw	x,(10,x)
 696  d065 90f3          	cpw	x,(y)
 697  d067 260f          	jrne	L553
 698                     ; 127                 pid_exists = 1;
 700  d069 ae0001        	ldw	x,#1
 701  d06c 1f03          	ldw	(OFST-1,sp),x
 703                     ; 128                 break;
 704  d06e               L733:
 705                     ; 132     } while(pid_exists);
 707  d06e 1e03          	ldw	x,(OFST-1,sp)
 708  d070 26ca          	jrne	L533
 709                     ; 134     return client->pid_lfsr;
 711  d072 1e05          	ldw	x,(OFST+1,sp)
 712  d074 fe            	ldw	x,(x)
 715  d075 5b06          	addw	sp,#6
 716  d077 81            	ret	
 717  d078               L553:
 718                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 720  d078 1e01          	ldw	x,(OFST-3,sp)
 721  d07a               L153:
 722  d07a 1d000c        	subw	x,#12
 723  d07d 1f01          	ldw	(OFST-3,sp),x
 727  d07f 1e05          	ldw	x,(OFST+1,sp)
 728  d081 ee2a          	ldw	x,(42,x)
 729  d083 1301          	cpw	x,(OFST-3,sp)
 730  d085 23d8          	jrule	L543
 731  d087 20e5          	jra	L733
 815                     ; 138 int16_t mqtt_init(struct mqtt_client *client,
 815                     ; 139                uint8_t *sendbuf, uint16_t sendbufsz,
 815                     ; 140                uint8_t *recvbuf, uint16_t recvbufsz,
 815                     ; 141                void (*publish_response_callback)(void** state,struct mqtt_response_publish *publish))
 815                     ; 142 {
 816                     .text:	section	.text,new
 817  d089               _mqtt_init:
 819  d089 89            	pushw	x
 820       00000000      OFST:	set	0
 823                     ; 143     if (client == NULL || sendbuf == NULL || recvbuf == NULL) {
 825  d08a 5d            	tnzw	x
 826  d08b 2708          	jreq	L124
 828  d08d 1e05          	ldw	x,(OFST+5,sp)
 829  d08f 2704          	jreq	L124
 831  d091 1e09          	ldw	x,(OFST+9,sp)
 832  d093 2605          	jrne	L714
 833  d095               L124:
 834                     ; 144       return MQTT_ERROR_NULLPTR;
 836  d095 ae8001        	ldw	x,#32769
 838  d098 2044          	jra	L22
 839  d09a               L714:
 840                     ; 147     mqtt_mq_init(&client->mq, sendbuf, sendbufsz);
 842  d09a 1e07          	ldw	x,(OFST+7,sp)
 843  d09c 89            	pushw	x
 844  d09d 1e07          	ldw	x,(OFST+7,sp)
 845  d09f 89            	pushw	x
 846  d0a0 1e05          	ldw	x,(OFST+5,sp)
 847  d0a2 1c0022        	addw	x,#34
 848  d0a5 cde150        	call	_mqtt_mq_init
 850  d0a8 5b04          	addw	sp,#4
 851                     ; 149     client->recv_buffer.mem_start = recvbuf;
 853  d0aa 1e01          	ldw	x,(OFST+1,sp)
 854  d0ac 1609          	ldw	y,(OFST+9,sp)
 855  d0ae ef1a          	ldw	(26,x),y
 856                     ; 150     client->recv_buffer.mem_size = recvbufsz;
 858  d0b0 160b          	ldw	y,(OFST+11,sp)
 859  d0b2 ef1c          	ldw	(28,x),y
 860                     ; 151     client->recv_buffer.curr = client->recv_buffer.mem_start;
 862  d0b4 9093          	ldw	y,x
 863  d0b6 90ee1a        	ldw	y,(26,y)
 864  d0b9 ef1e          	ldw	(30,x),y
 865                     ; 152     client->recv_buffer.curr_sz = client->recv_buffer.mem_size;
 867  d0bb 9093          	ldw	y,x
 868  d0bd 90ee1c        	ldw	y,(28,y)
 869  d0c0 ef20          	ldw	(32,x),y
 870                     ; 154     client->error = MQTT_ERROR_CONNECT_NOT_CALLED;
 872  d0c2 90ae800f      	ldw	y,#32783
 873  d0c6 ef0a          	ldw	(10,x),y
 874                     ; 155     client->response_timeout = 30;
 876  d0c8 90ae001e      	ldw	y,#30
 877  d0cc ef0c          	ldw	(12,x),y
 878                     ; 156     client->number_of_timeouts = 0;
 880  d0ce 905f          	clrw	y
 881  d0d0 ef0e          	ldw	(14,x),y
 882                     ; 157     client->publish_response_callback = publish_response_callback;
 884  d0d2 160d          	ldw	y,(OFST+13,sp)
 885  d0d4 ef10          	ldw	(16,x),y
 886                     ; 158     client->pid_lfsr = 0;
 888  d0d6 905f          	clrw	y
 889  d0d8 ff            	ldw	(x),y
 890                     ; 159     client->send_offset = 0;
 892  d0d9 ef04          	ldw	(4,x),y
 893                     ; 161     return MQTT_OK;
 895  d0db ae0001        	ldw	x,#1
 897  d0de               L22:
 899  d0de 5b02          	addw	sp,#2
 900  d0e0 81            	ret	
1030                     ; 228 int16_t mqtt_connect(struct mqtt_client *client,
1030                     ; 229                      const char* client_id,
1030                     ; 230                      const char* will_topic,
1030                     ; 231                      const void* will_message,
1030                     ; 232                      uint16_t will_message_size,
1030                     ; 233                      const char* user_name,
1030                     ; 234                      const char* password,
1030                     ; 235                      uint8_t connect_flags,
1030                     ; 236                      uint16_t keep_alive)
1030                     ; 237 {
1031                     .text:	section	.text,new
1032  d0e1               _mqtt_connect:
1034  d0e1 89            	pushw	x
1035  d0e2 89            	pushw	x
1036       00000002      OFST:	set	2
1039                     ; 242     client->keep_alive = keep_alive;
1041  d0e3 1614          	ldw	y,(OFST+18,sp)
1042  d0e5 ef02          	ldw	(2,x),y
1043                     ; 244     if (client->error == MQTT_ERROR_CONNECT_NOT_CALLED) {
1045  d0e7 9093          	ldw	y,x
1046  d0e9 90ee0a        	ldw	y,(10,y)
1047  d0ec 90a3800f      	cpw	y,#32783
1048  d0f0 2606          	jrne	L705
1049                     ; 245         client->error = MQTT_OK;
1051  d0f2 90ae0001      	ldw	y,#1
1052  d0f6 ef0a          	ldw	(10,x),y
1053  d0f8               L705:
1054                     ; 249     MQTT_CLIENT_TRY_PACK(rv, msg, client, 
1056  d0f8 e60a          	ld	a,(10,x)
1057  d0fa 2a04          	jrpl	L115
1060  d0fc ee0a          	ldw	x,(10,x)
1062  d0fe 2031          	jra	L63
1063  d100               L115:
1066  d100 1e14          	ldw	x,(OFST+18,sp)
1067  d102 89            	pushw	x
1068  d103 7b15          	ld	a,(OFST+19,sp)
1069  d105 88            	push	a
1070  d106 1e14          	ldw	x,(OFST+18,sp)
1071  d108 89            	pushw	x
1072  d109 1e14          	ldw	x,(OFST+18,sp)
1073  d10b 89            	pushw	x
1074  d10c 1e14          	ldw	x,(OFST+18,sp)
1075  d10e 89            	pushw	x
1076  d10f 1e14          	ldw	x,(OFST+18,sp)
1077  d111 89            	pushw	x
1078  d112 1e14          	ldw	x,(OFST+18,sp)
1079  d114 89            	pushw	x
1080  d115 1e14          	ldw	x,(OFST+18,sp)
1081  d117 89            	pushw	x
1082  d118 1e12          	ldw	x,(OFST+16,sp)
1083  d11a ee28          	ldw	x,(40,x)
1084  d11c 89            	pushw	x
1085  d11d 1e14          	ldw	x,(OFST+18,sp)
1086  d11f ee26          	ldw	x,(38,x)
1087  d121 cddb68        	call	_mqtt_pack_connection_request
1089  d124 5b11          	addw	sp,#17
1090  d126 1f01          	ldw	(OFST-1,sp),x
1094  d128 2a0a          	jrpl	L315
1099  d12a               LC001:
1101  d12a 1e03          	ldw	x,(OFST+1,sp)
1102  d12c 1601          	ldw	y,(OFST-1,sp)
1103  d12e ef0a          	ldw	(10,x),y
1105  d130 93            	ldw	x,y
1107  d131               L63:
1109  d131 5b04          	addw	sp,#4
1110  d133 81            	ret	
1111  d134               L315:
1114  d134 2641          	jrne	L515
1117  d136 1e03          	ldw	x,(OFST+1,sp)
1118  d138 1c0022        	addw	x,#34
1119  d13b cde206        	call	_mqtt_mq_clean
1123  d13e 1e14          	ldw	x,(OFST+18,sp)
1124  d140 89            	pushw	x
1125  d141 7b15          	ld	a,(OFST+19,sp)
1126  d143 88            	push	a
1127  d144 1e14          	ldw	x,(OFST+18,sp)
1128  d146 89            	pushw	x
1129  d147 1e14          	ldw	x,(OFST+18,sp)
1130  d149 89            	pushw	x
1131  d14a 1e14          	ldw	x,(OFST+18,sp)
1132  d14c 89            	pushw	x
1133  d14d 1e14          	ldw	x,(OFST+18,sp)
1134  d14f 89            	pushw	x
1135  d150 1e14          	ldw	x,(OFST+18,sp)
1136  d152 89            	pushw	x
1137  d153 1e14          	ldw	x,(OFST+18,sp)
1138  d155 89            	pushw	x
1139  d156 1e12          	ldw	x,(OFST+16,sp)
1140  d158 ee28          	ldw	x,(40,x)
1141  d15a 89            	pushw	x
1142  d15b 1e14          	ldw	x,(OFST+18,sp)
1143  d15d ee26          	ldw	x,(38,x)
1144  d15f cddb68        	call	_mqtt_pack_connection_request
1146  d162 5b11          	addw	sp,#17
1147  d164 1f01          	ldw	(OFST-1,sp),x
1154  d166 2bc2          	jrmi	LC001
1157  d168 260d          	jrne	L515
1160  d16a 1e03          	ldw	x,(OFST+1,sp)
1161  d16c 90ae8010      	ldw	y,#32784
1162  d170 ef0a          	ldw	(10,x),y
1165  d172 ae8010        	ldw	x,#32784
1167  d175 20ba          	jra	L63
1168  d177               L515:
1171  d177 89            	pushw	x
1172  d178 1e05          	ldw	x,(OFST+3,sp)
1173  d17a 1c0022        	addw	x,#34
1174  d17d cde19f        	call	_mqtt_mq_register
1176  d180 5b02          	addw	sp,#2
1178                     ; 266     msg->control_type = MQTT_CONTROL_CONNECT;
1181  d182 a601          	ld	a,#1
1182  d184 e709          	ld	(9,x),a
1183                     ; 268     return MQTT_OK;
1185  d186 ae0001        	ldw	x,#1
1187  d189 20a6          	jra	L63
1290                     ; 272 int16_t mqtt_publish(struct mqtt_client *client,
1290                     ; 273                      const char* topic_name,
1290                     ; 274                      const void* application_message,
1290                     ; 275                      uint16_t application_message_size,
1290                     ; 276                      uint8_t publish_flags)
1290                     ; 277 {
1291                     .text:	section	.text,new
1292  d18b               _mqtt_publish:
1294  d18b 89            	pushw	x
1295  d18c 5204          	subw	sp,#4
1296       00000004      OFST:	set	4
1299                     ; 281     packet_id = __mqtt_next_pid(client);
1301  d18e cdd02f        	call	___mqtt_next_pid
1303  d191 1f01          	ldw	(OFST-3,sp),x
1305                     ; 284     MQTT_CLIENT_TRY_PACK(
1307  d193 1e05          	ldw	x,(OFST+1,sp)
1308  d195 e60a          	ld	a,(10,x)
1309  d197 2a04          	jrpl	L575
1312  d199 ee0a          	ldw	x,(10,x)
1314  d19b 2028          	jra	L45
1315  d19d               L575:
1318  d19d 7b0f          	ld	a,(OFST+11,sp)
1319  d19f 88            	push	a
1320  d1a0 1e0e          	ldw	x,(OFST+10,sp)
1321  d1a2 89            	pushw	x
1322  d1a3 1e0e          	ldw	x,(OFST+10,sp)
1323  d1a5 89            	pushw	x
1324  d1a6 1e06          	ldw	x,(OFST+2,sp)
1325  d1a8 89            	pushw	x
1326  d1a9 1e10          	ldw	x,(OFST+12,sp)
1327  d1ab 89            	pushw	x
1328  d1ac 1e0e          	ldw	x,(OFST+10,sp)
1329  d1ae ee28          	ldw	x,(40,x)
1330  d1b0 89            	pushw	x
1331  d1b1 1e10          	ldw	x,(OFST+12,sp)
1332  d1b3 ee26          	ldw	x,(38,x)
1333  d1b5 cddd62        	call	_mqtt_pack_publish_request
1335  d1b8 5b0b          	addw	sp,#11
1336  d1ba 1f03          	ldw	(OFST-1,sp),x
1340  d1bc 2a0a          	jrpl	L775
1345  d1be               LC002:
1347  d1be 1e05          	ldw	x,(OFST+1,sp)
1348  d1c0 1603          	ldw	y,(OFST-1,sp)
1349  d1c2 ef0a          	ldw	(10,x),y
1351  d1c4 93            	ldw	x,y
1353  d1c5               L45:
1355  d1c5 5b06          	addw	sp,#6
1356  d1c7 81            	ret	
1357  d1c8               L775:
1360  d1c8 2638          	jrne	L106
1363  d1ca 1e05          	ldw	x,(OFST+1,sp)
1364  d1cc 1c0022        	addw	x,#34
1365  d1cf cde206        	call	_mqtt_mq_clean
1369  d1d2 7b0f          	ld	a,(OFST+11,sp)
1370  d1d4 88            	push	a
1371  d1d5 1e0e          	ldw	x,(OFST+10,sp)
1372  d1d7 89            	pushw	x
1373  d1d8 1e0e          	ldw	x,(OFST+10,sp)
1374  d1da 89            	pushw	x
1375  d1db 1e06          	ldw	x,(OFST+2,sp)
1376  d1dd 89            	pushw	x
1377  d1de 1e10          	ldw	x,(OFST+12,sp)
1378  d1e0 89            	pushw	x
1379  d1e1 1e0e          	ldw	x,(OFST+10,sp)
1380  d1e3 ee28          	ldw	x,(40,x)
1381  d1e5 89            	pushw	x
1382  d1e6 1e10          	ldw	x,(OFST+12,sp)
1383  d1e8 ee26          	ldw	x,(38,x)
1384  d1ea cddd62        	call	_mqtt_pack_publish_request
1386  d1ed 5b0b          	addw	sp,#11
1387  d1ef 1f03          	ldw	(OFST-1,sp),x
1394  d1f1 2bcb          	jrmi	LC002
1397  d1f3 260d          	jrne	L106
1400  d1f5 1e05          	ldw	x,(OFST+1,sp)
1401  d1f7 90ae8010      	ldw	y,#32784
1402  d1fb ef0a          	ldw	(10,x),y
1405  d1fd ae8010        	ldw	x,#32784
1407  d200 20c3          	jra	L45
1408  d202               L106:
1411  d202 89            	pushw	x
1412  d203 1e07          	ldw	x,(OFST+3,sp)
1413  d205 1c0022        	addw	x,#34
1414  d208 cde19f        	call	_mqtt_mq_register
1416  d20b 5b02          	addw	sp,#2
1417  d20d 1f03          	ldw	(OFST-1,sp),x
1419                     ; 298     msg->control_type = MQTT_CONTROL_PUBLISH;
1422  d20f a603          	ld	a,#3
1423  d211 e709          	ld	(9,x),a
1424                     ; 299     msg->packet_id = packet_id;
1426  d213 1601          	ldw	y,(OFST-3,sp)
1427  d215 ef0a          	ldw	(10,x),y
1428                     ; 301     return MQTT_OK;
1430  d217 ae0001        	ldw	x,#1
1432  d21a 20a9          	jra	L45
1498                     ; 305 int16_t __mqtt_puback(struct mqtt_client *client, uint16_t packet_id) {
1499                     .text:	section	.text,new
1500  d21c               ___mqtt_puback:
1502  d21c 89            	pushw	x
1503  d21d 89            	pushw	x
1504       00000002      OFST:	set	2
1507                     ; 310     MQTT_CLIENT_TRY_PACK(
1509  d21e e60a          	ld	a,(10,x)
1510  d220 2a04          	jrpl	L546
1513  d222 ee0a          	ldw	x,(10,x)
1515  d224 201e          	jra	L07
1516  d226               L546:
1519  d226 1e07          	ldw	x,(OFST+5,sp)
1520  d228 89            	pushw	x
1521  d229 4b04          	push	#4
1522  d22b 1e06          	ldw	x,(OFST+4,sp)
1523  d22d ee28          	ldw	x,(40,x)
1524  d22f 89            	pushw	x
1525  d230 1e08          	ldw	x,(OFST+6,sp)
1526  d232 ee26          	ldw	x,(38,x)
1527  d234 cddefe        	call	_mqtt_pack_pubxxx_request
1529  d237 5b05          	addw	sp,#5
1530  d239 1f01          	ldw	(OFST-1,sp),x
1534  d23b 2a0a          	jrpl	L746
1539  d23d               LC003:
1541  d23d 1e03          	ldw	x,(OFST+1,sp)
1542  d23f 1601          	ldw	y,(OFST-1,sp)
1543  d241 ef0a          	ldw	(10,x),y
1545  d243 93            	ldw	x,y
1547  d244               L07:
1549  d244 5b04          	addw	sp,#4
1550  d246 81            	ret	
1551  d247               L746:
1554  d247 262e          	jrne	L156
1557  d249 1e03          	ldw	x,(OFST+1,sp)
1558  d24b 1c0022        	addw	x,#34
1559  d24e cde206        	call	_mqtt_mq_clean
1563  d251 1e07          	ldw	x,(OFST+5,sp)
1564  d253 89            	pushw	x
1565  d254 4b04          	push	#4
1566  d256 1e06          	ldw	x,(OFST+4,sp)
1567  d258 ee28          	ldw	x,(40,x)
1568  d25a 89            	pushw	x
1569  d25b 1e08          	ldw	x,(OFST+6,sp)
1570  d25d ee26          	ldw	x,(38,x)
1571  d25f cddefe        	call	_mqtt_pack_pubxxx_request
1573  d262 5b05          	addw	sp,#5
1574  d264 1f01          	ldw	(OFST-1,sp),x
1581  d266 2bd5          	jrmi	LC003
1584  d268 260d          	jrne	L156
1587  d26a 1e03          	ldw	x,(OFST+1,sp)
1588  d26c 90ae8010      	ldw	y,#32784
1589  d270 ef0a          	ldw	(10,x),y
1592  d272 ae8010        	ldw	x,#32784
1594  d275 20cd          	jra	L07
1595  d277               L156:
1598  d277 89            	pushw	x
1599  d278 1e05          	ldw	x,(OFST+3,sp)
1600  d27a 1c0022        	addw	x,#34
1601  d27d cde19f        	call	_mqtt_mq_register
1603  d280 5b02          	addw	sp,#2
1604  d282 1f01          	ldw	(OFST-1,sp),x
1606                     ; 321     msg->control_type = MQTT_CONTROL_PUBACK;
1609  d284 a604          	ld	a,#4
1610  d286 e709          	ld	(9,x),a
1611                     ; 322     msg->packet_id = packet_id;
1613  d288 1607          	ldw	y,(OFST+5,sp)
1614  d28a ef0a          	ldw	(10,x),y
1615                     ; 324     return MQTT_OK;
1617  d28c ae0001        	ldw	x,#1
1619  d28f 20b3          	jra	L07
1685                     ; 328 int16_t __mqtt_pubrec(struct mqtt_client *client, uint16_t packet_id)
1685                     ; 329 {
1686                     .text:	section	.text,new
1687  d291               ___mqtt_pubrec:
1689  d291 89            	pushw	x
1690  d292 89            	pushw	x
1691       00000002      OFST:	set	2
1694                     ; 334     MQTT_CLIENT_TRY_PACK(
1696  d293 e60a          	ld	a,(10,x)
1697  d295 2a04          	jrpl	L517
1700  d297 ee0a          	ldw	x,(10,x)
1702  d299 201e          	jra	L401
1703  d29b               L517:
1706  d29b 1e07          	ldw	x,(OFST+5,sp)
1707  d29d 89            	pushw	x
1708  d29e 4b05          	push	#5
1709  d2a0 1e06          	ldw	x,(OFST+4,sp)
1710  d2a2 ee28          	ldw	x,(40,x)
1711  d2a4 89            	pushw	x
1712  d2a5 1e08          	ldw	x,(OFST+6,sp)
1713  d2a7 ee26          	ldw	x,(38,x)
1714  d2a9 cddefe        	call	_mqtt_pack_pubxxx_request
1716  d2ac 5b05          	addw	sp,#5
1717  d2ae 1f01          	ldw	(OFST-1,sp),x
1721  d2b0 2a0a          	jrpl	L717
1726  d2b2               LC004:
1728  d2b2 1e03          	ldw	x,(OFST+1,sp)
1729  d2b4 1601          	ldw	y,(OFST-1,sp)
1730  d2b6 ef0a          	ldw	(10,x),y
1732  d2b8 93            	ldw	x,y
1734  d2b9               L401:
1736  d2b9 5b04          	addw	sp,#4
1737  d2bb 81            	ret	
1738  d2bc               L717:
1741  d2bc 262e          	jrne	L127
1744  d2be 1e03          	ldw	x,(OFST+1,sp)
1745  d2c0 1c0022        	addw	x,#34
1746  d2c3 cde206        	call	_mqtt_mq_clean
1750  d2c6 1e07          	ldw	x,(OFST+5,sp)
1751  d2c8 89            	pushw	x
1752  d2c9 4b05          	push	#5
1753  d2cb 1e06          	ldw	x,(OFST+4,sp)
1754  d2cd ee28          	ldw	x,(40,x)
1755  d2cf 89            	pushw	x
1756  d2d0 1e08          	ldw	x,(OFST+6,sp)
1757  d2d2 ee26          	ldw	x,(38,x)
1758  d2d4 cddefe        	call	_mqtt_pack_pubxxx_request
1760  d2d7 5b05          	addw	sp,#5
1761  d2d9 1f01          	ldw	(OFST-1,sp),x
1768  d2db 2bd5          	jrmi	LC004
1771  d2dd 260d          	jrne	L127
1774  d2df 1e03          	ldw	x,(OFST+1,sp)
1775  d2e1 90ae8010      	ldw	y,#32784
1776  d2e5 ef0a          	ldw	(10,x),y
1779  d2e7 ae8010        	ldw	x,#32784
1781  d2ea 20cd          	jra	L401
1782  d2ec               L127:
1785  d2ec 89            	pushw	x
1786  d2ed 1e05          	ldw	x,(OFST+3,sp)
1787  d2ef 1c0022        	addw	x,#34
1788  d2f2 cde19f        	call	_mqtt_mq_register
1790  d2f5 5b02          	addw	sp,#2
1791  d2f7 1f01          	ldw	(OFST-1,sp),x
1793                     ; 345     msg->control_type = MQTT_CONTROL_PUBREC;
1796  d2f9 a605          	ld	a,#5
1797  d2fb e709          	ld	(9,x),a
1798                     ; 346     msg->packet_id = packet_id;
1800  d2fd 1607          	ldw	y,(OFST+5,sp)
1801  d2ff ef0a          	ldw	(10,x),y
1802                     ; 348     return MQTT_OK;
1804  d301 ae0001        	ldw	x,#1
1806  d304 20b3          	jra	L401
1872                     ; 352 int16_t __mqtt_pubrel(struct mqtt_client *client, uint16_t packet_id)
1872                     ; 353 {
1873                     .text:	section	.text,new
1874  d306               ___mqtt_pubrel:
1876  d306 89            	pushw	x
1877  d307 89            	pushw	x
1878       00000002      OFST:	set	2
1881                     ; 358     MQTT_CLIENT_TRY_PACK(
1883  d308 e60a          	ld	a,(10,x)
1884  d30a 2a04          	jrpl	L567
1887  d30c ee0a          	ldw	x,(10,x)
1889  d30e 201e          	jra	L021
1890  d310               L567:
1893  d310 1e07          	ldw	x,(OFST+5,sp)
1894  d312 89            	pushw	x
1895  d313 4b06          	push	#6
1896  d315 1e06          	ldw	x,(OFST+4,sp)
1897  d317 ee28          	ldw	x,(40,x)
1898  d319 89            	pushw	x
1899  d31a 1e08          	ldw	x,(OFST+6,sp)
1900  d31c ee26          	ldw	x,(38,x)
1901  d31e cddefe        	call	_mqtt_pack_pubxxx_request
1903  d321 5b05          	addw	sp,#5
1904  d323 1f01          	ldw	(OFST-1,sp),x
1908  d325 2a0a          	jrpl	L767
1913  d327               LC005:
1915  d327 1e03          	ldw	x,(OFST+1,sp)
1916  d329 1601          	ldw	y,(OFST-1,sp)
1917  d32b ef0a          	ldw	(10,x),y
1919  d32d 93            	ldw	x,y
1921  d32e               L021:
1923  d32e 5b04          	addw	sp,#4
1924  d330 81            	ret	
1925  d331               L767:
1928  d331 262e          	jrne	L177
1931  d333 1e03          	ldw	x,(OFST+1,sp)
1932  d335 1c0022        	addw	x,#34
1933  d338 cde206        	call	_mqtt_mq_clean
1937  d33b 1e07          	ldw	x,(OFST+5,sp)
1938  d33d 89            	pushw	x
1939  d33e 4b06          	push	#6
1940  d340 1e06          	ldw	x,(OFST+4,sp)
1941  d342 ee28          	ldw	x,(40,x)
1942  d344 89            	pushw	x
1943  d345 1e08          	ldw	x,(OFST+6,sp)
1944  d347 ee26          	ldw	x,(38,x)
1945  d349 cddefe        	call	_mqtt_pack_pubxxx_request
1947  d34c 5b05          	addw	sp,#5
1948  d34e 1f01          	ldw	(OFST-1,sp),x
1955  d350 2bd5          	jrmi	LC005
1958  d352 260d          	jrne	L177
1961  d354 1e03          	ldw	x,(OFST+1,sp)
1962  d356 90ae8010      	ldw	y,#32784
1963  d35a ef0a          	ldw	(10,x),y
1966  d35c ae8010        	ldw	x,#32784
1968  d35f 20cd          	jra	L021
1969  d361               L177:
1972  d361 89            	pushw	x
1973  d362 1e05          	ldw	x,(OFST+3,sp)
1974  d364 1c0022        	addw	x,#34
1975  d367 cde19f        	call	_mqtt_mq_register
1977  d36a 5b02          	addw	sp,#2
1978  d36c 1f01          	ldw	(OFST-1,sp),x
1980                     ; 369     msg->control_type = MQTT_CONTROL_PUBREL;
1983  d36e a606          	ld	a,#6
1984  d370 e709          	ld	(9,x),a
1985                     ; 370     msg->packet_id = packet_id;
1987  d372 1607          	ldw	y,(OFST+5,sp)
1988  d374 ef0a          	ldw	(10,x),y
1989                     ; 372     return MQTT_OK;
1991  d376 ae0001        	ldw	x,#1
1993  d379 20b3          	jra	L021
2059                     ; 376 int16_t __mqtt_pubcomp(struct mqtt_client *client, uint16_t packet_id)
2059                     ; 377 {
2060                     .text:	section	.text,new
2061  d37b               ___mqtt_pubcomp:
2063  d37b 89            	pushw	x
2064  d37c 89            	pushw	x
2065       00000002      OFST:	set	2
2068                     ; 382     MQTT_CLIENT_TRY_PACK(
2070  d37d e60a          	ld	a,(10,x)
2071  d37f 2a04          	jrpl	L5301
2074  d381 ee0a          	ldw	x,(10,x)
2076  d383 201e          	jra	L431
2077  d385               L5301:
2080  d385 1e07          	ldw	x,(OFST+5,sp)
2081  d387 89            	pushw	x
2082  d388 4b07          	push	#7
2083  d38a 1e06          	ldw	x,(OFST+4,sp)
2084  d38c ee28          	ldw	x,(40,x)
2085  d38e 89            	pushw	x
2086  d38f 1e08          	ldw	x,(OFST+6,sp)
2087  d391 ee26          	ldw	x,(38,x)
2088  d393 cddefe        	call	_mqtt_pack_pubxxx_request
2090  d396 5b05          	addw	sp,#5
2091  d398 1f01          	ldw	(OFST-1,sp),x
2095  d39a 2a0a          	jrpl	L7301
2100  d39c               LC006:
2102  d39c 1e03          	ldw	x,(OFST+1,sp)
2103  d39e 1601          	ldw	y,(OFST-1,sp)
2104  d3a0 ef0a          	ldw	(10,x),y
2106  d3a2 93            	ldw	x,y
2108  d3a3               L431:
2110  d3a3 5b04          	addw	sp,#4
2111  d3a5 81            	ret	
2112  d3a6               L7301:
2115  d3a6 262e          	jrne	L1401
2118  d3a8 1e03          	ldw	x,(OFST+1,sp)
2119  d3aa 1c0022        	addw	x,#34
2120  d3ad cde206        	call	_mqtt_mq_clean
2124  d3b0 1e07          	ldw	x,(OFST+5,sp)
2125  d3b2 89            	pushw	x
2126  d3b3 4b07          	push	#7
2127  d3b5 1e06          	ldw	x,(OFST+4,sp)
2128  d3b7 ee28          	ldw	x,(40,x)
2129  d3b9 89            	pushw	x
2130  d3ba 1e08          	ldw	x,(OFST+6,sp)
2131  d3bc ee26          	ldw	x,(38,x)
2132  d3be cddefe        	call	_mqtt_pack_pubxxx_request
2134  d3c1 5b05          	addw	sp,#5
2135  d3c3 1f01          	ldw	(OFST-1,sp),x
2142  d3c5 2bd5          	jrmi	LC006
2145  d3c7 260d          	jrne	L1401
2148  d3c9 1e03          	ldw	x,(OFST+1,sp)
2149  d3cb 90ae8010      	ldw	y,#32784
2150  d3cf ef0a          	ldw	(10,x),y
2153  d3d1 ae8010        	ldw	x,#32784
2155  d3d4 20cd          	jra	L431
2156  d3d6               L1401:
2159  d3d6 89            	pushw	x
2160  d3d7 1e05          	ldw	x,(OFST+3,sp)
2161  d3d9 1c0022        	addw	x,#34
2162  d3dc cde19f        	call	_mqtt_mq_register
2164  d3df 5b02          	addw	sp,#2
2165  d3e1 1f01          	ldw	(OFST-1,sp),x
2167                     ; 393     msg->control_type = MQTT_CONTROL_PUBCOMP;
2170  d3e3 a607          	ld	a,#7
2171  d3e5 e709          	ld	(9,x),a
2172                     ; 394     msg->packet_id = packet_id;
2174  d3e7 1607          	ldw	y,(OFST+5,sp)
2175  d3e9 ef0a          	ldw	(10,x),y
2176                     ; 396     return MQTT_OK;
2178  d3eb ae0001        	ldw	x,#1
2180  d3ee 20b3          	jra	L431
2264                     ; 400 int16_t mqtt_subscribe(struct mqtt_client *client,
2264                     ; 401                        const char* topic_name,
2264                     ; 402                        int16_t max_qos_level)
2264                     ; 403 {
2265                     .text:	section	.text,new
2266  d3f0               _mqtt_subscribe:
2268  d3f0 89            	pushw	x
2269  d3f1 5204          	subw	sp,#4
2270       00000004      OFST:	set	4
2273                     ; 407     packet_id = __mqtt_next_pid(client);
2275  d3f3 cdd02f        	call	___mqtt_next_pid
2277  d3f6 1f01          	ldw	(OFST-3,sp),x
2279                     ; 410     MQTT_CLIENT_TRY_PACK(
2281  d3f8 1e05          	ldw	x,(OFST+1,sp)
2282  d3fa e60a          	ld	a,(10,x)
2283  d3fc 2a04          	jrpl	L3111
2286  d3fe ee0a          	ldw	x,(10,x)
2288  d400 2024          	jra	L251
2289  d402               L3111:
2292  d402 5f            	clrw	x
2293  d403 89            	pushw	x
2294  d404 1e0d          	ldw	x,(OFST+9,sp)
2295  d406 89            	pushw	x
2296  d407 1e0d          	ldw	x,(OFST+9,sp)
2297  d409 89            	pushw	x
2298  d40a 1e07          	ldw	x,(OFST+3,sp)
2299  d40c 89            	pushw	x
2300  d40d 1e0d          	ldw	x,(OFST+9,sp)
2301  d40f ee28          	ldw	x,(40,x)
2302  d411 89            	pushw	x
2303  d412 1e0f          	ldw	x,(OFST+11,sp)
2304  d414 ee26          	ldw	x,(38,x)
2305  d416 cde00a        	call	_mqtt_pack_subscribe_request
2307  d419 5b0a          	addw	sp,#10
2308  d41b 1f03          	ldw	(OFST-1,sp),x
2312  d41d 2a0a          	jrpl	L5111
2317  d41f               LC007:
2319  d41f 1e05          	ldw	x,(OFST+1,sp)
2320  d421 1603          	ldw	y,(OFST-1,sp)
2321  d423 ef0a          	ldw	(10,x),y
2323  d425 93            	ldw	x,y
2325  d426               L251:
2327  d426 5b06          	addw	sp,#6
2328  d428 81            	ret	
2329  d429               L5111:
2332  d429 2634          	jrne	L7111
2335  d42b 1e05          	ldw	x,(OFST+1,sp)
2336  d42d 1c0022        	addw	x,#34
2337  d430 cde206        	call	_mqtt_mq_clean
2341  d433 5f            	clrw	x
2342  d434 89            	pushw	x
2343  d435 1e0d          	ldw	x,(OFST+9,sp)
2344  d437 89            	pushw	x
2345  d438 1e0d          	ldw	x,(OFST+9,sp)
2346  d43a 89            	pushw	x
2347  d43b 1e07          	ldw	x,(OFST+3,sp)
2348  d43d 89            	pushw	x
2349  d43e 1e0d          	ldw	x,(OFST+9,sp)
2350  d440 ee28          	ldw	x,(40,x)
2351  d442 89            	pushw	x
2352  d443 1e0f          	ldw	x,(OFST+11,sp)
2353  d445 ee26          	ldw	x,(38,x)
2354  d447 cde00a        	call	_mqtt_pack_subscribe_request
2356  d44a 5b0a          	addw	sp,#10
2357  d44c 1f03          	ldw	(OFST-1,sp),x
2364  d44e 2bcf          	jrmi	LC007
2367  d450 260d          	jrne	L7111
2370  d452 1e05          	ldw	x,(OFST+1,sp)
2371  d454 90ae8010      	ldw	y,#32784
2372  d458 ef0a          	ldw	(10,x),y
2375  d45a ae8010        	ldw	x,#32784
2377  d45d 20c7          	jra	L251
2378  d45f               L7111:
2381  d45f 89            	pushw	x
2382  d460 1e07          	ldw	x,(OFST+3,sp)
2383  d462 1c0022        	addw	x,#34
2384  d465 cde19f        	call	_mqtt_mq_register
2386  d468 5b02          	addw	sp,#2
2387  d46a 1f03          	ldw	(OFST-1,sp),x
2389                     ; 423     msg->control_type = MQTT_CONTROL_SUBSCRIBE;
2392  d46c a608          	ld	a,#8
2393  d46e e709          	ld	(9,x),a
2394                     ; 424     msg->packet_id = packet_id;
2396  d470 1601          	ldw	y,(OFST-3,sp)
2397  d472 ef0a          	ldw	(10,x),y
2398                     ; 425     return MQTT_OK;
2400  d474 ae0001        	ldw	x,#1
2402  d477 20ad          	jra	L251
2479                     ; 429 int16_t mqtt_unsubscribe(struct mqtt_client *client,
2479                     ; 430                          const char* topic_name)
2479                     ; 431 {
2480                     .text:	section	.text,new
2481                     _mqtt_unsubscribe:
2483                     	pushw	x
2484                     	subw	sp,#4
2485       00000004      OFST:	set	4
2488                     ; 432     uint16_t packet_id = __mqtt_next_pid(client);
2490                     	call	___mqtt_next_pid
2492                     	ldw	(OFST-3,sp),x
2494                     ; 437     MQTT_CLIENT_TRY_PACK(
2496                     	ldw	x,(OFST+1,sp)
2497                     	ld	a,(10,x)
2498                     	jrpl	L7611
2501                     	ldw	x,(10,x)
2503                     	jra	L071
2504                     L7611:
2507                     	clrw	x
2508                     	pushw	x
2509                     	ldw	x,(OFST+7,sp)
2510                     	pushw	x
2511                     	ldw	x,(OFST+1,sp)
2512                     	pushw	x
2513                     	ldw	x,(OFST+7,sp)
2514                     	ldw	x,(40,x)
2515                     	pushw	x
2516                     	ldw	x,(OFST+9,sp)
2517                     	ldw	x,(38,x)
2518                     	call	_mqtt_pack_unsubscribe_request
2520                     	addw	sp,#8
2521                     	ldw	(OFST-1,sp),x
2525                     	jrpl	L1711
2530                     LC008:
2532                     	ldw	x,(OFST+1,sp)
2533                     	ldw	y,(OFST-1,sp)
2534                     	ldw	(10,x),y
2536                     	ldw	x,y
2538                     L071:
2540                     	addw	sp,#6
2541                     	ret	
2542                     L1711:
2545                     	jrne	L3711
2548                     	ldw	x,(OFST+1,sp)
2549                     	addw	x,#34
2550                     	call	_mqtt_mq_clean
2554                     	clrw	x
2555                     	pushw	x
2556                     	ldw	x,(OFST+7,sp)
2557                     	pushw	x
2558                     	ldw	x,(OFST+1,sp)
2559                     	pushw	x
2560                     	ldw	x,(OFST+7,sp)
2561                     	ldw	x,(40,x)
2562                     	pushw	x
2563                     	ldw	x,(OFST+9,sp)
2564                     	ldw	x,(38,x)
2565                     	call	_mqtt_pack_unsubscribe_request
2567                     	addw	sp,#8
2568                     	ldw	(OFST-1,sp),x
2575                     	jrmi	LC008
2578                     	jrne	L3711
2581                     	ldw	x,(OFST+1,sp)
2582                     	ldw	y,#32784
2583                     	ldw	(10,x),y
2586                     	ldw	x,#32784
2588                     	jra	L071
2589                     L3711:
2592                     	pushw	x
2593                     	ldw	x,(OFST+3,sp)
2594                     	addw	x,#34
2595                     	call	_mqtt_mq_register
2597                     	addw	sp,#2
2598                     	ldw	(OFST-1,sp),x
2600                     ; 449     msg->control_type = MQTT_CONTROL_UNSUBSCRIBE;
2603                     	ld	a,#10
2604                     	ld	(9,x),a
2605                     ; 450     msg->packet_id = packet_id;
2607                     	ldw	y,(OFST-3,sp)
2608                     	ldw	(10,x),y
2609                     ; 452     return MQTT_OK;
2611                     	ldw	x,#1
2613                     	jra	L071
2658                     ; 456 int16_t mqtt_ping(struct mqtt_client *client)
2658                     ; 457 {
2659                     .text:	section	.text,new
2660                     _mqtt_ping:
2662                     	pushw	x
2663       00000002      OFST:	set	2
2666                     ; 459     rv = __mqtt_ping(client);
2668                     	call	___mqtt_ping
2671                     ; 460     return rv;
2675                     	addw	sp,#2
2676                     	ret	
2735                     ; 464 int16_t __mqtt_ping(struct mqtt_client *client) 
2735                     ; 465 {
2736                     .text:	section	.text,new
2737  d479               ___mqtt_ping:
2739  d479 89            	pushw	x
2740  d47a 89            	pushw	x
2741       00000002      OFST:	set	2
2744                     ; 470     MQTT_CLIENT_TRY_PACK(
2746  d47b e60a          	ld	a,(10,x)
2747  d47d 2a04          	jrpl	L7521
2750  d47f ee0a          	ldw	x,(10,x)
2752  d481 2017          	jra	L012
2753  d483               L7521:
2756  d483 ee28          	ldw	x,(40,x)
2757  d485 89            	pushw	x
2758  d486 1e05          	ldw	x,(OFST+3,sp)
2759  d488 ee26          	ldw	x,(38,x)
2760  d48a cddd42        	call	_mqtt_pack_ping_request
2762  d48d 5b02          	addw	sp,#2
2763  d48f 1f01          	ldw	(OFST-1,sp),x
2767  d491 2a0a          	jrpl	L1621
2772  d493               LC009:
2774  d493 1e03          	ldw	x,(OFST+1,sp)
2775  d495 1601          	ldw	y,(OFST-1,sp)
2776  d497 ef0a          	ldw	(10,x),y
2778  d499 93            	ldw	x,y
2780  d49a               L012:
2782  d49a 5b04          	addw	sp,#4
2783  d49c 81            	ret	
2784  d49d               L1621:
2787  d49d 2629          	jrne	L3621
2790  d49f 1e03          	ldw	x,(OFST+1,sp)
2791  d4a1 1c0022        	addw	x,#34
2792  d4a4 cde206        	call	_mqtt_mq_clean
2796  d4a7 1e03          	ldw	x,(OFST+1,sp)
2797  d4a9 ee28          	ldw	x,(40,x)
2798  d4ab 89            	pushw	x
2799  d4ac 1e05          	ldw	x,(OFST+3,sp)
2800  d4ae ee26          	ldw	x,(38,x)
2801  d4b0 cddd42        	call	_mqtt_pack_ping_request
2803  d4b3 5b02          	addw	sp,#2
2804  d4b5 1f01          	ldw	(OFST-1,sp),x
2811  d4b7 2bda          	jrmi	LC009
2814  d4b9 260d          	jrne	L3621
2817  d4bb 1e03          	ldw	x,(OFST+1,sp)
2818  d4bd 90ae8010      	ldw	y,#32784
2819  d4c1 ef0a          	ldw	(10,x),y
2822  d4c3 ae8010        	ldw	x,#32784
2824  d4c6 20d2          	jra	L012
2825  d4c8               L3621:
2828  d4c8 89            	pushw	x
2829  d4c9 1e05          	ldw	x,(OFST+3,sp)
2830  d4cb 1c0022        	addw	x,#34
2831  d4ce cde19f        	call	_mqtt_mq_register
2833  d4d1 5b02          	addw	sp,#2
2835                     ; 479     msg->control_type = MQTT_CONTROL_PINGREQ;
2838  d4d3 a60c          	ld	a,#12
2839  d4d5 e709          	ld	(9,x),a
2840                     ; 481     return MQTT_OK;
2842  d4d7 ae0001        	ldw	x,#1
2844  d4da 20be          	jra	L012
2903                     ; 485 int16_t mqtt_disconnect(struct mqtt_client *client) 
2903                     ; 486 {
2904                     .text:	section	.text,new
2905  d4dc               _mqtt_disconnect:
2907  d4dc 89            	pushw	x
2908  d4dd 89            	pushw	x
2909       00000002      OFST:	set	2
2912                     ; 491     MQTT_CLIENT_TRY_PACK(
2914  d4de e60a          	ld	a,(10,x)
2915  d4e0 2a04          	jrpl	L5231
2918  d4e2 ee0a          	ldw	x,(10,x)
2920  d4e4 2017          	jra	L422
2921  d4e6               L5231:
2924  d4e6 ee28          	ldw	x,(40,x)
2925  d4e8 89            	pushw	x
2926  d4e9 1e05          	ldw	x,(OFST+3,sp)
2927  d4eb ee26          	ldw	x,(38,x)
2928  d4ed cddd22        	call	_mqtt_pack_disconnect
2930  d4f0 5b02          	addw	sp,#2
2931  d4f2 1f01          	ldw	(OFST-1,sp),x
2935  d4f4 2a0a          	jrpl	L7231
2940  d4f6               LC010:
2942  d4f6 1e03          	ldw	x,(OFST+1,sp)
2943  d4f8 1601          	ldw	y,(OFST-1,sp)
2944  d4fa ef0a          	ldw	(10,x),y
2946  d4fc 93            	ldw	x,y
2948  d4fd               L422:
2950  d4fd 5b04          	addw	sp,#4
2951  d4ff 81            	ret	
2952  d500               L7231:
2955  d500 2629          	jrne	L1331
2958  d502 1e03          	ldw	x,(OFST+1,sp)
2959  d504 1c0022        	addw	x,#34
2960  d507 cde206        	call	_mqtt_mq_clean
2964  d50a 1e03          	ldw	x,(OFST+1,sp)
2965  d50c ee28          	ldw	x,(40,x)
2966  d50e 89            	pushw	x
2967  d50f 1e05          	ldw	x,(OFST+3,sp)
2968  d511 ee26          	ldw	x,(38,x)
2969  d513 cddd22        	call	_mqtt_pack_disconnect
2971  d516 5b02          	addw	sp,#2
2972  d518 1f01          	ldw	(OFST-1,sp),x
2979  d51a 2bda          	jrmi	LC010
2982  d51c 260d          	jrne	L1331
2985  d51e 1e03          	ldw	x,(OFST+1,sp)
2986  d520 90ae8010      	ldw	y,#32784
2987  d524 ef0a          	ldw	(10,x),y
2990  d526 ae8010        	ldw	x,#32784
2992  d529 20d2          	jra	L422
2993  d52b               L1331:
2996  d52b 89            	pushw	x
2997  d52c 1e05          	ldw	x,(OFST+3,sp)
2998  d52e 1c0022        	addw	x,#34
2999  d531 cde19f        	call	_mqtt_mq_register
3001  d534 5b02          	addw	sp,#2
3003                     ; 500     msg->control_type = MQTT_CONTROL_DISCONNECT;
3006  d536 a60e          	ld	a,#14
3007  d538 e709          	ld	(9,x),a
3008                     ; 502     return MQTT_OK;
3010  d53a ae0001        	ldw	x,#1
3012  d53d 20be          	jra	L422
3120                     ; 506 int16_t __mqtt_send(struct mqtt_client *client) 
3120                     ; 507 {
3121                     .text:	section	.text,new
3122  d53f               ___mqtt_send:
3124  d53f 89            	pushw	x
3125  d540 520d          	subw	sp,#13
3126       0000000d      OFST:	set	13
3129                     ; 510     int16_t inflight_qos2 = 0;
3131  d542 5f            	clrw	x
3132  d543 1f07          	ldw	(OFST-6,sp),x
3134                     ; 511     int16_t i = 0;
3136  d545 1f0b          	ldw	(OFST-2,sp),x
3138                     ; 513     if (client->error < 0 && client->error != MQTT_ERROR_SEND_BUFFER_IS_FULL) {
3140  d547 1e0e          	ldw	x,(OFST+1,sp)
3141  d549 6d0a          	tnz	(10,x)
3142  d54b 2a10          	jrpl	L1241
3144  d54d 9093          	ldw	y,x
3145  d54f 90ee0a        	ldw	y,(10,y)
3146  d552 90a38010      	cpw	y,#32784
3147  d556 2705          	jreq	L1241
3148                     ; 514       return client->error;
3150  d558 ee0a          	ldw	x,(10,x)
3152  d55a ccd622        	jra	L432
3153  d55d               L1241:
3154                     ; 518     len = mqtt_mq_length(&client->mq);
3156  d55d ee24          	ldw	x,(36,x)
3157  d55f 160e          	ldw	y,(OFST+1,sp)
3158  d561 01            	rrwa	x,a
3159  d562 90e02b        	sub	a,(43,y)
3160  d565 01            	rrwa	x,a
3161  d566 90e22a        	sbc	a,(42,y)
3162  d569 01            	rrwa	x,a
3163  d56a a60c          	ld	a,#12
3164  d56c cdfb0c        	call	c_sdivx
3166  d56f 1f09          	ldw	(OFST-4,sp),x
3169  d571 ccd70d        	jra	L7241
3170  d574               L3241:
3171                     ; 520         struct mqtt_queued_message *msg = mqtt_mq_get(&client->mq, i);
3173  d574 a60c          	ld	a,#12
3174  d576 cdf70d        	call	c_bmulx
3176  d579 1f01          	ldw	(OFST-12,sp),x
3178  d57b 1e0e          	ldw	x,(OFST+1,sp)
3179  d57d ee24          	ldw	x,(36,x)
3180  d57f 1d000c        	subw	x,#12
3181  d582 72f001        	subw	x,(OFST-12,sp)
3182  d585 1f05          	ldw	(OFST-8,sp),x
3184                     ; 521         int16_t resend = 0;
3186  d587 5f            	clrw	x
3187  d588 1f03          	ldw	(OFST-10,sp),x
3189                     ; 522         if (msg->state == MQTT_QUEUED_UNSENT) {
3191  d58a 1e05          	ldw	x,(OFST-8,sp)
3192  d58c e604          	ld	a,(4,x)
3193  d58e 2607          	jrne	L3341
3194                     ; 524             resend = 1;
3196  d590 ae0001        	ldw	x,#1
3197  d593 1f03          	ldw	(OFST-10,sp),x
3200  d595 202f          	jra	L5341
3201  d597               L3341:
3202                     ; 526 	else if (msg->state == MQTT_QUEUED_AWAITING_ACK) {
3204  d597 4a            	dec	a
3205  d598 262c          	jrne	L5341
3206                     ; 528             if (second_counter > msg->time_sent + client->response_timeout) {
3208  d59a 1e0e          	ldw	x,(OFST+1,sp)
3209  d59c ee0c          	ldw	x,(12,x)
3210  d59e cdf8d9        	call	c_itolx
3212  d5a1 1e05          	ldw	x,(OFST-8,sp)
3213  d5a3 1c0005        	addw	x,#5
3214  d5a6 cdf90b        	call	c_ladd
3216  d5a9 ae029c        	ldw	x,#_second_counter
3217  d5ac cdf923        	call	c_lcmp
3219  d5af 2415          	jruge	L5341
3220                     ; 529                 resend = 1;
3222  d5b1 ae0001        	ldw	x,#1
3223  d5b4 1f03          	ldw	(OFST-10,sp),x
3225                     ; 530                 client->number_of_timeouts += 1;
3227  d5b6 1e0e          	ldw	x,(OFST+1,sp)
3228  d5b8 9093          	ldw	y,x
3229  d5ba ee0e          	ldw	x,(14,x)
3230  d5bc 5c            	incw	x
3231  d5bd 90ef0e        	ldw	(14,y),x
3232                     ; 531                 client->send_offset = 0;
3234  d5c0 1e0e          	ldw	x,(OFST+1,sp)
3235  d5c2 905f          	clrw	y
3236  d5c4 ef04          	ldw	(4,x),y
3237  d5c6               L5341:
3238                     ; 536         if (msg->control_type == MQTT_CONTROL_PUBLISH
3238                     ; 537             && (msg->state == MQTT_QUEUED_UNSENT || msg->state == MQTT_QUEUED_AWAITING_ACK)) 
3240  d5c6 1e05          	ldw	x,(OFST-8,sp)
3241  d5c8 e609          	ld	a,(9,x)
3242  d5ca a103          	cp	a,#3
3243  d5cc 261f          	jrne	L3441
3245  d5ce e604          	ld	a,(4,x)
3246  d5d0 2704          	jreq	L5441
3248  d5d2 a101          	cp	a,#1
3249  d5d4 2617          	jrne	L3441
3250  d5d6               L5441:
3251                     ; 539             inspected = (uint8_t)(0x03 & ((msg->start[0]) >> 1)); // qos
3253  d5d6 fe            	ldw	x,(x)
3254  d5d7 f6            	ld	a,(x)
3255  d5d8 a406          	and	a,#6
3256  d5da 44            	srl	a
3257  d5db 6b0d          	ld	(OFST+0,sp),a
3259                     ; 540             if (inspected == 2) {
3261  d5dd a102          	cp	a,#2
3262  d5df 260c          	jrne	L3441
3263                     ; 541                 if (inflight_qos2) resend = 0;
3265  d5e1 1e07          	ldw	x,(OFST-6,sp)
3266  d5e3 2703          	jreq	L1541
3269  d5e5 5f            	clrw	x
3270  d5e6 1f03          	ldw	(OFST-10,sp),x
3272  d5e8               L1541:
3273                     ; 542                 inflight_qos2 = 1;
3275  d5e8 ae0001        	ldw	x,#1
3276  d5eb 1f07          	ldw	(OFST-6,sp),x
3278  d5ed               L3441:
3279                     ; 547         if (!resend) continue;
3281  d5ed 1e03          	ldw	x,(OFST-10,sp)
3282  d5ef 2603ccd6e4    	jreq	L5241
3285                     ; 551           int16_t tmp = mqtt_pal_sendall(msg->start + client->send_offset, msg->size - client->send_offset);
3287  d5f4 1e05          	ldw	x,(OFST-8,sp)
3288  d5f6 160e          	ldw	y,(OFST+1,sp)
3289  d5f8 ee02          	ldw	x,(2,x)
3290  d5fa 01            	rrwa	x,a
3291  d5fb 90e005        	sub	a,(5,y)
3292  d5fe 01            	rrwa	x,a
3293  d5ff 90e204        	sbc	a,(4,y)
3294  d602 01            	rrwa	x,a
3295  d603 89            	pushw	x
3296  d604 1e10          	ldw	x,(OFST+3,sp)
3297  d606 1607          	ldw	y,(OFST-6,sp)
3298  d608 ee04          	ldw	x,(4,x)
3299  d60a 01            	rrwa	x,a
3300  d60b 90eb01        	add	a,(1,y)
3301  d60e 01            	rrwa	x,a
3302  d60f 90f9          	adc	a,(y)
3303  d611 01            	rrwa	x,a
3304  d612 cde4b8        	call	_mqtt_pal_sendall
3306  d615 5b02          	addw	sp,#2
3307  d617 1f03          	ldw	(OFST-10,sp),x
3309                     ; 554           if (tmp < 0) {
3311  d619 2a0a          	jrpl	L5541
3312                     ; 555             client->error = tmp;
3314  d61b 1e0e          	ldw	x,(OFST+1,sp)
3315  d61d 1603          	ldw	y,(OFST-10,sp)
3316                     ; 556             return tmp;
3318  d61f               LC014:
3319  d61f ef0a          	ldw	(10,x),y
3321  d621 93            	ldw	x,y
3323  d622               L432:
3325  d622 5b0f          	addw	sp,#15
3326  d624 81            	ret	
3327  d625               L5541:
3328                     ; 559             client->send_offset += tmp;
3330  d625 1e0e          	ldw	x,(OFST+1,sp)
3331  d627 9093          	ldw	y,x
3332  d629 ee04          	ldw	x,(4,x)
3333  d62b 72fb03        	addw	x,(OFST-10,sp)
3334  d62e 90ef04        	ldw	(4,y),x
3335                     ; 560             if(client->send_offset < msg->size) {
3337  d631 1e0e          	ldw	x,(OFST+1,sp)
3338  d633 1605          	ldw	y,(OFST-8,sp)
3339  d635 ee04          	ldw	x,(4,x)
3340  d637 90e302        	cpw	x,(2,y)
3341  d63a 2441          	jruge	L1641
3342                     ; 562               break;
3343  d63c               L1341:
3344                     ; 629         uint32_t keep_alive_timeout = client->time_of_last_send + (uint32_t)((float)(client->keep_alive) * 0.75);
3346  d63c 1e0e          	ldw	x,(OFST+1,sp)
3347  d63e ee02          	ldw	x,(2,x)
3348  d640 cdfb31        	call	c_uitof
3350  d643 ae9f0d        	ldw	x,#L5051
3351  d646 cdf781        	call	c_fmul
3353  d649 cdf85c        	call	c_ftol
3355  d64c 1e0e          	ldw	x,(OFST+1,sp)
3356  d64e 1c0006        	addw	x,#6
3357  d651 cdf90b        	call	c_ladd
3359  d654 96            	ldw	x,sp
3360  d655 1c0003        	addw	x,#OFST-10
3361  d658 cdfaf4        	call	c_rtol
3364                     ; 630         if (second_counter > keep_alive_timeout) {
3366  d65b ae029c        	ldw	x,#_second_counter
3367  d65e cdf98e        	call	c_ltor
3369  d661 96            	ldw	x,sp
3370  d662 1c0003        	addw	x,#OFST-10
3371  d665 cdf923        	call	c_lcmp
3373  d668 2203ccd719    	jrule	L1151
3374                     ; 631           int16_t rv = __mqtt_ping(client);
3376  d66d 1e0e          	ldw	x,(OFST+1,sp)
3377  d66f cdd479        	call	___mqtt_ping
3379  d672 1f09          	ldw	(OFST-4,sp),x
3381                     ; 632           if (rv != MQTT_OK) {
3383  d674 5a            	decw	x
3384  d675 27f3          	jreq	L1151
3385                     ; 633             client->error = rv;
3387  d677 1e0e          	ldw	x,(OFST+1,sp)
3388  d679 1609          	ldw	y,(OFST-4,sp)
3389                     ; 634             return rv;
3391  d67b 20a2          	jp	LC014
3392  d67d               L1641:
3393                     ; 567               client->send_offset = 0;
3395  d67d 1e0e          	ldw	x,(OFST+1,sp)
3396  d67f 905f          	clrw	y
3397  d681 ef04          	ldw	(4,x),y
3398                     ; 573         client->time_of_last_send = second_counter;
3400  d683 c6029f        	ld	a,_second_counter+3
3401  d686 e709          	ld	(9,x),a
3402  d688 c6029e        	ld	a,_second_counter+2
3403  d68b e708          	ld	(8,x),a
3404  d68d c6029d        	ld	a,_second_counter+1
3405  d690 e707          	ld	(7,x),a
3406  d692 c6029c        	ld	a,_second_counter
3407  d695 e706          	ld	(6,x),a
3408                     ; 574         msg->time_sent = client->time_of_last_send;
3410  d697 1605          	ldw	y,(OFST-8,sp)
3411  d699 e609          	ld	a,(9,x)
3412  d69b 90e708        	ld	(8,y),a
3413  d69e e608          	ld	a,(8,x)
3414  d6a0 90e707        	ld	(7,y),a
3415  d6a3 e607          	ld	a,(7,x)
3416  d6a5 90e706        	ld	(6,y),a
3417  d6a8 e606          	ld	a,(6,x)
3418                     ; 593         switch (msg->control_type) {
3420  d6aa 93            	ldw	x,y
3421  d6ab 90e705        	ld	(5,y),a
3422  d6ae e609          	ld	a,(9,x)
3424                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3425  d6b0 4a            	dec	a
3426  d6b1 2756          	jreq	L7431
3427  d6b3 a002          	sub	a,#2
3428  d6b5 2734          	jreq	L5431
3429  d6b7 4a            	dec	a
3430  d6b8 2726          	jreq	L3431
3431  d6ba 4a            	dec	a
3432  d6bb 274c          	jreq	L7431
3433  d6bd 4a            	dec	a
3434  d6be 2749          	jreq	L7431
3435  d6c0 4a            	dec	a
3436  d6c1 271d          	jreq	L3431
3437  d6c3 4a            	dec	a
3438  d6c4 2743          	jreq	L7431
3439  d6c6 a002          	sub	a,#2
3440  d6c8 273f          	jreq	L7431
3441  d6ca a002          	sub	a,#2
3442  d6cc 273b          	jreq	L7431
3443  d6ce a002          	sub	a,#2
3444  d6d0 270e          	jreq	L3431
3445                     ; 621         default:
3445                     ; 622             client->error = MQTT_ERROR_MALFORMED_REQUEST;
3447  d6d2 1e0e          	ldw	x,(OFST+1,sp)
3448  d6d4 90ae8012      	ldw	y,#32786
3449  d6d8 ef0a          	ldw	(10,x),y
3450                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3452  d6da ae8012        	ldw	x,#32786
3454  d6dd ccd622        	jra	L432
3455  d6e0               L3431:
3456                     ; 594         case MQTT_CONTROL_PUBACK:
3456                     ; 595         case MQTT_CONTROL_PUBCOMP:
3456                     ; 596         case MQTT_CONTROL_DISCONNECT:
3456                     ; 597             msg->state = MQTT_QUEUED_COMPLETE;
3458  d6e0 a602          	ld	a,#2
3459  d6e2               LC011:
3460  d6e2 e704          	ld	(4,x),a
3461                     ; 598             break;
3462  d6e4               L5241:
3463                     ; 519     for(; i < len; ++i) {
3465  d6e4 1e0b          	ldw	x,(OFST-2,sp)
3466  d6e6 5c            	incw	x
3467  d6e7 1f0b          	ldw	(OFST-2,sp),x
3469  d6e9 2022          	jra	L7241
3470  d6eb               L5431:
3471                     ; 599         case MQTT_CONTROL_PUBLISH:
3471                     ; 600             inspected = (uint8_t)(( MQTT_PUBLISH_QOS_MASK & (msg->start[0]) ) >> 1); /* qos */
3473  d6eb fe            	ldw	x,(x)
3474  d6ec f6            	ld	a,(x)
3475  d6ed a406          	and	a,#6
3476  d6ef 44            	srl	a
3477  d6f0 6b0d          	ld	(OFST+0,sp),a
3479                     ; 601             if (inspected == 0) {
3481  d6f2 2604          	jrne	L1741
3482                     ; 602                 msg->state = MQTT_QUEUED_COMPLETE;
3484  d6f4 1e05          	ldw	x,(OFST-8,sp)
3486  d6f6 20e8          	jp	L3431
3487  d6f8               L1741:
3488                     ; 604 	    else if (inspected == 1) {
3490  d6f8 4a            	dec	a
3491  d6f9 260c          	jrne	L5741
3492                     ; 605                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3494  d6fb 1e05          	ldw	x,(OFST-8,sp)
3495  d6fd 4c            	inc	a
3496  d6fe e704          	ld	(4,x),a
3497                     ; 607                 msg->start[0] |= MQTT_PUBLISH_DUP;
3499  d700 fe            	ldw	x,(x)
3500  d701 f6            	ld	a,(x)
3501  d702 aa08          	or	a,#8
3502  d704 f7            	ld	(x),a
3504  d705 20dd          	jra	L5241
3505  d707               L5741:
3506                     ; 610                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3508  d707 1e05          	ldw	x,(OFST-8,sp)
3509  d709               L7431:
3510                     ; 613         case MQTT_CONTROL_CONNECT:
3510                     ; 614         case MQTT_CONTROL_PUBREC:
3510                     ; 615         case MQTT_CONTROL_PUBREL:
3510                     ; 616         case MQTT_CONTROL_SUBSCRIBE:
3510                     ; 617         case MQTT_CONTROL_UNSUBSCRIBE:
3510                     ; 618         case MQTT_CONTROL_PINGREQ:
3510                     ; 619             msg->state = MQTT_QUEUED_AWAITING_ACK;
3512  d709 a601          	ld	a,#1
3513                     ; 620             break;
3515  d70b 20d5          	jp	LC011
3516  d70d               L7241:
3517                     ; 519     for(; i < len; ++i) {
3519  d70d 1e0b          	ldw	x,(OFST-2,sp)
3520  d70f 1309          	cpw	x,(OFST-4,sp)
3521  d711 2e03ccd574    	jrslt	L3241
3522  d716 ccd63c        	jra	L1341
3523  d719               L1151:
3524                     ; 639     return MQTT_OK;
3526  d719 ae0001        	ldw	x,#1
3528  d71c ccd622        	jra	L432
4080                     ; 643 int16_t __mqtt_recv(struct mqtt_client *client)
4080                     ; 644 {
4081                     .text:	section	.text,new
4082  d71f               ___mqtt_recv:
4084  d71f 89            	pushw	x
4085  d720 5220          	subw	sp,#32
4086       00000020      OFST:	set	32
4089                     ; 646     int16_t mqtt_recv_ret = MQTT_OK;
4091  d722 ae0001        	ldw	x,#1
4092  d725 1f07          	ldw	(OFST-25,sp),x
4094                     ; 648     struct mqtt_queued_message *msg = NULL;
4096                     ; 656     rv = mqtt_pal_recvall(client->recv_buffer.curr, client->recv_buffer.curr_sz);
4098  d727 1e21          	ldw	x,(OFST+1,sp)
4099  d729 ee20          	ldw	x,(32,x)
4100  d72b 89            	pushw	x
4101  d72c 1e23          	ldw	x,(OFST+3,sp)
4102  d72e ee1e          	ldw	x,(30,x)
4103  d730 cde4cf        	call	_mqtt_pal_recvall
4105  d733 5b02          	addw	sp,#2
4106  d735 1f1f          	ldw	(OFST-1,sp),x
4108                     ; 658     client->recv_buffer.curr += rv;
4110  d737 1e21          	ldw	x,(OFST+1,sp)
4111  d739 9093          	ldw	y,x
4112  d73b ee1e          	ldw	x,(30,x)
4113  d73d 72fb1f        	addw	x,(OFST-1,sp)
4114  d740 90ef1e        	ldw	(30,y),x
4115                     ; 659     client->recv_buffer.curr_sz -= rv;
4117  d743 1e21          	ldw	x,(OFST+1,sp)
4118  d745 9093          	ldw	y,x
4119  d747 ee20          	ldw	x,(32,x)
4120  d749 72f01f        	subw	x,(OFST-1,sp)
4121  d74c 90ef20        	ldw	(32,y),x
4122                     ; 662     consumed = mqtt_unpack_response(&response, client->recv_buffer.mem_start, client->recv_buffer.curr - client->recv_buffer.mem_start);
4124  d74f 1e21          	ldw	x,(OFST+1,sp)
4125  d751 1621          	ldw	y,(OFST+1,sp)
4126  d753 ee1e          	ldw	x,(30,x)
4127  d755 01            	rrwa	x,a
4128  d756 90e01b        	sub	a,(27,y)
4129  d759 01            	rrwa	x,a
4130  d75a 90e21a        	sbc	a,(26,y)
4131  d75d 01            	rrwa	x,a
4132  d75e 89            	pushw	x
4133  d75f 1e23          	ldw	x,(OFST+3,sp)
4134  d761 ee1a          	ldw	x,(26,x)
4135  d763 89            	pushw	x
4136  d764 96            	ldw	x,sp
4137  d765 1c000d        	addw	x,#OFST-19
4138  d768 cde390        	call	_mqtt_unpack_response
4140  d76b 5b04          	addw	sp,#4
4141  d76d 1f05          	ldw	(OFST-27,sp),x
4143                     ; 664     if (consumed < 0) {
4145  d76f 2a09          	jrpl	L7502
4146                     ; 665         client->error = consumed;
4148  d771 1e21          	ldw	x,(OFST+1,sp)
4149  d773 1605          	ldw	y,(OFST-27,sp)
4150  d775 ef0a          	ldw	(10,x),y
4151                     ; 666         return consumed;
4153  d777 93            	ldw	x,y
4155  d778 2013          	jra	L403
4156  d77a               L7502:
4157                     ; 668     else if (consumed == 0) {
4159  d77a 2619          	jrne	L1602
4160                     ; 674         if (client->recv_buffer.curr_sz == 0) {
4162  d77c 1e21          	ldw	x,(OFST+1,sp)
4163  d77e e621          	ld	a,(33,x)
4164  d780 ea20          	or	a,(32,x)
4165  d782 260c          	jrne	L5602
4166                     ; 675             client->error = MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4168  d784 90ae8013      	ldw	y,#32787
4169  d788 ef0a          	ldw	(10,x),y
4170                     ; 676             return MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4172  d78a ae8013        	ldw	x,#32787
4174  d78d               L403:
4176  d78d 5b22          	addw	sp,#34
4177  d78f 81            	ret	
4178  d790               L5602:
4179                     ; 680         return MQTT_OK;
4181  d790 ae0001        	ldw	x,#1
4183  d793 20f8          	jra	L403
4184  d795               L1602:
4185                     ; 712     switch (response.fixed_header.control_type) {
4187  d795 7b09          	ld	a,(OFST-23,sp)
4189                     ; 861             break;
4190  d797 a002          	sub	a,#2
4191  d799 2741          	jreq	L5151
4192  d79b 4a            	dec	a
4193  d79c 2603ccd81e    	jreq	L7151
4194  d7a1 4a            	dec	a
4195  d7a2 2603ccd883    	jreq	L1251
4196  d7a7 4a            	dec	a
4197  d7a8 2603ccd8a9    	jreq	L3251
4198  d7ad 4a            	dec	a
4199  d7ae 2603ccd8ee    	jreq	L5251
4200  d7b3 4a            	dec	a
4201  d7b4 2603ccd91f    	jreq	L7251
4202  d7b9 a002          	sub	a,#2
4203  d7bb 2603ccd929    	jreq	L1351
4204  d7c0 a002          	sub	a,#2
4205  d7c2 2603ccd95b    	jreq	L3351
4206  d7c7 a002          	sub	a,#2
4207  d7c9 2603ccd965    	jreq	L5351
4208                     ; 858         default:
4208                     ; 859             client->error = MQTT_ERROR_MALFORMED_RESPONSE;
4210  d7ce 1e21          	ldw	x,(OFST+1,sp)
4211  d7d0 90ae800c      	ldw	y,#32780
4212  d7d4 ef0a          	ldw	(10,x),y
4213                     ; 860             mqtt_recv_ret = MQTT_ERROR_MALFORMED_RESPONSE;
4215  d7d6 ae800c        	ldw	x,#32780
4216                     ; 861             break;
4218  d7d9 ccd957        	jp	LC016
4219  d7dc               L5151:
4220                     ; 713         case MQTT_CONTROL_CONNACK:
4220                     ; 714 
4220                     ; 715             // release associated CONNECT
4220                     ; 716             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_CONNECT, NULL);
4222  d7dc 5f            	clrw	x
4223  d7dd 89            	pushw	x
4224  d7de 4b01          	push	#1
4225  d7e0 1e24          	ldw	x,(OFST+4,sp)
4226  d7e2 1c0022        	addw	x,#34
4227  d7e5 cde354        	call	_mqtt_mq_find
4229  d7e8 5b03          	addw	sp,#3
4230  d7ea 1f1f          	ldw	(OFST-1,sp),x
4232                     ; 717             if (msg == NULL) {
4234                     ; 718                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4235                     ; 719                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4236                     ; 720                 break;
4238  d7ec 2603ccd89b    	jreq	LC017
4239                     ; 722             msg->state = MQTT_QUEUED_COMPLETE;
4241  d7f1 a602          	ld	a,#2
4242  d7f3 e704          	ld	(4,x),a
4243                     ; 724             if (response.decoded.connack.return_code != MQTT_CONNACK_ACCEPTED) {
4245  d7f5 0d13          	tnz	(OFST-13,sp)
4246  d7f7 2603ccd97b    	jreq	L1702
4247                     ; 725                 if (response.decoded.connack.return_code == MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED) {
4249  d7fc 7b13          	ld	a,(OFST-13,sp)
4250  d7fe a102          	cp	a,#2
4251  d800 260e          	jrne	L7702
4252                     ; 726                     client->error = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4254  d802 1e21          	ldw	x,(OFST+1,sp)
4255  d804 90ae8005      	ldw	y,#32773
4256  d808 ef0a          	ldw	(10,x),y
4257                     ; 727                     mqtt_recv_ret = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4259  d80a ae8005        	ldw	x,#32773
4261  d80d ccd957        	jp	LC016
4262  d810               L7702:
4263                     ; 730                     client->error = MQTT_ERROR_CONNECTION_REFUSED;
4265  d810 1e21          	ldw	x,(OFST+1,sp)
4266  d812 90ae8016      	ldw	y,#32790
4267  d816 ef0a          	ldw	(10,x),y
4268                     ; 731                     mqtt_recv_ret = MQTT_ERROR_CONNECTION_REFUSED;
4270  d818 ae8016        	ldw	x,#32790
4271  d81b ccd957        	jp	LC016
4272  d81e               L7151:
4273                     ; 736         case MQTT_CONTROL_PUBLISH:
4273                     ; 737             // stage response, none if qos==0, PUBACK if qos==1, PUBREC if qos==2
4273                     ; 738             if (response.decoded.publish.qos_level == 1) {
4275  d81e 7b13          	ld	a,(OFST-13,sp)
4276  d820 a101          	cp	a,#1
4277  d822 2619          	jrne	L3012
4278                     ; 739                 rv = __mqtt_puback(client, response.decoded.publish.packet_id);
4280  d824 1e19          	ldw	x,(OFST-7,sp)
4281  d826 89            	pushw	x
4282  d827 1e23          	ldw	x,(OFST+3,sp)
4283  d829 cdd21c        	call	___mqtt_puback
4285  d82c 5b02          	addw	sp,#2
4286  d82e 1f1f          	ldw	(OFST-1,sp),x
4288                     ; 740                 if (rv != MQTT_OK) {
4290  d830 5a            	decw	x
4291  d831 273b          	jreq	L7012
4292                     ; 741                     client->error = rv;
4294  d833 1e21          	ldw	x,(OFST+1,sp)
4295  d835 161f          	ldw	y,(OFST-1,sp)
4296  d837 ef0a          	ldw	(10,x),y
4297                     ; 742                     mqtt_recv_ret = rv;
4299  d839 93            	ldw	x,y
4300                     ; 743                     break;
4302  d83a ccd957        	jp	LC016
4303  d83d               L3012:
4304                     ; 746             else if (response.decoded.publish.qos_level == 2) {
4306  d83d a102          	cp	a,#2
4307  d83f 262d          	jrne	L7012
4308                     ; 748                 if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.publish.packet_id) != NULL) {
4310  d841 96            	ldw	x,sp
4311  d842 1c0019        	addw	x,#OFST-7
4312  d845 89            	pushw	x
4313  d846 4b05          	push	#5
4314  d848 1e24          	ldw	x,(OFST+4,sp)
4315  d84a 1c0022        	addw	x,#34
4316  d84d cde354        	call	_mqtt_mq_find
4318  d850 5b03          	addw	sp,#3
4319  d852 5d            	tnzw	x
4320  d853 26a4          	jrne	L1702
4321                     ; 749                     break;
4323                     ; 752                 rv = __mqtt_pubrec(client, response.decoded.publish.packet_id);
4325  d855 1e19          	ldw	x,(OFST-7,sp)
4326  d857 89            	pushw	x
4327  d858 1e23          	ldw	x,(OFST+3,sp)
4328  d85a cdd291        	call	___mqtt_pubrec
4330  d85d 5b02          	addw	sp,#2
4331  d85f 1f1f          	ldw	(OFST-1,sp),x
4333                     ; 753                 if (rv != MQTT_OK) {
4335  d861 5a            	decw	x
4336  d862 270a          	jreq	L7012
4337                     ; 754                     client->error = rv;
4339  d864 1e21          	ldw	x,(OFST+1,sp)
4340  d866 161f          	ldw	y,(OFST-1,sp)
4341  d868 ef0a          	ldw	(10,x),y
4342                     ; 755                     mqtt_recv_ret = rv;
4344  d86a 93            	ldw	x,y
4345                     ; 756                     break;
4347  d86b ccd957        	jp	LC016
4348  d86e               L7012:
4349                     ; 761             client->publish_response_callback(&client->publish_response_callback_state, &response.decoded.publish);
4351  d86e 96            	ldw	x,sp
4352  d86f 1c0012        	addw	x,#OFST-14
4353  d872 89            	pushw	x
4354  d873 1e23          	ldw	x,(OFST+3,sp)
4355  d875 1623          	ldw	y,(OFST+3,sp)
4356  d877 1c0012        	addw	x,#18
4357  d87a 90ee10        	ldw	y,(16,y)
4358  d87d 90fd          	call	(y)
4360  d87f 85            	popw	x
4361                     ; 762             break;
4363  d880 ccd97b        	jra	L1702
4364  d883               L1251:
4365                     ; 763         case MQTT_CONTROL_PUBACK:
4365                     ; 764             // release associated PUBLISH
4365                     ; 765             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.puback.packet_id);
4367  d883 96            	ldw	x,sp
4368  d884 1c0012        	addw	x,#OFST-14
4369  d887 89            	pushw	x
4370  d888 4b03          	push	#3
4372                     ; 766             if (msg == NULL) {
4374  d88a               LC018:
4375  d88a 1e24          	ldw	x,(OFST+4,sp)
4376  d88c 1c0022        	addw	x,#34
4377  d88f cde354        	call	_mqtt_mq_find
4378  d892 5b03          	addw	sp,#3
4379  d894 1f1f          	ldw	(OFST-1,sp),x
4383  d896 2703ccd977    	jrne	L3412
4384                     ; 767                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4386                     ; 768                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4388  d89b               LC017:
4396  d89b 1e21          	ldw	x,(OFST+1,sp)
4397  d89d 90ae8014      	ldw	y,#32788
4398  d8a1 ef0a          	ldw	(10,x),y
4406  d8a3 ae8014        	ldw	x,#32788
4407                     ; 769                 break;
4409  d8a6 ccd957        	jp	LC016
4410                     ; 771             msg->state = MQTT_QUEUED_COMPLETE;
4411                     ; 772             break;
4413  d8a9               L3251:
4414                     ; 773         case MQTT_CONTROL_PUBREC:
4414                     ; 774             // check if this is a duplicate
4414                     ; 775             if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubrec.packet_id) != NULL) {
4416  d8a9 96            	ldw	x,sp
4417  d8aa 1c0012        	addw	x,#OFST-14
4418  d8ad 89            	pushw	x
4419  d8ae 4b06          	push	#6
4420  d8b0 1e24          	ldw	x,(OFST+4,sp)
4421  d8b2 1c0022        	addw	x,#34
4422  d8b5 cde354        	call	_mqtt_mq_find
4424  d8b8 5b03          	addw	sp,#3
4425  d8ba 5d            	tnzw	x
4426  d8bb 26c3          	jrne	L1702
4427                     ; 776                 break;
4429                     ; 779             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.pubrec.packet_id);
4431  d8bd 96            	ldw	x,sp
4432  d8be 1c0012        	addw	x,#OFST-14
4433  d8c1 89            	pushw	x
4434  d8c2 4b03          	push	#3
4435  d8c4 1e24          	ldw	x,(OFST+4,sp)
4436  d8c6 1c0022        	addw	x,#34
4437  d8c9 cde354        	call	_mqtt_mq_find
4439  d8cc 5b03          	addw	sp,#3
4440  d8ce 1f1f          	ldw	(OFST-1,sp),x
4442                     ; 780             if (msg == NULL) {
4444                     ; 781                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4445                     ; 782                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4446                     ; 783                 break;
4448  d8d0 27c9          	jreq	LC017
4449                     ; 785             msg->state = MQTT_QUEUED_COMPLETE;
4451  d8d2 a602          	ld	a,#2
4452  d8d4 e704          	ld	(4,x),a
4453                     ; 787             rv = __mqtt_pubrel(client, response.decoded.pubrec.packet_id);
4455  d8d6 1e12          	ldw	x,(OFST-14,sp)
4456  d8d8 89            	pushw	x
4457  d8d9 1e23          	ldw	x,(OFST+3,sp)
4458  d8db cdd306        	call	___mqtt_pubrel
4460  d8de 5b02          	addw	sp,#2
4461  d8e0 1f1f          	ldw	(OFST-1,sp),x
4463                     ; 788             if (rv != MQTT_OK) {
4465  d8e2 5a            	decw	x
4466  d8e3 279b          	jreq	L1702
4467                     ; 789                 client->error = rv;
4469  d8e5 1e21          	ldw	x,(OFST+1,sp)
4470  d8e7 161f          	ldw	y,(OFST-1,sp)
4471  d8e9 ef0a          	ldw	(10,x),y
4472                     ; 790                 mqtt_recv_ret = rv;
4474  d8eb 93            	ldw	x,y
4475                     ; 791                 break;
4477  d8ec 2069          	jp	LC016
4478  d8ee               L5251:
4479                     ; 794         case MQTT_CONTROL_PUBREL:
4479                     ; 795             // release associated PUBREC
4479                     ; 796             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.pubrel.packet_id);
4481  d8ee 96            	ldw	x,sp
4482  d8ef 1c0012        	addw	x,#OFST-14
4483  d8f2 89            	pushw	x
4484  d8f3 4b05          	push	#5
4485  d8f5 1e24          	ldw	x,(OFST+4,sp)
4486  d8f7 1c0022        	addw	x,#34
4487  d8fa cde354        	call	_mqtt_mq_find
4489  d8fd 5b03          	addw	sp,#3
4490  d8ff 1f1f          	ldw	(OFST-1,sp),x
4492                     ; 797             if (msg == NULL) {
4494                     ; 798                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4495                     ; 799                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4496                     ; 800                 break;
4498  d901 2798          	jreq	LC017
4499                     ; 802             msg->state = MQTT_QUEUED_COMPLETE;
4501  d903 a602          	ld	a,#2
4502  d905 e704          	ld	(4,x),a
4503                     ; 804             rv = __mqtt_pubcomp(client, response.decoded.pubrec.packet_id);
4505  d907 1e12          	ldw	x,(OFST-14,sp)
4506  d909 89            	pushw	x
4507  d90a 1e23          	ldw	x,(OFST+3,sp)
4508  d90c cdd37b        	call	___mqtt_pubcomp
4510  d90f 5b02          	addw	sp,#2
4511  d911 1f1f          	ldw	(OFST-1,sp),x
4513                     ; 805             if (rv != MQTT_OK) {
4515  d913 5a            	decw	x
4516  d914 2765          	jreq	L1702
4517                     ; 806                 client->error = rv;
4519  d916 1e21          	ldw	x,(OFST+1,sp)
4520  d918 161f          	ldw	y,(OFST-1,sp)
4521  d91a ef0a          	ldw	(10,x),y
4522                     ; 807                 mqtt_recv_ret = rv;
4524  d91c 93            	ldw	x,y
4525                     ; 808                 break;
4527  d91d 2038          	jp	LC016
4528  d91f               L7251:
4529                     ; 811         case MQTT_CONTROL_PUBCOMP:
4529                     ; 812             // release associated PUBREL
4529                     ; 813             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubcomp.packet_id);
4531  d91f 96            	ldw	x,sp
4532  d920 1c0012        	addw	x,#OFST-14
4533  d923 89            	pushw	x
4534  d924 4b06          	push	#6
4536                     ; 814             if (msg == NULL) {
4537                     ; 815                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4538                     ; 816                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4539                     ; 817                 break;
4541  d926 ccd88a        	jp	LC018
4542                     ; 819             msg->state = MQTT_QUEUED_COMPLETE;
4543                     ; 820             break;
4545  d929               L1351:
4546                     ; 821         case MQTT_CONTROL_SUBACK:
4546                     ; 822             // release associated SUBSCRIBE
4546                     ; 823             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_SUBSCRIBE, &response.decoded.suback.packet_id);
4548  d929 96            	ldw	x,sp
4549  d92a 1c0012        	addw	x,#OFST-14
4550  d92d 89            	pushw	x
4551  d92e 4b08          	push	#8
4552  d930 1e24          	ldw	x,(OFST+4,sp)
4553  d932 1c0022        	addw	x,#34
4554  d935 cde354        	call	_mqtt_mq_find
4556  d938 5b03          	addw	sp,#3
4557  d93a 1f1f          	ldw	(OFST-1,sp),x
4559                     ; 824             if (msg == NULL) {
4561                     ; 825                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4562                     ; 826                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4563                     ; 827                 break;
4565  d93c 2603ccd89b    	jreq	LC017
4566                     ; 829             msg->state = MQTT_QUEUED_COMPLETE;
4568  d941 a602          	ld	a,#2
4569  d943 e704          	ld	(4,x),a
4570                     ; 832             if (response.decoded.suback.return_codes[0] == MQTT_SUBACK_FAILURE) {
4572  d945 1e14          	ldw	x,(OFST-12,sp)
4573  d947 f6            	ld	a,(x)
4574  d948 a180          	cp	a,#128
4575  d94a 262f          	jrne	L1702
4576                     ; 833                 client->error = MQTT_ERROR_SUBSCRIBE_FAILED;
4578  d94c 1e21          	ldw	x,(OFST+1,sp)
4579  d94e 90ae8017      	ldw	y,#32791
4580  d952 ef0a          	ldw	(10,x),y
4581                     ; 834                 mqtt_recv_ret = MQTT_ERROR_SUBSCRIBE_FAILED;
4583  d954 ae8017        	ldw	x,#32791
4584  d957               LC016:
4585  d957 1f07          	ldw	(OFST-25,sp),x
4587                     ; 835                 break;
4589  d959 2020          	jra	L1702
4590  d95b               L3351:
4591                     ; 838         case MQTT_CONTROL_UNSUBACK:
4591                     ; 839             // release associated UNSUBSCRIBE
4591                     ; 840             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_UNSUBSCRIBE, &response.decoded.unsuback.packet_id);
4593  d95b 96            	ldw	x,sp
4594  d95c 1c0012        	addw	x,#OFST-14
4595  d95f 89            	pushw	x
4596  d960 4b0a          	push	#10
4598                     ; 841             if (msg == NULL) {
4599                     ; 842                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4600                     ; 843                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4601                     ; 844                 break;
4603  d962 ccd88a        	jp	LC018
4604                     ; 846             msg->state = MQTT_QUEUED_COMPLETE;
4605                     ; 847             break;
4607  d965               L5351:
4608                     ; 848         case MQTT_CONTROL_PINGRESP:
4608                     ; 849             // release associated PINGREQ
4608                     ; 850             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PINGREQ, NULL);
4610  d965 5f            	clrw	x
4611  d966 89            	pushw	x
4612  d967 4b0c          	push	#12
4613  d969 1e24          	ldw	x,(OFST+4,sp)
4614  d96b 1c0022        	addw	x,#34
4615  d96e cde354        	call	_mqtt_mq_find
4617  d971 5b03          	addw	sp,#3
4618  d973 1f1f          	ldw	(OFST-1,sp),x
4620                     ; 851             if (msg == NULL) {
4622                     ; 852                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4623                     ; 853                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4624                     ; 854                 break;
4626  d975 27c7          	jreq	LC017
4627  d977               L3412:
4628                     ; 856             msg->state = MQTT_QUEUED_COMPLETE;
4633  d977 a602          	ld	a,#2
4634  d979 e704          	ld	(4,x),a
4635                     ; 857             break;
4637  d97b               L1702:
4638                     ; 890         void* dest = (unsigned char*)client->recv_buffer.mem_start;
4640  d97b 1e21          	ldw	x,(OFST+1,sp)
4641  d97d ee1a          	ldw	x,(26,x)
4642  d97f 1f01          	ldw	(OFST-31,sp),x
4644                     ; 891         void* src  = (unsigned char*)client->recv_buffer.mem_start + consumed;
4646  d981 1e21          	ldw	x,(OFST+1,sp)
4647  d983 ee1a          	ldw	x,(26,x)
4648  d985 72fb05        	addw	x,(OFST-27,sp)
4649  d988 1f03          	ldw	(OFST-29,sp),x
4651                     ; 892         uint16_t n = client->recv_buffer.curr - client->recv_buffer.mem_start - consumed;
4653  d98a 1e21          	ldw	x,(OFST+1,sp)
4654  d98c 1621          	ldw	y,(OFST+1,sp)
4655  d98e ee1e          	ldw	x,(30,x)
4656  d990 01            	rrwa	x,a
4657  d991 90e01b        	sub	a,(27,y)
4658  d994 01            	rrwa	x,a
4659  d995 90e21a        	sbc	a,(26,y)
4660  d998 01            	rrwa	x,a
4661  d999 72f005        	subw	x,(OFST-27,sp)
4662  d99c 1f1f          	ldw	(OFST-1,sp),x
4664                     ; 893         memmove(dest, src, n);
4666  d99e 89            	pushw	x
4667  d99f 1e05          	ldw	x,(OFST-27,sp)
4668  d9a1 89            	pushw	x
4669  d9a2 1e05          	ldw	x,(OFST-27,sp)
4670  d9a4 cdf69c        	call	_memmove
4672  d9a7 5b04          	addw	sp,#4
4673                     ; 894         client->recv_buffer.curr -= consumed;
4675  d9a9 1e21          	ldw	x,(OFST+1,sp)
4676  d9ab 9093          	ldw	y,x
4677  d9ad ee1e          	ldw	x,(30,x)
4678  d9af 72f005        	subw	x,(OFST-27,sp)
4679  d9b2 90ef1e        	ldw	(30,y),x
4680                     ; 895         client->recv_buffer.curr_sz += consumed;
4682  d9b5 1e21          	ldw	x,(OFST+1,sp)
4683  d9b7 9093          	ldw	y,x
4684  d9b9 ee20          	ldw	x,(32,x)
4685  d9bb 72fb05        	addw	x,(OFST-27,sp)
4686  d9be 90ef20        	ldw	(32,y),x
4687                     ; 904     return mqtt_recv_ret;
4689  d9c1 1e07          	ldw	x,(OFST-25,sp)
4691  d9c3 ccd78d        	jra	L403
4694                     .const:	section	.text
4695  9ecd               L5412_control_type_is_valid:
4696  9ecd 00            	dc.b	0
4697  9ece 01            	dc.b	1
4698  9ecf 01            	dc.b	1
4699  9ed0 01            	dc.b	1
4700  9ed1 01            	dc.b	1
4701  9ed2 01            	dc.b	1
4702  9ed3 01            	dc.b	1
4703  9ed4 01            	dc.b	1
4704  9ed5 01            	dc.b	1
4705  9ed6 01            	dc.b	1
4706  9ed7 01            	dc.b	1
4707  9ed8 01            	dc.b	1
4708  9ed9 01            	dc.b	1
4709  9eda 01            	dc.b	1
4710  9edb 01            	dc.b	1
4711  9edc 00            	dc.b	0
4712  9edd               L7412_required_flags:
4713  9edd 00            	dc.b	0
4714  9ede 00            	dc.b	0
4715  9edf 00            	dc.b	0
4716  9ee0 00            	dc.b	0
4717  9ee1 00            	dc.b	0
4718  9ee2 00            	dc.b	0
4719  9ee3 02            	dc.b	2
4720  9ee4 00            	dc.b	0
4721  9ee5 02            	dc.b	2
4722  9ee6 00            	dc.b	0
4723  9ee7 02            	dc.b	2
4724  9ee8 00            	dc.b	0
4725  9ee9 00            	dc.b	0
4726  9eea 00            	dc.b	0
4727  9eeb 00            	dc.b	0
4728  9eec 00            	dc.b	0
4729  9eed               L1512_mask_required_flags:
4730  9eed 00            	dc.b	0
4731  9eee 0f            	dc.b	15
4732  9eef 0f            	dc.b	15
4733  9ef0 00            	dc.b	0
4734  9ef1 0f            	dc.b	15
4735  9ef2 0f            	dc.b	15
4736  9ef3 0f            	dc.b	15
4737  9ef4 0f            	dc.b	15
4738  9ef5 0f            	dc.b	15
4739  9ef6 0f            	dc.b	15
4740  9ef7 0f            	dc.b	15
4741  9ef8 0f            	dc.b	15
4742  9ef9 0f            	dc.b	15
4743  9efa 0f            	dc.b	15
4744  9efb 0f            	dc.b	15
4745  9efc 00            	dc.b	0
4798                     ; 966 static int16_t mqtt_fixed_header_rule_violation(const struct mqtt_fixed_header *fixed_header)
4798                     ; 967 {
4799                     .text:	section	.text,new
4800  d9c6               L3512_mqtt_fixed_header_rule_violation:
4802  d9c6 89            	pushw	x
4803       00000002      OFST:	set	2
4806                     ; 972     control_type = fixed_header->control_type;
4808  d9c7 f6            	ld	a,(x)
4809  d9c8 6b02          	ld	(OFST+0,sp),a
4811                     ; 973     control_flags = fixed_header->control_flags;
4813  d9ca e604          	ld	a,(4,x)
4814  d9cc a40f          	and	a,#15
4815  d9ce 6b01          	ld	(OFST-1,sp),a
4817                     ; 976     if (control_type_is_valid[control_type] != 0x01) {
4819  d9d0 5f            	clrw	x
4820  d9d1 7b02          	ld	a,(OFST+0,sp)
4821  d9d3 97            	ld	xl,a
4822  d9d4 d69ecd        	ld	a,(L5412_control_type_is_valid,x)
4823  d9d7 4a            	dec	a
4824  d9d8 2705          	jreq	L1022
4825                     ; 977         return MQTT_ERROR_CONTROL_FORBIDDEN_TYPE;
4827  d9da ae8002        	ldw	x,#32770
4829  d9dd 2017          	jra	L013
4830  d9df               L1022:
4831                     ; 981     if(((control_flags ^ required_flags[control_type]) & mask_required_flags[control_type]) == 1) {
4833  d9df 7b02          	ld	a,(OFST+0,sp)
4834  d9e1 5f            	clrw	x
4835  d9e2 97            	ld	xl,a
4836  d9e3 905f          	clrw	y
4837  d9e5 9097          	ld	yl,a
4838  d9e7 90d69edd      	ld	a,(L7412_required_flags,y)
4839  d9eb 1801          	xor	a,(OFST-1,sp)
4840  d9ed d49eed        	and	a,(L1512_mask_required_flags,x)
4841  d9f0 4a            	dec	a
4842  d9f1 2606          	jrne	L3022
4843                     ; 982         return MQTT_ERROR_CONTROL_INVALID_FLAGS;
4845  d9f3 ae8003        	ldw	x,#32771
4847  d9f6               L013:
4849  d9f6 5b02          	addw	sp,#2
4850  d9f8 81            	ret	
4851  d9f9               L3022:
4852                     ; 985     return 0;
4854  d9f9 5f            	clrw	x
4856  d9fa 20fa          	jra	L013
4948                     ; 989 int16_t mqtt_unpack_fixed_header(struct mqtt_response *response, const uint8_t *buf, uint16_t bufsz)
4948                     ; 990 {
4949                     .text:	section	.text,new
4950  d9fc               _mqtt_unpack_fixed_header:
4952  d9fc 89            	pushw	x
4953  d9fd 520a          	subw	sp,#10
4954       0000000a      OFST:	set	10
4957                     ; 992     const uint8_t *start = buf;
4959  d9ff 1e0f          	ldw	x,(OFST+5,sp)
4960  da01 1f05          	ldw	(OFST-5,sp),x
4962                     ; 997     if (response == NULL || buf == NULL) {
4964  da03 1e0b          	ldw	x,(OFST+1,sp)
4965  da05 2704          	jreq	L3522
4967  da07 1e0f          	ldw	x,(OFST+5,sp)
4968  da09 2605          	jrne	L1522
4969  da0b               L3522:
4970                     ; 998       return MQTT_ERROR_NULLPTR;
4972  da0b ae8001        	ldw	x,#32769
4974  da0e 2009          	jra	L223
4975  da10               L1522:
4976                     ; 1000     fixed_header = &(response->fixed_header);
4978  da10 1e0b          	ldw	x,(OFST+1,sp)
4979  da12 1f07          	ldw	(OFST-3,sp),x
4981                     ; 1003     if (bufsz == 0) return 0;
4983  da14 1e11          	ldw	x,(OFST+7,sp)
4984  da16 2604          	jrne	L5522
4987  da18               LC019:
4990  da18 5f            	clrw	x
4992  da19               L223:
4994  da19 5b0c          	addw	sp,#12
4995  da1b 81            	ret	
4996  da1c               L5522:
4997                     ; 1006     fixed_header->control_type  = (uint8_t)(*buf >> 4);
4999  da1c 1e0f          	ldw	x,(OFST+5,sp)
5000  da1e f6            	ld	a,(x)
5001  da1f 4e            	swap	a
5002  da20 1e07          	ldw	x,(OFST-3,sp)
5003  da22 a40f          	and	a,#15
5004  da24 f7            	ld	(x),a
5005                     ; 1007     fixed_header->control_flags = (uint8_t)(*buf & 0x0F);
5007  da25 1e0f          	ldw	x,(OFST+5,sp)
5008  da27 f6            	ld	a,(x)
5009  da28 1e07          	ldw	x,(OFST-3,sp)
5010  da2a e804          	xor	a,(4,x)
5011  da2c a40f          	and	a,#15
5012  da2e e804          	xor	a,(4,x)
5013  da30 e704          	ld	(4,x),a
5014                     ; 1010     fixed_header->remaining_length = 0;
5016  da32 4f            	clr	a
5017  da33 e708          	ld	(8,x),a
5018  da35 e707          	ld	(7,x),a
5019  da37 e706          	ld	(6,x),a
5020  da39 e705          	ld	(5,x),a
5021                     ; 1012     lshift = 0;
5023  da3b 5f            	clrw	x
5024  da3c 1f09          	ldw	(OFST-1,sp),x
5026  da3e               L7522:
5027                     ; 1015         if(lshift == 28) {
5029  da3e 1e09          	ldw	x,(OFST-1,sp)
5030  da40 a3001c        	cpw	x,#28
5031  da43 2605          	jrne	L5622
5032                     ; 1016             return MQTT_ERROR_INVALID_REMAINING_LENGTH;
5034  da45 ae801a        	ldw	x,#32794
5036  da48 20cf          	jra	L223
5037  da4a               L5622:
5038                     ; 1020         --bufsz;
5040  da4a 1e11          	ldw	x,(OFST+7,sp)
5041  da4c 5a            	decw	x
5042  da4d 1f11          	ldw	(OFST+7,sp),x
5043                     ; 1021         ++buf;
5045  da4f 1e0f          	ldw	x,(OFST+5,sp)
5046  da51 5c            	incw	x
5047  da52 1f0f          	ldw	(OFST+5,sp),x
5048                     ; 1022         if (bufsz == 0) return 0;
5050  da54 1e11          	ldw	x,(OFST+7,sp)
5053  da56 27c0          	jreq	LC019
5054                     ; 1025         fixed_header->remaining_length += (*buf & 0x7F) << lshift;
5056  da58 160f          	ldw	y,(OFST+5,sp)
5057  da5a 1e07          	ldw	x,(OFST-3,sp)
5058  da5c 90f6          	ld	a,(y)
5059  da5e a47f          	and	a,#127
5060  da60 905f          	clrw	y
5061  da62 9097          	ld	yl,a
5062  da64 7b0a          	ld	a,(OFST+0,sp)
5063  da66 2705          	jreq	L413
5064  da68               L613:
5065  da68 9058          	sllw	y
5066  da6a 4a            	dec	a
5067  da6b 26fb          	jrne	L613
5068  da6d               L413:
5069  da6d cdf8e7        	call	c_itoly
5071  da70 1c0005        	addw	x,#5
5072  da73 cdf953        	call	c_lgadd
5074                     ; 1026         lshift += 7;
5076  da76 1e09          	ldw	x,(OFST-1,sp)
5077  da78 1c0007        	addw	x,#7
5078  da7b 1f09          	ldw	(OFST-1,sp),x
5080                     ; 1027     } while(*buf & 0x80); /* while continue bit is set */ 
5082  da7d 1e0f          	ldw	x,(OFST+5,sp)
5083  da7f f6            	ld	a,(x)
5084  da80 2bbc          	jrmi	L7522
5085                     ; 1030     --bufsz;
5087  da82 1e11          	ldw	x,(OFST+7,sp)
5088  da84 5a            	decw	x
5089  da85 1f11          	ldw	(OFST+7,sp),x
5090                     ; 1031     ++buf;
5092  da87 1e0f          	ldw	x,(OFST+5,sp)
5093  da89 5c            	incw	x
5094  da8a 1f0f          	ldw	(OFST+5,sp),x
5095                     ; 1034     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5097  da8c 1e07          	ldw	x,(OFST-3,sp)
5098  da8e cdd9c6        	call	L3512_mqtt_fixed_header_rule_violation
5100  da91 1f09          	ldw	(OFST-1,sp),x
5102                     ; 1035     if (errcode) return errcode;
5107  da93 2684          	jrne	L223
5108                     ; 1038     if (bufsz < fixed_header->remaining_length) return 0;
5110  da95 1e11          	ldw	x,(OFST+7,sp)
5111  da97 cdfb55        	call	c_uitolx
5113  da9a 96            	ldw	x,sp
5114  da9b 5c            	incw	x
5115  da9c cdfaf4        	call	c_rtol
5118  da9f 1e07          	ldw	x,(OFST-3,sp)
5119  daa1 1c0005        	addw	x,#5
5120  daa4 cdf98e        	call	c_ltor
5122  daa7 96            	ldw	x,sp
5123  daa8 5c            	incw	x
5124  daa9 cdf923        	call	c_lcmp
5128  daac 2303ccda18    	jrugt	LC019
5129                     ; 1041     return buf - start;
5131  dab1 1e0f          	ldw	x,(OFST+5,sp)
5132  dab3 72f005        	subw	x,(OFST-5,sp)
5134  dab6 ccda19        	jra	L223
5214                     	switch	.const
5215  9efd               L033:
5216  9efd 00000080      	dc.l	128
5217                     ; 1045 int16_t mqtt_pack_fixed_header(uint8_t *buf, uint16_t bufsz, const struct mqtt_fixed_header *fixed_header)
5217                     ; 1046 {
5218                     .text:	section	.text,new
5219  dab9               _mqtt_pack_fixed_header:
5221  dab9 89            	pushw	x
5222  daba 520c          	subw	sp,#12
5223       0000000c      OFST:	set	12
5226                     ; 1047     const uint8_t *start = buf;
5228  dabc 1f05          	ldw	(OFST-7,sp),x
5230                     ; 1052     if (fixed_header == NULL || buf == NULL) {
5232  dabe 1e13          	ldw	x,(OFST+7,sp)
5233  dac0 2704          	jreq	L5332
5235  dac2 1e0d          	ldw	x,(OFST+1,sp)
5236  dac4 2605          	jrne	L3332
5237  dac6               L5332:
5238                     ; 1053       return MQTT_ERROR_NULLPTR;
5240  dac6 ae8001        	ldw	x,#32769
5242  dac9 2009          	jra	L233
5243  dacb               L3332:
5244                     ; 1057     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5246  dacb 1e13          	ldw	x,(OFST+7,sp)
5247  dacd cdd9c6        	call	L3512_mqtt_fixed_header_rule_violation
5249  dad0 1f07          	ldw	(OFST-5,sp),x
5251                     ; 1058     if (errcode) return errcode;
5253  dad2 2703          	jreq	L7332
5257  dad4               L233:
5259  dad4 5b0e          	addw	sp,#14
5260  dad6 81            	ret	
5261  dad7               L7332:
5262                     ; 1061     if (bufsz == 0) return 0;
5264  dad7 1e11          	ldw	x,(OFST+5,sp)
5265  dad9 2603          	jrne	L1432
5268  dadb 5f            	clrw	x
5270  dadc 20f6          	jra	L233
5271  dade               L1432:
5272                     ; 1064     *buf =  (uint8_t)((fixed_header->control_type << 4) & 0xF0);
5274  dade 1e13          	ldw	x,(OFST+7,sp)
5275  dae0 f6            	ld	a,(x)
5276  dae1 97            	ld	xl,a
5277  dae2 a610          	ld	a,#16
5278  dae4 42            	mul	x,a
5279  dae5 9f            	ld	a,xl
5280  dae6 1e0d          	ldw	x,(OFST+1,sp)
5281  dae8 a4f0          	and	a,#240
5282  daea f7            	ld	(x),a
5283                     ; 1065     *buf |= (uint8_t)(fixed_header->control_flags & 0x0F);
5285  daeb 1613          	ldw	y,(OFST+7,sp)
5286  daed 90e604        	ld	a,(4,y)
5287  daf0 a40f          	and	a,#15
5288  daf2 fa            	or	a,(x)
5289  daf3 f7            	ld	(x),a
5290                     ; 1067     remaining_length = fixed_header->remaining_length;
5292  daf4 93            	ldw	x,y
5293  daf5 ee07          	ldw	x,(7,x)
5294  daf7 1f0b          	ldw	(OFST-1,sp),x
5295  daf9 93            	ldw	x,y
5296  dafa ee05          	ldw	x,(5,x)
5297  dafc 1f09          	ldw	(OFST-3,sp),x
5299  dafe               L3432:
5300                     ; 1075         --bufsz;
5302  dafe 1e11          	ldw	x,(OFST+5,sp)
5303  db00 5a            	decw	x
5304  db01 1f11          	ldw	(OFST+5,sp),x
5305                     ; 1076         ++buf;
5307  db03 1e0d          	ldw	x,(OFST+1,sp)
5308  db05 5c            	incw	x
5309  db06 1f0d          	ldw	(OFST+1,sp),x
5310                     ; 1077         if (bufsz == 0) return 0;
5312  db08 1e11          	ldw	x,(OFST+5,sp)
5313  db0a 2603          	jrne	L1532
5316  db0c 5f            	clrw	x
5318  db0d 20c5          	jra	L233
5319  db0f               L1532:
5320                     ; 1080         *buf  = (uint8_t)(remaining_length & 0x7F);
5322  db0f 7b0c          	ld	a,(OFST+0,sp)
5323  db11 1e0d          	ldw	x,(OFST+1,sp)
5324  db13 a47f          	and	a,#127
5325  db15 f7            	ld	(x),a
5326                     ; 1081         if(remaining_length > 127) *buf |= 0x80;
5328  db16 96            	ldw	x,sp
5329  db17 1c0009        	addw	x,#OFST-3
5330  db1a cdf98e        	call	c_ltor
5332  db1d ae9efd        	ldw	x,#L033
5333  db20 cdf923        	call	c_lcmp
5335  db23 2506          	jrult	L3532
5338  db25 1e0d          	ldw	x,(OFST+1,sp)
5339  db27 f6            	ld	a,(x)
5340  db28 aa80          	or	a,#128
5341  db2a f7            	ld	(x),a
5342  db2b               L3532:
5343                     ; 1082         remaining_length = remaining_length >> 7;
5345  db2b 96            	ldw	x,sp
5346  db2c 1c0009        	addw	x,#OFST-3
5347  db2f a607          	ld	a,#7
5348  db31 cdf980        	call	c_lgursh
5351                     ; 1083     } while(*buf & 0x80);
5353  db34 1e0d          	ldw	x,(OFST+1,sp)
5354  db36 f6            	ld	a,(x)
5355  db37 2bc5          	jrmi	L3432
5356                     ; 1086     --bufsz;
5358  db39 1e11          	ldw	x,(OFST+5,sp)
5359  db3b 5a            	decw	x
5360  db3c 1f11          	ldw	(OFST+5,sp),x
5361                     ; 1087     ++buf;
5363  db3e 1e0d          	ldw	x,(OFST+1,sp)
5364  db40 5c            	incw	x
5365  db41 1f0d          	ldw	(OFST+1,sp),x
5366                     ; 1090     if (bufsz < fixed_header->remaining_length) return 0;
5368  db43 1e11          	ldw	x,(OFST+5,sp)
5369  db45 cdfb55        	call	c_uitolx
5371  db48 96            	ldw	x,sp
5372  db49 5c            	incw	x
5373  db4a cdfaf4        	call	c_rtol
5376  db4d 1e13          	ldw	x,(OFST+7,sp)
5377  db4f 1c0005        	addw	x,#5
5378  db52 cdf98e        	call	c_ltor
5380  db55 96            	ldw	x,sp
5381  db56 5c            	incw	x
5382  db57 cdf923        	call	c_lcmp
5384  db5a 2304          	jrule	L5532
5387  db5c 5f            	clrw	x
5389  db5d ccdad4        	jra	L233
5390  db60               L5532:
5391                     ; 1093     return buf - start;
5393  db60 1e0d          	ldw	x,(OFST+1,sp)
5394  db62 72f005        	subw	x,(OFST-7,sp)
5396  db65 ccdad4        	jra	L233
5549                     ; 1098 int16_t mqtt_pack_connection_request(uint8_t* buf, uint16_t bufsz,
5549                     ; 1099                                      const char* client_id,
5549                     ; 1100                                      const char* will_topic,
5549                     ; 1101                                      const void* will_message,
5549                     ; 1102                                      uint16_t will_message_size,
5549                     ; 1103                                      const char* user_name,
5549                     ; 1104                                      const char* password,
5549                     ; 1105                                      uint8_t connect_flags,
5549                     ; 1106                                      uint16_t keep_alive)
5549                     ; 1107 { 
5550                     .text:	section	.text,new
5551  db68               _mqtt_pack_connection_request:
5553  db68 89            	pushw	x
5554  db69 520d          	subw	sp,#13
5555       0000000d      OFST:	set	13
5558                     ; 1110     const uint8_t *const start = buf;
5560  db6b 1f01          	ldw	(OFST-12,sp),x
5562                     ; 1114     fixed_header.control_type = MQTT_CONTROL_CONNECT;
5564  db6d a601          	ld	a,#1
5565  db6f 6b03          	ld	(OFST-10,sp),a
5567                     ; 1115     fixed_header.control_flags = 0x00;
5569  db71 7b07          	ld	a,(OFST-6,sp)
5570  db73 a4f0          	and	a,#240
5571  db75 6b07          	ld	(OFST-6,sp),a
5573                     ; 1118     connect_flags = (uint8_t)(connect_flags & ~MQTT_CONNECT_RESERVED);
5575  db77 7b20          	ld	a,(OFST+19,sp)
5576  db79 a4fe          	and	a,#254
5577  db7b 6b20          	ld	(OFST+19,sp),a
5578                     ; 1121     remaining_length = 10; /* size of variable header */
5580  db7d ae000a        	ldw	x,#10
5581  db80 1f0c          	ldw	(OFST-1,sp),x
5583                     ; 1133     remaining_length += __mqtt_packed_cstrlen(client_id);
5585  db82 1e14          	ldw	x,(OFST+7,sp)
5586  db84 cdf701        	call	_strlen
5588  db87 1c0002        	addw	x,#2
5589  db8a 72fb0c        	addw	x,(OFST-1,sp)
5590  db8d 1f0c          	ldw	(OFST-1,sp),x
5592                     ; 1163     connect_flags |= MQTT_CONNECT_WILL_FLAG;
5594  db8f 7b20          	ld	a,(OFST+19,sp)
5595                     ; 1164     connect_flags |= MQTT_CONNECT_WILL_RETAIN;
5597  db91 aa24          	or	a,#36
5598  db93 6b20          	ld	(OFST+19,sp),a
5599                     ; 1165     remaining_length += __mqtt_packed_cstrlen(will_topic);
5601  db95 1e16          	ldw	x,(OFST+9,sp)
5602  db97 cdf701        	call	_strlen
5604  db9a 1c0002        	addw	x,#2
5605  db9d 72fb0c        	addw	x,(OFST-1,sp)
5606  dba0 1f0c          	ldw	(OFST-1,sp),x
5608                     ; 1166     remaining_length += 2 + will_message_size; /* size of will_message */
5610  dba2 1e1a          	ldw	x,(OFST+13,sp)
5611  dba4 1c0002        	addw	x,#2
5612  dba7 72fb0c        	addw	x,(OFST-1,sp)
5613  dbaa 1f0c          	ldw	(OFST-1,sp),x
5615                     ; 1168     if (user_name != NULL) {
5617  dbac 1e1c          	ldw	x,(OFST+15,sp)
5618  dbae 2713          	jreq	L5442
5619                     ; 1170         connect_flags |= MQTT_CONNECT_USER_NAME;
5621  dbb0 7b20          	ld	a,(OFST+19,sp)
5622  dbb2 aa80          	or	a,#128
5623  dbb4 6b20          	ld	(OFST+19,sp),a
5624                     ; 1171         remaining_length += __mqtt_packed_cstrlen(user_name);
5626  dbb6 cdf701        	call	_strlen
5628  dbb9 1c0002        	addw	x,#2
5629  dbbc 72fb0c        	addw	x,(OFST-1,sp)
5630  dbbf 1f0c          	ldw	(OFST-1,sp),x
5633  dbc1 2006          	jra	L7442
5634  dbc3               L5442:
5635                     ; 1173     else connect_flags &= (uint8_t)(~MQTT_CONNECT_USER_NAME);
5637  dbc3 7b20          	ld	a,(OFST+19,sp)
5638  dbc5 a47f          	and	a,#127
5639  dbc7 6b20          	ld	(OFST+19,sp),a
5640  dbc9               L7442:
5641                     ; 1175     if (password != NULL) {
5643  dbc9 1e1e          	ldw	x,(OFST+17,sp)
5644  dbcb 2713          	jreq	L1542
5645                     ; 1177         connect_flags |= MQTT_CONNECT_PASSWORD;
5647  dbcd 7b20          	ld	a,(OFST+19,sp)
5648  dbcf aa40          	or	a,#64
5649  dbd1 6b20          	ld	(OFST+19,sp),a
5650                     ; 1178         remaining_length += __mqtt_packed_cstrlen(password);
5652  dbd3 cdf701        	call	_strlen
5654  dbd6 1c0002        	addw	x,#2
5655  dbd9 72fb0c        	addw	x,(OFST-1,sp)
5656  dbdc 1f0c          	ldw	(OFST-1,sp),x
5659  dbde 2008          	jra	L3542
5660  dbe0               L1542:
5661                     ; 1180     else connect_flags &= (uint8_t)(~MQTT_CONNECT_PASSWORD);
5663  dbe0 7b20          	ld	a,(OFST+19,sp)
5664  dbe2 a4bf          	and	a,#191
5665  dbe4 6b20          	ld	(OFST+19,sp),a
5666  dbe6 1e0c          	ldw	x,(OFST-1,sp)
5667  dbe8               L3542:
5668                     ; 1183     fixed_header.remaining_length = remaining_length;
5670  dbe8 cdfb55        	call	c_uitolx
5672  dbeb 96            	ldw	x,sp
5673  dbec 1c0008        	addw	x,#OFST-5
5674  dbef cdfaf4        	call	c_rtol
5677                     ; 1186     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
5679  dbf2 96            	ldw	x,sp
5680  dbf3 1c0003        	addw	x,#OFST-10
5681  dbf6 89            	pushw	x
5682  dbf7 1e14          	ldw	x,(OFST+7,sp)
5683  dbf9 89            	pushw	x
5684  dbfa 1e12          	ldw	x,(OFST+5,sp)
5685  dbfc cddab9        	call	_mqtt_pack_fixed_header
5687  dbff 5b04          	addw	sp,#4
5688  dc01 1f0c          	ldw	(OFST-1,sp),x
5690                     ; 1187     if (rv <= 0) {
5692  dc03 9c            	rvf	
5693                     ; 1188       return rv; /* something went wrong */
5696  dc04 2d1b          	jrsle	L073
5697                     ; 1191     buf += rv;
5699  dc06 1e0e          	ldw	x,(OFST+1,sp)
5700  dc08 72fb0c        	addw	x,(OFST-1,sp)
5701  dc0b 1f0e          	ldw	(OFST+1,sp),x
5702                     ; 1192     bufsz -= rv;
5704  dc0d 1e12          	ldw	x,(OFST+5,sp)
5705  dc0f 72f00c        	subw	x,(OFST-1,sp)
5706  dc12 1f12          	ldw	(OFST+5,sp),x
5707                     ; 1195     if (bufsz < fixed_header.remaining_length) return 0;
5709  dc14 cdfb55        	call	c_uitolx
5711  dc17 96            	ldw	x,sp
5712  dc18 1c0008        	addw	x,#OFST-5
5713  dc1b cdf923        	call	c_lcmp
5715  dc1e 2404          	jruge	L7542
5718  dc20 5f            	clrw	x
5720  dc21               L073:
5722  dc21 5b0f          	addw	sp,#15
5723  dc23 81            	ret	
5724  dc24               L7542:
5725                     ; 1198     *buf++ = 0x00;
5727  dc24 1e0e          	ldw	x,(OFST+1,sp)
5728  dc26 7f            	clr	(x)
5729  dc27 5c            	incw	x
5730                     ; 1199     *buf++ = 0x04;
5732  dc28 a604          	ld	a,#4
5733  dc2a f7            	ld	(x),a
5734  dc2b 5c            	incw	x
5735                     ; 1200     *buf++ = (uint8_t) 'M';
5737  dc2c a64d          	ld	a,#77
5738  dc2e f7            	ld	(x),a
5739  dc2f 5c            	incw	x
5740                     ; 1201     *buf++ = (uint8_t) 'Q';
5742  dc30 a651          	ld	a,#81
5743  dc32 f7            	ld	(x),a
5744  dc33 5c            	incw	x
5745                     ; 1202     *buf++ = (uint8_t) 'T';
5747  dc34 a654          	ld	a,#84
5748  dc36 f7            	ld	(x),a
5749  dc37 5c            	incw	x
5750                     ; 1203     *buf++ = (uint8_t) 'T';
5752  dc38 f7            	ld	(x),a
5753  dc39 5c            	incw	x
5754                     ; 1204     *buf++ = MQTT_PROTOCOL_LEVEL;
5756  dc3a a604          	ld	a,#4
5757  dc3c f7            	ld	(x),a
5758  dc3d 5c            	incw	x
5759                     ; 1205     *buf++ = connect_flags;
5761  dc3e 7b20          	ld	a,(OFST+19,sp)
5762  dc40 f7            	ld	(x),a
5763  dc41 5c            	incw	x
5764  dc42 1f0e          	ldw	(OFST+1,sp),x
5765                     ; 1206     buf += __mqtt_pack_uint16(buf, keep_alive);
5767  dc44 1e21          	ldw	x,(OFST+20,sp)
5768  dc46 89            	pushw	x
5769  dc47 1e10          	ldw	x,(OFST+3,sp)
5770  dc49 cde43c        	call	___mqtt_pack_uint16
5772  dc4c 5b02          	addw	sp,#2
5773  dc4e 72fb0e        	addw	x,(OFST+1,sp)
5774  dc51 1f0e          	ldw	(OFST+1,sp),x
5775                     ; 1209     buf += __mqtt_pack_str(buf, client_id);
5777  dc53 1e14          	ldw	x,(OFST+7,sp)
5778  dc55 89            	pushw	x
5779  dc56 1e10          	ldw	x,(OFST+3,sp)
5780  dc58 cde47d        	call	___mqtt_pack_str
5782  dc5b 5b02          	addw	sp,#2
5783  dc5d 72fb0e        	addw	x,(OFST+1,sp)
5784  dc60 1f0e          	ldw	(OFST+1,sp),x
5785                     ; 1210     if (connect_flags & MQTT_CONNECT_WILL_FLAG) {
5787  dc62 7b20          	ld	a,(OFST+19,sp)
5788  dc64 a504          	bcp	a,#4
5789  dc66 273c          	jreq	L1642
5790                     ; 1211         buf += __mqtt_pack_str(buf, will_topic);
5792  dc68 1e16          	ldw	x,(OFST+9,sp)
5793  dc6a 89            	pushw	x
5794  dc6b 1e10          	ldw	x,(OFST+3,sp)
5795  dc6d cde47d        	call	___mqtt_pack_str
5797  dc70 5b02          	addw	sp,#2
5798  dc72 72fb0e        	addw	x,(OFST+1,sp)
5799  dc75 1f0e          	ldw	(OFST+1,sp),x
5800                     ; 1212         buf += __mqtt_pack_uint16(buf, (uint16_t)will_message_size);
5802  dc77 1e1a          	ldw	x,(OFST+13,sp)
5803  dc79 89            	pushw	x
5804  dc7a 1e10          	ldw	x,(OFST+3,sp)
5805  dc7c cde43c        	call	___mqtt_pack_uint16
5807  dc7f 5b02          	addw	sp,#2
5808  dc81 72fb0e        	addw	x,(OFST+1,sp)
5809  dc84 1f0e          	ldw	(OFST+1,sp),x
5810                     ; 1213         memcpy(buf, will_message, will_message_size);
5812  dc86 bf04          	ldw	c_x,x
5813  dc88 1618          	ldw	y,(OFST+11,sp)
5814  dc8a 90bf07        	ldw	c_y,y
5815  dc8d 1e1a          	ldw	x,(OFST+13,sp)
5816  dc8f 270a          	jreq	L063
5817  dc91               L263:
5818  dc91 5a            	decw	x
5819  dc92 92d607        	ld	a,([c_y.w],x)
5820  dc95 92d704        	ld	([c_x.w],x),a
5821  dc98 5d            	tnzw	x
5822  dc99 26f6          	jrne	L263
5823  dc9b               L063:
5824                     ; 1214         buf += will_message_size;
5826  dc9b 1e0e          	ldw	x,(OFST+1,sp)
5827  dc9d 72fb1a        	addw	x,(OFST+13,sp)
5828  dca0 1f0e          	ldw	(OFST+1,sp),x
5829  dca2 7b20          	ld	a,(OFST+19,sp)
5830  dca4               L1642:
5831                     ; 1217     if (connect_flags & MQTT_CONNECT_USER_NAME) buf += __mqtt_pack_str(buf, user_name);
5833  dca4 a580          	bcp	a,#128
5834  dca6 2711          	jreq	L3642
5837  dca8 1e1c          	ldw	x,(OFST+15,sp)
5838  dcaa 89            	pushw	x
5839  dcab 1e10          	ldw	x,(OFST+3,sp)
5840  dcad cde47d        	call	___mqtt_pack_str
5842  dcb0 5b02          	addw	sp,#2
5843  dcb2 72fb0e        	addw	x,(OFST+1,sp)
5844  dcb5 1f0e          	ldw	(OFST+1,sp),x
5845  dcb7 7b20          	ld	a,(OFST+19,sp)
5846  dcb9               L3642:
5847                     ; 1219     if (connect_flags & MQTT_CONNECT_PASSWORD) buf += __mqtt_pack_str(buf, password);
5849  dcb9 a540          	bcp	a,#64
5850  dcbb 270f          	jreq	L5642
5853  dcbd 1e1e          	ldw	x,(OFST+17,sp)
5854  dcbf 89            	pushw	x
5855  dcc0 1e10          	ldw	x,(OFST+3,sp)
5856  dcc2 cde47d        	call	___mqtt_pack_str
5858  dcc5 5b02          	addw	sp,#2
5859  dcc7 72fb0e        	addw	x,(OFST+1,sp)
5860  dcca 1f0e          	ldw	(OFST+1,sp),x
5861  dccc               L5642:
5862                     ; 1222     return buf - start;
5864  dccc 72f001        	subw	x,(OFST-12,sp)
5866  dccf ccdc21        	jra	L073
5936                     	switch	.const
5937  9f01               L473:
5938  9f01 00000002      	dc.l	2
5939                     ; 1227 int16_t mqtt_unpack_connack_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
5939                     ; 1228 {
5940                     .text:	section	.text,new
5941  dcd2               _mqtt_unpack_connack_response:
5943  dcd2 89            	pushw	x
5944  dcd3 5204          	subw	sp,#4
5945       00000004      OFST:	set	4
5948                     ; 1229     const uint8_t *const start = buf;
5950  dcd5 1e09          	ldw	x,(OFST+5,sp)
5951  dcd7 1f01          	ldw	(OFST-3,sp),x
5953                     ; 1233     if (mqtt_response->fixed_header.remaining_length != 2) {
5955  dcd9 1e05          	ldw	x,(OFST+1,sp)
5956  dcdb 1c0005        	addw	x,#5
5957  dcde cdf98e        	call	c_ltor
5959  dce1 ae9f01        	ldw	x,#L473
5960  dce4 cdf923        	call	c_lcmp
5962  dce7 2705          	jreq	L5252
5963                     ; 1234       return MQTT_ERROR_MALFORMED_RESPONSE;
5965  dce9 ae800c        	ldw	x,#32780
5967  dcec 2011          	jra	L673
5968  dcee               L5252:
5969                     ; 1237     response = &(mqtt_response->decoded.connack);
5971  dcee 1e05          	ldw	x,(OFST+1,sp)
5972  dcf0 1c0009        	addw	x,#9
5973  dcf3 1f03          	ldw	(OFST-1,sp),x
5975                     ; 1239     if (*buf & 0xFE) {
5977  dcf5 1e09          	ldw	x,(OFST+5,sp)
5978  dcf7 f6            	ld	a,(x)
5979  dcf8 a5fe          	bcp	a,#254
5980  dcfa 2706          	jreq	L7252
5981                     ; 1240       return MQTT_ERROR_CONNACK_FORBIDDEN_FLAGS; /* only bit 1 can be set */
5983  dcfc ae8008        	ldw	x,#32776
5985  dcff               L673:
5987  dcff 5b06          	addw	sp,#6
5988  dd01 81            	ret	
5989  dd02               L7252:
5990                     ; 1242     else response->session_present_flag = *buf++;
5992  dd02 5c            	incw	x
5993  dd03 1f09          	ldw	(OFST+5,sp),x
5994  dd05 1e03          	ldw	x,(OFST-1,sp)
5995  dd07 f7            	ld	(x),a
5996                     ; 1244     if (*buf > 5u) {
5998  dd08 1e09          	ldw	x,(OFST+5,sp)
5999  dd0a f6            	ld	a,(x)
6000  dd0b a106          	cp	a,#6
6001  dd0d 2505          	jrult	L3352
6002                     ; 1245       return MQTT_ERROR_CONNACK_FORBIDDEN_CODE; /* only bit 1 can be set */
6004  dd0f ae8009        	ldw	x,#32777
6006  dd12 20eb          	jra	L673
6007  dd14               L3352:
6008                     ; 1247     else response->return_code = (enum MQTTConnackReturnCode) *buf++;
6010  dd14 5c            	incw	x
6011  dd15 1f09          	ldw	(OFST+5,sp),x
6012  dd17 1e03          	ldw	x,(OFST-1,sp)
6013  dd19 e701          	ld	(1,x),a
6014                     ; 1249     return buf - start;
6016  dd1b 1e09          	ldw	x,(OFST+5,sp)
6017  dd1d 72f001        	subw	x,(OFST-3,sp)
6019  dd20 20dd          	jra	L673
6073                     ; 1254 int16_t mqtt_pack_disconnect(uint8_t *buf, uint16_t bufsz)
6073                     ; 1255 {
6074                     .text:	section	.text,new
6075  dd22               _mqtt_pack_disconnect:
6077  dd22 89            	pushw	x
6078  dd23 5209          	subw	sp,#9
6079       00000009      OFST:	set	9
6082                     ; 1257     fixed_header.control_type = MQTT_CONTROL_DISCONNECT;
6084  dd25 a60e          	ld	a,#14
6085  dd27 6b01          	ld	(OFST-8,sp),a
6087                     ; 1258     fixed_header.control_flags = 0;
6089  dd29 7b05          	ld	a,(OFST-4,sp)
6090  dd2b a4f0          	and	a,#240
6091  dd2d 6b05          	ld	(OFST-4,sp),a
6093                     ; 1259     fixed_header.remaining_length = 0;
6095  dd2f 5f            	clrw	x
6096  dd30 1f08          	ldw	(OFST-1,sp),x
6097  dd32 1f06          	ldw	(OFST-3,sp),x
6099                     ; 1260     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6101  dd34 96            	ldw	x,sp
6102  dd35 5c            	incw	x
6103  dd36 89            	pushw	x
6104  dd37 1e10          	ldw	x,(OFST+7,sp)
6105  dd39 89            	pushw	x
6106  dd3a 1e0e          	ldw	x,(OFST+5,sp)
6107  dd3c cddab9        	call	_mqtt_pack_fixed_header
6109  dd3f 5b0f          	addw	sp,#15
6112  dd41 81            	ret	
6166                     ; 1265 int16_t mqtt_pack_ping_request(uint8_t *buf, uint16_t bufsz)
6166                     ; 1266 {
6167                     .text:	section	.text,new
6168  dd42               _mqtt_pack_ping_request:
6170  dd42 89            	pushw	x
6171  dd43 5209          	subw	sp,#9
6172       00000009      OFST:	set	9
6175                     ; 1268     fixed_header.control_type = MQTT_CONTROL_PINGREQ;
6177  dd45 a60c          	ld	a,#12
6178  dd47 6b01          	ld	(OFST-8,sp),a
6180                     ; 1269     fixed_header.control_flags = 0;
6182  dd49 7b05          	ld	a,(OFST-4,sp)
6183  dd4b a4f0          	and	a,#240
6184  dd4d 6b05          	ld	(OFST-4,sp),a
6186                     ; 1270     fixed_header.remaining_length = 0;
6188  dd4f 5f            	clrw	x
6189  dd50 1f08          	ldw	(OFST-1,sp),x
6190  dd52 1f06          	ldw	(OFST-3,sp),x
6192                     ; 1271     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6194  dd54 96            	ldw	x,sp
6195  dd55 5c            	incw	x
6196  dd56 89            	pushw	x
6197  dd57 1e10          	ldw	x,(OFST+7,sp)
6198  dd59 89            	pushw	x
6199  dd5a 1e0e          	ldw	x,(OFST+5,sp)
6200  dd5c cddab9        	call	_mqtt_pack_fixed_header
6202  dd5f 5b0f          	addw	sp,#15
6205  dd61 81            	ret	
6337                     ; 1276 int16_t mqtt_pack_publish_request(uint8_t *buf, uint16_t bufsz,
6337                     ; 1277                                   const char* topic_name,
6337                     ; 1278                                   uint16_t packet_id,
6337                     ; 1279                                   const void* application_message,
6337                     ; 1280                                   uint16_t application_message_size,
6337                     ; 1281                                   uint8_t publish_flags)
6337                     ; 1282 {
6338                     .text:	section	.text,new
6339  dd62               _mqtt_pack_publish_request:
6341  dd62 89            	pushw	x
6342  dd63 5212          	subw	sp,#18
6343       00000012      OFST:	set	18
6346                     ; 1283     const uint8_t *const start = buf;
6348  dd65 1f01          	ldw	(OFST-17,sp),x
6350                     ; 1290     if(buf == NULL || topic_name == NULL) {
6352  dd67 2704          	jreq	L5662
6354  dd69 1e19          	ldw	x,(OFST+7,sp)
6355  dd6b 2605          	jrne	L3662
6356  dd6d               L5662:
6357                     ; 1291       return MQTT_ERROR_NULLPTR;
6359  dd6d ae8001        	ldw	x,#32769
6361  dd70 204f          	jra	L624
6362  dd72               L3662:
6363                     ; 1295     inspected_qos = (uint8_t)((publish_flags & MQTT_PUBLISH_QOS_MASK) >> 1); /* mask */
6365  dd72 7b21          	ld	a,(OFST+15,sp)
6366  dd74 a406          	and	a,#6
6367  dd76 44            	srl	a
6368  dd77 6b12          	ld	(OFST+0,sp),a
6370                     ; 1298     fixed_header.control_type = MQTT_CONTROL_PUBLISH;
6372  dd79 a603          	ld	a,#3
6373  dd7b 6b03          	ld	(OFST-15,sp),a
6375                     ; 1301     remaining_length = (uint32_t)__mqtt_packed_cstrlen(topic_name);
6377  dd7d cdf701        	call	_strlen
6379  dd80 1c0002        	addw	x,#2
6380  dd83 cdfb55        	call	c_uitolx
6382  dd86 96            	ldw	x,sp
6383  dd87 1c000e        	addw	x,#OFST-4
6384  dd8a cdfaf4        	call	c_rtol
6387                     ; 1302     if (inspected_qos > 0) remaining_length += 2;
6389  dd8d 7b12          	ld	a,(OFST+0,sp)
6390  dd8f 2709          	jreq	L7662
6393  dd91 96            	ldw	x,sp
6394  dd92 1c000e        	addw	x,#OFST-4
6395  dd95 a602          	ld	a,#2
6396  dd97 cdf943        	call	c_lgadc
6399  dd9a               L7662:
6400                     ; 1303     remaining_length += (uint32_t)application_message_size;
6402  dd9a 1e1f          	ldw	x,(OFST+13,sp)
6403  dd9c cdfb55        	call	c_uitolx
6405  dd9f 96            	ldw	x,sp
6406  dda0 1c000e        	addw	x,#OFST-4
6407  dda3 cdf953        	call	c_lgadd
6410                     ; 1304     fixed_header.remaining_length = remaining_length;
6412  dda6 1e10          	ldw	x,(OFST-2,sp)
6413  dda8 1f0a          	ldw	(OFST-8,sp),x
6414  ddaa 1e0e          	ldw	x,(OFST-4,sp)
6415  ddac 1f08          	ldw	(OFST-10,sp),x
6417                     ; 1307     if (inspected_qos == 0) publish_flags &= (uint8_t)(~MQTT_PUBLISH_DUP);
6419  ddae 7b12          	ld	a,(OFST+0,sp)
6420  ddb0 2608          	jrne	L1762
6423  ddb2 7b21          	ld	a,(OFST+15,sp)
6424  ddb4 a4f7          	and	a,#247
6425  ddb6 6b21          	ld	(OFST+15,sp),a
6426  ddb8 7b12          	ld	a,(OFST+0,sp)
6427  ddba               L1762:
6428                     ; 1310     if (inspected_qos == 3) {
6430  ddba a103          	cp	a,#3
6431  ddbc 2606          	jrne	L3762
6432                     ; 1311       return MQTT_ERROR_PUBLISH_FORBIDDEN_QOS;
6434  ddbe ae800a        	ldw	x,#32778
6436  ddc1               L624:
6438  ddc1 5b14          	addw	sp,#20
6439  ddc3 81            	ret	
6440  ddc4               L3762:
6441                     ; 1313     fixed_header.control_flags = publish_flags;
6443  ddc4 7b21          	ld	a,(OFST+15,sp)
6444  ddc6 1807          	xor	a,(OFST-11,sp)
6445  ddc8 a40f          	and	a,#15
6446  ddca 1807          	xor	a,(OFST-11,sp)
6447  ddcc 6b07          	ld	(OFST-11,sp),a
6449                     ; 1316     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6451  ddce 96            	ldw	x,sp
6452  ddcf 1c0003        	addw	x,#OFST-15
6453  ddd2 89            	pushw	x
6454  ddd3 1e19          	ldw	x,(OFST+7,sp)
6455  ddd5 89            	pushw	x
6456  ddd6 1e17          	ldw	x,(OFST+5,sp)
6457  ddd8 cddab9        	call	_mqtt_pack_fixed_header
6459  dddb 5b04          	addw	sp,#4
6460  dddd 1f0c          	ldw	(OFST-6,sp),x
6462                     ; 1317     if (rv <= 0) return rv; /* something went wrong */
6464  dddf 9c            	rvf	
6468  dde0 2ddf          	jrsle	L624
6469                     ; 1319     buf += rv;
6471  dde2 1e13          	ldw	x,(OFST+1,sp)
6472  dde4 72fb0c        	addw	x,(OFST-6,sp)
6473  dde7 1f13          	ldw	(OFST+1,sp),x
6474                     ; 1320     bufsz -= rv;
6476  dde9 1e17          	ldw	x,(OFST+5,sp)
6477  ddeb 72f00c        	subw	x,(OFST-6,sp)
6478  ddee 1f17          	ldw	(OFST+5,sp),x
6479                     ; 1323     if (bufsz < remaining_length) return 0;
6481  ddf0 cdfb55        	call	c_uitolx
6483  ddf3 96            	ldw	x,sp
6484  ddf4 1c000e        	addw	x,#OFST-4
6485  ddf7 cdf923        	call	c_lcmp
6487  ddfa 2403          	jruge	L7762
6490  ddfc 5f            	clrw	x
6492  ddfd 20c2          	jra	L624
6493  ddff               L7762:
6494                     ; 1326     buf += __mqtt_pack_str(buf, topic_name);
6496  ddff 1e19          	ldw	x,(OFST+7,sp)
6497  de01 89            	pushw	x
6498  de02 1e15          	ldw	x,(OFST+3,sp)
6499  de04 cde47d        	call	___mqtt_pack_str
6501  de07 5b02          	addw	sp,#2
6502  de09 72fb13        	addw	x,(OFST+1,sp)
6503  de0c 1f13          	ldw	(OFST+1,sp),x
6504                     ; 1327     if (inspected_qos > 0) buf += __mqtt_pack_uint16(buf, packet_id);
6506  de0e 7b12          	ld	a,(OFST+0,sp)
6507  de10 270f          	jreq	L1072
6510  de12 1e1b          	ldw	x,(OFST+9,sp)
6511  de14 89            	pushw	x
6512  de15 1e15          	ldw	x,(OFST+3,sp)
6513  de17 cde43c        	call	___mqtt_pack_uint16
6515  de1a 5b02          	addw	sp,#2
6516  de1c 72fb13        	addw	x,(OFST+1,sp)
6517  de1f 1f13          	ldw	(OFST+1,sp),x
6518  de21               L1072:
6519                     ; 1330     memcpy(buf, application_message, application_message_size);
6521  de21 bf04          	ldw	c_x,x
6522  de23 161d          	ldw	y,(OFST+11,sp)
6523  de25 90bf07        	ldw	c_y,y
6524  de28 1e1f          	ldw	x,(OFST+13,sp)
6525  de2a 270a          	jreq	L224
6526  de2c               L424:
6527  de2c 5a            	decw	x
6528  de2d 92d607        	ld	a,([c_y.w],x)
6529  de30 92d704        	ld	([c_x.w],x),a
6530  de33 5d            	tnzw	x
6531  de34 26f6          	jrne	L424
6532  de36               L224:
6533                     ; 1331     buf += application_message_size;
6535  de36 1e13          	ldw	x,(OFST+1,sp)
6536  de38 72fb1f        	addw	x,(OFST+13,sp)
6537  de3b 1f13          	ldw	(OFST+1,sp),x
6538                     ; 1333     return buf - start;
6540  de3d 72f001        	subw	x,(OFST-17,sp)
6542  de40 ccddc1        	jra	L624
6625                     	switch	.const
6626  9f05               L234:
6627  9f05 00000004      	dc.l	4
6628                     ; 1337 int16_t mqtt_unpack_publish_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
6628                     ; 1338 {    
6629                     .text:	section	.text,new
6630  de43               _mqtt_unpack_publish_response:
6632  de43 89            	pushw	x
6633  de44 5206          	subw	sp,#6
6634       00000006      OFST:	set	6
6637                     ; 1339     const uint8_t *const start = buf;
6639  de46 1e0b          	ldw	x,(OFST+5,sp)
6640  de48 1f01          	ldw	(OFST-5,sp),x
6642                     ; 1343     fixed_header = &(mqtt_response->fixed_header);
6644  de4a 1e07          	ldw	x,(OFST+1,sp)
6645  de4c 1f03          	ldw	(OFST-3,sp),x
6647                     ; 1344     response = &(mqtt_response->decoded.publish);
6649  de4e 1c0009        	addw	x,#9
6650  de51 1f05          	ldw	(OFST-1,sp),x
6652                     ; 1347     response->dup_flag = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_DUP) >> 3);
6654  de53 1e03          	ldw	x,(OFST-3,sp)
6655  de55 e604          	ld	a,(4,x)
6656  de57 a40f          	and	a,#15
6657  de59 44            	srl	a
6658  de5a 44            	srl	a
6659  de5b 1e05          	ldw	x,(OFST-1,sp)
6660  de5d 44            	srl	a
6661  de5e f7            	ld	(x),a
6662                     ; 1348     response->qos_level = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_QOS_MASK) >> 1);
6664  de5f 1e03          	ldw	x,(OFST-3,sp)
6665  de61 e604          	ld	a,(4,x)
6666  de63 a406          	and	a,#6
6667  de65 1e05          	ldw	x,(OFST-1,sp)
6668  de67 44            	srl	a
6669  de68 e701          	ld	(1,x),a
6670                     ; 1349     response->retain_flag = (uint8_t)(fixed_header->control_flags & MQTT_PUBLISH_RETAIN);
6672  de6a 1e03          	ldw	x,(OFST-3,sp)
6673  de6c e604          	ld	a,(4,x)
6674  de6e 1e05          	ldw	x,(OFST-1,sp)
6675  de70 a401          	and	a,#1
6676  de72 e702          	ld	(2,x),a
6677                     ; 1352     if (mqtt_response->fixed_header.remaining_length < 4) {
6679  de74 1e07          	ldw	x,(OFST+1,sp)
6680  de76 1c0005        	addw	x,#5
6681  de79 cdf98e        	call	c_ltor
6683  de7c ae9f05        	ldw	x,#L234
6684  de7f cdf923        	call	c_lcmp
6686  de82 2405          	jruge	L7472
6687                     ; 1353         return MQTT_ERROR_MALFORMED_RESPONSE;
6689  de84 ae800c        	ldw	x,#32780
6691  de87 2072          	jra	L044
6692  de89               L7472:
6693                     ; 1357     response->topic_name_size = __mqtt_unpack_uint16(buf);
6695  de89 1e0b          	ldw	x,(OFST+5,sp)
6696  de8b cde460        	call	___mqtt_unpack_uint16
6698  de8e 1605          	ldw	y,(OFST-1,sp)
6699  de90 90ef03        	ldw	(3,y),x
6700                     ; 1358     buf += 2;
6702  de93 1e0b          	ldw	x,(OFST+5,sp)
6703  de95 1c0002        	addw	x,#2
6704  de98 1f0b          	ldw	(OFST+5,sp),x
6705                     ; 1359     response->topic_name = buf;
6707  de9a 93            	ldw	x,y
6708  de9b 160b          	ldw	y,(OFST+5,sp)
6709  de9d ef05          	ldw	(5,x),y
6710                     ; 1360     buf += response->topic_name_size;
6712  de9f ee03          	ldw	x,(3,x)
6713  dea1 72fb0b        	addw	x,(OFST+5,sp)
6714  dea4 1f0b          	ldw	(OFST+5,sp),x
6715                     ; 1362     if (response->qos_level > 0) {
6717  dea6 1e05          	ldw	x,(OFST-1,sp)
6718  dea8 6d01          	tnz	(1,x)
6719  deaa 2712          	jreq	L1572
6720                     ; 1363         response->packet_id = __mqtt_unpack_uint16(buf);
6722  deac 1e0b          	ldw	x,(OFST+5,sp)
6723  deae cde460        	call	___mqtt_unpack_uint16
6725  deb1 1605          	ldw	y,(OFST-1,sp)
6726  deb3 90ef07        	ldw	(7,y),x
6727                     ; 1364         buf += 2;
6729  deb6 1e0b          	ldw	x,(OFST+5,sp)
6730  deb8 1c0002        	addw	x,#2
6731  debb 1f0b          	ldw	(OFST+5,sp),x
6732  debd 93            	ldw	x,y
6733  debe               L1572:
6734                     ; 1368     response->application_message = buf;
6736  debe 160b          	ldw	y,(OFST+5,sp)
6737  dec0 ef09          	ldw	(9,x),y
6738                     ; 1369     if (response->qos_level == 0) {
6740  dec2 6d01          	tnz	(1,x)
6741  dec4 2614          	jrne	L3572
6742                     ; 1370         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 2);
6744  dec6 1e03          	ldw	x,(OFST-3,sp)
6745  dec8 1605          	ldw	y,(OFST-1,sp)
6746  deca ee07          	ldw	x,(7,x)
6747  decc 01            	rrwa	x,a
6748  decd 90e004        	sub	a,(4,y)
6749  ded0 01            	rrwa	x,a
6750  ded1 90e203        	sbc	a,(3,y)
6751  ded4 01            	rrwa	x,a
6752  ded5 1d0002        	subw	x,#2
6754  ded8 2012          	jra	L5572
6755  deda               L3572:
6756                     ; 1373         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 4);
6758  deda 1e03          	ldw	x,(OFST-3,sp)
6759  dedc 1605          	ldw	y,(OFST-1,sp)
6760  dede ee07          	ldw	x,(7,x)
6761  dee0 01            	rrwa	x,a
6762  dee1 90e004        	sub	a,(4,y)
6763  dee4 01            	rrwa	x,a
6764  dee5 90e203        	sbc	a,(3,y)
6765  dee8 01            	rrwa	x,a
6766  dee9 1d0004        	subw	x,#4
6767  deec               L5572:
6768  deec 90ef0b        	ldw	(11,y),x
6769                     ; 1375     buf += response->application_message_size;
6771  deef 1e05          	ldw	x,(OFST-1,sp)
6772  def1 ee0b          	ldw	x,(11,x)
6773  def3 72fb0b        	addw	x,(OFST+5,sp)
6774  def6 1f0b          	ldw	(OFST+5,sp),x
6775                     ; 1378     return buf - start;
6777  def8 72f001        	subw	x,(OFST-5,sp)
6779  defb               L044:
6781  defb 5b08          	addw	sp,#8
6782  defd 81            	ret	
6871                     ; 1383 int16_t mqtt_pack_pubxxx_request(uint8_t *buf, uint16_t bufsz, 
6871                     ; 1384                                  enum MQTTControlPacketType control_type,
6871                     ; 1385                                  uint16_t packet_id) 
6871                     ; 1386 {
6872                     .text:	section	.text,new
6873  defe               _mqtt_pack_pubxxx_request:
6875  defe 89            	pushw	x
6876  deff 520d          	subw	sp,#13
6877       0000000d      OFST:	set	13
6880                     ; 1387     const uint8_t *const start = buf;
6882  df01 1f01          	ldw	(OFST-12,sp),x
6884                     ; 1390     if (buf == NULL) {
6886  df03 2605          	jrne	L7103
6887                     ; 1391       return MQTT_ERROR_NULLPTR;
6889  df05 ae8001        	ldw	x,#32769
6891  df08 2032          	jra	L054
6892  df0a               L7103:
6893                     ; 1395     fixed_header.control_type = control_type;
6895  df0a 7b14          	ld	a,(OFST+7,sp)
6896  df0c 6b05          	ld	(OFST-8,sp),a
6898                     ; 1396     if (control_type == MQTT_CONTROL_PUBREL) fixed_header.control_flags = 0x02;
6900  df0e a106          	cp	a,#6
6901  df10 2608          	jrne	L1203
6904  df12 7b09          	ld	a,(OFST-4,sp)
6905  df14 a4f0          	and	a,#240
6906  df16 aa02          	or	a,#2
6908  df18 2004          	jra	L3203
6909  df1a               L1203:
6910                     ; 1397     else fixed_header.control_flags = 0;
6912  df1a 7b09          	ld	a,(OFST-4,sp)
6913  df1c a4f0          	and	a,#240
6914  df1e               L3203:
6915  df1e 6b09          	ld	(OFST-4,sp),a
6917                     ; 1399     fixed_header.remaining_length = 2;
6919  df20 ae0002        	ldw	x,#2
6920  df23 1f0c          	ldw	(OFST-1,sp),x
6921  df25 5f            	clrw	x
6922  df26 1f0a          	ldw	(OFST-3,sp),x
6924                     ; 1400     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6926  df28 96            	ldw	x,sp
6927  df29 1c0005        	addw	x,#OFST-8
6928  df2c 89            	pushw	x
6929  df2d 1e14          	ldw	x,(OFST+7,sp)
6930  df2f 89            	pushw	x
6931  df30 1e12          	ldw	x,(OFST+5,sp)
6932  df32 cddab9        	call	_mqtt_pack_fixed_header
6934  df35 5b04          	addw	sp,#4
6935  df37 1f03          	ldw	(OFST-10,sp),x
6937                     ; 1401     if (rv <= 0) return rv;
6939  df39 9c            	rvf	
6940  df3a 2c03          	jrsgt	L5203
6944  df3c               L054:
6946  df3c 5b0f          	addw	sp,#15
6947  df3e 81            	ret	
6948  df3f               L5203:
6949                     ; 1402     buf += rv;
6951  df3f 1e0e          	ldw	x,(OFST+1,sp)
6952  df41 72fb03        	addw	x,(OFST-10,sp)
6953  df44 1f0e          	ldw	(OFST+1,sp),x
6954                     ; 1403     bufsz -= rv;
6956  df46 1e12          	ldw	x,(OFST+5,sp)
6957  df48 72f003        	subw	x,(OFST-10,sp)
6958  df4b 1f12          	ldw	(OFST+5,sp),x
6959                     ; 1405     if (bufsz < fixed_header.remaining_length) return 0;
6961  df4d cdfb55        	call	c_uitolx
6963  df50 96            	ldw	x,sp
6964  df51 1c000a        	addw	x,#OFST-3
6965  df54 cdf923        	call	c_lcmp
6967  df57 2403          	jruge	L7203
6970  df59 5f            	clrw	x
6972  df5a 20e0          	jra	L054
6973  df5c               L7203:
6974                     ; 1407     buf += __mqtt_pack_uint16(buf, packet_id);
6976  df5c 1e15          	ldw	x,(OFST+8,sp)
6977  df5e 89            	pushw	x
6978  df5f 1e10          	ldw	x,(OFST+3,sp)
6979  df61 cde43c        	call	___mqtt_pack_uint16
6981  df64 5b02          	addw	sp,#2
6982  df66 72fb0e        	addw	x,(OFST+1,sp)
6983  df69 1f0e          	ldw	(OFST+1,sp),x
6984                     ; 1409     return buf - start;
6986  df6b 72f001        	subw	x,(OFST-12,sp)
6988  df6e 20cc          	jra	L054
7054                     ; 1413 int16_t mqtt_unpack_pubxxx_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7054                     ; 1414 {
7055                     .text:	section	.text,new
7056  df70               _mqtt_unpack_pubxxx_response:
7058  df70 89            	pushw	x
7059  df71 5204          	subw	sp,#4
7060       00000004      OFST:	set	4
7063                     ; 1415     const uint8_t *const start = buf;
7065  df73 1e09          	ldw	x,(OFST+5,sp)
7066  df75 1f01          	ldw	(OFST-3,sp),x
7068                     ; 1419     if (mqtt_response->fixed_header.remaining_length != 2) {
7070  df77 1e05          	ldw	x,(OFST+1,sp)
7071  df79 1c0005        	addw	x,#5
7072  df7c cdf98e        	call	c_ltor
7074  df7f ae9f01        	ldw	x,#L473
7075  df82 cdf923        	call	c_lcmp
7077  df85 2705          	jreq	L3603
7078                     ; 1420         return MQTT_ERROR_MALFORMED_RESPONSE;
7080  df87 ae800c        	ldw	x,#32780
7082  df8a 2019          	jra	L654
7083  df8c               L3603:
7084                     ; 1424     packet_id = __mqtt_unpack_uint16(buf);
7086  df8c 1e09          	ldw	x,(OFST+5,sp)
7087  df8e cde460        	call	___mqtt_unpack_uint16
7089  df91 1f03          	ldw	(OFST-1,sp),x
7091                     ; 1425     buf += 2;
7093  df93 1e09          	ldw	x,(OFST+5,sp)
7094  df95 1c0002        	addw	x,#2
7095  df98 1f09          	ldw	(OFST+5,sp),x
7096                     ; 1427     if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBACK) {
7098                     ; 1428         mqtt_response->decoded.puback.packet_id = packet_id;
7100                     ; 1430     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREC) {
7102                     ; 1431         mqtt_response->decoded.pubrec.packet_id = packet_id;
7104                     ; 1433     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREL) {
7106                     ; 1434         mqtt_response->decoded.pubrel.packet_id = packet_id;
7108                     ; 1437         mqtt_response->decoded.pubcomp.packet_id = packet_id;
7113  df9a 1e05          	ldw	x,(OFST+1,sp)
7114  df9c 1603          	ldw	y,(OFST-1,sp)
7115  df9e ef09          	ldw	(9,x),y
7116                     ; 1440     return buf - start;
7118  dfa0 1e09          	ldw	x,(OFST+5,sp)
7119  dfa2 72f001        	subw	x,(OFST-3,sp)
7121  dfa5               L654:
7123  dfa5 5b06          	addw	sp,#6
7124  dfa7 81            	ret	
7190                     	switch	.const
7191  9f09               L264:
7192  9f09 00000003      	dc.l	3
7193                     ; 1445 int16_t mqtt_unpack_suback_response (struct mqtt_response *mqtt_response, const uint8_t *buf)
7193                     ; 1446 {
7194                     .text:	section	.text,new
7195  dfa8               _mqtt_unpack_suback_response:
7197  dfa8 89            	pushw	x
7198  dfa9 5208          	subw	sp,#8
7199       00000008      OFST:	set	8
7202                     ; 1447     const uint8_t *const start = buf;
7204  dfab 1e0d          	ldw	x,(OFST+5,sp)
7205  dfad 1f03          	ldw	(OFST-5,sp),x
7207                     ; 1448     uint32_t remaining_length = mqtt_response->fixed_header.remaining_length;
7209  dfaf 1e09          	ldw	x,(OFST+1,sp)
7210  dfb1 9093          	ldw	y,x
7211  dfb3 ee07          	ldw	x,(7,x)
7212  dfb5 1f07          	ldw	(OFST-1,sp),x
7213  dfb7 93            	ldw	x,y
7214  dfb8 ee05          	ldw	x,(5,x)
7215  dfba 1f05          	ldw	(OFST-3,sp),x
7217                     ; 1451     if (remaining_length < 3) {
7219  dfbc 96            	ldw	x,sp
7220  dfbd 1c0005        	addw	x,#OFST-3
7221  dfc0 cdf98e        	call	c_ltor
7223  dfc3 ae9f09        	ldw	x,#L264
7224  dfc6 cdf923        	call	c_lcmp
7226  dfc9 2405          	jruge	L3313
7227                     ; 1452       return MQTT_ERROR_MALFORMED_RESPONSE;
7229  dfcb ae800c        	ldw	x,#32780
7231  dfce 2037          	jra	L664
7232  dfd0               L3313:
7233                     ; 1456     mqtt_response->decoded.suback.packet_id = __mqtt_unpack_uint16(buf);
7235  dfd0 1e0d          	ldw	x,(OFST+5,sp)
7236  dfd2 cde460        	call	___mqtt_unpack_uint16
7238  dfd5 1609          	ldw	y,(OFST+1,sp)
7239  dfd7 90ef09        	ldw	(9,y),x
7240                     ; 1457     buf += 2;
7242  dfda 1e0d          	ldw	x,(OFST+5,sp)
7243  dfdc 1c0002        	addw	x,#2
7244  dfdf 1f0d          	ldw	(OFST+5,sp),x
7245                     ; 1458     remaining_length -= 2;
7247  dfe1 96            	ldw	x,sp
7248  dfe2 1c0005        	addw	x,#OFST-3
7249  dfe5 a602          	ld	a,#2
7250  dfe7 cdf96a        	call	c_lgsbc
7253                     ; 1461     mqtt_response->decoded.suback.num_return_codes = (uint16_t) remaining_length;
7255  dfea 1e09          	ldw	x,(OFST+1,sp)
7256  dfec 1607          	ldw	y,(OFST-1,sp)
7257  dfee ef0d          	ldw	(13,x),y
7258                     ; 1462     mqtt_response->decoded.suback.return_codes = buf;
7260  dff0 160d          	ldw	y,(OFST+5,sp)
7261  dff2 ef0b          	ldw	(11,x),y
7262                     ; 1463     buf += remaining_length;
7264  dff4 96            	ldw	x,sp
7265  dff5 1c0005        	addw	x,#OFST-3
7266  dff8 cdf98e        	call	c_ltor
7268  dffb be02          	ldw	x,c_lreg+2
7269  dffd 1f01          	ldw	(OFST-7,sp),x
7271  dfff 72fb0d        	addw	x,(OFST+5,sp)
7272  e002 1f0d          	ldw	(OFST+5,sp),x
7273                     ; 1465     return buf - start;
7275  e004 72f003        	subw	x,(OFST-5,sp)
7277  e007               L664:
7279  e007 5b0a          	addw	sp,#10
7280  e009 81            	ret	
7406                     ; 1470 int16_t mqtt_pack_subscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7406                     ; 1471 {
7407                     .text:	section	.text,new
7408  e00a               _mqtt_pack_subscribe_request:
7410  e00a 89            	pushw	x
7411  e00b 5229          	subw	sp,#41
7412       00000029      OFST:	set	41
7415                     ; 1473     const uint8_t *const start = buf;
7417  e00d 1f03          	ldw	(OFST-38,sp),x
7419                     ; 1476     uint16_t num_subs = 0;
7421  e00f 5f            	clrw	x
7422  e010 1f26          	ldw	(OFST-3,sp),x
7424                     ; 1482     va_start(args, packet_id);
7426  e012 96            	ldw	x,sp
7427  e013 1c0032        	addw	x,#OFST+9
7428  e016 1f28          	ldw	(OFST-1,sp),x
7430  e018               L1123:
7431                     ; 1484         topic[num_subs] = va_arg(args, const char*);
7433  e018 1e28          	ldw	x,(OFST-1,sp)
7434  e01a 1c0002        	addw	x,#2
7435  e01d 1f28          	ldw	(OFST-1,sp),x
7437  e01f 1d0002        	subw	x,#2
7438  e022 9096          	ldw	y,sp
7439  e024 72a90016      	addw	y,#OFST-19
7440  e028 1701          	ldw	(OFST-40,sp),y
7442  e02a 1626          	ldw	y,(OFST-3,sp)
7443  e02c 9058          	sllw	y
7444  e02e 72f901        	addw	y,(OFST-40,sp)
7445  e031 fe            	ldw	x,(x)
7446  e032 90ff          	ldw	(y),x
7447                     ; 1485         if (topic[num_subs] == NULL) {
7449  e034 96            	ldw	x,sp
7450  e035 1c0016        	addw	x,#OFST-19
7451  e038 1f01          	ldw	(OFST-40,sp),x
7453  e03a 1e26          	ldw	x,(OFST-3,sp)
7454  e03c 58            	sllw	x
7455  e03d 72fb01        	addw	x,(OFST-40,sp)
7456  e040 e601          	ld	a,(1,x)
7457  e042 fa            	or	a,(x)
7458  e043 2616          	jrne	L5123
7459                     ; 1487             break;
7460                     ; 1497     va_end(args);
7462                     ; 1500     fixed_header.control_type = MQTT_CONTROL_SUBSCRIBE;
7464  e045 a608          	ld	a,#8
7465  e047 6b0d          	ld	(OFST-28,sp),a
7467                     ; 1501     fixed_header.control_flags = 2u;
7469  e049 7b11          	ld	a,(OFST-24,sp)
7470  e04b a4f0          	and	a,#240
7471  e04d aa02          	or	a,#2
7472  e04f 6b11          	ld	(OFST-24,sp),a
7474                     ; 1502     fixed_header.remaining_length = 2u; /* size of variable header */
7476  e051 ae0002        	ldw	x,#2
7477  e054 1f14          	ldw	(OFST-21,sp),x
7478  e056 5f            	clrw	x
7479  e057 1f12          	ldw	(OFST-23,sp),x
7481                     ; 1503     for(i = 0; i < num_subs; ++i) {
7483  e059 203f          	jra	L5223
7484  e05b               L5123:
7485                     ; 1490         max_qos[num_subs] = (uint8_t) va_arg(args, uint16_t);
7487  e05b 1e28          	ldw	x,(OFST-1,sp)
7489  e05d e601          	ld	a,(1,x)
7490  e05f 1c0002        	addw	x,#2
7491  e062 1f28          	ldw	(OFST-1,sp),x
7492  e064 96            	ldw	x,sp
7493  e065 1c0005        	addw	x,#OFST-36
7494  e068 72fb26        	addw	x,(OFST-3,sp)
7495  e06b f7            	ld	(x),a
7496                     ; 1492         ++num_subs;
7498  e06c 1e26          	ldw	x,(OFST-3,sp)
7499  e06e 5c            	incw	x
7500  e06f 1f26          	ldw	(OFST-3,sp),x
7502                     ; 1493         if (num_subs >= MQTT_SUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7504  e071 a30008        	cpw	x,#8
7505  e074 25a2          	jrult	L1123
7506                     ; 1494             return MQTT_ERROR_SUBSCRIBE_TOO_MANY_TOPICS;
7508  e076 ae800b        	ldw	x,#32779
7510  e079 2039          	jra	L205
7511  e07b               L1223:
7512                     ; 1505         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]) + 1;
7514  e07b 1c0016        	addw	x,#OFST-19
7515  e07e 1f01          	ldw	(OFST-40,sp),x
7517  e080 1e28          	ldw	x,(OFST-1,sp)
7518  e082 58            	sllw	x
7519  e083 72fb01        	addw	x,(OFST-40,sp)
7520  e086 fe            	ldw	x,(x)
7521  e087 cdf701        	call	_strlen
7523  e08a 1c0003        	addw	x,#3
7524  e08d cdfb55        	call	c_uitolx
7526  e090 96            	ldw	x,sp
7527  e091 1c0012        	addw	x,#OFST-23
7528  e094 cdf953        	call	c_lgadd
7531                     ; 1503     for(i = 0; i < num_subs; ++i) {
7533  e097 1e28          	ldw	x,(OFST-1,sp)
7534  e099 5c            	incw	x
7535  e09a               L5223:
7537  e09a 1f28          	ldw	(OFST-1,sp),x
7541  e09c 1326          	cpw	x,(OFST-3,sp)
7542  e09e 96            	ldw	x,sp
7543  e09f 25da          	jrult	L1223
7544                     ; 1509     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
7546  e0a1 1c000d        	addw	x,#OFST-28
7547  e0a4 89            	pushw	x
7548  e0a5 1e30          	ldw	x,(OFST+7,sp)
7549  e0a7 89            	pushw	x
7550  e0a8 1e2e          	ldw	x,(OFST+5,sp)
7551  e0aa cddab9        	call	_mqtt_pack_fixed_header
7553  e0ad 5b04          	addw	sp,#4
7554  e0af 1f28          	ldw	(OFST-1,sp),x
7556                     ; 1510     if (rv <= 0) return rv;
7558  e0b1 9c            	rvf	
7559  e0b2 2c03          	jrsgt	L1323
7563  e0b4               L205:
7565  e0b4 5b2b          	addw	sp,#43
7566  e0b6 81            	ret	
7567  e0b7               L1323:
7568                     ; 1511     buf += rv;
7570  e0b7 1e2a          	ldw	x,(OFST+1,sp)
7571  e0b9 72fb28        	addw	x,(OFST-1,sp)
7572  e0bc 1f2a          	ldw	(OFST+1,sp),x
7573                     ; 1512     bufsz -= rv;
7575  e0be 1e2e          	ldw	x,(OFST+5,sp)
7576  e0c0 72f028        	subw	x,(OFST-1,sp)
7577  e0c3 1f2e          	ldw	(OFST+5,sp),x
7578                     ; 1515     if (bufsz < fixed_header.remaining_length) return 0;
7580  e0c5 cdfb55        	call	c_uitolx
7582  e0c8 96            	ldw	x,sp
7583  e0c9 1c0012        	addw	x,#OFST-23
7584  e0cc cdf923        	call	c_lcmp
7586  e0cf 2403          	jruge	L3323
7589  e0d1 5f            	clrw	x
7591  e0d2 20e0          	jra	L205
7592  e0d4               L3323:
7593                     ; 1518     buf += __mqtt_pack_uint16(buf, packet_id);
7595  e0d4 1e30          	ldw	x,(OFST+7,sp)
7596  e0d6 89            	pushw	x
7597  e0d7 1e2c          	ldw	x,(OFST+3,sp)
7598  e0d9 cde43c        	call	___mqtt_pack_uint16
7600  e0dc 5b02          	addw	sp,#2
7601  e0de 72fb2a        	addw	x,(OFST+1,sp)
7602  e0e1 1f2a          	ldw	(OFST+1,sp),x
7603                     ; 1521     for(i = 0; i < num_subs; ++i) {
7605  e0e3 5f            	clrw	x
7607  e0e4 202b          	jra	L1423
7608  e0e6               L5323:
7609                     ; 1522         buf += __mqtt_pack_str(buf, topic[i]);
7611  e0e6 96            	ldw	x,sp
7612  e0e7 1c0016        	addw	x,#OFST-19
7613  e0ea 1f01          	ldw	(OFST-40,sp),x
7615  e0ec 1e28          	ldw	x,(OFST-1,sp)
7616  e0ee 58            	sllw	x
7617  e0ef 72fb01        	addw	x,(OFST-40,sp)
7618  e0f2 fe            	ldw	x,(x)
7619  e0f3 89            	pushw	x
7620  e0f4 1e2c          	ldw	x,(OFST+3,sp)
7621  e0f6 cde47d        	call	___mqtt_pack_str
7623  e0f9 5b02          	addw	sp,#2
7624  e0fb 72fb2a        	addw	x,(OFST+1,sp)
7625  e0fe 1f2a          	ldw	(OFST+1,sp),x
7626                     ; 1523         *buf++ = max_qos[i];
7628  e100 96            	ldw	x,sp
7629  e101 1c0005        	addw	x,#OFST-36
7630  e104 72fb28        	addw	x,(OFST-1,sp)
7631  e107 f6            	ld	a,(x)
7632  e108 1e2a          	ldw	x,(OFST+1,sp)
7633  e10a f7            	ld	(x),a
7634  e10b 5c            	incw	x
7635  e10c 1f2a          	ldw	(OFST+1,sp),x
7636                     ; 1521     for(i = 0; i < num_subs; ++i) {
7638  e10e 1e28          	ldw	x,(OFST-1,sp)
7639  e110 5c            	incw	x
7640  e111               L1423:
7641  e111 1f28          	ldw	(OFST-1,sp),x
7645  e113 1326          	cpw	x,(OFST-3,sp)
7646  e115 25cf          	jrult	L5323
7647                     ; 1526     return buf - start;
7649  e117 1e2a          	ldw	x,(OFST+1,sp)
7650  e119 72f003        	subw	x,(OFST-38,sp)
7652  e11c 2096          	jra	L205
7711                     ; 1531 int16_t mqtt_unpack_unsuback_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7711                     ; 1532 {
7712                     .text:	section	.text,new
7713  e11e               _mqtt_unpack_unsuback_response:
7715  e11e 89            	pushw	x
7716  e11f 89            	pushw	x
7717       00000002      OFST:	set	2
7720                     ; 1533     const uint8_t *const start = buf;
7722  e120 1e07          	ldw	x,(OFST+5,sp)
7723  e122 1f01          	ldw	(OFST-1,sp),x
7725                     ; 1535     if (mqtt_response->fixed_header.remaining_length != 2) {
7727  e124 1e03          	ldw	x,(OFST+1,sp)
7728  e126 1c0005        	addw	x,#5
7729  e129 cdf98e        	call	c_ltor
7731  e12c ae9f01        	ldw	x,#L473
7732  e12f cdf923        	call	c_lcmp
7734  e132 2705          	jreq	L5723
7735                     ; 1536         return MQTT_ERROR_MALFORMED_RESPONSE;
7737  e134 ae800c        	ldw	x,#32780
7739  e137 2014          	jra	L015
7740  e139               L5723:
7741                     ; 1540     mqtt_response->decoded.unsuback.packet_id = __mqtt_unpack_uint16(buf);
7743  e139 1e07          	ldw	x,(OFST+5,sp)
7744  e13b cde460        	call	___mqtt_unpack_uint16
7746  e13e 1603          	ldw	y,(OFST+1,sp)
7747  e140 90ef09        	ldw	(9,y),x
7748                     ; 1541     buf += 2;
7750  e143 1e07          	ldw	x,(OFST+5,sp)
7751  e145 1c0002        	addw	x,#2
7752  e148 1f07          	ldw	(OFST+5,sp),x
7753                     ; 1543     return buf - start;
7755  e14a 72f001        	subw	x,(OFST-1,sp)
7757  e14d               L015:
7759  e14d 5b04          	addw	sp,#4
7760  e14f 81            	ret	
7876                     ; 1548 int16_t mqtt_pack_unsubscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7876                     ; 1549 {
7877                     .text:	section	.text,new
7878                     _mqtt_pack_unsubscribe_request:
7880                     	pushw	x
7881                     	subw	sp,#33
7882       00000021      OFST:	set	33
7885                     ; 1551     const uint8_t *const start = buf;
7887                     	ldw	(OFST-30,sp),x
7889                     ; 1554     uint16_t num_subs = 0;
7891                     	clrw	x
7892                     	ldw	(OFST-3,sp),x
7894                     ; 1559     va_start(args, packet_id);
7896                     	ldw	x,sp
7897                     	addw	x,#OFST+9
7898                     	ldw	(OFST-1,sp),x
7900                     L7433:
7901                     ; 1561         topic[num_subs] = va_arg(args, const char*);
7903                     	ldw	x,(OFST-1,sp)
7904                     	addw	x,#2
7905                     	ldw	(OFST-1,sp),x
7907                     	subw	x,#2
7908                     	ldw	y,sp
7909                     	addw	y,#OFST-19
7910                     	ldw	(OFST-32,sp),y
7912                     	ldw	y,(OFST-3,sp)
7913                     	sllw	y
7914                     	addw	y,(OFST-32,sp)
7915                     	ldw	x,(x)
7916                     	ldw	(y),x
7917                     ; 1562         if (topic[num_subs] == NULL) {
7919                     	ldw	x,sp
7920                     	addw	x,#OFST-19
7921                     	ldw	(OFST-32,sp),x
7923                     	ldw	x,(OFST-3,sp)
7924                     	sllw	x
7925                     	addw	x,(OFST-32,sp)
7926                     	ld	a,(1,x)
7927                     	or	a,(x)
7928                     	jrne	L3533
7929                     ; 1564             break;
7930                     ; 1572     va_end(args);
7932                     ; 1575     fixed_header.control_type = MQTT_CONTROL_UNSUBSCRIBE;
7934                     	ld	a,#10
7935                     	ld	(OFST-28,sp),a
7937                     ; 1576     fixed_header.control_flags = 2u;
7939                     	ld	a,(OFST-24,sp)
7940                     	and	a,#240
7941                     	or	a,#2
7942                     	ld	(OFST-24,sp),a
7944                     ; 1577     fixed_header.remaining_length = 2u; // size of variable header
7946                     	ldw	x,#2
7947                     	ldw	(OFST-21,sp),x
7948                     	clrw	x
7949                     	ldw	(OFST-23,sp),x
7951                     ; 1578     for(i = 0; i < num_subs; ++i) {
7953                     	jra	L3633
7954                     L3533:
7955                     ; 1567         ++num_subs;
7957                     	ldw	x,(OFST-3,sp)
7958                     	incw	x
7959                     	ldw	(OFST-3,sp),x
7961                     ; 1568         if (num_subs >= MQTT_UNSUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7963                     	cpw	x,#8
7964                     	jrult	L7433
7965                     ; 1569             return MQTT_ERROR_UNSUBSCRIBE_TOO_MANY_TOPICS;
7967                     	ldw	x,#32781
7969                     	jra	L425
7970                     L7533:
7971                     ; 1580         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]);
7973                     	addw	x,#OFST-19
7974                     	ldw	(OFST-32,sp),x
7976                     	ldw	x,(OFST-1,sp)
7977                     	sllw	x
7978                     	addw	x,(OFST-32,sp)
7979                     	ldw	x,(x)
7980                     	call	_strlen
7982                     	addw	x,#2
7983                     	call	c_uitolx
7985                     	ldw	x,sp
7986                     	addw	x,#OFST-23
7987                     	call	c_lgadd
7990                     ; 1578     for(i = 0; i < num_subs; ++i) {
7992                     	ldw	x,(OFST-1,sp)
7993                     	incw	x
7994                     L3633:
7996                     	ldw	(OFST-1,sp),x
8000                     	cpw	x,(OFST-3,sp)
8001                     	ldw	x,sp
8002                     	jrult	L7533
8003                     ; 1584     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
8005                     	addw	x,#OFST-28
8006                     	pushw	x
8007                     	ldw	x,(OFST+7,sp)
8008                     	pushw	x
8009                     	ldw	x,(OFST+5,sp)
8010                     	call	_mqtt_pack_fixed_header
8012                     	addw	sp,#4
8013                     	ldw	(OFST-1,sp),x
8015                     ; 1585     if (rv <= 0) return rv;
8017                     	rvf	
8018                     	jrsgt	L7633
8022                     L425:
8024                     	addw	sp,#35
8025                     	ret	
8026                     L7633:
8027                     ; 1586     buf += rv;
8029                     	ldw	x,(OFST+1,sp)
8030                     	addw	x,(OFST-1,sp)
8031                     	ldw	(OFST+1,sp),x
8032                     ; 1587     bufsz -= rv;
8034                     	ldw	x,(OFST+5,sp)
8035                     	subw	x,(OFST-1,sp)
8036                     	ldw	(OFST+5,sp),x
8037                     ; 1590     if (bufsz < fixed_header.remaining_length) return 0;
8039                     	call	c_uitolx
8041                     	ldw	x,sp
8042                     	addw	x,#OFST-23
8043                     	call	c_lcmp
8045                     	jruge	L1733
8048                     	clrw	x
8050                     	jra	L425
8051                     L1733:
8052                     ; 1593     buf += __mqtt_pack_uint16(buf, packet_id);
8054                     	ldw	x,(OFST+7,sp)
8055                     	pushw	x
8056                     	ldw	x,(OFST+3,sp)
8057                     	call	___mqtt_pack_uint16
8059                     	addw	sp,#2
8060                     	addw	x,(OFST+1,sp)
8061                     	ldw	(OFST+1,sp),x
8062                     ; 1596     for(i = 0; i < num_subs; ++i) buf += __mqtt_pack_str(buf, topic[i]);
8064                     	clrw	x
8066                     	jra	L7733
8067                     L3733:
8070                     	ldw	x,sp
8071                     	addw	x,#OFST-19
8072                     	ldw	(OFST-32,sp),x
8074                     	ldw	x,(OFST-1,sp)
8075                     	sllw	x
8076                     	addw	x,(OFST-32,sp)
8077                     	ldw	x,(x)
8078                     	pushw	x
8079                     	ldw	x,(OFST+3,sp)
8080                     	call	___mqtt_pack_str
8082                     	addw	sp,#2
8083                     	addw	x,(OFST+1,sp)
8084                     	ldw	(OFST+1,sp),x
8087                     	ldw	x,(OFST-1,sp)
8088                     	incw	x
8089                     L7733:
8090                     	ldw	(OFST-1,sp),x
8094                     	cpw	x,(OFST-3,sp)
8095                     	jrult	L3733
8096                     ; 1598     return buf - start;
8098                     	ldw	x,(OFST+1,sp)
8099                     	subw	x,(OFST-30,sp)
8101                     	jra	L425
8155                     ; 1603 void mqtt_mq_init(struct mqtt_message_queue *mq, void *buf, uint16_t bufsz) 
8155                     ; 1604 {  
8156                     .text:	section	.text,new
8157  e150               _mqtt_mq_init:
8159  e150 89            	pushw	x
8160       00000000      OFST:	set	0
8163                     ; 1605     if(buf != NULL)
8165  e151 1e05          	ldw	x,(OFST+5,sp)
8166  e153 2748          	jreq	L1343
8167                     ; 1607         mq->mem_start = buf;
8169  e155 1e01          	ldw	x,(OFST+1,sp)
8170  e157 1605          	ldw	y,(OFST+5,sp)
8171  e159 ff            	ldw	(x),y
8172                     ; 1608         mq->mem_end = (unsigned char*)buf + bufsz;
8174  e15a 93            	ldw	x,y
8175  e15b 1601          	ldw	y,(OFST+1,sp)
8176  e15d 72fb07        	addw	x,(OFST+7,sp)
8177  e160 90ef02        	ldw	(2,y),x
8178                     ; 1609         mq->curr = buf;
8180  e163 93            	ldw	x,y
8181  e164 1605          	ldw	y,(OFST+5,sp)
8182  e166 ef04          	ldw	(4,x),y
8183                     ; 1610         mq->queue_tail = mq->mem_end;
8185  e168 9093          	ldw	y,x
8186  e16a 90ee02        	ldw	y,(2,y)
8187  e16d ef08          	ldw	(8,x),y
8188                     ; 1611         mq->curr_sz = mqtt_mq_currsz(mq);
8190  e16f 1601          	ldw	y,(OFST+1,sp)
8191  e171 90ee08        	ldw	y,(8,y)
8192  e174 72a2000c      	subw	y,#12
8193  e178 90bf07        	ldw	c_y,y
8194  e17b 9093          	ldw	y,x
8195  e17d 90ee04        	ldw	y,(4,y)
8196  e180 90b307        	cpw	y,c_y
8197  e183 2505          	jrult	L035
8198  e185 5f            	clrw	x
8199  e186 1601          	ldw	y,(OFST+1,sp)
8200  e188 2010          	jra	L235
8201  e18a               L035:
8202  e18a ee08          	ldw	x,(8,x)
8203  e18c 1d000c        	subw	x,#12
8204  e18f 1601          	ldw	y,(OFST+1,sp)
8205  e191 01            	rrwa	x,a
8206  e192 90e005        	sub	a,(5,y)
8207  e195 01            	rrwa	x,a
8208  e196 90e204        	sbc	a,(4,y)
8209  e199 01            	rrwa	x,a
8210  e19a               L235:
8211  e19a 90ef06        	ldw	(6,y),x
8212  e19d               L1343:
8213                     ; 1613 }
8216  e19d 85            	popw	x
8217  e19e 81            	ret	
8264                     ; 1616 struct mqtt_queued_message* mqtt_mq_register(struct mqtt_message_queue *mq, uint16_t nbytes)
8264                     ; 1617 {
8265                     .text:	section	.text,new
8266  e19f               _mqtt_mq_register:
8268  e19f 89            	pushw	x
8269       00000000      OFST:	set	0
8272                     ; 1619     --(mq->queue_tail);
8274  e1a0 9093          	ldw	y,x
8275  e1a2 ee08          	ldw	x,(8,x)
8276  e1a4 1d000c        	subw	x,#12
8277  e1a7 90ef08        	ldw	(8,y),x
8278                     ; 1620     mq->queue_tail->start = mq->curr;
8280  e1aa 1e01          	ldw	x,(OFST+1,sp)
8281  e1ac 9093          	ldw	y,x
8282  e1ae 90ee08        	ldw	y,(8,y)
8283  e1b1 ee04          	ldw	x,(4,x)
8284  e1b3 90ff          	ldw	(y),x
8285                     ; 1621     mq->queue_tail->size = nbytes;
8287  e1b5 1e01          	ldw	x,(OFST+1,sp)
8288  e1b7 ee08          	ldw	x,(8,x)
8289  e1b9 1605          	ldw	y,(OFST+5,sp)
8290  e1bb ef02          	ldw	(2,x),y
8291                     ; 1622     mq->queue_tail->state = MQTT_QUEUED_UNSENT;
8293  e1bd 1e01          	ldw	x,(OFST+1,sp)
8294  e1bf ee08          	ldw	x,(8,x)
8295  e1c1 6f04          	clr	(4,x)
8296                     ; 1625     mq->curr += nbytes;
8298  e1c3 1e01          	ldw	x,(OFST+1,sp)
8299  e1c5 9093          	ldw	y,x
8300  e1c7 ee04          	ldw	x,(4,x)
8301  e1c9 72fb05        	addw	x,(OFST+5,sp)
8302  e1cc 90ef04        	ldw	(4,y),x
8303                     ; 1626     mq->curr_sz = mqtt_mq_currsz(mq);
8305  e1cf 1e01          	ldw	x,(OFST+1,sp)
8306  e1d1 9093          	ldw	y,x
8307  e1d3 90ee08        	ldw	y,(8,y)
8308  e1d6 72a2000c      	subw	y,#12
8309  e1da 90bf07        	ldw	c_y,y
8310  e1dd 9093          	ldw	y,x
8311  e1df 90ee04        	ldw	y,(4,y)
8312  e1e2 90b307        	cpw	y,c_y
8313  e1e5 2505          	jrult	L635
8314  e1e7 5f            	clrw	x
8315  e1e8 1601          	ldw	y,(OFST+1,sp)
8316  e1ea 2010          	jra	L045
8317  e1ec               L635:
8318  e1ec ee08          	ldw	x,(8,x)
8319  e1ee 1d000c        	subw	x,#12
8320  e1f1 1601          	ldw	y,(OFST+1,sp)
8321  e1f3 01            	rrwa	x,a
8322  e1f4 90e005        	sub	a,(5,y)
8323  e1f7 01            	rrwa	x,a
8324  e1f8 90e204        	sbc	a,(4,y)
8325  e1fb 01            	rrwa	x,a
8326  e1fc               L045:
8327  e1fc 90ef06        	ldw	(6,y),x
8328                     ; 1628     return mq->queue_tail;
8330  e1ff 1e01          	ldw	x,(OFST+1,sp)
8331  e201 ee08          	ldw	x,(8,x)
8334  e203 5b02          	addw	sp,#2
8335  e205 81            	ret	
8413                     ; 1632 void mqtt_mq_clean(struct mqtt_message_queue *mq) {
8414                     .text:	section	.text,new
8415  e206               _mqtt_mq_clean:
8417  e206 89            	pushw	x
8418  e207 5208          	subw	sp,#8
8419       00000008      OFST:	set	8
8422                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8424  e209 ee02          	ldw	x,(2,x)
8426  e20b 2047          	jra	L5253
8427  e20d               L5153:
8428                     ; 1636         if (new_head->state != MQTT_QUEUED_COMPLETE) break;
8430  e20d 1e07          	ldw	x,(OFST-1,sp)
8431  e20f e604          	ld	a,(4,x)
8432  e211 a102          	cp	a,#2
8433  e213 273f          	jreq	L5253
8435  e215               L3253:
8436                     ; 1640     if (new_head < mq->queue_tail) {
8438  e215 1e09          	ldw	x,(OFST+1,sp)
8439  e217 ee08          	ldw	x,(8,x)
8440  e219 1307          	cpw	x,(OFST-1,sp)
8441  e21b 2346          	jrule	L7253
8442                     ; 1641         mq->curr = mq->mem_start;
8444  e21d 1e09          	ldw	x,(OFST+1,sp)
8445  e21f 9093          	ldw	y,x
8446  e221 90fe          	ldw	y,(y)
8447  e223 ef04          	ldw	(4,x),y
8448                     ; 1642         mq->queue_tail = mq->mem_end;
8450  e225 9093          	ldw	y,x
8451  e227 90ee02        	ldw	y,(2,y)
8452  e22a ef08          	ldw	(8,x),y
8453                     ; 1643         mq->curr_sz = mqtt_mq_currsz(mq);
8455  e22c 72a2000c      	subw	y,#12
8456  e230 90bf07        	ldw	c_y,y
8457  e233 9093          	ldw	y,x
8458  e235 90ee04        	ldw	y,(4,y)
8459  e238 90b307        	cpw	y,c_y
8460  e23b 2504          	jrult	L445
8461  e23d               LC022:
8462  e23d 5f            	clrw	x
8463  e23e cce34c        	jp	L655
8464  e241               L445:
8465  e241 ee08          	ldw	x,(8,x)
8466  e243 1d000c        	subw	x,#12
8467  e246 1609          	ldw	y,(OFST+1,sp)
8468  e248 01            	rrwa	x,a
8469  e249 90e005        	sub	a,(5,y)
8470  e24c 01            	rrwa	x,a
8471  e24d 90e204        	sbc	a,(4,y)
8472  e250 01            	rrwa	x,a
8473                     ; 1644         return;
8475  e251 cce34e        	jp	LC020
8476  e254               L5253:
8477                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8479  e254 1d000c        	subw	x,#12
8480  e257 1f07          	ldw	(OFST-1,sp),x
8484  e259 1e09          	ldw	x,(OFST+1,sp)
8485  e25b ee08          	ldw	x,(8,x)
8486  e25d 1307          	cpw	x,(OFST-1,sp)
8487  e25f 23ac          	jrule	L5153
8488  e261 20b2          	jra	L3253
8489  e263               L7253:
8490                     ; 1646     else if (new_head == mqtt_mq_get(mq, 0)) {
8492  e263 1e09          	ldw	x,(OFST+1,sp)
8493  e265 ee02          	ldw	x,(2,x)
8494  e267 1d000c        	subw	x,#12
8495  e26a 1307          	cpw	x,(OFST-1,sp)
8496  e26c 2603          	jrne	L1353
8497                     ; 1648         return;
8498  e26e               L065:
8501  e26e 5b0a          	addw	sp,#10
8502  e270 81            	ret	
8503  e271               L1353:
8504                     ; 1653         uint16_t n = mq->curr - new_head->start;
8506  e271 1e09          	ldw	x,(OFST+1,sp)
8507  e273 1607          	ldw	y,(OFST-1,sp)
8508  e275 ee04          	ldw	x,(4,x)
8509  e277 01            	rrwa	x,a
8510  e278 90e001        	sub	a,(1,y)
8511  e27b 01            	rrwa	x,a
8512  e27c 90f2          	sbc	a,(y)
8513  e27e 01            	rrwa	x,a
8514  e27f 1f05          	ldw	(OFST-3,sp),x
8516                     ; 1654         uint16_t removing = new_head->start - (uint8_t*) mq->mem_start;
8518  e281 93            	ldw	x,y
8519  e282 1609          	ldw	y,(OFST+1,sp)
8520  e284 fe            	ldw	x,(x)
8521  e285 01            	rrwa	x,a
8522  e286 90e001        	sub	a,(1,y)
8523  e289 01            	rrwa	x,a
8524  e28a 90f2          	sbc	a,(y)
8525  e28c 01            	rrwa	x,a
8526  e28d 1f03          	ldw	(OFST-5,sp),x
8528                     ; 1655         memmove(mq->mem_start, new_head->start, n);
8530  e28f 1e05          	ldw	x,(OFST-3,sp)
8531  e291 89            	pushw	x
8532  e292 1e09          	ldw	x,(OFST+1,sp)
8533  e294 fe            	ldw	x,(x)
8534  e295 89            	pushw	x
8535  e296 1e0d          	ldw	x,(OFST+5,sp)
8536  e298 fe            	ldw	x,(x)
8537  e299 cdf69c        	call	_memmove
8539  e29c 5b04          	addw	sp,#4
8540                     ; 1656         mq->curr = (unsigned char*)mq->mem_start + n;
8542  e29e 1e09          	ldw	x,(OFST+1,sp)
8543  e2a0 fe            	ldw	x,(x)
8544  e2a1 1609          	ldw	y,(OFST+1,sp)
8545  e2a3 72fb05        	addw	x,(OFST-3,sp)
8546  e2a6 90ef04        	ldw	(4,y),x
8547                     ; 1660             int16_t new_tail_idx = new_head - mq->queue_tail;
8549  e2a9 1e07          	ldw	x,(OFST-1,sp)
8550  e2ab 01            	rrwa	x,a
8551  e2ac 90e009        	sub	a,(9,y)
8552  e2af 01            	rrwa	x,a
8553  e2b0 90e208        	sbc	a,(8,y)
8554  e2b3 01            	rrwa	x,a
8555  e2b4 a60c          	ld	a,#12
8556  e2b6 cdfb0c        	call	c_sdivx
8558  e2b9 1f05          	ldw	(OFST-3,sp),x
8560                     ; 1661             memmove(mqtt_mq_get(mq, new_tail_idx), mq->queue_tail, sizeof(struct mqtt_queued_message) * (new_tail_idx + 1));
8562  e2bb 5c            	incw	x
8563  e2bc a60c          	ld	a,#12
8564  e2be cdf70d        	call	c_bmulx
8566  e2c1 89            	pushw	x
8567  e2c2 1e0b          	ldw	x,(OFST+3,sp)
8568  e2c4 ee08          	ldw	x,(8,x)
8569  e2c6 89            	pushw	x
8570  e2c7 1e09          	ldw	x,(OFST+1,sp)
8571  e2c9 a60c          	ld	a,#12
8572  e2cb cdf70d        	call	c_bmulx
8574  e2ce 1f05          	ldw	(OFST-3,sp),x
8576  e2d0 1e0d          	ldw	x,(OFST+5,sp)
8577  e2d2 ee02          	ldw	x,(2,x)
8578  e2d4 1d000c        	subw	x,#12
8579  e2d7 72f005        	subw	x,(OFST-3,sp)
8580  e2da cdf69c        	call	_memmove
8582  e2dd 5b04          	addw	sp,#4
8583                     ; 1662             mq->queue_tail = mqtt_mq_get(mq, new_tail_idx);
8585  e2df 1e05          	ldw	x,(OFST-3,sp)
8586  e2e1 a60c          	ld	a,#12
8587  e2e3 cdf70d        	call	c_bmulx
8589  e2e6 1f01          	ldw	(OFST-7,sp),x
8591  e2e8 1e09          	ldw	x,(OFST+1,sp)
8592  e2ea ee02          	ldw	x,(2,x)
8593  e2ec 1d000c        	subw	x,#12
8594  e2ef 1609          	ldw	y,(OFST+1,sp)
8595  e2f1 72f001        	subw	x,(OFST-7,sp)
8596  e2f4 90ef08        	ldw	(8,y),x
8597                     ; 1666                 int16_t i = 0;
8599  e2f7 5f            	clrw	x
8601  e2f8 201e          	jra	L1453
8602  e2fa               L5353:
8603                     ; 1667                 for(; i < new_tail_idx + 1; ++i) mqtt_mq_get(mq, i)->start -= removing;
8605  e2fa 1e07          	ldw	x,(OFST-1,sp)
8606  e2fc a60c          	ld	a,#12
8607  e2fe cdf70d        	call	c_bmulx
8609  e301 1f01          	ldw	(OFST-7,sp),x
8611  e303 1e09          	ldw	x,(OFST+1,sp)
8612  e305 ee02          	ldw	x,(2,x)
8613  e307 1d000c        	subw	x,#12
8614  e30a 72f001        	subw	x,(OFST-7,sp)
8615  e30d 9093          	ldw	y,x
8616  e30f fe            	ldw	x,(x)
8617  e310 72f003        	subw	x,(OFST-5,sp)
8618  e313 90ff          	ldw	(y),x
8621  e315 1e07          	ldw	x,(OFST-1,sp)
8622  e317 5c            	incw	x
8623  e318               L1453:
8624  e318 1f07          	ldw	(OFST-1,sp),x
8628  e31a 1e05          	ldw	x,(OFST-3,sp)
8629  e31c 5c            	incw	x
8630  e31d 1307          	cpw	x,(OFST-1,sp)
8631  e31f 2cd9          	jrsgt	L5353
8632                     ; 1673     mq->curr_sz = mqtt_mq_currsz(mq);
8634  e321 1e09          	ldw	x,(OFST+1,sp)
8635  e323 9093          	ldw	y,x
8636  e325 90ee08        	ldw	y,(8,y)
8637  e328 72a2000c      	subw	y,#12
8638  e32c 90bf07        	ldw	c_y,y
8639  e32f 9093          	ldw	y,x
8640  e331 90ee04        	ldw	y,(4,y)
8641  e334 90b307        	cpw	y,c_y
8642  e337 2503cce23d    	jruge	LC022
8643  e33c ee08          	ldw	x,(8,x)
8644  e33e 1d000c        	subw	x,#12
8645  e341 1609          	ldw	y,(OFST+1,sp)
8646  e343 01            	rrwa	x,a
8647  e344 90e005        	sub	a,(5,y)
8648  e347 01            	rrwa	x,a
8649  e348 90e204        	sbc	a,(4,y)
8650  e34b 01            	rrwa	x,a
8651  e34c               L655:
8652  e34c 1609          	ldw	y,(OFST+1,sp)
8653  e34e               LC020:
8654  e34e 90ef06        	ldw	(6,y),x
8655                     ; 1674 }
8657  e351 cce26e        	jra	L065
8729                     ; 1677 struct mqtt_queued_message* mqtt_mq_find(struct mqtt_message_queue *mq, enum MQTTControlPacketType control_type, uint16_t *packet_id)
8729                     ; 1678 {
8730                     .text:	section	.text,new
8731  e354               _mqtt_mq_find:
8733  e354 89            	pushw	x
8734  e355 89            	pushw	x
8735       00000002      OFST:	set	2
8738                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8740  e356 ee02          	ldw	x,(2,x)
8742  e358 2025          	jra	L1163
8743  e35a               L5063:
8744                     ; 1681         if (curr->control_type == control_type) {
8746  e35a 1e01          	ldw	x,(OFST-1,sp)
8747  e35c e609          	ld	a,(9,x)
8748  e35e 1107          	cp	a,(OFST+5,sp)
8749  e360 261b          	jrne	L5163
8750                     ; 1682             if ((packet_id == NULL && curr->state != MQTT_QUEUED_COMPLETE) ||
8750                     ; 1683                 (packet_id != NULL && *packet_id == curr->packet_id)) {
8752  e362 1e08          	ldw	x,(OFST+6,sp)
8753  e364 2608          	jrne	L3263
8755  e366 1e01          	ldw	x,(OFST-1,sp)
8756  e368 e604          	ld	a,(4,x)
8757  e36a a102          	cp	a,#2
8758  e36c 261f          	jrne	L465
8759  e36e               L3263:
8761  e36e 1e08          	ldw	x,(OFST+6,sp)
8762  e370 270b          	jreq	L5163
8764  e372 1601          	ldw	y,(OFST-1,sp)
8765  e374 fe            	ldw	x,(x)
8766  e375 90e30a        	cpw	x,(10,y)
8767  e378 2603          	jrne	L5163
8768  e37a 93            	ldw	x,y
8769                     ; 1684                 return curr;
8772  e37b 2010          	jra	L465
8773  e37d               L5163:
8774                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8776  e37d 1e01          	ldw	x,(OFST-1,sp)
8777  e37f               L1163:
8778  e37f 1d000c        	subw	x,#12
8779  e382 1f01          	ldw	(OFST-1,sp),x
8783  e384 1e03          	ldw	x,(OFST+1,sp)
8784  e386 ee08          	ldw	x,(8,x)
8785  e388 1301          	cpw	x,(OFST-1,sp)
8786  e38a 23ce          	jrule	L5063
8787                     ; 1688     return NULL;
8789  e38c 5f            	clrw	x
8791  e38d               L465:
8793  e38d 5b04          	addw	sp,#4
8794  e38f 81            	ret	
8872                     ; 1693 int16_t mqtt_unpack_response(struct mqtt_response* response, const uint8_t *buf, uint16_t bufsz)
8872                     ; 1694 {
8873                     .text:	section	.text,new
8874  e390               _mqtt_unpack_response:
8876  e390 89            	pushw	x
8877  e391 5204          	subw	sp,#4
8878       00000004      OFST:	set	4
8881                     ; 1695     const uint8_t *const start = buf;
8883  e393 1e09          	ldw	x,(OFST+5,sp)
8884  e395 1f01          	ldw	(OFST-3,sp),x
8886                     ; 1696     int16_t rv = mqtt_unpack_fixed_header(response, buf, bufsz);
8888  e397 1e0b          	ldw	x,(OFST+7,sp)
8889  e399 89            	pushw	x
8890  e39a 1e0b          	ldw	x,(OFST+7,sp)
8891  e39c 89            	pushw	x
8892  e39d 1e09          	ldw	x,(OFST+5,sp)
8893  e39f cdd9fc        	call	_mqtt_unpack_fixed_header
8895  e3a2 5b04          	addw	sp,#4
8896  e3a4 1f03          	ldw	(OFST-1,sp),x
8898                     ; 1698     if (rv <= 0) return rv;
8900  e3a6 9c            	rvf	
8904  e3a7 2d2c          	jrsle	L216
8905                     ; 1699     else buf += rv;
8907  e3a9 1e09          	ldw	x,(OFST+5,sp)
8908  e3ab 72fb03        	addw	x,(OFST-1,sp)
8909  e3ae 1f09          	ldw	(OFST+5,sp),x
8910                     ; 1701     switch(response->fixed_header.control_type) {
8912  e3b0 1e05          	ldw	x,(OFST+1,sp)
8913  e3b2 f6            	ld	a,(x)
8915                     ; 1728         default:
8915                     ; 1729             return MQTT_ERROR_RESPONSE_INVALID_CONTROL_TYPE;
8916  e3b3 a002          	sub	a,#2
8917  e3b5 2721          	jreq	L5263
8918  e3b7 4a            	dec	a
8919  e3b8 2728          	jreq	L7263
8920  e3ba 4a            	dec	a
8921  e3bb 272f          	jreq	L1363
8922  e3bd 4a            	dec	a
8923  e3be 2736          	jreq	L3363
8924  e3c0 4a            	dec	a
8925  e3c1 273d          	jreq	L5363
8926  e3c3 4a            	dec	a
8927  e3c4 2744          	jreq	L7363
8928  e3c6 a002          	sub	a,#2
8929  e3c8 274a          	jreq	L1463
8930  e3ca a002          	sub	a,#2
8931  e3cc 2750          	jreq	L3463
8932  e3ce a002          	sub	a,#2
8933  e3d0 2756          	jreq	L5463
8936  e3d2 ae800e        	ldw	x,#32782
8938  e3d5               L216:
8940  e3d5 5b06          	addw	sp,#6
8941  e3d7 81            	ret	
8942  e3d8               L5263:
8943                     ; 1702         case MQTT_CONTROL_CONNACK:
8943                     ; 1703             rv = mqtt_unpack_connack_response(response, buf);
8945  e3d8 1e09          	ldw	x,(OFST+5,sp)
8946  e3da 89            	pushw	x
8947  e3db 1e07          	ldw	x,(OFST+3,sp)
8948  e3dd cddcd2        	call	_mqtt_unpack_connack_response
8950                     ; 1704             break;
8952  e3e0 204a          	jra	L3173
8953  e3e2               L7263:
8954                     ; 1705         case MQTT_CONTROL_PUBLISH:
8954                     ; 1706             rv = mqtt_unpack_publish_response(response, buf);
8956  e3e2 1e09          	ldw	x,(OFST+5,sp)
8957  e3e4 89            	pushw	x
8958  e3e5 1e07          	ldw	x,(OFST+3,sp)
8959  e3e7 cdde43        	call	_mqtt_unpack_publish_response
8961                     ; 1707             break;
8963  e3ea 2040          	jra	L3173
8964  e3ec               L1363:
8965                     ; 1708         case MQTT_CONTROL_PUBACK:
8965                     ; 1709             rv = mqtt_unpack_pubxxx_response(response, buf);
8967  e3ec 1e09          	ldw	x,(OFST+5,sp)
8968  e3ee 89            	pushw	x
8969  e3ef 1e07          	ldw	x,(OFST+3,sp)
8970  e3f1 cddf70        	call	_mqtt_unpack_pubxxx_response
8972                     ; 1710             break;
8974  e3f4 2036          	jra	L3173
8975  e3f6               L3363:
8976                     ; 1711         case MQTT_CONTROL_PUBREC:
8976                     ; 1712             rv = mqtt_unpack_pubxxx_response(response, buf);
8978  e3f6 1e09          	ldw	x,(OFST+5,sp)
8979  e3f8 89            	pushw	x
8980  e3f9 1e07          	ldw	x,(OFST+3,sp)
8981  e3fb cddf70        	call	_mqtt_unpack_pubxxx_response
8983                     ; 1713             break;
8985  e3fe 202c          	jra	L3173
8986  e400               L5363:
8987                     ; 1714         case MQTT_CONTROL_PUBREL:
8987                     ; 1715             rv = mqtt_unpack_pubxxx_response(response, buf);
8989  e400 1e09          	ldw	x,(OFST+5,sp)
8990  e402 89            	pushw	x
8991  e403 1e07          	ldw	x,(OFST+3,sp)
8992  e405 cddf70        	call	_mqtt_unpack_pubxxx_response
8994                     ; 1716             break;
8996  e408 2022          	jra	L3173
8997  e40a               L7363:
8998                     ; 1717         case MQTT_CONTROL_PUBCOMP:
8998                     ; 1718             rv = mqtt_unpack_pubxxx_response(response, buf);
9000  e40a 1e09          	ldw	x,(OFST+5,sp)
9001  e40c 89            	pushw	x
9002  e40d 1e07          	ldw	x,(OFST+3,sp)
9003  e40f cddf70        	call	_mqtt_unpack_pubxxx_response
9005                     ; 1719             break;
9007  e412 2018          	jra	L3173
9008  e414               L1463:
9009                     ; 1720         case MQTT_CONTROL_SUBACK:
9009                     ; 1721             rv = mqtt_unpack_suback_response(response, buf);
9011  e414 1e09          	ldw	x,(OFST+5,sp)
9012  e416 89            	pushw	x
9013  e417 1e07          	ldw	x,(OFST+3,sp)
9014  e419 cddfa8        	call	_mqtt_unpack_suback_response
9016                     ; 1722             break;
9018  e41c 200e          	jra	L3173
9019  e41e               L3463:
9020                     ; 1723         case MQTT_CONTROL_UNSUBACK:
9020                     ; 1724             rv = mqtt_unpack_unsuback_response(response, buf);
9022  e41e 1e09          	ldw	x,(OFST+5,sp)
9023  e420 89            	pushw	x
9024  e421 1e07          	ldw	x,(OFST+3,sp)
9025  e423 cde11e        	call	_mqtt_unpack_unsuback_response
9027                     ; 1725             break;
9029  e426 2004          	jra	L3173
9030  e428               L5463:
9031                     ; 1726         case MQTT_CONTROL_PINGRESP:
9031                     ; 1727             return rv;
9033  e428 1e03          	ldw	x,(OFST-1,sp)
9035  e42a 20a9          	jra	L216
9036  e42c               L3173:
9037  e42c 5b02          	addw	sp,#2
9038  e42e 1f03          	ldw	(OFST-1,sp),x
9040                     ; 1732     if (rv < 0) return rv;
9045  e430 2ba3          	jrmi	L216
9046                     ; 1733     buf += rv;
9048  e432 72fb09        	addw	x,(OFST+5,sp)
9049  e435 1f09          	ldw	(OFST+5,sp),x
9050                     ; 1734     return buf - start;
9052  e437 72f001        	subw	x,(OFST-3,sp)
9054  e43a 2099          	jra	L216
9104                     ; 1751 int16_t __mqtt_pack_uint16(uint8_t *buf, uint16_t integer)
9104                     ; 1752 {
9105                     .text:	section	.text,new
9106  e43c               ___mqtt_pack_uint16:
9108  e43c 89            	pushw	x
9109  e43d 89            	pushw	x
9110       00000002      OFST:	set	2
9113                     ; 1753   uint16_t integer_htons = HTONS(integer);
9115  e43e 1e07          	ldw	x,(OFST+5,sp)
9116  e440 1f01          	ldw	(OFST-1,sp),x
9118                     ; 1754   memcpy(buf, &integer_htons, 2);
9120  e442 1e03          	ldw	x,(OFST+1,sp)
9121  e444 bf04          	ldw	c_x,x
9122  e446 9096          	ldw	y,sp
9123  e448 905c          	incw	y
9124  e44a 90bf07        	ldw	c_y,y
9125  e44d ae0002        	ldw	x,#2
9126  e450               L616:
9127  e450 5a            	decw	x
9128  e451 92d607        	ld	a,([c_y.w],x)
9129  e454 92d704        	ld	([c_x.w],x),a
9130  e457 5d            	tnzw	x
9131  e458 26f6          	jrne	L616
9132                     ; 1755   return 2;
9134  e45a ae0002        	ldw	x,#2
9137  e45d 5b04          	addw	sp,#4
9138  e45f 81            	ret	
9182                     ; 1759 uint16_t __mqtt_unpack_uint16(const uint8_t *buf)
9182                     ; 1760 {
9183                     .text:	section	.text,new
9184  e460               ___mqtt_unpack_uint16:
9186  e460 89            	pushw	x
9187  e461 89            	pushw	x
9188       00000002      OFST:	set	2
9191                     ; 1762   memcpy(&integer_htons, buf, 2);
9193  e462 96            	ldw	x,sp
9194  e463 5c            	incw	x
9195  e464 bf04          	ldw	c_x,x
9196  e466 1603          	ldw	y,(OFST+1,sp)
9197  e468 90bf07        	ldw	c_y,y
9198  e46b ae0002        	ldw	x,#2
9199  e46e               L226:
9200  e46e 5a            	decw	x
9201  e46f 92d607        	ld	a,([c_y.w],x)
9202  e472 92d704        	ld	([c_x.w],x),a
9203  e475 5d            	tnzw	x
9204  e476 26f6          	jrne	L226
9205                     ; 1763   return HTONS(integer_htons);
9207  e478 1e01          	ldw	x,(OFST-1,sp)
9210  e47a 5b04          	addw	sp,#4
9211  e47c 81            	ret	
9272                     ; 1767 int16_t __mqtt_pack_str(uint8_t *buf, const char* str)
9272                     ; 1768 {
9273                     .text:	section	.text,new
9274  e47d               ___mqtt_pack_str:
9276  e47d 89            	pushw	x
9277  e47e 5204          	subw	sp,#4
9278       00000004      OFST:	set	4
9281                     ; 1769     uint16_t length = (uint16_t)strlen(str);
9283  e480 1e09          	ldw	x,(OFST+5,sp)
9284  e482 cdf701        	call	_strlen
9286  e485 1f01          	ldw	(OFST-3,sp),x
9288                     ; 1770     int16_t i = 0;
9290  e487 5f            	clrw	x
9291  e488 1f03          	ldw	(OFST-1,sp),x
9293                     ; 1772     buf += __mqtt_pack_uint16(buf, length);
9295  e48a 1e01          	ldw	x,(OFST-3,sp)
9296  e48c 89            	pushw	x
9297  e48d 1e07          	ldw	x,(OFST+3,sp)
9298  e48f cde43c        	call	___mqtt_pack_uint16
9300  e492 5b02          	addw	sp,#2
9301  e494 72fb05        	addw	x,(OFST+1,sp)
9302  e497 1f05          	ldw	(OFST+1,sp),x
9304  e499 1e03          	ldw	x,(OFST-1,sp)
9305  e49b 200f          	jra	L3104
9306  e49d               L7004:
9307                     ; 1775     for(; i < length; ++i) *(buf++) = str[i];
9309  e49d 72fb09        	addw	x,(OFST+5,sp)
9310  e4a0 f6            	ld	a,(x)
9311  e4a1 1e05          	ldw	x,(OFST+1,sp)
9312  e4a3 f7            	ld	(x),a
9313  e4a4 5c            	incw	x
9314  e4a5 1f05          	ldw	(OFST+1,sp),x
9317  e4a7 1e03          	ldw	x,(OFST-1,sp)
9318  e4a9 5c            	incw	x
9319  e4aa 1f03          	ldw	(OFST-1,sp),x
9321  e4ac               L3104:
9324  e4ac 1301          	cpw	x,(OFST-3,sp)
9325  e4ae 25ed          	jrult	L7004
9326                     ; 1778     return length + 2;
9328  e4b0 1e01          	ldw	x,(OFST-3,sp)
9329  e4b2 1c0002        	addw	x,#2
9332  e4b5 5b06          	addw	sp,#6
9333  e4b7 81            	ret	
9397                     	switch	.bss
9398  016f               _mqtt_sendbuf:
9399  016f 000000000000  	ds.b	300
9400                     	xdef	_mqtt_sendbuf
9401  029b               _MQTT_error_status:
9402  029b 00            	ds.b	1
9403                     	xdef	_MQTT_error_status
9404                     	xref	_second_counter
9405                     	xref	_uip_flags
9406                     	xref	_uip_len
9407                     	xdef	_mqtt_disconnect
9408                     	xdef	___mqtt_ping
9409                     	xdef	_mqtt_ping
9410                     	xdef	_mqtt_unsubscribe
9411                     	xdef	_mqtt_subscribe
9412                     	xdef	___mqtt_pubcomp
9413                     	xdef	___mqtt_pubrel
9414                     	xdef	___mqtt_pubrec
9415                     	xdef	___mqtt_puback
9416                     	xdef	_mqtt_publish
9417                     	xdef	_mqtt_connect
9418                     	xdef	_mqtt_init
9419                     	xdef	_mqtt_sync
9420                     	xdef	___mqtt_recv
9421                     	xdef	___mqtt_send
9422                     	xdef	___mqtt_next_pid
9423                     	xdef	_mqtt_mq_find
9424                     	xdef	_mqtt_mq_register
9425                     	xdef	_mqtt_mq_clean
9426                     	xdef	_mqtt_mq_init
9427                     	xdef	_mqtt_pack_disconnect
9428                     	xdef	_mqtt_pack_ping_request
9429                     	xdef	_mqtt_pack_unsubscribe_request
9430                     	xdef	_mqtt_pack_subscribe_request
9431                     	xdef	_mqtt_pack_pubxxx_request
9432                     	xdef	_mqtt_pack_publish_request
9433                     	xdef	_mqtt_pack_connection_request
9434                     	xdef	_mqtt_pack_fixed_header
9435                     	xdef	_mqtt_unpack_response
9436                     	xdef	_mqtt_unpack_unsuback_response
9437                     	xdef	_mqtt_unpack_suback_response
9438                     	xdef	_mqtt_unpack_pubxxx_response
9439                     	xdef	_mqtt_unpack_publish_response
9440                     	xdef	_mqtt_unpack_connack_response
9441                     	xdef	_mqtt_unpack_fixed_header
9442                     	xdef	___mqtt_pack_str
9443                     	xdef	___mqtt_unpack_uint16
9444                     	xdef	___mqtt_pack_uint16
9445                     	xref	_mqtt_pal_recvall
9446                     	xref	_mqtt_pal_sendall
9447                     	xref	_memmove
9448                     	xref	_strlen
9449                     	switch	.const
9450  9f0d               L5051:
9451  9f0d 3f400000      	dc.w	16192,0
9452                     	xref.b	c_lreg
9453                     	xref.b	c_x
9454                     	xref.b	c_y
9474                     	xref	c_lgsbc
9475                     	xref	c_lgadc
9476                     	xref	c_lgursh
9477                     	xref	c_uitolx
9478                     	xref	c_lgadd
9479                     	xref	c_itoly
9480                     	xref	c_ltor
9481                     	xref	c_rtol
9482                     	xref	c_ftol
9483                     	xref	c_fmul
9484                     	xref	c_uitof
9485                     	xref	c_lcmp
9486                     	xref	c_ladd
9487                     	xref	c_itolx
9488                     	xref	c_bmulx
9489                     	xref	c_bmuly
9490                     	xref	c_sdivx
9491                     	end
