   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
 508                     ; 77 int16_t mqtt_sync(struct mqtt_client *client)
 508                     ; 78 {
 510                     .text:	section	.text,new
 511  cee7               _mqtt_sync:
 513  cee7 89            	pushw	x
 514  cee8 89            	pushw	x
 515       00000002      OFST:	set	2
 518                     ; 86     if ((uip_newdata() || uip_acked()) && uip_len > 0) {
 520  cee9 720202c005    	btjt	_uip_flags,#1,L172
 522  ceee 720102c011    	btjf	_uip_flags,#0,L762
 523  cef3               L172:
 525  cef3 ce036b        	ldw	x,_uip_len
 526  cef6 270c          	jreq	L762
 527                     ; 87       err = __mqtt_recv(client);
 529  cef8 1e03          	ldw	x,(OFST+1,sp)
 530  cefa cdd60d        	call	___mqtt_recv
 532  cefd 1f01          	ldw	(OFST-1,sp),x
 534                     ; 88       if (err != MQTT_OK) {
 536  ceff a30001        	cpw	x,#1
 537                     ; 89         return err;
 540  cf02 2616          	jrne	L772
 541  cf04               L762:
 542                     ; 98     err = __mqtt_send(client);
 544  cf04 1e03          	ldw	x,(OFST+1,sp)
 545  cf06 cdd42d        	call	___mqtt_send
 547  cf09 1f01          	ldw	(OFST-1,sp),x
 549                     ; 101     if (err == MQTT_OK) {
 551  cf0b a30001        	cpw	x,#1
 552  cf0e 2606          	jrne	L572
 553                     ; 102       MQTT_error_status = 1;
 555  cf10 35010297      	mov	_MQTT_error_status,#1
 557  cf14 2004          	jra	L772
 558  cf16               L572:
 559                     ; 104     else MQTT_error_status = 0;
 561  cf16 725f0297      	clr	_MQTT_error_status
 562  cf1a               L772:
 563                     ; 105     return err;
 567  cf1a 5b04          	addw	sp,#4
 568  cf1c 81            	ret	
 631                     ; 109 uint16_t __mqtt_next_pid(struct mqtt_client *client)
 631                     ; 110 {
 632                     .text:	section	.text,new
 633  cf1d               ___mqtt_next_pid:
 635  cf1d 89            	pushw	x
 636  cf1e 5204          	subw	sp,#4
 637       00000004      OFST:	set	4
 640                     ; 112     int16_t pid_exists = 0;
 642                     ; 113     if (client->pid_lfsr == 0) client->pid_lfsr = 163u;
 644  cf20 e601          	ld	a,(1,x)
 645  cf22 fa            	or	a,(x)
 646  cf23 2605          	jrne	L533
 649  cf25 90ae00a3      	ldw	y,#163
 650  cf29 ff            	ldw	(x),y
 651  cf2a               L533:
 652                     ; 119         unsigned lsb = client->pid_lfsr & 1;
 654  cf2a 1e05          	ldw	x,(OFST+1,sp)
 655  cf2c fe            	ldw	x,(x)
 656  cf2d 01            	rrwa	x,a
 657  cf2e a401          	and	a,#1
 658  cf30 5f            	clrw	x
 659  cf31 02            	rlwa	x,a
 660  cf32 1f03          	ldw	(OFST-1,sp),x
 661  cf34 01            	rrwa	x,a
 663                     ; 120         (client->pid_lfsr) >>= 1;
 665  cf35 1e05          	ldw	x,(OFST+1,sp)
 666  cf37 74            	srl	(x)
 667  cf38 6601          	rrc	(1,x)
 668                     ; 121         if (lsb) client->pid_lfsr ^= 0xB400u;
 670  cf3a 1e03          	ldw	x,(OFST-1,sp)
 671  cf3c 2706          	jreq	L343
 674  cf3e 1e05          	ldw	x,(OFST+1,sp)
 675  cf40 f6            	ld	a,(x)
 676  cf41 a8b4          	xor	a,#180
 677  cf43 f7            	ld	(x),a
 678  cf44               L343:
 679                     ; 124         pid_exists = 0;
 681  cf44 5f            	clrw	x
 682  cf45 1f03          	ldw	(OFST-1,sp),x
 684                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 686  cf47 1e05          	ldw	x,(OFST+1,sp)
 687  cf49 ee24          	ldw	x,(36,x)
 689  cf4b 201b          	jra	L153
 690  cf4d               L543:
 691                     ; 126             if (curr->packet_id == client->pid_lfsr) {
 693  cf4d 1e01          	ldw	x,(OFST-3,sp)
 694  cf4f 1605          	ldw	y,(OFST+1,sp)
 695  cf51 ee0a          	ldw	x,(10,x)
 696  cf53 90f3          	cpw	x,(y)
 697  cf55 260f          	jrne	L553
 698                     ; 127                 pid_exists = 1;
 700  cf57 ae0001        	ldw	x,#1
 701  cf5a 1f03          	ldw	(OFST-1,sp),x
 703                     ; 128                 break;
 704  cf5c               L733:
 705                     ; 132     } while(pid_exists);
 707  cf5c 1e03          	ldw	x,(OFST-1,sp)
 708  cf5e 26ca          	jrne	L533
 709                     ; 134     return client->pid_lfsr;
 711  cf60 1e05          	ldw	x,(OFST+1,sp)
 712  cf62 fe            	ldw	x,(x)
 715  cf63 5b06          	addw	sp,#6
 716  cf65 81            	ret	
 717  cf66               L553:
 718                     ; 125         for(curr = mqtt_mq_get(&(client->mq), 0); curr >= client->mq.queue_tail; --curr) {
 720  cf66 1e01          	ldw	x,(OFST-3,sp)
 721  cf68               L153:
 722  cf68 1d000c        	subw	x,#12
 723  cf6b 1f01          	ldw	(OFST-3,sp),x
 727  cf6d 1e05          	ldw	x,(OFST+1,sp)
 728  cf6f ee2a          	ldw	x,(42,x)
 729  cf71 1301          	cpw	x,(OFST-3,sp)
 730  cf73 23d8          	jrule	L543
 731  cf75 20e5          	jra	L733
 815                     ; 138 int16_t mqtt_init(struct mqtt_client *client,
 815                     ; 139                uint8_t *sendbuf, uint16_t sendbufsz,
 815                     ; 140                uint8_t *recvbuf, uint16_t recvbufsz,
 815                     ; 141                void (*publish_response_callback)(void** state,struct mqtt_response_publish *publish))
 815                     ; 142 {
 816                     .text:	section	.text,new
 817  cf77               _mqtt_init:
 819  cf77 89            	pushw	x
 820       00000000      OFST:	set	0
 823                     ; 143     if (client == NULL || sendbuf == NULL || recvbuf == NULL) {
 825  cf78 5d            	tnzw	x
 826  cf79 2708          	jreq	L124
 828  cf7b 1e05          	ldw	x,(OFST+5,sp)
 829  cf7d 2704          	jreq	L124
 831  cf7f 1e09          	ldw	x,(OFST+9,sp)
 832  cf81 2605          	jrne	L714
 833  cf83               L124:
 834                     ; 144       return MQTT_ERROR_NULLPTR;
 836  cf83 ae8001        	ldw	x,#32769
 838  cf86 2044          	jra	L22
 839  cf88               L714:
 840                     ; 147     mqtt_mq_init(&client->mq, sendbuf, sendbufsz);
 842  cf88 1e07          	ldw	x,(OFST+7,sp)
 843  cf8a 89            	pushw	x
 844  cf8b 1e07          	ldw	x,(OFST+7,sp)
 845  cf8d 89            	pushw	x
 846  cf8e 1e05          	ldw	x,(OFST+5,sp)
 847  cf90 1c0022        	addw	x,#34
 848  cf93 cde03e        	call	_mqtt_mq_init
 850  cf96 5b04          	addw	sp,#4
 851                     ; 149     client->recv_buffer.mem_start = recvbuf;
 853  cf98 1e01          	ldw	x,(OFST+1,sp)
 854  cf9a 1609          	ldw	y,(OFST+9,sp)
 855  cf9c ef1a          	ldw	(26,x),y
 856                     ; 150     client->recv_buffer.mem_size = recvbufsz;
 858  cf9e 160b          	ldw	y,(OFST+11,sp)
 859  cfa0 ef1c          	ldw	(28,x),y
 860                     ; 151     client->recv_buffer.curr = client->recv_buffer.mem_start;
 862  cfa2 9093          	ldw	y,x
 863  cfa4 90ee1a        	ldw	y,(26,y)
 864  cfa7 ef1e          	ldw	(30,x),y
 865                     ; 152     client->recv_buffer.curr_sz = client->recv_buffer.mem_size;
 867  cfa9 9093          	ldw	y,x
 868  cfab 90ee1c        	ldw	y,(28,y)
 869  cfae ef20          	ldw	(32,x),y
 870                     ; 154     client->error = MQTT_ERROR_CONNECT_NOT_CALLED;
 872  cfb0 90ae800f      	ldw	y,#32783
 873  cfb4 ef0a          	ldw	(10,x),y
 874                     ; 155     client->response_timeout = 30;
 876  cfb6 90ae001e      	ldw	y,#30
 877  cfba ef0c          	ldw	(12,x),y
 878                     ; 156     client->number_of_timeouts = 0;
 880  cfbc 905f          	clrw	y
 881  cfbe ef0e          	ldw	(14,x),y
 882                     ; 157     client->publish_response_callback = publish_response_callback;
 884  cfc0 160d          	ldw	y,(OFST+13,sp)
 885  cfc2 ef10          	ldw	(16,x),y
 886                     ; 158     client->pid_lfsr = 0;
 888  cfc4 905f          	clrw	y
 889  cfc6 ff            	ldw	(x),y
 890                     ; 159     client->send_offset = 0;
 892  cfc7 ef04          	ldw	(4,x),y
 893                     ; 161     return MQTT_OK;
 895  cfc9 ae0001        	ldw	x,#1
 897  cfcc               L22:
 899  cfcc 5b02          	addw	sp,#2
 900  cfce 81            	ret	
1030                     ; 228 int16_t mqtt_connect(struct mqtt_client *client,
1030                     ; 229                      const char* client_id,
1030                     ; 230                      const char* will_topic,
1030                     ; 231                      const void* will_message,
1030                     ; 232                      uint16_t will_message_size,
1030                     ; 233                      const char* user_name,
1030                     ; 234                      const char* password,
1030                     ; 235                      uint8_t connect_flags,
1030                     ; 236                      uint16_t keep_alive)
1030                     ; 237 {
1031                     .text:	section	.text,new
1032  cfcf               _mqtt_connect:
1034  cfcf 89            	pushw	x
1035  cfd0 89            	pushw	x
1036       00000002      OFST:	set	2
1039                     ; 242     client->keep_alive = keep_alive;
1041  cfd1 1614          	ldw	y,(OFST+18,sp)
1042  cfd3 ef02          	ldw	(2,x),y
1043                     ; 244     if (client->error == MQTT_ERROR_CONNECT_NOT_CALLED) {
1045  cfd5 9093          	ldw	y,x
1046  cfd7 90ee0a        	ldw	y,(10,y)
1047  cfda 90a3800f      	cpw	y,#32783
1048  cfde 2606          	jrne	L705
1049                     ; 245         client->error = MQTT_OK;
1051  cfe0 90ae0001      	ldw	y,#1
1052  cfe4 ef0a          	ldw	(10,x),y
1053  cfe6               L705:
1054                     ; 249     MQTT_CLIENT_TRY_PACK(rv, msg, client, 
1056  cfe6 e60a          	ld	a,(10,x)
1057  cfe8 2a04          	jrpl	L115
1060  cfea ee0a          	ldw	x,(10,x)
1062  cfec 2031          	jra	L63
1063  cfee               L115:
1066  cfee 1e14          	ldw	x,(OFST+18,sp)
1067  cff0 89            	pushw	x
1068  cff1 7b15          	ld	a,(OFST+19,sp)
1069  cff3 88            	push	a
1070  cff4 1e14          	ldw	x,(OFST+18,sp)
1071  cff6 89            	pushw	x
1072  cff7 1e14          	ldw	x,(OFST+18,sp)
1073  cff9 89            	pushw	x
1074  cffa 1e14          	ldw	x,(OFST+18,sp)
1075  cffc 89            	pushw	x
1076  cffd 1e14          	ldw	x,(OFST+18,sp)
1077  cfff 89            	pushw	x
1078  d000 1e14          	ldw	x,(OFST+18,sp)
1079  d002 89            	pushw	x
1080  d003 1e14          	ldw	x,(OFST+18,sp)
1081  d005 89            	pushw	x
1082  d006 1e12          	ldw	x,(OFST+16,sp)
1083  d008 ee28          	ldw	x,(40,x)
1084  d00a 89            	pushw	x
1085  d00b 1e14          	ldw	x,(OFST+18,sp)
1086  d00d ee26          	ldw	x,(38,x)
1087  d00f cdda56        	call	_mqtt_pack_connection_request
1089  d012 5b11          	addw	sp,#17
1090  d014 1f01          	ldw	(OFST-1,sp),x
1094  d016 2a0a          	jrpl	L315
1099  d018               LC001:
1101  d018 1e03          	ldw	x,(OFST+1,sp)
1102  d01a 1601          	ldw	y,(OFST-1,sp)
1103  d01c ef0a          	ldw	(10,x),y
1105  d01e 93            	ldw	x,y
1107  d01f               L63:
1109  d01f 5b04          	addw	sp,#4
1110  d021 81            	ret	
1111  d022               L315:
1114  d022 2641          	jrne	L515
1117  d024 1e03          	ldw	x,(OFST+1,sp)
1118  d026 1c0022        	addw	x,#34
1119  d029 cde0f4        	call	_mqtt_mq_clean
1123  d02c 1e14          	ldw	x,(OFST+18,sp)
1124  d02e 89            	pushw	x
1125  d02f 7b15          	ld	a,(OFST+19,sp)
1126  d031 88            	push	a
1127  d032 1e14          	ldw	x,(OFST+18,sp)
1128  d034 89            	pushw	x
1129  d035 1e14          	ldw	x,(OFST+18,sp)
1130  d037 89            	pushw	x
1131  d038 1e14          	ldw	x,(OFST+18,sp)
1132  d03a 89            	pushw	x
1133  d03b 1e14          	ldw	x,(OFST+18,sp)
1134  d03d 89            	pushw	x
1135  d03e 1e14          	ldw	x,(OFST+18,sp)
1136  d040 89            	pushw	x
1137  d041 1e14          	ldw	x,(OFST+18,sp)
1138  d043 89            	pushw	x
1139  d044 1e12          	ldw	x,(OFST+16,sp)
1140  d046 ee28          	ldw	x,(40,x)
1141  d048 89            	pushw	x
1142  d049 1e14          	ldw	x,(OFST+18,sp)
1143  d04b ee26          	ldw	x,(38,x)
1144  d04d cdda56        	call	_mqtt_pack_connection_request
1146  d050 5b11          	addw	sp,#17
1147  d052 1f01          	ldw	(OFST-1,sp),x
1154  d054 2bc2          	jrmi	LC001
1157  d056 260d          	jrne	L515
1160  d058 1e03          	ldw	x,(OFST+1,sp)
1161  d05a 90ae8010      	ldw	y,#32784
1162  d05e ef0a          	ldw	(10,x),y
1165  d060 ae8010        	ldw	x,#32784
1167  d063 20ba          	jra	L63
1168  d065               L515:
1171  d065 89            	pushw	x
1172  d066 1e05          	ldw	x,(OFST+3,sp)
1173  d068 1c0022        	addw	x,#34
1174  d06b cde08d        	call	_mqtt_mq_register
1176  d06e 5b02          	addw	sp,#2
1178                     ; 266     msg->control_type = MQTT_CONTROL_CONNECT;
1181  d070 a601          	ld	a,#1
1182  d072 e709          	ld	(9,x),a
1183                     ; 268     return MQTT_OK;
1185  d074 ae0001        	ldw	x,#1
1187  d077 20a6          	jra	L63
1290                     ; 272 int16_t mqtt_publish(struct mqtt_client *client,
1290                     ; 273                      const char* topic_name,
1290                     ; 274                      const void* application_message,
1290                     ; 275                      uint16_t application_message_size,
1290                     ; 276                      uint8_t publish_flags)
1290                     ; 277 {
1291                     .text:	section	.text,new
1292  d079               _mqtt_publish:
1294  d079 89            	pushw	x
1295  d07a 5204          	subw	sp,#4
1296       00000004      OFST:	set	4
1299                     ; 281     packet_id = __mqtt_next_pid(client);
1301  d07c cdcf1d        	call	___mqtt_next_pid
1303  d07f 1f01          	ldw	(OFST-3,sp),x
1305                     ; 284     MQTT_CLIENT_TRY_PACK(
1307  d081 1e05          	ldw	x,(OFST+1,sp)
1308  d083 e60a          	ld	a,(10,x)
1309  d085 2a04          	jrpl	L575
1312  d087 ee0a          	ldw	x,(10,x)
1314  d089 2028          	jra	L45
1315  d08b               L575:
1318  d08b 7b0f          	ld	a,(OFST+11,sp)
1319  d08d 88            	push	a
1320  d08e 1e0e          	ldw	x,(OFST+10,sp)
1321  d090 89            	pushw	x
1322  d091 1e0e          	ldw	x,(OFST+10,sp)
1323  d093 89            	pushw	x
1324  d094 1e06          	ldw	x,(OFST+2,sp)
1325  d096 89            	pushw	x
1326  d097 1e10          	ldw	x,(OFST+12,sp)
1327  d099 89            	pushw	x
1328  d09a 1e0e          	ldw	x,(OFST+10,sp)
1329  d09c ee28          	ldw	x,(40,x)
1330  d09e 89            	pushw	x
1331  d09f 1e10          	ldw	x,(OFST+12,sp)
1332  d0a1 ee26          	ldw	x,(38,x)
1333  d0a3 cddc50        	call	_mqtt_pack_publish_request
1335  d0a6 5b0b          	addw	sp,#11
1336  d0a8 1f03          	ldw	(OFST-1,sp),x
1340  d0aa 2a0a          	jrpl	L775
1345  d0ac               LC002:
1347  d0ac 1e05          	ldw	x,(OFST+1,sp)
1348  d0ae 1603          	ldw	y,(OFST-1,sp)
1349  d0b0 ef0a          	ldw	(10,x),y
1351  d0b2 93            	ldw	x,y
1353  d0b3               L45:
1355  d0b3 5b06          	addw	sp,#6
1356  d0b5 81            	ret	
1357  d0b6               L775:
1360  d0b6 2638          	jrne	L106
1363  d0b8 1e05          	ldw	x,(OFST+1,sp)
1364  d0ba 1c0022        	addw	x,#34
1365  d0bd cde0f4        	call	_mqtt_mq_clean
1369  d0c0 7b0f          	ld	a,(OFST+11,sp)
1370  d0c2 88            	push	a
1371  d0c3 1e0e          	ldw	x,(OFST+10,sp)
1372  d0c5 89            	pushw	x
1373  d0c6 1e0e          	ldw	x,(OFST+10,sp)
1374  d0c8 89            	pushw	x
1375  d0c9 1e06          	ldw	x,(OFST+2,sp)
1376  d0cb 89            	pushw	x
1377  d0cc 1e10          	ldw	x,(OFST+12,sp)
1378  d0ce 89            	pushw	x
1379  d0cf 1e0e          	ldw	x,(OFST+10,sp)
1380  d0d1 ee28          	ldw	x,(40,x)
1381  d0d3 89            	pushw	x
1382  d0d4 1e10          	ldw	x,(OFST+12,sp)
1383  d0d6 ee26          	ldw	x,(38,x)
1384  d0d8 cddc50        	call	_mqtt_pack_publish_request
1386  d0db 5b0b          	addw	sp,#11
1387  d0dd 1f03          	ldw	(OFST-1,sp),x
1394  d0df 2bcb          	jrmi	LC002
1397  d0e1 260d          	jrne	L106
1400  d0e3 1e05          	ldw	x,(OFST+1,sp)
1401  d0e5 90ae8010      	ldw	y,#32784
1402  d0e9 ef0a          	ldw	(10,x),y
1405  d0eb ae8010        	ldw	x,#32784
1407  d0ee 20c3          	jra	L45
1408  d0f0               L106:
1411  d0f0 89            	pushw	x
1412  d0f1 1e07          	ldw	x,(OFST+3,sp)
1413  d0f3 1c0022        	addw	x,#34
1414  d0f6 cde08d        	call	_mqtt_mq_register
1416  d0f9 5b02          	addw	sp,#2
1417  d0fb 1f03          	ldw	(OFST-1,sp),x
1419                     ; 298     msg->control_type = MQTT_CONTROL_PUBLISH;
1422  d0fd a603          	ld	a,#3
1423  d0ff e709          	ld	(9,x),a
1424                     ; 299     msg->packet_id = packet_id;
1426  d101 1601          	ldw	y,(OFST-3,sp)
1427  d103 ef0a          	ldw	(10,x),y
1428                     ; 301     return MQTT_OK;
1430  d105 ae0001        	ldw	x,#1
1432  d108 20a9          	jra	L45
1498                     ; 305 int16_t __mqtt_puback(struct mqtt_client *client, uint16_t packet_id) {
1499                     .text:	section	.text,new
1500  d10a               ___mqtt_puback:
1502  d10a 89            	pushw	x
1503  d10b 89            	pushw	x
1504       00000002      OFST:	set	2
1507                     ; 310     MQTT_CLIENT_TRY_PACK(
1509  d10c e60a          	ld	a,(10,x)
1510  d10e 2a04          	jrpl	L546
1513  d110 ee0a          	ldw	x,(10,x)
1515  d112 201e          	jra	L07
1516  d114               L546:
1519  d114 1e07          	ldw	x,(OFST+5,sp)
1520  d116 89            	pushw	x
1521  d117 4b04          	push	#4
1522  d119 1e06          	ldw	x,(OFST+4,sp)
1523  d11b ee28          	ldw	x,(40,x)
1524  d11d 89            	pushw	x
1525  d11e 1e08          	ldw	x,(OFST+6,sp)
1526  d120 ee26          	ldw	x,(38,x)
1527  d122 cdddec        	call	_mqtt_pack_pubxxx_request
1529  d125 5b05          	addw	sp,#5
1530  d127 1f01          	ldw	(OFST-1,sp),x
1534  d129 2a0a          	jrpl	L746
1539  d12b               LC003:
1541  d12b 1e03          	ldw	x,(OFST+1,sp)
1542  d12d 1601          	ldw	y,(OFST-1,sp)
1543  d12f ef0a          	ldw	(10,x),y
1545  d131 93            	ldw	x,y
1547  d132               L07:
1549  d132 5b04          	addw	sp,#4
1550  d134 81            	ret	
1551  d135               L746:
1554  d135 262e          	jrne	L156
1557  d137 1e03          	ldw	x,(OFST+1,sp)
1558  d139 1c0022        	addw	x,#34
1559  d13c cde0f4        	call	_mqtt_mq_clean
1563  d13f 1e07          	ldw	x,(OFST+5,sp)
1564  d141 89            	pushw	x
1565  d142 4b04          	push	#4
1566  d144 1e06          	ldw	x,(OFST+4,sp)
1567  d146 ee28          	ldw	x,(40,x)
1568  d148 89            	pushw	x
1569  d149 1e08          	ldw	x,(OFST+6,sp)
1570  d14b ee26          	ldw	x,(38,x)
1571  d14d cdddec        	call	_mqtt_pack_pubxxx_request
1573  d150 5b05          	addw	sp,#5
1574  d152 1f01          	ldw	(OFST-1,sp),x
1581  d154 2bd5          	jrmi	LC003
1584  d156 260d          	jrne	L156
1587  d158 1e03          	ldw	x,(OFST+1,sp)
1588  d15a 90ae8010      	ldw	y,#32784
1589  d15e ef0a          	ldw	(10,x),y
1592  d160 ae8010        	ldw	x,#32784
1594  d163 20cd          	jra	L07
1595  d165               L156:
1598  d165 89            	pushw	x
1599  d166 1e05          	ldw	x,(OFST+3,sp)
1600  d168 1c0022        	addw	x,#34
1601  d16b cde08d        	call	_mqtt_mq_register
1603  d16e 5b02          	addw	sp,#2
1604  d170 1f01          	ldw	(OFST-1,sp),x
1606                     ; 321     msg->control_type = MQTT_CONTROL_PUBACK;
1609  d172 a604          	ld	a,#4
1610  d174 e709          	ld	(9,x),a
1611                     ; 322     msg->packet_id = packet_id;
1613  d176 1607          	ldw	y,(OFST+5,sp)
1614  d178 ef0a          	ldw	(10,x),y
1615                     ; 324     return MQTT_OK;
1617  d17a ae0001        	ldw	x,#1
1619  d17d 20b3          	jra	L07
1685                     ; 328 int16_t __mqtt_pubrec(struct mqtt_client *client, uint16_t packet_id)
1685                     ; 329 {
1686                     .text:	section	.text,new
1687  d17f               ___mqtt_pubrec:
1689  d17f 89            	pushw	x
1690  d180 89            	pushw	x
1691       00000002      OFST:	set	2
1694                     ; 334     MQTT_CLIENT_TRY_PACK(
1696  d181 e60a          	ld	a,(10,x)
1697  d183 2a04          	jrpl	L517
1700  d185 ee0a          	ldw	x,(10,x)
1702  d187 201e          	jra	L401
1703  d189               L517:
1706  d189 1e07          	ldw	x,(OFST+5,sp)
1707  d18b 89            	pushw	x
1708  d18c 4b05          	push	#5
1709  d18e 1e06          	ldw	x,(OFST+4,sp)
1710  d190 ee28          	ldw	x,(40,x)
1711  d192 89            	pushw	x
1712  d193 1e08          	ldw	x,(OFST+6,sp)
1713  d195 ee26          	ldw	x,(38,x)
1714  d197 cdddec        	call	_mqtt_pack_pubxxx_request
1716  d19a 5b05          	addw	sp,#5
1717  d19c 1f01          	ldw	(OFST-1,sp),x
1721  d19e 2a0a          	jrpl	L717
1726  d1a0               LC004:
1728  d1a0 1e03          	ldw	x,(OFST+1,sp)
1729  d1a2 1601          	ldw	y,(OFST-1,sp)
1730  d1a4 ef0a          	ldw	(10,x),y
1732  d1a6 93            	ldw	x,y
1734  d1a7               L401:
1736  d1a7 5b04          	addw	sp,#4
1737  d1a9 81            	ret	
1738  d1aa               L717:
1741  d1aa 262e          	jrne	L127
1744  d1ac 1e03          	ldw	x,(OFST+1,sp)
1745  d1ae 1c0022        	addw	x,#34
1746  d1b1 cde0f4        	call	_mqtt_mq_clean
1750  d1b4 1e07          	ldw	x,(OFST+5,sp)
1751  d1b6 89            	pushw	x
1752  d1b7 4b05          	push	#5
1753  d1b9 1e06          	ldw	x,(OFST+4,sp)
1754  d1bb ee28          	ldw	x,(40,x)
1755  d1bd 89            	pushw	x
1756  d1be 1e08          	ldw	x,(OFST+6,sp)
1757  d1c0 ee26          	ldw	x,(38,x)
1758  d1c2 cdddec        	call	_mqtt_pack_pubxxx_request
1760  d1c5 5b05          	addw	sp,#5
1761  d1c7 1f01          	ldw	(OFST-1,sp),x
1768  d1c9 2bd5          	jrmi	LC004
1771  d1cb 260d          	jrne	L127
1774  d1cd 1e03          	ldw	x,(OFST+1,sp)
1775  d1cf 90ae8010      	ldw	y,#32784
1776  d1d3 ef0a          	ldw	(10,x),y
1779  d1d5 ae8010        	ldw	x,#32784
1781  d1d8 20cd          	jra	L401
1782  d1da               L127:
1785  d1da 89            	pushw	x
1786  d1db 1e05          	ldw	x,(OFST+3,sp)
1787  d1dd 1c0022        	addw	x,#34
1788  d1e0 cde08d        	call	_mqtt_mq_register
1790  d1e3 5b02          	addw	sp,#2
1791  d1e5 1f01          	ldw	(OFST-1,sp),x
1793                     ; 345     msg->control_type = MQTT_CONTROL_PUBREC;
1796  d1e7 a605          	ld	a,#5
1797  d1e9 e709          	ld	(9,x),a
1798                     ; 346     msg->packet_id = packet_id;
1800  d1eb 1607          	ldw	y,(OFST+5,sp)
1801  d1ed ef0a          	ldw	(10,x),y
1802                     ; 348     return MQTT_OK;
1804  d1ef ae0001        	ldw	x,#1
1806  d1f2 20b3          	jra	L401
1872                     ; 352 int16_t __mqtt_pubrel(struct mqtt_client *client, uint16_t packet_id)
1872                     ; 353 {
1873                     .text:	section	.text,new
1874  d1f4               ___mqtt_pubrel:
1876  d1f4 89            	pushw	x
1877  d1f5 89            	pushw	x
1878       00000002      OFST:	set	2
1881                     ; 358     MQTT_CLIENT_TRY_PACK(
1883  d1f6 e60a          	ld	a,(10,x)
1884  d1f8 2a04          	jrpl	L567
1887  d1fa ee0a          	ldw	x,(10,x)
1889  d1fc 201e          	jra	L021
1890  d1fe               L567:
1893  d1fe 1e07          	ldw	x,(OFST+5,sp)
1894  d200 89            	pushw	x
1895  d201 4b06          	push	#6
1896  d203 1e06          	ldw	x,(OFST+4,sp)
1897  d205 ee28          	ldw	x,(40,x)
1898  d207 89            	pushw	x
1899  d208 1e08          	ldw	x,(OFST+6,sp)
1900  d20a ee26          	ldw	x,(38,x)
1901  d20c cdddec        	call	_mqtt_pack_pubxxx_request
1903  d20f 5b05          	addw	sp,#5
1904  d211 1f01          	ldw	(OFST-1,sp),x
1908  d213 2a0a          	jrpl	L767
1913  d215               LC005:
1915  d215 1e03          	ldw	x,(OFST+1,sp)
1916  d217 1601          	ldw	y,(OFST-1,sp)
1917  d219 ef0a          	ldw	(10,x),y
1919  d21b 93            	ldw	x,y
1921  d21c               L021:
1923  d21c 5b04          	addw	sp,#4
1924  d21e 81            	ret	
1925  d21f               L767:
1928  d21f 262e          	jrne	L177
1931  d221 1e03          	ldw	x,(OFST+1,sp)
1932  d223 1c0022        	addw	x,#34
1933  d226 cde0f4        	call	_mqtt_mq_clean
1937  d229 1e07          	ldw	x,(OFST+5,sp)
1938  d22b 89            	pushw	x
1939  d22c 4b06          	push	#6
1940  d22e 1e06          	ldw	x,(OFST+4,sp)
1941  d230 ee28          	ldw	x,(40,x)
1942  d232 89            	pushw	x
1943  d233 1e08          	ldw	x,(OFST+6,sp)
1944  d235 ee26          	ldw	x,(38,x)
1945  d237 cdddec        	call	_mqtt_pack_pubxxx_request
1947  d23a 5b05          	addw	sp,#5
1948  d23c 1f01          	ldw	(OFST-1,sp),x
1955  d23e 2bd5          	jrmi	LC005
1958  d240 260d          	jrne	L177
1961  d242 1e03          	ldw	x,(OFST+1,sp)
1962  d244 90ae8010      	ldw	y,#32784
1963  d248 ef0a          	ldw	(10,x),y
1966  d24a ae8010        	ldw	x,#32784
1968  d24d 20cd          	jra	L021
1969  d24f               L177:
1972  d24f 89            	pushw	x
1973  d250 1e05          	ldw	x,(OFST+3,sp)
1974  d252 1c0022        	addw	x,#34
1975  d255 cde08d        	call	_mqtt_mq_register
1977  d258 5b02          	addw	sp,#2
1978  d25a 1f01          	ldw	(OFST-1,sp),x
1980                     ; 369     msg->control_type = MQTT_CONTROL_PUBREL;
1983  d25c a606          	ld	a,#6
1984  d25e e709          	ld	(9,x),a
1985                     ; 370     msg->packet_id = packet_id;
1987  d260 1607          	ldw	y,(OFST+5,sp)
1988  d262 ef0a          	ldw	(10,x),y
1989                     ; 372     return MQTT_OK;
1991  d264 ae0001        	ldw	x,#1
1993  d267 20b3          	jra	L021
2059                     ; 376 int16_t __mqtt_pubcomp(struct mqtt_client *client, uint16_t packet_id)
2059                     ; 377 {
2060                     .text:	section	.text,new
2061  d269               ___mqtt_pubcomp:
2063  d269 89            	pushw	x
2064  d26a 89            	pushw	x
2065       00000002      OFST:	set	2
2068                     ; 382     MQTT_CLIENT_TRY_PACK(
2070  d26b e60a          	ld	a,(10,x)
2071  d26d 2a04          	jrpl	L5301
2074  d26f ee0a          	ldw	x,(10,x)
2076  d271 201e          	jra	L431
2077  d273               L5301:
2080  d273 1e07          	ldw	x,(OFST+5,sp)
2081  d275 89            	pushw	x
2082  d276 4b07          	push	#7
2083  d278 1e06          	ldw	x,(OFST+4,sp)
2084  d27a ee28          	ldw	x,(40,x)
2085  d27c 89            	pushw	x
2086  d27d 1e08          	ldw	x,(OFST+6,sp)
2087  d27f ee26          	ldw	x,(38,x)
2088  d281 cdddec        	call	_mqtt_pack_pubxxx_request
2090  d284 5b05          	addw	sp,#5
2091  d286 1f01          	ldw	(OFST-1,sp),x
2095  d288 2a0a          	jrpl	L7301
2100  d28a               LC006:
2102  d28a 1e03          	ldw	x,(OFST+1,sp)
2103  d28c 1601          	ldw	y,(OFST-1,sp)
2104  d28e ef0a          	ldw	(10,x),y
2106  d290 93            	ldw	x,y
2108  d291               L431:
2110  d291 5b04          	addw	sp,#4
2111  d293 81            	ret	
2112  d294               L7301:
2115  d294 262e          	jrne	L1401
2118  d296 1e03          	ldw	x,(OFST+1,sp)
2119  d298 1c0022        	addw	x,#34
2120  d29b cde0f4        	call	_mqtt_mq_clean
2124  d29e 1e07          	ldw	x,(OFST+5,sp)
2125  d2a0 89            	pushw	x
2126  d2a1 4b07          	push	#7
2127  d2a3 1e06          	ldw	x,(OFST+4,sp)
2128  d2a5 ee28          	ldw	x,(40,x)
2129  d2a7 89            	pushw	x
2130  d2a8 1e08          	ldw	x,(OFST+6,sp)
2131  d2aa ee26          	ldw	x,(38,x)
2132  d2ac cdddec        	call	_mqtt_pack_pubxxx_request
2134  d2af 5b05          	addw	sp,#5
2135  d2b1 1f01          	ldw	(OFST-1,sp),x
2142  d2b3 2bd5          	jrmi	LC006
2145  d2b5 260d          	jrne	L1401
2148  d2b7 1e03          	ldw	x,(OFST+1,sp)
2149  d2b9 90ae8010      	ldw	y,#32784
2150  d2bd ef0a          	ldw	(10,x),y
2153  d2bf ae8010        	ldw	x,#32784
2155  d2c2 20cd          	jra	L431
2156  d2c4               L1401:
2159  d2c4 89            	pushw	x
2160  d2c5 1e05          	ldw	x,(OFST+3,sp)
2161  d2c7 1c0022        	addw	x,#34
2162  d2ca cde08d        	call	_mqtt_mq_register
2164  d2cd 5b02          	addw	sp,#2
2165  d2cf 1f01          	ldw	(OFST-1,sp),x
2167                     ; 393     msg->control_type = MQTT_CONTROL_PUBCOMP;
2170  d2d1 a607          	ld	a,#7
2171  d2d3 e709          	ld	(9,x),a
2172                     ; 394     msg->packet_id = packet_id;
2174  d2d5 1607          	ldw	y,(OFST+5,sp)
2175  d2d7 ef0a          	ldw	(10,x),y
2176                     ; 396     return MQTT_OK;
2178  d2d9 ae0001        	ldw	x,#1
2180  d2dc 20b3          	jra	L431
2264                     ; 400 int16_t mqtt_subscribe(struct mqtt_client *client,
2264                     ; 401                        const char* topic_name,
2264                     ; 402                        int16_t max_qos_level)
2264                     ; 403 {
2265                     .text:	section	.text,new
2266  d2de               _mqtt_subscribe:
2268  d2de 89            	pushw	x
2269  d2df 5204          	subw	sp,#4
2270       00000004      OFST:	set	4
2273                     ; 407     packet_id = __mqtt_next_pid(client);
2275  d2e1 cdcf1d        	call	___mqtt_next_pid
2277  d2e4 1f01          	ldw	(OFST-3,sp),x
2279                     ; 410     MQTT_CLIENT_TRY_PACK(
2281  d2e6 1e05          	ldw	x,(OFST+1,sp)
2282  d2e8 e60a          	ld	a,(10,x)
2283  d2ea 2a04          	jrpl	L3111
2286  d2ec ee0a          	ldw	x,(10,x)
2288  d2ee 2024          	jra	L251
2289  d2f0               L3111:
2292  d2f0 5f            	clrw	x
2293  d2f1 89            	pushw	x
2294  d2f2 1e0d          	ldw	x,(OFST+9,sp)
2295  d2f4 89            	pushw	x
2296  d2f5 1e0d          	ldw	x,(OFST+9,sp)
2297  d2f7 89            	pushw	x
2298  d2f8 1e07          	ldw	x,(OFST+3,sp)
2299  d2fa 89            	pushw	x
2300  d2fb 1e0d          	ldw	x,(OFST+9,sp)
2301  d2fd ee28          	ldw	x,(40,x)
2302  d2ff 89            	pushw	x
2303  d300 1e0f          	ldw	x,(OFST+11,sp)
2304  d302 ee26          	ldw	x,(38,x)
2305  d304 cddef8        	call	_mqtt_pack_subscribe_request
2307  d307 5b0a          	addw	sp,#10
2308  d309 1f03          	ldw	(OFST-1,sp),x
2312  d30b 2a0a          	jrpl	L5111
2317  d30d               LC007:
2319  d30d 1e05          	ldw	x,(OFST+1,sp)
2320  d30f 1603          	ldw	y,(OFST-1,sp)
2321  d311 ef0a          	ldw	(10,x),y
2323  d313 93            	ldw	x,y
2325  d314               L251:
2327  d314 5b06          	addw	sp,#6
2328  d316 81            	ret	
2329  d317               L5111:
2332  d317 2634          	jrne	L7111
2335  d319 1e05          	ldw	x,(OFST+1,sp)
2336  d31b 1c0022        	addw	x,#34
2337  d31e cde0f4        	call	_mqtt_mq_clean
2341  d321 5f            	clrw	x
2342  d322 89            	pushw	x
2343  d323 1e0d          	ldw	x,(OFST+9,sp)
2344  d325 89            	pushw	x
2345  d326 1e0d          	ldw	x,(OFST+9,sp)
2346  d328 89            	pushw	x
2347  d329 1e07          	ldw	x,(OFST+3,sp)
2348  d32b 89            	pushw	x
2349  d32c 1e0d          	ldw	x,(OFST+9,sp)
2350  d32e ee28          	ldw	x,(40,x)
2351  d330 89            	pushw	x
2352  d331 1e0f          	ldw	x,(OFST+11,sp)
2353  d333 ee26          	ldw	x,(38,x)
2354  d335 cddef8        	call	_mqtt_pack_subscribe_request
2356  d338 5b0a          	addw	sp,#10
2357  d33a 1f03          	ldw	(OFST-1,sp),x
2364  d33c 2bcf          	jrmi	LC007
2367  d33e 260d          	jrne	L7111
2370  d340 1e05          	ldw	x,(OFST+1,sp)
2371  d342 90ae8010      	ldw	y,#32784
2372  d346 ef0a          	ldw	(10,x),y
2375  d348 ae8010        	ldw	x,#32784
2377  d34b 20c7          	jra	L251
2378  d34d               L7111:
2381  d34d 89            	pushw	x
2382  d34e 1e07          	ldw	x,(OFST+3,sp)
2383  d350 1c0022        	addw	x,#34
2384  d353 cde08d        	call	_mqtt_mq_register
2386  d356 5b02          	addw	sp,#2
2387  d358 1f03          	ldw	(OFST-1,sp),x
2389                     ; 423     msg->control_type = MQTT_CONTROL_SUBSCRIBE;
2392  d35a a608          	ld	a,#8
2393  d35c e709          	ld	(9,x),a
2394                     ; 424     msg->packet_id = packet_id;
2396  d35e 1601          	ldw	y,(OFST-3,sp)
2397  d360 ef0a          	ldw	(10,x),y
2398                     ; 425     return MQTT_OK;
2400  d362 ae0001        	ldw	x,#1
2402  d365 20ad          	jra	L251
2479                     ; 429 int16_t mqtt_unsubscribe(struct mqtt_client *client,
2479                     ; 430                          const char* topic_name)
2479                     ; 431 {
2480                     .text:	section	.text,new
2481                     _mqtt_unsubscribe:
2483                     	pushw	x
2484                     	subw	sp,#4
2485       00000004      OFST:	set	4
2488                     ; 432     uint16_t packet_id = __mqtt_next_pid(client);
2490                     	call	___mqtt_next_pid
2492                     	ldw	(OFST-3,sp),x
2494                     ; 437     MQTT_CLIENT_TRY_PACK(
2496                     	ldw	x,(OFST+1,sp)
2497                     	ld	a,(10,x)
2498                     	jrpl	L7611
2501                     	ldw	x,(10,x)
2503                     	jra	L071
2504                     L7611:
2507                     	clrw	x
2508                     	pushw	x
2509                     	ldw	x,(OFST+7,sp)
2510                     	pushw	x
2511                     	ldw	x,(OFST+1,sp)
2512                     	pushw	x
2513                     	ldw	x,(OFST+7,sp)
2514                     	ldw	x,(40,x)
2515                     	pushw	x
2516                     	ldw	x,(OFST+9,sp)
2517                     	ldw	x,(38,x)
2518                     	call	_mqtt_pack_unsubscribe_request
2520                     	addw	sp,#8
2521                     	ldw	(OFST-1,sp),x
2525                     	jrpl	L1711
2530                     LC008:
2532                     	ldw	x,(OFST+1,sp)
2533                     	ldw	y,(OFST-1,sp)
2534                     	ldw	(10,x),y
2536                     	ldw	x,y
2538                     L071:
2540                     	addw	sp,#6
2541                     	ret	
2542                     L1711:
2545                     	jrne	L3711
2548                     	ldw	x,(OFST+1,sp)
2549                     	addw	x,#34
2550                     	call	_mqtt_mq_clean
2554                     	clrw	x
2555                     	pushw	x
2556                     	ldw	x,(OFST+7,sp)
2557                     	pushw	x
2558                     	ldw	x,(OFST+1,sp)
2559                     	pushw	x
2560                     	ldw	x,(OFST+7,sp)
2561                     	ldw	x,(40,x)
2562                     	pushw	x
2563                     	ldw	x,(OFST+9,sp)
2564                     	ldw	x,(38,x)
2565                     	call	_mqtt_pack_unsubscribe_request
2567                     	addw	sp,#8
2568                     	ldw	(OFST-1,sp),x
2575                     	jrmi	LC008
2578                     	jrne	L3711
2581                     	ldw	x,(OFST+1,sp)
2582                     	ldw	y,#32784
2583                     	ldw	(10,x),y
2586                     	ldw	x,#32784
2588                     	jra	L071
2589                     L3711:
2592                     	pushw	x
2593                     	ldw	x,(OFST+3,sp)
2594                     	addw	x,#34
2595                     	call	_mqtt_mq_register
2597                     	addw	sp,#2
2598                     	ldw	(OFST-1,sp),x
2600                     ; 449     msg->control_type = MQTT_CONTROL_UNSUBSCRIBE;
2603                     	ld	a,#10
2604                     	ld	(9,x),a
2605                     ; 450     msg->packet_id = packet_id;
2607                     	ldw	y,(OFST-3,sp)
2608                     	ldw	(10,x),y
2609                     ; 452     return MQTT_OK;
2611                     	ldw	x,#1
2613                     	jra	L071
2658                     ; 456 int16_t mqtt_ping(struct mqtt_client *client)
2658                     ; 457 {
2659                     .text:	section	.text,new
2660                     _mqtt_ping:
2662                     	pushw	x
2663       00000002      OFST:	set	2
2666                     ; 459     rv = __mqtt_ping(client);
2668                     	call	___mqtt_ping
2671                     ; 460     return rv;
2675                     	addw	sp,#2
2676                     	ret	
2735                     ; 464 int16_t __mqtt_ping(struct mqtt_client *client) 
2735                     ; 465 {
2736                     .text:	section	.text,new
2737  d367               ___mqtt_ping:
2739  d367 89            	pushw	x
2740  d368 89            	pushw	x
2741       00000002      OFST:	set	2
2744                     ; 470     MQTT_CLIENT_TRY_PACK(
2746  d369 e60a          	ld	a,(10,x)
2747  d36b 2a04          	jrpl	L7521
2750  d36d ee0a          	ldw	x,(10,x)
2752  d36f 2017          	jra	L012
2753  d371               L7521:
2756  d371 ee28          	ldw	x,(40,x)
2757  d373 89            	pushw	x
2758  d374 1e05          	ldw	x,(OFST+3,sp)
2759  d376 ee26          	ldw	x,(38,x)
2760  d378 cddc30        	call	_mqtt_pack_ping_request
2762  d37b 5b02          	addw	sp,#2
2763  d37d 1f01          	ldw	(OFST-1,sp),x
2767  d37f 2a0a          	jrpl	L1621
2772  d381               LC009:
2774  d381 1e03          	ldw	x,(OFST+1,sp)
2775  d383 1601          	ldw	y,(OFST-1,sp)
2776  d385 ef0a          	ldw	(10,x),y
2778  d387 93            	ldw	x,y
2780  d388               L012:
2782  d388 5b04          	addw	sp,#4
2783  d38a 81            	ret	
2784  d38b               L1621:
2787  d38b 2629          	jrne	L3621
2790  d38d 1e03          	ldw	x,(OFST+1,sp)
2791  d38f 1c0022        	addw	x,#34
2792  d392 cde0f4        	call	_mqtt_mq_clean
2796  d395 1e03          	ldw	x,(OFST+1,sp)
2797  d397 ee28          	ldw	x,(40,x)
2798  d399 89            	pushw	x
2799  d39a 1e05          	ldw	x,(OFST+3,sp)
2800  d39c ee26          	ldw	x,(38,x)
2801  d39e cddc30        	call	_mqtt_pack_ping_request
2803  d3a1 5b02          	addw	sp,#2
2804  d3a3 1f01          	ldw	(OFST-1,sp),x
2811  d3a5 2bda          	jrmi	LC009
2814  d3a7 260d          	jrne	L3621
2817  d3a9 1e03          	ldw	x,(OFST+1,sp)
2818  d3ab 90ae8010      	ldw	y,#32784
2819  d3af ef0a          	ldw	(10,x),y
2822  d3b1 ae8010        	ldw	x,#32784
2824  d3b4 20d2          	jra	L012
2825  d3b6               L3621:
2828  d3b6 89            	pushw	x
2829  d3b7 1e05          	ldw	x,(OFST+3,sp)
2830  d3b9 1c0022        	addw	x,#34
2831  d3bc cde08d        	call	_mqtt_mq_register
2833  d3bf 5b02          	addw	sp,#2
2835                     ; 479     msg->control_type = MQTT_CONTROL_PINGREQ;
2838  d3c1 a60c          	ld	a,#12
2839  d3c3 e709          	ld	(9,x),a
2840                     ; 481     return MQTT_OK;
2842  d3c5 ae0001        	ldw	x,#1
2844  d3c8 20be          	jra	L012
2903                     ; 485 int16_t mqtt_disconnect(struct mqtt_client *client) 
2903                     ; 486 {
2904                     .text:	section	.text,new
2905  d3ca               _mqtt_disconnect:
2907  d3ca 89            	pushw	x
2908  d3cb 89            	pushw	x
2909       00000002      OFST:	set	2
2912                     ; 491     MQTT_CLIENT_TRY_PACK(
2914  d3cc e60a          	ld	a,(10,x)
2915  d3ce 2a04          	jrpl	L5231
2918  d3d0 ee0a          	ldw	x,(10,x)
2920  d3d2 2017          	jra	L422
2921  d3d4               L5231:
2924  d3d4 ee28          	ldw	x,(40,x)
2925  d3d6 89            	pushw	x
2926  d3d7 1e05          	ldw	x,(OFST+3,sp)
2927  d3d9 ee26          	ldw	x,(38,x)
2928  d3db cddc10        	call	_mqtt_pack_disconnect
2930  d3de 5b02          	addw	sp,#2
2931  d3e0 1f01          	ldw	(OFST-1,sp),x
2935  d3e2 2a0a          	jrpl	L7231
2940  d3e4               LC010:
2942  d3e4 1e03          	ldw	x,(OFST+1,sp)
2943  d3e6 1601          	ldw	y,(OFST-1,sp)
2944  d3e8 ef0a          	ldw	(10,x),y
2946  d3ea 93            	ldw	x,y
2948  d3eb               L422:
2950  d3eb 5b04          	addw	sp,#4
2951  d3ed 81            	ret	
2952  d3ee               L7231:
2955  d3ee 2629          	jrne	L1331
2958  d3f0 1e03          	ldw	x,(OFST+1,sp)
2959  d3f2 1c0022        	addw	x,#34
2960  d3f5 cde0f4        	call	_mqtt_mq_clean
2964  d3f8 1e03          	ldw	x,(OFST+1,sp)
2965  d3fa ee28          	ldw	x,(40,x)
2966  d3fc 89            	pushw	x
2967  d3fd 1e05          	ldw	x,(OFST+3,sp)
2968  d3ff ee26          	ldw	x,(38,x)
2969  d401 cddc10        	call	_mqtt_pack_disconnect
2971  d404 5b02          	addw	sp,#2
2972  d406 1f01          	ldw	(OFST-1,sp),x
2979  d408 2bda          	jrmi	LC010
2982  d40a 260d          	jrne	L1331
2985  d40c 1e03          	ldw	x,(OFST+1,sp)
2986  d40e 90ae8010      	ldw	y,#32784
2987  d412 ef0a          	ldw	(10,x),y
2990  d414 ae8010        	ldw	x,#32784
2992  d417 20d2          	jra	L422
2993  d419               L1331:
2996  d419 89            	pushw	x
2997  d41a 1e05          	ldw	x,(OFST+3,sp)
2998  d41c 1c0022        	addw	x,#34
2999  d41f cde08d        	call	_mqtt_mq_register
3001  d422 5b02          	addw	sp,#2
3003                     ; 500     msg->control_type = MQTT_CONTROL_DISCONNECT;
3006  d424 a60e          	ld	a,#14
3007  d426 e709          	ld	(9,x),a
3008                     ; 502     return MQTT_OK;
3010  d428 ae0001        	ldw	x,#1
3012  d42b 20be          	jra	L422
3120                     ; 506 int16_t __mqtt_send(struct mqtt_client *client) 
3120                     ; 507 {
3121                     .text:	section	.text,new
3122  d42d               ___mqtt_send:
3124  d42d 89            	pushw	x
3125  d42e 520d          	subw	sp,#13
3126       0000000d      OFST:	set	13
3129                     ; 510     int16_t inflight_qos2 = 0;
3131  d430 5f            	clrw	x
3132  d431 1f07          	ldw	(OFST-6,sp),x
3134                     ; 511     int16_t i = 0;
3136  d433 1f0b          	ldw	(OFST-2,sp),x
3138                     ; 513     if (client->error < 0 && client->error != MQTT_ERROR_SEND_BUFFER_IS_FULL) {
3140  d435 1e0e          	ldw	x,(OFST+1,sp)
3141  d437 6d0a          	tnz	(10,x)
3142  d439 2a10          	jrpl	L1241
3144  d43b 9093          	ldw	y,x
3145  d43d 90ee0a        	ldw	y,(10,y)
3146  d440 90a38010      	cpw	y,#32784
3147  d444 2705          	jreq	L1241
3148                     ; 514       return client->error;
3150  d446 ee0a          	ldw	x,(10,x)
3152  d448 ccd510        	jra	L432
3153  d44b               L1241:
3154                     ; 518     len = mqtt_mq_length(&client->mq);
3156  d44b ee24          	ldw	x,(36,x)
3157  d44d 160e          	ldw	y,(OFST+1,sp)
3158  d44f 01            	rrwa	x,a
3159  d450 90e02b        	sub	a,(43,y)
3160  d453 01            	rrwa	x,a
3161  d454 90e22a        	sbc	a,(42,y)
3162  d457 01            	rrwa	x,a
3163  d458 a60c          	ld	a,#12
3164  d45a cdf9fa        	call	c_sdivx
3166  d45d 1f09          	ldw	(OFST-4,sp),x
3169  d45f ccd5fb        	jra	L7241
3170  d462               L3241:
3171                     ; 520         struct mqtt_queued_message *msg = mqtt_mq_get(&client->mq, i);
3173  d462 a60c          	ld	a,#12
3174  d464 cdf5fb        	call	c_bmulx
3176  d467 1f01          	ldw	(OFST-12,sp),x
3178  d469 1e0e          	ldw	x,(OFST+1,sp)
3179  d46b ee24          	ldw	x,(36,x)
3180  d46d 1d000c        	subw	x,#12
3181  d470 72f001        	subw	x,(OFST-12,sp)
3182  d473 1f05          	ldw	(OFST-8,sp),x
3184                     ; 521         int16_t resend = 0;
3186  d475 5f            	clrw	x
3187  d476 1f03          	ldw	(OFST-10,sp),x
3189                     ; 522         if (msg->state == MQTT_QUEUED_UNSENT) {
3191  d478 1e05          	ldw	x,(OFST-8,sp)
3192  d47a e604          	ld	a,(4,x)
3193  d47c 2607          	jrne	L3341
3194                     ; 524             resend = 1;
3196  d47e ae0001        	ldw	x,#1
3197  d481 1f03          	ldw	(OFST-10,sp),x
3200  d483 202f          	jra	L5341
3201  d485               L3341:
3202                     ; 526 	else if (msg->state == MQTT_QUEUED_AWAITING_ACK) {
3204  d485 4a            	dec	a
3205  d486 262c          	jrne	L5341
3206                     ; 528             if (second_counter > msg->time_sent + client->response_timeout) {
3208  d488 1e0e          	ldw	x,(OFST+1,sp)
3209  d48a ee0c          	ldw	x,(12,x)
3210  d48c cdf7c7        	call	c_itolx
3212  d48f 1e05          	ldw	x,(OFST-8,sp)
3213  d491 1c0005        	addw	x,#5
3214  d494 cdf7f9        	call	c_ladd
3216  d497 ae0298        	ldw	x,#_second_counter
3217  d49a cdf811        	call	c_lcmp
3219  d49d 2415          	jruge	L5341
3220                     ; 529                 resend = 1;
3222  d49f ae0001        	ldw	x,#1
3223  d4a2 1f03          	ldw	(OFST-10,sp),x
3225                     ; 530                 client->number_of_timeouts += 1;
3227  d4a4 1e0e          	ldw	x,(OFST+1,sp)
3228  d4a6 9093          	ldw	y,x
3229  d4a8 ee0e          	ldw	x,(14,x)
3230  d4aa 5c            	incw	x
3231  d4ab 90ef0e        	ldw	(14,y),x
3232                     ; 531                 client->send_offset = 0;
3234  d4ae 1e0e          	ldw	x,(OFST+1,sp)
3235  d4b0 905f          	clrw	y
3236  d4b2 ef04          	ldw	(4,x),y
3237  d4b4               L5341:
3238                     ; 536         if (msg->control_type == MQTT_CONTROL_PUBLISH
3238                     ; 537             && (msg->state == MQTT_QUEUED_UNSENT || msg->state == MQTT_QUEUED_AWAITING_ACK)) 
3240  d4b4 1e05          	ldw	x,(OFST-8,sp)
3241  d4b6 e609          	ld	a,(9,x)
3242  d4b8 a103          	cp	a,#3
3243  d4ba 261f          	jrne	L3441
3245  d4bc e604          	ld	a,(4,x)
3246  d4be 2704          	jreq	L5441
3248  d4c0 a101          	cp	a,#1
3249  d4c2 2617          	jrne	L3441
3250  d4c4               L5441:
3251                     ; 539             inspected = (uint8_t)(0x03 & ((msg->start[0]) >> 1)); // qos
3253  d4c4 fe            	ldw	x,(x)
3254  d4c5 f6            	ld	a,(x)
3255  d4c6 a406          	and	a,#6
3256  d4c8 44            	srl	a
3257  d4c9 6b0d          	ld	(OFST+0,sp),a
3259                     ; 540             if (inspected == 2) {
3261  d4cb a102          	cp	a,#2
3262  d4cd 260c          	jrne	L3441
3263                     ; 541                 if (inflight_qos2) resend = 0;
3265  d4cf 1e07          	ldw	x,(OFST-6,sp)
3266  d4d1 2703          	jreq	L1541
3269  d4d3 5f            	clrw	x
3270  d4d4 1f03          	ldw	(OFST-10,sp),x
3272  d4d6               L1541:
3273                     ; 542                 inflight_qos2 = 1;
3275  d4d6 ae0001        	ldw	x,#1
3276  d4d9 1f07          	ldw	(OFST-6,sp),x
3278  d4db               L3441:
3279                     ; 547         if (!resend) continue;
3281  d4db 1e03          	ldw	x,(OFST-10,sp)
3282  d4dd 2603ccd5d2    	jreq	L5241
3285                     ; 551           int16_t tmp = mqtt_pal_sendall(msg->start + client->send_offset, msg->size - client->send_offset);
3287  d4e2 1e05          	ldw	x,(OFST-8,sp)
3288  d4e4 160e          	ldw	y,(OFST+1,sp)
3289  d4e6 ee02          	ldw	x,(2,x)
3290  d4e8 01            	rrwa	x,a
3291  d4e9 90e005        	sub	a,(5,y)
3292  d4ec 01            	rrwa	x,a
3293  d4ed 90e204        	sbc	a,(4,y)
3294  d4f0 01            	rrwa	x,a
3295  d4f1 89            	pushw	x
3296  d4f2 1e10          	ldw	x,(OFST+3,sp)
3297  d4f4 1607          	ldw	y,(OFST-6,sp)
3298  d4f6 ee04          	ldw	x,(4,x)
3299  d4f8 01            	rrwa	x,a
3300  d4f9 90eb01        	add	a,(1,y)
3301  d4fc 01            	rrwa	x,a
3302  d4fd 90f9          	adc	a,(y)
3303  d4ff 01            	rrwa	x,a
3304  d500 cde3a6        	call	_mqtt_pal_sendall
3306  d503 5b02          	addw	sp,#2
3307  d505 1f03          	ldw	(OFST-10,sp),x
3309                     ; 554           if (tmp < 0) {
3311  d507 2a0a          	jrpl	L5541
3312                     ; 555             client->error = tmp;
3314  d509 1e0e          	ldw	x,(OFST+1,sp)
3315  d50b 1603          	ldw	y,(OFST-10,sp)
3316                     ; 556             return tmp;
3318  d50d               LC014:
3319  d50d ef0a          	ldw	(10,x),y
3321  d50f 93            	ldw	x,y
3323  d510               L432:
3325  d510 5b0f          	addw	sp,#15
3326  d512 81            	ret	
3327  d513               L5541:
3328                     ; 559             client->send_offset += tmp;
3330  d513 1e0e          	ldw	x,(OFST+1,sp)
3331  d515 9093          	ldw	y,x
3332  d517 ee04          	ldw	x,(4,x)
3333  d519 72fb03        	addw	x,(OFST-10,sp)
3334  d51c 90ef04        	ldw	(4,y),x
3335                     ; 560             if(client->send_offset < msg->size) {
3337  d51f 1e0e          	ldw	x,(OFST+1,sp)
3338  d521 1605          	ldw	y,(OFST-8,sp)
3339  d523 ee04          	ldw	x,(4,x)
3340  d525 90e302        	cpw	x,(2,y)
3341  d528 2441          	jruge	L1641
3342                     ; 562               break;
3343  d52a               L1341:
3344                     ; 629         uint32_t keep_alive_timeout = client->time_of_last_send + (uint32_t)((float)(client->keep_alive) * 0.75);
3346  d52a 1e0e          	ldw	x,(OFST+1,sp)
3347  d52c ee02          	ldw	x,(2,x)
3348  d52e cdfa1f        	call	c_uitof
3350  d531 ae9ee4        	ldw	x,#L5051
3351  d534 cdf66f        	call	c_fmul
3353  d537 cdf74a        	call	c_ftol
3355  d53a 1e0e          	ldw	x,(OFST+1,sp)
3356  d53c 1c0006        	addw	x,#6
3357  d53f cdf7f9        	call	c_ladd
3359  d542 96            	ldw	x,sp
3360  d543 1c0003        	addw	x,#OFST-10
3361  d546 cdf9e2        	call	c_rtol
3364                     ; 630         if (second_counter > keep_alive_timeout) {
3366  d549 ae0298        	ldw	x,#_second_counter
3367  d54c cdf87c        	call	c_ltor
3369  d54f 96            	ldw	x,sp
3370  d550 1c0003        	addw	x,#OFST-10
3371  d553 cdf811        	call	c_lcmp
3373  d556 2203ccd607    	jrule	L1151
3374                     ; 631           int16_t rv = __mqtt_ping(client);
3376  d55b 1e0e          	ldw	x,(OFST+1,sp)
3377  d55d cdd367        	call	___mqtt_ping
3379  d560 1f09          	ldw	(OFST-4,sp),x
3381                     ; 632           if (rv != MQTT_OK) {
3383  d562 5a            	decw	x
3384  d563 27f3          	jreq	L1151
3385                     ; 633             client->error = rv;
3387  d565 1e0e          	ldw	x,(OFST+1,sp)
3388  d567 1609          	ldw	y,(OFST-4,sp)
3389                     ; 634             return rv;
3391  d569 20a2          	jp	LC014
3392  d56b               L1641:
3393                     ; 567               client->send_offset = 0;
3395  d56b 1e0e          	ldw	x,(OFST+1,sp)
3396  d56d 905f          	clrw	y
3397  d56f ef04          	ldw	(4,x),y
3398                     ; 573         client->time_of_last_send = second_counter;
3400  d571 c6029b        	ld	a,_second_counter+3
3401  d574 e709          	ld	(9,x),a
3402  d576 c6029a        	ld	a,_second_counter+2
3403  d579 e708          	ld	(8,x),a
3404  d57b c60299        	ld	a,_second_counter+1
3405  d57e e707          	ld	(7,x),a
3406  d580 c60298        	ld	a,_second_counter
3407  d583 e706          	ld	(6,x),a
3408                     ; 574         msg->time_sent = client->time_of_last_send;
3410  d585 1605          	ldw	y,(OFST-8,sp)
3411  d587 e609          	ld	a,(9,x)
3412  d589 90e708        	ld	(8,y),a
3413  d58c e608          	ld	a,(8,x)
3414  d58e 90e707        	ld	(7,y),a
3415  d591 e607          	ld	a,(7,x)
3416  d593 90e706        	ld	(6,y),a
3417  d596 e606          	ld	a,(6,x)
3418                     ; 593         switch (msg->control_type) {
3420  d598 93            	ldw	x,y
3421  d599 90e705        	ld	(5,y),a
3422  d59c e609          	ld	a,(9,x)
3424                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3425  d59e 4a            	dec	a
3426  d59f 2756          	jreq	L7431
3427  d5a1 a002          	sub	a,#2
3428  d5a3 2734          	jreq	L5431
3429  d5a5 4a            	dec	a
3430  d5a6 2726          	jreq	L3431
3431  d5a8 4a            	dec	a
3432  d5a9 274c          	jreq	L7431
3433  d5ab 4a            	dec	a
3434  d5ac 2749          	jreq	L7431
3435  d5ae 4a            	dec	a
3436  d5af 271d          	jreq	L3431
3437  d5b1 4a            	dec	a
3438  d5b2 2743          	jreq	L7431
3439  d5b4 a002          	sub	a,#2
3440  d5b6 273f          	jreq	L7431
3441  d5b8 a002          	sub	a,#2
3442  d5ba 273b          	jreq	L7431
3443  d5bc a002          	sub	a,#2
3444  d5be 270e          	jreq	L3431
3445                     ; 621         default:
3445                     ; 622             client->error = MQTT_ERROR_MALFORMED_REQUEST;
3447  d5c0 1e0e          	ldw	x,(OFST+1,sp)
3448  d5c2 90ae8012      	ldw	y,#32786
3449  d5c6 ef0a          	ldw	(10,x),y
3450                     ; 623             return MQTT_ERROR_MALFORMED_REQUEST;
3452  d5c8 ae8012        	ldw	x,#32786
3454  d5cb ccd510        	jra	L432
3455  d5ce               L3431:
3456                     ; 594         case MQTT_CONTROL_PUBACK:
3456                     ; 595         case MQTT_CONTROL_PUBCOMP:
3456                     ; 596         case MQTT_CONTROL_DISCONNECT:
3456                     ; 597             msg->state = MQTT_QUEUED_COMPLETE;
3458  d5ce a602          	ld	a,#2
3459  d5d0               LC011:
3460  d5d0 e704          	ld	(4,x),a
3461                     ; 598             break;
3462  d5d2               L5241:
3463                     ; 519     for(; i < len; ++i) {
3465  d5d2 1e0b          	ldw	x,(OFST-2,sp)
3466  d5d4 5c            	incw	x
3467  d5d5 1f0b          	ldw	(OFST-2,sp),x
3469  d5d7 2022          	jra	L7241
3470  d5d9               L5431:
3471                     ; 599         case MQTT_CONTROL_PUBLISH:
3471                     ; 600             inspected = (uint8_t)(( MQTT_PUBLISH_QOS_MASK & (msg->start[0]) ) >> 1); /* qos */
3473  d5d9 fe            	ldw	x,(x)
3474  d5da f6            	ld	a,(x)
3475  d5db a406          	and	a,#6
3476  d5dd 44            	srl	a
3477  d5de 6b0d          	ld	(OFST+0,sp),a
3479                     ; 601             if (inspected == 0) {
3481  d5e0 2604          	jrne	L1741
3482                     ; 602                 msg->state = MQTT_QUEUED_COMPLETE;
3484  d5e2 1e05          	ldw	x,(OFST-8,sp)
3486  d5e4 20e8          	jp	L3431
3487  d5e6               L1741:
3488                     ; 604 	    else if (inspected == 1) {
3490  d5e6 4a            	dec	a
3491  d5e7 260c          	jrne	L5741
3492                     ; 605                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3494  d5e9 1e05          	ldw	x,(OFST-8,sp)
3495  d5eb 4c            	inc	a
3496  d5ec e704          	ld	(4,x),a
3497                     ; 607                 msg->start[0] |= MQTT_PUBLISH_DUP;
3499  d5ee fe            	ldw	x,(x)
3500  d5ef f6            	ld	a,(x)
3501  d5f0 aa08          	or	a,#8
3502  d5f2 f7            	ld	(x),a
3504  d5f3 20dd          	jra	L5241
3505  d5f5               L5741:
3506                     ; 610                 msg->state = MQTT_QUEUED_AWAITING_ACK;
3508  d5f5 1e05          	ldw	x,(OFST-8,sp)
3509  d5f7               L7431:
3510                     ; 613         case MQTT_CONTROL_CONNECT:
3510                     ; 614         case MQTT_CONTROL_PUBREC:
3510                     ; 615         case MQTT_CONTROL_PUBREL:
3510                     ; 616         case MQTT_CONTROL_SUBSCRIBE:
3510                     ; 617         case MQTT_CONTROL_UNSUBSCRIBE:
3510                     ; 618         case MQTT_CONTROL_PINGREQ:
3510                     ; 619             msg->state = MQTT_QUEUED_AWAITING_ACK;
3512  d5f7 a601          	ld	a,#1
3513                     ; 620             break;
3515  d5f9 20d5          	jp	LC011
3516  d5fb               L7241:
3517                     ; 519     for(; i < len; ++i) {
3519  d5fb 1e0b          	ldw	x,(OFST-2,sp)
3520  d5fd 1309          	cpw	x,(OFST-4,sp)
3521  d5ff 2e03ccd462    	jrslt	L3241
3522  d604 ccd52a        	jra	L1341
3523  d607               L1151:
3524                     ; 639     return MQTT_OK;
3526  d607 ae0001        	ldw	x,#1
3528  d60a ccd510        	jra	L432
4080                     ; 643 int16_t __mqtt_recv(struct mqtt_client *client)
4080                     ; 644 {
4081                     .text:	section	.text,new
4082  d60d               ___mqtt_recv:
4084  d60d 89            	pushw	x
4085  d60e 5220          	subw	sp,#32
4086       00000020      OFST:	set	32
4089                     ; 646     int16_t mqtt_recv_ret = MQTT_OK;
4091  d610 ae0001        	ldw	x,#1
4092  d613 1f07          	ldw	(OFST-25,sp),x
4094                     ; 648     struct mqtt_queued_message *msg = NULL;
4096                     ; 656     rv = mqtt_pal_recvall(client->recv_buffer.curr, client->recv_buffer.curr_sz);
4098  d615 1e21          	ldw	x,(OFST+1,sp)
4099  d617 ee20          	ldw	x,(32,x)
4100  d619 89            	pushw	x
4101  d61a 1e23          	ldw	x,(OFST+3,sp)
4102  d61c ee1e          	ldw	x,(30,x)
4103  d61e cde3bd        	call	_mqtt_pal_recvall
4105  d621 5b02          	addw	sp,#2
4106  d623 1f1f          	ldw	(OFST-1,sp),x
4108                     ; 658     client->recv_buffer.curr += rv;
4110  d625 1e21          	ldw	x,(OFST+1,sp)
4111  d627 9093          	ldw	y,x
4112  d629 ee1e          	ldw	x,(30,x)
4113  d62b 72fb1f        	addw	x,(OFST-1,sp)
4114  d62e 90ef1e        	ldw	(30,y),x
4115                     ; 659     client->recv_buffer.curr_sz -= rv;
4117  d631 1e21          	ldw	x,(OFST+1,sp)
4118  d633 9093          	ldw	y,x
4119  d635 ee20          	ldw	x,(32,x)
4120  d637 72f01f        	subw	x,(OFST-1,sp)
4121  d63a 90ef20        	ldw	(32,y),x
4122                     ; 662     consumed = mqtt_unpack_response(&response, client->recv_buffer.mem_start, client->recv_buffer.curr - client->recv_buffer.mem_start);
4124  d63d 1e21          	ldw	x,(OFST+1,sp)
4125  d63f 1621          	ldw	y,(OFST+1,sp)
4126  d641 ee1e          	ldw	x,(30,x)
4127  d643 01            	rrwa	x,a
4128  d644 90e01b        	sub	a,(27,y)
4129  d647 01            	rrwa	x,a
4130  d648 90e21a        	sbc	a,(26,y)
4131  d64b 01            	rrwa	x,a
4132  d64c 89            	pushw	x
4133  d64d 1e23          	ldw	x,(OFST+3,sp)
4134  d64f ee1a          	ldw	x,(26,x)
4135  d651 89            	pushw	x
4136  d652 96            	ldw	x,sp
4137  d653 1c000d        	addw	x,#OFST-19
4138  d656 cde27e        	call	_mqtt_unpack_response
4140  d659 5b04          	addw	sp,#4
4141  d65b 1f05          	ldw	(OFST-27,sp),x
4143                     ; 664     if (consumed < 0) {
4145  d65d 2a09          	jrpl	L7502
4146                     ; 665         client->error = consumed;
4148  d65f 1e21          	ldw	x,(OFST+1,sp)
4149  d661 1605          	ldw	y,(OFST-27,sp)
4150  d663 ef0a          	ldw	(10,x),y
4151                     ; 666         return consumed;
4153  d665 93            	ldw	x,y
4155  d666 2013          	jra	L403
4156  d668               L7502:
4157                     ; 668     else if (consumed == 0) {
4159  d668 2619          	jrne	L1602
4160                     ; 674         if (client->recv_buffer.curr_sz == 0) {
4162  d66a 1e21          	ldw	x,(OFST+1,sp)
4163  d66c e621          	ld	a,(33,x)
4164  d66e ea20          	or	a,(32,x)
4165  d670 260c          	jrne	L5602
4166                     ; 675             client->error = MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4168  d672 90ae8013      	ldw	y,#32787
4169  d676 ef0a          	ldw	(10,x),y
4170                     ; 676             return MQTT_ERROR_RECV_BUFFER_TOO_SMALL;
4172  d678 ae8013        	ldw	x,#32787
4174  d67b               L403:
4176  d67b 5b22          	addw	sp,#34
4177  d67d 81            	ret	
4178  d67e               L5602:
4179                     ; 680         return MQTT_OK;
4181  d67e ae0001        	ldw	x,#1
4183  d681 20f8          	jra	L403
4184  d683               L1602:
4185                     ; 712     switch (response.fixed_header.control_type) {
4187  d683 7b09          	ld	a,(OFST-23,sp)
4189                     ; 861             break;
4190  d685 a002          	sub	a,#2
4191  d687 2741          	jreq	L5151
4192  d689 4a            	dec	a
4193  d68a 2603ccd70c    	jreq	L7151
4194  d68f 4a            	dec	a
4195  d690 2603ccd771    	jreq	L1251
4196  d695 4a            	dec	a
4197  d696 2603ccd797    	jreq	L3251
4198  d69b 4a            	dec	a
4199  d69c 2603ccd7dc    	jreq	L5251
4200  d6a1 4a            	dec	a
4201  d6a2 2603ccd80d    	jreq	L7251
4202  d6a7 a002          	sub	a,#2
4203  d6a9 2603ccd817    	jreq	L1351
4204  d6ae a002          	sub	a,#2
4205  d6b0 2603ccd849    	jreq	L3351
4206  d6b5 a002          	sub	a,#2
4207  d6b7 2603ccd853    	jreq	L5351
4208                     ; 858         default:
4208                     ; 859             client->error = MQTT_ERROR_MALFORMED_RESPONSE;
4210  d6bc 1e21          	ldw	x,(OFST+1,sp)
4211  d6be 90ae800c      	ldw	y,#32780
4212  d6c2 ef0a          	ldw	(10,x),y
4213                     ; 860             mqtt_recv_ret = MQTT_ERROR_MALFORMED_RESPONSE;
4215  d6c4 ae800c        	ldw	x,#32780
4216                     ; 861             break;
4218  d6c7 ccd845        	jp	LC016
4219  d6ca               L5151:
4220                     ; 713         case MQTT_CONTROL_CONNACK:
4220                     ; 714 
4220                     ; 715             // release associated CONNECT
4220                     ; 716             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_CONNECT, NULL);
4222  d6ca 5f            	clrw	x
4223  d6cb 89            	pushw	x
4224  d6cc 4b01          	push	#1
4225  d6ce 1e24          	ldw	x,(OFST+4,sp)
4226  d6d0 1c0022        	addw	x,#34
4227  d6d3 cde242        	call	_mqtt_mq_find
4229  d6d6 5b03          	addw	sp,#3
4230  d6d8 1f1f          	ldw	(OFST-1,sp),x
4232                     ; 717             if (msg == NULL) {
4234                     ; 718                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4235                     ; 719                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4236                     ; 720                 break;
4238  d6da 2603ccd789    	jreq	LC017
4239                     ; 722             msg->state = MQTT_QUEUED_COMPLETE;
4241  d6df a602          	ld	a,#2
4242  d6e1 e704          	ld	(4,x),a
4243                     ; 724             if (response.decoded.connack.return_code != MQTT_CONNACK_ACCEPTED) {
4245  d6e3 0d13          	tnz	(OFST-13,sp)
4246  d6e5 2603ccd869    	jreq	L1702
4247                     ; 725                 if (response.decoded.connack.return_code == MQTT_CONNACK_REFUSED_IDENTIFIER_REJECTED) {
4249  d6ea 7b13          	ld	a,(OFST-13,sp)
4250  d6ec a102          	cp	a,#2
4251  d6ee 260e          	jrne	L7702
4252                     ; 726                     client->error = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4254  d6f0 1e21          	ldw	x,(OFST+1,sp)
4255  d6f2 90ae8005      	ldw	y,#32773
4256  d6f6 ef0a          	ldw	(10,x),y
4257                     ; 727                     mqtt_recv_ret = MQTT_ERROR_CONNECT_CLIENT_ID_REFUSED;
4259  d6f8 ae8005        	ldw	x,#32773
4261  d6fb ccd845        	jp	LC016
4262  d6fe               L7702:
4263                     ; 730                     client->error = MQTT_ERROR_CONNECTION_REFUSED;
4265  d6fe 1e21          	ldw	x,(OFST+1,sp)
4266  d700 90ae8016      	ldw	y,#32790
4267  d704 ef0a          	ldw	(10,x),y
4268                     ; 731                     mqtt_recv_ret = MQTT_ERROR_CONNECTION_REFUSED;
4270  d706 ae8016        	ldw	x,#32790
4271  d709 ccd845        	jp	LC016
4272  d70c               L7151:
4273                     ; 736         case MQTT_CONTROL_PUBLISH:
4273                     ; 737             // stage response, none if qos==0, PUBACK if qos==1, PUBREC if qos==2
4273                     ; 738             if (response.decoded.publish.qos_level == 1) {
4275  d70c 7b13          	ld	a,(OFST-13,sp)
4276  d70e a101          	cp	a,#1
4277  d710 2619          	jrne	L3012
4278                     ; 739                 rv = __mqtt_puback(client, response.decoded.publish.packet_id);
4280  d712 1e19          	ldw	x,(OFST-7,sp)
4281  d714 89            	pushw	x
4282  d715 1e23          	ldw	x,(OFST+3,sp)
4283  d717 cdd10a        	call	___mqtt_puback
4285  d71a 5b02          	addw	sp,#2
4286  d71c 1f1f          	ldw	(OFST-1,sp),x
4288                     ; 740                 if (rv != MQTT_OK) {
4290  d71e 5a            	decw	x
4291  d71f 273b          	jreq	L7012
4292                     ; 741                     client->error = rv;
4294  d721 1e21          	ldw	x,(OFST+1,sp)
4295  d723 161f          	ldw	y,(OFST-1,sp)
4296  d725 ef0a          	ldw	(10,x),y
4297                     ; 742                     mqtt_recv_ret = rv;
4299  d727 93            	ldw	x,y
4300                     ; 743                     break;
4302  d728 ccd845        	jp	LC016
4303  d72b               L3012:
4304                     ; 746             else if (response.decoded.publish.qos_level == 2) {
4306  d72b a102          	cp	a,#2
4307  d72d 262d          	jrne	L7012
4308                     ; 748                 if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.publish.packet_id) != NULL) {
4310  d72f 96            	ldw	x,sp
4311  d730 1c0019        	addw	x,#OFST-7
4312  d733 89            	pushw	x
4313  d734 4b05          	push	#5
4314  d736 1e24          	ldw	x,(OFST+4,sp)
4315  d738 1c0022        	addw	x,#34
4316  d73b cde242        	call	_mqtt_mq_find
4318  d73e 5b03          	addw	sp,#3
4319  d740 5d            	tnzw	x
4320  d741 26a4          	jrne	L1702
4321                     ; 749                     break;
4323                     ; 752                 rv = __mqtt_pubrec(client, response.decoded.publish.packet_id);
4325  d743 1e19          	ldw	x,(OFST-7,sp)
4326  d745 89            	pushw	x
4327  d746 1e23          	ldw	x,(OFST+3,sp)
4328  d748 cdd17f        	call	___mqtt_pubrec
4330  d74b 5b02          	addw	sp,#2
4331  d74d 1f1f          	ldw	(OFST-1,sp),x
4333                     ; 753                 if (rv != MQTT_OK) {
4335  d74f 5a            	decw	x
4336  d750 270a          	jreq	L7012
4337                     ; 754                     client->error = rv;
4339  d752 1e21          	ldw	x,(OFST+1,sp)
4340  d754 161f          	ldw	y,(OFST-1,sp)
4341  d756 ef0a          	ldw	(10,x),y
4342                     ; 755                     mqtt_recv_ret = rv;
4344  d758 93            	ldw	x,y
4345                     ; 756                     break;
4347  d759 ccd845        	jp	LC016
4348  d75c               L7012:
4349                     ; 761             client->publish_response_callback(&client->publish_response_callback_state, &response.decoded.publish);
4351  d75c 96            	ldw	x,sp
4352  d75d 1c0012        	addw	x,#OFST-14
4353  d760 89            	pushw	x
4354  d761 1e23          	ldw	x,(OFST+3,sp)
4355  d763 1623          	ldw	y,(OFST+3,sp)
4356  d765 1c0012        	addw	x,#18
4357  d768 90ee10        	ldw	y,(16,y)
4358  d76b 90fd          	call	(y)
4360  d76d 85            	popw	x
4361                     ; 762             break;
4363  d76e ccd869        	jra	L1702
4364  d771               L1251:
4365                     ; 763         case MQTT_CONTROL_PUBACK:
4365                     ; 764             // release associated PUBLISH
4365                     ; 765             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.puback.packet_id);
4367  d771 96            	ldw	x,sp
4368  d772 1c0012        	addw	x,#OFST-14
4369  d775 89            	pushw	x
4370  d776 4b03          	push	#3
4372                     ; 766             if (msg == NULL) {
4374  d778               LC018:
4375  d778 1e24          	ldw	x,(OFST+4,sp)
4376  d77a 1c0022        	addw	x,#34
4377  d77d cde242        	call	_mqtt_mq_find
4378  d780 5b03          	addw	sp,#3
4379  d782 1f1f          	ldw	(OFST-1,sp),x
4383  d784 2703ccd865    	jrne	L3412
4384                     ; 767                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4386                     ; 768                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4388  d789               LC017:
4396  d789 1e21          	ldw	x,(OFST+1,sp)
4397  d78b 90ae8014      	ldw	y,#32788
4398  d78f ef0a          	ldw	(10,x),y
4406  d791 ae8014        	ldw	x,#32788
4407                     ; 769                 break;
4409  d794 ccd845        	jp	LC016
4410                     ; 771             msg->state = MQTT_QUEUED_COMPLETE;
4411                     ; 772             break;
4413  d797               L3251:
4414                     ; 773         case MQTT_CONTROL_PUBREC:
4414                     ; 774             // check if this is a duplicate
4414                     ; 775             if (mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubrec.packet_id) != NULL) {
4416  d797 96            	ldw	x,sp
4417  d798 1c0012        	addw	x,#OFST-14
4418  d79b 89            	pushw	x
4419  d79c 4b06          	push	#6
4420  d79e 1e24          	ldw	x,(OFST+4,sp)
4421  d7a0 1c0022        	addw	x,#34
4422  d7a3 cde242        	call	_mqtt_mq_find
4424  d7a6 5b03          	addw	sp,#3
4425  d7a8 5d            	tnzw	x
4426  d7a9 26c3          	jrne	L1702
4427                     ; 776                 break;
4429                     ; 779             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBLISH, &response.decoded.pubrec.packet_id);
4431  d7ab 96            	ldw	x,sp
4432  d7ac 1c0012        	addw	x,#OFST-14
4433  d7af 89            	pushw	x
4434  d7b0 4b03          	push	#3
4435  d7b2 1e24          	ldw	x,(OFST+4,sp)
4436  d7b4 1c0022        	addw	x,#34
4437  d7b7 cde242        	call	_mqtt_mq_find
4439  d7ba 5b03          	addw	sp,#3
4440  d7bc 1f1f          	ldw	(OFST-1,sp),x
4442                     ; 780             if (msg == NULL) {
4444                     ; 781                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4445                     ; 782                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4446                     ; 783                 break;
4448  d7be 27c9          	jreq	LC017
4449                     ; 785             msg->state = MQTT_QUEUED_COMPLETE;
4451  d7c0 a602          	ld	a,#2
4452  d7c2 e704          	ld	(4,x),a
4453                     ; 787             rv = __mqtt_pubrel(client, response.decoded.pubrec.packet_id);
4455  d7c4 1e12          	ldw	x,(OFST-14,sp)
4456  d7c6 89            	pushw	x
4457  d7c7 1e23          	ldw	x,(OFST+3,sp)
4458  d7c9 cdd1f4        	call	___mqtt_pubrel
4460  d7cc 5b02          	addw	sp,#2
4461  d7ce 1f1f          	ldw	(OFST-1,sp),x
4463                     ; 788             if (rv != MQTT_OK) {
4465  d7d0 5a            	decw	x
4466  d7d1 279b          	jreq	L1702
4467                     ; 789                 client->error = rv;
4469  d7d3 1e21          	ldw	x,(OFST+1,sp)
4470  d7d5 161f          	ldw	y,(OFST-1,sp)
4471  d7d7 ef0a          	ldw	(10,x),y
4472                     ; 790                 mqtt_recv_ret = rv;
4474  d7d9 93            	ldw	x,y
4475                     ; 791                 break;
4477  d7da 2069          	jp	LC016
4478  d7dc               L5251:
4479                     ; 794         case MQTT_CONTROL_PUBREL:
4479                     ; 795             // release associated PUBREC
4479                     ; 796             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREC, &response.decoded.pubrel.packet_id);
4481  d7dc 96            	ldw	x,sp
4482  d7dd 1c0012        	addw	x,#OFST-14
4483  d7e0 89            	pushw	x
4484  d7e1 4b05          	push	#5
4485  d7e3 1e24          	ldw	x,(OFST+4,sp)
4486  d7e5 1c0022        	addw	x,#34
4487  d7e8 cde242        	call	_mqtt_mq_find
4489  d7eb 5b03          	addw	sp,#3
4490  d7ed 1f1f          	ldw	(OFST-1,sp),x
4492                     ; 797             if (msg == NULL) {
4494                     ; 798                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4495                     ; 799                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4496                     ; 800                 break;
4498  d7ef 2798          	jreq	LC017
4499                     ; 802             msg->state = MQTT_QUEUED_COMPLETE;
4501  d7f1 a602          	ld	a,#2
4502  d7f3 e704          	ld	(4,x),a
4503                     ; 804             rv = __mqtt_pubcomp(client, response.decoded.pubrec.packet_id);
4505  d7f5 1e12          	ldw	x,(OFST-14,sp)
4506  d7f7 89            	pushw	x
4507  d7f8 1e23          	ldw	x,(OFST+3,sp)
4508  d7fa cdd269        	call	___mqtt_pubcomp
4510  d7fd 5b02          	addw	sp,#2
4511  d7ff 1f1f          	ldw	(OFST-1,sp),x
4513                     ; 805             if (rv != MQTT_OK) {
4515  d801 5a            	decw	x
4516  d802 2765          	jreq	L1702
4517                     ; 806                 client->error = rv;
4519  d804 1e21          	ldw	x,(OFST+1,sp)
4520  d806 161f          	ldw	y,(OFST-1,sp)
4521  d808 ef0a          	ldw	(10,x),y
4522                     ; 807                 mqtt_recv_ret = rv;
4524  d80a 93            	ldw	x,y
4525                     ; 808                 break;
4527  d80b 2038          	jp	LC016
4528  d80d               L7251:
4529                     ; 811         case MQTT_CONTROL_PUBCOMP:
4529                     ; 812             // release associated PUBREL
4529                     ; 813             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PUBREL, &response.decoded.pubcomp.packet_id);
4531  d80d 96            	ldw	x,sp
4532  d80e 1c0012        	addw	x,#OFST-14
4533  d811 89            	pushw	x
4534  d812 4b06          	push	#6
4536                     ; 814             if (msg == NULL) {
4537                     ; 815                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4538                     ; 816                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4539                     ; 817                 break;
4541  d814 ccd778        	jp	LC018
4542                     ; 819             msg->state = MQTT_QUEUED_COMPLETE;
4543                     ; 820             break;
4545  d817               L1351:
4546                     ; 821         case MQTT_CONTROL_SUBACK:
4546                     ; 822             // release associated SUBSCRIBE
4546                     ; 823             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_SUBSCRIBE, &response.decoded.suback.packet_id);
4548  d817 96            	ldw	x,sp
4549  d818 1c0012        	addw	x,#OFST-14
4550  d81b 89            	pushw	x
4551  d81c 4b08          	push	#8
4552  d81e 1e24          	ldw	x,(OFST+4,sp)
4553  d820 1c0022        	addw	x,#34
4554  d823 cde242        	call	_mqtt_mq_find
4556  d826 5b03          	addw	sp,#3
4557  d828 1f1f          	ldw	(OFST-1,sp),x
4559                     ; 824             if (msg == NULL) {
4561                     ; 825                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4562                     ; 826                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4563                     ; 827                 break;
4565  d82a 2603ccd789    	jreq	LC017
4566                     ; 829             msg->state = MQTT_QUEUED_COMPLETE;
4568  d82f a602          	ld	a,#2
4569  d831 e704          	ld	(4,x),a
4570                     ; 832             if (response.decoded.suback.return_codes[0] == MQTT_SUBACK_FAILURE) {
4572  d833 1e14          	ldw	x,(OFST-12,sp)
4573  d835 f6            	ld	a,(x)
4574  d836 a180          	cp	a,#128
4575  d838 262f          	jrne	L1702
4576                     ; 833                 client->error = MQTT_ERROR_SUBSCRIBE_FAILED;
4578  d83a 1e21          	ldw	x,(OFST+1,sp)
4579  d83c 90ae8017      	ldw	y,#32791
4580  d840 ef0a          	ldw	(10,x),y
4581                     ; 834                 mqtt_recv_ret = MQTT_ERROR_SUBSCRIBE_FAILED;
4583  d842 ae8017        	ldw	x,#32791
4584  d845               LC016:
4585  d845 1f07          	ldw	(OFST-25,sp),x
4587                     ; 835                 break;
4589  d847 2020          	jra	L1702
4590  d849               L3351:
4591                     ; 838         case MQTT_CONTROL_UNSUBACK:
4591                     ; 839             // release associated UNSUBSCRIBE
4591                     ; 840             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_UNSUBSCRIBE, &response.decoded.unsuback.packet_id);
4593  d849 96            	ldw	x,sp
4594  d84a 1c0012        	addw	x,#OFST-14
4595  d84d 89            	pushw	x
4596  d84e 4b0a          	push	#10
4598                     ; 841             if (msg == NULL) {
4599                     ; 842                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4600                     ; 843                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4601                     ; 844                 break;
4603  d850 ccd778        	jp	LC018
4604                     ; 846             msg->state = MQTT_QUEUED_COMPLETE;
4605                     ; 847             break;
4607  d853               L5351:
4608                     ; 848         case MQTT_CONTROL_PINGRESP:
4608                     ; 849             // release associated PINGREQ
4608                     ; 850             msg = mqtt_mq_find(&client->mq, MQTT_CONTROL_PINGREQ, NULL);
4610  d853 5f            	clrw	x
4611  d854 89            	pushw	x
4612  d855 4b0c          	push	#12
4613  d857 1e24          	ldw	x,(OFST+4,sp)
4614  d859 1c0022        	addw	x,#34
4615  d85c cde242        	call	_mqtt_mq_find
4617  d85f 5b03          	addw	sp,#3
4618  d861 1f1f          	ldw	(OFST-1,sp),x
4620                     ; 851             if (msg == NULL) {
4622                     ; 852                 client->error = MQTT_ERROR_ACK_OF_UNKNOWN;
4623                     ; 853                 mqtt_recv_ret = MQTT_ERROR_ACK_OF_UNKNOWN;
4624                     ; 854                 break;
4626  d863 27c7          	jreq	LC017
4627  d865               L3412:
4628                     ; 856             msg->state = MQTT_QUEUED_COMPLETE;
4633  d865 a602          	ld	a,#2
4634  d867 e704          	ld	(4,x),a
4635                     ; 857             break;
4637  d869               L1702:
4638                     ; 890         void* dest = (unsigned char*)client->recv_buffer.mem_start;
4640  d869 1e21          	ldw	x,(OFST+1,sp)
4641  d86b ee1a          	ldw	x,(26,x)
4642  d86d 1f01          	ldw	(OFST-31,sp),x
4644                     ; 891         void* src  = (unsigned char*)client->recv_buffer.mem_start + consumed;
4646  d86f 1e21          	ldw	x,(OFST+1,sp)
4647  d871 ee1a          	ldw	x,(26,x)
4648  d873 72fb05        	addw	x,(OFST-27,sp)
4649  d876 1f03          	ldw	(OFST-29,sp),x
4651                     ; 892         uint16_t n = client->recv_buffer.curr - client->recv_buffer.mem_start - consumed;
4653  d878 1e21          	ldw	x,(OFST+1,sp)
4654  d87a 1621          	ldw	y,(OFST+1,sp)
4655  d87c ee1e          	ldw	x,(30,x)
4656  d87e 01            	rrwa	x,a
4657  d87f 90e01b        	sub	a,(27,y)
4658  d882 01            	rrwa	x,a
4659  d883 90e21a        	sbc	a,(26,y)
4660  d886 01            	rrwa	x,a
4661  d887 72f005        	subw	x,(OFST-27,sp)
4662  d88a 1f1f          	ldw	(OFST-1,sp),x
4664                     ; 893         memmove(dest, src, n);
4666  d88c 89            	pushw	x
4667  d88d 1e05          	ldw	x,(OFST-27,sp)
4668  d88f 89            	pushw	x
4669  d890 1e05          	ldw	x,(OFST-27,sp)
4670  d892 cdf58a        	call	_memmove
4672  d895 5b04          	addw	sp,#4
4673                     ; 894         client->recv_buffer.curr -= consumed;
4675  d897 1e21          	ldw	x,(OFST+1,sp)
4676  d899 9093          	ldw	y,x
4677  d89b ee1e          	ldw	x,(30,x)
4678  d89d 72f005        	subw	x,(OFST-27,sp)
4679  d8a0 90ef1e        	ldw	(30,y),x
4680                     ; 895         client->recv_buffer.curr_sz += consumed;
4682  d8a3 1e21          	ldw	x,(OFST+1,sp)
4683  d8a5 9093          	ldw	y,x
4684  d8a7 ee20          	ldw	x,(32,x)
4685  d8a9 72fb05        	addw	x,(OFST-27,sp)
4686  d8ac 90ef20        	ldw	(32,y),x
4687                     ; 904     return mqtt_recv_ret;
4689  d8af 1e07          	ldw	x,(OFST-25,sp)
4691  d8b1 ccd67b        	jra	L403
4694                     .const:	section	.text
4695  9ea4               L5412_control_type_is_valid:
4696  9ea4 00            	dc.b	0
4697  9ea5 01            	dc.b	1
4698  9ea6 01            	dc.b	1
4699  9ea7 01            	dc.b	1
4700  9ea8 01            	dc.b	1
4701  9ea9 01            	dc.b	1
4702  9eaa 01            	dc.b	1
4703  9eab 01            	dc.b	1
4704  9eac 01            	dc.b	1
4705  9ead 01            	dc.b	1
4706  9eae 01            	dc.b	1
4707  9eaf 01            	dc.b	1
4708  9eb0 01            	dc.b	1
4709  9eb1 01            	dc.b	1
4710  9eb2 01            	dc.b	1
4711  9eb3 00            	dc.b	0
4712  9eb4               L7412_required_flags:
4713  9eb4 00            	dc.b	0
4714  9eb5 00            	dc.b	0
4715  9eb6 00            	dc.b	0
4716  9eb7 00            	dc.b	0
4717  9eb8 00            	dc.b	0
4718  9eb9 00            	dc.b	0
4719  9eba 02            	dc.b	2
4720  9ebb 00            	dc.b	0
4721  9ebc 02            	dc.b	2
4722  9ebd 00            	dc.b	0
4723  9ebe 02            	dc.b	2
4724  9ebf 00            	dc.b	0
4725  9ec0 00            	dc.b	0
4726  9ec1 00            	dc.b	0
4727  9ec2 00            	dc.b	0
4728  9ec3 00            	dc.b	0
4729  9ec4               L1512_mask_required_flags:
4730  9ec4 00            	dc.b	0
4731  9ec5 0f            	dc.b	15
4732  9ec6 0f            	dc.b	15
4733  9ec7 00            	dc.b	0
4734  9ec8 0f            	dc.b	15
4735  9ec9 0f            	dc.b	15
4736  9eca 0f            	dc.b	15
4737  9ecb 0f            	dc.b	15
4738  9ecc 0f            	dc.b	15
4739  9ecd 0f            	dc.b	15
4740  9ece 0f            	dc.b	15
4741  9ecf 0f            	dc.b	15
4742  9ed0 0f            	dc.b	15
4743  9ed1 0f            	dc.b	15
4744  9ed2 0f            	dc.b	15
4745  9ed3 00            	dc.b	0
4798                     ; 966 static int16_t mqtt_fixed_header_rule_violation(const struct mqtt_fixed_header *fixed_header)
4798                     ; 967 {
4799                     .text:	section	.text,new
4800  d8b4               L3512_mqtt_fixed_header_rule_violation:
4802  d8b4 89            	pushw	x
4803       00000002      OFST:	set	2
4806                     ; 972     control_type = fixed_header->control_type;
4808  d8b5 f6            	ld	a,(x)
4809  d8b6 6b02          	ld	(OFST+0,sp),a
4811                     ; 973     control_flags = fixed_header->control_flags;
4813  d8b8 e604          	ld	a,(4,x)
4814  d8ba a40f          	and	a,#15
4815  d8bc 6b01          	ld	(OFST-1,sp),a
4817                     ; 976     if (control_type_is_valid[control_type] != 0x01) {
4819  d8be 5f            	clrw	x
4820  d8bf 7b02          	ld	a,(OFST+0,sp)
4821  d8c1 97            	ld	xl,a
4822  d8c2 d69ea4        	ld	a,(L5412_control_type_is_valid,x)
4823  d8c5 4a            	dec	a
4824  d8c6 2705          	jreq	L1022
4825                     ; 977         return MQTT_ERROR_CONTROL_FORBIDDEN_TYPE;
4827  d8c8 ae8002        	ldw	x,#32770
4829  d8cb 2017          	jra	L013
4830  d8cd               L1022:
4831                     ; 981     if(((control_flags ^ required_flags[control_type]) & mask_required_flags[control_type]) == 1) {
4833  d8cd 7b02          	ld	a,(OFST+0,sp)
4834  d8cf 5f            	clrw	x
4835  d8d0 97            	ld	xl,a
4836  d8d1 905f          	clrw	y
4837  d8d3 9097          	ld	yl,a
4838  d8d5 90d69eb4      	ld	a,(L7412_required_flags,y)
4839  d8d9 1801          	xor	a,(OFST-1,sp)
4840  d8db d49ec4        	and	a,(L1512_mask_required_flags,x)
4841  d8de 4a            	dec	a
4842  d8df 2606          	jrne	L3022
4843                     ; 982         return MQTT_ERROR_CONTROL_INVALID_FLAGS;
4845  d8e1 ae8003        	ldw	x,#32771
4847  d8e4               L013:
4849  d8e4 5b02          	addw	sp,#2
4850  d8e6 81            	ret	
4851  d8e7               L3022:
4852                     ; 985     return 0;
4854  d8e7 5f            	clrw	x
4856  d8e8 20fa          	jra	L013
4948                     ; 989 int16_t mqtt_unpack_fixed_header(struct mqtt_response *response, const uint8_t *buf, uint16_t bufsz)
4948                     ; 990 {
4949                     .text:	section	.text,new
4950  d8ea               _mqtt_unpack_fixed_header:
4952  d8ea 89            	pushw	x
4953  d8eb 520a          	subw	sp,#10
4954       0000000a      OFST:	set	10
4957                     ; 992     const uint8_t *start = buf;
4959  d8ed 1e0f          	ldw	x,(OFST+5,sp)
4960  d8ef 1f05          	ldw	(OFST-5,sp),x
4962                     ; 997     if (response == NULL || buf == NULL) {
4964  d8f1 1e0b          	ldw	x,(OFST+1,sp)
4965  d8f3 2704          	jreq	L3522
4967  d8f5 1e0f          	ldw	x,(OFST+5,sp)
4968  d8f7 2605          	jrne	L1522
4969  d8f9               L3522:
4970                     ; 998       return MQTT_ERROR_NULLPTR;
4972  d8f9 ae8001        	ldw	x,#32769
4974  d8fc 2009          	jra	L223
4975  d8fe               L1522:
4976                     ; 1000     fixed_header = &(response->fixed_header);
4978  d8fe 1e0b          	ldw	x,(OFST+1,sp)
4979  d900 1f07          	ldw	(OFST-3,sp),x
4981                     ; 1003     if (bufsz == 0) return 0;
4983  d902 1e11          	ldw	x,(OFST+7,sp)
4984  d904 2604          	jrne	L5522
4987  d906               LC019:
4990  d906 5f            	clrw	x
4992  d907               L223:
4994  d907 5b0c          	addw	sp,#12
4995  d909 81            	ret	
4996  d90a               L5522:
4997                     ; 1006     fixed_header->control_type  = (uint8_t)(*buf >> 4);
4999  d90a 1e0f          	ldw	x,(OFST+5,sp)
5000  d90c f6            	ld	a,(x)
5001  d90d 4e            	swap	a
5002  d90e 1e07          	ldw	x,(OFST-3,sp)
5003  d910 a40f          	and	a,#15
5004  d912 f7            	ld	(x),a
5005                     ; 1007     fixed_header->control_flags = (uint8_t)(*buf & 0x0F);
5007  d913 1e0f          	ldw	x,(OFST+5,sp)
5008  d915 f6            	ld	a,(x)
5009  d916 1e07          	ldw	x,(OFST-3,sp)
5010  d918 e804          	xor	a,(4,x)
5011  d91a a40f          	and	a,#15
5012  d91c e804          	xor	a,(4,x)
5013  d91e e704          	ld	(4,x),a
5014                     ; 1010     fixed_header->remaining_length = 0;
5016  d920 4f            	clr	a
5017  d921 e708          	ld	(8,x),a
5018  d923 e707          	ld	(7,x),a
5019  d925 e706          	ld	(6,x),a
5020  d927 e705          	ld	(5,x),a
5021                     ; 1012     lshift = 0;
5023  d929 5f            	clrw	x
5024  d92a 1f09          	ldw	(OFST-1,sp),x
5026  d92c               L7522:
5027                     ; 1015         if(lshift == 28) {
5029  d92c 1e09          	ldw	x,(OFST-1,sp)
5030  d92e a3001c        	cpw	x,#28
5031  d931 2605          	jrne	L5622
5032                     ; 1016             return MQTT_ERROR_INVALID_REMAINING_LENGTH;
5034  d933 ae801a        	ldw	x,#32794
5036  d936 20cf          	jra	L223
5037  d938               L5622:
5038                     ; 1020         --bufsz;
5040  d938 1e11          	ldw	x,(OFST+7,sp)
5041  d93a 5a            	decw	x
5042  d93b 1f11          	ldw	(OFST+7,sp),x
5043                     ; 1021         ++buf;
5045  d93d 1e0f          	ldw	x,(OFST+5,sp)
5046  d93f 5c            	incw	x
5047  d940 1f0f          	ldw	(OFST+5,sp),x
5048                     ; 1022         if (bufsz == 0) return 0;
5050  d942 1e11          	ldw	x,(OFST+7,sp)
5053  d944 27c0          	jreq	LC019
5054                     ; 1025         fixed_header->remaining_length += (*buf & 0x7F) << lshift;
5056  d946 160f          	ldw	y,(OFST+5,sp)
5057  d948 1e07          	ldw	x,(OFST-3,sp)
5058  d94a 90f6          	ld	a,(y)
5059  d94c a47f          	and	a,#127
5060  d94e 905f          	clrw	y
5061  d950 9097          	ld	yl,a
5062  d952 7b0a          	ld	a,(OFST+0,sp)
5063  d954 2705          	jreq	L413
5064  d956               L613:
5065  d956 9058          	sllw	y
5066  d958 4a            	dec	a
5067  d959 26fb          	jrne	L613
5068  d95b               L413:
5069  d95b cdf7d5        	call	c_itoly
5071  d95e 1c0005        	addw	x,#5
5072  d961 cdf841        	call	c_lgadd
5074                     ; 1026         lshift += 7;
5076  d964 1e09          	ldw	x,(OFST-1,sp)
5077  d966 1c0007        	addw	x,#7
5078  d969 1f09          	ldw	(OFST-1,sp),x
5080                     ; 1027     } while(*buf & 0x80); /* while continue bit is set */ 
5082  d96b 1e0f          	ldw	x,(OFST+5,sp)
5083  d96d f6            	ld	a,(x)
5084  d96e 2bbc          	jrmi	L7522
5085                     ; 1030     --bufsz;
5087  d970 1e11          	ldw	x,(OFST+7,sp)
5088  d972 5a            	decw	x
5089  d973 1f11          	ldw	(OFST+7,sp),x
5090                     ; 1031     ++buf;
5092  d975 1e0f          	ldw	x,(OFST+5,sp)
5093  d977 5c            	incw	x
5094  d978 1f0f          	ldw	(OFST+5,sp),x
5095                     ; 1034     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5097  d97a 1e07          	ldw	x,(OFST-3,sp)
5098  d97c cdd8b4        	call	L3512_mqtt_fixed_header_rule_violation
5100  d97f 1f09          	ldw	(OFST-1,sp),x
5102                     ; 1035     if (errcode) return errcode;
5107  d981 2684          	jrne	L223
5108                     ; 1038     if (bufsz < fixed_header->remaining_length) return 0;
5110  d983 1e11          	ldw	x,(OFST+7,sp)
5111  d985 cdfa43        	call	c_uitolx
5113  d988 96            	ldw	x,sp
5114  d989 5c            	incw	x
5115  d98a cdf9e2        	call	c_rtol
5118  d98d 1e07          	ldw	x,(OFST-3,sp)
5119  d98f 1c0005        	addw	x,#5
5120  d992 cdf87c        	call	c_ltor
5122  d995 96            	ldw	x,sp
5123  d996 5c            	incw	x
5124  d997 cdf811        	call	c_lcmp
5128  d99a 2303ccd906    	jrugt	LC019
5129                     ; 1041     return buf - start;
5131  d99f 1e0f          	ldw	x,(OFST+5,sp)
5132  d9a1 72f005        	subw	x,(OFST-5,sp)
5134  d9a4 ccd907        	jra	L223
5214                     	switch	.const
5215  9ed4               L033:
5216  9ed4 00000080      	dc.l	128
5217                     ; 1045 int16_t mqtt_pack_fixed_header(uint8_t *buf, uint16_t bufsz, const struct mqtt_fixed_header *fixed_header)
5217                     ; 1046 {
5218                     .text:	section	.text,new
5219  d9a7               _mqtt_pack_fixed_header:
5221  d9a7 89            	pushw	x
5222  d9a8 520c          	subw	sp,#12
5223       0000000c      OFST:	set	12
5226                     ; 1047     const uint8_t *start = buf;
5228  d9aa 1f05          	ldw	(OFST-7,sp),x
5230                     ; 1052     if (fixed_header == NULL || buf == NULL) {
5232  d9ac 1e13          	ldw	x,(OFST+7,sp)
5233  d9ae 2704          	jreq	L5332
5235  d9b0 1e0d          	ldw	x,(OFST+1,sp)
5236  d9b2 2605          	jrne	L3332
5237  d9b4               L5332:
5238                     ; 1053       return MQTT_ERROR_NULLPTR;
5240  d9b4 ae8001        	ldw	x,#32769
5242  d9b7 2009          	jra	L233
5243  d9b9               L3332:
5244                     ; 1057     errcode = mqtt_fixed_header_rule_violation(fixed_header);
5246  d9b9 1e13          	ldw	x,(OFST+7,sp)
5247  d9bb cdd8b4        	call	L3512_mqtt_fixed_header_rule_violation
5249  d9be 1f07          	ldw	(OFST-5,sp),x
5251                     ; 1058     if (errcode) return errcode;
5253  d9c0 2703          	jreq	L7332
5257  d9c2               L233:
5259  d9c2 5b0e          	addw	sp,#14
5260  d9c4 81            	ret	
5261  d9c5               L7332:
5262                     ; 1061     if (bufsz == 0) return 0;
5264  d9c5 1e11          	ldw	x,(OFST+5,sp)
5265  d9c7 2603          	jrne	L1432
5268  d9c9 5f            	clrw	x
5270  d9ca 20f6          	jra	L233
5271  d9cc               L1432:
5272                     ; 1064     *buf =  (uint8_t)((fixed_header->control_type << 4) & 0xF0);
5274  d9cc 1e13          	ldw	x,(OFST+7,sp)
5275  d9ce f6            	ld	a,(x)
5276  d9cf 97            	ld	xl,a
5277  d9d0 a610          	ld	a,#16
5278  d9d2 42            	mul	x,a
5279  d9d3 9f            	ld	a,xl
5280  d9d4 1e0d          	ldw	x,(OFST+1,sp)
5281  d9d6 a4f0          	and	a,#240
5282  d9d8 f7            	ld	(x),a
5283                     ; 1065     *buf |= (uint8_t)(fixed_header->control_flags & 0x0F);
5285  d9d9 1613          	ldw	y,(OFST+7,sp)
5286  d9db 90e604        	ld	a,(4,y)
5287  d9de a40f          	and	a,#15
5288  d9e0 fa            	or	a,(x)
5289  d9e1 f7            	ld	(x),a
5290                     ; 1067     remaining_length = fixed_header->remaining_length;
5292  d9e2 93            	ldw	x,y
5293  d9e3 ee07          	ldw	x,(7,x)
5294  d9e5 1f0b          	ldw	(OFST-1,sp),x
5295  d9e7 93            	ldw	x,y
5296  d9e8 ee05          	ldw	x,(5,x)
5297  d9ea 1f09          	ldw	(OFST-3,sp),x
5299  d9ec               L3432:
5300                     ; 1075         --bufsz;
5302  d9ec 1e11          	ldw	x,(OFST+5,sp)
5303  d9ee 5a            	decw	x
5304  d9ef 1f11          	ldw	(OFST+5,sp),x
5305                     ; 1076         ++buf;
5307  d9f1 1e0d          	ldw	x,(OFST+1,sp)
5308  d9f3 5c            	incw	x
5309  d9f4 1f0d          	ldw	(OFST+1,sp),x
5310                     ; 1077         if (bufsz == 0) return 0;
5312  d9f6 1e11          	ldw	x,(OFST+5,sp)
5313  d9f8 2603          	jrne	L1532
5316  d9fa 5f            	clrw	x
5318  d9fb 20c5          	jra	L233
5319  d9fd               L1532:
5320                     ; 1080         *buf  = (uint8_t)(remaining_length & 0x7F);
5322  d9fd 7b0c          	ld	a,(OFST+0,sp)
5323  d9ff 1e0d          	ldw	x,(OFST+1,sp)
5324  da01 a47f          	and	a,#127
5325  da03 f7            	ld	(x),a
5326                     ; 1081         if(remaining_length > 127) *buf |= 0x80;
5328  da04 96            	ldw	x,sp
5329  da05 1c0009        	addw	x,#OFST-3
5330  da08 cdf87c        	call	c_ltor
5332  da0b ae9ed4        	ldw	x,#L033
5333  da0e cdf811        	call	c_lcmp
5335  da11 2506          	jrult	L3532
5338  da13 1e0d          	ldw	x,(OFST+1,sp)
5339  da15 f6            	ld	a,(x)
5340  da16 aa80          	or	a,#128
5341  da18 f7            	ld	(x),a
5342  da19               L3532:
5343                     ; 1082         remaining_length = remaining_length >> 7;
5345  da19 96            	ldw	x,sp
5346  da1a 1c0009        	addw	x,#OFST-3
5347  da1d a607          	ld	a,#7
5348  da1f cdf86e        	call	c_lgursh
5351                     ; 1083     } while(*buf & 0x80);
5353  da22 1e0d          	ldw	x,(OFST+1,sp)
5354  da24 f6            	ld	a,(x)
5355  da25 2bc5          	jrmi	L3432
5356                     ; 1086     --bufsz;
5358  da27 1e11          	ldw	x,(OFST+5,sp)
5359  da29 5a            	decw	x
5360  da2a 1f11          	ldw	(OFST+5,sp),x
5361                     ; 1087     ++buf;
5363  da2c 1e0d          	ldw	x,(OFST+1,sp)
5364  da2e 5c            	incw	x
5365  da2f 1f0d          	ldw	(OFST+1,sp),x
5366                     ; 1090     if (bufsz < fixed_header->remaining_length) return 0;
5368  da31 1e11          	ldw	x,(OFST+5,sp)
5369  da33 cdfa43        	call	c_uitolx
5371  da36 96            	ldw	x,sp
5372  da37 5c            	incw	x
5373  da38 cdf9e2        	call	c_rtol
5376  da3b 1e13          	ldw	x,(OFST+7,sp)
5377  da3d 1c0005        	addw	x,#5
5378  da40 cdf87c        	call	c_ltor
5380  da43 96            	ldw	x,sp
5381  da44 5c            	incw	x
5382  da45 cdf811        	call	c_lcmp
5384  da48 2304          	jrule	L5532
5387  da4a 5f            	clrw	x
5389  da4b ccd9c2        	jra	L233
5390  da4e               L5532:
5391                     ; 1093     return buf - start;
5393  da4e 1e0d          	ldw	x,(OFST+1,sp)
5394  da50 72f005        	subw	x,(OFST-7,sp)
5396  da53 ccd9c2        	jra	L233
5549                     ; 1098 int16_t mqtt_pack_connection_request(uint8_t* buf, uint16_t bufsz,
5549                     ; 1099                                      const char* client_id,
5549                     ; 1100                                      const char* will_topic,
5549                     ; 1101                                      const void* will_message,
5549                     ; 1102                                      uint16_t will_message_size,
5549                     ; 1103                                      const char* user_name,
5549                     ; 1104                                      const char* password,
5549                     ; 1105                                      uint8_t connect_flags,
5549                     ; 1106                                      uint16_t keep_alive)
5549                     ; 1107 { 
5550                     .text:	section	.text,new
5551  da56               _mqtt_pack_connection_request:
5553  da56 89            	pushw	x
5554  da57 520d          	subw	sp,#13
5555       0000000d      OFST:	set	13
5558                     ; 1110     const uint8_t *const start = buf;
5560  da59 1f01          	ldw	(OFST-12,sp),x
5562                     ; 1114     fixed_header.control_type = MQTT_CONTROL_CONNECT;
5564  da5b a601          	ld	a,#1
5565  da5d 6b03          	ld	(OFST-10,sp),a
5567                     ; 1115     fixed_header.control_flags = 0x00;
5569  da5f 7b07          	ld	a,(OFST-6,sp)
5570  da61 a4f0          	and	a,#240
5571  da63 6b07          	ld	(OFST-6,sp),a
5573                     ; 1118     connect_flags = (uint8_t)(connect_flags & ~MQTT_CONNECT_RESERVED);
5575  da65 7b20          	ld	a,(OFST+19,sp)
5576  da67 a4fe          	and	a,#254
5577  da69 6b20          	ld	(OFST+19,sp),a
5578                     ; 1121     remaining_length = 10; /* size of variable header */
5580  da6b ae000a        	ldw	x,#10
5581  da6e 1f0c          	ldw	(OFST-1,sp),x
5583                     ; 1133     remaining_length += __mqtt_packed_cstrlen(client_id);
5585  da70 1e14          	ldw	x,(OFST+7,sp)
5586  da72 cdf5ef        	call	_strlen
5588  da75 1c0002        	addw	x,#2
5589  da78 72fb0c        	addw	x,(OFST-1,sp)
5590  da7b 1f0c          	ldw	(OFST-1,sp),x
5592                     ; 1163     connect_flags |= MQTT_CONNECT_WILL_FLAG;
5594  da7d 7b20          	ld	a,(OFST+19,sp)
5595                     ; 1164     connect_flags |= MQTT_CONNECT_WILL_RETAIN;
5597  da7f aa24          	or	a,#36
5598  da81 6b20          	ld	(OFST+19,sp),a
5599                     ; 1165     remaining_length += __mqtt_packed_cstrlen(will_topic);
5601  da83 1e16          	ldw	x,(OFST+9,sp)
5602  da85 cdf5ef        	call	_strlen
5604  da88 1c0002        	addw	x,#2
5605  da8b 72fb0c        	addw	x,(OFST-1,sp)
5606  da8e 1f0c          	ldw	(OFST-1,sp),x
5608                     ; 1166     remaining_length += 2 + will_message_size; /* size of will_message */
5610  da90 1e1a          	ldw	x,(OFST+13,sp)
5611  da92 1c0002        	addw	x,#2
5612  da95 72fb0c        	addw	x,(OFST-1,sp)
5613  da98 1f0c          	ldw	(OFST-1,sp),x
5615                     ; 1168     if (user_name != NULL) {
5617  da9a 1e1c          	ldw	x,(OFST+15,sp)
5618  da9c 2713          	jreq	L5442
5619                     ; 1170         connect_flags |= MQTT_CONNECT_USER_NAME;
5621  da9e 7b20          	ld	a,(OFST+19,sp)
5622  daa0 aa80          	or	a,#128
5623  daa2 6b20          	ld	(OFST+19,sp),a
5624                     ; 1171         remaining_length += __mqtt_packed_cstrlen(user_name);
5626  daa4 cdf5ef        	call	_strlen
5628  daa7 1c0002        	addw	x,#2
5629  daaa 72fb0c        	addw	x,(OFST-1,sp)
5630  daad 1f0c          	ldw	(OFST-1,sp),x
5633  daaf 2006          	jra	L7442
5634  dab1               L5442:
5635                     ; 1173     else connect_flags &= (uint8_t)(~MQTT_CONNECT_USER_NAME);
5637  dab1 7b20          	ld	a,(OFST+19,sp)
5638  dab3 a47f          	and	a,#127
5639  dab5 6b20          	ld	(OFST+19,sp),a
5640  dab7               L7442:
5641                     ; 1175     if (password != NULL) {
5643  dab7 1e1e          	ldw	x,(OFST+17,sp)
5644  dab9 2713          	jreq	L1542
5645                     ; 1177         connect_flags |= MQTT_CONNECT_PASSWORD;
5647  dabb 7b20          	ld	a,(OFST+19,sp)
5648  dabd aa40          	or	a,#64
5649  dabf 6b20          	ld	(OFST+19,sp),a
5650                     ; 1178         remaining_length += __mqtt_packed_cstrlen(password);
5652  dac1 cdf5ef        	call	_strlen
5654  dac4 1c0002        	addw	x,#2
5655  dac7 72fb0c        	addw	x,(OFST-1,sp)
5656  daca 1f0c          	ldw	(OFST-1,sp),x
5659  dacc 2008          	jra	L3542
5660  dace               L1542:
5661                     ; 1180     else connect_flags &= (uint8_t)(~MQTT_CONNECT_PASSWORD);
5663  dace 7b20          	ld	a,(OFST+19,sp)
5664  dad0 a4bf          	and	a,#191
5665  dad2 6b20          	ld	(OFST+19,sp),a
5666  dad4 1e0c          	ldw	x,(OFST-1,sp)
5667  dad6               L3542:
5668                     ; 1183     fixed_header.remaining_length = remaining_length;
5670  dad6 cdfa43        	call	c_uitolx
5672  dad9 96            	ldw	x,sp
5673  dada 1c0008        	addw	x,#OFST-5
5674  dadd cdf9e2        	call	c_rtol
5677                     ; 1186     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
5679  dae0 96            	ldw	x,sp
5680  dae1 1c0003        	addw	x,#OFST-10
5681  dae4 89            	pushw	x
5682  dae5 1e14          	ldw	x,(OFST+7,sp)
5683  dae7 89            	pushw	x
5684  dae8 1e12          	ldw	x,(OFST+5,sp)
5685  daea cdd9a7        	call	_mqtt_pack_fixed_header
5687  daed 5b04          	addw	sp,#4
5688  daef 1f0c          	ldw	(OFST-1,sp),x
5690                     ; 1187     if (rv <= 0) {
5692  daf1 9c            	rvf	
5693                     ; 1188       return rv; /* something went wrong */
5696  daf2 2d1b          	jrsle	L073
5697                     ; 1191     buf += rv;
5699  daf4 1e0e          	ldw	x,(OFST+1,sp)
5700  daf6 72fb0c        	addw	x,(OFST-1,sp)
5701  daf9 1f0e          	ldw	(OFST+1,sp),x
5702                     ; 1192     bufsz -= rv;
5704  dafb 1e12          	ldw	x,(OFST+5,sp)
5705  dafd 72f00c        	subw	x,(OFST-1,sp)
5706  db00 1f12          	ldw	(OFST+5,sp),x
5707                     ; 1195     if (bufsz < fixed_header.remaining_length) return 0;
5709  db02 cdfa43        	call	c_uitolx
5711  db05 96            	ldw	x,sp
5712  db06 1c0008        	addw	x,#OFST-5
5713  db09 cdf811        	call	c_lcmp
5715  db0c 2404          	jruge	L7542
5718  db0e 5f            	clrw	x
5720  db0f               L073:
5722  db0f 5b0f          	addw	sp,#15
5723  db11 81            	ret	
5724  db12               L7542:
5725                     ; 1198     *buf++ = 0x00;
5727  db12 1e0e          	ldw	x,(OFST+1,sp)
5728  db14 7f            	clr	(x)
5729  db15 5c            	incw	x
5730                     ; 1199     *buf++ = 0x04;
5732  db16 a604          	ld	a,#4
5733  db18 f7            	ld	(x),a
5734  db19 5c            	incw	x
5735                     ; 1200     *buf++ = (uint8_t) 'M';
5737  db1a a64d          	ld	a,#77
5738  db1c f7            	ld	(x),a
5739  db1d 5c            	incw	x
5740                     ; 1201     *buf++ = (uint8_t) 'Q';
5742  db1e a651          	ld	a,#81
5743  db20 f7            	ld	(x),a
5744  db21 5c            	incw	x
5745                     ; 1202     *buf++ = (uint8_t) 'T';
5747  db22 a654          	ld	a,#84
5748  db24 f7            	ld	(x),a
5749  db25 5c            	incw	x
5750                     ; 1203     *buf++ = (uint8_t) 'T';
5752  db26 f7            	ld	(x),a
5753  db27 5c            	incw	x
5754                     ; 1204     *buf++ = MQTT_PROTOCOL_LEVEL;
5756  db28 a604          	ld	a,#4
5757  db2a f7            	ld	(x),a
5758  db2b 5c            	incw	x
5759                     ; 1205     *buf++ = connect_flags;
5761  db2c 7b20          	ld	a,(OFST+19,sp)
5762  db2e f7            	ld	(x),a
5763  db2f 5c            	incw	x
5764  db30 1f0e          	ldw	(OFST+1,sp),x
5765                     ; 1206     buf += __mqtt_pack_uint16(buf, keep_alive);
5767  db32 1e21          	ldw	x,(OFST+20,sp)
5768  db34 89            	pushw	x
5769  db35 1e10          	ldw	x,(OFST+3,sp)
5770  db37 cde32a        	call	___mqtt_pack_uint16
5772  db3a 5b02          	addw	sp,#2
5773  db3c 72fb0e        	addw	x,(OFST+1,sp)
5774  db3f 1f0e          	ldw	(OFST+1,sp),x
5775                     ; 1209     buf += __mqtt_pack_str(buf, client_id);
5777  db41 1e14          	ldw	x,(OFST+7,sp)
5778  db43 89            	pushw	x
5779  db44 1e10          	ldw	x,(OFST+3,sp)
5780  db46 cde36b        	call	___mqtt_pack_str
5782  db49 5b02          	addw	sp,#2
5783  db4b 72fb0e        	addw	x,(OFST+1,sp)
5784  db4e 1f0e          	ldw	(OFST+1,sp),x
5785                     ; 1210     if (connect_flags & MQTT_CONNECT_WILL_FLAG) {
5787  db50 7b20          	ld	a,(OFST+19,sp)
5788  db52 a504          	bcp	a,#4
5789  db54 273c          	jreq	L1642
5790                     ; 1211         buf += __mqtt_pack_str(buf, will_topic);
5792  db56 1e16          	ldw	x,(OFST+9,sp)
5793  db58 89            	pushw	x
5794  db59 1e10          	ldw	x,(OFST+3,sp)
5795  db5b cde36b        	call	___mqtt_pack_str
5797  db5e 5b02          	addw	sp,#2
5798  db60 72fb0e        	addw	x,(OFST+1,sp)
5799  db63 1f0e          	ldw	(OFST+1,sp),x
5800                     ; 1212         buf += __mqtt_pack_uint16(buf, (uint16_t)will_message_size);
5802  db65 1e1a          	ldw	x,(OFST+13,sp)
5803  db67 89            	pushw	x
5804  db68 1e10          	ldw	x,(OFST+3,sp)
5805  db6a cde32a        	call	___mqtt_pack_uint16
5807  db6d 5b02          	addw	sp,#2
5808  db6f 72fb0e        	addw	x,(OFST+1,sp)
5809  db72 1f0e          	ldw	(OFST+1,sp),x
5810                     ; 1213         memcpy(buf, will_message, will_message_size);
5812  db74 bf04          	ldw	c_x,x
5813  db76 1618          	ldw	y,(OFST+11,sp)
5814  db78 90bf07        	ldw	c_y,y
5815  db7b 1e1a          	ldw	x,(OFST+13,sp)
5816  db7d 270a          	jreq	L063
5817  db7f               L263:
5818  db7f 5a            	decw	x
5819  db80 92d607        	ld	a,([c_y.w],x)
5820  db83 92d704        	ld	([c_x.w],x),a
5821  db86 5d            	tnzw	x
5822  db87 26f6          	jrne	L263
5823  db89               L063:
5824                     ; 1214         buf += will_message_size;
5826  db89 1e0e          	ldw	x,(OFST+1,sp)
5827  db8b 72fb1a        	addw	x,(OFST+13,sp)
5828  db8e 1f0e          	ldw	(OFST+1,sp),x
5829  db90 7b20          	ld	a,(OFST+19,sp)
5830  db92               L1642:
5831                     ; 1217     if (connect_flags & MQTT_CONNECT_USER_NAME) buf += __mqtt_pack_str(buf, user_name);
5833  db92 a580          	bcp	a,#128
5834  db94 2711          	jreq	L3642
5837  db96 1e1c          	ldw	x,(OFST+15,sp)
5838  db98 89            	pushw	x
5839  db99 1e10          	ldw	x,(OFST+3,sp)
5840  db9b cde36b        	call	___mqtt_pack_str
5842  db9e 5b02          	addw	sp,#2
5843  dba0 72fb0e        	addw	x,(OFST+1,sp)
5844  dba3 1f0e          	ldw	(OFST+1,sp),x
5845  dba5 7b20          	ld	a,(OFST+19,sp)
5846  dba7               L3642:
5847                     ; 1219     if (connect_flags & MQTT_CONNECT_PASSWORD) buf += __mqtt_pack_str(buf, password);
5849  dba7 a540          	bcp	a,#64
5850  dba9 270f          	jreq	L5642
5853  dbab 1e1e          	ldw	x,(OFST+17,sp)
5854  dbad 89            	pushw	x
5855  dbae 1e10          	ldw	x,(OFST+3,sp)
5856  dbb0 cde36b        	call	___mqtt_pack_str
5858  dbb3 5b02          	addw	sp,#2
5859  dbb5 72fb0e        	addw	x,(OFST+1,sp)
5860  dbb8 1f0e          	ldw	(OFST+1,sp),x
5861  dbba               L5642:
5862                     ; 1222     return buf - start;
5864  dbba 72f001        	subw	x,(OFST-12,sp)
5866  dbbd ccdb0f        	jra	L073
5936                     	switch	.const
5937  9ed8               L473:
5938  9ed8 00000002      	dc.l	2
5939                     ; 1227 int16_t mqtt_unpack_connack_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
5939                     ; 1228 {
5940                     .text:	section	.text,new
5941  dbc0               _mqtt_unpack_connack_response:
5943  dbc0 89            	pushw	x
5944  dbc1 5204          	subw	sp,#4
5945       00000004      OFST:	set	4
5948                     ; 1229     const uint8_t *const start = buf;
5950  dbc3 1e09          	ldw	x,(OFST+5,sp)
5951  dbc5 1f01          	ldw	(OFST-3,sp),x
5953                     ; 1233     if (mqtt_response->fixed_header.remaining_length != 2) {
5955  dbc7 1e05          	ldw	x,(OFST+1,sp)
5956  dbc9 1c0005        	addw	x,#5
5957  dbcc cdf87c        	call	c_ltor
5959  dbcf ae9ed8        	ldw	x,#L473
5960  dbd2 cdf811        	call	c_lcmp
5962  dbd5 2705          	jreq	L5252
5963                     ; 1234       return MQTT_ERROR_MALFORMED_RESPONSE;
5965  dbd7 ae800c        	ldw	x,#32780
5967  dbda 2011          	jra	L673
5968  dbdc               L5252:
5969                     ; 1237     response = &(mqtt_response->decoded.connack);
5971  dbdc 1e05          	ldw	x,(OFST+1,sp)
5972  dbde 1c0009        	addw	x,#9
5973  dbe1 1f03          	ldw	(OFST-1,sp),x
5975                     ; 1239     if (*buf & 0xFE) {
5977  dbe3 1e09          	ldw	x,(OFST+5,sp)
5978  dbe5 f6            	ld	a,(x)
5979  dbe6 a5fe          	bcp	a,#254
5980  dbe8 2706          	jreq	L7252
5981                     ; 1240       return MQTT_ERROR_CONNACK_FORBIDDEN_FLAGS; /* only bit 1 can be set */
5983  dbea ae8008        	ldw	x,#32776
5985  dbed               L673:
5987  dbed 5b06          	addw	sp,#6
5988  dbef 81            	ret	
5989  dbf0               L7252:
5990                     ; 1242     else response->session_present_flag = *buf++;
5992  dbf0 5c            	incw	x
5993  dbf1 1f09          	ldw	(OFST+5,sp),x
5994  dbf3 1e03          	ldw	x,(OFST-1,sp)
5995  dbf5 f7            	ld	(x),a
5996                     ; 1244     if (*buf > 5u) {
5998  dbf6 1e09          	ldw	x,(OFST+5,sp)
5999  dbf8 f6            	ld	a,(x)
6000  dbf9 a106          	cp	a,#6
6001  dbfb 2505          	jrult	L3352
6002                     ; 1245       return MQTT_ERROR_CONNACK_FORBIDDEN_CODE; /* only bit 1 can be set */
6004  dbfd ae8009        	ldw	x,#32777
6006  dc00 20eb          	jra	L673
6007  dc02               L3352:
6008                     ; 1247     else response->return_code = (enum MQTTConnackReturnCode) *buf++;
6010  dc02 5c            	incw	x
6011  dc03 1f09          	ldw	(OFST+5,sp),x
6012  dc05 1e03          	ldw	x,(OFST-1,sp)
6013  dc07 e701          	ld	(1,x),a
6014                     ; 1249     return buf - start;
6016  dc09 1e09          	ldw	x,(OFST+5,sp)
6017  dc0b 72f001        	subw	x,(OFST-3,sp)
6019  dc0e 20dd          	jra	L673
6073                     ; 1254 int16_t mqtt_pack_disconnect(uint8_t *buf, uint16_t bufsz)
6073                     ; 1255 {
6074                     .text:	section	.text,new
6075  dc10               _mqtt_pack_disconnect:
6077  dc10 89            	pushw	x
6078  dc11 5209          	subw	sp,#9
6079       00000009      OFST:	set	9
6082                     ; 1257     fixed_header.control_type = MQTT_CONTROL_DISCONNECT;
6084  dc13 a60e          	ld	a,#14
6085  dc15 6b01          	ld	(OFST-8,sp),a
6087                     ; 1258     fixed_header.control_flags = 0;
6089  dc17 7b05          	ld	a,(OFST-4,sp)
6090  dc19 a4f0          	and	a,#240
6091  dc1b 6b05          	ld	(OFST-4,sp),a
6093                     ; 1259     fixed_header.remaining_length = 0;
6095  dc1d 5f            	clrw	x
6096  dc1e 1f08          	ldw	(OFST-1,sp),x
6097  dc20 1f06          	ldw	(OFST-3,sp),x
6099                     ; 1260     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6101  dc22 96            	ldw	x,sp
6102  dc23 5c            	incw	x
6103  dc24 89            	pushw	x
6104  dc25 1e10          	ldw	x,(OFST+7,sp)
6105  dc27 89            	pushw	x
6106  dc28 1e0e          	ldw	x,(OFST+5,sp)
6107  dc2a cdd9a7        	call	_mqtt_pack_fixed_header
6109  dc2d 5b0f          	addw	sp,#15
6112  dc2f 81            	ret	
6166                     ; 1265 int16_t mqtt_pack_ping_request(uint8_t *buf, uint16_t bufsz)
6166                     ; 1266 {
6167                     .text:	section	.text,new
6168  dc30               _mqtt_pack_ping_request:
6170  dc30 89            	pushw	x
6171  dc31 5209          	subw	sp,#9
6172       00000009      OFST:	set	9
6175                     ; 1268     fixed_header.control_type = MQTT_CONTROL_PINGREQ;
6177  dc33 a60c          	ld	a,#12
6178  dc35 6b01          	ld	(OFST-8,sp),a
6180                     ; 1269     fixed_header.control_flags = 0;
6182  dc37 7b05          	ld	a,(OFST-4,sp)
6183  dc39 a4f0          	and	a,#240
6184  dc3b 6b05          	ld	(OFST-4,sp),a
6186                     ; 1270     fixed_header.remaining_length = 0;
6188  dc3d 5f            	clrw	x
6189  dc3e 1f08          	ldw	(OFST-1,sp),x
6190  dc40 1f06          	ldw	(OFST-3,sp),x
6192                     ; 1271     return mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6194  dc42 96            	ldw	x,sp
6195  dc43 5c            	incw	x
6196  dc44 89            	pushw	x
6197  dc45 1e10          	ldw	x,(OFST+7,sp)
6198  dc47 89            	pushw	x
6199  dc48 1e0e          	ldw	x,(OFST+5,sp)
6200  dc4a cdd9a7        	call	_mqtt_pack_fixed_header
6202  dc4d 5b0f          	addw	sp,#15
6205  dc4f 81            	ret	
6337                     ; 1276 int16_t mqtt_pack_publish_request(uint8_t *buf, uint16_t bufsz,
6337                     ; 1277                                   const char* topic_name,
6337                     ; 1278                                   uint16_t packet_id,
6337                     ; 1279                                   const void* application_message,
6337                     ; 1280                                   uint16_t application_message_size,
6337                     ; 1281                                   uint8_t publish_flags)
6337                     ; 1282 {
6338                     .text:	section	.text,new
6339  dc50               _mqtt_pack_publish_request:
6341  dc50 89            	pushw	x
6342  dc51 5212          	subw	sp,#18
6343       00000012      OFST:	set	18
6346                     ; 1283     const uint8_t *const start = buf;
6348  dc53 1f01          	ldw	(OFST-17,sp),x
6350                     ; 1290     if(buf == NULL || topic_name == NULL) {
6352  dc55 2704          	jreq	L5662
6354  dc57 1e19          	ldw	x,(OFST+7,sp)
6355  dc59 2605          	jrne	L3662
6356  dc5b               L5662:
6357                     ; 1291       return MQTT_ERROR_NULLPTR;
6359  dc5b ae8001        	ldw	x,#32769
6361  dc5e 204f          	jra	L624
6362  dc60               L3662:
6363                     ; 1295     inspected_qos = (uint8_t)((publish_flags & MQTT_PUBLISH_QOS_MASK) >> 1); /* mask */
6365  dc60 7b21          	ld	a,(OFST+15,sp)
6366  dc62 a406          	and	a,#6
6367  dc64 44            	srl	a
6368  dc65 6b12          	ld	(OFST+0,sp),a
6370                     ; 1298     fixed_header.control_type = MQTT_CONTROL_PUBLISH;
6372  dc67 a603          	ld	a,#3
6373  dc69 6b03          	ld	(OFST-15,sp),a
6375                     ; 1301     remaining_length = (uint32_t)__mqtt_packed_cstrlen(topic_name);
6377  dc6b cdf5ef        	call	_strlen
6379  dc6e 1c0002        	addw	x,#2
6380  dc71 cdfa43        	call	c_uitolx
6382  dc74 96            	ldw	x,sp
6383  dc75 1c000e        	addw	x,#OFST-4
6384  dc78 cdf9e2        	call	c_rtol
6387                     ; 1302     if (inspected_qos > 0) remaining_length += 2;
6389  dc7b 7b12          	ld	a,(OFST+0,sp)
6390  dc7d 2709          	jreq	L7662
6393  dc7f 96            	ldw	x,sp
6394  dc80 1c000e        	addw	x,#OFST-4
6395  dc83 a602          	ld	a,#2
6396  dc85 cdf831        	call	c_lgadc
6399  dc88               L7662:
6400                     ; 1303     remaining_length += (uint32_t)application_message_size;
6402  dc88 1e1f          	ldw	x,(OFST+13,sp)
6403  dc8a cdfa43        	call	c_uitolx
6405  dc8d 96            	ldw	x,sp
6406  dc8e 1c000e        	addw	x,#OFST-4
6407  dc91 cdf841        	call	c_lgadd
6410                     ; 1304     fixed_header.remaining_length = remaining_length;
6412  dc94 1e10          	ldw	x,(OFST-2,sp)
6413  dc96 1f0a          	ldw	(OFST-8,sp),x
6414  dc98 1e0e          	ldw	x,(OFST-4,sp)
6415  dc9a 1f08          	ldw	(OFST-10,sp),x
6417                     ; 1307     if (inspected_qos == 0) publish_flags &= (uint8_t)(~MQTT_PUBLISH_DUP);
6419  dc9c 7b12          	ld	a,(OFST+0,sp)
6420  dc9e 2608          	jrne	L1762
6423  dca0 7b21          	ld	a,(OFST+15,sp)
6424  dca2 a4f7          	and	a,#247
6425  dca4 6b21          	ld	(OFST+15,sp),a
6426  dca6 7b12          	ld	a,(OFST+0,sp)
6427  dca8               L1762:
6428                     ; 1310     if (inspected_qos == 3) {
6430  dca8 a103          	cp	a,#3
6431  dcaa 2606          	jrne	L3762
6432                     ; 1311       return MQTT_ERROR_PUBLISH_FORBIDDEN_QOS;
6434  dcac ae800a        	ldw	x,#32778
6436  dcaf               L624:
6438  dcaf 5b14          	addw	sp,#20
6439  dcb1 81            	ret	
6440  dcb2               L3762:
6441                     ; 1313     fixed_header.control_flags = publish_flags;
6443  dcb2 7b21          	ld	a,(OFST+15,sp)
6444  dcb4 1807          	xor	a,(OFST-11,sp)
6445  dcb6 a40f          	and	a,#15
6446  dcb8 1807          	xor	a,(OFST-11,sp)
6447  dcba 6b07          	ld	(OFST-11,sp),a
6449                     ; 1316     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6451  dcbc 96            	ldw	x,sp
6452  dcbd 1c0003        	addw	x,#OFST-15
6453  dcc0 89            	pushw	x
6454  dcc1 1e19          	ldw	x,(OFST+7,sp)
6455  dcc3 89            	pushw	x
6456  dcc4 1e17          	ldw	x,(OFST+5,sp)
6457  dcc6 cdd9a7        	call	_mqtt_pack_fixed_header
6459  dcc9 5b04          	addw	sp,#4
6460  dccb 1f0c          	ldw	(OFST-6,sp),x
6462                     ; 1317     if (rv <= 0) return rv; /* something went wrong */
6464  dccd 9c            	rvf	
6468  dcce 2ddf          	jrsle	L624
6469                     ; 1319     buf += rv;
6471  dcd0 1e13          	ldw	x,(OFST+1,sp)
6472  dcd2 72fb0c        	addw	x,(OFST-6,sp)
6473  dcd5 1f13          	ldw	(OFST+1,sp),x
6474                     ; 1320     bufsz -= rv;
6476  dcd7 1e17          	ldw	x,(OFST+5,sp)
6477  dcd9 72f00c        	subw	x,(OFST-6,sp)
6478  dcdc 1f17          	ldw	(OFST+5,sp),x
6479                     ; 1323     if (bufsz < remaining_length) return 0;
6481  dcde cdfa43        	call	c_uitolx
6483  dce1 96            	ldw	x,sp
6484  dce2 1c000e        	addw	x,#OFST-4
6485  dce5 cdf811        	call	c_lcmp
6487  dce8 2403          	jruge	L7762
6490  dcea 5f            	clrw	x
6492  dceb 20c2          	jra	L624
6493  dced               L7762:
6494                     ; 1326     buf += __mqtt_pack_str(buf, topic_name);
6496  dced 1e19          	ldw	x,(OFST+7,sp)
6497  dcef 89            	pushw	x
6498  dcf0 1e15          	ldw	x,(OFST+3,sp)
6499  dcf2 cde36b        	call	___mqtt_pack_str
6501  dcf5 5b02          	addw	sp,#2
6502  dcf7 72fb13        	addw	x,(OFST+1,sp)
6503  dcfa 1f13          	ldw	(OFST+1,sp),x
6504                     ; 1327     if (inspected_qos > 0) buf += __mqtt_pack_uint16(buf, packet_id);
6506  dcfc 7b12          	ld	a,(OFST+0,sp)
6507  dcfe 270f          	jreq	L1072
6510  dd00 1e1b          	ldw	x,(OFST+9,sp)
6511  dd02 89            	pushw	x
6512  dd03 1e15          	ldw	x,(OFST+3,sp)
6513  dd05 cde32a        	call	___mqtt_pack_uint16
6515  dd08 5b02          	addw	sp,#2
6516  dd0a 72fb13        	addw	x,(OFST+1,sp)
6517  dd0d 1f13          	ldw	(OFST+1,sp),x
6518  dd0f               L1072:
6519                     ; 1330     memcpy(buf, application_message, application_message_size);
6521  dd0f bf04          	ldw	c_x,x
6522  dd11 161d          	ldw	y,(OFST+11,sp)
6523  dd13 90bf07        	ldw	c_y,y
6524  dd16 1e1f          	ldw	x,(OFST+13,sp)
6525  dd18 270a          	jreq	L224
6526  dd1a               L424:
6527  dd1a 5a            	decw	x
6528  dd1b 92d607        	ld	a,([c_y.w],x)
6529  dd1e 92d704        	ld	([c_x.w],x),a
6530  dd21 5d            	tnzw	x
6531  dd22 26f6          	jrne	L424
6532  dd24               L224:
6533                     ; 1331     buf += application_message_size;
6535  dd24 1e13          	ldw	x,(OFST+1,sp)
6536  dd26 72fb1f        	addw	x,(OFST+13,sp)
6537  dd29 1f13          	ldw	(OFST+1,sp),x
6538                     ; 1333     return buf - start;
6540  dd2b 72f001        	subw	x,(OFST-17,sp)
6542  dd2e ccdcaf        	jra	L624
6625                     	switch	.const
6626  9edc               L234:
6627  9edc 00000004      	dc.l	4
6628                     ; 1337 int16_t mqtt_unpack_publish_response(struct mqtt_response *mqtt_response, const uint8_t *buf)
6628                     ; 1338 {    
6629                     .text:	section	.text,new
6630  dd31               _mqtt_unpack_publish_response:
6632  dd31 89            	pushw	x
6633  dd32 5206          	subw	sp,#6
6634       00000006      OFST:	set	6
6637                     ; 1339     const uint8_t *const start = buf;
6639  dd34 1e0b          	ldw	x,(OFST+5,sp)
6640  dd36 1f01          	ldw	(OFST-5,sp),x
6642                     ; 1343     fixed_header = &(mqtt_response->fixed_header);
6644  dd38 1e07          	ldw	x,(OFST+1,sp)
6645  dd3a 1f03          	ldw	(OFST-3,sp),x
6647                     ; 1344     response = &(mqtt_response->decoded.publish);
6649  dd3c 1c0009        	addw	x,#9
6650  dd3f 1f05          	ldw	(OFST-1,sp),x
6652                     ; 1347     response->dup_flag = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_DUP) >> 3);
6654  dd41 1e03          	ldw	x,(OFST-3,sp)
6655  dd43 e604          	ld	a,(4,x)
6656  dd45 a40f          	and	a,#15
6657  dd47 44            	srl	a
6658  dd48 44            	srl	a
6659  dd49 1e05          	ldw	x,(OFST-1,sp)
6660  dd4b 44            	srl	a
6661  dd4c f7            	ld	(x),a
6662                     ; 1348     response->qos_level = (uint8_t)((fixed_header->control_flags & MQTT_PUBLISH_QOS_MASK) >> 1);
6664  dd4d 1e03          	ldw	x,(OFST-3,sp)
6665  dd4f e604          	ld	a,(4,x)
6666  dd51 a406          	and	a,#6
6667  dd53 1e05          	ldw	x,(OFST-1,sp)
6668  dd55 44            	srl	a
6669  dd56 e701          	ld	(1,x),a
6670                     ; 1349     response->retain_flag = (uint8_t)(fixed_header->control_flags & MQTT_PUBLISH_RETAIN);
6672  dd58 1e03          	ldw	x,(OFST-3,sp)
6673  dd5a e604          	ld	a,(4,x)
6674  dd5c 1e05          	ldw	x,(OFST-1,sp)
6675  dd5e a401          	and	a,#1
6676  dd60 e702          	ld	(2,x),a
6677                     ; 1352     if (mqtt_response->fixed_header.remaining_length < 4) {
6679  dd62 1e07          	ldw	x,(OFST+1,sp)
6680  dd64 1c0005        	addw	x,#5
6681  dd67 cdf87c        	call	c_ltor
6683  dd6a ae9edc        	ldw	x,#L234
6684  dd6d cdf811        	call	c_lcmp
6686  dd70 2405          	jruge	L7472
6687                     ; 1353         return MQTT_ERROR_MALFORMED_RESPONSE;
6689  dd72 ae800c        	ldw	x,#32780
6691  dd75 2072          	jra	L044
6692  dd77               L7472:
6693                     ; 1357     response->topic_name_size = __mqtt_unpack_uint16(buf);
6695  dd77 1e0b          	ldw	x,(OFST+5,sp)
6696  dd79 cde34e        	call	___mqtt_unpack_uint16
6698  dd7c 1605          	ldw	y,(OFST-1,sp)
6699  dd7e 90ef03        	ldw	(3,y),x
6700                     ; 1358     buf += 2;
6702  dd81 1e0b          	ldw	x,(OFST+5,sp)
6703  dd83 1c0002        	addw	x,#2
6704  dd86 1f0b          	ldw	(OFST+5,sp),x
6705                     ; 1359     response->topic_name = buf;
6707  dd88 93            	ldw	x,y
6708  dd89 160b          	ldw	y,(OFST+5,sp)
6709  dd8b ef05          	ldw	(5,x),y
6710                     ; 1360     buf += response->topic_name_size;
6712  dd8d ee03          	ldw	x,(3,x)
6713  dd8f 72fb0b        	addw	x,(OFST+5,sp)
6714  dd92 1f0b          	ldw	(OFST+5,sp),x
6715                     ; 1362     if (response->qos_level > 0) {
6717  dd94 1e05          	ldw	x,(OFST-1,sp)
6718  dd96 6d01          	tnz	(1,x)
6719  dd98 2712          	jreq	L1572
6720                     ; 1363         response->packet_id = __mqtt_unpack_uint16(buf);
6722  dd9a 1e0b          	ldw	x,(OFST+5,sp)
6723  dd9c cde34e        	call	___mqtt_unpack_uint16
6725  dd9f 1605          	ldw	y,(OFST-1,sp)
6726  dda1 90ef07        	ldw	(7,y),x
6727                     ; 1364         buf += 2;
6729  dda4 1e0b          	ldw	x,(OFST+5,sp)
6730  dda6 1c0002        	addw	x,#2
6731  dda9 1f0b          	ldw	(OFST+5,sp),x
6732  ddab 93            	ldw	x,y
6733  ddac               L1572:
6734                     ; 1368     response->application_message = buf;
6736  ddac 160b          	ldw	y,(OFST+5,sp)
6737  ddae ef09          	ldw	(9,x),y
6738                     ; 1369     if (response->qos_level == 0) {
6740  ddb0 6d01          	tnz	(1,x)
6741  ddb2 2614          	jrne	L3572
6742                     ; 1370         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 2);
6744  ddb4 1e03          	ldw	x,(OFST-3,sp)
6745  ddb6 1605          	ldw	y,(OFST-1,sp)
6746  ddb8 ee07          	ldw	x,(7,x)
6747  ddba 01            	rrwa	x,a
6748  ddbb 90e004        	sub	a,(4,y)
6749  ddbe 01            	rrwa	x,a
6750  ddbf 90e203        	sbc	a,(3,y)
6751  ddc2 01            	rrwa	x,a
6752  ddc3 1d0002        	subw	x,#2
6754  ddc6 2012          	jra	L5572
6755  ddc8               L3572:
6756                     ; 1373         response->application_message_size = (uint16_t)(fixed_header->remaining_length - response->topic_name_size - 4);
6758  ddc8 1e03          	ldw	x,(OFST-3,sp)
6759  ddca 1605          	ldw	y,(OFST-1,sp)
6760  ddcc ee07          	ldw	x,(7,x)
6761  ddce 01            	rrwa	x,a
6762  ddcf 90e004        	sub	a,(4,y)
6763  ddd2 01            	rrwa	x,a
6764  ddd3 90e203        	sbc	a,(3,y)
6765  ddd6 01            	rrwa	x,a
6766  ddd7 1d0004        	subw	x,#4
6767  ddda               L5572:
6768  ddda 90ef0b        	ldw	(11,y),x
6769                     ; 1375     buf += response->application_message_size;
6771  dddd 1e05          	ldw	x,(OFST-1,sp)
6772  dddf ee0b          	ldw	x,(11,x)
6773  dde1 72fb0b        	addw	x,(OFST+5,sp)
6774  dde4 1f0b          	ldw	(OFST+5,sp),x
6775                     ; 1378     return buf - start;
6777  dde6 72f001        	subw	x,(OFST-5,sp)
6779  dde9               L044:
6781  dde9 5b08          	addw	sp,#8
6782  ddeb 81            	ret	
6871                     ; 1383 int16_t mqtt_pack_pubxxx_request(uint8_t *buf, uint16_t bufsz, 
6871                     ; 1384                                  enum MQTTControlPacketType control_type,
6871                     ; 1385                                  uint16_t packet_id) 
6871                     ; 1386 {
6872                     .text:	section	.text,new
6873  ddec               _mqtt_pack_pubxxx_request:
6875  ddec 89            	pushw	x
6876  dded 520d          	subw	sp,#13
6877       0000000d      OFST:	set	13
6880                     ; 1387     const uint8_t *const start = buf;
6882  ddef 1f01          	ldw	(OFST-12,sp),x
6884                     ; 1390     if (buf == NULL) {
6886  ddf1 2605          	jrne	L7103
6887                     ; 1391       return MQTT_ERROR_NULLPTR;
6889  ddf3 ae8001        	ldw	x,#32769
6891  ddf6 2032          	jra	L054
6892  ddf8               L7103:
6893                     ; 1395     fixed_header.control_type = control_type;
6895  ddf8 7b14          	ld	a,(OFST+7,sp)
6896  ddfa 6b05          	ld	(OFST-8,sp),a
6898                     ; 1396     if (control_type == MQTT_CONTROL_PUBREL) fixed_header.control_flags = 0x02;
6900  ddfc a106          	cp	a,#6
6901  ddfe 2608          	jrne	L1203
6904  de00 7b09          	ld	a,(OFST-4,sp)
6905  de02 a4f0          	and	a,#240
6906  de04 aa02          	or	a,#2
6908  de06 2004          	jra	L3203
6909  de08               L1203:
6910                     ; 1397     else fixed_header.control_flags = 0;
6912  de08 7b09          	ld	a,(OFST-4,sp)
6913  de0a a4f0          	and	a,#240
6914  de0c               L3203:
6915  de0c 6b09          	ld	(OFST-4,sp),a
6917                     ; 1399     fixed_header.remaining_length = 2;
6919  de0e ae0002        	ldw	x,#2
6920  de11 1f0c          	ldw	(OFST-1,sp),x
6921  de13 5f            	clrw	x
6922  de14 1f0a          	ldw	(OFST-3,sp),x
6924                     ; 1400     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
6926  de16 96            	ldw	x,sp
6927  de17 1c0005        	addw	x,#OFST-8
6928  de1a 89            	pushw	x
6929  de1b 1e14          	ldw	x,(OFST+7,sp)
6930  de1d 89            	pushw	x
6931  de1e 1e12          	ldw	x,(OFST+5,sp)
6932  de20 cdd9a7        	call	_mqtt_pack_fixed_header
6934  de23 5b04          	addw	sp,#4
6935  de25 1f03          	ldw	(OFST-10,sp),x
6937                     ; 1401     if (rv <= 0) return rv;
6939  de27 9c            	rvf	
6940  de28 2c03          	jrsgt	L5203
6944  de2a               L054:
6946  de2a 5b0f          	addw	sp,#15
6947  de2c 81            	ret	
6948  de2d               L5203:
6949                     ; 1402     buf += rv;
6951  de2d 1e0e          	ldw	x,(OFST+1,sp)
6952  de2f 72fb03        	addw	x,(OFST-10,sp)
6953  de32 1f0e          	ldw	(OFST+1,sp),x
6954                     ; 1403     bufsz -= rv;
6956  de34 1e12          	ldw	x,(OFST+5,sp)
6957  de36 72f003        	subw	x,(OFST-10,sp)
6958  de39 1f12          	ldw	(OFST+5,sp),x
6959                     ; 1405     if (bufsz < fixed_header.remaining_length) return 0;
6961  de3b cdfa43        	call	c_uitolx
6963  de3e 96            	ldw	x,sp
6964  de3f 1c000a        	addw	x,#OFST-3
6965  de42 cdf811        	call	c_lcmp
6967  de45 2403          	jruge	L7203
6970  de47 5f            	clrw	x
6972  de48 20e0          	jra	L054
6973  de4a               L7203:
6974                     ; 1407     buf += __mqtt_pack_uint16(buf, packet_id);
6976  de4a 1e15          	ldw	x,(OFST+8,sp)
6977  de4c 89            	pushw	x
6978  de4d 1e10          	ldw	x,(OFST+3,sp)
6979  de4f cde32a        	call	___mqtt_pack_uint16
6981  de52 5b02          	addw	sp,#2
6982  de54 72fb0e        	addw	x,(OFST+1,sp)
6983  de57 1f0e          	ldw	(OFST+1,sp),x
6984                     ; 1409     return buf - start;
6986  de59 72f001        	subw	x,(OFST-12,sp)
6988  de5c 20cc          	jra	L054
7054                     ; 1413 int16_t mqtt_unpack_pubxxx_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7054                     ; 1414 {
7055                     .text:	section	.text,new
7056  de5e               _mqtt_unpack_pubxxx_response:
7058  de5e 89            	pushw	x
7059  de5f 5204          	subw	sp,#4
7060       00000004      OFST:	set	4
7063                     ; 1415     const uint8_t *const start = buf;
7065  de61 1e09          	ldw	x,(OFST+5,sp)
7066  de63 1f01          	ldw	(OFST-3,sp),x
7068                     ; 1419     if (mqtt_response->fixed_header.remaining_length != 2) {
7070  de65 1e05          	ldw	x,(OFST+1,sp)
7071  de67 1c0005        	addw	x,#5
7072  de6a cdf87c        	call	c_ltor
7074  de6d ae9ed8        	ldw	x,#L473
7075  de70 cdf811        	call	c_lcmp
7077  de73 2705          	jreq	L3603
7078                     ; 1420         return MQTT_ERROR_MALFORMED_RESPONSE;
7080  de75 ae800c        	ldw	x,#32780
7082  de78 2019          	jra	L654
7083  de7a               L3603:
7084                     ; 1424     packet_id = __mqtt_unpack_uint16(buf);
7086  de7a 1e09          	ldw	x,(OFST+5,sp)
7087  de7c cde34e        	call	___mqtt_unpack_uint16
7089  de7f 1f03          	ldw	(OFST-1,sp),x
7091                     ; 1425     buf += 2;
7093  de81 1e09          	ldw	x,(OFST+5,sp)
7094  de83 1c0002        	addw	x,#2
7095  de86 1f09          	ldw	(OFST+5,sp),x
7096                     ; 1427     if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBACK) {
7098                     ; 1428         mqtt_response->decoded.puback.packet_id = packet_id;
7100                     ; 1430     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREC) {
7102                     ; 1431         mqtt_response->decoded.pubrec.packet_id = packet_id;
7104                     ; 1433     else if (mqtt_response->fixed_header.control_type == MQTT_CONTROL_PUBREL) {
7106                     ; 1434         mqtt_response->decoded.pubrel.packet_id = packet_id;
7108                     ; 1437         mqtt_response->decoded.pubcomp.packet_id = packet_id;
7113  de88 1e05          	ldw	x,(OFST+1,sp)
7114  de8a 1603          	ldw	y,(OFST-1,sp)
7115  de8c ef09          	ldw	(9,x),y
7116                     ; 1440     return buf - start;
7118  de8e 1e09          	ldw	x,(OFST+5,sp)
7119  de90 72f001        	subw	x,(OFST-3,sp)
7121  de93               L654:
7123  de93 5b06          	addw	sp,#6
7124  de95 81            	ret	
7190                     	switch	.const
7191  9ee0               L264:
7192  9ee0 00000003      	dc.l	3
7193                     ; 1445 int16_t mqtt_unpack_suback_response (struct mqtt_response *mqtt_response, const uint8_t *buf)
7193                     ; 1446 {
7194                     .text:	section	.text,new
7195  de96               _mqtt_unpack_suback_response:
7197  de96 89            	pushw	x
7198  de97 5208          	subw	sp,#8
7199       00000008      OFST:	set	8
7202                     ; 1447     const uint8_t *const start = buf;
7204  de99 1e0d          	ldw	x,(OFST+5,sp)
7205  de9b 1f03          	ldw	(OFST-5,sp),x
7207                     ; 1448     uint32_t remaining_length = mqtt_response->fixed_header.remaining_length;
7209  de9d 1e09          	ldw	x,(OFST+1,sp)
7210  de9f 9093          	ldw	y,x
7211  dea1 ee07          	ldw	x,(7,x)
7212  dea3 1f07          	ldw	(OFST-1,sp),x
7213  dea5 93            	ldw	x,y
7214  dea6 ee05          	ldw	x,(5,x)
7215  dea8 1f05          	ldw	(OFST-3,sp),x
7217                     ; 1451     if (remaining_length < 3) {
7219  deaa 96            	ldw	x,sp
7220  deab 1c0005        	addw	x,#OFST-3
7221  deae cdf87c        	call	c_ltor
7223  deb1 ae9ee0        	ldw	x,#L264
7224  deb4 cdf811        	call	c_lcmp
7226  deb7 2405          	jruge	L3313
7227                     ; 1452       return MQTT_ERROR_MALFORMED_RESPONSE;
7229  deb9 ae800c        	ldw	x,#32780
7231  debc 2037          	jra	L664
7232  debe               L3313:
7233                     ; 1456     mqtt_response->decoded.suback.packet_id = __mqtt_unpack_uint16(buf);
7235  debe 1e0d          	ldw	x,(OFST+5,sp)
7236  dec0 cde34e        	call	___mqtt_unpack_uint16
7238  dec3 1609          	ldw	y,(OFST+1,sp)
7239  dec5 90ef09        	ldw	(9,y),x
7240                     ; 1457     buf += 2;
7242  dec8 1e0d          	ldw	x,(OFST+5,sp)
7243  deca 1c0002        	addw	x,#2
7244  decd 1f0d          	ldw	(OFST+5,sp),x
7245                     ; 1458     remaining_length -= 2;
7247  decf 96            	ldw	x,sp
7248  ded0 1c0005        	addw	x,#OFST-3
7249  ded3 a602          	ld	a,#2
7250  ded5 cdf858        	call	c_lgsbc
7253                     ; 1461     mqtt_response->decoded.suback.num_return_codes = (uint16_t) remaining_length;
7255  ded8 1e09          	ldw	x,(OFST+1,sp)
7256  deda 1607          	ldw	y,(OFST-1,sp)
7257  dedc ef0d          	ldw	(13,x),y
7258                     ; 1462     mqtt_response->decoded.suback.return_codes = buf;
7260  dede 160d          	ldw	y,(OFST+5,sp)
7261  dee0 ef0b          	ldw	(11,x),y
7262                     ; 1463     buf += remaining_length;
7264  dee2 96            	ldw	x,sp
7265  dee3 1c0005        	addw	x,#OFST-3
7266  dee6 cdf87c        	call	c_ltor
7268  dee9 be02          	ldw	x,c_lreg+2
7269  deeb 1f01          	ldw	(OFST-7,sp),x
7271  deed 72fb0d        	addw	x,(OFST+5,sp)
7272  def0 1f0d          	ldw	(OFST+5,sp),x
7273                     ; 1465     return buf - start;
7275  def2 72f003        	subw	x,(OFST-5,sp)
7277  def5               L664:
7279  def5 5b0a          	addw	sp,#10
7280  def7 81            	ret	
7406                     ; 1470 int16_t mqtt_pack_subscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7406                     ; 1471 {
7407                     .text:	section	.text,new
7408  def8               _mqtt_pack_subscribe_request:
7410  def8 89            	pushw	x
7411  def9 5229          	subw	sp,#41
7412       00000029      OFST:	set	41
7415                     ; 1473     const uint8_t *const start = buf;
7417  defb 1f03          	ldw	(OFST-38,sp),x
7419                     ; 1476     uint16_t num_subs = 0;
7421  defd 5f            	clrw	x
7422  defe 1f26          	ldw	(OFST-3,sp),x
7424                     ; 1482     va_start(args, packet_id);
7426  df00 96            	ldw	x,sp
7427  df01 1c0032        	addw	x,#OFST+9
7428  df04 1f28          	ldw	(OFST-1,sp),x
7430  df06               L1123:
7431                     ; 1484         topic[num_subs] = va_arg(args, const char*);
7433  df06 1e28          	ldw	x,(OFST-1,sp)
7434  df08 1c0002        	addw	x,#2
7435  df0b 1f28          	ldw	(OFST-1,sp),x
7437  df0d 1d0002        	subw	x,#2
7438  df10 9096          	ldw	y,sp
7439  df12 72a90016      	addw	y,#OFST-19
7440  df16 1701          	ldw	(OFST-40,sp),y
7442  df18 1626          	ldw	y,(OFST-3,sp)
7443  df1a 9058          	sllw	y
7444  df1c 72f901        	addw	y,(OFST-40,sp)
7445  df1f fe            	ldw	x,(x)
7446  df20 90ff          	ldw	(y),x
7447                     ; 1485         if (topic[num_subs] == NULL) {
7449  df22 96            	ldw	x,sp
7450  df23 1c0016        	addw	x,#OFST-19
7451  df26 1f01          	ldw	(OFST-40,sp),x
7453  df28 1e26          	ldw	x,(OFST-3,sp)
7454  df2a 58            	sllw	x
7455  df2b 72fb01        	addw	x,(OFST-40,sp)
7456  df2e e601          	ld	a,(1,x)
7457  df30 fa            	or	a,(x)
7458  df31 2616          	jrne	L5123
7459                     ; 1487             break;
7460                     ; 1497     va_end(args);
7462                     ; 1500     fixed_header.control_type = MQTT_CONTROL_SUBSCRIBE;
7464  df33 a608          	ld	a,#8
7465  df35 6b0d          	ld	(OFST-28,sp),a
7467                     ; 1501     fixed_header.control_flags = 2u;
7469  df37 7b11          	ld	a,(OFST-24,sp)
7470  df39 a4f0          	and	a,#240
7471  df3b aa02          	or	a,#2
7472  df3d 6b11          	ld	(OFST-24,sp),a
7474                     ; 1502     fixed_header.remaining_length = 2u; /* size of variable header */
7476  df3f ae0002        	ldw	x,#2
7477  df42 1f14          	ldw	(OFST-21,sp),x
7478  df44 5f            	clrw	x
7479  df45 1f12          	ldw	(OFST-23,sp),x
7481                     ; 1503     for(i = 0; i < num_subs; ++i) {
7483  df47 203f          	jra	L5223
7484  df49               L5123:
7485                     ; 1490         max_qos[num_subs] = (uint8_t) va_arg(args, uint16_t);
7487  df49 1e28          	ldw	x,(OFST-1,sp)
7489  df4b e601          	ld	a,(1,x)
7490  df4d 1c0002        	addw	x,#2
7491  df50 1f28          	ldw	(OFST-1,sp),x
7492  df52 96            	ldw	x,sp
7493  df53 1c0005        	addw	x,#OFST-36
7494  df56 72fb26        	addw	x,(OFST-3,sp)
7495  df59 f7            	ld	(x),a
7496                     ; 1492         ++num_subs;
7498  df5a 1e26          	ldw	x,(OFST-3,sp)
7499  df5c 5c            	incw	x
7500  df5d 1f26          	ldw	(OFST-3,sp),x
7502                     ; 1493         if (num_subs >= MQTT_SUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7504  df5f a30008        	cpw	x,#8
7505  df62 25a2          	jrult	L1123
7506                     ; 1494             return MQTT_ERROR_SUBSCRIBE_TOO_MANY_TOPICS;
7508  df64 ae800b        	ldw	x,#32779
7510  df67 2039          	jra	L205
7511  df69               L1223:
7512                     ; 1505         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]) + 1;
7514  df69 1c0016        	addw	x,#OFST-19
7515  df6c 1f01          	ldw	(OFST-40,sp),x
7517  df6e 1e28          	ldw	x,(OFST-1,sp)
7518  df70 58            	sllw	x
7519  df71 72fb01        	addw	x,(OFST-40,sp)
7520  df74 fe            	ldw	x,(x)
7521  df75 cdf5ef        	call	_strlen
7523  df78 1c0003        	addw	x,#3
7524  df7b cdfa43        	call	c_uitolx
7526  df7e 96            	ldw	x,sp
7527  df7f 1c0012        	addw	x,#OFST-23
7528  df82 cdf841        	call	c_lgadd
7531                     ; 1503     for(i = 0; i < num_subs; ++i) {
7533  df85 1e28          	ldw	x,(OFST-1,sp)
7534  df87 5c            	incw	x
7535  df88               L5223:
7537  df88 1f28          	ldw	(OFST-1,sp),x
7541  df8a 1326          	cpw	x,(OFST-3,sp)
7542  df8c 96            	ldw	x,sp
7543  df8d 25da          	jrult	L1223
7544                     ; 1509     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
7546  df8f 1c000d        	addw	x,#OFST-28
7547  df92 89            	pushw	x
7548  df93 1e30          	ldw	x,(OFST+7,sp)
7549  df95 89            	pushw	x
7550  df96 1e2e          	ldw	x,(OFST+5,sp)
7551  df98 cdd9a7        	call	_mqtt_pack_fixed_header
7553  df9b 5b04          	addw	sp,#4
7554  df9d 1f28          	ldw	(OFST-1,sp),x
7556                     ; 1510     if (rv <= 0) return rv;
7558  df9f 9c            	rvf	
7559  dfa0 2c03          	jrsgt	L1323
7563  dfa2               L205:
7565  dfa2 5b2b          	addw	sp,#43
7566  dfa4 81            	ret	
7567  dfa5               L1323:
7568                     ; 1511     buf += rv;
7570  dfa5 1e2a          	ldw	x,(OFST+1,sp)
7571  dfa7 72fb28        	addw	x,(OFST-1,sp)
7572  dfaa 1f2a          	ldw	(OFST+1,sp),x
7573                     ; 1512     bufsz -= rv;
7575  dfac 1e2e          	ldw	x,(OFST+5,sp)
7576  dfae 72f028        	subw	x,(OFST-1,sp)
7577  dfb1 1f2e          	ldw	(OFST+5,sp),x
7578                     ; 1515     if (bufsz < fixed_header.remaining_length) return 0;
7580  dfb3 cdfa43        	call	c_uitolx
7582  dfb6 96            	ldw	x,sp
7583  dfb7 1c0012        	addw	x,#OFST-23
7584  dfba cdf811        	call	c_lcmp
7586  dfbd 2403          	jruge	L3323
7589  dfbf 5f            	clrw	x
7591  dfc0 20e0          	jra	L205
7592  dfc2               L3323:
7593                     ; 1518     buf += __mqtt_pack_uint16(buf, packet_id);
7595  dfc2 1e30          	ldw	x,(OFST+7,sp)
7596  dfc4 89            	pushw	x
7597  dfc5 1e2c          	ldw	x,(OFST+3,sp)
7598  dfc7 cde32a        	call	___mqtt_pack_uint16
7600  dfca 5b02          	addw	sp,#2
7601  dfcc 72fb2a        	addw	x,(OFST+1,sp)
7602  dfcf 1f2a          	ldw	(OFST+1,sp),x
7603                     ; 1521     for(i = 0; i < num_subs; ++i) {
7605  dfd1 5f            	clrw	x
7607  dfd2 202b          	jra	L1423
7608  dfd4               L5323:
7609                     ; 1522         buf += __mqtt_pack_str(buf, topic[i]);
7611  dfd4 96            	ldw	x,sp
7612  dfd5 1c0016        	addw	x,#OFST-19
7613  dfd8 1f01          	ldw	(OFST-40,sp),x
7615  dfda 1e28          	ldw	x,(OFST-1,sp)
7616  dfdc 58            	sllw	x
7617  dfdd 72fb01        	addw	x,(OFST-40,sp)
7618  dfe0 fe            	ldw	x,(x)
7619  dfe1 89            	pushw	x
7620  dfe2 1e2c          	ldw	x,(OFST+3,sp)
7621  dfe4 cde36b        	call	___mqtt_pack_str
7623  dfe7 5b02          	addw	sp,#2
7624  dfe9 72fb2a        	addw	x,(OFST+1,sp)
7625  dfec 1f2a          	ldw	(OFST+1,sp),x
7626                     ; 1523         *buf++ = max_qos[i];
7628  dfee 96            	ldw	x,sp
7629  dfef 1c0005        	addw	x,#OFST-36
7630  dff2 72fb28        	addw	x,(OFST-1,sp)
7631  dff5 f6            	ld	a,(x)
7632  dff6 1e2a          	ldw	x,(OFST+1,sp)
7633  dff8 f7            	ld	(x),a
7634  dff9 5c            	incw	x
7635  dffa 1f2a          	ldw	(OFST+1,sp),x
7636                     ; 1521     for(i = 0; i < num_subs; ++i) {
7638  dffc 1e28          	ldw	x,(OFST-1,sp)
7639  dffe 5c            	incw	x
7640  dfff               L1423:
7641  dfff 1f28          	ldw	(OFST-1,sp),x
7645  e001 1326          	cpw	x,(OFST-3,sp)
7646  e003 25cf          	jrult	L5323
7647                     ; 1526     return buf - start;
7649  e005 1e2a          	ldw	x,(OFST+1,sp)
7650  e007 72f003        	subw	x,(OFST-38,sp)
7652  e00a 2096          	jra	L205
7711                     ; 1531 int16_t mqtt_unpack_unsuback_response(struct mqtt_response *mqtt_response, const uint8_t *buf) 
7711                     ; 1532 {
7712                     .text:	section	.text,new
7713  e00c               _mqtt_unpack_unsuback_response:
7715  e00c 89            	pushw	x
7716  e00d 89            	pushw	x
7717       00000002      OFST:	set	2
7720                     ; 1533     const uint8_t *const start = buf;
7722  e00e 1e07          	ldw	x,(OFST+5,sp)
7723  e010 1f01          	ldw	(OFST-1,sp),x
7725                     ; 1535     if (mqtt_response->fixed_header.remaining_length != 2) {
7727  e012 1e03          	ldw	x,(OFST+1,sp)
7728  e014 1c0005        	addw	x,#5
7729  e017 cdf87c        	call	c_ltor
7731  e01a ae9ed8        	ldw	x,#L473
7732  e01d cdf811        	call	c_lcmp
7734  e020 2705          	jreq	L5723
7735                     ; 1536         return MQTT_ERROR_MALFORMED_RESPONSE;
7737  e022 ae800c        	ldw	x,#32780
7739  e025 2014          	jra	L015
7740  e027               L5723:
7741                     ; 1540     mqtt_response->decoded.unsuback.packet_id = __mqtt_unpack_uint16(buf);
7743  e027 1e07          	ldw	x,(OFST+5,sp)
7744  e029 cde34e        	call	___mqtt_unpack_uint16
7746  e02c 1603          	ldw	y,(OFST+1,sp)
7747  e02e 90ef09        	ldw	(9,y),x
7748                     ; 1541     buf += 2;
7750  e031 1e07          	ldw	x,(OFST+5,sp)
7751  e033 1c0002        	addw	x,#2
7752  e036 1f07          	ldw	(OFST+5,sp),x
7753                     ; 1543     return buf - start;
7755  e038 72f001        	subw	x,(OFST-1,sp)
7757  e03b               L015:
7759  e03b 5b04          	addw	sp,#4
7760  e03d 81            	ret	
7876                     ; 1548 int16_t mqtt_pack_unsubscribe_request(uint8_t *buf, uint16_t bufsz, uint16_t packet_id, ...)
7876                     ; 1549 {
7877                     .text:	section	.text,new
7878                     _mqtt_pack_unsubscribe_request:
7880                     	pushw	x
7881                     	subw	sp,#33
7882       00000021      OFST:	set	33
7885                     ; 1551     const uint8_t *const start = buf;
7887                     	ldw	(OFST-30,sp),x
7889                     ; 1554     uint16_t num_subs = 0;
7891                     	clrw	x
7892                     	ldw	(OFST-3,sp),x
7894                     ; 1559     va_start(args, packet_id);
7896                     	ldw	x,sp
7897                     	addw	x,#OFST+9
7898                     	ldw	(OFST-1,sp),x
7900                     L7433:
7901                     ; 1561         topic[num_subs] = va_arg(args, const char*);
7903                     	ldw	x,(OFST-1,sp)
7904                     	addw	x,#2
7905                     	ldw	(OFST-1,sp),x
7907                     	subw	x,#2
7908                     	ldw	y,sp
7909                     	addw	y,#OFST-19
7910                     	ldw	(OFST-32,sp),y
7912                     	ldw	y,(OFST-3,sp)
7913                     	sllw	y
7914                     	addw	y,(OFST-32,sp)
7915                     	ldw	x,(x)
7916                     	ldw	(y),x
7917                     ; 1562         if (topic[num_subs] == NULL) {
7919                     	ldw	x,sp
7920                     	addw	x,#OFST-19
7921                     	ldw	(OFST-32,sp),x
7923                     	ldw	x,(OFST-3,sp)
7924                     	sllw	x
7925                     	addw	x,(OFST-32,sp)
7926                     	ld	a,(1,x)
7927                     	or	a,(x)
7928                     	jrne	L3533
7929                     ; 1564             break;
7930                     ; 1572     va_end(args);
7932                     ; 1575     fixed_header.control_type = MQTT_CONTROL_UNSUBSCRIBE;
7934                     	ld	a,#10
7935                     	ld	(OFST-28,sp),a
7937                     ; 1576     fixed_header.control_flags = 2u;
7939                     	ld	a,(OFST-24,sp)
7940                     	and	a,#240
7941                     	or	a,#2
7942                     	ld	(OFST-24,sp),a
7944                     ; 1577     fixed_header.remaining_length = 2u; // size of variable header
7946                     	ldw	x,#2
7947                     	ldw	(OFST-21,sp),x
7948                     	clrw	x
7949                     	ldw	(OFST-23,sp),x
7951                     ; 1578     for(i = 0; i < num_subs; ++i) {
7953                     	jra	L3633
7954                     L3533:
7955                     ; 1567         ++num_subs;
7957                     	ldw	x,(OFST-3,sp)
7958                     	incw	x
7959                     	ldw	(OFST-3,sp),x
7961                     ; 1568         if (num_subs >= MQTT_UNSUBSCRIBE_REQUEST_MAX_NUM_TOPICS) {
7963                     	cpw	x,#8
7964                     	jrult	L7433
7965                     ; 1569             return MQTT_ERROR_UNSUBSCRIBE_TOO_MANY_TOPICS;
7967                     	ldw	x,#32781
7969                     	jra	L425
7970                     L7533:
7971                     ; 1580         fixed_header.remaining_length += __mqtt_packed_cstrlen(topic[i]);
7973                     	addw	x,#OFST-19
7974                     	ldw	(OFST-32,sp),x
7976                     	ldw	x,(OFST-1,sp)
7977                     	sllw	x
7978                     	addw	x,(OFST-32,sp)
7979                     	ldw	x,(x)
7980                     	call	_strlen
7982                     	addw	x,#2
7983                     	call	c_uitolx
7985                     	ldw	x,sp
7986                     	addw	x,#OFST-23
7987                     	call	c_lgadd
7990                     ; 1578     for(i = 0; i < num_subs; ++i) {
7992                     	ldw	x,(OFST-1,sp)
7993                     	incw	x
7994                     L3633:
7996                     	ldw	(OFST-1,sp),x
8000                     	cpw	x,(OFST-3,sp)
8001                     	ldw	x,sp
8002                     	jrult	L7533
8003                     ; 1584     rv = mqtt_pack_fixed_header(buf, bufsz, &fixed_header);
8005                     	addw	x,#OFST-28
8006                     	pushw	x
8007                     	ldw	x,(OFST+7,sp)
8008                     	pushw	x
8009                     	ldw	x,(OFST+5,sp)
8010                     	call	_mqtt_pack_fixed_header
8012                     	addw	sp,#4
8013                     	ldw	(OFST-1,sp),x
8015                     ; 1585     if (rv <= 0) return rv;
8017                     	rvf	
8018                     	jrsgt	L7633
8022                     L425:
8024                     	addw	sp,#35
8025                     	ret	
8026                     L7633:
8027                     ; 1586     buf += rv;
8029                     	ldw	x,(OFST+1,sp)
8030                     	addw	x,(OFST-1,sp)
8031                     	ldw	(OFST+1,sp),x
8032                     ; 1587     bufsz -= rv;
8034                     	ldw	x,(OFST+5,sp)
8035                     	subw	x,(OFST-1,sp)
8036                     	ldw	(OFST+5,sp),x
8037                     ; 1590     if (bufsz < fixed_header.remaining_length) return 0;
8039                     	call	c_uitolx
8041                     	ldw	x,sp
8042                     	addw	x,#OFST-23
8043                     	call	c_lcmp
8045                     	jruge	L1733
8048                     	clrw	x
8050                     	jra	L425
8051                     L1733:
8052                     ; 1593     buf += __mqtt_pack_uint16(buf, packet_id);
8054                     	ldw	x,(OFST+7,sp)
8055                     	pushw	x
8056                     	ldw	x,(OFST+3,sp)
8057                     	call	___mqtt_pack_uint16
8059                     	addw	sp,#2
8060                     	addw	x,(OFST+1,sp)
8061                     	ldw	(OFST+1,sp),x
8062                     ; 1596     for(i = 0; i < num_subs; ++i) buf += __mqtt_pack_str(buf, topic[i]);
8064                     	clrw	x
8066                     	jra	L7733
8067                     L3733:
8070                     	ldw	x,sp
8071                     	addw	x,#OFST-19
8072                     	ldw	(OFST-32,sp),x
8074                     	ldw	x,(OFST-1,sp)
8075                     	sllw	x
8076                     	addw	x,(OFST-32,sp)
8077                     	ldw	x,(x)
8078                     	pushw	x
8079                     	ldw	x,(OFST+3,sp)
8080                     	call	___mqtt_pack_str
8082                     	addw	sp,#2
8083                     	addw	x,(OFST+1,sp)
8084                     	ldw	(OFST+1,sp),x
8087                     	ldw	x,(OFST-1,sp)
8088                     	incw	x
8089                     L7733:
8090                     	ldw	(OFST-1,sp),x
8094                     	cpw	x,(OFST-3,sp)
8095                     	jrult	L3733
8096                     ; 1598     return buf - start;
8098                     	ldw	x,(OFST+1,sp)
8099                     	subw	x,(OFST-30,sp)
8101                     	jra	L425
8155                     ; 1603 void mqtt_mq_init(struct mqtt_message_queue *mq, void *buf, uint16_t bufsz) 
8155                     ; 1604 {  
8156                     .text:	section	.text,new
8157  e03e               _mqtt_mq_init:
8159  e03e 89            	pushw	x
8160       00000000      OFST:	set	0
8163                     ; 1605     if(buf != NULL)
8165  e03f 1e05          	ldw	x,(OFST+5,sp)
8166  e041 2748          	jreq	L1343
8167                     ; 1607         mq->mem_start = buf;
8169  e043 1e01          	ldw	x,(OFST+1,sp)
8170  e045 1605          	ldw	y,(OFST+5,sp)
8171  e047 ff            	ldw	(x),y
8172                     ; 1608         mq->mem_end = (unsigned char*)buf + bufsz;
8174  e048 93            	ldw	x,y
8175  e049 1601          	ldw	y,(OFST+1,sp)
8176  e04b 72fb07        	addw	x,(OFST+7,sp)
8177  e04e 90ef02        	ldw	(2,y),x
8178                     ; 1609         mq->curr = buf;
8180  e051 93            	ldw	x,y
8181  e052 1605          	ldw	y,(OFST+5,sp)
8182  e054 ef04          	ldw	(4,x),y
8183                     ; 1610         mq->queue_tail = mq->mem_end;
8185  e056 9093          	ldw	y,x
8186  e058 90ee02        	ldw	y,(2,y)
8187  e05b ef08          	ldw	(8,x),y
8188                     ; 1611         mq->curr_sz = mqtt_mq_currsz(mq);
8190  e05d 1601          	ldw	y,(OFST+1,sp)
8191  e05f 90ee08        	ldw	y,(8,y)
8192  e062 72a2000c      	subw	y,#12
8193  e066 90bf07        	ldw	c_y,y
8194  e069 9093          	ldw	y,x
8195  e06b 90ee04        	ldw	y,(4,y)
8196  e06e 90b307        	cpw	y,c_y
8197  e071 2505          	jrult	L035
8198  e073 5f            	clrw	x
8199  e074 1601          	ldw	y,(OFST+1,sp)
8200  e076 2010          	jra	L235
8201  e078               L035:
8202  e078 ee08          	ldw	x,(8,x)
8203  e07a 1d000c        	subw	x,#12
8204  e07d 1601          	ldw	y,(OFST+1,sp)
8205  e07f 01            	rrwa	x,a
8206  e080 90e005        	sub	a,(5,y)
8207  e083 01            	rrwa	x,a
8208  e084 90e204        	sbc	a,(4,y)
8209  e087 01            	rrwa	x,a
8210  e088               L235:
8211  e088 90ef06        	ldw	(6,y),x
8212  e08b               L1343:
8213                     ; 1613 }
8216  e08b 85            	popw	x
8217  e08c 81            	ret	
8264                     ; 1616 struct mqtt_queued_message* mqtt_mq_register(struct mqtt_message_queue *mq, uint16_t nbytes)
8264                     ; 1617 {
8265                     .text:	section	.text,new
8266  e08d               _mqtt_mq_register:
8268  e08d 89            	pushw	x
8269       00000000      OFST:	set	0
8272                     ; 1619     --(mq->queue_tail);
8274  e08e 9093          	ldw	y,x
8275  e090 ee08          	ldw	x,(8,x)
8276  e092 1d000c        	subw	x,#12
8277  e095 90ef08        	ldw	(8,y),x
8278                     ; 1620     mq->queue_tail->start = mq->curr;
8280  e098 1e01          	ldw	x,(OFST+1,sp)
8281  e09a 9093          	ldw	y,x
8282  e09c 90ee08        	ldw	y,(8,y)
8283  e09f ee04          	ldw	x,(4,x)
8284  e0a1 90ff          	ldw	(y),x
8285                     ; 1621     mq->queue_tail->size = nbytes;
8287  e0a3 1e01          	ldw	x,(OFST+1,sp)
8288  e0a5 ee08          	ldw	x,(8,x)
8289  e0a7 1605          	ldw	y,(OFST+5,sp)
8290  e0a9 ef02          	ldw	(2,x),y
8291                     ; 1622     mq->queue_tail->state = MQTT_QUEUED_UNSENT;
8293  e0ab 1e01          	ldw	x,(OFST+1,sp)
8294  e0ad ee08          	ldw	x,(8,x)
8295  e0af 6f04          	clr	(4,x)
8296                     ; 1625     mq->curr += nbytes;
8298  e0b1 1e01          	ldw	x,(OFST+1,sp)
8299  e0b3 9093          	ldw	y,x
8300  e0b5 ee04          	ldw	x,(4,x)
8301  e0b7 72fb05        	addw	x,(OFST+5,sp)
8302  e0ba 90ef04        	ldw	(4,y),x
8303                     ; 1626     mq->curr_sz = mqtt_mq_currsz(mq);
8305  e0bd 1e01          	ldw	x,(OFST+1,sp)
8306  e0bf 9093          	ldw	y,x
8307  e0c1 90ee08        	ldw	y,(8,y)
8308  e0c4 72a2000c      	subw	y,#12
8309  e0c8 90bf07        	ldw	c_y,y
8310  e0cb 9093          	ldw	y,x
8311  e0cd 90ee04        	ldw	y,(4,y)
8312  e0d0 90b307        	cpw	y,c_y
8313  e0d3 2505          	jrult	L635
8314  e0d5 5f            	clrw	x
8315  e0d6 1601          	ldw	y,(OFST+1,sp)
8316  e0d8 2010          	jra	L045
8317  e0da               L635:
8318  e0da ee08          	ldw	x,(8,x)
8319  e0dc 1d000c        	subw	x,#12
8320  e0df 1601          	ldw	y,(OFST+1,sp)
8321  e0e1 01            	rrwa	x,a
8322  e0e2 90e005        	sub	a,(5,y)
8323  e0e5 01            	rrwa	x,a
8324  e0e6 90e204        	sbc	a,(4,y)
8325  e0e9 01            	rrwa	x,a
8326  e0ea               L045:
8327  e0ea 90ef06        	ldw	(6,y),x
8328                     ; 1628     return mq->queue_tail;
8330  e0ed 1e01          	ldw	x,(OFST+1,sp)
8331  e0ef ee08          	ldw	x,(8,x)
8334  e0f1 5b02          	addw	sp,#2
8335  e0f3 81            	ret	
8413                     ; 1632 void mqtt_mq_clean(struct mqtt_message_queue *mq) {
8414                     .text:	section	.text,new
8415  e0f4               _mqtt_mq_clean:
8417  e0f4 89            	pushw	x
8418  e0f5 5208          	subw	sp,#8
8419       00000008      OFST:	set	8
8422                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8424  e0f7 ee02          	ldw	x,(2,x)
8426  e0f9 2047          	jra	L5253
8427  e0fb               L5153:
8428                     ; 1636         if (new_head->state != MQTT_QUEUED_COMPLETE) break;
8430  e0fb 1e07          	ldw	x,(OFST-1,sp)
8431  e0fd e604          	ld	a,(4,x)
8432  e0ff a102          	cp	a,#2
8433  e101 273f          	jreq	L5253
8435  e103               L3253:
8436                     ; 1640     if (new_head < mq->queue_tail) {
8438  e103 1e09          	ldw	x,(OFST+1,sp)
8439  e105 ee08          	ldw	x,(8,x)
8440  e107 1307          	cpw	x,(OFST-1,sp)
8441  e109 2346          	jrule	L7253
8442                     ; 1641         mq->curr = mq->mem_start;
8444  e10b 1e09          	ldw	x,(OFST+1,sp)
8445  e10d 9093          	ldw	y,x
8446  e10f 90fe          	ldw	y,(y)
8447  e111 ef04          	ldw	(4,x),y
8448                     ; 1642         mq->queue_tail = mq->mem_end;
8450  e113 9093          	ldw	y,x
8451  e115 90ee02        	ldw	y,(2,y)
8452  e118 ef08          	ldw	(8,x),y
8453                     ; 1643         mq->curr_sz = mqtt_mq_currsz(mq);
8455  e11a 72a2000c      	subw	y,#12
8456  e11e 90bf07        	ldw	c_y,y
8457  e121 9093          	ldw	y,x
8458  e123 90ee04        	ldw	y,(4,y)
8459  e126 90b307        	cpw	y,c_y
8460  e129 2504          	jrult	L445
8461  e12b               LC022:
8462  e12b 5f            	clrw	x
8463  e12c cce23a        	jp	L655
8464  e12f               L445:
8465  e12f ee08          	ldw	x,(8,x)
8466  e131 1d000c        	subw	x,#12
8467  e134 1609          	ldw	y,(OFST+1,sp)
8468  e136 01            	rrwa	x,a
8469  e137 90e005        	sub	a,(5,y)
8470  e13a 01            	rrwa	x,a
8471  e13b 90e204        	sbc	a,(4,y)
8472  e13e 01            	rrwa	x,a
8473                     ; 1644         return;
8475  e13f cce23c        	jp	LC020
8476  e142               L5253:
8477                     ; 1635     for(new_head = mqtt_mq_get(mq, 0); new_head >= mq->queue_tail; --new_head) {
8479  e142 1d000c        	subw	x,#12
8480  e145 1f07          	ldw	(OFST-1,sp),x
8484  e147 1e09          	ldw	x,(OFST+1,sp)
8485  e149 ee08          	ldw	x,(8,x)
8486  e14b 1307          	cpw	x,(OFST-1,sp)
8487  e14d 23ac          	jrule	L5153
8488  e14f 20b2          	jra	L3253
8489  e151               L7253:
8490                     ; 1646     else if (new_head == mqtt_mq_get(mq, 0)) {
8492  e151 1e09          	ldw	x,(OFST+1,sp)
8493  e153 ee02          	ldw	x,(2,x)
8494  e155 1d000c        	subw	x,#12
8495  e158 1307          	cpw	x,(OFST-1,sp)
8496  e15a 2603          	jrne	L1353
8497                     ; 1648         return;
8498  e15c               L065:
8501  e15c 5b0a          	addw	sp,#10
8502  e15e 81            	ret	
8503  e15f               L1353:
8504                     ; 1653         uint16_t n = mq->curr - new_head->start;
8506  e15f 1e09          	ldw	x,(OFST+1,sp)
8507  e161 1607          	ldw	y,(OFST-1,sp)
8508  e163 ee04          	ldw	x,(4,x)
8509  e165 01            	rrwa	x,a
8510  e166 90e001        	sub	a,(1,y)
8511  e169 01            	rrwa	x,a
8512  e16a 90f2          	sbc	a,(y)
8513  e16c 01            	rrwa	x,a
8514  e16d 1f05          	ldw	(OFST-3,sp),x
8516                     ; 1654         uint16_t removing = new_head->start - (uint8_t*) mq->mem_start;
8518  e16f 93            	ldw	x,y
8519  e170 1609          	ldw	y,(OFST+1,sp)
8520  e172 fe            	ldw	x,(x)
8521  e173 01            	rrwa	x,a
8522  e174 90e001        	sub	a,(1,y)
8523  e177 01            	rrwa	x,a
8524  e178 90f2          	sbc	a,(y)
8525  e17a 01            	rrwa	x,a
8526  e17b 1f03          	ldw	(OFST-5,sp),x
8528                     ; 1655         memmove(mq->mem_start, new_head->start, n);
8530  e17d 1e05          	ldw	x,(OFST-3,sp)
8531  e17f 89            	pushw	x
8532  e180 1e09          	ldw	x,(OFST+1,sp)
8533  e182 fe            	ldw	x,(x)
8534  e183 89            	pushw	x
8535  e184 1e0d          	ldw	x,(OFST+5,sp)
8536  e186 fe            	ldw	x,(x)
8537  e187 cdf58a        	call	_memmove
8539  e18a 5b04          	addw	sp,#4
8540                     ; 1656         mq->curr = (unsigned char*)mq->mem_start + n;
8542  e18c 1e09          	ldw	x,(OFST+1,sp)
8543  e18e fe            	ldw	x,(x)
8544  e18f 1609          	ldw	y,(OFST+1,sp)
8545  e191 72fb05        	addw	x,(OFST-3,sp)
8546  e194 90ef04        	ldw	(4,y),x
8547                     ; 1660             int16_t new_tail_idx = new_head - mq->queue_tail;
8549  e197 1e07          	ldw	x,(OFST-1,sp)
8550  e199 01            	rrwa	x,a
8551  e19a 90e009        	sub	a,(9,y)
8552  e19d 01            	rrwa	x,a
8553  e19e 90e208        	sbc	a,(8,y)
8554  e1a1 01            	rrwa	x,a
8555  e1a2 a60c          	ld	a,#12
8556  e1a4 cdf9fa        	call	c_sdivx
8558  e1a7 1f05          	ldw	(OFST-3,sp),x
8560                     ; 1661             memmove(mqtt_mq_get(mq, new_tail_idx), mq->queue_tail, sizeof(struct mqtt_queued_message) * (new_tail_idx + 1));
8562  e1a9 5c            	incw	x
8563  e1aa a60c          	ld	a,#12
8564  e1ac cdf5fb        	call	c_bmulx
8566  e1af 89            	pushw	x
8567  e1b0 1e0b          	ldw	x,(OFST+3,sp)
8568  e1b2 ee08          	ldw	x,(8,x)
8569  e1b4 89            	pushw	x
8570  e1b5 1e09          	ldw	x,(OFST+1,sp)
8571  e1b7 a60c          	ld	a,#12
8572  e1b9 cdf5fb        	call	c_bmulx
8574  e1bc 1f05          	ldw	(OFST-3,sp),x
8576  e1be 1e0d          	ldw	x,(OFST+5,sp)
8577  e1c0 ee02          	ldw	x,(2,x)
8578  e1c2 1d000c        	subw	x,#12
8579  e1c5 72f005        	subw	x,(OFST-3,sp)
8580  e1c8 cdf58a        	call	_memmove
8582  e1cb 5b04          	addw	sp,#4
8583                     ; 1662             mq->queue_tail = mqtt_mq_get(mq, new_tail_idx);
8585  e1cd 1e05          	ldw	x,(OFST-3,sp)
8586  e1cf a60c          	ld	a,#12
8587  e1d1 cdf5fb        	call	c_bmulx
8589  e1d4 1f01          	ldw	(OFST-7,sp),x
8591  e1d6 1e09          	ldw	x,(OFST+1,sp)
8592  e1d8 ee02          	ldw	x,(2,x)
8593  e1da 1d000c        	subw	x,#12
8594  e1dd 1609          	ldw	y,(OFST+1,sp)
8595  e1df 72f001        	subw	x,(OFST-7,sp)
8596  e1e2 90ef08        	ldw	(8,y),x
8597                     ; 1666                 int16_t i = 0;
8599  e1e5 5f            	clrw	x
8601  e1e6 201e          	jra	L1453
8602  e1e8               L5353:
8603                     ; 1667                 for(; i < new_tail_idx + 1; ++i) mqtt_mq_get(mq, i)->start -= removing;
8605  e1e8 1e07          	ldw	x,(OFST-1,sp)
8606  e1ea a60c          	ld	a,#12
8607  e1ec cdf5fb        	call	c_bmulx
8609  e1ef 1f01          	ldw	(OFST-7,sp),x
8611  e1f1 1e09          	ldw	x,(OFST+1,sp)
8612  e1f3 ee02          	ldw	x,(2,x)
8613  e1f5 1d000c        	subw	x,#12
8614  e1f8 72f001        	subw	x,(OFST-7,sp)
8615  e1fb 9093          	ldw	y,x
8616  e1fd fe            	ldw	x,(x)
8617  e1fe 72f003        	subw	x,(OFST-5,sp)
8618  e201 90ff          	ldw	(y),x
8621  e203 1e07          	ldw	x,(OFST-1,sp)
8622  e205 5c            	incw	x
8623  e206               L1453:
8624  e206 1f07          	ldw	(OFST-1,sp),x
8628  e208 1e05          	ldw	x,(OFST-3,sp)
8629  e20a 5c            	incw	x
8630  e20b 1307          	cpw	x,(OFST-1,sp)
8631  e20d 2cd9          	jrsgt	L5353
8632                     ; 1673     mq->curr_sz = mqtt_mq_currsz(mq);
8634  e20f 1e09          	ldw	x,(OFST+1,sp)
8635  e211 9093          	ldw	y,x
8636  e213 90ee08        	ldw	y,(8,y)
8637  e216 72a2000c      	subw	y,#12
8638  e21a 90bf07        	ldw	c_y,y
8639  e21d 9093          	ldw	y,x
8640  e21f 90ee04        	ldw	y,(4,y)
8641  e222 90b307        	cpw	y,c_y
8642  e225 2503cce12b    	jruge	LC022
8643  e22a ee08          	ldw	x,(8,x)
8644  e22c 1d000c        	subw	x,#12
8645  e22f 1609          	ldw	y,(OFST+1,sp)
8646  e231 01            	rrwa	x,a
8647  e232 90e005        	sub	a,(5,y)
8648  e235 01            	rrwa	x,a
8649  e236 90e204        	sbc	a,(4,y)
8650  e239 01            	rrwa	x,a
8651  e23a               L655:
8652  e23a 1609          	ldw	y,(OFST+1,sp)
8653  e23c               LC020:
8654  e23c 90ef06        	ldw	(6,y),x
8655                     ; 1674 }
8657  e23f cce15c        	jra	L065
8729                     ; 1677 struct mqtt_queued_message* mqtt_mq_find(struct mqtt_message_queue *mq, enum MQTTControlPacketType control_type, uint16_t *packet_id)
8729                     ; 1678 {
8730                     .text:	section	.text,new
8731  e242               _mqtt_mq_find:
8733  e242 89            	pushw	x
8734  e243 89            	pushw	x
8735       00000002      OFST:	set	2
8738                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8740  e244 ee02          	ldw	x,(2,x)
8742  e246 2025          	jra	L1163
8743  e248               L5063:
8744                     ; 1681         if (curr->control_type == control_type) {
8746  e248 1e01          	ldw	x,(OFST-1,sp)
8747  e24a e609          	ld	a,(9,x)
8748  e24c 1107          	cp	a,(OFST+5,sp)
8749  e24e 261b          	jrne	L5163
8750                     ; 1682             if ((packet_id == NULL && curr->state != MQTT_QUEUED_COMPLETE) ||
8750                     ; 1683                 (packet_id != NULL && *packet_id == curr->packet_id)) {
8752  e250 1e08          	ldw	x,(OFST+6,sp)
8753  e252 2608          	jrne	L3263
8755  e254 1e01          	ldw	x,(OFST-1,sp)
8756  e256 e604          	ld	a,(4,x)
8757  e258 a102          	cp	a,#2
8758  e25a 261f          	jrne	L465
8759  e25c               L3263:
8761  e25c 1e08          	ldw	x,(OFST+6,sp)
8762  e25e 270b          	jreq	L5163
8764  e260 1601          	ldw	y,(OFST-1,sp)
8765  e262 fe            	ldw	x,(x)
8766  e263 90e30a        	cpw	x,(10,y)
8767  e266 2603          	jrne	L5163
8768  e268 93            	ldw	x,y
8769                     ; 1684                 return curr;
8772  e269 2010          	jra	L465
8773  e26b               L5163:
8774                     ; 1680     for(curr = mqtt_mq_get(mq, 0); curr >= mq->queue_tail; --curr) {
8776  e26b 1e01          	ldw	x,(OFST-1,sp)
8777  e26d               L1163:
8778  e26d 1d000c        	subw	x,#12
8779  e270 1f01          	ldw	(OFST-1,sp),x
8783  e272 1e03          	ldw	x,(OFST+1,sp)
8784  e274 ee08          	ldw	x,(8,x)
8785  e276 1301          	cpw	x,(OFST-1,sp)
8786  e278 23ce          	jrule	L5063
8787                     ; 1688     return NULL;
8789  e27a 5f            	clrw	x
8791  e27b               L465:
8793  e27b 5b04          	addw	sp,#4
8794  e27d 81            	ret	
8872                     ; 1693 int16_t mqtt_unpack_response(struct mqtt_response* response, const uint8_t *buf, uint16_t bufsz)
8872                     ; 1694 {
8873                     .text:	section	.text,new
8874  e27e               _mqtt_unpack_response:
8876  e27e 89            	pushw	x
8877  e27f 5204          	subw	sp,#4
8878       00000004      OFST:	set	4
8881                     ; 1695     const uint8_t *const start = buf;
8883  e281 1e09          	ldw	x,(OFST+5,sp)
8884  e283 1f01          	ldw	(OFST-3,sp),x
8886                     ; 1696     int16_t rv = mqtt_unpack_fixed_header(response, buf, bufsz);
8888  e285 1e0b          	ldw	x,(OFST+7,sp)
8889  e287 89            	pushw	x
8890  e288 1e0b          	ldw	x,(OFST+7,sp)
8891  e28a 89            	pushw	x
8892  e28b 1e09          	ldw	x,(OFST+5,sp)
8893  e28d cdd8ea        	call	_mqtt_unpack_fixed_header
8895  e290 5b04          	addw	sp,#4
8896  e292 1f03          	ldw	(OFST-1,sp),x
8898                     ; 1698     if (rv <= 0) return rv;
8900  e294 9c            	rvf	
8904  e295 2d2c          	jrsle	L216
8905                     ; 1699     else buf += rv;
8907  e297 1e09          	ldw	x,(OFST+5,sp)
8908  e299 72fb03        	addw	x,(OFST-1,sp)
8909  e29c 1f09          	ldw	(OFST+5,sp),x
8910                     ; 1701     switch(response->fixed_header.control_type) {
8912  e29e 1e05          	ldw	x,(OFST+1,sp)
8913  e2a0 f6            	ld	a,(x)
8915                     ; 1728         default:
8915                     ; 1729             return MQTT_ERROR_RESPONSE_INVALID_CONTROL_TYPE;
8916  e2a1 a002          	sub	a,#2
8917  e2a3 2721          	jreq	L5263
8918  e2a5 4a            	dec	a
8919  e2a6 2728          	jreq	L7263
8920  e2a8 4a            	dec	a
8921  e2a9 272f          	jreq	L1363
8922  e2ab 4a            	dec	a
8923  e2ac 2736          	jreq	L3363
8924  e2ae 4a            	dec	a
8925  e2af 273d          	jreq	L5363
8926  e2b1 4a            	dec	a
8927  e2b2 2744          	jreq	L7363
8928  e2b4 a002          	sub	a,#2
8929  e2b6 274a          	jreq	L1463
8930  e2b8 a002          	sub	a,#2
8931  e2ba 2750          	jreq	L3463
8932  e2bc a002          	sub	a,#2
8933  e2be 2756          	jreq	L5463
8936  e2c0 ae800e        	ldw	x,#32782
8938  e2c3               L216:
8940  e2c3 5b06          	addw	sp,#6
8941  e2c5 81            	ret	
8942  e2c6               L5263:
8943                     ; 1702         case MQTT_CONTROL_CONNACK:
8943                     ; 1703             rv = mqtt_unpack_connack_response(response, buf);
8945  e2c6 1e09          	ldw	x,(OFST+5,sp)
8946  e2c8 89            	pushw	x
8947  e2c9 1e07          	ldw	x,(OFST+3,sp)
8948  e2cb cddbc0        	call	_mqtt_unpack_connack_response
8950                     ; 1704             break;
8952  e2ce 204a          	jra	L3173
8953  e2d0               L7263:
8954                     ; 1705         case MQTT_CONTROL_PUBLISH:
8954                     ; 1706             rv = mqtt_unpack_publish_response(response, buf);
8956  e2d0 1e09          	ldw	x,(OFST+5,sp)
8957  e2d2 89            	pushw	x
8958  e2d3 1e07          	ldw	x,(OFST+3,sp)
8959  e2d5 cddd31        	call	_mqtt_unpack_publish_response
8961                     ; 1707             break;
8963  e2d8 2040          	jra	L3173
8964  e2da               L1363:
8965                     ; 1708         case MQTT_CONTROL_PUBACK:
8965                     ; 1709             rv = mqtt_unpack_pubxxx_response(response, buf);
8967  e2da 1e09          	ldw	x,(OFST+5,sp)
8968  e2dc 89            	pushw	x
8969  e2dd 1e07          	ldw	x,(OFST+3,sp)
8970  e2df cdde5e        	call	_mqtt_unpack_pubxxx_response
8972                     ; 1710             break;
8974  e2e2 2036          	jra	L3173
8975  e2e4               L3363:
8976                     ; 1711         case MQTT_CONTROL_PUBREC:
8976                     ; 1712             rv = mqtt_unpack_pubxxx_response(response, buf);
8978  e2e4 1e09          	ldw	x,(OFST+5,sp)
8979  e2e6 89            	pushw	x
8980  e2e7 1e07          	ldw	x,(OFST+3,sp)
8981  e2e9 cdde5e        	call	_mqtt_unpack_pubxxx_response
8983                     ; 1713             break;
8985  e2ec 202c          	jra	L3173
8986  e2ee               L5363:
8987                     ; 1714         case MQTT_CONTROL_PUBREL:
8987                     ; 1715             rv = mqtt_unpack_pubxxx_response(response, buf);
8989  e2ee 1e09          	ldw	x,(OFST+5,sp)
8990  e2f0 89            	pushw	x
8991  e2f1 1e07          	ldw	x,(OFST+3,sp)
8992  e2f3 cdde5e        	call	_mqtt_unpack_pubxxx_response
8994                     ; 1716             break;
8996  e2f6 2022          	jra	L3173
8997  e2f8               L7363:
8998                     ; 1717         case MQTT_CONTROL_PUBCOMP:
8998                     ; 1718             rv = mqtt_unpack_pubxxx_response(response, buf);
9000  e2f8 1e09          	ldw	x,(OFST+5,sp)
9001  e2fa 89            	pushw	x
9002  e2fb 1e07          	ldw	x,(OFST+3,sp)
9003  e2fd cdde5e        	call	_mqtt_unpack_pubxxx_response
9005                     ; 1719             break;
9007  e300 2018          	jra	L3173
9008  e302               L1463:
9009                     ; 1720         case MQTT_CONTROL_SUBACK:
9009                     ; 1721             rv = mqtt_unpack_suback_response(response, buf);
9011  e302 1e09          	ldw	x,(OFST+5,sp)
9012  e304 89            	pushw	x
9013  e305 1e07          	ldw	x,(OFST+3,sp)
9014  e307 cdde96        	call	_mqtt_unpack_suback_response
9016                     ; 1722             break;
9018  e30a 200e          	jra	L3173
9019  e30c               L3463:
9020                     ; 1723         case MQTT_CONTROL_UNSUBACK:
9020                     ; 1724             rv = mqtt_unpack_unsuback_response(response, buf);
9022  e30c 1e09          	ldw	x,(OFST+5,sp)
9023  e30e 89            	pushw	x
9024  e30f 1e07          	ldw	x,(OFST+3,sp)
9025  e311 cde00c        	call	_mqtt_unpack_unsuback_response
9027                     ; 1725             break;
9029  e314 2004          	jra	L3173
9030  e316               L5463:
9031                     ; 1726         case MQTT_CONTROL_PINGRESP:
9031                     ; 1727             return rv;
9033  e316 1e03          	ldw	x,(OFST-1,sp)
9035  e318 20a9          	jra	L216
9036  e31a               L3173:
9037  e31a 5b02          	addw	sp,#2
9038  e31c 1f03          	ldw	(OFST-1,sp),x
9040                     ; 1732     if (rv < 0) return rv;
9045  e31e 2ba3          	jrmi	L216
9046                     ; 1733     buf += rv;
9048  e320 72fb09        	addw	x,(OFST+5,sp)
9049  e323 1f09          	ldw	(OFST+5,sp),x
9050                     ; 1734     return buf - start;
9052  e325 72f001        	subw	x,(OFST-3,sp)
9054  e328 2099          	jra	L216
9104                     ; 1751 int16_t __mqtt_pack_uint16(uint8_t *buf, uint16_t integer)
9104                     ; 1752 {
9105                     .text:	section	.text,new
9106  e32a               ___mqtt_pack_uint16:
9108  e32a 89            	pushw	x
9109  e32b 89            	pushw	x
9110       00000002      OFST:	set	2
9113                     ; 1753   uint16_t integer_htons = HTONS(integer);
9115  e32c 1e07          	ldw	x,(OFST+5,sp)
9116  e32e 1f01          	ldw	(OFST-1,sp),x
9118                     ; 1754   memcpy(buf, &integer_htons, 2);
9120  e330 1e03          	ldw	x,(OFST+1,sp)
9121  e332 bf04          	ldw	c_x,x
9122  e334 9096          	ldw	y,sp
9123  e336 905c          	incw	y
9124  e338 90bf07        	ldw	c_y,y
9125  e33b ae0002        	ldw	x,#2
9126  e33e               L616:
9127  e33e 5a            	decw	x
9128  e33f 92d607        	ld	a,([c_y.w],x)
9129  e342 92d704        	ld	([c_x.w],x),a
9130  e345 5d            	tnzw	x
9131  e346 26f6          	jrne	L616
9132                     ; 1755   return 2;
9134  e348 ae0002        	ldw	x,#2
9137  e34b 5b04          	addw	sp,#4
9138  e34d 81            	ret	
9182                     ; 1759 uint16_t __mqtt_unpack_uint16(const uint8_t *buf)
9182                     ; 1760 {
9183                     .text:	section	.text,new
9184  e34e               ___mqtt_unpack_uint16:
9186  e34e 89            	pushw	x
9187  e34f 89            	pushw	x
9188       00000002      OFST:	set	2
9191                     ; 1762   memcpy(&integer_htons, buf, 2);
9193  e350 96            	ldw	x,sp
9194  e351 5c            	incw	x
9195  e352 bf04          	ldw	c_x,x
9196  e354 1603          	ldw	y,(OFST+1,sp)
9197  e356 90bf07        	ldw	c_y,y
9198  e359 ae0002        	ldw	x,#2
9199  e35c               L226:
9200  e35c 5a            	decw	x
9201  e35d 92d607        	ld	a,([c_y.w],x)
9202  e360 92d704        	ld	([c_x.w],x),a
9203  e363 5d            	tnzw	x
9204  e364 26f6          	jrne	L226
9205                     ; 1763   return HTONS(integer_htons);
9207  e366 1e01          	ldw	x,(OFST-1,sp)
9210  e368 5b04          	addw	sp,#4
9211  e36a 81            	ret	
9272                     ; 1767 int16_t __mqtt_pack_str(uint8_t *buf, const char* str)
9272                     ; 1768 {
9273                     .text:	section	.text,new
9274  e36b               ___mqtt_pack_str:
9276  e36b 89            	pushw	x
9277  e36c 5204          	subw	sp,#4
9278       00000004      OFST:	set	4
9281                     ; 1769     uint16_t length = (uint16_t)strlen(str);
9283  e36e 1e09          	ldw	x,(OFST+5,sp)
9284  e370 cdf5ef        	call	_strlen
9286  e373 1f01          	ldw	(OFST-3,sp),x
9288                     ; 1770     int16_t i = 0;
9290  e375 5f            	clrw	x
9291  e376 1f03          	ldw	(OFST-1,sp),x
9293                     ; 1772     buf += __mqtt_pack_uint16(buf, length);
9295  e378 1e01          	ldw	x,(OFST-3,sp)
9296  e37a 89            	pushw	x
9297  e37b 1e07          	ldw	x,(OFST+3,sp)
9298  e37d cde32a        	call	___mqtt_pack_uint16
9300  e380 5b02          	addw	sp,#2
9301  e382 72fb05        	addw	x,(OFST+1,sp)
9302  e385 1f05          	ldw	(OFST+1,sp),x
9304  e387 1e03          	ldw	x,(OFST-1,sp)
9305  e389 200f          	jra	L3104
9306  e38b               L7004:
9307                     ; 1775     for(; i < length; ++i) *(buf++) = str[i];
9309  e38b 72fb09        	addw	x,(OFST+5,sp)
9310  e38e f6            	ld	a,(x)
9311  e38f 1e05          	ldw	x,(OFST+1,sp)
9312  e391 f7            	ld	(x),a
9313  e392 5c            	incw	x
9314  e393 1f05          	ldw	(OFST+1,sp),x
9317  e395 1e03          	ldw	x,(OFST-1,sp)
9318  e397 5c            	incw	x
9319  e398 1f03          	ldw	(OFST-1,sp),x
9321  e39a               L3104:
9324  e39a 1301          	cpw	x,(OFST-3,sp)
9325  e39c 25ed          	jrult	L7004
9326                     ; 1778     return length + 2;
9328  e39e 1e01          	ldw	x,(OFST-3,sp)
9329  e3a0 1c0002        	addw	x,#2
9332  e3a3 5b06          	addw	sp,#6
9333  e3a5 81            	ret	
9397                     	switch	.bss
9398  016b               _mqtt_sendbuf:
9399  016b 000000000000  	ds.b	300
9400                     	xdef	_mqtt_sendbuf
9401  0297               _MQTT_error_status:
9402  0297 00            	ds.b	1
9403                     	xdef	_MQTT_error_status
9404                     	xref	_second_counter
9405                     	xref	_uip_flags
9406                     	xref	_uip_len
9407                     	xdef	_mqtt_disconnect
9408                     	xdef	___mqtt_ping
9409                     	xdef	_mqtt_ping
9410                     	xdef	_mqtt_unsubscribe
9411                     	xdef	_mqtt_subscribe
9412                     	xdef	___mqtt_pubcomp
9413                     	xdef	___mqtt_pubrel
9414                     	xdef	___mqtt_pubrec
9415                     	xdef	___mqtt_puback
9416                     	xdef	_mqtt_publish
9417                     	xdef	_mqtt_connect
9418                     	xdef	_mqtt_init
9419                     	xdef	_mqtt_sync
9420                     	xdef	___mqtt_recv
9421                     	xdef	___mqtt_send
9422                     	xdef	___mqtt_next_pid
9423                     	xdef	_mqtt_mq_find
9424                     	xdef	_mqtt_mq_register
9425                     	xdef	_mqtt_mq_clean
9426                     	xdef	_mqtt_mq_init
9427                     	xdef	_mqtt_pack_disconnect
9428                     	xdef	_mqtt_pack_ping_request
9429                     	xdef	_mqtt_pack_unsubscribe_request
9430                     	xdef	_mqtt_pack_subscribe_request
9431                     	xdef	_mqtt_pack_pubxxx_request
9432                     	xdef	_mqtt_pack_publish_request
9433                     	xdef	_mqtt_pack_connection_request
9434                     	xdef	_mqtt_pack_fixed_header
9435                     	xdef	_mqtt_unpack_response
9436                     	xdef	_mqtt_unpack_unsuback_response
9437                     	xdef	_mqtt_unpack_suback_response
9438                     	xdef	_mqtt_unpack_pubxxx_response
9439                     	xdef	_mqtt_unpack_publish_response
9440                     	xdef	_mqtt_unpack_connack_response
9441                     	xdef	_mqtt_unpack_fixed_header
9442                     	xdef	___mqtt_pack_str
9443                     	xdef	___mqtt_unpack_uint16
9444                     	xdef	___mqtt_pack_uint16
9445                     	xref	_mqtt_pal_recvall
9446                     	xref	_mqtt_pal_sendall
9447                     	xref	_memmove
9448                     	xref	_strlen
9449                     	switch	.const
9450  9ee4               L5051:
9451  9ee4 3f400000      	dc.w	16192,0
9452                     	xref.b	c_lreg
9453                     	xref.b	c_x
9454                     	xref.b	c_y
9474                     	xref	c_lgsbc
9475                     	xref	c_lgadc
9476                     	xref	c_lgursh
9477                     	xref	c_uitolx
9478                     	xref	c_lgadd
9479                     	xref	c_itoly
9480                     	xref	c_ltor
9481                     	xref	c_rtol
9482                     	xref	c_ftol
9483                     	xref	c_fmul
9484                     	xref	c_uitof
9485                     	xref	c_lcmp
9486                     	xref	c_ladd
9487                     	xref	c_itolx
9488                     	xref	c_bmulx
9489                     	xref	c_bmuly
9490                     	xref	c_sdivx
9491                     	end
