   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2518                     .iconst:	section	.bss
2519  05fe               _stack_limit2:
2520  05fe 00            	ds.b	1
2521  05ff               _stack_limit1:
2522  05ff 00            	ds.b	1
2523                     .const:	section	.text
2524  9cc7               L5261_devicetype:
2525  9cc7 4e6574776f72  	dc.b	"NetworkModule/",0
2621                     ; 291 int main(void)
2621                     ; 292 {
2623                     .text:	section	.text,new
2624  ba2c               _main:
2626  ba2c 88            	push	a
2627       00000001      OFST:	set	1
2630                     ; 296   parse_complete = 0;
2632  ba2d 725f00fa      	clr	_parse_complete
2633                     ; 297   mqtt_parse_complete = 0;
2635  ba31 725f00f9      	clr	_mqtt_parse_complete
2636                     ; 298   reboot_request = 0;
2638  ba35 725f00ff      	clr	_reboot_request
2639                     ; 299   user_reboot_request = 0;
2641  ba39 725f00fe      	clr	_user_reboot_request
2642                     ; 300   restart_request = 0;
2644  ba3d 725f00fd      	clr	_restart_request
2645                     ; 302   time_mark2 = 0;           // Time capture used in reboot
2647  ba41 5f            	clrw	x
2648  ba42 cf00f1        	ldw	_time_mark2+2,x
2649  ba45 cf00ef        	ldw	_time_mark2,x
2650                     ; 305   restart_reboot_step = RESTART_REBOOT_IDLE;
2652  ba48 725f00fc      	clr	_restart_reboot_step
2653                     ; 306   mqtt_close_tcp = 0;
2655  ba4c 725f00fb      	clr	_mqtt_close_tcp
2656                     ; 307   stack_error = 0;
2658  ba50 725f0157      	clr	_stack_error
2659                     ; 310   mqtt_start = MQTT_START_TCP_CONNECT;	 // Tracks the MQTT startup steps
2661  ba54 3501009c      	mov	_mqtt_start,#1
2662                     ; 311   mqtt_start_status = MQTT_START_NOT_STARTED; // Tracks error states during
2664  ba58 725f009b      	clr	_mqtt_start_status
2665                     ; 313   mqtt_keep_alive = 60;                  // Ping interval in seconds
2667  ba5c ae003c        	ldw	x,#60
2668  ba5f cf00e5        	ldw	_mqtt_keep_alive,x
2669                     ; 315   mqtt_start_ctr1 = 0;			 // Tracks time for the MQTT startup
2671  ba62 725f009a      	clr	_mqtt_start_ctr1
2672                     ; 317   mqtt_start_ctr2 = 0;			 // Tracks time for the MQTT startup
2674  ba66 725f0099      	clr	_mqtt_start_ctr2
2675                     ; 319   mqtt_sanity_ctr = 0;			 // Tracks time for the MQTT sanity
2677  ba6a 725f0098      	clr	_mqtt_sanity_ctr
2678                     ; 321   mqtt_start_retry = 0;                  // Flag to retry the ARP/TCP Connect
2680  ba6e 725f0097      	clr	_mqtt_start_retry
2681                     ; 322   MQTT_error_status = 0;                 // For MQTT error status display in
2683  ba72 725f028f      	clr	_MQTT_error_status
2684                     ; 324   mqtt_restart_step = MQTT_RESTART_IDLE; // Step counter for MQTT restart
2686  ba76 725f0094      	clr	_mqtt_restart_step
2687                     ; 325   strcpy(topic_base, devicetype);        // Initial content of the topic_base.
2689  ba7a ae0068        	ldw	x,#_topic_base
2690  ba7d 90ae9cc7      	ldw	y,#L5261_devicetype
2691  ba81               L6:
2692  ba81 90f6          	ld	a,(y)
2693  ba83 905c          	incw	y
2694  ba85 f7            	ld	(x),a
2695  ba86 5c            	incw	x
2696  ba87 4d            	tnz	a
2697  ba88 26f7          	jrne	L6
2698                     ; 331   state_request = STATE_REQUEST_IDLE;    // Set the state request received to
2700  ba8a c70158        	ld	_state_request,a
2701                     ; 338   clock_init();            // Initialize and enable clocks and timers
2703  ba8d cde24a        	call	_clock_init
2705                     ; 340   gpio_init();             // Initialize and enable gpio pins
2707  ba90 cda227        	call	_gpio_init
2709                     ; 342   spi_init();              // Initialize the SPI bit bang interface to the
2711  ba93 cde152        	call	_spi_init
2713                     ; 345   LEDcontrol(1);           // turn LED on
2715  ba96 a601          	ld	a,#1
2716  ba98 cda270        	call	_LEDcontrol
2718                     ; 347   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2720  ba9b cdc103        	call	_unlock_eeprom
2722                     ; 349   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2724  ba9e cdc113        	call	_check_eeprom_settings
2726                     ; 353   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2728  baa1 cd9e83        	call	_Enc28j60Init
2730                     ; 355   uip_arp_init();          // Initialize the ARP module
2732  baa4 cdeeba        	call	_uip_arp_init
2734                     ; 357   uip_init();              // Initialize uIP Web Server
2736  baa7 cde458        	call	_uip_init
2738                     ; 359   HttpDInit();             // Initialize listening ports
2740  baaa cda9f8        	call	_HttpDInit
2742                     ; 383   stack_limit1 = 0xaa;
2744  baad 35aa05ff      	mov	_stack_limit1,#170
2745                     ; 384   stack_limit2 = 0x55;
2747  bab1 355505fe      	mov	_stack_limit2,#85
2748                     ; 395   mqtt_init(&mqttclient,
2748                     ; 396             mqtt_sendbuf,
2748                     ; 397 	    sizeof(mqtt_sendbuf),
2748                     ; 398 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
2748                     ; 399 	    UIP_APPDATA_SIZE,
2748                     ; 400 	    publish_callback);
2750  bab5 aebe6b        	ldw	x,#_publish_callback
2751  bab8 89            	pushw	x
2752  bab9 ae01be        	ldw	x,#446
2753  babc 89            	pushw	x
2754  babd ae039d        	ldw	x,#_uip_buf+54
2755  bac0 89            	pushw	x
2756  bac1 ae00c8        	ldw	x,#200
2757  bac4 89            	pushw	x
2758  bac5 ae0163        	ldw	x,#_mqtt_sendbuf
2759  bac8 89            	pushw	x
2760  bac9 ae00b9        	ldw	x,#_mqttclient
2761  bacc cdccfa        	call	_mqtt_init
2763  bacf 5b0a          	addw	sp,#10
2764  bad1               L1561:
2765                     ; 514     uip_len = Enc28j60Receive(uip_buf); // Check for incoming packets
2767  bad1 ae0367        	ldw	x,#_uip_buf
2768  bad4 cd9fe3        	call	_Enc28j60Receive
2770  bad7 cf0363        	ldw	_uip_len,x
2771                     ; 516     if (uip_len > 0) {
2773  bada 2738          	jreq	L5561
2774                     ; 525       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2776  badc ae0800        	ldw	x,#2048
2777  badf cdee95        	call	_htons
2779  bae2 c30373        	cpw	x,_uip_buf+12
2780  bae5 2612          	jrne	L7561
2781                     ; 526         uip_input(); // Calls uip_process(UIP_DATA) to process a received
2783  bae7 a601          	ld	a,#1
2784  bae9 cde567        	call	_uip_process
2786                     ; 531         if (uip_len > 0) {
2788  baec ce0363        	ldw	x,_uip_len
2789  baef 2723          	jreq	L5561
2790                     ; 532           uip_arp_out();
2792  baf1 cdf0e3        	call	_uip_arp_out
2794                     ; 536           Enc28j60Send(uip_buf, uip_len);
2796  baf4 ce0363        	ldw	x,_uip_len
2798  baf7 2013          	jp	LC001
2799  baf9               L7561:
2800                     ; 539       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2802  baf9 ae0806        	ldw	x,#2054
2803  bafc cdee95        	call	_htons
2805  baff c30373        	cpw	x,_uip_buf+12
2806  bb02 2610          	jrne	L5561
2807                     ; 540         uip_arp_arpin();
2809  bb04 cdf034        	call	_uip_arp_arpin
2811                     ; 544         if (uip_len > 0) {
2813  bb07 ce0363        	ldw	x,_uip_len
2814  bb0a 2708          	jreq	L5561
2815                     ; 548           Enc28j60Send(uip_buf, uip_len);
2818  bb0c               LC001:
2819  bb0c 89            	pushw	x
2820  bb0d ae0367        	ldw	x,#_uip_buf
2821  bb10 cda07f        	call	_Enc28j60Send
2822  bb13 85            	popw	x
2823  bb14               L5561:
2824                     ; 558     if (mqtt_start != MQTT_START_COMPLETE
2824                     ; 559      && mqtt_restart_step == MQTT_RESTART_IDLE
2824                     ; 560      && restart_reboot_step == RESTART_REBOOT_IDLE) {
2826  bb14 c6009c        	ld	a,_mqtt_start
2827  bb17 a114          	cp	a,#20
2828  bb19 270d          	jreq	L1761
2830  bb1b c60094        	ld	a,_mqtt_restart_step
2831  bb1e 2608          	jrne	L1761
2833  bb20 c600fc        	ld	a,_restart_reboot_step
2834  bb23 2603          	jrne	L1761
2835                     ; 561        mqtt_startup();
2837  bb25 cdbb8e        	call	_mqtt_startup
2839  bb28               L1761:
2840                     ; 565     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
2842  bb28 c600fc        	ld	a,_restart_reboot_step
2843  bb2b 2603          	jrne	L3761
2844                     ; 566       mqtt_sanity_check();
2846  bb2d cdbdb4        	call	_mqtt_sanity_check
2848  bb30               L3761:
2849                     ; 570     if (periodic_timer_expired()) {
2851  bb30 cde2dc        	call	_periodic_timer_expired
2853  bb33 4d            	tnz	a
2854  bb34 2743          	jreq	L5761
2855                     ; 572       for(i = 0; i < UIP_CONNS; i++) {
2857  bb36 4f            	clr	a
2858  bb37 6b01          	ld	(OFST+0,sp),a
2860  bb39               L5071:
2861                     ; 573 	uip_periodic(i);
2863  bb39 97            	ld	xl,a
2864  bb3a a629          	ld	a,#41
2865  bb3c 42            	mul	x,a
2866  bb3d 1c02bd        	addw	x,#_uip_conns
2867  bb40 cf0361        	ldw	_uip_conn,x
2870  bb43 a602          	ld	a,#2
2871  bb45 cde567        	call	_uip_process
2873                     ; 592 	if (uip_len > 0) {
2875  bb48 ce0363        	ldw	x,_uip_len
2876  bb4b 270e          	jreq	L1171
2877                     ; 593 	  uip_arp_out(); // Verifies arp entry in the ARP table and builds LLH
2879  bb4d cdf0e3        	call	_uip_arp_out
2881                     ; 594           Enc28j60Send(uip_buf, uip_len);
2883  bb50 ce0363        	ldw	x,_uip_len
2884  bb53 89            	pushw	x
2885  bb54 ae0367        	ldw	x,#_uip_buf
2886  bb57 cda07f        	call	_Enc28j60Send
2888  bb5a 85            	popw	x
2889  bb5b               L1171:
2890                     ; 597         mqtt_start_ctr1++; // Increment the MQTT start loop timer 1. This is
2892  bb5b 725c009a      	inc	_mqtt_start_ctr1
2893                     ; 601         mqtt_start_ctr2++; // Increment the MQTT start loop timer 2. This is
2895  bb5f 725c0099      	inc	_mqtt_start_ctr2
2896                     ; 604         mqtt_sanity_ctr++; // Increment the MQTT sanity loop timer. This is
2898  bb63 725c0098      	inc	_mqtt_sanity_ctr
2899                     ; 572       for(i = 0; i < UIP_CONNS; i++) {
2901  bb67 0c01          	inc	(OFST+0,sp)
2905  bb69 7b01          	ld	a,(OFST+0,sp)
2906  bb6b a104          	cp	a,#4
2907  bb6d 25ca          	jrult	L5071
2908                     ; 614       if (mqtt_start == MQTT_START_COMPLETE) {
2910  bb6f c6009c        	ld	a,_mqtt_start
2911  bb72 a114          	cp	a,#20
2912  bb74 2603          	jrne	L5761
2913                     ; 615         publish_outbound();
2915  bb76 cdbf18        	call	_publish_outbound
2917  bb79               L5761:
2918                     ; 622     if (arp_timer_expired()) {
2920  bb79 cde315        	call	_arp_timer_expired
2922  bb7c 4d            	tnz	a
2923  bb7d 2703          	jreq	L5171
2924                     ; 623       uip_arp_timer(); // Clean out old ARP Table entries. Any entry that has
2926  bb7f cdeedd        	call	_uip_arp_timer
2928  bb82               L5171:
2929                     ; 630     check_runtime_changes();
2931  bb82 cdc61d        	call	_check_runtime_changes
2933                     ; 633     check_reset_button();
2935  bb85 cdcbb7        	call	_check_reset_button
2937                     ; 638     check_restart_reboot();
2939  bb88 cdc926        	call	_check_restart_reboot
2942  bb8b ccbad1        	jra	L1561
2993                     ; 666 void mqtt_startup(void)
2993                     ; 667 {
2994                     .text:	section	.text,new
2995  bb8e               _mqtt_startup:
2999                     ; 683   if (mqtt_start == MQTT_START_TCP_CONNECT) {
3001  bb8e c6009c        	ld	a,_mqtt_start
3002  bb91 a101          	cp	a,#1
3003  bb93 2630          	jrne	L7271
3004                     ; 684     if (stored_mqttserveraddr[3] != 0) {
3006  bb95 c64034        	ld	a,_stored_mqttserveraddr+3
3007  bb98 2603ccbdb3    	jreq	L7371
3008                     ; 704       mqtt_conn = uip_connect(&uip_mqttserveraddr, Port_Mqttd, Port_Mqttd);
3010  bb9d ce00ea        	ldw	x,_Port_Mqttd
3011  bba0 89            	pushw	x
3012  bba1 89            	pushw	x
3013  bba2 ae02a8        	ldw	x,#_uip_mqttserveraddr
3014  bba5 cde487        	call	_uip_connect
3016  bba8 5b04          	addw	sp,#4
3017  bbaa cf0095        	ldw	_mqtt_conn,x
3018                     ; 705       if (mqtt_conn != NULL) {
3020  bbad 2711          	jreq	L3371
3021                     ; 706         mqtt_start_ctr1 = 0; // Clear 100ms counter
3023  bbaf 725f009a      	clr	_mqtt_start_ctr1
3024                     ; 707         mqtt_start_ctr2 = 0; // Clear 100ms counter
3026  bbb3 725f0099      	clr	_mqtt_start_ctr2
3027                     ; 708         mqtt_start_status = MQTT_START_CONNECTIONS_GOOD;
3029  bbb7 3510009b      	mov	_mqtt_start_status,#16
3030                     ; 709         mqtt_start = MQTT_START_VERIFY_ARP;
3032  bbbb 3502009c      	mov	_mqtt_start,#2
3035  bbbf 81            	ret	
3036  bbc0               L3371:
3037                     ; 712         mqtt_start_status |= MQTT_START_CONNECTIONS_ERROR;
3039  bbc0 7210009b      	bset	_mqtt_start_status,#0
3041  bbc4 81            	ret	
3042  bbc5               L7271:
3043                     ; 717   else if (mqtt_start == MQTT_START_VERIFY_ARP
3043                     ; 718         && mqtt_start_ctr2 > 10) {
3045  bbc5 a102          	cp	a,#2
3046  bbc7 263a          	jrne	L1471
3048  bbc9 c60099        	ld	a,_mqtt_start_ctr2
3049  bbcc a10b          	cp	a,#11
3050  bbce 2533          	jrult	L1471
3051                     ; 719     mqtt_start_ctr2 = 0; // Clear 100ms counter
3053  bbd0 725f0099      	clr	_mqtt_start_ctr2
3054                     ; 726     if (check_mqtt_server_arp_entry() == 1) {
3056  bbd4 cdf22e        	call	_check_mqtt_server_arp_entry
3058  bbd7 5a            	decw	x
3059  bbd8 2611          	jrne	L3471
3060                     ; 728       mqtt_start_retry = 0;
3062  bbda 725f0097      	clr	_mqtt_start_retry
3063                     ; 729       mqtt_start_ctr1 = 0; // Clear 100ms counter
3065  bbde 725f009a      	clr	_mqtt_start_ctr1
3066                     ; 730       mqtt_start_status |= MQTT_START_ARP_REQUEST_GOOD;
3068  bbe2 721a009b      	bset	_mqtt_start_status,#5
3069                     ; 731       mqtt_start = MQTT_START_VERIFY_TCP;
3071  bbe6 3503009c      	mov	_mqtt_start,#3
3074  bbea 81            	ret	
3075  bbeb               L3471:
3076                     ; 733     else if (mqtt_start_ctr1 > 150) {
3078  bbeb c6009a        	ld	a,_mqtt_start_ctr1
3079  bbee a197          	cp	a,#151
3080  bbf0 25a8          	jrult	L7371
3081                     ; 736       mqtt_start_status |= MQTT_START_ARP_REQUEST_ERROR;
3083  bbf2 7212009b      	bset	_mqtt_start_status,#1
3084                     ; 737       mqtt_start = MQTT_START_TCP_CONNECT;
3086  bbf6 3501009c      	mov	_mqtt_start,#1
3087                     ; 739       mqtt_start_status = MQTT_START_NOT_STARTED;
3089  bbfa 725f009b      	clr	_mqtt_start_status
3090                     ; 740       mqtt_start_retry++;
3092  bbfe 725c0097      	inc	_mqtt_start_retry
3094  bc02 81            	ret	
3095  bc03               L1471:
3096                     ; 744   else if (mqtt_start == MQTT_START_VERIFY_TCP
3096                     ; 745         && mqtt_start_ctr2 > 10) {
3098  bc03 c6009c        	ld	a,_mqtt_start
3099  bc06 a103          	cp	a,#3
3100  bc08 263e          	jrne	L3571
3102  bc0a c60099        	ld	a,_mqtt_start_ctr2
3103  bc0d a10b          	cp	a,#11
3104  bc0f 2537          	jrult	L3571
3105                     ; 746     mqtt_start_ctr2 = 0; // Clear 100ms counter
3107  bc11 725f0099      	clr	_mqtt_start_ctr2
3108                     ; 754     if ((mqtt_conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
3110  bc15 ce0095        	ldw	x,_mqtt_conn
3111  bc18 e619          	ld	a,(25,x)
3112  bc1a a40f          	and	a,#15
3113  bc1c a103          	cp	a,#3
3114  bc1e 260d          	jrne	L5571
3115                     ; 755       mqtt_start_retry = 0;
3117  bc20 725f0097      	clr	_mqtt_start_retry
3118                     ; 756       mqtt_start_status |= MQTT_START_TCP_CONNECT_GOOD;
3120  bc24 721c009b      	bset	_mqtt_start_status,#6
3121                     ; 757       mqtt_start = MQTT_START_QUEUE_CONNECT;
3123  bc28 3504009c      	mov	_mqtt_start,#4
3126  bc2c 81            	ret	
3127  bc2d               L5571:
3128                     ; 759     else if (mqtt_start_ctr1 > 150) {
3130  bc2d c6009a        	ld	a,_mqtt_start_ctr1
3131  bc30 a197          	cp	a,#151
3132  bc32 2403ccbdb3    	jrult	L7371
3133                     ; 762       mqtt_start_status |= MQTT_START_TCP_CONNECT_ERROR;
3135  bc37 7214009b      	bset	_mqtt_start_status,#2
3136                     ; 763       mqtt_start = MQTT_START_TCP_CONNECT;
3138  bc3b 3501009c      	mov	_mqtt_start,#1
3139                     ; 765       mqtt_start_status = MQTT_START_NOT_STARTED; 
3141  bc3f 725f009b      	clr	_mqtt_start_status
3142                     ; 766       mqtt_start_retry++;
3144  bc43 725c0097      	inc	_mqtt_start_retry
3146  bc47 81            	ret	
3147  bc48               L3571:
3148                     ; 770   else if (mqtt_start == MQTT_START_QUEUE_CONNECT) {
3150  bc48 c6009c        	ld	a,_mqtt_start
3151  bc4b a104          	cp	a,#4
3152  bc4d 2703ccbcd5    	jrne	L5671
3153                     ; 781     strcpy(client_id_text, devicetype);
3155  bc52 ae009d        	ldw	x,#_client_id_text
3156  bc55 90ae9cc7      	ldw	y,#L5261_devicetype
3157  bc59               L411:
3158  bc59 90f6          	ld	a,(y)
3159  bc5b 905c          	incw	y
3160  bc5d f7            	ld	(x),a
3161  bc5e 5c            	incw	x
3162  bc5f 4d            	tnz	a
3163  bc60 26f7          	jrne	L411
3164                     ; 783     client_id_text[strlen(client_id_text) - 1] = '\0';
3166  bc62 ae009d        	ldw	x,#_client_id_text
3167  bc65 cdf371        	call	_strlen
3169  bc68 5a            	decw	x
3170  bc69 724f009d      	clr	(_client_id_text,x)
3171                     ; 785     strcat(client_id_text, mac_string);
3173  bc6d ae0100        	ldw	x,#_mac_string
3174  bc70 89            	pushw	x
3175  bc71 ae009d        	ldw	x,#_client_id_text
3176  bc74 cdf35d        	call	_strcat
3178  bc77 85            	popw	x
3179                     ; 786     client_id = client_id_text;
3181  bc78 ae009d        	ldw	x,#_client_id_text
3182  bc7b cf00b7        	ldw	_client_id,x
3183                     ; 789     connect_flags = MQTT_CONNECT_CLEAN_SESSION;
3185  bc7e 350200ee      	mov	_connect_flags,#2
3186                     ; 792     topic_base[topic_base_len] = '\0';
3188  bc82 5f            	clrw	x
3189  bc83 c60067        	ld	a,_topic_base_len
3190  bc86 97            	ld	xl,a
3191  bc87 724f0068      	clr	(_topic_base,x)
3192                     ; 793     strcat(topic_base, "/status");
3194  bc8b ae9d20        	ldw	x,#L7671
3195  bc8e 89            	pushw	x
3196  bc8f ae0068        	ldw	x,#_topic_base
3197  bc92 cdf35d        	call	_strcat
3199  bc95 85            	popw	x
3200                     ; 796     mqtt_connect(&mqttclient,
3200                     ; 797                  client_id,              // Based on MAC address
3200                     ; 798                  topic_base,             // Will topic
3200                     ; 799                  "offline",              // Will message 
3200                     ; 800                  7,                      // Will message size
3200                     ; 801                  stored_mqtt_username,   // Username
3200                     ; 802                  stored_mqtt_password,   // Password
3200                     ; 803                  connect_flags,          // Connect flags
3200                     ; 804                  mqtt_keep_alive);       // Ping interval
3202  bc96 ce00e5        	ldw	x,_mqtt_keep_alive
3203  bc99 89            	pushw	x
3204  bc9a 3b00ee        	push	_connect_flags
3205  bc9d ae4040        	ldw	x,#_stored_mqtt_password
3206  bca0 89            	pushw	x
3207  bca1 ae4035        	ldw	x,#_stored_mqtt_username
3208  bca4 89            	pushw	x
3209  bca5 ae0007        	ldw	x,#7
3210  bca8 89            	pushw	x
3211  bca9 ae9d18        	ldw	x,#L1771
3212  bcac 89            	pushw	x
3213  bcad ae0068        	ldw	x,#_topic_base
3214  bcb0 89            	pushw	x
3215  bcb1 ce00b7        	ldw	x,_client_id
3216  bcb4 89            	pushw	x
3217  bcb5 ae00b9        	ldw	x,#_mqttclient
3218  bcb8 cdcd52        	call	_mqtt_connect
3220  bcbb 5b0f          	addw	sp,#15
3221                     ; 806     if (mqttclient.error == MQTT_OK) {
3223  bcbd ce00c3        	ldw	x,_mqttclient+10
3224  bcc0 5a            	decw	x
3225  bcc1 260d          	jrne	L3771
3226                     ; 807       mqtt_start_ctr1 = 0; // Clear 100ms counter
3228  bcc3 725f009a      	clr	_mqtt_start_ctr1
3229                     ; 808       mqtt_start_status |= MQTT_START_MQTT_CONNECT_GOOD;
3231  bcc7 721e009b      	bset	_mqtt_start_status,#7
3232                     ; 809       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE1;
3234  bccb 3505009c      	mov	_mqtt_start,#5
3237  bccf 81            	ret	
3238  bcd0               L3771:
3239                     ; 812       mqtt_start_status |= MQTT_START_MQTT_CONNECT_ERROR;
3241  bcd0 7216009b      	bset	_mqtt_start_status,#3
3243  bcd4 81            	ret	
3244  bcd5               L5671:
3245                     ; 816   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE1) {
3247  bcd5 a105          	cp	a,#5
3248  bcd7 2635          	jrne	L1002
3249                     ; 826     if (mqtt_start_ctr1 > 20) {
3251  bcd9 c6009a        	ld	a,_mqtt_start_ctr1
3252  bcdc a115          	cp	a,#21
3253  bcde 2403ccbdb3    	jrult	L7371
3254                     ; 837       topic_base[topic_base_len] = '\0';
3256  bce3 c60067        	ld	a,_topic_base_len
3257  bce6 5f            	clrw	x
3258  bce7 97            	ld	xl,a
3259  bce8 724f0068      	clr	(_topic_base,x)
3260                     ; 838       strcat(topic_base, "/on");
3262  bcec ae9d14        	ldw	x,#L5002
3263  bcef 89            	pushw	x
3264  bcf0 ae0068        	ldw	x,#_topic_base
3265  bcf3 cdf35d        	call	_strcat
3267  bcf6 85            	popw	x
3268                     ; 839       mqtt_subscribe(&mqttclient, topic_base, 0);
3270  bcf7 5f            	clrw	x
3271  bcf8 89            	pushw	x
3272  bcf9 ae0068        	ldw	x,#_topic_base
3273  bcfc 89            	pushw	x
3274  bcfd ae00b9        	ldw	x,#_mqttclient
3275  bd00 cdd061        	call	_mqtt_subscribe
3277  bd03 5b04          	addw	sp,#4
3278                     ; 840       mqtt_start_ctr1 = 0; // Clear 100ms counter
3280  bd05 725f009a      	clr	_mqtt_start_ctr1
3281                     ; 841       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE2;
3283  bd09 3506009c      	mov	_mqtt_start,#6
3285  bd0d 81            	ret	
3286  bd0e               L1002:
3287                     ; 845   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE2) {
3289  bd0e a106          	cp	a,#6
3290  bd10 2632          	jrne	L1102
3291                     ; 846     if (mqtt_start_ctr1 > 10) {
3293  bd12 c6009a        	ld	a,_mqtt_start_ctr1
3294  bd15 a10b          	cp	a,#11
3295  bd17 25c7          	jrult	L7371
3296                     ; 849       topic_base[topic_base_len] = '\0';
3298  bd19 c60067        	ld	a,_topic_base_len
3299  bd1c 5f            	clrw	x
3300  bd1d 97            	ld	xl,a
3301  bd1e 724f0068      	clr	(_topic_base,x)
3302                     ; 850       strcat(topic_base, "/off");
3304  bd22 ae9d0f        	ldw	x,#L5102
3305  bd25 89            	pushw	x
3306  bd26 ae0068        	ldw	x,#_topic_base
3307  bd29 cdf35d        	call	_strcat
3309  bd2c 85            	popw	x
3310                     ; 851       mqtt_subscribe(&mqttclient, topic_base, 0);
3312  bd2d 5f            	clrw	x
3313  bd2e 89            	pushw	x
3314  bd2f ae0068        	ldw	x,#_topic_base
3315  bd32 89            	pushw	x
3316  bd33 ae00b9        	ldw	x,#_mqttclient
3317  bd36 cdd061        	call	_mqtt_subscribe
3319  bd39 5b04          	addw	sp,#4
3320                     ; 852       mqtt_start_ctr1 = 0; // Clear 100ms counter
3322  bd3b 725f009a      	clr	_mqtt_start_ctr1
3323                     ; 853       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE3;
3325  bd3f 3507009c      	mov	_mqtt_start,#7
3327  bd43 81            	ret	
3328  bd44               L1102:
3329                     ; 857   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE3) {
3331  bd44 a107          	cp	a,#7
3332  bd46 2632          	jrne	L1202
3333                     ; 858     if (mqtt_start_ctr1 > 10) {
3335  bd48 c6009a        	ld	a,_mqtt_start_ctr1
3336  bd4b a10b          	cp	a,#11
3337  bd4d 2564          	jrult	L7371
3338                     ; 861       topic_base[topic_base_len] = '\0';
3340  bd4f c60067        	ld	a,_topic_base_len
3341  bd52 5f            	clrw	x
3342  bd53 97            	ld	xl,a
3343  bd54 724f0068      	clr	(_topic_base,x)
3344                     ; 862       strcat(topic_base, "/state-req");
3346  bd58 ae9d04        	ldw	x,#L5202
3347  bd5b 89            	pushw	x
3348  bd5c ae0068        	ldw	x,#_topic_base
3349  bd5f cdf35d        	call	_strcat
3351  bd62 85            	popw	x
3352                     ; 863       mqtt_subscribe(&mqttclient, topic_base, 0);
3354  bd63 5f            	clrw	x
3355  bd64 89            	pushw	x
3356  bd65 ae0068        	ldw	x,#_topic_base
3357  bd68 89            	pushw	x
3358  bd69 ae00b9        	ldw	x,#_mqttclient
3359  bd6c cdd061        	call	_mqtt_subscribe
3361  bd6f 5b04          	addw	sp,#4
3362                     ; 864       mqtt_start_ctr1 = 0; // Clear 100ms counter
3364  bd71 725f009a      	clr	_mqtt_start_ctr1
3365                     ; 865       mqtt_start = MQTT_START_QUEUE_PUBLISH;
3367  bd75 3509009c      	mov	_mqtt_start,#9
3369  bd79 81            	ret	
3370  bd7a               L1202:
3371                     ; 869   else if (mqtt_start == MQTT_START_QUEUE_PUBLISH) {
3373  bd7a a109          	cp	a,#9
3374  bd7c 2635          	jrne	L7371
3375                     ; 870     if (mqtt_start_ctr1 > 10) {
3377  bd7e c6009a        	ld	a,_mqtt_start_ctr1
3378  bd81 a10b          	cp	a,#11
3379  bd83 252e          	jrult	L7371
3380                     ; 873       topic_base[topic_base_len] = '\0';
3382  bd85 c60067        	ld	a,_topic_base_len
3383  bd88 5f            	clrw	x
3384  bd89 97            	ld	xl,a
3385  bd8a 724f0068      	clr	(_topic_base,x)
3386                     ; 874       strcat(topic_base, "/status");
3388  bd8e ae9d20        	ldw	x,#L7671
3389  bd91 89            	pushw	x
3390  bd92 ae0068        	ldw	x,#_topic_base
3391  bd95 cdf35d        	call	_strcat
3393  bd98 85            	popw	x
3394                     ; 875       mqtt_publish(&mqttclient,
3394                     ; 876                    topic_base,
3394                     ; 877 		   "online",
3394                     ; 878 		   6,
3394                     ; 879 		   MQTT_PUBLISH_QOS_0 | MQTT_PUBLISH_RETAIN);
3396  bd99 4b01          	push	#1
3397  bd9b ae0006        	ldw	x,#6
3398  bd9e 89            	pushw	x
3399  bd9f ae9cfd        	ldw	x,#L5302
3400  bda2 89            	pushw	x
3401  bda3 ae0068        	ldw	x,#_topic_base
3402  bda6 89            	pushw	x
3403  bda7 ae00b9        	ldw	x,#_mqttclient
3404  bdaa cdcdfc        	call	_mqtt_publish
3406  bdad 5b07          	addw	sp,#7
3407                     ; 881       mqtt_start = MQTT_START_COMPLETE;
3409  bdaf 3514009c      	mov	_mqtt_start,#20
3410  bdb3               L7371:
3411                     ; 884 }
3414  bdb3 81            	ret	
3450                     ; 887 void mqtt_sanity_check(void)
3450                     ; 888 {
3451                     .text:	section	.text,new
3452  bdb4               _mqtt_sanity_check:
3456                     ; 900   if (mqtt_restart_step == MQTT_RESTART_IDLE) {
3458  bdb4 c60094        	ld	a,_mqtt_restart_step
3459  bdb7 2634          	jrne	L7402
3460                     ; 907     if (mqttclient.number_of_timeouts > 1) {
3462  bdb9 ce00c7        	ldw	x,_mqttclient+14
3463  bdbc a30002        	cpw	x,#2
3464  bdbf 2f08          	jrslt	L1502
3465                     ; 909       mqttclient.number_of_timeouts = 0;
3467  bdc1 5f            	clrw	x
3468  bdc2 cf00c7        	ldw	_mqttclient+14,x
3469                     ; 910       mqtt_restart_step = MQTT_RESTART_BEGIN;
3471  bdc5 35010094      	mov	_mqtt_restart_step,#1
3472  bdc9               L1502:
3473                     ; 916     if (mqtt_start == MQTT_START_COMPLETE
3473                     ; 917      && mqtt_conn->tcpstateflags == UIP_CLOSED) {
3475  bdc9 c6009c        	ld	a,_mqtt_start
3476  bdcc a114          	cp	a,#20
3477  bdce 260b          	jrne	L3502
3479  bdd0 ce0095        	ldw	x,_mqtt_conn
3480  bdd3 6d19          	tnz	(25,x)
3481  bdd5 2604          	jrne	L3502
3482                     ; 918       mqtt_restart_step = MQTT_RESTART_BEGIN;
3484  bdd7 35010094      	mov	_mqtt_restart_step,#1
3485  bddb               L3502:
3486                     ; 924     if (mqtt_start == MQTT_START_COMPLETE
3486                     ; 925      && mqttclient.error != MQTT_OK) {
3488  bddb a114          	cp	a,#20
3489  bddd 2703ccbe6a    	jrne	L7502
3491  bde2 ce00c3        	ldw	x,_mqttclient+10
3492  bde5 5a            	decw	x
3493  bde6 27f7          	jreq	L7502
3494                     ; 926       mqtt_restart_step = MQTT_RESTART_BEGIN;
3496  bde8 35010094      	mov	_mqtt_restart_step,#1
3498  bdec 81            	ret	
3499  bded               L7402:
3500                     ; 930   else if (mqtt_restart_step == MQTT_RESTART_BEGIN) {
3502  bded a101          	cp	a,#1
3503  bdef 2609          	jrne	L1602
3504                     ; 938     mqtt_restart_step = MQTT_RESTART_DISCONNECT_START;
3506  bdf1 35020094      	mov	_mqtt_restart_step,#2
3507                     ; 941     mqtt_start_status = MQTT_START_NOT_STARTED;
3509  bdf5 725f009b      	clr	_mqtt_start_status
3512  bdf9 81            	ret	
3513  bdfa               L1602:
3514                     ; 944   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_START) {
3516  bdfa a102          	cp	a,#2
3517  bdfc 260f          	jrne	L5602
3518                     ; 945     mqtt_restart_step = MQTT_RESTART_DISCONNECT_WAIT;
3520  bdfe 35030094      	mov	_mqtt_restart_step,#3
3521                     ; 947     mqtt_disconnect(&mqttclient);
3523  be02 ae00b9        	ldw	x,#_mqttclient
3524  be05 cdd14d        	call	_mqtt_disconnect
3526                     ; 948     mqtt_sanity_ctr = 0; // Clear 100ms counter
3528  be08 725f0098      	clr	_mqtt_sanity_ctr
3531  be0c 81            	ret	
3532  be0d               L5602:
3533                     ; 951   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_WAIT) {
3535  be0d a103          	cp	a,#3
3536  be0f 260c          	jrne	L1702
3537                     ; 952     if (mqtt_sanity_ctr > 10) {
3539  be11 c60098        	ld	a,_mqtt_sanity_ctr
3540  be14 a10b          	cp	a,#11
3541  be16 2552          	jrult	L7502
3542                     ; 955       mqtt_restart_step = MQTT_RESTART_TCPCLOSE;
3544  be18 35040094      	mov	_mqtt_restart_step,#4
3546  be1c 81            	ret	
3547  be1d               L1702:
3548                     ; 959   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE) {
3550  be1d a104          	cp	a,#4
3551  be1f 260d          	jrne	L7702
3552                     ; 975     mqtt_close_tcp = 1;
3554  be21 350100fb      	mov	_mqtt_close_tcp,#1
3555                     ; 977     mqtt_sanity_ctr = 0; // Clear 100ms counter
3557  be25 725f0098      	clr	_mqtt_sanity_ctr
3558                     ; 978     mqtt_restart_step = MQTT_RESTART_TCPCLOSE_WAIT;
3560  be29 35050094      	mov	_mqtt_restart_step,#5
3563  be2d 81            	ret	
3564  be2e               L7702:
3565                     ; 981   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE_WAIT) {
3567  be2e a105          	cp	a,#5
3568  be30 2610          	jrne	L3012
3569                     ; 986     if (mqtt_sanity_ctr > 20) {
3571  be32 c60098        	ld	a,_mqtt_sanity_ctr
3572  be35 a115          	cp	a,#21
3573  be37 2531          	jrult	L7502
3574                     ; 987       mqtt_close_tcp = 0;
3576  be39 725f00fb      	clr	_mqtt_close_tcp
3577                     ; 988       mqtt_restart_step = MQTT_RESTART_SIGNAL_STARTUP;
3579  be3d 35060094      	mov	_mqtt_restart_step,#6
3581  be41 81            	ret	
3582  be42               L3012:
3583                     ; 992   else if (mqtt_restart_step == MQTT_RESTART_SIGNAL_STARTUP) {
3585  be42 a106          	cp	a,#6
3586  be44 2624          	jrne	L7502
3587                     ; 994     mqtt_init(&mqttclient,
3587                     ; 995               mqtt_sendbuf,
3587                     ; 996 	      sizeof(mqtt_sendbuf),
3587                     ; 997 	      &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
3587                     ; 998 	      UIP_APPDATA_SIZE,
3587                     ; 999 	      publish_callback);
3589  be46 aebe6b        	ldw	x,#_publish_callback
3590  be49 89            	pushw	x
3591  be4a ae01be        	ldw	x,#446
3592  be4d 89            	pushw	x
3593  be4e ae039d        	ldw	x,#_uip_buf+54
3594  be51 89            	pushw	x
3595  be52 ae00c8        	ldw	x,#200
3596  be55 89            	pushw	x
3597  be56 ae0163        	ldw	x,#_mqtt_sendbuf
3598  be59 89            	pushw	x
3599  be5a ae00b9        	ldw	x,#_mqttclient
3600  be5d cdccfa        	call	_mqtt_init
3602  be60 5b0a          	addw	sp,#10
3603                     ; 1002     mqtt_restart_step = MQTT_RESTART_IDLE;
3605  be62 725f0094      	clr	_mqtt_restart_step
3606                     ; 1003     mqtt_start = MQTT_START_TCP_CONNECT;
3608  be66 3501009c      	mov	_mqtt_start,#1
3609  be6a               L7502:
3610                     ; 1005 }
3613  be6a 81            	ret	
3686                     ; 1083 void publish_callback(void** unused, struct mqtt_response_publish *published)
3686                     ; 1084 {
3687                     .text:	section	.text,new
3688  be6b               _publish_callback:
3690  be6b 5204          	subw	sp,#4
3691       00000004      OFST:	set	4
3694                     ; 1090   pin_value = 0;
3696  be6d 0f01          	clr	(OFST-3,sp)
3698                     ; 1091   ParseNum = 0;
3700                     ; 1119   pBuffer = uip_appdata;
3702  be6f ce0365        	ldw	x,_uip_appdata
3704                     ; 1121   pBuffer = pBuffer + 1;
3706  be72 1c0012        	addw	x,#18
3708                     ; 1123   pBuffer = pBuffer + 1;
3711                     ; 1125   pBuffer = pBuffer + 2;
3714                     ; 1127   pBuffer = pBuffer + 14;
3716  be75 1f03          	ldw	(OFST-1,sp),x
3718                     ; 1129   pBuffer = pBuffer + strlen(stored_devicename) + 1;
3720  be77 ae4000        	ldw	x,#_stored_devicename
3721  be7a cdf371        	call	_strlen
3723  be7d 72fb03        	addw	x,(OFST-1,sp)
3724  be80 5c            	incw	x
3725  be81 1f03          	ldw	(OFST-1,sp),x
3727                     ; 1132   if (*pBuffer == 'o') {
3729  be83 f6            	ld	a,(x)
3730  be84 a16f          	cp	a,#111
3731  be86 267a          	jrne	L3412
3732                     ; 1133     pBuffer++;
3734  be88 5c            	incw	x
3735  be89 1f03          	ldw	(OFST-1,sp),x
3737                     ; 1134     if (*pBuffer == 'n') {
3739  be8b f6            	ld	a,(x)
3740  be8c a16e          	cp	a,#110
3741  be8e 2609          	jrne	L5412
3742                     ; 1135       pBuffer++;
3744  be90 5c            	incw	x
3745  be91 1f03          	ldw	(OFST-1,sp),x
3747                     ; 1136       pin_value = 1;
3749  be93 a601          	ld	a,#1
3750  be95 6b01          	ld	(OFST-3,sp),a
3753  be97 200b          	jra	L7412
3754  be99               L5412:
3755                     ; 1138     else if (*pBuffer == 'f') {
3757  be99 a166          	cp	a,#102
3758  be9b 2607          	jrne	L7412
3759                     ; 1139       pBuffer = pBuffer + 2;
3761  be9d 1c0002        	addw	x,#2
3762  bea0 1f03          	ldw	(OFST-1,sp),x
3764                     ; 1140       pin_value = 0;
3766  bea2 0f01          	clr	(OFST-3,sp)
3768  bea4               L7412:
3769                     ; 1144     if (*pBuffer == 'a') {
3771  bea4 f6            	ld	a,(x)
3772  bea5 a161          	cp	a,#97
3773  bea7 2625          	jrne	L3512
3774                     ; 1145       pBuffer++;
3776  bea9 5c            	incw	x
3777  beaa 1f03          	ldw	(OFST-1,sp),x
3779                     ; 1146       if (*pBuffer == 'l') {
3781  beac f6            	ld	a,(x)
3782  bead a16c          	cp	a,#108
3783  beaf 264b          	jrne	L7612
3784                     ; 1147         pBuffer++;
3786  beb1 5c            	incw	x
3787  beb2 1f03          	ldw	(OFST-1,sp),x
3789                     ; 1148         if (*pBuffer == 'l') {
3791  beb4 f6            	ld	a,(x)
3792  beb5 a16c          	cp	a,#108
3793  beb7 2643          	jrne	L7612
3794                     ; 1150 	  for (i=0; i<8; i++) GpioSetPin(i, (uint8_t)pin_value);
3796  beb9 0f02          	clr	(OFST-2,sp)
3798  bebb               L1612:
3801  bebb 7b01          	ld	a,(OFST-3,sp)
3802  bebd 97            	ld	xl,a
3803  bebe 7b02          	ld	a,(OFST-2,sp)
3804  bec0 95            	ld	xh,a
3805  bec1 cdb93d        	call	_GpioSetPin
3809  bec4 0c02          	inc	(OFST-2,sp)
3813  bec6 7b02          	ld	a,(OFST-2,sp)
3814  bec8 a108          	cp	a,#8
3815  beca 25ef          	jrult	L1612
3816  becc 202e          	jra	L7612
3817  bece               L3512:
3818                     ; 1156     else if (*pBuffer == '0' || *pBuffer == '1') {
3820  bece a130          	cp	a,#48
3821  bed0 2704          	jreq	L3712
3823  bed2 a131          	cp	a,#49
3824  bed4 2626          	jrne	L7612
3825  bed6               L3712:
3826                     ; 1158       ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3828  bed6 97            	ld	xl,a
3829  bed7 a60a          	ld	a,#10
3830  bed9 42            	mul	x,a
3831  beda 9f            	ld	a,xl
3832  bedb a0e0          	sub	a,#224
3833  bedd 6b02          	ld	(OFST-2,sp),a
3835                     ; 1159       pBuffer++;
3837  bedf 1e03          	ldw	x,(OFST-1,sp)
3838  bee1 5c            	incw	x
3839  bee2 1f03          	ldw	(OFST-1,sp),x
3841                     ; 1161       ParseNum += (uint8_t)(*pBuffer - '0');
3843  bee4 f6            	ld	a,(x)
3844  bee5 a030          	sub	a,#48
3845  bee7 1b02          	add	a,(OFST-2,sp)
3846  bee9 6b02          	ld	(OFST-2,sp),a
3848                     ; 1163       if (ParseNum > 0 && ParseNum < 9) {
3850  beeb 270f          	jreq	L7612
3852  beed a109          	cp	a,#9
3853  beef 240b          	jruge	L7612
3854                     ; 1165         ParseNum--;
3856  bef1 0a02          	dec	(OFST-2,sp)
3858                     ; 1167         GpioSetPin(ParseNum, (uint8_t)pin_value);
3860  bef3 7b01          	ld	a,(OFST-3,sp)
3861  bef5 97            	ld	xl,a
3862  bef6 7b02          	ld	a,(OFST-2,sp)
3863  bef8 95            	ld	xh,a
3864  bef9 cdb93d        	call	_GpioSetPin
3866  befc               L7612:
3867                     ; 1173     mqtt_parse_complete = 1;
3869  befc 350100f9      	mov	_mqtt_parse_complete,#1
3871  bf00 2013          	jra	L7712
3872  bf02               L3412:
3873                     ; 1177   else if (*pBuffer == 's') {
3875  bf02 a173          	cp	a,#115
3876  bf04 260f          	jrne	L7712
3877                     ; 1178     pBuffer += 8;
3879  bf06 1c0008        	addw	x,#8
3881                     ; 1179     if (*pBuffer == 'q') {
3883  bf09 f6            	ld	a,(x)
3884  bf0a a171          	cp	a,#113
3885  bf0c 2607          	jrne	L7712
3886                     ; 1180       *pBuffer = '0'; // Destroy 'q' in buffer so subsequent "state"
3888  bf0e a630          	ld	a,#48
3889  bf10 f7            	ld	(x),a
3890                     ; 1191       state_request = STATE_REQUEST_RCVD;
3892  bf11 35010158      	mov	_state_request,#1
3893  bf15               L7712:
3894                     ; 1194 }
3897  bf15 5b04          	addw	sp,#4
3898  bf17 81            	ret	
3937                     ; 1197 void publish_outbound(void)
3937                     ; 1198 {
3938                     .text:	section	.text,new
3939  bf18               _publish_outbound:
3941  bf18 88            	push	a
3942       00000001      OFST:	set	1
3945                     ; 1206   if (state_request == STATE_REQUEST_IDLE) {
3947  bf19 c60158        	ld	a,_state_request
3948  bf1c 2703ccc011    	jrne	L1222
3949                     ; 1209     xor_tmp = (uint8_t)(IO_16to9 ^ IO_16to9_sent);
3951  bf21 c60162        	ld	a,_IO_16to9
3952  bf24 c8015c        	xor	a,_IO_16to9_sent
3953  bf27 6b01          	ld	(OFST+0,sp),a
3955                     ; 1211     if      (xor_tmp & 0x80) publish_pinstate('I', '8', IO_16to9, 0x80); // Input 8
3957  bf29 2a0a          	jrpl	L3222
3960  bf2b 4b80          	push	#128
3961  bf2d 3b0162        	push	_IO_16to9
3962  bf30 ae4938        	ldw	x,#18744
3965  bf33 2060          	jp	LC002
3966  bf35               L3222:
3967                     ; 1212     else if (xor_tmp & 0x40) publish_pinstate('I', '7', IO_16to9, 0x40); // Input 7
3969  bf35 a540          	bcp	a,#64
3970  bf37 270a          	jreq	L7222
3973  bf39 4b40          	push	#64
3974  bf3b 3b0162        	push	_IO_16to9
3975  bf3e ae4937        	ldw	x,#18743
3978  bf41 2052          	jp	LC002
3979  bf43               L7222:
3980                     ; 1213     else if (xor_tmp & 0x20) publish_pinstate('I', '6', IO_16to9, 0x20); // Input 6
3982  bf43 a520          	bcp	a,#32
3983  bf45 270a          	jreq	L3322
3986  bf47 4b20          	push	#32
3987  bf49 3b0162        	push	_IO_16to9
3988  bf4c ae4936        	ldw	x,#18742
3991  bf4f 2044          	jp	LC002
3992  bf51               L3322:
3993                     ; 1214     else if (xor_tmp & 0x10) publish_pinstate('I', '5', IO_16to9, 0x10); // Input 5
3995  bf51 a510          	bcp	a,#16
3996  bf53 270a          	jreq	L7322
3999  bf55 4b10          	push	#16
4000  bf57 3b0162        	push	_IO_16to9
4001  bf5a ae4935        	ldw	x,#18741
4004  bf5d 2036          	jp	LC002
4005  bf5f               L7322:
4006                     ; 1215     else if (xor_tmp & 0x08) publish_pinstate('I', '4', IO_16to9, 0x08); // Input 4
4008  bf5f a508          	bcp	a,#8
4009  bf61 270a          	jreq	L3422
4012  bf63 4b08          	push	#8
4013  bf65 3b0162        	push	_IO_16to9
4014  bf68 ae4934        	ldw	x,#18740
4017  bf6b 2028          	jp	LC002
4018  bf6d               L3422:
4019                     ; 1216     else if (xor_tmp & 0x04) publish_pinstate('I', '3', IO_16to9, 0x04); // Input 3
4021  bf6d a504          	bcp	a,#4
4022  bf6f 270a          	jreq	L7422
4025  bf71 4b04          	push	#4
4026  bf73 3b0162        	push	_IO_16to9
4027  bf76 ae4933        	ldw	x,#18739
4030  bf79 201a          	jp	LC002
4031  bf7b               L7422:
4032                     ; 1217     else if (xor_tmp & 0x02) publish_pinstate('I', '2', IO_16to9, 0x02); // Input 2
4034  bf7b a502          	bcp	a,#2
4035  bf7d 270a          	jreq	L3522
4038  bf7f 4b02          	push	#2
4039  bf81 3b0162        	push	_IO_16to9
4040  bf84 ae4932        	ldw	x,#18738
4043  bf87 200c          	jp	LC002
4044  bf89               L3522:
4045                     ; 1218     else if (xor_tmp & 0x01) publish_pinstate('I', '1', IO_16to9, 0x01); // Input 1
4047  bf89 a501          	bcp	a,#1
4048  bf8b 270c          	jreq	L5222
4051  bf8d 4b01          	push	#1
4052  bf8f 3b0162        	push	_IO_16to9
4053  bf92 ae4931        	ldw	x,#18737
4055  bf95               LC002:
4056  bf95 cdc01f        	call	_publish_pinstate
4057  bf98 85            	popw	x
4058  bf99               L5222:
4059                     ; 1222     xor_tmp = (uint8_t)(IO_8to1 ^ IO_8to1_sent);
4061  bf99 c60161        	ld	a,_IO_8to1
4062  bf9c c8015b        	xor	a,_IO_8to1_sent
4063  bf9f 6b01          	ld	(OFST+0,sp),a
4065                     ; 1224     if      (xor_tmp & 0x80) publish_pinstate('O', '8', IO_8to1, 0x80); // Output 8
4067  bfa1 2a0a          	jrpl	L1622
4070  bfa3 4b80          	push	#128
4071  bfa5 3b0161        	push	_IO_8to1
4072  bfa8 ae4f38        	ldw	x,#20280
4075  bfab 2060          	jp	LC003
4076  bfad               L1622:
4077                     ; 1225     else if (xor_tmp & 0x40) publish_pinstate('O', '7', IO_8to1, 0x40); // Output 7
4079  bfad a540          	bcp	a,#64
4080  bfaf 270a          	jreq	L5622
4083  bfb1 4b40          	push	#64
4084  bfb3 3b0161        	push	_IO_8to1
4085  bfb6 ae4f37        	ldw	x,#20279
4088  bfb9 2052          	jp	LC003
4089  bfbb               L5622:
4090                     ; 1226     else if (xor_tmp & 0x20) publish_pinstate('O', '6', IO_8to1, 0x20); // Output 6
4092  bfbb a520          	bcp	a,#32
4093  bfbd 270a          	jreq	L1722
4096  bfbf 4b20          	push	#32
4097  bfc1 3b0161        	push	_IO_8to1
4098  bfc4 ae4f36        	ldw	x,#20278
4101  bfc7 2044          	jp	LC003
4102  bfc9               L1722:
4103                     ; 1227     else if (xor_tmp & 0x10) publish_pinstate('O', '5', IO_8to1, 0x10); // Output 5
4105  bfc9 a510          	bcp	a,#16
4106  bfcb 270a          	jreq	L5722
4109  bfcd 4b10          	push	#16
4110  bfcf 3b0161        	push	_IO_8to1
4111  bfd2 ae4f35        	ldw	x,#20277
4114  bfd5 2036          	jp	LC003
4115  bfd7               L5722:
4116                     ; 1228     else if (xor_tmp & 0x08) publish_pinstate('O', '4', IO_8to1, 0x08); // Output 4
4118  bfd7 a508          	bcp	a,#8
4119  bfd9 270a          	jreq	L1032
4122  bfdb 4b08          	push	#8
4123  bfdd 3b0161        	push	_IO_8to1
4124  bfe0 ae4f34        	ldw	x,#20276
4127  bfe3 2028          	jp	LC003
4128  bfe5               L1032:
4129                     ; 1229     else if (xor_tmp & 0x04) publish_pinstate('O', '3', IO_8to1, 0x04); // Output 3
4131  bfe5 a504          	bcp	a,#4
4132  bfe7 270a          	jreq	L5032
4135  bfe9 4b04          	push	#4
4136  bfeb 3b0161        	push	_IO_8to1
4137  bfee ae4f33        	ldw	x,#20275
4140  bff1 201a          	jp	LC003
4141  bff3               L5032:
4142                     ; 1230     else if (xor_tmp & 0x02) publish_pinstate('O', '2', IO_8to1, 0x02); // Output 2
4144  bff3 a502          	bcp	a,#2
4145  bff5 270a          	jreq	L1132
4148  bff7 4b02          	push	#2
4149  bff9 3b0161        	push	_IO_8to1
4150  bffc ae4f32        	ldw	x,#20274
4153  bfff 200c          	jp	LC003
4154  c001               L1132:
4155                     ; 1231     else if (xor_tmp & 0x01) publish_pinstate('O', '1', IO_8to1, 0x01); // Output 1
4157  c001 a501          	bcp	a,#1
4158  c003 270c          	jreq	L1222
4161  c005 4b01          	push	#1
4162  c007 3b0161        	push	_IO_8to1
4163  c00a ae4f31        	ldw	x,#20273
4165  c00d               LC003:
4166  c00d cdc01f        	call	_publish_pinstate
4167  c010 85            	popw	x
4168  c011               L1222:
4169                     ; 1235   if (state_request == STATE_REQUEST_RCVD) {
4171  c011 c60158        	ld	a,_state_request
4172  c014 4a            	dec	a
4173  c015 2606          	jrne	L7132
4174                     ; 1237     state_request = STATE_REQUEST_IDLE;
4176  c017 c70158        	ld	_state_request,a
4177                     ; 1238     publish_pinstate_all();
4179  c01a cdc0b7        	call	_publish_pinstate_all
4181  c01d               L7132:
4182                     ; 1266 }
4185  c01d 84            	pop	a
4186  c01e 81            	ret	
4250                     ; 1269 void publish_pinstate(uint8_t direction, uint8_t pin, uint8_t value, uint8_t mask)
4250                     ; 1270 {
4251                     .text:	section	.text,new
4252  c01f               _publish_pinstate:
4254  c01f 89            	pushw	x
4255       00000000      OFST:	set	0
4258                     ; 1273   application_message[0] = '0';
4260  c020 353000e7      	mov	_application_message,#48
4261                     ; 1274   application_message[1] = (uint8_t)(pin);
4263  c024 9f            	ld	a,xl
4264  c025 c700e8        	ld	_application_message+1,a
4265                     ; 1275   application_message[2] = '\0';
4267  c028 725f00e9      	clr	_application_message+2
4268                     ; 1277   topic_base[topic_base_len] = '\0';
4270  c02c 5f            	clrw	x
4271  c02d c60067        	ld	a,_topic_base_len
4272  c030 97            	ld	xl,a
4273  c031 724f0068      	clr	(_topic_base,x)
4274                     ; 1280   if (direction == 'I') {
4276  c035 7b01          	ld	a,(OFST+1,sp)
4277  c037 a149          	cp	a,#73
4278  c039 2618          	jrne	L3432
4279                     ; 1282     if (invert_input == 0xff) value = (uint8_t)(~value);
4281  c03b c60159        	ld	a,_invert_input
4282  c03e 4c            	inc	a
4283  c03f 2602          	jrne	L5432
4286  c041 0305          	cpl	(OFST+5,sp)
4287  c043               L5432:
4288                     ; 1283     if (value & mask) strcat(topic_base, "/in_on");
4290  c043 7b05          	ld	a,(OFST+5,sp)
4291  c045 1506          	bcp	a,(OFST+6,sp)
4292  c047 2705          	jreq	L7432
4295  c049 ae9cf6        	ldw	x,#L1532
4298  c04c 2013          	jra	L7532
4299  c04e               L7432:
4300                     ; 1284     else strcat(topic_base, "/in_off");
4302  c04e ae9cee        	ldw	x,#L5532
4304  c051 200e          	jra	L7532
4305  c053               L3432:
4306                     ; 1288     if (value & mask) strcat(topic_base, "/out_on");
4308  c053 7b05          	ld	a,(OFST+5,sp)
4309  c055 1506          	bcp	a,(OFST+6,sp)
4310  c057 2705          	jreq	L1632
4313  c059 ae9ce6        	ldw	x,#L3632
4316  c05c 2003          	jra	L7532
4317  c05e               L1632:
4318                     ; 1289     else strcat(topic_base, "/out_off");
4320  c05e ae9cdd        	ldw	x,#L7632
4322  c061               L7532:
4323  c061 89            	pushw	x
4324  c062 ae0068        	ldw	x,#_topic_base
4325  c065 cdf35d        	call	_strcat
4326  c068 85            	popw	x
4327                     ; 1293   mqtt_publish(&mqttclient,
4327                     ; 1294                topic_base,
4327                     ; 1295 	       application_message,
4327                     ; 1296 	       2,
4327                     ; 1297 	       MQTT_PUBLISH_QOS_0);
4329  c069 4b00          	push	#0
4330  c06b ae0002        	ldw	x,#2
4331  c06e 89            	pushw	x
4332  c06f ae00e7        	ldw	x,#_application_message
4333  c072 89            	pushw	x
4334  c073 ae0068        	ldw	x,#_topic_base
4335  c076 89            	pushw	x
4336  c077 ae00b9        	ldw	x,#_mqttclient
4337  c07a cdcdfc        	call	_mqtt_publish
4339  c07d 5b07          	addw	sp,#7
4340                     ; 1299   if (direction == 'I') {
4342  c07f 7b01          	ld	a,(OFST+1,sp)
4343  c081 a149          	cp	a,#73
4344  c083 2619          	jrne	L1732
4345                     ; 1301     if (IO_16to9 & mask) IO_16to9_sent |= mask;
4347  c085 c60162        	ld	a,_IO_16to9
4348  c088 1506          	bcp	a,(OFST+6,sp)
4349  c08a 2707          	jreq	L3732
4352  c08c c6015c        	ld	a,_IO_16to9_sent
4353  c08f 1a06          	or	a,(OFST+6,sp)
4355  c091 2006          	jp	LC005
4356  c093               L3732:
4357                     ; 1302     else IO_16to9_sent &= (uint8_t)~mask;
4359  c093 7b06          	ld	a,(OFST+6,sp)
4360  c095 43            	cpl	a
4361  c096 c4015c        	and	a,_IO_16to9_sent
4362  c099               LC005:
4363  c099 c7015c        	ld	_IO_16to9_sent,a
4364  c09c 2017          	jra	L7732
4365  c09e               L1732:
4366                     ; 1306     if (IO_8to1 & mask) IO_8to1_sent |= mask;
4368  c09e c60161        	ld	a,_IO_8to1
4369  c0a1 1506          	bcp	a,(OFST+6,sp)
4370  c0a3 2707          	jreq	L1042
4373  c0a5 c6015b        	ld	a,_IO_8to1_sent
4374  c0a8 1a06          	or	a,(OFST+6,sp)
4376  c0aa 2006          	jp	LC004
4377  c0ac               L1042:
4378                     ; 1307     else IO_8to1_sent &= (uint8_t)~mask;
4380  c0ac 7b06          	ld	a,(OFST+6,sp)
4381  c0ae 43            	cpl	a
4382  c0af c4015b        	and	a,_IO_8to1_sent
4383  c0b2               LC004:
4384  c0b2 c7015b        	ld	_IO_8to1_sent,a
4385  c0b5               L7732:
4386                     ; 1309 }
4389  c0b5 85            	popw	x
4390  c0b6 81            	ret	
4439                     ; 1312 void publish_pinstate_all(void)
4439                     ; 1313 {
4440                     .text:	section	.text,new
4441  c0b7               _publish_pinstate_all:
4443  c0b7 89            	pushw	x
4444       00000002      OFST:	set	2
4447                     ; 1319   j = IO_16to9;
4449  c0b8 c60162        	ld	a,_IO_16to9
4450  c0bb 6b02          	ld	(OFST+0,sp),a
4452                     ; 1320   k = IO_8to1;
4454  c0bd c60161        	ld	a,_IO_8to1
4455  c0c0 6b01          	ld	(OFST-1,sp),a
4457                     ; 1323   if (invert_input == 0xff) j = (uint8_t)(~j);
4459  c0c2 c60159        	ld	a,_invert_input
4460  c0c5 4c            	inc	a
4461  c0c6 2602          	jrne	L3242
4464  c0c8 0302          	cpl	(OFST+0,sp)
4466  c0ca               L3242:
4467                     ; 1325   application_message[0] = j;
4469  c0ca 7b02          	ld	a,(OFST+0,sp)
4470  c0cc c700e7        	ld	_application_message,a
4471                     ; 1326   application_message[1] = k;
4473  c0cf 7b01          	ld	a,(OFST-1,sp)
4474  c0d1 c700e8        	ld	_application_message+1,a
4475                     ; 1327   application_message[2] = '\0';
4477  c0d4 725f00e9      	clr	_application_message+2
4478                     ; 1329   topic_base[topic_base_len] = '\0';
4480  c0d8 5f            	clrw	x
4481  c0d9 c60067        	ld	a,_topic_base_len
4482  c0dc 97            	ld	xl,a
4483  c0dd 724f0068      	clr	(_topic_base,x)
4484                     ; 1330   strcat(topic_base, "/state");
4486  c0e1 ae9cd6        	ldw	x,#L5242
4487  c0e4 89            	pushw	x
4488  c0e5 ae0068        	ldw	x,#_topic_base
4489  c0e8 cdf35d        	call	_strcat
4491  c0eb 85            	popw	x
4492                     ; 1333   mqtt_publish(&mqttclient,
4492                     ; 1334                topic_base,
4492                     ; 1335 	       application_message,
4492                     ; 1336 	       2,
4492                     ; 1337 	       MQTT_PUBLISH_QOS_0);
4494  c0ec 4b00          	push	#0
4495  c0ee ae0002        	ldw	x,#2
4496  c0f1 89            	pushw	x
4497  c0f2 ae00e7        	ldw	x,#_application_message
4498  c0f5 89            	pushw	x
4499  c0f6 ae0068        	ldw	x,#_topic_base
4500  c0f9 89            	pushw	x
4501  c0fa ae00b9        	ldw	x,#_mqttclient
4502  c0fd cdcdfc        	call	_mqtt_publish
4504                     ; 1338 }
4507  c100 5b09          	addw	sp,#9
4508  c102 81            	ret	
4533                     ; 1343 void unlock_eeprom(void)
4533                     ; 1344 {
4534                     .text:	section	.text,new
4535  c103               _unlock_eeprom:
4539  c103 2008          	jra	L1442
4540  c105               L7342:
4541                     ; 1356     FLASH_DUKR = 0xAE; // MASS key 1
4543  c105 35ae5064      	mov	_FLASH_DUKR,#174
4544                     ; 1357     FLASH_DUKR = 0x56; // MASS key 2
4546  c109 35565064      	mov	_FLASH_DUKR,#86
4547  c10d               L1442:
4548                     ; 1355   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
4550  c10d 7207505ff3    	btjf	_FLASH_IAPSR,#3,L7342
4551                     ; 1385 }
4554  c112 81            	ret	
4639                     ; 1388 void check_eeprom_settings(void)
4639                     ; 1389 {
4640                     .text:	section	.text,new
4641  c113               _check_eeprom_settings:
4643  c113 88            	push	a
4644       00000001      OFST:	set	1
4647                     ; 1401   if ((magic4 == 0x55) && 
4647                     ; 1402       (magic3 == 0xee) && 
4647                     ; 1403       (magic2 == 0x0f) && 
4647                     ; 1404       (magic1 == 0xf0)) {
4649  c114 c6402e        	ld	a,_magic4
4650  c117 a155          	cp	a,#85
4651  c119 2703ccc2c2    	jrne	L1652
4653  c11e c6402d        	ld	a,_magic3
4654  c121 a1ee          	cp	a,#238
4655  c123 26f6          	jrne	L1652
4657  c125 c6402c        	ld	a,_magic2
4658  c128 a10f          	cp	a,#15
4659  c12a 26ef          	jrne	L1652
4661  c12c c6402b        	ld	a,_magic1
4662  c12f a1f0          	cp	a,#240
4663  c131 26e8          	jrne	L1652
4664                     ; 1409     uip_ipaddr(IpAddr, stored_hostaddr[3], stored_hostaddr[2], stored_hostaddr[1], stored_hostaddr[0]);
4666  c133 c6402a        	ld	a,_stored_hostaddr+3
4667  c136 97            	ld	xl,a
4668  c137 c64029        	ld	a,_stored_hostaddr+2
4669  c13a 02            	rlwa	x,a
4670  c13b cf00f3        	ldw	_IpAddr,x
4673  c13e c64028        	ld	a,_stored_hostaddr+1
4674  c141 97            	ld	xl,a
4675  c142 c64027        	ld	a,_stored_hostaddr
4676  c145 02            	rlwa	x,a
4677  c146 cf00f5        	ldw	_IpAddr+2,x
4678                     ; 1410     uip_sethostaddr(IpAddr);
4680  c149 ce00f3        	ldw	x,_IpAddr
4681  c14c cf02b4        	ldw	_uip_hostaddr,x
4684  c14f ce00f5        	ldw	x,_IpAddr+2
4685  c152 cf02b6        	ldw	_uip_hostaddr+2,x
4686                     ; 1413     uip_ipaddr(IpAddr,
4688  c155 c64026        	ld	a,_stored_draddr+3
4689  c158 97            	ld	xl,a
4690  c159 c64025        	ld	a,_stored_draddr+2
4691  c15c 02            	rlwa	x,a
4692  c15d cf00f3        	ldw	_IpAddr,x
4695  c160 c64024        	ld	a,_stored_draddr+1
4696  c163 97            	ld	xl,a
4697  c164 c64023        	ld	a,_stored_draddr
4698  c167 02            	rlwa	x,a
4699  c168 cf00f5        	ldw	_IpAddr+2,x
4700                     ; 1418     uip_setdraddr(IpAddr);
4702  c16b ce00f3        	ldw	x,_IpAddr
4703  c16e cf02ac        	ldw	_uip_draddr,x
4706  c171 ce00f5        	ldw	x,_IpAddr+2
4707  c174 cf02ae        	ldw	_uip_draddr+2,x
4708                     ; 1421     uip_ipaddr(IpAddr,
4710  c177 c64022        	ld	a,_stored_netmask+3
4711  c17a 97            	ld	xl,a
4712  c17b c64021        	ld	a,_stored_netmask+2
4713  c17e 02            	rlwa	x,a
4714  c17f cf00f3        	ldw	_IpAddr,x
4717  c182 c64020        	ld	a,_stored_netmask+1
4718  c185 97            	ld	xl,a
4719  c186 c6401f        	ld	a,_stored_netmask
4720  c189 02            	rlwa	x,a
4721  c18a cf00f5        	ldw	_IpAddr+2,x
4722                     ; 1426     uip_setnetmask(IpAddr);
4724  c18d ce00f3        	ldw	x,_IpAddr
4725  c190 cf02b0        	ldw	_uip_netmask,x
4728  c193 ce00f5        	ldw	x,_IpAddr+2
4729  c196 cf02b2        	ldw	_uip_netmask+2,x
4730                     ; 1430     uip_ipaddr(IpAddr,
4732  c199 c64034        	ld	a,_stored_mqttserveraddr+3
4733  c19c 97            	ld	xl,a
4734  c19d c64033        	ld	a,_stored_mqttserveraddr+2
4735  c1a0 02            	rlwa	x,a
4736  c1a1 cf00f3        	ldw	_IpAddr,x
4739  c1a4 c64032        	ld	a,_stored_mqttserveraddr+1
4740  c1a7 97            	ld	xl,a
4741  c1a8 c64031        	ld	a,_stored_mqttserveraddr
4742  c1ab 02            	rlwa	x,a
4743  c1ac cf00f5        	ldw	_IpAddr+2,x
4744                     ; 1435     uip_setmqttserveraddr(IpAddr);
4746  c1af ce00f3        	ldw	x,_IpAddr
4747  c1b2 cf02a8        	ldw	_uip_mqttserveraddr,x
4750  c1b5 ce00f5        	ldw	x,_IpAddr+2
4751  c1b8 cf02aa        	ldw	_uip_mqttserveraddr+2,x
4752                     ; 1437     Port_Mqttd = stored_mqttport;
4754  c1bb ce402f        	ldw	x,_stored_mqttport
4755  c1be cf00ea        	ldw	_Port_Mqttd,x
4756                     ; 1441     Port_Httpd = stored_port;
4758  c1c1 ce401d        	ldw	x,_stored_port
4759  c1c4 cf00f7        	ldw	_Port_Httpd,x
4760                     ; 1446     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
4762  c1c7 55401c000a    	mov	_uip_ethaddr,_stored_uip_ethaddr_oct+5
4763                     ; 1447     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
4765  c1cc 55401b000b    	mov	_uip_ethaddr+1,_stored_uip_ethaddr_oct+4
4766                     ; 1448     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
4768  c1d1 55401a000c    	mov	_uip_ethaddr+2,_stored_uip_ethaddr_oct+3
4769                     ; 1449     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
4771  c1d6 554019000d    	mov	_uip_ethaddr+3,_stored_uip_ethaddr_oct+2
4772                     ; 1450     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
4774  c1db 554018000e    	mov	_uip_ethaddr+4,_stored_uip_ethaddr_oct+1
4775                     ; 1451     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
4777  c1e0 554017000f    	mov	_uip_ethaddr+5,_stored_uip_ethaddr_oct
4778                     ; 1455     if (stored_config_settings[0] != '0' && stored_config_settings[0] != '1') {
4780  c1e5 c6404c        	ld	a,_stored_config_settings
4781  c1e8 a130          	cp	a,#48
4782  c1ea 270c          	jreq	L3252
4784  c1ec a131          	cp	a,#49
4785  c1ee 2708          	jreq	L3252
4786                     ; 1456       stored_config_settings[0] = '0';
4788  c1f0 a630          	ld	a,#48
4789  c1f2 ae404c        	ldw	x,#_stored_config_settings
4790  c1f5 cdf3a1        	call	c_eewrc
4792  c1f8               L3252:
4793                     ; 1458     if (stored_config_settings[1] != '0' && stored_config_settings[1] != '1') {
4795  c1f8 c6404d        	ld	a,_stored_config_settings+1
4796  c1fb a130          	cp	a,#48
4797  c1fd 270c          	jreq	L5252
4799  c1ff a131          	cp	a,#49
4800  c201 2708          	jreq	L5252
4801                     ; 1459       stored_config_settings[1] = '0';
4803  c203 a630          	ld	a,#48
4804  c205 ae404d        	ldw	x,#_stored_config_settings+1
4805  c208 cdf3a1        	call	c_eewrc
4807  c20b               L5252:
4808                     ; 1461     if (stored_config_settings[2] != '0' && stored_config_settings[2] != '1' && stored_config_settings[2] != '2') {
4810  c20b c6404e        	ld	a,_stored_config_settings+2
4811  c20e a130          	cp	a,#48
4812  c210 2710          	jreq	L7252
4814  c212 a131          	cp	a,#49
4815  c214 270c          	jreq	L7252
4817  c216 a132          	cp	a,#50
4818  c218 2708          	jreq	L7252
4819                     ; 1462       stored_config_settings[2] = '2';
4821  c21a a632          	ld	a,#50
4822  c21c ae404e        	ldw	x,#_stored_config_settings+2
4823  c21f cdf3a1        	call	c_eewrc
4825  c222               L7252:
4826                     ; 1464     if (stored_config_settings[3] != '0' && stored_config_settings[3] != '1') {
4828  c222 c6404f        	ld	a,_stored_config_settings+3
4829  c225 a130          	cp	a,#48
4830  c227 270c          	jreq	L1352
4832  c229 a131          	cp	a,#49
4833  c22b 2708          	jreq	L1352
4834                     ; 1465       stored_config_settings[3] = '0';
4836  c22d a630          	ld	a,#48
4837  c22f ae404f        	ldw	x,#_stored_config_settings+3
4838  c232 cdf3a1        	call	c_eewrc
4840  c235               L1352:
4841                     ; 1467     if (stored_config_settings[4] != '0') {
4843  c235 c64050        	ld	a,_stored_config_settings+4
4844  c238 a130          	cp	a,#48
4845  c23a 2708          	jreq	L3352
4846                     ; 1468       stored_config_settings[4] = '0';
4848  c23c a630          	ld	a,#48
4849  c23e ae4050        	ldw	x,#_stored_config_settings+4
4850  c241 cdf3a1        	call	c_eewrc
4852  c244               L3352:
4853                     ; 1470     if (stored_config_settings[5] != '0') {
4855  c244 c64051        	ld	a,_stored_config_settings+5
4856  c247 a130          	cp	a,#48
4857  c249 2708          	jreq	L5352
4858                     ; 1471       stored_config_settings[5] = '0';
4860  c24b a630          	ld	a,#48
4861  c24d ae4051        	ldw	x,#_stored_config_settings+5
4862  c250 cdf3a1        	call	c_eewrc
4864  c253               L5352:
4865                     ; 1475     if (stored_config_settings[0] == '0') invert_output = 0x00;
4867  c253 c6404c        	ld	a,_stored_config_settings
4868  c256 a130          	cp	a,#48
4869  c258 2606          	jrne	L7352
4872  c25a 725f015a      	clr	_invert_output
4874  c25e 2004          	jra	L1452
4875  c260               L7352:
4876                     ; 1476     else invert_output = 0xff;
4878  c260 35ff015a      	mov	_invert_output,#255
4879  c264               L1452:
4880                     ; 1479     if (stored_config_settings[1] == '0') invert_input = 0x00;
4882  c264 c6404d        	ld	a,_stored_config_settings+1
4883  c267 a130          	cp	a,#48
4884  c269 2606          	jrne	L3452
4887  c26b 725f0159      	clr	_invert_input
4889  c26f 2004          	jra	L5452
4890  c271               L3452:
4891                     ; 1480     else invert_input = 0xff;
4893  c271 35ff0159      	mov	_invert_input,#255
4894  c275               L5452:
4895                     ; 1485     if (stored_config_settings[2] == '0') {
4897  c275 c6404e        	ld	a,_stored_config_settings+2
4898  c278 a130          	cp	a,#48
4899  c27a 260a          	jrne	L7452
4900                     ; 1487       IO_16to9 = 0x00;
4902  c27c 725f0162      	clr	_IO_16to9
4903                     ; 1488       IO_8to1 = 0x00;
4905  c280 725f0161      	clr	_IO_8to1
4907  c284 2036          	jra	L1552
4908  c286               L7452:
4909                     ; 1490     else if (stored_config_settings[2] == '1') {
4911  c286 a131          	cp	a,#49
4912  c288 260a          	jrne	L3552
4913                     ; 1492       IO_16to9 = 0xff;
4915  c28a 35ff0162      	mov	_IO_16to9,#255
4916                     ; 1493       IO_8to1 = 0xff;
4918  c28e 35ff0161      	mov	_IO_8to1,#255
4920  c292 2028          	jra	L1552
4921  c294               L3552:
4922                     ; 1497       IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9;
4924  c294 55404b015c    	mov	_IO_16to9_sent,_stored_IO_16to9
4925  c299 55015c015e    	mov	_IO_16to9_new2,_IO_16to9_sent
4926  c29e 55015e0160    	mov	_IO_16to9_new1,_IO_16to9_new2
4927  c2a3 5501600162    	mov	_IO_16to9,_IO_16to9_new1
4928                     ; 1498       IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1;
4930  c2a8 554014015b    	mov	_IO_8to1_sent,_stored_IO_8to1
4931  c2ad 55015b015d    	mov	_IO_8to1_new2,_IO_8to1_sent
4932  c2b2 55015d015f    	mov	_IO_8to1_new1,_IO_8to1_new2
4933  c2b7 55015f0161    	mov	_IO_8to1,_IO_8to1_new1
4934  c2bc               L1552:
4935                     ; 1502     write_output_registers();
4937  c2bc cdcb38        	call	_write_output_registers
4940  c2bf ccc521        	jra	L7552
4941  c2c2               L1652:
4942                     ; 1511     uip_ipaddr(IpAddr, 192,168,1,4);
4944  c2c2 aec0a8        	ldw	x,#49320
4945  c2c5 cf00f3        	ldw	_IpAddr,x
4948  c2c8 ae0104        	ldw	x,#260
4949  c2cb cf00f5        	ldw	_IpAddr+2,x
4950                     ; 1512     uip_sethostaddr(IpAddr);
4952  c2ce ce00f3        	ldw	x,_IpAddr
4953  c2d1 cf02b4        	ldw	_uip_hostaddr,x
4956  c2d4 ce00f5        	ldw	x,_IpAddr+2
4957  c2d7 cf02b6        	ldw	_uip_hostaddr+2,x
4958                     ; 1514     stored_hostaddr[3] = 192;	// MSB
4960  c2da a6c0          	ld	a,#192
4961  c2dc ae402a        	ldw	x,#_stored_hostaddr+3
4962  c2df cdf3a1        	call	c_eewrc
4964                     ; 1515     stored_hostaddr[2] = 168;	//
4966  c2e2 a6a8          	ld	a,#168
4967  c2e4 ae4029        	ldw	x,#_stored_hostaddr+2
4968  c2e7 cdf3a1        	call	c_eewrc
4970                     ; 1516     stored_hostaddr[1] = 1;	//
4972  c2ea a601          	ld	a,#1
4973  c2ec ae4028        	ldw	x,#_stored_hostaddr+1
4974  c2ef cdf3a1        	call	c_eewrc
4976                     ; 1517     stored_hostaddr[0] = 4;	// LSB
4978  c2f2 a604          	ld	a,#4
4979  c2f4 ae4027        	ldw	x,#_stored_hostaddr
4980  c2f7 cdf3a1        	call	c_eewrc
4982                     ; 1520     uip_ipaddr(IpAddr, 192,168,1,1);
4984  c2fa aec0a8        	ldw	x,#49320
4985  c2fd cf00f3        	ldw	_IpAddr,x
4988  c300 ae0101        	ldw	x,#257
4989  c303 cf00f5        	ldw	_IpAddr+2,x
4990                     ; 1521     uip_setdraddr(IpAddr);
4992  c306 ce00f3        	ldw	x,_IpAddr
4993  c309 cf02ac        	ldw	_uip_draddr,x
4996  c30c ce00f5        	ldw	x,_IpAddr+2
4997  c30f cf02ae        	ldw	_uip_draddr+2,x
4998                     ; 1523     stored_draddr[3] = 192;	// MSB
5000  c312 a6c0          	ld	a,#192
5001  c314 ae4026        	ldw	x,#_stored_draddr+3
5002  c317 cdf3a1        	call	c_eewrc
5004                     ; 1524     stored_draddr[2] = 168;	//
5006  c31a a6a8          	ld	a,#168
5007  c31c ae4025        	ldw	x,#_stored_draddr+2
5008  c31f cdf3a1        	call	c_eewrc
5010                     ; 1525     stored_draddr[1] = 1;		//
5012  c322 a601          	ld	a,#1
5013  c324 ae4024        	ldw	x,#_stored_draddr+1
5014  c327 cdf3a1        	call	c_eewrc
5016                     ; 1526     stored_draddr[0] = 1;		// LSB
5018  c32a a601          	ld	a,#1
5019  c32c ae4023        	ldw	x,#_stored_draddr
5020  c32f cdf3a1        	call	c_eewrc
5022                     ; 1529     uip_ipaddr(IpAddr, 255,255,255,0);
5024  c332 aeffff        	ldw	x,#65535
5025  c335 cf00f3        	ldw	_IpAddr,x
5028  c338 aeff00        	ldw	x,#65280
5029  c33b cf00f5        	ldw	_IpAddr+2,x
5030                     ; 1530     uip_setnetmask(IpAddr);
5032  c33e ce00f3        	ldw	x,_IpAddr
5033  c341 cf02b0        	ldw	_uip_netmask,x
5036  c344 ce00f5        	ldw	x,_IpAddr+2
5037  c347 cf02b2        	ldw	_uip_netmask+2,x
5038                     ; 1532     stored_netmask[3] = 255;	// MSB
5040  c34a a6ff          	ld	a,#255
5041  c34c ae4022        	ldw	x,#_stored_netmask+3
5042  c34f cdf3a1        	call	c_eewrc
5044                     ; 1533     stored_netmask[2] = 255;	//
5046  c352 a6ff          	ld	a,#255
5047  c354 ae4021        	ldw	x,#_stored_netmask+2
5048  c357 cdf3a1        	call	c_eewrc
5050                     ; 1534     stored_netmask[1] = 255;	//
5052  c35a a6ff          	ld	a,#255
5053  c35c ae4020        	ldw	x,#_stored_netmask+1
5054  c35f cdf3a1        	call	c_eewrc
5056                     ; 1535     stored_netmask[0] = 0;	// LSB
5058  c362 4f            	clr	a
5059  c363 ae401f        	ldw	x,#_stored_netmask
5060  c366 cdf3a1        	call	c_eewrc
5062                     ; 1539     uip_ipaddr(IpAddr, 0,0,0,0);
5064  c369 5f            	clrw	x
5065  c36a cf00f3        	ldw	_IpAddr,x
5068  c36d cf00f5        	ldw	_IpAddr+2,x
5069                     ; 1540     uip_setmqttserveraddr(IpAddr);
5071  c370 cf02a8        	ldw	_uip_mqttserveraddr,x
5074  c373 cf02aa        	ldw	_uip_mqttserveraddr+2,x
5075                     ; 1543     stored_mqttserveraddr[3] = 0;	// MSB
5077  c376 4f            	clr	a
5078  c377 ae4034        	ldw	x,#_stored_mqttserveraddr+3
5079  c37a cdf3a1        	call	c_eewrc
5081                     ; 1544     stored_mqttserveraddr[2] = 0;	//
5083  c37d 4f            	clr	a
5084  c37e ae4033        	ldw	x,#_stored_mqttserveraddr+2
5085  c381 cdf3a1        	call	c_eewrc
5087                     ; 1545     stored_mqttserveraddr[1] = 0;	//
5089  c384 4f            	clr	a
5090  c385 ae4032        	ldw	x,#_stored_mqttserveraddr+1
5091  c388 cdf3a1        	call	c_eewrc
5093                     ; 1546     stored_mqttserveraddr[0] = 0;	// LSB
5095  c38b 4f            	clr	a
5096  c38c ae4031        	ldw	x,#_stored_mqttserveraddr
5097  c38f cdf3a1        	call	c_eewrc
5099                     ; 1549     stored_mqttport = 1883;		// Port
5101  c392 ae075b        	ldw	x,#1883
5102  c395 89            	pushw	x
5103  c396 ae402f        	ldw	x,#_stored_mqttport
5104  c399 cdf38b        	call	c_eewrw
5106  c39c 85            	popw	x
5107                     ; 1551     Port_Mqttd = 1883;
5109  c39d ae075b        	ldw	x,#1883
5110  c3a0 cf00ea        	ldw	_Port_Mqttd,x
5111                     ; 1554     for(i=0; i<11; i++) { stored_mqtt_username[i] = '\0'; }
5113  c3a3 4f            	clr	a
5114  c3a4 6b01          	ld	(OFST+0,sp),a
5116  c3a6               L1262:
5119  c3a6 5f            	clrw	x
5120  c3a7 97            	ld	xl,a
5121  c3a8 4f            	clr	a
5122  c3a9 1c4035        	addw	x,#_stored_mqtt_username
5123  c3ac cdf3a1        	call	c_eewrc
5127  c3af 0c01          	inc	(OFST+0,sp)
5131  c3b1 7b01          	ld	a,(OFST+0,sp)
5132  c3b3 a10b          	cp	a,#11
5133  c3b5 25ef          	jrult	L1262
5134                     ; 1555     for(i=0; i<11; i++) { stored_mqtt_password[i] = '\0'; }
5136  c3b7 4f            	clr	a
5137  c3b8 6b01          	ld	(OFST+0,sp),a
5139  c3ba               L7262:
5142  c3ba 5f            	clrw	x
5143  c3bb 97            	ld	xl,a
5144  c3bc 4f            	clr	a
5145  c3bd 1c4040        	addw	x,#_stored_mqtt_password
5146  c3c0 cdf3a1        	call	c_eewrc
5150  c3c3 0c01          	inc	(OFST+0,sp)
5154  c3c5 7b01          	ld	a,(OFST+0,sp)
5155  c3c7 a10b          	cp	a,#11
5156  c3c9 25ef          	jrult	L7262
5157                     ; 1560     stored_port = 8080;
5159  c3cb ae1f90        	ldw	x,#8080
5160  c3ce 89            	pushw	x
5161  c3cf ae401d        	ldw	x,#_stored_port
5162  c3d2 cdf38b        	call	c_eewrw
5164  c3d5 85            	popw	x
5165                     ; 1562     Port_Httpd = 8080;
5167  c3d6 ae1f90        	ldw	x,#8080
5168  c3d9 cf00f7        	ldw	_Port_Httpd,x
5169                     ; 1578     stored_uip_ethaddr_oct[5] = 0xc2;	//MAC MSB
5171  c3dc a6c2          	ld	a,#194
5172  c3de ae401c        	ldw	x,#_stored_uip_ethaddr_oct+5
5173  c3e1 cdf3a1        	call	c_eewrc
5175                     ; 1579     stored_uip_ethaddr_oct[4] = 0x4d;
5177  c3e4 a64d          	ld	a,#77
5178  c3e6 ae401b        	ldw	x,#_stored_uip_ethaddr_oct+4
5179  c3e9 cdf3a1        	call	c_eewrc
5181                     ; 1580     stored_uip_ethaddr_oct[3] = 0x69;
5183  c3ec a669          	ld	a,#105
5184  c3ee ae401a        	ldw	x,#_stored_uip_ethaddr_oct+3
5185  c3f1 cdf3a1        	call	c_eewrc
5187                     ; 1581     stored_uip_ethaddr_oct[2] = 0x6b;
5189  c3f4 a66b          	ld	a,#107
5190  c3f6 ae4019        	ldw	x,#_stored_uip_ethaddr_oct+2
5191  c3f9 cdf3a1        	call	c_eewrc
5193                     ; 1582     stored_uip_ethaddr_oct[1] = 0x65;
5195  c3fc a665          	ld	a,#101
5196  c3fe ae4018        	ldw	x,#_stored_uip_ethaddr_oct+1
5197  c401 cdf3a1        	call	c_eewrc
5199                     ; 1583     stored_uip_ethaddr_oct[0] = 0x00;	//MAC LSB
5201  c404 4f            	clr	a
5202  c405 ae4017        	ldw	x,#_stored_uip_ethaddr_oct
5203  c408 cdf3a1        	call	c_eewrc
5205                     ; 1585     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
5207  c40b 35c2000a      	mov	_uip_ethaddr,#194
5208                     ; 1586     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
5210  c40f 354d000b      	mov	_uip_ethaddr+1,#77
5211                     ; 1587     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
5213  c413 3569000c      	mov	_uip_ethaddr+2,#105
5214                     ; 1588     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
5216  c417 356b000d      	mov	_uip_ethaddr+3,#107
5217                     ; 1589     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
5219  c41b 3565000e      	mov	_uip_ethaddr+4,#101
5220                     ; 1590     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
5222  c41f 725f000f      	clr	_uip_ethaddr+5
5223                     ; 1593     stored_devicename[0] =  'N';
5225  c423 a64e          	ld	a,#78
5226  c425 ae4000        	ldw	x,#_stored_devicename
5227  c428 cdf3a1        	call	c_eewrc
5229                     ; 1594     stored_devicename[1] =  'e';
5231  c42b a665          	ld	a,#101
5232  c42d ae4001        	ldw	x,#_stored_devicename+1
5233  c430 cdf3a1        	call	c_eewrc
5235                     ; 1595     stored_devicename[2] =  'w';
5237  c433 a677          	ld	a,#119
5238  c435 ae4002        	ldw	x,#_stored_devicename+2
5239  c438 cdf3a1        	call	c_eewrc
5241                     ; 1596     stored_devicename[3] =  'D';
5243  c43b a644          	ld	a,#68
5244  c43d ae4003        	ldw	x,#_stored_devicename+3
5245  c440 cdf3a1        	call	c_eewrc
5247                     ; 1597     stored_devicename[4] =  'e';
5249  c443 a665          	ld	a,#101
5250  c445 ae4004        	ldw	x,#_stored_devicename+4
5251  c448 cdf3a1        	call	c_eewrc
5253                     ; 1598     stored_devicename[5] =  'v';
5255  c44b a676          	ld	a,#118
5256  c44d ae4005        	ldw	x,#_stored_devicename+5
5257  c450 cdf3a1        	call	c_eewrc
5259                     ; 1599     stored_devicename[6] =  'i';
5261  c453 a669          	ld	a,#105
5262  c455 ae4006        	ldw	x,#_stored_devicename+6
5263  c458 cdf3a1        	call	c_eewrc
5265                     ; 1600     stored_devicename[7] =  'c';
5267  c45b a663          	ld	a,#99
5268  c45d ae4007        	ldw	x,#_stored_devicename+7
5269  c460 cdf3a1        	call	c_eewrc
5271                     ; 1601     stored_devicename[8] =  'e';
5273  c463 a665          	ld	a,#101
5274  c465 ae4008        	ldw	x,#_stored_devicename+8
5275  c468 cdf3a1        	call	c_eewrc
5277                     ; 1602     stored_devicename[9] =  '0';
5279  c46b a630          	ld	a,#48
5280  c46d ae4009        	ldw	x,#_stored_devicename+9
5281  c470 cdf3a1        	call	c_eewrc
5283                     ; 1603     stored_devicename[10] = '0';
5285  c473 a630          	ld	a,#48
5286  c475 ae400a        	ldw	x,#_stored_devicename+10
5287  c478 cdf3a1        	call	c_eewrc
5289                     ; 1604     stored_devicename[11] = '0';
5291  c47b a630          	ld	a,#48
5292  c47d ae400b        	ldw	x,#_stored_devicename+11
5293  c480 cdf3a1        	call	c_eewrc
5295                     ; 1605     for (i=12; i<20; i++) stored_devicename[i] = '\0';
5297  c483 a60c          	ld	a,#12
5298  c485 6b01          	ld	(OFST+0,sp),a
5300  c487               L5362:
5303  c487 5f            	clrw	x
5304  c488 97            	ld	xl,a
5305  c489 4f            	clr	a
5306  c48a 1c4000        	addw	x,#_stored_devicename
5307  c48d cdf3a1        	call	c_eewrc
5311  c490 0c01          	inc	(OFST+0,sp)
5315  c492 7b01          	ld	a,(OFST+0,sp)
5316  c494 a114          	cp	a,#20
5317  c496 25ef          	jrult	L5362
5318                     ; 1610     stored_config_settings[0] = '0'; // Set to Invert Output OFF
5320  c498 a630          	ld	a,#48
5321  c49a ae404c        	ldw	x,#_stored_config_settings
5322  c49d cdf3a1        	call	c_eewrc
5324                     ; 1611     stored_config_settings[1] = '0'; // Set to Invert Input Off
5326  c4a0 a630          	ld	a,#48
5327  c4a2 ae404d        	ldw	x,#_stored_config_settings+1
5328  c4a5 cdf3a1        	call	c_eewrc
5330                     ; 1612     stored_config_settings[2] = '2'; // Set to Retain pin states
5332  c4a8 a632          	ld	a,#50
5333  c4aa ae404e        	ldw	x,#_stored_config_settings+2
5334  c4ad cdf3a1        	call	c_eewrc
5336                     ; 1613     stored_config_settings[3] = '0'; // Set to Half Duplex
5338  c4b0 a630          	ld	a,#48
5339  c4b2 ae404f        	ldw	x,#_stored_config_settings+3
5340  c4b5 cdf3a1        	call	c_eewrc
5342                     ; 1614     stored_config_settings[4] = '0'; // undefined
5344  c4b8 a630          	ld	a,#48
5345  c4ba ae4050        	ldw	x,#_stored_config_settings+4
5346  c4bd cdf3a1        	call	c_eewrc
5348                     ; 1615     stored_config_settings[5] = '0'; // undefined
5350  c4c0 a630          	ld	a,#48
5351  c4c2 ae4051        	ldw	x,#_stored_config_settings+5
5352  c4c5 cdf3a1        	call	c_eewrc
5354                     ; 1616     invert_output = 0x00;			// Turn off output invert bit
5356  c4c8 725f015a      	clr	_invert_output
5357                     ; 1617     invert_input = 0x00;			// Turn off output invert bit
5359  c4cc 725f0159      	clr	_invert_input
5360                     ; 1618     IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9 = 0x00;
5362  c4d0 4f            	clr	a
5363  c4d1 ae404b        	ldw	x,#_stored_IO_16to9
5364  c4d4 cdf3a1        	call	c_eewrc
5366  c4d7 725f015c      	clr	_IO_16to9_sent
5367  c4db 725f015e      	clr	_IO_16to9_new2
5368  c4df 725f0160      	clr	_IO_16to9_new1
5369  c4e3 725f0162      	clr	_IO_16to9
5370                     ; 1619     IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1  = 0x00;
5372  c4e7 4f            	clr	a
5373  c4e8 ae4014        	ldw	x,#_stored_IO_8to1
5374  c4eb cdf3a1        	call	c_eewrc
5376  c4ee 725f015b      	clr	_IO_8to1_sent
5377  c4f2 725f015d      	clr	_IO_8to1_new2
5378  c4f6 725f015f      	clr	_IO_8to1_new1
5379  c4fa 725f0161      	clr	_IO_8to1
5380                     ; 1620     write_output_registers();          // Set Relay Control outputs
5382  c4fe cdcb38        	call	_write_output_registers
5384                     ; 1623     magic4 = 0x55;		// MSB
5386  c501 a655          	ld	a,#85
5387  c503 ae402e        	ldw	x,#_magic4
5388  c506 cdf3a1        	call	c_eewrc
5390                     ; 1624     magic3 = 0xee;		//
5392  c509 a6ee          	ld	a,#238
5393  c50b ae402d        	ldw	x,#_magic3
5394  c50e cdf3a1        	call	c_eewrc
5396                     ; 1625     magic2 = 0x0f;		//
5398  c511 a60f          	ld	a,#15
5399  c513 ae402c        	ldw	x,#_magic2
5400  c516 cdf3a1        	call	c_eewrc
5402                     ; 1626     magic1 = 0xf0;		// LSB
5404  c519 a6f0          	ld	a,#240
5405  c51b ae402b        	ldw	x,#_magic1
5406  c51e cdf3a1        	call	c_eewrc
5408  c521               L7552:
5409                     ; 1631   for (i=0; i<4; i++) {
5411  c521 4f            	clr	a
5412  c522 6b01          	ld	(OFST+0,sp),a
5414  c524               L3462:
5415                     ; 1632     Pending_hostaddr[i] = stored_hostaddr[i];
5417  c524 5f            	clrw	x
5418  c525 97            	ld	xl,a
5419  c526 d64027        	ld	a,(_stored_hostaddr,x)
5420  c529 d70137        	ld	(_Pending_hostaddr,x),a
5421                     ; 1633     Pending_draddr[i] = stored_draddr[i];
5423  c52c 5f            	clrw	x
5424  c52d 7b01          	ld	a,(OFST+0,sp)
5425  c52f 97            	ld	xl,a
5426  c530 d64023        	ld	a,(_stored_draddr,x)
5427  c533 d70133        	ld	(_Pending_draddr,x),a
5428                     ; 1634     Pending_netmask[i] = stored_netmask[i];
5430  c536 5f            	clrw	x
5431  c537 7b01          	ld	a,(OFST+0,sp)
5432  c539 97            	ld	xl,a
5433  c53a d6401f        	ld	a,(_stored_netmask,x)
5434  c53d d7012f        	ld	(_Pending_netmask,x),a
5435                     ; 1631   for (i=0; i<4; i++) {
5437  c540 0c01          	inc	(OFST+0,sp)
5441  c542 7b01          	ld	a,(OFST+0,sp)
5442  c544 a104          	cp	a,#4
5443  c546 25dc          	jrult	L3462
5444                     ; 1637   Pending_port = stored_port;
5446  c548 ce401d        	ldw	x,_stored_port
5447  c54b cf012d        	ldw	_Pending_port,x
5448                     ; 1639   for (i=0; i<20; i++) {
5450  c54e 4f            	clr	a
5451  c54f 6b01          	ld	(OFST+0,sp),a
5453  c551               L1562:
5454                     ; 1640     Pending_devicename[i] = stored_devicename[i];
5456  c551 5f            	clrw	x
5457  c552 97            	ld	xl,a
5458  c553 d64000        	ld	a,(_stored_devicename,x)
5459  c556 d70119        	ld	(_Pending_devicename,x),a
5460                     ; 1639   for (i=0; i<20; i++) {
5462  c559 0c01          	inc	(OFST+0,sp)
5466  c55b 7b01          	ld	a,(OFST+0,sp)
5467  c55d a114          	cp	a,#20
5468  c55f 25f0          	jrult	L1562
5469                     ; 1643   for (i=0; i<6; i++) {
5471  c561 4f            	clr	a
5472  c562 6b01          	ld	(OFST+0,sp),a
5474  c564               L7562:
5475                     ; 1644     Pending_config_settings[i] = stored_config_settings[i];
5477  c564 5f            	clrw	x
5478  c565 97            	ld	xl,a
5479  c566 d6404c        	ld	a,(_stored_config_settings,x)
5480  c569 d70113        	ld	(_Pending_config_settings,x),a
5481                     ; 1645     Pending_uip_ethaddr_oct[i] = stored_uip_ethaddr_oct[i];
5483  c56c 5f            	clrw	x
5484  c56d 7b01          	ld	a,(OFST+0,sp)
5485  c56f 97            	ld	xl,a
5486  c570 d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5487  c573 d7010d        	ld	(_Pending_uip_ethaddr_oct,x),a
5488                     ; 1643   for (i=0; i<6; i++) {
5490  c576 0c01          	inc	(OFST+0,sp)
5494  c578 7b01          	ld	a,(OFST+0,sp)
5495  c57a a106          	cp	a,#6
5496  c57c 25e6          	jrult	L7562
5497                     ; 1649   for (i=0; i<4; i++) {
5499  c57e 4f            	clr	a
5500  c57f 6b01          	ld	(OFST+0,sp),a
5502  c581               L5662:
5503                     ; 1650     Pending_mqttserveraddr[i] = stored_mqttserveraddr[i];
5505  c581 5f            	clrw	x
5506  c582 97            	ld	xl,a
5507  c583 d64031        	ld	a,(_stored_mqttserveraddr,x)
5508  c586 d70153        	ld	(_Pending_mqttserveraddr,x),a
5509                     ; 1649   for (i=0; i<4; i++) {
5511  c589 0c01          	inc	(OFST+0,sp)
5515  c58b 7b01          	ld	a,(OFST+0,sp)
5516  c58d a104          	cp	a,#4
5517  c58f 25f0          	jrult	L5662
5518                     ; 1652   Pending_mqttport = stored_mqttport;
5520  c591 ce402f        	ldw	x,_stored_mqttport
5521  c594 cf0151        	ldw	_Pending_mqttport,x
5522                     ; 1653   for (i=0; i<11; i++) {
5524  c597 4f            	clr	a
5525  c598 6b01          	ld	(OFST+0,sp),a
5527  c59a               L3762:
5528                     ; 1654     Pending_mqtt_username[i] = stored_mqtt_username[i];
5530  c59a 5f            	clrw	x
5531  c59b 97            	ld	xl,a
5532  c59c d64035        	ld	a,(_stored_mqtt_username,x)
5533  c59f d70146        	ld	(_Pending_mqtt_username,x),a
5534                     ; 1655     Pending_mqtt_password[i] = stored_mqtt_password[i];
5536  c5a2 5f            	clrw	x
5537  c5a3 7b01          	ld	a,(OFST+0,sp)
5538  c5a5 97            	ld	xl,a
5539  c5a6 d64040        	ld	a,(_stored_mqtt_password,x)
5540  c5a9 d7013b        	ld	(_Pending_mqtt_password,x),a
5541                     ; 1653   for (i=0; i<11; i++) {
5543  c5ac 0c01          	inc	(OFST+0,sp)
5547  c5ae 7b01          	ld	a,(OFST+0,sp)
5548  c5b0 a10b          	cp	a,#11
5549  c5b2 25e6          	jrult	L3762
5550                     ; 1658   strcat(topic_base, stored_devicename);
5552  c5b4 ae4000        	ldw	x,#_stored_devicename
5553  c5b7 89            	pushw	x
5554  c5b8 ae0068        	ldw	x,#_topic_base
5555  c5bb cdf35d        	call	_strcat
5557  c5be 85            	popw	x
5558                     ; 1661   topic_base_len = (uint8_t)strlen(topic_base);
5560  c5bf ae0068        	ldw	x,#_topic_base
5561  c5c2 cdf371        	call	_strlen
5563  c5c5 9f            	ld	a,xl
5564  c5c6 c70067        	ld	_topic_base_len,a
5565                     ; 1665   update_mac_string();
5567  c5c9 cdc5ce        	call	_update_mac_string
5569                     ; 1667 }
5572  c5cc 84            	pop	a
5573  c5cd 81            	ret	
5616                     ; 1670 void update_mac_string(void) {
5617                     .text:	section	.text,new
5618  c5ce               _update_mac_string:
5620  c5ce 89            	pushw	x
5621       00000002      OFST:	set	2
5624                     ; 1676   i = 5;
5626  c5cf a605          	ld	a,#5
5627  c5d1 6b01          	ld	(OFST-1,sp),a
5629                     ; 1677   j = 0;
5631  c5d3 0f02          	clr	(OFST+0,sp)
5633  c5d5               L7172:
5634                     ; 1679     emb_itoa(stored_uip_ethaddr_oct[i], OctetArray, 16, 2);
5636  c5d5 4b02          	push	#2
5637  c5d7 4b10          	push	#16
5638  c5d9 ae005c        	ldw	x,#_OctetArray
5639  c5dc 89            	pushw	x
5640  c5dd 7b05          	ld	a,(OFST+3,sp)
5641  c5df 5f            	clrw	x
5642  c5e0 97            	ld	xl,a
5643  c5e1 d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5644  c5e4 b703          	ld	c_lreg+3,a
5645  c5e6 3f02          	clr	c_lreg+2
5646  c5e8 3f01          	clr	c_lreg+1
5647  c5ea 3f00          	clr	c_lreg
5648  c5ec be02          	ldw	x,c_lreg+2
5649  c5ee 89            	pushw	x
5650  c5ef be00          	ldw	x,c_lreg
5651  c5f1 89            	pushw	x
5652  c5f2 cda2d9        	call	_emb_itoa
5654  c5f5 5b08          	addw	sp,#8
5655                     ; 1680     mac_string[j++] = OctetArray[0];
5657  c5f7 7b02          	ld	a,(OFST+0,sp)
5658  c5f9 0c02          	inc	(OFST+0,sp)
5660  c5fb 5f            	clrw	x
5661  c5fc 97            	ld	xl,a
5662  c5fd c6005c        	ld	a,_OctetArray
5663  c600 d70100        	ld	(_mac_string,x),a
5664                     ; 1681     mac_string[j++] = OctetArray[1];
5666  c603 7b02          	ld	a,(OFST+0,sp)
5667  c605 0c02          	inc	(OFST+0,sp)
5669  c607 5f            	clrw	x
5670  c608 97            	ld	xl,a
5671  c609 c6005d        	ld	a,_OctetArray+1
5672  c60c d70100        	ld	(_mac_string,x),a
5673                     ; 1682     i--;
5675  c60f 0a01          	dec	(OFST-1,sp)
5677                     ; 1678   while (j<12) {
5679  c611 7b02          	ld	a,(OFST+0,sp)
5680  c613 a10c          	cp	a,#12
5681  c615 25be          	jrult	L7172
5682                     ; 1684   mac_string[12] = '\0';
5684  c617 725f010c      	clr	_mac_string+12
5685                     ; 1685 }
5688  c61b 85            	popw	x
5689  c61c 81            	ret	
5767                     ; 1688 void check_runtime_changes(void)
5767                     ; 1689 {
5768                     .text:	section	.text,new
5769  c61d               _check_runtime_changes:
5771  c61d 88            	push	a
5772       00000001      OFST:	set	1
5775                     ; 1702   read_input_registers();
5777  c61e cdcaa0        	call	_read_input_registers
5779                     ; 1704   if (parse_complete == 1 || mqtt_parse_complete == 1) {
5781  c621 c600fa        	ld	a,_parse_complete
5782  c624 4a            	dec	a
5783  c625 2706          	jreq	L3472
5785  c627 c600f9        	ld	a,_mqtt_parse_complete
5786  c62a 4a            	dec	a
5787  c62b 2624          	jrne	L1472
5788  c62d               L3472:
5789                     ; 1728     if (stored_IO_8to1 != IO_8to1) {
5791  c62d c64014        	ld	a,_stored_IO_8to1
5792  c630 c10161        	cp	a,_IO_8to1
5793  c633 2713          	jreq	L5472
5794                     ; 1732       if (stored_config_settings[2] == '2') {
5796  c635 c6404e        	ld	a,_stored_config_settings+2
5797  c638 a132          	cp	a,#50
5798  c63a 2609          	jrne	L7472
5799                     ; 1733         stored_IO_8to1 = IO_8to1;
5801  c63c c60161        	ld	a,_IO_8to1
5802  c63f ae4014        	ldw	x,#_stored_IO_8to1
5803  c642 cdf3a1        	call	c_eewrc
5805  c645               L7472:
5806                     ; 1737       write_output_registers();
5808  c645 cdcb38        	call	_write_output_registers
5810  c648               L5472:
5811                     ; 1744     if (mqtt_parse_complete == 1) {
5813  c648 c600f9        	ld	a,_mqtt_parse_complete
5814  c64b 4a            	dec	a
5815  c64c 2603          	jrne	L1472
5816                     ; 1746       mqtt_parse_complete = 0;
5818  c64e c700f9        	ld	_mqtt_parse_complete,a
5819  c651               L1472:
5820                     ; 1751   if (parse_complete == 1) {
5822  c651 c600fa        	ld	a,_parse_complete
5823  c654 4a            	dec	a
5824  c655 2703ccc8e2    	jrne	L3572
5825                     ; 1792     if ((Pending_config_settings[0] != stored_config_settings[0])
5825                     ; 1793      || (stored_IO_8to1 != IO_8to1)) {
5827  c65a c6404c        	ld	a,_stored_config_settings
5828  c65d c10113        	cp	a,_Pending_config_settings
5829  c660 2608          	jrne	L7572
5831  c662 c64014        	ld	a,_stored_IO_8to1
5832  c665 c10161        	cp	a,_IO_8to1
5833  c668 272d          	jreq	L5572
5834  c66a               L7572:
5835                     ; 1796       stored_config_settings[0] = Pending_config_settings[0];
5837  c66a c60113        	ld	a,_Pending_config_settings
5838  c66d ae404c        	ldw	x,#_stored_config_settings
5839  c670 cdf3a1        	call	c_eewrc
5841                     ; 1799       if (stored_config_settings[0] == '0') invert_output = 0x00;
5843  c673 c6404c        	ld	a,_stored_config_settings
5844  c676 a130          	cp	a,#48
5845  c678 2606          	jrne	L1672
5848  c67a 725f015a      	clr	_invert_output
5850  c67e 2004          	jra	L3672
5851  c680               L1672:
5852                     ; 1800       else invert_output = 0xff;
5854  c680 35ff015a      	mov	_invert_output,#255
5855  c684               L3672:
5856                     ; 1804       if (stored_config_settings[2] == '2') {
5858  c684 c6404e        	ld	a,_stored_config_settings+2
5859  c687 a132          	cp	a,#50
5860  c689 2609          	jrne	L5672
5861                     ; 1805         stored_IO_8to1 = IO_8to1;
5863  c68b c60161        	ld	a,_IO_8to1
5864  c68e ae4014        	ldw	x,#_stored_IO_8to1
5865  c691 cdf3a1        	call	c_eewrc
5867  c694               L5672:
5868                     ; 1809       write_output_registers();
5870  c694 cdcb38        	call	_write_output_registers
5872  c697               L5572:
5873                     ; 1813     if (Pending_config_settings[1] != stored_config_settings[1]) {
5875  c697 c6404d        	ld	a,_stored_config_settings+1
5876  c69a c10114        	cp	a,_Pending_config_settings+1
5877  c69d 271e          	jreq	L7672
5878                     ; 1815       stored_config_settings[1] = Pending_config_settings[1];
5880  c69f c60114        	ld	a,_Pending_config_settings+1
5881  c6a2 ae404d        	ldw	x,#_stored_config_settings+1
5882  c6a5 cdf3a1        	call	c_eewrc
5884                     ; 1818       if (stored_config_settings[1] == '0') invert_input = 0x00;
5886  c6a8 c6404d        	ld	a,_stored_config_settings+1
5887  c6ab a130          	cp	a,#48
5888  c6ad 2606          	jrne	L1772
5891  c6af 725f0159      	clr	_invert_input
5893  c6b3 2004          	jra	L3772
5894  c6b5               L1772:
5895                     ; 1819       else invert_input = 0xff;
5897  c6b5 35ff0159      	mov	_invert_input,#255
5898  c6b9               L3772:
5899                     ; 1823       restart_request = 1;
5901  c6b9 350100fd      	mov	_restart_request,#1
5902  c6bd               L7672:
5903                     ; 1857     if (Pending_config_settings[2] != stored_config_settings[2]) {
5905  c6bd c6404e        	ld	a,_stored_config_settings+2
5906  c6c0 c10115        	cp	a,_Pending_config_settings+2
5907  c6c3 2709          	jreq	L5772
5908                     ; 1859       stored_config_settings[2] = Pending_config_settings[2];
5910  c6c5 c60115        	ld	a,_Pending_config_settings+2
5911  c6c8 ae404e        	ldw	x,#_stored_config_settings+2
5912  c6cb cdf3a1        	call	c_eewrc
5914  c6ce               L5772:
5915                     ; 1863     if (Pending_config_settings[3] != stored_config_settings[3]) {
5917  c6ce c6404f        	ld	a,_stored_config_settings+3
5918  c6d1 c10116        	cp	a,_Pending_config_settings+3
5919  c6d4 270d          	jreq	L7772
5920                     ; 1866       stored_config_settings[3] = Pending_config_settings[3];
5922  c6d6 c60116        	ld	a,_Pending_config_settings+3
5923  c6d9 ae404f        	ldw	x,#_stored_config_settings+3
5924  c6dc cdf3a1        	call	c_eewrc
5926                     ; 1868       user_reboot_request = 1;
5928  c6df 350100fe      	mov	_user_reboot_request,#1
5929  c6e3               L7772:
5930                     ; 1871     stored_config_settings[4] = Pending_config_settings[4];
5932  c6e3 c60117        	ld	a,_Pending_config_settings+4
5933  c6e6 ae4050        	ldw	x,#_stored_config_settings+4
5934  c6e9 cdf3a1        	call	c_eewrc
5936                     ; 1872     stored_config_settings[5] = Pending_config_settings[5];
5938  c6ec c60118        	ld	a,_Pending_config_settings+5
5939  c6ef ae4051        	ldw	x,#_stored_config_settings+5
5940  c6f2 cdf3a1        	call	c_eewrc
5942                     ; 1875     if (stored_hostaddr[3] != Pending_hostaddr[3] ||
5942                     ; 1876         stored_hostaddr[2] != Pending_hostaddr[2] ||
5942                     ; 1877         stored_hostaddr[1] != Pending_hostaddr[1] ||
5942                     ; 1878         stored_hostaddr[0] != Pending_hostaddr[0]) {
5944  c6f5 c6402a        	ld	a,_stored_hostaddr+3
5945  c6f8 c1013a        	cp	a,_Pending_hostaddr+3
5946  c6fb 2618          	jrne	L3003
5948  c6fd c64029        	ld	a,_stored_hostaddr+2
5949  c700 c10139        	cp	a,_Pending_hostaddr+2
5950  c703 2610          	jrne	L3003
5952  c705 c64028        	ld	a,_stored_hostaddr+1
5953  c708 c10138        	cp	a,_Pending_hostaddr+1
5954  c70b 2608          	jrne	L3003
5956  c70d c64027        	ld	a,_stored_hostaddr
5957  c710 c10137        	cp	a,_Pending_hostaddr
5958  c713 2713          	jreq	L1003
5959  c715               L3003:
5960                     ; 1880       for (i=0; i<4; i++) stored_hostaddr[i] = Pending_hostaddr[i];
5962  c715 4f            	clr	a
5963  c716 6b01          	ld	(OFST+0,sp),a
5965  c718               L1103:
5968  c718 5f            	clrw	x
5969  c719 97            	ld	xl,a
5970  c71a d60137        	ld	a,(_Pending_hostaddr,x)
5971  c71d d74027        	ld	(_stored_hostaddr,x),a
5974  c720 0c01          	inc	(OFST+0,sp)
5978  c722 7b01          	ld	a,(OFST+0,sp)
5979  c724 a104          	cp	a,#4
5980  c726 25f0          	jrult	L1103
5981  c728               L1003:
5982                     ; 1884     if (stored_draddr[3] != Pending_draddr[3] ||
5982                     ; 1885         stored_draddr[2] != Pending_draddr[2] ||
5982                     ; 1886         stored_draddr[1] != Pending_draddr[1] ||
5982                     ; 1887         stored_draddr[0] != Pending_draddr[0]) {
5984  c728 c64026        	ld	a,_stored_draddr+3
5985  c72b c10136        	cp	a,_Pending_draddr+3
5986  c72e 2618          	jrne	L1203
5988  c730 c64025        	ld	a,_stored_draddr+2
5989  c733 c10135        	cp	a,_Pending_draddr+2
5990  c736 2610          	jrne	L1203
5992  c738 c64024        	ld	a,_stored_draddr+1
5993  c73b c10134        	cp	a,_Pending_draddr+1
5994  c73e 2608          	jrne	L1203
5996  c740 c64023        	ld	a,_stored_draddr
5997  c743 c10133        	cp	a,_Pending_draddr
5998  c746 2717          	jreq	L7103
5999  c748               L1203:
6000                     ; 1889       for (i=0; i<4; i++) stored_draddr[i] = Pending_draddr[i];
6002  c748 4f            	clr	a
6003  c749 6b01          	ld	(OFST+0,sp),a
6005  c74b               L7203:
6008  c74b 5f            	clrw	x
6009  c74c 97            	ld	xl,a
6010  c74d d60133        	ld	a,(_Pending_draddr,x)
6011  c750 d74023        	ld	(_stored_draddr,x),a
6014  c753 0c01          	inc	(OFST+0,sp)
6018  c755 7b01          	ld	a,(OFST+0,sp)
6019  c757 a104          	cp	a,#4
6020  c759 25f0          	jrult	L7203
6021                     ; 1890       restart_request = 1;
6023  c75b 350100fd      	mov	_restart_request,#1
6024  c75f               L7103:
6025                     ; 1894     if (stored_netmask[3] != Pending_netmask[3] ||
6025                     ; 1895         stored_netmask[2] != Pending_netmask[2] ||
6025                     ; 1896         stored_netmask[1] != Pending_netmask[1] ||
6025                     ; 1897         stored_netmask[0] != Pending_netmask[0]) {
6027  c75f c64022        	ld	a,_stored_netmask+3
6028  c762 c10132        	cp	a,_Pending_netmask+3
6029  c765 2618          	jrne	L7303
6031  c767 c64021        	ld	a,_stored_netmask+2
6032  c76a c10131        	cp	a,_Pending_netmask+2
6033  c76d 2610          	jrne	L7303
6035  c76f c64020        	ld	a,_stored_netmask+1
6036  c772 c10130        	cp	a,_Pending_netmask+1
6037  c775 2608          	jrne	L7303
6039  c777 c6401f        	ld	a,_stored_netmask
6040  c77a c1012f        	cp	a,_Pending_netmask
6041  c77d 2717          	jreq	L5303
6042  c77f               L7303:
6043                     ; 1899       for (i=0; i<4; i++) stored_netmask[i] = Pending_netmask[i];
6045  c77f 4f            	clr	a
6046  c780 6b01          	ld	(OFST+0,sp),a
6048  c782               L5403:
6051  c782 5f            	clrw	x
6052  c783 97            	ld	xl,a
6053  c784 d6012f        	ld	a,(_Pending_netmask,x)
6054  c787 d7401f        	ld	(_stored_netmask,x),a
6057  c78a 0c01          	inc	(OFST+0,sp)
6061  c78c 7b01          	ld	a,(OFST+0,sp)
6062  c78e a104          	cp	a,#4
6063  c790 25f0          	jrult	L5403
6064                     ; 1900       restart_request = 1;
6066  c792 350100fd      	mov	_restart_request,#1
6067  c796               L5303:
6068                     ; 1904     if (stored_port != Pending_port) {
6070  c796 ce401d        	ldw	x,_stored_port
6071  c799 c3012d        	cpw	x,_Pending_port
6072  c79c 270f          	jreq	L3503
6073                     ; 1906       stored_port = Pending_port;
6075  c79e ce012d        	ldw	x,_Pending_port
6076  c7a1 89            	pushw	x
6077  c7a2 ae401d        	ldw	x,#_stored_port
6078  c7a5 cdf38b        	call	c_eewrw
6080  c7a8 350100fd      	mov	_restart_request,#1
6081  c7ac 85            	popw	x
6082                     ; 1908       restart_request = 1;
6084  c7ad               L3503:
6085                     ; 1912     for(i=0; i<20; i++) {
6087  c7ad 4f            	clr	a
6088  c7ae 6b01          	ld	(OFST+0,sp),a
6090  c7b0               L5503:
6091                     ; 1913       if (stored_devicename[i] != Pending_devicename[i]) {
6093  c7b0 5f            	clrw	x
6094  c7b1 97            	ld	xl,a
6095  c7b2 905f          	clrw	y
6096  c7b4 9097          	ld	yl,a
6097  c7b6 90d64000      	ld	a,(_stored_devicename,y)
6098  c7ba d10119        	cp	a,(_Pending_devicename,x)
6099  c7bd 270e          	jreq	L3603
6100                     ; 1914         stored_devicename[i] = Pending_devicename[i];
6102  c7bf 7b01          	ld	a,(OFST+0,sp)
6103  c7c1 5f            	clrw	x
6104  c7c2 97            	ld	xl,a
6105  c7c3 d60119        	ld	a,(_Pending_devicename,x)
6106  c7c6 d74000        	ld	(_stored_devicename,x),a
6107                     ; 1920         restart_request = 1;
6109  c7c9 350100fd      	mov	_restart_request,#1
6110  c7cd               L3603:
6111                     ; 1912     for(i=0; i<20; i++) {
6113  c7cd 0c01          	inc	(OFST+0,sp)
6117  c7cf 7b01          	ld	a,(OFST+0,sp)
6118  c7d1 a114          	cp	a,#20
6119  c7d3 25db          	jrult	L5503
6120                     ; 1927     strcpy(topic_base, devicetype);
6122  c7d5 ae0068        	ldw	x,#_topic_base
6123  c7d8 90ae9cc7      	ldw	y,#L5261_devicetype
6124  c7dc               L403:
6125  c7dc 90f6          	ld	a,(y)
6126  c7de 905c          	incw	y
6127  c7e0 f7            	ld	(x),a
6128  c7e1 5c            	incw	x
6129  c7e2 4d            	tnz	a
6130  c7e3 26f7          	jrne	L403
6131                     ; 1928     strcat(topic_base, stored_devicename);
6133  c7e5 ae4000        	ldw	x,#_stored_devicename
6134  c7e8 89            	pushw	x
6135  c7e9 ae0068        	ldw	x,#_topic_base
6136  c7ec cdf35d        	call	_strcat
6138  c7ef 85            	popw	x
6139                     ; 1929     topic_base_len = (uint8_t)strlen(topic_base);
6141  c7f0 ae0068        	ldw	x,#_topic_base
6142  c7f3 cdf371        	call	_strlen
6144  c7f6 9f            	ld	a,xl
6145  c7f7 c70067        	ld	_topic_base_len,a
6146                     ; 1932     if (stored_mqttserveraddr[3] != Pending_mqttserveraddr[3] ||
6146                     ; 1933         stored_mqttserveraddr[2] != Pending_mqttserveraddr[2] ||
6146                     ; 1934         stored_mqttserveraddr[1] != Pending_mqttserveraddr[1] ||
6146                     ; 1935         stored_mqttserveraddr[0] != Pending_mqttserveraddr[0]) {
6148  c7fa c64034        	ld	a,_stored_mqttserveraddr+3
6149  c7fd c10156        	cp	a,_Pending_mqttserveraddr+3
6150  c800 2618          	jrne	L7603
6152  c802 c64033        	ld	a,_stored_mqttserveraddr+2
6153  c805 c10155        	cp	a,_Pending_mqttserveraddr+2
6154  c808 2610          	jrne	L7603
6156  c80a c64032        	ld	a,_stored_mqttserveraddr+1
6157  c80d c10154        	cp	a,_Pending_mqttserveraddr+1
6158  c810 2608          	jrne	L7603
6160  c812 c64031        	ld	a,_stored_mqttserveraddr
6161  c815 c10153        	cp	a,_Pending_mqttserveraddr
6162  c818 2717          	jreq	L5603
6163  c81a               L7603:
6164                     ; 1937       for (i=0; i<4; i++) stored_mqttserveraddr[i] = Pending_mqttserveraddr[i];
6166  c81a 4f            	clr	a
6167  c81b 6b01          	ld	(OFST+0,sp),a
6169  c81d               L5703:
6172  c81d 5f            	clrw	x
6173  c81e 97            	ld	xl,a
6174  c81f d60153        	ld	a,(_Pending_mqttserveraddr,x)
6175  c822 d74031        	ld	(_stored_mqttserveraddr,x),a
6178  c825 0c01          	inc	(OFST+0,sp)
6182  c827 7b01          	ld	a,(OFST+0,sp)
6183  c829 a104          	cp	a,#4
6184  c82b 25f0          	jrult	L5703
6185                     ; 1939       restart_request = 1;
6187  c82d 350100fd      	mov	_restart_request,#1
6188  c831               L5603:
6189                     ; 1943     if (stored_mqttport != Pending_mqttport) {
6191  c831 ce402f        	ldw	x,_stored_mqttport
6192  c834 c30151        	cpw	x,_Pending_mqttport
6193  c837 270f          	jreq	L3013
6194                     ; 1945       stored_mqttport = Pending_mqttport;
6196  c839 ce0151        	ldw	x,_Pending_mqttport
6197  c83c 89            	pushw	x
6198  c83d ae402f        	ldw	x,#_stored_mqttport
6199  c840 cdf38b        	call	c_eewrw
6201  c843 350100fd      	mov	_restart_request,#1
6202  c847 85            	popw	x
6203                     ; 1947       restart_request = 1;
6205  c848               L3013:
6206                     ; 1951     for(i=0; i<11; i++) {
6208  c848 4f            	clr	a
6209  c849 6b01          	ld	(OFST+0,sp),a
6211  c84b               L5013:
6212                     ; 1952       if (stored_mqtt_username[i] != Pending_mqtt_username[i]) {
6214  c84b 5f            	clrw	x
6215  c84c 97            	ld	xl,a
6216  c84d 905f          	clrw	y
6217  c84f 9097          	ld	yl,a
6218  c851 90d64035      	ld	a,(_stored_mqtt_username,y)
6219  c855 d10146        	cp	a,(_Pending_mqtt_username,x)
6220  c858 270e          	jreq	L3113
6221                     ; 1953         stored_mqtt_username[i] = Pending_mqtt_username[i];
6223  c85a 7b01          	ld	a,(OFST+0,sp)
6224  c85c 5f            	clrw	x
6225  c85d 97            	ld	xl,a
6226  c85e d60146        	ld	a,(_Pending_mqtt_username,x)
6227  c861 d74035        	ld	(_stored_mqtt_username,x),a
6228                     ; 1955         restart_request = 1;
6230  c864 350100fd      	mov	_restart_request,#1
6231  c868               L3113:
6232                     ; 1951     for(i=0; i<11; i++) {
6234  c868 0c01          	inc	(OFST+0,sp)
6238  c86a 7b01          	ld	a,(OFST+0,sp)
6239  c86c a10b          	cp	a,#11
6240  c86e 25db          	jrult	L5013
6241                     ; 1960     for(i=0; i<11; i++) {
6243  c870 4f            	clr	a
6244  c871 6b01          	ld	(OFST+0,sp),a
6246  c873               L5113:
6247                     ; 1961       if (stored_mqtt_password[i] != Pending_mqtt_password[i]) {
6249  c873 5f            	clrw	x
6250  c874 97            	ld	xl,a
6251  c875 905f          	clrw	y
6252  c877 9097          	ld	yl,a
6253  c879 90d64040      	ld	a,(_stored_mqtt_password,y)
6254  c87d d1013b        	cp	a,(_Pending_mqtt_password,x)
6255  c880 270e          	jreq	L3213
6256                     ; 1962         stored_mqtt_password[i] = Pending_mqtt_password[i];
6258  c882 7b01          	ld	a,(OFST+0,sp)
6259  c884 5f            	clrw	x
6260  c885 97            	ld	xl,a
6261  c886 d6013b        	ld	a,(_Pending_mqtt_password,x)
6262  c889 d74040        	ld	(_stored_mqtt_password,x),a
6263                     ; 1964         restart_request = 1;
6265  c88c 350100fd      	mov	_restart_request,#1
6266  c890               L3213:
6267                     ; 1960     for(i=0; i<11; i++) {
6269  c890 0c01          	inc	(OFST+0,sp)
6273  c892 7b01          	ld	a,(OFST+0,sp)
6274  c894 a10b          	cp	a,#11
6275  c896 25db          	jrult	L5113
6276                     ; 1970     if (stored_uip_ethaddr_oct[0] != Pending_uip_ethaddr_oct[0] ||
6276                     ; 1971       stored_uip_ethaddr_oct[1] != Pending_uip_ethaddr_oct[1] ||
6276                     ; 1972       stored_uip_ethaddr_oct[2] != Pending_uip_ethaddr_oct[2] ||
6276                     ; 1973       stored_uip_ethaddr_oct[3] != Pending_uip_ethaddr_oct[3] ||
6276                     ; 1974       stored_uip_ethaddr_oct[4] != Pending_uip_ethaddr_oct[4] ||
6276                     ; 1975       stored_uip_ethaddr_oct[5] != Pending_uip_ethaddr_oct[5]) {
6278  c898 c64017        	ld	a,_stored_uip_ethaddr_oct
6279  c89b c1010d        	cp	a,_Pending_uip_ethaddr_oct
6280  c89e 2628          	jrne	L7213
6282  c8a0 c64018        	ld	a,_stored_uip_ethaddr_oct+1
6283  c8a3 c1010e        	cp	a,_Pending_uip_ethaddr_oct+1
6284  c8a6 2620          	jrne	L7213
6286  c8a8 c64019        	ld	a,_stored_uip_ethaddr_oct+2
6287  c8ab c1010f        	cp	a,_Pending_uip_ethaddr_oct+2
6288  c8ae 2618          	jrne	L7213
6290  c8b0 c6401a        	ld	a,_stored_uip_ethaddr_oct+3
6291  c8b3 c10110        	cp	a,_Pending_uip_ethaddr_oct+3
6292  c8b6 2610          	jrne	L7213
6294  c8b8 c6401b        	ld	a,_stored_uip_ethaddr_oct+4
6295  c8bb c10111        	cp	a,_Pending_uip_ethaddr_oct+4
6296  c8be 2608          	jrne	L7213
6298  c8c0 c6401c        	ld	a,_stored_uip_ethaddr_oct+5
6299  c8c3 c10112        	cp	a,_Pending_uip_ethaddr_oct+5
6300  c8c6 271a          	jreq	L3572
6301  c8c8               L7213:
6302                     ; 1977       for (i=0; i<6; i++) stored_uip_ethaddr_oct[i] = Pending_uip_ethaddr_oct[i];
6304  c8c8 4f            	clr	a
6305  c8c9 6b01          	ld	(OFST+0,sp),a
6307  c8cb               L1413:
6310  c8cb 5f            	clrw	x
6311  c8cc 97            	ld	xl,a
6312  c8cd d6010d        	ld	a,(_Pending_uip_ethaddr_oct,x)
6313  c8d0 d74017        	ld	(_stored_uip_ethaddr_oct,x),a
6316  c8d3 0c01          	inc	(OFST+0,sp)
6320  c8d5 7b01          	ld	a,(OFST+0,sp)
6321  c8d7 a106          	cp	a,#6
6322  c8d9 25f0          	jrult	L1413
6323                     ; 1979       update_mac_string();
6325  c8db cdc5ce        	call	_update_mac_string
6327                     ; 1981       restart_request = 1;
6329  c8de 350100fd      	mov	_restart_request,#1
6330  c8e2               L3572:
6331                     ; 1985   if (restart_request == 1) {
6333  c8e2 c600fd        	ld	a,_restart_request
6334  c8e5 4a            	dec	a
6335  c8e6 2609          	jrne	L7413
6336                     ; 1988     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6338  c8e8 c600fc        	ld	a,_restart_reboot_step
6339  c8eb 2604          	jrne	L7413
6340                     ; 1989       restart_reboot_step = RESTART_REBOOT_ARM;
6342  c8ed 350100fc      	mov	_restart_reboot_step,#1
6343  c8f1               L7413:
6344                     ; 1993   if (user_reboot_request == 1) {
6346  c8f1 c600fe        	ld	a,_user_reboot_request
6347  c8f4 4a            	dec	a
6348  c8f5 2611          	jrne	L3513
6349                     ; 1996     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6351  c8f7 725d00fc      	tnz	_restart_reboot_step
6352  c8fb 260b          	jrne	L3513
6353                     ; 1997       restart_reboot_step = RESTART_REBOOT_ARM;
6355  c8fd 350100fc      	mov	_restart_reboot_step,#1
6356                     ; 1998       user_reboot_request = 0;
6358  c901 c700fe        	ld	_user_reboot_request,a
6359                     ; 1999       reboot_request = 1;
6361  c904 350100ff      	mov	_reboot_request,#1
6362  c908               L3513:
6363                     ; 2008   parse_complete = 0; // Reset parse_complete for future changes
6365  c908 725f00fa      	clr	_parse_complete
6366                     ; 2011   if (stack_limit1 != 0xaa || stack_limit2 != 0x55) {
6368  c90c c605ff        	ld	a,_stack_limit1
6369  c90f a1aa          	cp	a,#170
6370  c911 2607          	jrne	L1613
6372  c913 c605fe        	ld	a,_stack_limit2
6373  c916 a155          	cp	a,#85
6374  c918 270a          	jreq	L7513
6375  c91a               L1613:
6376                     ; 2012     stack_error = 1;
6378  c91a 35010157      	mov	_stack_error,#1
6379                     ; 2013     fastflash();
6381  c91e cdcc48        	call	_fastflash
6383                     ; 2014     fastflash();
6385  c921 cdcc48        	call	_fastflash
6387  c924               L7513:
6388                     ; 2027 }
6391  c924 84            	pop	a
6392  c925 81            	ret	
6427                     ; 2030 void check_restart_reboot(void)
6427                     ; 2031 {
6428                     .text:	section	.text,new
6429  c926               _check_restart_reboot:
6433                     ; 2037   if (restart_request == 1 || reboot_request == 1) {
6435  c926 c600fd        	ld	a,_restart_request
6436  c929 4a            	dec	a
6437  c92a 2709          	jreq	L5713
6439  c92c c600ff        	ld	a,_reboot_request
6440  c92f 4a            	dec	a
6441  c930 2703ccc9fa    	jrne	L3713
6442  c935               L5713:
6443                     ; 2048     if (restart_reboot_step == RESTART_REBOOT_ARM) {
6445  c935 c600fc        	ld	a,_restart_reboot_step
6446  c938 a101          	cp	a,#1
6447  c93a 2611          	jrne	L7713
6448                     ; 2053       time_mark2 = second_counter;
6450  c93c ce0292        	ldw	x,_second_counter+2
6451  c93f cf00f1        	ldw	_time_mark2+2,x
6452  c942 ce0290        	ldw	x,_second_counter
6453  c945 cf00ef        	ldw	_time_mark2,x
6454                     ; 2054       restart_reboot_step = RESTART_REBOOT_ARM2;
6456  c948 350200fc      	mov	_restart_reboot_step,#2
6459  c94c 81            	ret	
6460  c94d               L7713:
6461                     ; 2057     else if (restart_reboot_step == RESTART_REBOOT_ARM2) {
6463  c94d a102          	cp	a,#2
6464  c94f 2613          	jrne	L3023
6465                     ; 2063       if (second_counter > time_mark2 + 0 ) {
6467  c951 ae0290        	ldw	x,#_second_counter
6468  c954 cdf5fe        	call	c_ltor
6470  c957 ae00ef        	ldw	x,#_time_mark2
6471  c95a cdf593        	call	c_lcmp
6473  c95d 23d3          	jrule	L3713
6474                     ; 2064         restart_reboot_step = RESTART_REBOOT_DISCONNECT;
6476  c95f 350300fc      	mov	_restart_reboot_step,#3
6478  c963 81            	ret	
6479  c964               L3023:
6480                     ; 2069     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECT) {
6482  c964 a103          	cp	a,#3
6483  c966 261e          	jrne	L1123
6484                     ; 2070       restart_reboot_step = RESTART_REBOOT_DISCONNECTWAIT;
6486  c968 350400fc      	mov	_restart_reboot_step,#4
6487                     ; 2071       if (mqtt_start == MQTT_START_COMPLETE) {
6489  c96c c6009c        	ld	a,_mqtt_start
6490  c96f a114          	cp	a,#20
6491  c971 2606          	jrne	L3123
6492                     ; 2073         mqtt_disconnect(&mqttclient);
6494  c973 ae00b9        	ldw	x,#_mqttclient
6495  c976 cdd14d        	call	_mqtt_disconnect
6497  c979               L3123:
6498                     ; 2076       time_mark2 = second_counter;
6500  c979 ce0292        	ldw	x,_second_counter+2
6501  c97c cf00f1        	ldw	_time_mark2+2,x
6502  c97f ce0290        	ldw	x,_second_counter
6503  c982 cf00ef        	ldw	_time_mark2,x
6506  c985 81            	ret	
6507  c986               L1123:
6508                     ; 2079     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECTWAIT) {
6510  c986 a104          	cp	a,#4
6511  c988 2618          	jrne	L7123
6512                     ; 2080       if (second_counter > time_mark2 + 1 ) {
6514  c98a ae00ef        	ldw	x,#_time_mark2
6515  c98d cdf5fe        	call	c_ltor
6517  c990 a601          	ld	a,#1
6518  c992 cdf56a        	call	c_ladc
6520  c995 ae0290        	ldw	x,#_second_counter
6521  c998 cdf593        	call	c_lcmp
6523  c99b 245d          	jruge	L3713
6524                     ; 2083         restart_reboot_step = RESTART_REBOOT_TCPCLOSE;
6526  c99d 350500fc      	mov	_restart_reboot_step,#5
6528  c9a1 81            	ret	
6529  c9a2               L7123:
6530                     ; 2087     else if (restart_reboot_step == RESTART_REBOOT_TCPCLOSE) {
6532  c9a2 a105          	cp	a,#5
6533  c9a4 2615          	jrne	L5223
6534                     ; 2103       mqtt_close_tcp = 1;
6536  c9a6 350100fb      	mov	_mqtt_close_tcp,#1
6537                     ; 2105       time_mark2 = second_counter;
6539  c9aa ce0292        	ldw	x,_second_counter+2
6540  c9ad cf00f1        	ldw	_time_mark2+2,x
6541  c9b0 ce0290        	ldw	x,_second_counter
6542  c9b3 cf00ef        	ldw	_time_mark2,x
6543                     ; 2106       restart_reboot_step = RESTART_REBOOT_TCPWAIT;
6545  c9b6 350600fc      	mov	_restart_reboot_step,#6
6548  c9ba 81            	ret	
6549  c9bb               L5223:
6550                     ; 2108     else if (restart_reboot_step == RESTART_REBOOT_TCPWAIT) {
6552  c9bb a106          	cp	a,#6
6553  c9bd 261c          	jrne	L1323
6554                     ; 2113       if (second_counter > time_mark2 + 1) {
6556  c9bf ae00ef        	ldw	x,#_time_mark2
6557  c9c2 cdf5fe        	call	c_ltor
6559  c9c5 a601          	ld	a,#1
6560  c9c7 cdf56a        	call	c_ladc
6562  c9ca ae0290        	ldw	x,#_second_counter
6563  c9cd cdf593        	call	c_lcmp
6565  c9d0 2428          	jruge	L3713
6566                     ; 2114 	mqtt_close_tcp = 0;
6568  c9d2 725f00fb      	clr	_mqtt_close_tcp
6569                     ; 2115         restart_reboot_step = RESTART_REBOOT_FINISH;
6571  c9d6 350700fc      	mov	_restart_reboot_step,#7
6573  c9da 81            	ret	
6574  c9db               L1323:
6575                     ; 2125     else if (restart_reboot_step == RESTART_REBOOT_FINISH) {
6577  c9db a107          	cp	a,#7
6578  c9dd 261b          	jrne	L3713
6579                     ; 2126       if (reboot_request == 1) {
6581  c9df c600ff        	ld	a,_reboot_request
6582  c9e2 4a            	dec	a
6583  c9e3 2606          	jrne	L1423
6584                     ; 2127         restart_reboot_step = RESTART_REBOOT_IDLE;
6586  c9e5 c700fc        	ld	_restart_reboot_step,a
6587                     ; 2129         reboot();
6589  c9e8 cdca7b        	call	_reboot
6591  c9eb               L1423:
6592                     ; 2131       if (restart_request == 1) {
6594  c9eb c600fd        	ld	a,_restart_request
6595  c9ee 4a            	dec	a
6596  c9ef 2609          	jrne	L3713
6597                     ; 2132 	restart_request = 0;
6599  c9f1 c700fd        	ld	_restart_request,a
6600                     ; 2133         restart_reboot_step = RESTART_REBOOT_IDLE;
6602  c9f4 c700fc        	ld	_restart_reboot_step,a
6603                     ; 2135 	restart();
6605  c9f7 cdc9fb        	call	_restart
6607  c9fa               L3713:
6608                     ; 2139 }
6611  c9fa 81            	ret	
6664                     ; 2142 void restart(void)
6664                     ; 2143 {
6665                     .text:	section	.text,new
6666  c9fb               _restart:
6670                     ; 2157   LEDcontrol(0); // Turn LED off
6672  c9fb 4f            	clr	a
6673  c9fc cda270        	call	_LEDcontrol
6675                     ; 2159   parse_complete = 0;
6677  c9ff 725f00fa      	clr	_parse_complete
6678                     ; 2160   reboot_request = 0;
6680  ca03 725f00ff      	clr	_reboot_request
6681                     ; 2161   restart_request = 0;
6683  ca07 725f00fd      	clr	_restart_request
6684                     ; 2163   time_mark2 = 0;           // Time capture used in reboot
6686  ca0b 5f            	clrw	x
6687  ca0c cf00f1        	ldw	_time_mark2+2,x
6688  ca0f cf00ef        	ldw	_time_mark2,x
6689                     ; 2166   mqtt_close_tcp = 0;
6691  ca12 725f00fb      	clr	_mqtt_close_tcp
6692                     ; 2168   mqtt_start = MQTT_START_TCP_CONNECT;
6694  ca16 3501009c      	mov	_mqtt_start,#1
6695                     ; 2169   mqtt_start_status = MQTT_START_NOT_STARTED;
6697  ca1a 725f009b      	clr	_mqtt_start_status
6698                     ; 2170   mqtt_start_ctr1 = 0;
6700  ca1e 725f009a      	clr	_mqtt_start_ctr1
6701                     ; 2171   mqtt_sanity_ctr = 0;
6703  ca22 725f0098      	clr	_mqtt_sanity_ctr
6704                     ; 2172   mqtt_start_retry = 0;
6706  ca26 725f0097      	clr	_mqtt_start_retry
6707                     ; 2173   MQTT_error_status = 0;
6709  ca2a 725f028f      	clr	_MQTT_error_status
6710                     ; 2174   mqtt_restart_step = MQTT_RESTART_IDLE;
6712  ca2e 725f0094      	clr	_mqtt_restart_step
6713                     ; 2175   strcpy(topic_base, devicetype);
6715  ca32 ae0068        	ldw	x,#_topic_base
6716  ca35 90ae9cc7      	ldw	y,#L5261_devicetype
6717  ca39               L433:
6718  ca39 90f6          	ld	a,(y)
6719  ca3b 905c          	incw	y
6720  ca3d f7            	ld	(x),a
6721  ca3e 5c            	incw	x
6722  ca3f 4d            	tnz	a
6723  ca40 26f7          	jrne	L433
6724                     ; 2176   state_request = STATE_REQUEST_IDLE;
6726  ca42 c70158        	ld	_state_request,a
6727                     ; 2179   spi_init();              // Initialize the SPI bit bang interface to the
6729  ca45 cde152        	call	_spi_init
6731                     ; 2181   unlock_eeprom();         // unlock the EEPROM so writes can be performed
6733  ca48 cdc103        	call	_unlock_eeprom
6735                     ; 2182   check_eeprom_settings(); // Verify EEPROM up to date
6737  ca4b cdc113        	call	_check_eeprom_settings
6739                     ; 2183   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
6741  ca4e cd9e83        	call	_Enc28j60Init
6743                     ; 2184   uip_arp_init();          // Initialize the ARP module
6745  ca51 cdeeba        	call	_uip_arp_init
6747                     ; 2185   uip_init();              // Initialize uIP
6749  ca54 cde458        	call	_uip_init
6751                     ; 2186   HttpDInit();             // Initialize httpd; sets up listening ports
6753  ca57 cda9f8        	call	_HttpDInit
6755                     ; 2190   mqtt_init(&mqttclient,
6755                     ; 2191             mqtt_sendbuf,
6755                     ; 2192 	    sizeof(mqtt_sendbuf),
6755                     ; 2193 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
6755                     ; 2194 	    UIP_APPDATA_SIZE,
6755                     ; 2195 	    publish_callback);
6757  ca5a aebe6b        	ldw	x,#_publish_callback
6758  ca5d 89            	pushw	x
6759  ca5e ae01be        	ldw	x,#446
6760  ca61 89            	pushw	x
6761  ca62 ae039d        	ldw	x,#_uip_buf+54
6762  ca65 89            	pushw	x
6763  ca66 ae00c8        	ldw	x,#200
6764  ca69 89            	pushw	x
6765  ca6a ae0163        	ldw	x,#_mqtt_sendbuf
6766  ca6d 89            	pushw	x
6767  ca6e ae00b9        	ldw	x,#_mqttclient
6768  ca71 cdccfa        	call	_mqtt_init
6770  ca74 5b0a          	addw	sp,#10
6771                     ; 2198   LEDcontrol(1); // Turn LED on
6773  ca76 a601          	ld	a,#1
6775                     ; 2201 }
6778  ca78 cca270        	jp	_LEDcontrol
6806                     ; 2204 void reboot(void)
6806                     ; 2205 {
6807                     .text:	section	.text,new
6808  ca7b               _reboot:
6812                     ; 2208   fastflash(); // A useful signal that a deliberate reboot is occurring.
6814  ca7b cdcc48        	call	_fastflash
6816                     ; 2210   LEDcontrol(0);  // turn LED off
6818  ca7e 4f            	clr	a
6819  ca7f cda270        	call	_LEDcontrol
6821                     ; 2212   WWDG_WR = (uint8_t)0x7f;     // Window register reset
6823  ca82 357f50d2      	mov	_WWDG_WR,#127
6824                     ; 2213   WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
6826  ca86 35ff50d1      	mov	_WWDG_CR,#255
6827                     ; 2214   WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
6829  ca8a 356050d2      	mov	_WWDG_WR,#96
6830                     ; 2217   wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
6832  ca8e aec350        	ldw	x,#50000
6833  ca91 cde325        	call	_wait_timer
6835                     ; 2218   wait_timer((uint16_t)50000);
6837  ca94 aec350        	ldw	x,#50000
6838  ca97 cde325        	call	_wait_timer
6840                     ; 2219   wait_timer((uint16_t)50000);
6842  ca9a aec350        	ldw	x,#50000
6844                     ; 2220 }
6847  ca9d cce325        	jp	_wait_timer
6888                     ; 2223 void read_input_registers(void)
6888                     ; 2224 {
6889                     .text:	section	.text,new
6890  caa0               _read_input_registers:
6892  caa0 89            	pushw	x
6893       00000002      OFST:	set	2
6896                     ; 2241   if (PC_IDR & (uint8_t)0x40) IO_16to9_new1 |= 0x80; // PC bit 6 = 1, Input 8 = 1
6898  caa1 720d500b06    	btjf	_PC_IDR,#6,L1033
6901  caa6 721e0160      	bset	_IO_16to9_new1,#7
6903  caaa 2004          	jra	L3033
6904  caac               L1033:
6905                     ; 2242   else IO_16to9_new1 &= (uint8_t)(~0x80);
6907  caac 721f0160      	bres	_IO_16to9_new1,#7
6908  cab0               L3033:
6909                     ; 2243   if (PG_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x40; // PG bit 0 = 1, Input 7 = 1
6911  cab0 7201501f06    	btjf	_PG_IDR,#0,L5033
6914  cab5 721c0160      	bset	_IO_16to9_new1,#6
6916  cab9 2004          	jra	L7033
6917  cabb               L5033:
6918                     ; 2244   else IO_16to9_new1 &= (uint8_t)(~0x40);
6920  cabb 721d0160      	bres	_IO_16to9_new1,#6
6921  cabf               L7033:
6922                     ; 2245   if (PE_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x20; // PE bit 3 = 1, Input 6 = 1
6924  cabf 7207501506    	btjf	_PE_IDR,#3,L1133
6927  cac4 721a0160      	bset	_IO_16to9_new1,#5
6929  cac8 2004          	jra	L3133
6930  caca               L1133:
6931                     ; 2246   else IO_16to9_new1 &= (uint8_t)(~0x20);
6933  caca 721b0160      	bres	_IO_16to9_new1,#5
6934  cace               L3133:
6935                     ; 2247   if (PD_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x10; // PD bit 0 = 1, Input 5 = 1
6937  cace 7201501006    	btjf	_PD_IDR,#0,L5133
6940  cad3 72180160      	bset	_IO_16to9_new1,#4
6942  cad7 2004          	jra	L7133
6943  cad9               L5133:
6944                     ; 2248   else IO_16to9_new1 &= (uint8_t)(~0x10);
6946  cad9 72190160      	bres	_IO_16to9_new1,#4
6947  cadd               L7133:
6948                     ; 2249   if (PD_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x08; // PD bit 3 = 1, Input 4 = 1
6950  cadd 7207501006    	btjf	_PD_IDR,#3,L1233
6953  cae2 72160160      	bset	_IO_16to9_new1,#3
6955  cae6 2004          	jra	L3233
6956  cae8               L1233:
6957                     ; 2250   else IO_16to9_new1 &= (uint8_t)(~0x08);
6959  cae8 72170160      	bres	_IO_16to9_new1,#3
6960  caec               L3233:
6961                     ; 2251   if (PD_IDR & (uint8_t)0x20) IO_16to9_new1 |= 0x04; // PD bit 5 = 1, Input 3 = 1
6963  caec 720b501006    	btjf	_PD_IDR,#5,L5233
6966  caf1 72140160      	bset	_IO_16to9_new1,#2
6968  caf5 2004          	jra	L7233
6969  caf7               L5233:
6970                     ; 2252   else IO_16to9_new1 &= (uint8_t)(~0x04);
6972  caf7 72150160      	bres	_IO_16to9_new1,#2
6973  cafb               L7233:
6974                     ; 2253   if (PD_IDR & (uint8_t)0x80) IO_16to9_new1 |= 0x02; // PD bit 7 = 1, Input 2 = 1
6976  cafb 720f501006    	btjf	_PD_IDR,#7,L1333
6979  cb00 72120160      	bset	_IO_16to9_new1,#1
6981  cb04 2004          	jra	L3333
6982  cb06               L1333:
6983                     ; 2254   else IO_16to9_new1 &= (uint8_t)(~0x02);
6985  cb06 72130160      	bres	_IO_16to9_new1,#1
6986  cb0a               L3333:
6987                     ; 2255   if (PA_IDR & (uint8_t)0x10) IO_16to9_new1 |= 0x01; // PA bit 4 = 1, Input 1 = 1
6989  cb0a 7209500106    	btjf	_PA_IDR,#4,L5333
6992  cb0f 72100160      	bset	_IO_16to9_new1,#0
6994  cb13 2004          	jra	L7333
6995  cb15               L5333:
6996                     ; 2256   else IO_16to9_new1 &= (uint8_t)(~0x01);
6998  cb15 72110160      	bres	_IO_16to9_new1,#0
6999  cb19               L7333:
7000                     ; 2261   xor_tmp = (uint8_t)((IO_16to9 ^ IO_16to9_new1) & (IO_16to9 ^ IO_16to9_new2));
7002  cb19 c60162        	ld	a,_IO_16to9
7003  cb1c c8015e        	xor	a,_IO_16to9_new2
7004  cb1f 6b01          	ld	(OFST-1,sp),a
7006  cb21 c60162        	ld	a,_IO_16to9
7007  cb24 c80160        	xor	a,_IO_16to9_new1
7008  cb27 1401          	and	a,(OFST-1,sp)
7009  cb29 6b02          	ld	(OFST+0,sp),a
7011                     ; 2262   IO_16to9 = (uint8_t)(IO_16to9 ^ xor_tmp);
7013  cb2b c80162        	xor	a,_IO_16to9
7014  cb2e c70162        	ld	_IO_16to9,a
7015                     ; 2264   IO_16to9_new2 = IO_16to9_new1;
7017                     ; 2318 }
7020  cb31 85            	popw	x
7021  cb32 550160015e    	mov	_IO_16to9_new2,_IO_16to9_new1
7022  cb37 81            	ret	
7062                     ; 2321 void write_output_registers(void)
7062                     ; 2322 {
7063                     .text:	section	.text,new
7064  cb38               _write_output_registers:
7066  cb38 88            	push	a
7067       00000001      OFST:	set	1
7070                     ; 2376   xor_tmp = (uint8_t)(invert_output ^ IO_8to1);
7072  cb39 c6015a        	ld	a,_invert_output
7073  cb3c c80161        	xor	a,_IO_8to1
7074  cb3f 6b01          	ld	(OFST+0,sp),a
7076                     ; 2377   if (xor_tmp & 0x80) PC_ODR |= (uint8_t)0x80; // Relay 8 off
7078  cb41 2a06          	jrpl	L5533
7081  cb43 721e500a      	bset	_PC_ODR,#7
7083  cb47 2004          	jra	L7533
7084  cb49               L5533:
7085                     ; 2378   else PC_ODR &= (uint8_t)~0x80; // Relay 8 on
7087  cb49 721f500a      	bres	_PC_ODR,#7
7088  cb4d               L7533:
7089                     ; 2379   if (xor_tmp & 0x40) PG_ODR |= (uint8_t)0x02; // Relay 7 off
7091  cb4d a540          	bcp	a,#64
7092  cb4f 2706          	jreq	L1633
7095  cb51 7212501e      	bset	_PG_ODR,#1
7097  cb55 2004          	jra	L3633
7098  cb57               L1633:
7099                     ; 2380   else PG_ODR &= (uint8_t)~0x02; // Relay 7 on
7101  cb57 7213501e      	bres	_PG_ODR,#1
7102  cb5b               L3633:
7103                     ; 2381   if (xor_tmp & 0x20) PE_ODR |= (uint8_t)0x01; // Relay 6 off
7105  cb5b 7b01          	ld	a,(OFST+0,sp)
7106  cb5d a520          	bcp	a,#32
7107  cb5f 2706          	jreq	L5633
7110  cb61 72105014      	bset	_PE_ODR,#0
7112  cb65 2004          	jra	L7633
7113  cb67               L5633:
7114                     ; 2382   else PE_ODR &= (uint8_t)~0x01; // Relay 6 on
7116  cb67 72115014      	bres	_PE_ODR,#0
7117  cb6b               L7633:
7118                     ; 2383   if (xor_tmp & 0x10) PD_ODR |= (uint8_t)0x04; // Relay 5 off
7120  cb6b a510          	bcp	a,#16
7121  cb6d 2706          	jreq	L1733
7124  cb6f 7214500f      	bset	_PD_ODR,#2
7126  cb73 2004          	jra	L3733
7127  cb75               L1733:
7128                     ; 2384   else PD_ODR &= (uint8_t)~0x04; // Relay 5 on
7130  cb75 7215500f      	bres	_PD_ODR,#2
7131  cb79               L3733:
7132                     ; 2385   if (xor_tmp & 0x08) PD_ODR |= (uint8_t)0x10; // Relay 4 off
7134  cb79 7b01          	ld	a,(OFST+0,sp)
7135  cb7b a508          	bcp	a,#8
7136  cb7d 2706          	jreq	L5733
7139  cb7f 7218500f      	bset	_PD_ODR,#4
7141  cb83 2004          	jra	L7733
7142  cb85               L5733:
7143                     ; 2386   else PD_ODR &= (uint8_t)~0x10; // Relay 4 on
7145  cb85 7219500f      	bres	_PD_ODR,#4
7146  cb89               L7733:
7147                     ; 2387   if (xor_tmp & 0x04) PD_ODR |= (uint8_t)0x40; // Relay 3 off
7149  cb89 a504          	bcp	a,#4
7150  cb8b 2706          	jreq	L1043
7153  cb8d 721c500f      	bset	_PD_ODR,#6
7155  cb91 2004          	jra	L3043
7156  cb93               L1043:
7157                     ; 2388   else PD_ODR &= (uint8_t)~0x40; // Relay 3 on
7159  cb93 721d500f      	bres	_PD_ODR,#6
7160  cb97               L3043:
7161                     ; 2389   if (xor_tmp & 0x02) PA_ODR |= (uint8_t)0x20; // Relay 2 off
7163  cb97 7b01          	ld	a,(OFST+0,sp)
7164  cb99 a502          	bcp	a,#2
7165  cb9b 2706          	jreq	L5043
7168  cb9d 721a5000      	bset	_PA_ODR,#5
7170  cba1 2004          	jra	L7043
7171  cba3               L5043:
7172                     ; 2390   else PA_ODR &= (uint8_t)~0x20; // Relay 2 on
7174  cba3 721b5000      	bres	_PA_ODR,#5
7175  cba7               L7043:
7176                     ; 2391   if (xor_tmp & 0x01) PA_ODR |= (uint8_t)0x08; // Relay 1 off
7178  cba7 a501          	bcp	a,#1
7179  cba9 2706          	jreq	L1143
7182  cbab 72165000      	bset	_PA_ODR,#3
7184  cbaf 2004          	jra	L3143
7185  cbb1               L1143:
7186                     ; 2392   else PA_ODR &= (uint8_t)~0x08; // Relay 1 on
7188  cbb1 72175000      	bres	_PA_ODR,#3
7189  cbb5               L3143:
7190                     ; 2398 }
7193  cbb5 84            	pop	a
7194  cbb6 81            	ret	
7235                     ; 2401 void check_reset_button(void)
7235                     ; 2402 {
7236                     .text:	section	.text,new
7237  cbb7               _check_reset_button:
7239  cbb7 88            	push	a
7240       00000001      OFST:	set	1
7243                     ; 2407   if ((PA_IDR & 0x02) == 0) {
7245  cbb8 720250015d    	btjt	_PA_IDR,#1,L1343
7246                     ; 2409     for (i=0; i<100; i++) {
7248  cbbd 0f01          	clr	(OFST+0,sp)
7250  cbbf               L3343:
7251                     ; 2410       wait_timer(50000); // wait 50ms
7253  cbbf aec350        	ldw	x,#50000
7254  cbc2 cde325        	call	_wait_timer
7256                     ; 2411       if ((PA_IDR & 0x02) == 1) { // check Reset Button again. If released
7258  cbc5 c65001        	ld	a,_PA_IDR
7259  cbc8 a402          	and	a,#2
7260  cbca 4a            	dec	a
7261  cbcb 2602          	jrne	L1443
7262                     ; 2413         return;
7265  cbcd 84            	pop	a
7266  cbce 81            	ret	
7267  cbcf               L1443:
7268                     ; 2409     for (i=0; i<100; i++) {
7270  cbcf 0c01          	inc	(OFST+0,sp)
7274  cbd1 7b01          	ld	a,(OFST+0,sp)
7275  cbd3 a164          	cp	a,#100
7276  cbd5 25e8          	jrult	L3343
7277                     ; 2418     LEDcontrol(0);  // turn LED off
7279  cbd7 4f            	clr	a
7280  cbd8 cda270        	call	_LEDcontrol
7283  cbdb               L5443:
7284                     ; 2419     while((PA_IDR & 0x02) == 0) {  // Wait for button release
7286  cbdb 72035001fb    	btjf	_PA_IDR,#1,L5443
7287                     ; 2422     magic4 = 0x00;
7289  cbe0 4f            	clr	a
7290  cbe1 ae402e        	ldw	x,#_magic4
7291  cbe4 cdf3a1        	call	c_eewrc
7293                     ; 2423     magic3 = 0x00;
7295  cbe7 4f            	clr	a
7296  cbe8 ae402d        	ldw	x,#_magic3
7297  cbeb cdf3a1        	call	c_eewrc
7299                     ; 2424     magic2 = 0x00;
7301  cbee 4f            	clr	a
7302  cbef ae402c        	ldw	x,#_magic2
7303  cbf2 cdf3a1        	call	c_eewrc
7305                     ; 2425     magic1 = 0x00;
7307  cbf5 4f            	clr	a
7308  cbf6 ae402b        	ldw	x,#_magic1
7309  cbf9 cdf3a1        	call	c_eewrc
7311                     ; 2427     WWDG_WR = (uint8_t)0x7f;       // Window register reset
7313  cbfc 357f50d2      	mov	_WWDG_WR,#127
7314                     ; 2428     WWDG_CR = (uint8_t)0xff;       // Set watchdog to timeout in 49ms
7316  cc00 35ff50d1      	mov	_WWDG_CR,#255
7317                     ; 2429     WWDG_WR = (uint8_t)0x60;       // Window register value - doesn't matter
7319  cc04 356050d2      	mov	_WWDG_WR,#96
7320                     ; 2432     wait_timer((uint16_t)50000);   // Wait for watchdog to generate reset
7322  cc08 aec350        	ldw	x,#50000
7323  cc0b cde325        	call	_wait_timer
7325                     ; 2433     wait_timer((uint16_t)50000);
7327  cc0e aec350        	ldw	x,#50000
7328  cc11 cde325        	call	_wait_timer
7330                     ; 2434     wait_timer((uint16_t)50000);
7332  cc14 aec350        	ldw	x,#50000
7333  cc17 cde325        	call	_wait_timer
7335  cc1a               L1343:
7336                     ; 2436 }
7339  cc1a 84            	pop	a
7340  cc1b 81            	ret	
7374                     ; 2439 void debugflash(void)
7374                     ; 2440 {
7375                     .text:	section	.text,new
7376  cc1c               _debugflash:
7378  cc1c 88            	push	a
7379       00000001      OFST:	set	1
7382                     ; 2455   LEDcontrol(0);     // turn LED off
7384  cc1d 4f            	clr	a
7385  cc1e cda270        	call	_LEDcontrol
7387                     ; 2456   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7389  cc21 0f01          	clr	(OFST+0,sp)
7391  cc23               L5643:
7394  cc23 aec350        	ldw	x,#50000
7395  cc26 cde325        	call	_wait_timer
7399  cc29 0c01          	inc	(OFST+0,sp)
7403  cc2b 7b01          	ld	a,(OFST+0,sp)
7404  cc2d a10a          	cp	a,#10
7405  cc2f 25f2          	jrult	L5643
7406                     ; 2458   LEDcontrol(1);     // turn LED on
7408  cc31 a601          	ld	a,#1
7409  cc33 cda270        	call	_LEDcontrol
7411                     ; 2459   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7413  cc36 0f01          	clr	(OFST+0,sp)
7415  cc38               L3743:
7418  cc38 aec350        	ldw	x,#50000
7419  cc3b cde325        	call	_wait_timer
7423  cc3e 0c01          	inc	(OFST+0,sp)
7427  cc40 7b01          	ld	a,(OFST+0,sp)
7428  cc42 a10a          	cp	a,#10
7429  cc44 25f2          	jrult	L3743
7430                     ; 2460 }
7433  cc46 84            	pop	a
7434  cc47 81            	ret	
7468                     ; 2463 void fastflash(void)
7468                     ; 2464 {
7469                     .text:	section	.text,new
7470  cc48               _fastflash:
7472  cc48 88            	push	a
7473       00000001      OFST:	set	1
7476                     ; 2479   for (i=0; i<10; i++) {
7478  cc49 0f01          	clr	(OFST+0,sp)
7480  cc4b               L5153:
7481                     ; 2480     LEDcontrol(0);     // turn LED off
7483  cc4b 4f            	clr	a
7484  cc4c cda270        	call	_LEDcontrol
7486                     ; 2481     wait_timer((uint16_t)50000); // wait 50ms
7488  cc4f aec350        	ldw	x,#50000
7489  cc52 cde325        	call	_wait_timer
7491                     ; 2483     LEDcontrol(1);     // turn LED on
7493  cc55 a601          	ld	a,#1
7494  cc57 cda270        	call	_LEDcontrol
7496                     ; 2484     wait_timer((uint16_t)50000); // wait 50ms
7498  cc5a aec350        	ldw	x,#50000
7499  cc5d cde325        	call	_wait_timer
7501                     ; 2479   for (i=0; i<10; i++) {
7503  cc60 0c01          	inc	(OFST+0,sp)
7507  cc62 7b01          	ld	a,(OFST+0,sp)
7508  cc64 a10a          	cp	a,#10
7509  cc66 25e3          	jrult	L5153
7510                     ; 2486 }
7513  cc68 84            	pop	a
7514  cc69 81            	ret	
7539                     ; 2489 void oneflash(void)
7539                     ; 2490 {
7540                     .text:	section	.text,new
7541                     _oneflash:
7545                     ; 2505   LEDcontrol(0);     // turn LED off
7547                     	clr	a
7548                     	call	_LEDcontrol
7550                     ; 2506   wait_timer((uint16_t)25000); // wait 25ms
7552                     	ldw	x,#25000
7553                     	call	_wait_timer
7555                     ; 2508   LEDcontrol(1);     // turn LED on
7557                     	ld	a,#1
7559                     ; 2509 }
7562                     	jp	_LEDcontrol
8869                     	switch	.bss
8870  0067               _topic_base_len:
8871  0067 00            	ds.b	1
8872                     	xdef	_topic_base_len
8873  0068               _topic_base:
8874  0068 000000000000  	ds.b	44
8875                     	xdef	_topic_base
8876  0094               _mqtt_restart_step:
8877  0094 00            	ds.b	1
8878                     	xdef	_mqtt_restart_step
8879                     	xref	_MQTT_error_status
8880  0095               _mqtt_conn:
8881  0095 0000          	ds.b	2
8882                     	xdef	_mqtt_conn
8883                     	xref	_mqtt_sendbuf
8884  0097               _mqtt_start_retry:
8885  0097 00            	ds.b	1
8886                     	xdef	_mqtt_start_retry
8887  0098               _mqtt_sanity_ctr:
8888  0098 00            	ds.b	1
8889                     	xdef	_mqtt_sanity_ctr
8890  0099               _mqtt_start_ctr2:
8891  0099 00            	ds.b	1
8892                     	xdef	_mqtt_start_ctr2
8893  009a               _mqtt_start_ctr1:
8894  009a 00            	ds.b	1
8895                     	xdef	_mqtt_start_ctr1
8896  009b               _mqtt_start_status:
8897  009b 00            	ds.b	1
8898                     	xdef	_mqtt_start_status
8899  009c               _mqtt_start:
8900  009c 00            	ds.b	1
8901                     	xdef	_mqtt_start
8902  009d               _client_id_text:
8903  009d 000000000000  	ds.b	26
8904                     	xdef	_client_id_text
8905  00b7               _client_id:
8906  00b7 0000          	ds.b	2
8907                     	xdef	_client_id
8908  00b9               _mqttclient:
8909  00b9 000000000000  	ds.b	44
8910                     	xdef	_mqttclient
8911  00e5               _mqtt_keep_alive:
8912  00e5 0000          	ds.b	2
8913                     	xdef	_mqtt_keep_alive
8914  00e7               _application_message:
8915  00e7 000000        	ds.b	3
8916                     	xdef	_application_message
8917  00ea               _Port_Mqttd:
8918  00ea 0000          	ds.b	2
8919                     	xdef	_Port_Mqttd
8920  00ec               _mqttport:
8921  00ec 0000          	ds.b	2
8922                     	xdef	_mqttport
8923  00ee               _connect_flags:
8924  00ee 00            	ds.b	1
8925                     	xdef	_connect_flags
8926                     	xref	_OctetArray
8927                     	xref	_second_counter
8928  00ef               _time_mark2:
8929  00ef 00000000      	ds.b	4
8930                     	xdef	_time_mark2
8931  00f3               _IpAddr:
8932  00f3 00000000      	ds.b	4
8933                     	xdef	_IpAddr
8934  00f7               _Port_Httpd:
8935  00f7 0000          	ds.b	2
8936                     	xdef	_Port_Httpd
8937  00f9               _mqtt_parse_complete:
8938  00f9 00            	ds.b	1
8939                     	xdef	_mqtt_parse_complete
8940  00fa               _parse_complete:
8941  00fa 00            	ds.b	1
8942                     	xdef	_parse_complete
8943  00fb               _mqtt_close_tcp:
8944  00fb 00            	ds.b	1
8945                     	xdef	_mqtt_close_tcp
8946  00fc               _restart_reboot_step:
8947  00fc 00            	ds.b	1
8948                     	xdef	_restart_reboot_step
8949  00fd               _restart_request:
8950  00fd 00            	ds.b	1
8951                     	xdef	_restart_request
8952  00fe               _user_reboot_request:
8953  00fe 00            	ds.b	1
8954                     	xdef	_user_reboot_request
8955  00ff               _reboot_request:
8956  00ff 00            	ds.b	1
8957                     	xdef	_reboot_request
8958  0100               _mac_string:
8959  0100 000000000000  	ds.b	13
8960                     	xdef	_mac_string
8961  010d               _Pending_uip_ethaddr_oct:
8962  010d 000000000000  	ds.b	6
8963                     	xdef	_Pending_uip_ethaddr_oct
8964  0113               _Pending_config_settings:
8965  0113 000000000000  	ds.b	6
8966                     	xdef	_Pending_config_settings
8967  0119               _Pending_devicename:
8968  0119 000000000000  	ds.b	20
8969                     	xdef	_Pending_devicename
8970  012d               _Pending_port:
8971  012d 0000          	ds.b	2
8972                     	xdef	_Pending_port
8973  012f               _Pending_netmask:
8974  012f 00000000      	ds.b	4
8975                     	xdef	_Pending_netmask
8976  0133               _Pending_draddr:
8977  0133 00000000      	ds.b	4
8978                     	xdef	_Pending_draddr
8979  0137               _Pending_hostaddr:
8980  0137 00000000      	ds.b	4
8981                     	xdef	_Pending_hostaddr
8982  013b               _Pending_mqtt_password:
8983  013b 000000000000  	ds.b	11
8984                     	xdef	_Pending_mqtt_password
8985  0146               _Pending_mqtt_username:
8986  0146 000000000000  	ds.b	11
8987                     	xdef	_Pending_mqtt_username
8988  0151               _Pending_mqttport:
8989  0151 0000          	ds.b	2
8990                     	xdef	_Pending_mqttport
8991  0153               _Pending_mqttserveraddr:
8992  0153 00000000      	ds.b	4
8993                     	xdef	_Pending_mqttserveraddr
8994  0157               _stack_error:
8995  0157 00            	ds.b	1
8996                     	xdef	_stack_error
8997  0158               _state_request:
8998  0158 00            	ds.b	1
8999                     	xdef	_state_request
9000  0159               _invert_input:
9001  0159 00            	ds.b	1
9002                     	xdef	_invert_input
9003  015a               _invert_output:
9004  015a 00            	ds.b	1
9005                     	xdef	_invert_output
9006  015b               _IO_8to1_sent:
9007  015b 00            	ds.b	1
9008                     	xdef	_IO_8to1_sent
9009  015c               _IO_16to9_sent:
9010  015c 00            	ds.b	1
9011                     	xdef	_IO_16to9_sent
9012  015d               _IO_8to1_new2:
9013  015d 00            	ds.b	1
9014                     	xdef	_IO_8to1_new2
9015  015e               _IO_16to9_new2:
9016  015e 00            	ds.b	1
9017                     	xdef	_IO_16to9_new2
9018  015f               _IO_8to1_new1:
9019  015f 00            	ds.b	1
9020                     	xdef	_IO_8to1_new1
9021  0160               _IO_16to9_new1:
9022  0160 00            	ds.b	1
9023                     	xdef	_IO_16to9_new1
9024  0161               _IO_8to1:
9025  0161 00            	ds.b	1
9026                     	xdef	_IO_8to1
9027  0162               _IO_16to9:
9028  0162 00            	ds.b	1
9029                     	xdef	_IO_16to9
9030                     .eeprom:	section	.data
9031  4000               _stored_devicename:
9032  4000 000000000000  	ds.b	20
9033                     	xdef	_stored_devicename
9034  4014               _stored_IO_8to1:
9035  4014 00            	ds.b	1
9036                     	xdef	_stored_IO_8to1
9037  4015               _stored_unused1:
9038  4015 00            	ds.b	1
9039                     	xdef	_stored_unused1
9040  4016               _stored_unused2:
9041  4016 00            	ds.b	1
9042                     	xdef	_stored_unused2
9043  4017               _stored_uip_ethaddr_oct:
9044  4017 000000000000  	ds.b	6
9045                     	xdef	_stored_uip_ethaddr_oct
9046  401d               _stored_port:
9047  401d 0000          	ds.b	2
9048                     	xdef	_stored_port
9049  401f               _stored_netmask:
9050  401f 00000000      	ds.b	4
9051                     	xdef	_stored_netmask
9052  4023               _stored_draddr:
9053  4023 00000000      	ds.b	4
9054                     	xdef	_stored_draddr
9055  4027               _stored_hostaddr:
9056  4027 00000000      	ds.b	4
9057                     	xdef	_stored_hostaddr
9058  402b               _magic1:
9059  402b 00            	ds.b	1
9060                     	xdef	_magic1
9061  402c               _magic2:
9062  402c 00            	ds.b	1
9063                     	xdef	_magic2
9064  402d               _magic3:
9065  402d 00            	ds.b	1
9066                     	xdef	_magic3
9067  402e               _magic4:
9068  402e 00            	ds.b	1
9069                     	xdef	_magic4
9070  402f               _stored_mqttport:
9071  402f 0000          	ds.b	2
9072                     	xdef	_stored_mqttport
9073  4031               _stored_mqttserveraddr:
9074  4031 00000000      	ds.b	4
9075                     	xdef	_stored_mqttserveraddr
9076  4035               _stored_mqtt_username:
9077  4035 000000000000  	ds.b	11
9078                     	xdef	_stored_mqtt_username
9079  4040               _stored_mqtt_password:
9080  4040 000000000000  	ds.b	11
9081                     	xdef	_stored_mqtt_password
9082  404b               _stored_IO_16to9:
9083  404b 00            	ds.b	1
9084                     	xdef	_stored_IO_16to9
9085  404c               _stored_config_settings:
9086  404c 000000000000  	ds.b	6
9087                     	xdef	_stored_config_settings
9088                     	xdef	_stack_limit2
9089                     	xdef	_stack_limit1
9090                     	xref	_mqtt_disconnect
9091                     	xref	_mqtt_subscribe
9092                     	xref	_mqtt_publish
9093                     	xref	_mqtt_connect
9094                     	xref	_mqtt_init
9095                     	xref	_strlen
9096                     	xref	_strcat
9097                     	xref	_wait_timer
9098                     	xref	_arp_timer_expired
9099                     	xref	_periodic_timer_expired
9100                     	xref	_clock_init
9101                     	xref	_LEDcontrol
9102                     	xref	_gpio_init
9103                     	xref	_check_mqtt_server_arp_entry
9104                     	xref	_uip_arp_timer
9105                     	xref	_uip_arp_out
9106                     	xref	_uip_arp_arpin
9107                     	xref	_uip_arp_init
9108                     	xref	_uip_ethaddr
9109                     	xref	_uip_mqttserveraddr
9110                     	xref	_uip_draddr
9111                     	xref	_uip_netmask
9112                     	xref	_uip_hostaddr
9113                     	xref	_uip_process
9114                     	xref	_uip_conns
9115                     	xref	_uip_conn
9116                     	xref	_uip_len
9117                     	xref	_uip_appdata
9118                     	xref	_htons
9119                     	xref	_uip_connect
9120                     	xref	_uip_buf
9121                     	xref	_uip_init
9122                     	xref	_GpioSetPin
9123                     	xref	_HttpDInit
9124                     	xref	_emb_itoa
9125                     	xref	_Enc28j60Send
9126                     	xref	_Enc28j60Receive
9127                     	xref	_Enc28j60Init
9128                     	xref	_spi_init
9129                     	xdef	_publish_pinstate_all
9130                     	xdef	_publish_pinstate
9131                     	xdef	_publish_outbound
9132                     	xdef	_publish_callback
9133                     	xdef	_mqtt_sanity_check
9134                     	xdef	_mqtt_startup
9135                     	xdef	_debugflash
9136                     	xdef	_fastflash
9137                     	xdef	_oneflash
9138                     	xdef	_reboot
9139                     	xdef	_restart
9140                     	xdef	_check_restart_reboot
9141                     	xdef	_check_reset_button
9142                     	xdef	_write_output_registers
9143                     	xdef	_read_input_registers
9144                     	xdef	_check_runtime_changes
9145                     	xdef	_update_mac_string
9146                     	xdef	_check_eeprom_settings
9147                     	xdef	_unlock_eeprom
9148                     	xdef	_main
9149                     	switch	.const
9150  9cd6               L5242:
9151  9cd6 2f7374617465  	dc.b	"/state",0
9152  9cdd               L7632:
9153  9cdd 2f6f75745f6f  	dc.b	"/out_off",0
9154  9ce6               L3632:
9155  9ce6 2f6f75745f6f  	dc.b	"/out_on",0
9156  9cee               L5532:
9157  9cee 2f696e5f6f66  	dc.b	"/in_off",0
9158  9cf6               L1532:
9159  9cf6 2f696e5f6f6e  	dc.b	"/in_on",0
9160  9cfd               L5302:
9161  9cfd 6f6e6c696e65  	dc.b	"online",0
9162  9d04               L5202:
9163  9d04 2f7374617465  	dc.b	"/state-req",0
9164  9d0f               L5102:
9165  9d0f 2f6f666600    	dc.b	"/off",0
9166  9d14               L5002:
9167  9d14 2f6f6e00      	dc.b	"/on",0
9168  9d18               L1771:
9169  9d18 6f66666c696e  	dc.b	"offline",0
9170  9d20               L7671:
9171  9d20 2f7374617475  	dc.b	"/status",0
9172                     	xref.b	c_lreg
9192                     	xref	c_ladc
9193                     	xref	c_lcmp
9194                     	xref	c_ltor
9195                     	xref	c_eewrw
9196                     	xref	c_eewrc
9197                     	end
