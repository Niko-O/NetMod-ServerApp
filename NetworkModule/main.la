   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2518                     .iconst:	section	.bss
2519  05fe               _stack_limit2:
2520  05fe 00            	ds.b	1
2521  05ff               _stack_limit1:
2522  05ff 00            	ds.b	1
2523                     .const:	section	.text
2524  9ccb               L5261_devicetype:
2525  9ccb 4e6574776f72  	dc.b	"NetworkModule/",0
2624                     ; 296 int main(void)
2624                     ; 297 {
2626                     .text:	section	.text,new
2627  bafe               _main:
2629  bafe 88            	push	a
2630       00000001      OFST:	set	1
2633                     ; 301   parse_complete = 0;
2635  baff 725f0106      	clr	_parse_complete
2636                     ; 302   mqtt_parse_complete = 0;
2638  bb03 725f0105      	clr	_mqtt_parse_complete
2639                     ; 303   reboot_request = 0;
2641  bb07 725f010b      	clr	_reboot_request
2642                     ; 304   user_reboot_request = 0;
2644  bb0b 725f010a      	clr	_user_reboot_request
2645                     ; 305   restart_request = 0;
2647  bb0f 725f0109      	clr	_restart_request
2648                     ; 307   time_mark2 = 0;           // Time capture used in reboot
2650  bb13 5f            	clrw	x
2651  bb14 cf00fd        	ldw	_time_mark2+2,x
2652  bb17 cf00fb        	ldw	_time_mark2,x
2653                     ; 310   restart_reboot_step = RESTART_REBOOT_IDLE;
2655  bb1a 725f0108      	clr	_restart_reboot_step
2656                     ; 311   mqtt_close_tcp = 0;
2658  bb1e 725f0107      	clr	_mqtt_close_tcp
2659                     ; 312   stack_error = 0;
2661  bb22 725f0163      	clr	_stack_error
2662                     ; 315   mqtt_start = MQTT_START_TCP_CONNECT;	 // Tracks the MQTT startup steps
2664  bb26 350100a8      	mov	_mqtt_start,#1
2665                     ; 316   mqtt_start_status = MQTT_START_NOT_STARTED; // Tracks error states during
2667  bb2a 725f00a7      	clr	_mqtt_start_status
2668                     ; 318   mqtt_keep_alive = 60;                  // Ping interval in seconds
2670  bb2e ae003c        	ldw	x,#60
2671  bb31 cf00f1        	ldw	_mqtt_keep_alive,x
2672                     ; 320   mqtt_start_ctr1 = 0;			 // Tracks time for the MQTT startup
2674  bb34 725f00a6      	clr	_mqtt_start_ctr1
2675                     ; 322   mqtt_start_ctr2 = 0;			 // Tracks time for the MQTT startup
2677  bb38 725f00a5      	clr	_mqtt_start_ctr2
2678                     ; 324   mqtt_sanity_ctr = 0;			 // Tracks time for the MQTT sanity
2680  bb3c 725f00a4      	clr	_mqtt_sanity_ctr
2681                     ; 326   mqtt_start_retry = 0;                  // Flag to retry the ARP/TCP Connect
2683  bb40 725f00a3      	clr	_mqtt_start_retry
2684                     ; 327   MQTT_error_status = 0;                 // For MQTT error status display in
2686  bb44 725f029b      	clr	_MQTT_error_status
2687                     ; 329   mqtt_restart_step = MQTT_RESTART_IDLE; // Step counter for MQTT restart
2689  bb48 725f00a0      	clr	_mqtt_restart_step
2690                     ; 330   strcpy(topic_base, devicetype);        // Initial content of the topic_base.
2692  bb4c ae0074        	ldw	x,#_topic_base
2693  bb4f 90ae9ccb      	ldw	y,#L5261_devicetype
2694  bb53               L6:
2695  bb53 90f6          	ld	a,(y)
2696  bb55 905c          	incw	y
2697  bb57 f7            	ld	(x),a
2698  bb58 5c            	incw	x
2699  bb59 4d            	tnz	a
2700  bb5a 26f7          	jrne	L6
2701                     ; 336   state_request = STATE_REQUEST_IDLE;    // Set the state request received to
2703  bb5c c70164        	ld	_state_request,a
2704                     ; 338   TXERIF_counter = 0;                    // Initialize the TXERIF error counter
2706  bb5f 5f            	clrw	x
2707  bb60 cf006d        	ldw	_TXERIF_counter+2,x
2708  bb63 cf006b        	ldw	_TXERIF_counter,x
2709                     ; 339   RXERIF_counter = 0;                    // Initialize the RXERIF error counter
2711  bb66 cf0071        	ldw	_RXERIF_counter+2,x
2712  bb69 cf006f        	ldw	_RXERIF_counter,x
2713                     ; 340   TRANSMIT_counter = 0;
2715  bb6c cf0069        	ldw	_TRANSMIT_counter+2,x
2716  bb6f cf0067        	ldw	_TRANSMIT_counter,x
2717                     ; 346   clock_init();            // Initialize and enable clocks and timers
2719  bb72 cde32f        	call	_clock_init
2721                     ; 348   gpio_init();             // Initialize and enable gpio pins
2723  bb75 cda25d        	call	_gpio_init
2725                     ; 350   spi_init();              // Initialize the SPI bit bang interface to the
2727  bb78 cde237        	call	_spi_init
2729                     ; 353   LEDcontrol(1);           // turn LED on
2731  bb7b a601          	ld	a,#1
2732  bb7d cda2a6        	call	_LEDcontrol
2734                     ; 355   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2736  bb80 cdc1e8        	call	_unlock_eeprom
2738                     ; 357   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2740  bb83 cdc1f8        	call	_check_eeprom_settings
2742                     ; 361   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2744  bb86 cd9e87        	call	_Enc28j60Init
2746                     ; 363   uip_arp_init();          // Initialize the ARP module
2748  bb89 cdef9f        	call	_uip_arp_init
2750                     ; 365   uip_init();              // Initialize uIP Web Server
2752  bb8c cde53d        	call	_uip_init
2754                     ; 367   HttpDInit();             // Initialize listening ports
2756  bb8f cdaa56        	call	_HttpDInit
2758                     ; 374   stack_limit1 = 0xaa;
2760  bb92 35aa05ff      	mov	_stack_limit1,#170
2761                     ; 375   stack_limit2 = 0x55;
2763  bb96 355505fe      	mov	_stack_limit2,#85
2764                     ; 380   mqtt_init(&mqttclient,
2764                     ; 381             mqtt_sendbuf,
2764                     ; 382 	    sizeof(mqtt_sendbuf),
2764                     ; 383 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
2764                     ; 384 	    UIP_APPDATA_SIZE,
2764                     ; 385 	    publish_callback);
2766  bb9a aebf50        	ldw	x,#_publish_callback
2767  bb9d 89            	pushw	x
2768  bb9e ae01be        	ldw	x,#446
2769  bba1 89            	pushw	x
2770  bba2 ae03ad        	ldw	x,#_uip_buf+54
2771  bba5 89            	pushw	x
2772  bba6 ae00c8        	ldw	x,#200
2773  bba9 89            	pushw	x
2774  bbaa ae016f        	ldw	x,#_mqtt_sendbuf
2775  bbad 89            	pushw	x
2776  bbae ae00c5        	ldw	x,#_mqttclient
2777  bbb1 cdcddf        	call	_mqtt_init
2779  bbb4 5b0a          	addw	sp,#10
2780  bbb6               L1561:
2781                     ; 499     uip_len = Enc28j60Receive(uip_buf); // Check for incoming packets
2783  bbb6 ae0377        	ldw	x,#_uip_buf
2784  bbb9 cd9fe7        	call	_Enc28j60Receive
2786  bbbc cf0373        	ldw	_uip_len,x
2787                     ; 501     if (uip_len > 0) {
2789  bbbf 2738          	jreq	L5561
2790                     ; 505       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2792  bbc1 ae0800        	ldw	x,#2048
2793  bbc4 cdef7a        	call	_htons
2795  bbc7 c30383        	cpw	x,_uip_buf+12
2796  bbca 2612          	jrne	L7561
2797                     ; 506         uip_input(); // Calls uip_process(UIP_DATA) to process a received
2799  bbcc a601          	ld	a,#1
2800  bbce cde64c        	call	_uip_process
2802                     ; 511         if (uip_len > 0) {
2804  bbd1 ce0373        	ldw	x,_uip_len
2805  bbd4 2723          	jreq	L5561
2806                     ; 512           uip_arp_out();
2808  bbd6 cdf1c8        	call	_uip_arp_out
2810                     ; 516           Enc28j60Send(uip_buf, uip_len);
2812  bbd9 ce0373        	ldw	x,_uip_len
2814  bbdc 2013          	jp	LC001
2815  bbde               L7561:
2816                     ; 519       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2818  bbde ae0806        	ldw	x,#2054
2819  bbe1 cdef7a        	call	_htons
2821  bbe4 c30383        	cpw	x,_uip_buf+12
2822  bbe7 2610          	jrne	L5561
2823                     ; 520         uip_arp_arpin();
2825  bbe9 cdf119        	call	_uip_arp_arpin
2827                     ; 524         if (uip_len > 0) {
2829  bbec ce0373        	ldw	x,_uip_len
2830  bbef 2708          	jreq	L5561
2831                     ; 528           Enc28j60Send(uip_buf, uip_len);
2834  bbf1               LC001:
2835  bbf1 89            	pushw	x
2836  bbf2 ae0377        	ldw	x,#_uip_buf
2837  bbf5 cda094        	call	_Enc28j60Send
2838  bbf8 85            	popw	x
2839  bbf9               L5561:
2840                     ; 538     if (mqtt_start != MQTT_START_COMPLETE
2840                     ; 539      && mqtt_restart_step == MQTT_RESTART_IDLE
2840                     ; 540      && restart_reboot_step == RESTART_REBOOT_IDLE) {
2842  bbf9 c600a8        	ld	a,_mqtt_start
2843  bbfc a114          	cp	a,#20
2844  bbfe 270d          	jreq	L1761
2846  bc00 c600a0        	ld	a,_mqtt_restart_step
2847  bc03 2608          	jrne	L1761
2849  bc05 c60108        	ld	a,_restart_reboot_step
2850  bc08 2603          	jrne	L1761
2851                     ; 541        mqtt_startup();
2853  bc0a cdbc73        	call	_mqtt_startup
2855  bc0d               L1761:
2856                     ; 545     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
2858  bc0d c60108        	ld	a,_restart_reboot_step
2859  bc10 2603          	jrne	L3761
2860                     ; 546       mqtt_sanity_check();
2862  bc12 cdbe99        	call	_mqtt_sanity_check
2864  bc15               L3761:
2865                     ; 550     if (periodic_timer_expired()) {
2867  bc15 cde3c1        	call	_periodic_timer_expired
2869  bc18 4d            	tnz	a
2870  bc19 2743          	jreq	L5761
2871                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2873  bc1b 4f            	clr	a
2874  bc1c 6b01          	ld	(OFST+0,sp),a
2876  bc1e               L5071:
2877                     ; 553 	uip_periodic(i);
2879  bc1e 97            	ld	xl,a
2880  bc1f a629          	ld	a,#41
2881  bc21 42            	mul	x,a
2882  bc22 1c02cd        	addw	x,#_uip_conns
2883  bc25 cf0371        	ldw	_uip_conn,x
2886  bc28 a602          	ld	a,#2
2887  bc2a cde64c        	call	_uip_process
2889                     ; 572 	if (uip_len > 0) {
2891  bc2d ce0373        	ldw	x,_uip_len
2892  bc30 270e          	jreq	L1171
2893                     ; 573 	  uip_arp_out(); // Verifies arp entry in the ARP table and builds LLH
2895  bc32 cdf1c8        	call	_uip_arp_out
2897                     ; 574           Enc28j60Send(uip_buf, uip_len);
2899  bc35 ce0373        	ldw	x,_uip_len
2900  bc38 89            	pushw	x
2901  bc39 ae0377        	ldw	x,#_uip_buf
2902  bc3c cda094        	call	_Enc28j60Send
2904  bc3f 85            	popw	x
2905  bc40               L1171:
2906                     ; 577         mqtt_start_ctr1++; // Increment the MQTT start loop timer 1. This is
2908  bc40 725c00a6      	inc	_mqtt_start_ctr1
2909                     ; 581         mqtt_start_ctr2++; // Increment the MQTT start loop timer 2. This is
2911  bc44 725c00a5      	inc	_mqtt_start_ctr2
2912                     ; 584         mqtt_sanity_ctr++; // Increment the MQTT sanity loop timer. This is
2914  bc48 725c00a4      	inc	_mqtt_sanity_ctr
2915                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2917  bc4c 0c01          	inc	(OFST+0,sp)
2921  bc4e 7b01          	ld	a,(OFST+0,sp)
2922  bc50 a104          	cp	a,#4
2923  bc52 25ca          	jrult	L5071
2924                     ; 594       if (mqtt_start == MQTT_START_COMPLETE) {
2926  bc54 c600a8        	ld	a,_mqtt_start
2927  bc57 a114          	cp	a,#20
2928  bc59 2603          	jrne	L5761
2929                     ; 595         publish_outbound();
2931  bc5b cdbffd        	call	_publish_outbound
2933  bc5e               L5761:
2934                     ; 602     if (arp_timer_expired()) {
2936  bc5e cde3fa        	call	_arp_timer_expired
2938  bc61 4d            	tnz	a
2939  bc62 2703          	jreq	L5171
2940                     ; 603       uip_arp_timer(); // Clean out old ARP Table entries. Any entry that has
2942  bc64 cdefc2        	call	_uip_arp_timer
2944  bc67               L5171:
2945                     ; 610     check_runtime_changes();
2947  bc67 cdc702        	call	_check_runtime_changes
2949                     ; 613     check_reset_button();
2951  bc6a cdcc9c        	call	_check_reset_button
2953                     ; 618     check_restart_reboot();
2955  bc6d cdca0b        	call	_check_restart_reboot
2958  bc70 ccbbb6        	jra	L1561
3009                     ; 646 void mqtt_startup(void)
3009                     ; 647 {
3010                     .text:	section	.text,new
3011  bc73               _mqtt_startup:
3015                     ; 663   if (mqtt_start == MQTT_START_TCP_CONNECT) {
3017  bc73 c600a8        	ld	a,_mqtt_start
3018  bc76 a101          	cp	a,#1
3019  bc78 2630          	jrne	L7271
3020                     ; 664     if (stored_mqttserveraddr[3] != 0) {
3022  bc7a c64034        	ld	a,_stored_mqttserveraddr+3
3023  bc7d 2603ccbe98    	jreq	L7371
3024                     ; 684       mqtt_conn = uip_connect(&uip_mqttserveraddr, Port_Mqttd, Port_Mqttd);
3026  bc82 ce00f6        	ldw	x,_Port_Mqttd
3027  bc85 89            	pushw	x
3028  bc86 89            	pushw	x
3029  bc87 ae02b8        	ldw	x,#_uip_mqttserveraddr
3030  bc8a cde56c        	call	_uip_connect
3032  bc8d 5b04          	addw	sp,#4
3033  bc8f cf00a1        	ldw	_mqtt_conn,x
3034                     ; 685       if (mqtt_conn != NULL) {
3036  bc92 2711          	jreq	L3371
3037                     ; 686         mqtt_start_ctr1 = 0; // Clear 100ms counter
3039  bc94 725f00a6      	clr	_mqtt_start_ctr1
3040                     ; 687         mqtt_start_ctr2 = 0; // Clear 100ms counter
3042  bc98 725f00a5      	clr	_mqtt_start_ctr2
3043                     ; 688         mqtt_start_status = MQTT_START_CONNECTIONS_GOOD;
3045  bc9c 351000a7      	mov	_mqtt_start_status,#16
3046                     ; 689         mqtt_start = MQTT_START_VERIFY_ARP;
3048  bca0 350200a8      	mov	_mqtt_start,#2
3051  bca4 81            	ret	
3052  bca5               L3371:
3053                     ; 692         mqtt_start_status |= MQTT_START_CONNECTIONS_ERROR;
3055  bca5 721000a7      	bset	_mqtt_start_status,#0
3057  bca9 81            	ret	
3058  bcaa               L7271:
3059                     ; 697   else if (mqtt_start == MQTT_START_VERIFY_ARP
3059                     ; 698         && mqtt_start_ctr2 > 10) {
3061  bcaa a102          	cp	a,#2
3062  bcac 263a          	jrne	L1471
3064  bcae c600a5        	ld	a,_mqtt_start_ctr2
3065  bcb1 a10b          	cp	a,#11
3066  bcb3 2533          	jrult	L1471
3067                     ; 699     mqtt_start_ctr2 = 0; // Clear 100ms counter
3069  bcb5 725f00a5      	clr	_mqtt_start_ctr2
3070                     ; 706     if (check_mqtt_server_arp_entry() == 1) {
3072  bcb9 cdf313        	call	_check_mqtt_server_arp_entry
3074  bcbc 5a            	decw	x
3075  bcbd 2611          	jrne	L3471
3076                     ; 708       mqtt_start_retry = 0;
3078  bcbf 725f00a3      	clr	_mqtt_start_retry
3079                     ; 709       mqtt_start_ctr1 = 0; // Clear 100ms counter
3081  bcc3 725f00a6      	clr	_mqtt_start_ctr1
3082                     ; 710       mqtt_start_status |= MQTT_START_ARP_REQUEST_GOOD;
3084  bcc7 721a00a7      	bset	_mqtt_start_status,#5
3085                     ; 711       mqtt_start = MQTT_START_VERIFY_TCP;
3087  bccb 350300a8      	mov	_mqtt_start,#3
3090  bccf 81            	ret	
3091  bcd0               L3471:
3092                     ; 713     else if (mqtt_start_ctr1 > 150) {
3094  bcd0 c600a6        	ld	a,_mqtt_start_ctr1
3095  bcd3 a197          	cp	a,#151
3096  bcd5 25a8          	jrult	L7371
3097                     ; 716       mqtt_start_status |= MQTT_START_ARP_REQUEST_ERROR;
3099  bcd7 721200a7      	bset	_mqtt_start_status,#1
3100                     ; 717       mqtt_start = MQTT_START_TCP_CONNECT;
3102  bcdb 350100a8      	mov	_mqtt_start,#1
3103                     ; 719       mqtt_start_status = MQTT_START_NOT_STARTED;
3105  bcdf 725f00a7      	clr	_mqtt_start_status
3106                     ; 720       mqtt_start_retry++;
3108  bce3 725c00a3      	inc	_mqtt_start_retry
3110  bce7 81            	ret	
3111  bce8               L1471:
3112                     ; 724   else if (mqtt_start == MQTT_START_VERIFY_TCP
3112                     ; 725         && mqtt_start_ctr2 > 10) {
3114  bce8 c600a8        	ld	a,_mqtt_start
3115  bceb a103          	cp	a,#3
3116  bced 263e          	jrne	L3571
3118  bcef c600a5        	ld	a,_mqtt_start_ctr2
3119  bcf2 a10b          	cp	a,#11
3120  bcf4 2537          	jrult	L3571
3121                     ; 726     mqtt_start_ctr2 = 0; // Clear 100ms counter
3123  bcf6 725f00a5      	clr	_mqtt_start_ctr2
3124                     ; 734     if ((mqtt_conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
3126  bcfa ce00a1        	ldw	x,_mqtt_conn
3127  bcfd e619          	ld	a,(25,x)
3128  bcff a40f          	and	a,#15
3129  bd01 a103          	cp	a,#3
3130  bd03 260d          	jrne	L5571
3131                     ; 735       mqtt_start_retry = 0;
3133  bd05 725f00a3      	clr	_mqtt_start_retry
3134                     ; 736       mqtt_start_status |= MQTT_START_TCP_CONNECT_GOOD;
3136  bd09 721c00a7      	bset	_mqtt_start_status,#6
3137                     ; 737       mqtt_start = MQTT_START_QUEUE_CONNECT;
3139  bd0d 350400a8      	mov	_mqtt_start,#4
3142  bd11 81            	ret	
3143  bd12               L5571:
3144                     ; 739     else if (mqtt_start_ctr1 > 150) {
3146  bd12 c600a6        	ld	a,_mqtt_start_ctr1
3147  bd15 a197          	cp	a,#151
3148  bd17 2403ccbe98    	jrult	L7371
3149                     ; 742       mqtt_start_status |= MQTT_START_TCP_CONNECT_ERROR;
3151  bd1c 721400a7      	bset	_mqtt_start_status,#2
3152                     ; 743       mqtt_start = MQTT_START_TCP_CONNECT;
3154  bd20 350100a8      	mov	_mqtt_start,#1
3155                     ; 745       mqtt_start_status = MQTT_START_NOT_STARTED; 
3157  bd24 725f00a7      	clr	_mqtt_start_status
3158                     ; 746       mqtt_start_retry++;
3160  bd28 725c00a3      	inc	_mqtt_start_retry
3162  bd2c 81            	ret	
3163  bd2d               L3571:
3164                     ; 750   else if (mqtt_start == MQTT_START_QUEUE_CONNECT) {
3166  bd2d c600a8        	ld	a,_mqtt_start
3167  bd30 a104          	cp	a,#4
3168  bd32 2703ccbdba    	jrne	L5671
3169                     ; 761     strcpy(client_id_text, devicetype);
3171  bd37 ae00a9        	ldw	x,#_client_id_text
3172  bd3a 90ae9ccb      	ldw	y,#L5261_devicetype
3173  bd3e               L411:
3174  bd3e 90f6          	ld	a,(y)
3175  bd40 905c          	incw	y
3176  bd42 f7            	ld	(x),a
3177  bd43 5c            	incw	x
3178  bd44 4d            	tnz	a
3179  bd45 26f7          	jrne	L411
3180                     ; 763     client_id_text[strlen(client_id_text) - 1] = '\0';
3182  bd47 ae00a9        	ldw	x,#_client_id_text
3183  bd4a cdf456        	call	_strlen
3185  bd4d 5a            	decw	x
3186  bd4e 724f00a9      	clr	(_client_id_text,x)
3187                     ; 765     strcat(client_id_text, mac_string);
3189  bd52 ae010c        	ldw	x,#_mac_string
3190  bd55 89            	pushw	x
3191  bd56 ae00a9        	ldw	x,#_client_id_text
3192  bd59 cdf442        	call	_strcat
3194  bd5c 85            	popw	x
3195                     ; 766     client_id = client_id_text;
3197  bd5d ae00a9        	ldw	x,#_client_id_text
3198  bd60 cf00c3        	ldw	_client_id,x
3199                     ; 769     connect_flags = MQTT_CONNECT_CLEAN_SESSION;
3201  bd63 350200fa      	mov	_connect_flags,#2
3202                     ; 772     topic_base[topic_base_len] = '\0';
3204  bd67 5f            	clrw	x
3205  bd68 c60073        	ld	a,_topic_base_len
3206  bd6b 97            	ld	xl,a
3207  bd6c 724f0074      	clr	(_topic_base,x)
3208                     ; 773     strcat(topic_base, "/status");
3210  bd70 ae9d24        	ldw	x,#L7671
3211  bd73 89            	pushw	x
3212  bd74 ae0074        	ldw	x,#_topic_base
3213  bd77 cdf442        	call	_strcat
3215  bd7a 85            	popw	x
3216                     ; 776     mqtt_connect(&mqttclient,
3216                     ; 777                  client_id,              // Based on MAC address
3216                     ; 778                  topic_base,             // Will topic
3216                     ; 779                  "offline",              // Will message 
3216                     ; 780                  7,                      // Will message size
3216                     ; 781                  stored_mqtt_username,   // Username
3216                     ; 782                  stored_mqtt_password,   // Password
3216                     ; 783                  connect_flags,          // Connect flags
3216                     ; 784                  mqtt_keep_alive);       // Ping interval
3218  bd7b ce00f1        	ldw	x,_mqtt_keep_alive
3219  bd7e 89            	pushw	x
3220  bd7f 3b00fa        	push	_connect_flags
3221  bd82 ae4040        	ldw	x,#_stored_mqtt_password
3222  bd85 89            	pushw	x
3223  bd86 ae4035        	ldw	x,#_stored_mqtt_username
3224  bd89 89            	pushw	x
3225  bd8a ae0007        	ldw	x,#7
3226  bd8d 89            	pushw	x
3227  bd8e ae9d1c        	ldw	x,#L1771
3228  bd91 89            	pushw	x
3229  bd92 ae0074        	ldw	x,#_topic_base
3230  bd95 89            	pushw	x
3231  bd96 ce00c3        	ldw	x,_client_id
3232  bd99 89            	pushw	x
3233  bd9a ae00c5        	ldw	x,#_mqttclient
3234  bd9d cdce37        	call	_mqtt_connect
3236  bda0 5b0f          	addw	sp,#15
3237                     ; 786     if (mqttclient.error == MQTT_OK) {
3239  bda2 ce00cf        	ldw	x,_mqttclient+10
3240  bda5 5a            	decw	x
3241  bda6 260d          	jrne	L3771
3242                     ; 787       mqtt_start_ctr1 = 0; // Clear 100ms counter
3244  bda8 725f00a6      	clr	_mqtt_start_ctr1
3245                     ; 788       mqtt_start_status |= MQTT_START_MQTT_CONNECT_GOOD;
3247  bdac 721e00a7      	bset	_mqtt_start_status,#7
3248                     ; 789       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE1;
3250  bdb0 350500a8      	mov	_mqtt_start,#5
3253  bdb4 81            	ret	
3254  bdb5               L3771:
3255                     ; 792       mqtt_start_status |= MQTT_START_MQTT_CONNECT_ERROR;
3257  bdb5 721600a7      	bset	_mqtt_start_status,#3
3259  bdb9 81            	ret	
3260  bdba               L5671:
3261                     ; 796   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE1) {
3263  bdba a105          	cp	a,#5
3264  bdbc 2635          	jrne	L1002
3265                     ; 806     if (mqtt_start_ctr1 > 20) {
3267  bdbe c600a6        	ld	a,_mqtt_start_ctr1
3268  bdc1 a115          	cp	a,#21
3269  bdc3 2403ccbe98    	jrult	L7371
3270                     ; 817       topic_base[topic_base_len] = '\0';
3272  bdc8 c60073        	ld	a,_topic_base_len
3273  bdcb 5f            	clrw	x
3274  bdcc 97            	ld	xl,a
3275  bdcd 724f0074      	clr	(_topic_base,x)
3276                     ; 818       strcat(topic_base, "/on");
3278  bdd1 ae9d18        	ldw	x,#L5002
3279  bdd4 89            	pushw	x
3280  bdd5 ae0074        	ldw	x,#_topic_base
3281  bdd8 cdf442        	call	_strcat
3283  bddb 85            	popw	x
3284                     ; 819       mqtt_subscribe(&mqttclient, topic_base, 0);
3286  bddc 5f            	clrw	x
3287  bddd 89            	pushw	x
3288  bdde ae0074        	ldw	x,#_topic_base
3289  bde1 89            	pushw	x
3290  bde2 ae00c5        	ldw	x,#_mqttclient
3291  bde5 cdd146        	call	_mqtt_subscribe
3293  bde8 5b04          	addw	sp,#4
3294                     ; 820       mqtt_start_ctr1 = 0; // Clear 100ms counter
3296  bdea 725f00a6      	clr	_mqtt_start_ctr1
3297                     ; 821       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE2;
3299  bdee 350600a8      	mov	_mqtt_start,#6
3301  bdf2 81            	ret	
3302  bdf3               L1002:
3303                     ; 825   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE2) {
3305  bdf3 a106          	cp	a,#6
3306  bdf5 2632          	jrne	L1102
3307                     ; 826     if (mqtt_start_ctr1 > 10) {
3309  bdf7 c600a6        	ld	a,_mqtt_start_ctr1
3310  bdfa a10b          	cp	a,#11
3311  bdfc 25c7          	jrult	L7371
3312                     ; 829       topic_base[topic_base_len] = '\0';
3314  bdfe c60073        	ld	a,_topic_base_len
3315  be01 5f            	clrw	x
3316  be02 97            	ld	xl,a
3317  be03 724f0074      	clr	(_topic_base,x)
3318                     ; 830       strcat(topic_base, "/off");
3320  be07 ae9d13        	ldw	x,#L5102
3321  be0a 89            	pushw	x
3322  be0b ae0074        	ldw	x,#_topic_base
3323  be0e cdf442        	call	_strcat
3325  be11 85            	popw	x
3326                     ; 831       mqtt_subscribe(&mqttclient, topic_base, 0);
3328  be12 5f            	clrw	x
3329  be13 89            	pushw	x
3330  be14 ae0074        	ldw	x,#_topic_base
3331  be17 89            	pushw	x
3332  be18 ae00c5        	ldw	x,#_mqttclient
3333  be1b cdd146        	call	_mqtt_subscribe
3335  be1e 5b04          	addw	sp,#4
3336                     ; 832       mqtt_start_ctr1 = 0; // Clear 100ms counter
3338  be20 725f00a6      	clr	_mqtt_start_ctr1
3339                     ; 833       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE3;
3341  be24 350700a8      	mov	_mqtt_start,#7
3343  be28 81            	ret	
3344  be29               L1102:
3345                     ; 837   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE3) {
3347  be29 a107          	cp	a,#7
3348  be2b 2632          	jrne	L1202
3349                     ; 838     if (mqtt_start_ctr1 > 10) {
3351  be2d c600a6        	ld	a,_mqtt_start_ctr1
3352  be30 a10b          	cp	a,#11
3353  be32 2564          	jrult	L7371
3354                     ; 841       topic_base[topic_base_len] = '\0';
3356  be34 c60073        	ld	a,_topic_base_len
3357  be37 5f            	clrw	x
3358  be38 97            	ld	xl,a
3359  be39 724f0074      	clr	(_topic_base,x)
3360                     ; 842       strcat(topic_base, "/state-req");
3362  be3d ae9d08        	ldw	x,#L5202
3363  be40 89            	pushw	x
3364  be41 ae0074        	ldw	x,#_topic_base
3365  be44 cdf442        	call	_strcat
3367  be47 85            	popw	x
3368                     ; 843       mqtt_subscribe(&mqttclient, topic_base, 0);
3370  be48 5f            	clrw	x
3371  be49 89            	pushw	x
3372  be4a ae0074        	ldw	x,#_topic_base
3373  be4d 89            	pushw	x
3374  be4e ae00c5        	ldw	x,#_mqttclient
3375  be51 cdd146        	call	_mqtt_subscribe
3377  be54 5b04          	addw	sp,#4
3378                     ; 844       mqtt_start_ctr1 = 0; // Clear 100ms counter
3380  be56 725f00a6      	clr	_mqtt_start_ctr1
3381                     ; 845       mqtt_start = MQTT_START_QUEUE_PUBLISH;
3383  be5a 350900a8      	mov	_mqtt_start,#9
3385  be5e 81            	ret	
3386  be5f               L1202:
3387                     ; 849   else if (mqtt_start == MQTT_START_QUEUE_PUBLISH) {
3389  be5f a109          	cp	a,#9
3390  be61 2635          	jrne	L7371
3391                     ; 850     if (mqtt_start_ctr1 > 10) {
3393  be63 c600a6        	ld	a,_mqtt_start_ctr1
3394  be66 a10b          	cp	a,#11
3395  be68 252e          	jrult	L7371
3396                     ; 853       topic_base[topic_base_len] = '\0';
3398  be6a c60073        	ld	a,_topic_base_len
3399  be6d 5f            	clrw	x
3400  be6e 97            	ld	xl,a
3401  be6f 724f0074      	clr	(_topic_base,x)
3402                     ; 854       strcat(topic_base, "/status");
3404  be73 ae9d24        	ldw	x,#L7671
3405  be76 89            	pushw	x
3406  be77 ae0074        	ldw	x,#_topic_base
3407  be7a cdf442        	call	_strcat
3409  be7d 85            	popw	x
3410                     ; 855       mqtt_publish(&mqttclient,
3410                     ; 856                    topic_base,
3410                     ; 857 		   "online",
3410                     ; 858 		   6,
3410                     ; 859 		   MQTT_PUBLISH_QOS_0 | MQTT_PUBLISH_RETAIN);
3412  be7e 4b01          	push	#1
3413  be80 ae0006        	ldw	x,#6
3414  be83 89            	pushw	x
3415  be84 ae9d01        	ldw	x,#L5302
3416  be87 89            	pushw	x
3417  be88 ae0074        	ldw	x,#_topic_base
3418  be8b 89            	pushw	x
3419  be8c ae00c5        	ldw	x,#_mqttclient
3420  be8f cdcee1        	call	_mqtt_publish
3422  be92 5b07          	addw	sp,#7
3423                     ; 861       mqtt_start = MQTT_START_COMPLETE;
3425  be94 351400a8      	mov	_mqtt_start,#20
3426  be98               L7371:
3427                     ; 864 }
3430  be98 81            	ret	
3466                     ; 867 void mqtt_sanity_check(void)
3466                     ; 868 {
3467                     .text:	section	.text,new
3468  be99               _mqtt_sanity_check:
3472                     ; 880   if (mqtt_restart_step == MQTT_RESTART_IDLE) {
3474  be99 c600a0        	ld	a,_mqtt_restart_step
3475  be9c 2634          	jrne	L7402
3476                     ; 887     if (mqttclient.number_of_timeouts > 1) {
3478  be9e ce00d3        	ldw	x,_mqttclient+14
3479  bea1 a30002        	cpw	x,#2
3480  bea4 2f08          	jrslt	L1502
3481                     ; 889       mqttclient.number_of_timeouts = 0;
3483  bea6 5f            	clrw	x
3484  bea7 cf00d3        	ldw	_mqttclient+14,x
3485                     ; 890       mqtt_restart_step = MQTT_RESTART_BEGIN;
3487  beaa 350100a0      	mov	_mqtt_restart_step,#1
3488  beae               L1502:
3489                     ; 896     if (mqtt_start == MQTT_START_COMPLETE
3489                     ; 897      && mqtt_conn->tcpstateflags == UIP_CLOSED) {
3491  beae c600a8        	ld	a,_mqtt_start
3492  beb1 a114          	cp	a,#20
3493  beb3 260b          	jrne	L3502
3495  beb5 ce00a1        	ldw	x,_mqtt_conn
3496  beb8 6d19          	tnz	(25,x)
3497  beba 2604          	jrne	L3502
3498                     ; 898       mqtt_restart_step = MQTT_RESTART_BEGIN;
3500  bebc 350100a0      	mov	_mqtt_restart_step,#1
3501  bec0               L3502:
3502                     ; 904     if (mqtt_start == MQTT_START_COMPLETE
3502                     ; 905      && mqttclient.error != MQTT_OK) {
3504  bec0 a114          	cp	a,#20
3505  bec2 2703ccbf4f    	jrne	L7502
3507  bec7 ce00cf        	ldw	x,_mqttclient+10
3508  beca 5a            	decw	x
3509  becb 27f7          	jreq	L7502
3510                     ; 906       mqtt_restart_step = MQTT_RESTART_BEGIN;
3512  becd 350100a0      	mov	_mqtt_restart_step,#1
3514  bed1 81            	ret	
3515  bed2               L7402:
3516                     ; 910   else if (mqtt_restart_step == MQTT_RESTART_BEGIN) {
3518  bed2 a101          	cp	a,#1
3519  bed4 2609          	jrne	L1602
3520                     ; 918     mqtt_restart_step = MQTT_RESTART_DISCONNECT_START;
3522  bed6 350200a0      	mov	_mqtt_restart_step,#2
3523                     ; 921     mqtt_start_status = MQTT_START_NOT_STARTED;
3525  beda 725f00a7      	clr	_mqtt_start_status
3528  bede 81            	ret	
3529  bedf               L1602:
3530                     ; 924   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_START) {
3532  bedf a102          	cp	a,#2
3533  bee1 260f          	jrne	L5602
3534                     ; 925     mqtt_restart_step = MQTT_RESTART_DISCONNECT_WAIT;
3536  bee3 350300a0      	mov	_mqtt_restart_step,#3
3537                     ; 927     mqtt_disconnect(&mqttclient);
3539  bee7 ae00c5        	ldw	x,#_mqttclient
3540  beea cdd232        	call	_mqtt_disconnect
3542                     ; 928     mqtt_sanity_ctr = 0; // Clear 100ms counter
3544  beed 725f00a4      	clr	_mqtt_sanity_ctr
3547  bef1 81            	ret	
3548  bef2               L5602:
3549                     ; 931   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_WAIT) {
3551  bef2 a103          	cp	a,#3
3552  bef4 260c          	jrne	L1702
3553                     ; 932     if (mqtt_sanity_ctr > 10) {
3555  bef6 c600a4        	ld	a,_mqtt_sanity_ctr
3556  bef9 a10b          	cp	a,#11
3557  befb 2552          	jrult	L7502
3558                     ; 935       mqtt_restart_step = MQTT_RESTART_TCPCLOSE;
3560  befd 350400a0      	mov	_mqtt_restart_step,#4
3562  bf01 81            	ret	
3563  bf02               L1702:
3564                     ; 939   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE) {
3566  bf02 a104          	cp	a,#4
3567  bf04 260d          	jrne	L7702
3568                     ; 955     mqtt_close_tcp = 1;
3570  bf06 35010107      	mov	_mqtt_close_tcp,#1
3571                     ; 957     mqtt_sanity_ctr = 0; // Clear 100ms counter
3573  bf0a 725f00a4      	clr	_mqtt_sanity_ctr
3574                     ; 958     mqtt_restart_step = MQTT_RESTART_TCPCLOSE_WAIT;
3576  bf0e 350500a0      	mov	_mqtt_restart_step,#5
3579  bf12 81            	ret	
3580  bf13               L7702:
3581                     ; 961   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE_WAIT) {
3583  bf13 a105          	cp	a,#5
3584  bf15 2610          	jrne	L3012
3585                     ; 966     if (mqtt_sanity_ctr > 20) {
3587  bf17 c600a4        	ld	a,_mqtt_sanity_ctr
3588  bf1a a115          	cp	a,#21
3589  bf1c 2531          	jrult	L7502
3590                     ; 967       mqtt_close_tcp = 0;
3592  bf1e 725f0107      	clr	_mqtt_close_tcp
3593                     ; 968       mqtt_restart_step = MQTT_RESTART_SIGNAL_STARTUP;
3595  bf22 350600a0      	mov	_mqtt_restart_step,#6
3597  bf26 81            	ret	
3598  bf27               L3012:
3599                     ; 972   else if (mqtt_restart_step == MQTT_RESTART_SIGNAL_STARTUP) {
3601  bf27 a106          	cp	a,#6
3602  bf29 2624          	jrne	L7502
3603                     ; 974     mqtt_init(&mqttclient,
3603                     ; 975               mqtt_sendbuf,
3603                     ; 976 	      sizeof(mqtt_sendbuf),
3603                     ; 977 	      &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
3603                     ; 978 	      UIP_APPDATA_SIZE,
3603                     ; 979 	      publish_callback);
3605  bf2b aebf50        	ldw	x,#_publish_callback
3606  bf2e 89            	pushw	x
3607  bf2f ae01be        	ldw	x,#446
3608  bf32 89            	pushw	x
3609  bf33 ae03ad        	ldw	x,#_uip_buf+54
3610  bf36 89            	pushw	x
3611  bf37 ae00c8        	ldw	x,#200
3612  bf3a 89            	pushw	x
3613  bf3b ae016f        	ldw	x,#_mqtt_sendbuf
3614  bf3e 89            	pushw	x
3615  bf3f ae00c5        	ldw	x,#_mqttclient
3616  bf42 cdcddf        	call	_mqtt_init
3618  bf45 5b0a          	addw	sp,#10
3619                     ; 982     mqtt_restart_step = MQTT_RESTART_IDLE;
3621  bf47 725f00a0      	clr	_mqtt_restart_step
3622                     ; 983     mqtt_start = MQTT_START_TCP_CONNECT;
3624  bf4b 350100a8      	mov	_mqtt_start,#1
3625  bf4f               L7502:
3626                     ; 985 }
3629  bf4f 81            	ret	
3702                     ; 1063 void publish_callback(void** unused, struct mqtt_response_publish *published)
3702                     ; 1064 {
3703                     .text:	section	.text,new
3704  bf50               _publish_callback:
3706  bf50 5204          	subw	sp,#4
3707       00000004      OFST:	set	4
3710                     ; 1070   pin_value = 0;
3712  bf52 0f01          	clr	(OFST-3,sp)
3714                     ; 1071   ParseNum = 0;
3716                     ; 1099   pBuffer = uip_appdata;
3718  bf54 ce0375        	ldw	x,_uip_appdata
3720                     ; 1101   pBuffer = pBuffer + 1;
3722  bf57 1c0012        	addw	x,#18
3724                     ; 1103   pBuffer = pBuffer + 1;
3727                     ; 1105   pBuffer = pBuffer + 2;
3730                     ; 1107   pBuffer = pBuffer + 14;
3732  bf5a 1f03          	ldw	(OFST-1,sp),x
3734                     ; 1109   pBuffer = pBuffer + strlen(stored_devicename) + 1;
3736  bf5c ae4000        	ldw	x,#_stored_devicename
3737  bf5f cdf456        	call	_strlen
3739  bf62 72fb03        	addw	x,(OFST-1,sp)
3740  bf65 5c            	incw	x
3741  bf66 1f03          	ldw	(OFST-1,sp),x
3743                     ; 1112   if (*pBuffer == 'o') {
3745  bf68 f6            	ld	a,(x)
3746  bf69 a16f          	cp	a,#111
3747  bf6b 267a          	jrne	L3412
3748                     ; 1113     pBuffer++;
3750  bf6d 5c            	incw	x
3751  bf6e 1f03          	ldw	(OFST-1,sp),x
3753                     ; 1114     if (*pBuffer == 'n') {
3755  bf70 f6            	ld	a,(x)
3756  bf71 a16e          	cp	a,#110
3757  bf73 2609          	jrne	L5412
3758                     ; 1115       pBuffer++;
3760  bf75 5c            	incw	x
3761  bf76 1f03          	ldw	(OFST-1,sp),x
3763                     ; 1116       pin_value = 1;
3765  bf78 a601          	ld	a,#1
3766  bf7a 6b01          	ld	(OFST-3,sp),a
3769  bf7c 200b          	jra	L7412
3770  bf7e               L5412:
3771                     ; 1118     else if (*pBuffer == 'f') {
3773  bf7e a166          	cp	a,#102
3774  bf80 2607          	jrne	L7412
3775                     ; 1119       pBuffer = pBuffer + 2;
3777  bf82 1c0002        	addw	x,#2
3778  bf85 1f03          	ldw	(OFST-1,sp),x
3780                     ; 1120       pin_value = 0;
3782  bf87 0f01          	clr	(OFST-3,sp)
3784  bf89               L7412:
3785                     ; 1124     if (*pBuffer == 'a') {
3787  bf89 f6            	ld	a,(x)
3788  bf8a a161          	cp	a,#97
3789  bf8c 2625          	jrne	L3512
3790                     ; 1125       pBuffer++;
3792  bf8e 5c            	incw	x
3793  bf8f 1f03          	ldw	(OFST-1,sp),x
3795                     ; 1126       if (*pBuffer == 'l') {
3797  bf91 f6            	ld	a,(x)
3798  bf92 a16c          	cp	a,#108
3799  bf94 264b          	jrne	L7612
3800                     ; 1127         pBuffer++;
3802  bf96 5c            	incw	x
3803  bf97 1f03          	ldw	(OFST-1,sp),x
3805                     ; 1128         if (*pBuffer == 'l') {
3807  bf99 f6            	ld	a,(x)
3808  bf9a a16c          	cp	a,#108
3809  bf9c 2643          	jrne	L7612
3810                     ; 1130 	  for (i=0; i<8; i++) GpioSetPin(i, (uint8_t)pin_value);
3812  bf9e 0f02          	clr	(OFST-2,sp)
3814  bfa0               L1612:
3817  bfa0 7b01          	ld	a,(OFST-3,sp)
3818  bfa2 97            	ld	xl,a
3819  bfa3 7b02          	ld	a,(OFST-2,sp)
3820  bfa5 95            	ld	xh,a
3821  bfa6 cdba0f        	call	_GpioSetPin
3825  bfa9 0c02          	inc	(OFST-2,sp)
3829  bfab 7b02          	ld	a,(OFST-2,sp)
3830  bfad a108          	cp	a,#8
3831  bfaf 25ef          	jrult	L1612
3832  bfb1 202e          	jra	L7612
3833  bfb3               L3512:
3834                     ; 1136     else if (*pBuffer == '0' || *pBuffer == '1') {
3836  bfb3 a130          	cp	a,#48
3837  bfb5 2704          	jreq	L3712
3839  bfb7 a131          	cp	a,#49
3840  bfb9 2626          	jrne	L7612
3841  bfbb               L3712:
3842                     ; 1138       ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3844  bfbb 97            	ld	xl,a
3845  bfbc a60a          	ld	a,#10
3846  bfbe 42            	mul	x,a
3847  bfbf 9f            	ld	a,xl
3848  bfc0 a0e0          	sub	a,#224
3849  bfc2 6b02          	ld	(OFST-2,sp),a
3851                     ; 1139       pBuffer++;
3853  bfc4 1e03          	ldw	x,(OFST-1,sp)
3854  bfc6 5c            	incw	x
3855  bfc7 1f03          	ldw	(OFST-1,sp),x
3857                     ; 1141       ParseNum += (uint8_t)(*pBuffer - '0');
3859  bfc9 f6            	ld	a,(x)
3860  bfca a030          	sub	a,#48
3861  bfcc 1b02          	add	a,(OFST-2,sp)
3862  bfce 6b02          	ld	(OFST-2,sp),a
3864                     ; 1143       if (ParseNum > 0 && ParseNum < 9) {
3866  bfd0 270f          	jreq	L7612
3868  bfd2 a109          	cp	a,#9
3869  bfd4 240b          	jruge	L7612
3870                     ; 1145         ParseNum--;
3872  bfd6 0a02          	dec	(OFST-2,sp)
3874                     ; 1147         GpioSetPin(ParseNum, (uint8_t)pin_value);
3876  bfd8 7b01          	ld	a,(OFST-3,sp)
3877  bfda 97            	ld	xl,a
3878  bfdb 7b02          	ld	a,(OFST-2,sp)
3879  bfdd 95            	ld	xh,a
3880  bfde cdba0f        	call	_GpioSetPin
3882  bfe1               L7612:
3883                     ; 1153     mqtt_parse_complete = 1;
3885  bfe1 35010105      	mov	_mqtt_parse_complete,#1
3887  bfe5 2013          	jra	L7712
3888  bfe7               L3412:
3889                     ; 1157   else if (*pBuffer == 's') {
3891  bfe7 a173          	cp	a,#115
3892  bfe9 260f          	jrne	L7712
3893                     ; 1158     pBuffer += 8;
3895  bfeb 1c0008        	addw	x,#8
3897                     ; 1159     if (*pBuffer == 'q') {
3899  bfee f6            	ld	a,(x)
3900  bfef a171          	cp	a,#113
3901  bff1 2607          	jrne	L7712
3902                     ; 1160       *pBuffer = '0'; // Destroy 'q' in buffer so subsequent "state"
3904  bff3 a630          	ld	a,#48
3905  bff5 f7            	ld	(x),a
3906                     ; 1171       state_request = STATE_REQUEST_RCVD;
3908  bff6 35010164      	mov	_state_request,#1
3909  bffa               L7712:
3910                     ; 1174 }
3913  bffa 5b04          	addw	sp,#4
3914  bffc 81            	ret	
3953                     ; 1177 void publish_outbound(void)
3953                     ; 1178 {
3954                     .text:	section	.text,new
3955  bffd               _publish_outbound:
3957  bffd 88            	push	a
3958       00000001      OFST:	set	1
3961                     ; 1210   if (state_request == STATE_REQUEST_IDLE) {
3963  bffe c60164        	ld	a,_state_request
3964  c001 2703ccc0f6    	jrne	L1222
3965                     ; 1213     xor_tmp = (uint8_t)(IO_16to9 ^ IO_16to9_sent);
3967  c006 c6016e        	ld	a,_IO_16to9
3968  c009 c80168        	xor	a,_IO_16to9_sent
3969  c00c 6b01          	ld	(OFST+0,sp),a
3971                     ; 1215     if      (xor_tmp & 0x80) publish_pinstate('I', '8', IO_16to9, 0x80); // Input 8
3973  c00e 2a0a          	jrpl	L3222
3976  c010 4b80          	push	#128
3977  c012 3b016e        	push	_IO_16to9
3978  c015 ae4938        	ldw	x,#18744
3981  c018 2060          	jp	LC002
3982  c01a               L3222:
3983                     ; 1216     else if (xor_tmp & 0x40) publish_pinstate('I', '7', IO_16to9, 0x40); // Input 7
3985  c01a a540          	bcp	a,#64
3986  c01c 270a          	jreq	L7222
3989  c01e 4b40          	push	#64
3990  c020 3b016e        	push	_IO_16to9
3991  c023 ae4937        	ldw	x,#18743
3994  c026 2052          	jp	LC002
3995  c028               L7222:
3996                     ; 1217     else if (xor_tmp & 0x20) publish_pinstate('I', '6', IO_16to9, 0x20); // Input 6
3998  c028 a520          	bcp	a,#32
3999  c02a 270a          	jreq	L3322
4002  c02c 4b20          	push	#32
4003  c02e 3b016e        	push	_IO_16to9
4004  c031 ae4936        	ldw	x,#18742
4007  c034 2044          	jp	LC002
4008  c036               L3322:
4009                     ; 1218     else if (xor_tmp & 0x10) publish_pinstate('I', '5', IO_16to9, 0x10); // Input 5
4011  c036 a510          	bcp	a,#16
4012  c038 270a          	jreq	L7322
4015  c03a 4b10          	push	#16
4016  c03c 3b016e        	push	_IO_16to9
4017  c03f ae4935        	ldw	x,#18741
4020  c042 2036          	jp	LC002
4021  c044               L7322:
4022                     ; 1219     else if (xor_tmp & 0x08) publish_pinstate('I', '4', IO_16to9, 0x08); // Input 4
4024  c044 a508          	bcp	a,#8
4025  c046 270a          	jreq	L3422
4028  c048 4b08          	push	#8
4029  c04a 3b016e        	push	_IO_16to9
4030  c04d ae4934        	ldw	x,#18740
4033  c050 2028          	jp	LC002
4034  c052               L3422:
4035                     ; 1220     else if (xor_tmp & 0x04) publish_pinstate('I', '3', IO_16to9, 0x04); // Input 3
4037  c052 a504          	bcp	a,#4
4038  c054 270a          	jreq	L7422
4041  c056 4b04          	push	#4
4042  c058 3b016e        	push	_IO_16to9
4043  c05b ae4933        	ldw	x,#18739
4046  c05e 201a          	jp	LC002
4047  c060               L7422:
4048                     ; 1221     else if (xor_tmp & 0x02) publish_pinstate('I', '2', IO_16to9, 0x02); // Input 2
4050  c060 a502          	bcp	a,#2
4051  c062 270a          	jreq	L3522
4054  c064 4b02          	push	#2
4055  c066 3b016e        	push	_IO_16to9
4056  c069 ae4932        	ldw	x,#18738
4059  c06c 200c          	jp	LC002
4060  c06e               L3522:
4061                     ; 1222     else if (xor_tmp & 0x01) publish_pinstate('I', '1', IO_16to9, 0x01); // Input 1
4063  c06e a501          	bcp	a,#1
4064  c070 270c          	jreq	L5222
4067  c072 4b01          	push	#1
4068  c074 3b016e        	push	_IO_16to9
4069  c077 ae4931        	ldw	x,#18737
4071  c07a               LC002:
4072  c07a cdc104        	call	_publish_pinstate
4073  c07d 85            	popw	x
4074  c07e               L5222:
4075                     ; 1226     xor_tmp = (uint8_t)(IO_8to1 ^ IO_8to1_sent);
4077  c07e c6016d        	ld	a,_IO_8to1
4078  c081 c80167        	xor	a,_IO_8to1_sent
4079  c084 6b01          	ld	(OFST+0,sp),a
4081                     ; 1228     if      (xor_tmp & 0x80) publish_pinstate('O', '8', IO_8to1, 0x80); // Output 8
4083  c086 2a0a          	jrpl	L1622
4086  c088 4b80          	push	#128
4087  c08a 3b016d        	push	_IO_8to1
4088  c08d ae4f38        	ldw	x,#20280
4091  c090 2060          	jp	LC003
4092  c092               L1622:
4093                     ; 1229     else if (xor_tmp & 0x40) publish_pinstate('O', '7', IO_8to1, 0x40); // Output 7
4095  c092 a540          	bcp	a,#64
4096  c094 270a          	jreq	L5622
4099  c096 4b40          	push	#64
4100  c098 3b016d        	push	_IO_8to1
4101  c09b ae4f37        	ldw	x,#20279
4104  c09e 2052          	jp	LC003
4105  c0a0               L5622:
4106                     ; 1230     else if (xor_tmp & 0x20) publish_pinstate('O', '6', IO_8to1, 0x20); // Output 6
4108  c0a0 a520          	bcp	a,#32
4109  c0a2 270a          	jreq	L1722
4112  c0a4 4b20          	push	#32
4113  c0a6 3b016d        	push	_IO_8to1
4114  c0a9 ae4f36        	ldw	x,#20278
4117  c0ac 2044          	jp	LC003
4118  c0ae               L1722:
4119                     ; 1231     else if (xor_tmp & 0x10) publish_pinstate('O', '5', IO_8to1, 0x10); // Output 5
4121  c0ae a510          	bcp	a,#16
4122  c0b0 270a          	jreq	L5722
4125  c0b2 4b10          	push	#16
4126  c0b4 3b016d        	push	_IO_8to1
4127  c0b7 ae4f35        	ldw	x,#20277
4130  c0ba 2036          	jp	LC003
4131  c0bc               L5722:
4132                     ; 1232     else if (xor_tmp & 0x08) publish_pinstate('O', '4', IO_8to1, 0x08); // Output 4
4134  c0bc a508          	bcp	a,#8
4135  c0be 270a          	jreq	L1032
4138  c0c0 4b08          	push	#8
4139  c0c2 3b016d        	push	_IO_8to1
4140  c0c5 ae4f34        	ldw	x,#20276
4143  c0c8 2028          	jp	LC003
4144  c0ca               L1032:
4145                     ; 1233     else if (xor_tmp & 0x04) publish_pinstate('O', '3', IO_8to1, 0x04); // Output 3
4147  c0ca a504          	bcp	a,#4
4148  c0cc 270a          	jreq	L5032
4151  c0ce 4b04          	push	#4
4152  c0d0 3b016d        	push	_IO_8to1
4153  c0d3 ae4f33        	ldw	x,#20275
4156  c0d6 201a          	jp	LC003
4157  c0d8               L5032:
4158                     ; 1234     else if (xor_tmp & 0x02) publish_pinstate('O', '2', IO_8to1, 0x02); // Output 2
4160  c0d8 a502          	bcp	a,#2
4161  c0da 270a          	jreq	L1132
4164  c0dc 4b02          	push	#2
4165  c0de 3b016d        	push	_IO_8to1
4166  c0e1 ae4f32        	ldw	x,#20274
4169  c0e4 200c          	jp	LC003
4170  c0e6               L1132:
4171                     ; 1235     else if (xor_tmp & 0x01) publish_pinstate('O', '1', IO_8to1, 0x01); // Output 1
4173  c0e6 a501          	bcp	a,#1
4174  c0e8 270c          	jreq	L1222
4177  c0ea 4b01          	push	#1
4178  c0ec 3b016d        	push	_IO_8to1
4179  c0ef ae4f31        	ldw	x,#20273
4181  c0f2               LC003:
4182  c0f2 cdc104        	call	_publish_pinstate
4183  c0f5 85            	popw	x
4184  c0f6               L1222:
4185                     ; 1239   if (state_request == STATE_REQUEST_RCVD) {
4187  c0f6 c60164        	ld	a,_state_request
4188  c0f9 4a            	dec	a
4189  c0fa 2606          	jrne	L7132
4190                     ; 1241     state_request = STATE_REQUEST_IDLE;
4192  c0fc c70164        	ld	_state_request,a
4193                     ; 1242     publish_pinstate_all();
4195  c0ff cdc19c        	call	_publish_pinstate_all
4197  c102               L7132:
4198                     ; 1244 }
4201  c102 84            	pop	a
4202  c103 81            	ret	
4266                     ; 1247 void publish_pinstate(uint8_t direction, uint8_t pin, uint8_t value, uint8_t mask)
4266                     ; 1248 {
4267                     .text:	section	.text,new
4268  c104               _publish_pinstate:
4270  c104 89            	pushw	x
4271       00000000      OFST:	set	0
4274                     ; 1251   application_message[0] = '0';
4276  c105 353000f3      	mov	_application_message,#48
4277                     ; 1252   application_message[1] = (uint8_t)(pin);
4279  c109 9f            	ld	a,xl
4280  c10a c700f4        	ld	_application_message+1,a
4281                     ; 1253   application_message[2] = '\0';
4283  c10d 725f00f5      	clr	_application_message+2
4284                     ; 1255   topic_base[topic_base_len] = '\0';
4286  c111 5f            	clrw	x
4287  c112 c60073        	ld	a,_topic_base_len
4288  c115 97            	ld	xl,a
4289  c116 724f0074      	clr	(_topic_base,x)
4290                     ; 1258   if (direction == 'I') {
4292  c11a 7b01          	ld	a,(OFST+1,sp)
4293  c11c a149          	cp	a,#73
4294  c11e 2618          	jrne	L3432
4295                     ; 1260     if (invert_input == 0xff) value = (uint8_t)(~value);
4297  c120 c60165        	ld	a,_invert_input
4298  c123 4c            	inc	a
4299  c124 2602          	jrne	L5432
4302  c126 0305          	cpl	(OFST+5,sp)
4303  c128               L5432:
4304                     ; 1261     if (value & mask) strcat(topic_base, "/in_on");
4306  c128 7b05          	ld	a,(OFST+5,sp)
4307  c12a 1506          	bcp	a,(OFST+6,sp)
4308  c12c 2705          	jreq	L7432
4311  c12e ae9cfa        	ldw	x,#L1532
4314  c131 2013          	jra	L7532
4315  c133               L7432:
4316                     ; 1262     else strcat(topic_base, "/in_off");
4318  c133 ae9cf2        	ldw	x,#L5532
4320  c136 200e          	jra	L7532
4321  c138               L3432:
4322                     ; 1266     if (value & mask) strcat(topic_base, "/out_on");
4324  c138 7b05          	ld	a,(OFST+5,sp)
4325  c13a 1506          	bcp	a,(OFST+6,sp)
4326  c13c 2705          	jreq	L1632
4329  c13e ae9cea        	ldw	x,#L3632
4332  c141 2003          	jra	L7532
4333  c143               L1632:
4334                     ; 1267     else strcat(topic_base, "/out_off");
4336  c143 ae9ce1        	ldw	x,#L7632
4338  c146               L7532:
4339  c146 89            	pushw	x
4340  c147 ae0074        	ldw	x,#_topic_base
4341  c14a cdf442        	call	_strcat
4342  c14d 85            	popw	x
4343                     ; 1271   mqtt_publish(&mqttclient,
4343                     ; 1272                topic_base,
4343                     ; 1273 	       application_message,
4343                     ; 1274 	       2,
4343                     ; 1275 	       MQTT_PUBLISH_QOS_0);
4345  c14e 4b00          	push	#0
4346  c150 ae0002        	ldw	x,#2
4347  c153 89            	pushw	x
4348  c154 ae00f3        	ldw	x,#_application_message
4349  c157 89            	pushw	x
4350  c158 ae0074        	ldw	x,#_topic_base
4351  c15b 89            	pushw	x
4352  c15c ae00c5        	ldw	x,#_mqttclient
4353  c15f cdcee1        	call	_mqtt_publish
4355  c162 5b07          	addw	sp,#7
4356                     ; 1277   if (direction == 'I') {
4358  c164 7b01          	ld	a,(OFST+1,sp)
4359  c166 a149          	cp	a,#73
4360  c168 2619          	jrne	L1732
4361                     ; 1279     if (IO_16to9 & mask) IO_16to9_sent |= mask;
4363  c16a c6016e        	ld	a,_IO_16to9
4364  c16d 1506          	bcp	a,(OFST+6,sp)
4365  c16f 2707          	jreq	L3732
4368  c171 c60168        	ld	a,_IO_16to9_sent
4369  c174 1a06          	or	a,(OFST+6,sp)
4371  c176 2006          	jp	LC005
4372  c178               L3732:
4373                     ; 1280     else IO_16to9_sent &= (uint8_t)~mask;
4375  c178 7b06          	ld	a,(OFST+6,sp)
4376  c17a 43            	cpl	a
4377  c17b c40168        	and	a,_IO_16to9_sent
4378  c17e               LC005:
4379  c17e c70168        	ld	_IO_16to9_sent,a
4380  c181 2017          	jra	L7732
4381  c183               L1732:
4382                     ; 1284     if (IO_8to1 & mask) IO_8to1_sent |= mask;
4384  c183 c6016d        	ld	a,_IO_8to1
4385  c186 1506          	bcp	a,(OFST+6,sp)
4386  c188 2707          	jreq	L1042
4389  c18a c60167        	ld	a,_IO_8to1_sent
4390  c18d 1a06          	or	a,(OFST+6,sp)
4392  c18f 2006          	jp	LC004
4393  c191               L1042:
4394                     ; 1285     else IO_8to1_sent &= (uint8_t)~mask;
4396  c191 7b06          	ld	a,(OFST+6,sp)
4397  c193 43            	cpl	a
4398  c194 c40167        	and	a,_IO_8to1_sent
4399  c197               LC004:
4400  c197 c70167        	ld	_IO_8to1_sent,a
4401  c19a               L7732:
4402                     ; 1287 }
4405  c19a 85            	popw	x
4406  c19b 81            	ret	
4455                     ; 1290 void publish_pinstate_all(void)
4455                     ; 1291 {
4456                     .text:	section	.text,new
4457  c19c               _publish_pinstate_all:
4459  c19c 89            	pushw	x
4460       00000002      OFST:	set	2
4463                     ; 1297   j = IO_16to9;
4465  c19d c6016e        	ld	a,_IO_16to9
4466  c1a0 6b02          	ld	(OFST+0,sp),a
4468                     ; 1298   k = IO_8to1;
4470  c1a2 c6016d        	ld	a,_IO_8to1
4471  c1a5 6b01          	ld	(OFST-1,sp),a
4473                     ; 1301   if (invert_input == 0xff) j = (uint8_t)(~j);
4475  c1a7 c60165        	ld	a,_invert_input
4476  c1aa 4c            	inc	a
4477  c1ab 2602          	jrne	L3242
4480  c1ad 0302          	cpl	(OFST+0,sp)
4482  c1af               L3242:
4483                     ; 1303   application_message[0] = j;
4485  c1af 7b02          	ld	a,(OFST+0,sp)
4486  c1b1 c700f3        	ld	_application_message,a
4487                     ; 1304   application_message[1] = k;
4489  c1b4 7b01          	ld	a,(OFST-1,sp)
4490  c1b6 c700f4        	ld	_application_message+1,a
4491                     ; 1305   application_message[2] = '\0';
4493  c1b9 725f00f5      	clr	_application_message+2
4494                     ; 1307   topic_base[topic_base_len] = '\0';
4496  c1bd 5f            	clrw	x
4497  c1be c60073        	ld	a,_topic_base_len
4498  c1c1 97            	ld	xl,a
4499  c1c2 724f0074      	clr	(_topic_base,x)
4500                     ; 1308   strcat(topic_base, "/state");
4502  c1c6 ae9cda        	ldw	x,#L5242
4503  c1c9 89            	pushw	x
4504  c1ca ae0074        	ldw	x,#_topic_base
4505  c1cd cdf442        	call	_strcat
4507  c1d0 85            	popw	x
4508                     ; 1311   mqtt_publish(&mqttclient,
4508                     ; 1312                topic_base,
4508                     ; 1313 	       application_message,
4508                     ; 1314 	       2,
4508                     ; 1315 	       MQTT_PUBLISH_QOS_0);
4510  c1d1 4b00          	push	#0
4511  c1d3 ae0002        	ldw	x,#2
4512  c1d6 89            	pushw	x
4513  c1d7 ae00f3        	ldw	x,#_application_message
4514  c1da 89            	pushw	x
4515  c1db ae0074        	ldw	x,#_topic_base
4516  c1de 89            	pushw	x
4517  c1df ae00c5        	ldw	x,#_mqttclient
4518  c1e2 cdcee1        	call	_mqtt_publish
4520                     ; 1316 }
4523  c1e5 5b09          	addw	sp,#9
4524  c1e7 81            	ret	
4549                     ; 1321 void unlock_eeprom(void)
4549                     ; 1322 {
4550                     .text:	section	.text,new
4551  c1e8               _unlock_eeprom:
4555  c1e8 2008          	jra	L1442
4556  c1ea               L7342:
4557                     ; 1334     FLASH_DUKR = 0xAE; // MASS key 1
4559  c1ea 35ae5064      	mov	_FLASH_DUKR,#174
4560                     ; 1335     FLASH_DUKR = 0x56; // MASS key 2
4562  c1ee 35565064      	mov	_FLASH_DUKR,#86
4563  c1f2               L1442:
4564                     ; 1333   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
4566  c1f2 7207505ff3    	btjf	_FLASH_IAPSR,#3,L7342
4567                     ; 1363 }
4570  c1f7 81            	ret	
4655                     ; 1366 void check_eeprom_settings(void)
4655                     ; 1367 {
4656                     .text:	section	.text,new
4657  c1f8               _check_eeprom_settings:
4659  c1f8 88            	push	a
4660       00000001      OFST:	set	1
4663                     ; 1379   if ((magic4 == 0x55) && 
4663                     ; 1380       (magic3 == 0xee) && 
4663                     ; 1381       (magic2 == 0x0f) && 
4663                     ; 1382       (magic1 == 0xf0)) {
4665  c1f9 c6402e        	ld	a,_magic4
4666  c1fc a155          	cp	a,#85
4667  c1fe 2703ccc3a7    	jrne	L1652
4669  c203 c6402d        	ld	a,_magic3
4670  c206 a1ee          	cp	a,#238
4671  c208 26f6          	jrne	L1652
4673  c20a c6402c        	ld	a,_magic2
4674  c20d a10f          	cp	a,#15
4675  c20f 26ef          	jrne	L1652
4677  c211 c6402b        	ld	a,_magic1
4678  c214 a1f0          	cp	a,#240
4679  c216 26e8          	jrne	L1652
4680                     ; 1387     uip_ipaddr(IpAddr, stored_hostaddr[3], stored_hostaddr[2], stored_hostaddr[1], stored_hostaddr[0]);
4682  c218 c6402a        	ld	a,_stored_hostaddr+3
4683  c21b 97            	ld	xl,a
4684  c21c c64029        	ld	a,_stored_hostaddr+2
4685  c21f 02            	rlwa	x,a
4686  c220 cf00ff        	ldw	_IpAddr,x
4689  c223 c64028        	ld	a,_stored_hostaddr+1
4690  c226 97            	ld	xl,a
4691  c227 c64027        	ld	a,_stored_hostaddr
4692  c22a 02            	rlwa	x,a
4693  c22b cf0101        	ldw	_IpAddr+2,x
4694                     ; 1388     uip_sethostaddr(IpAddr);
4696  c22e ce00ff        	ldw	x,_IpAddr
4697  c231 cf02c4        	ldw	_uip_hostaddr,x
4700  c234 ce0101        	ldw	x,_IpAddr+2
4701  c237 cf02c6        	ldw	_uip_hostaddr+2,x
4702                     ; 1391     uip_ipaddr(IpAddr,
4704  c23a c64026        	ld	a,_stored_draddr+3
4705  c23d 97            	ld	xl,a
4706  c23e c64025        	ld	a,_stored_draddr+2
4707  c241 02            	rlwa	x,a
4708  c242 cf00ff        	ldw	_IpAddr,x
4711  c245 c64024        	ld	a,_stored_draddr+1
4712  c248 97            	ld	xl,a
4713  c249 c64023        	ld	a,_stored_draddr
4714  c24c 02            	rlwa	x,a
4715  c24d cf0101        	ldw	_IpAddr+2,x
4716                     ; 1396     uip_setdraddr(IpAddr);
4718  c250 ce00ff        	ldw	x,_IpAddr
4719  c253 cf02bc        	ldw	_uip_draddr,x
4722  c256 ce0101        	ldw	x,_IpAddr+2
4723  c259 cf02be        	ldw	_uip_draddr+2,x
4724                     ; 1399     uip_ipaddr(IpAddr,
4726  c25c c64022        	ld	a,_stored_netmask+3
4727  c25f 97            	ld	xl,a
4728  c260 c64021        	ld	a,_stored_netmask+2
4729  c263 02            	rlwa	x,a
4730  c264 cf00ff        	ldw	_IpAddr,x
4733  c267 c64020        	ld	a,_stored_netmask+1
4734  c26a 97            	ld	xl,a
4735  c26b c6401f        	ld	a,_stored_netmask
4736  c26e 02            	rlwa	x,a
4737  c26f cf0101        	ldw	_IpAddr+2,x
4738                     ; 1404     uip_setnetmask(IpAddr);
4740  c272 ce00ff        	ldw	x,_IpAddr
4741  c275 cf02c0        	ldw	_uip_netmask,x
4744  c278 ce0101        	ldw	x,_IpAddr+2
4745  c27b cf02c2        	ldw	_uip_netmask+2,x
4746                     ; 1408     uip_ipaddr(IpAddr,
4748  c27e c64034        	ld	a,_stored_mqttserveraddr+3
4749  c281 97            	ld	xl,a
4750  c282 c64033        	ld	a,_stored_mqttserveraddr+2
4751  c285 02            	rlwa	x,a
4752  c286 cf00ff        	ldw	_IpAddr,x
4755  c289 c64032        	ld	a,_stored_mqttserveraddr+1
4756  c28c 97            	ld	xl,a
4757  c28d c64031        	ld	a,_stored_mqttserveraddr
4758  c290 02            	rlwa	x,a
4759  c291 cf0101        	ldw	_IpAddr+2,x
4760                     ; 1413     uip_setmqttserveraddr(IpAddr);
4762  c294 ce00ff        	ldw	x,_IpAddr
4763  c297 cf02b8        	ldw	_uip_mqttserveraddr,x
4766  c29a ce0101        	ldw	x,_IpAddr+2
4767  c29d cf02ba        	ldw	_uip_mqttserveraddr+2,x
4768                     ; 1415     Port_Mqttd = stored_mqttport;
4770  c2a0 ce402f        	ldw	x,_stored_mqttport
4771  c2a3 cf00f6        	ldw	_Port_Mqttd,x
4772                     ; 1419     Port_Httpd = stored_port;
4774  c2a6 ce401d        	ldw	x,_stored_port
4775  c2a9 cf0103        	ldw	_Port_Httpd,x
4776                     ; 1424     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
4778  c2ac 55401c000a    	mov	_uip_ethaddr,_stored_uip_ethaddr_oct+5
4779                     ; 1425     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
4781  c2b1 55401b000b    	mov	_uip_ethaddr+1,_stored_uip_ethaddr_oct+4
4782                     ; 1426     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
4784  c2b6 55401a000c    	mov	_uip_ethaddr+2,_stored_uip_ethaddr_oct+3
4785                     ; 1427     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
4787  c2bb 554019000d    	mov	_uip_ethaddr+3,_stored_uip_ethaddr_oct+2
4788                     ; 1428     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
4790  c2c0 554018000e    	mov	_uip_ethaddr+4,_stored_uip_ethaddr_oct+1
4791                     ; 1429     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
4793  c2c5 554017000f    	mov	_uip_ethaddr+5,_stored_uip_ethaddr_oct
4794                     ; 1433     if (stored_config_settings[0] != '0' && stored_config_settings[0] != '1') {
4796  c2ca c6404c        	ld	a,_stored_config_settings
4797  c2cd a130          	cp	a,#48
4798  c2cf 270c          	jreq	L3252
4800  c2d1 a131          	cp	a,#49
4801  c2d3 2708          	jreq	L3252
4802                     ; 1434       stored_config_settings[0] = '0';
4804  c2d5 a630          	ld	a,#48
4805  c2d7 ae404c        	ldw	x,#_stored_config_settings
4806  c2da cdf486        	call	c_eewrc
4808  c2dd               L3252:
4809                     ; 1436     if (stored_config_settings[1] != '0' && stored_config_settings[1] != '1') {
4811  c2dd c6404d        	ld	a,_stored_config_settings+1
4812  c2e0 a130          	cp	a,#48
4813  c2e2 270c          	jreq	L5252
4815  c2e4 a131          	cp	a,#49
4816  c2e6 2708          	jreq	L5252
4817                     ; 1437       stored_config_settings[1] = '0';
4819  c2e8 a630          	ld	a,#48
4820  c2ea ae404d        	ldw	x,#_stored_config_settings+1
4821  c2ed cdf486        	call	c_eewrc
4823  c2f0               L5252:
4824                     ; 1439     if (stored_config_settings[2] != '0' && stored_config_settings[2] != '1' && stored_config_settings[2] != '2') {
4826  c2f0 c6404e        	ld	a,_stored_config_settings+2
4827  c2f3 a130          	cp	a,#48
4828  c2f5 2710          	jreq	L7252
4830  c2f7 a131          	cp	a,#49
4831  c2f9 270c          	jreq	L7252
4833  c2fb a132          	cp	a,#50
4834  c2fd 2708          	jreq	L7252
4835                     ; 1440       stored_config_settings[2] = '2';
4837  c2ff a632          	ld	a,#50
4838  c301 ae404e        	ldw	x,#_stored_config_settings+2
4839  c304 cdf486        	call	c_eewrc
4841  c307               L7252:
4842                     ; 1442     if (stored_config_settings[3] != '0' && stored_config_settings[3] != '1') {
4844  c307 c6404f        	ld	a,_stored_config_settings+3
4845  c30a a130          	cp	a,#48
4846  c30c 270c          	jreq	L1352
4848  c30e a131          	cp	a,#49
4849  c310 2708          	jreq	L1352
4850                     ; 1443       stored_config_settings[3] = '0';
4852  c312 a630          	ld	a,#48
4853  c314 ae404f        	ldw	x,#_stored_config_settings+3
4854  c317 cdf486        	call	c_eewrc
4856  c31a               L1352:
4857                     ; 1445     if (stored_config_settings[4] != '0') {
4859  c31a c64050        	ld	a,_stored_config_settings+4
4860  c31d a130          	cp	a,#48
4861  c31f 2708          	jreq	L3352
4862                     ; 1446       stored_config_settings[4] = '0';
4864  c321 a630          	ld	a,#48
4865  c323 ae4050        	ldw	x,#_stored_config_settings+4
4866  c326 cdf486        	call	c_eewrc
4868  c329               L3352:
4869                     ; 1448     if (stored_config_settings[5] != '0') {
4871  c329 c64051        	ld	a,_stored_config_settings+5
4872  c32c a130          	cp	a,#48
4873  c32e 2708          	jreq	L5352
4874                     ; 1449       stored_config_settings[5] = '0';
4876  c330 a630          	ld	a,#48
4877  c332 ae4051        	ldw	x,#_stored_config_settings+5
4878  c335 cdf486        	call	c_eewrc
4880  c338               L5352:
4881                     ; 1453     if (stored_config_settings[0] == '0') invert_output = 0x00;
4883  c338 c6404c        	ld	a,_stored_config_settings
4884  c33b a130          	cp	a,#48
4885  c33d 2606          	jrne	L7352
4888  c33f 725f0166      	clr	_invert_output
4890  c343 2004          	jra	L1452
4891  c345               L7352:
4892                     ; 1454     else invert_output = 0xff;
4894  c345 35ff0166      	mov	_invert_output,#255
4895  c349               L1452:
4896                     ; 1457     if (stored_config_settings[1] == '0') invert_input = 0x00;
4898  c349 c6404d        	ld	a,_stored_config_settings+1
4899  c34c a130          	cp	a,#48
4900  c34e 2606          	jrne	L3452
4903  c350 725f0165      	clr	_invert_input
4905  c354 2004          	jra	L5452
4906  c356               L3452:
4907                     ; 1458     else invert_input = 0xff;
4909  c356 35ff0165      	mov	_invert_input,#255
4910  c35a               L5452:
4911                     ; 1463     if (stored_config_settings[2] == '0') {
4913  c35a c6404e        	ld	a,_stored_config_settings+2
4914  c35d a130          	cp	a,#48
4915  c35f 260a          	jrne	L7452
4916                     ; 1465       IO_16to9 = 0x00;
4918  c361 725f016e      	clr	_IO_16to9
4919                     ; 1466       IO_8to1 = 0x00;
4921  c365 725f016d      	clr	_IO_8to1
4923  c369 2036          	jra	L1552
4924  c36b               L7452:
4925                     ; 1468     else if (stored_config_settings[2] == '1') {
4927  c36b a131          	cp	a,#49
4928  c36d 260a          	jrne	L3552
4929                     ; 1470       IO_16to9 = 0xff;
4931  c36f 35ff016e      	mov	_IO_16to9,#255
4932                     ; 1471       IO_8to1 = 0xff;
4934  c373 35ff016d      	mov	_IO_8to1,#255
4936  c377 2028          	jra	L1552
4937  c379               L3552:
4938                     ; 1475       IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9;
4940  c379 55404b0168    	mov	_IO_16to9_sent,_stored_IO_16to9
4941  c37e 550168016a    	mov	_IO_16to9_new2,_IO_16to9_sent
4942  c383 55016a016c    	mov	_IO_16to9_new1,_IO_16to9_new2
4943  c388 55016c016e    	mov	_IO_16to9,_IO_16to9_new1
4944                     ; 1476       IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1;
4946  c38d 5540140167    	mov	_IO_8to1_sent,_stored_IO_8to1
4947  c392 5501670169    	mov	_IO_8to1_new2,_IO_8to1_sent
4948  c397 550169016b    	mov	_IO_8to1_new1,_IO_8to1_new2
4949  c39c 55016b016d    	mov	_IO_8to1,_IO_8to1_new1
4950  c3a1               L1552:
4951                     ; 1480     write_output_registers();
4953  c3a1 cdcc1d        	call	_write_output_registers
4956  c3a4 ccc606        	jra	L7552
4957  c3a7               L1652:
4958                     ; 1489     uip_ipaddr(IpAddr, 192,168,1,4);
4960  c3a7 aec0a8        	ldw	x,#49320
4961  c3aa cf00ff        	ldw	_IpAddr,x
4964  c3ad ae0104        	ldw	x,#260
4965  c3b0 cf0101        	ldw	_IpAddr+2,x
4966                     ; 1490     uip_sethostaddr(IpAddr);
4968  c3b3 ce00ff        	ldw	x,_IpAddr
4969  c3b6 cf02c4        	ldw	_uip_hostaddr,x
4972  c3b9 ce0101        	ldw	x,_IpAddr+2
4973  c3bc cf02c6        	ldw	_uip_hostaddr+2,x
4974                     ; 1492     stored_hostaddr[3] = 192;	// MSB
4976  c3bf a6c0          	ld	a,#192
4977  c3c1 ae402a        	ldw	x,#_stored_hostaddr+3
4978  c3c4 cdf486        	call	c_eewrc
4980                     ; 1493     stored_hostaddr[2] = 168;	//
4982  c3c7 a6a8          	ld	a,#168
4983  c3c9 ae4029        	ldw	x,#_stored_hostaddr+2
4984  c3cc cdf486        	call	c_eewrc
4986                     ; 1494     stored_hostaddr[1] = 1;	//
4988  c3cf a601          	ld	a,#1
4989  c3d1 ae4028        	ldw	x,#_stored_hostaddr+1
4990  c3d4 cdf486        	call	c_eewrc
4992                     ; 1495     stored_hostaddr[0] = 4;	// LSB
4994  c3d7 a604          	ld	a,#4
4995  c3d9 ae4027        	ldw	x,#_stored_hostaddr
4996  c3dc cdf486        	call	c_eewrc
4998                     ; 1498     uip_ipaddr(IpAddr, 192,168,1,1);
5000  c3df aec0a8        	ldw	x,#49320
5001  c3e2 cf00ff        	ldw	_IpAddr,x
5004  c3e5 ae0101        	ldw	x,#257
5005  c3e8 cf0101        	ldw	_IpAddr+2,x
5006                     ; 1499     uip_setdraddr(IpAddr);
5008  c3eb ce00ff        	ldw	x,_IpAddr
5009  c3ee cf02bc        	ldw	_uip_draddr,x
5012  c3f1 ce0101        	ldw	x,_IpAddr+2
5013  c3f4 cf02be        	ldw	_uip_draddr+2,x
5014                     ; 1501     stored_draddr[3] = 192;	// MSB
5016  c3f7 a6c0          	ld	a,#192
5017  c3f9 ae4026        	ldw	x,#_stored_draddr+3
5018  c3fc cdf486        	call	c_eewrc
5020                     ; 1502     stored_draddr[2] = 168;	//
5022  c3ff a6a8          	ld	a,#168
5023  c401 ae4025        	ldw	x,#_stored_draddr+2
5024  c404 cdf486        	call	c_eewrc
5026                     ; 1503     stored_draddr[1] = 1;		//
5028  c407 a601          	ld	a,#1
5029  c409 ae4024        	ldw	x,#_stored_draddr+1
5030  c40c cdf486        	call	c_eewrc
5032                     ; 1504     stored_draddr[0] = 1;		// LSB
5034  c40f a601          	ld	a,#1
5035  c411 ae4023        	ldw	x,#_stored_draddr
5036  c414 cdf486        	call	c_eewrc
5038                     ; 1507     uip_ipaddr(IpAddr, 255,255,255,0);
5040  c417 aeffff        	ldw	x,#65535
5041  c41a cf00ff        	ldw	_IpAddr,x
5044  c41d aeff00        	ldw	x,#65280
5045  c420 cf0101        	ldw	_IpAddr+2,x
5046                     ; 1508     uip_setnetmask(IpAddr);
5048  c423 ce00ff        	ldw	x,_IpAddr
5049  c426 cf02c0        	ldw	_uip_netmask,x
5052  c429 ce0101        	ldw	x,_IpAddr+2
5053  c42c cf02c2        	ldw	_uip_netmask+2,x
5054                     ; 1510     stored_netmask[3] = 255;	// MSB
5056  c42f a6ff          	ld	a,#255
5057  c431 ae4022        	ldw	x,#_stored_netmask+3
5058  c434 cdf486        	call	c_eewrc
5060                     ; 1511     stored_netmask[2] = 255;	//
5062  c437 a6ff          	ld	a,#255
5063  c439 ae4021        	ldw	x,#_stored_netmask+2
5064  c43c cdf486        	call	c_eewrc
5066                     ; 1512     stored_netmask[1] = 255;	//
5068  c43f a6ff          	ld	a,#255
5069  c441 ae4020        	ldw	x,#_stored_netmask+1
5070  c444 cdf486        	call	c_eewrc
5072                     ; 1513     stored_netmask[0] = 0;	// LSB
5074  c447 4f            	clr	a
5075  c448 ae401f        	ldw	x,#_stored_netmask
5076  c44b cdf486        	call	c_eewrc
5078                     ; 1517     uip_ipaddr(IpAddr, 0,0,0,0);
5080  c44e 5f            	clrw	x
5081  c44f cf00ff        	ldw	_IpAddr,x
5084  c452 cf0101        	ldw	_IpAddr+2,x
5085                     ; 1518     uip_setmqttserveraddr(IpAddr);
5087  c455 cf02b8        	ldw	_uip_mqttserveraddr,x
5090  c458 cf02ba        	ldw	_uip_mqttserveraddr+2,x
5091                     ; 1521     stored_mqttserveraddr[3] = 0;	// MSB
5093  c45b 4f            	clr	a
5094  c45c ae4034        	ldw	x,#_stored_mqttserveraddr+3
5095  c45f cdf486        	call	c_eewrc
5097                     ; 1522     stored_mqttserveraddr[2] = 0;	//
5099  c462 4f            	clr	a
5100  c463 ae4033        	ldw	x,#_stored_mqttserveraddr+2
5101  c466 cdf486        	call	c_eewrc
5103                     ; 1523     stored_mqttserveraddr[1] = 0;	//
5105  c469 4f            	clr	a
5106  c46a ae4032        	ldw	x,#_stored_mqttserveraddr+1
5107  c46d cdf486        	call	c_eewrc
5109                     ; 1524     stored_mqttserveraddr[0] = 0;	// LSB
5111  c470 4f            	clr	a
5112  c471 ae4031        	ldw	x,#_stored_mqttserveraddr
5113  c474 cdf486        	call	c_eewrc
5115                     ; 1527     stored_mqttport = 1883;		// Port
5117  c477 ae075b        	ldw	x,#1883
5118  c47a 89            	pushw	x
5119  c47b ae402f        	ldw	x,#_stored_mqttport
5120  c47e cdf470        	call	c_eewrw
5122  c481 85            	popw	x
5123                     ; 1529     Port_Mqttd = 1883;
5125  c482 ae075b        	ldw	x,#1883
5126  c485 cf00f6        	ldw	_Port_Mqttd,x
5127                     ; 1532     for(i=0; i<11; i++) { stored_mqtt_username[i] = '\0'; }
5129  c488 4f            	clr	a
5130  c489 6b01          	ld	(OFST+0,sp),a
5132  c48b               L1262:
5135  c48b 5f            	clrw	x
5136  c48c 97            	ld	xl,a
5137  c48d 4f            	clr	a
5138  c48e 1c4035        	addw	x,#_stored_mqtt_username
5139  c491 cdf486        	call	c_eewrc
5143  c494 0c01          	inc	(OFST+0,sp)
5147  c496 7b01          	ld	a,(OFST+0,sp)
5148  c498 a10b          	cp	a,#11
5149  c49a 25ef          	jrult	L1262
5150                     ; 1533     for(i=0; i<11; i++) { stored_mqtt_password[i] = '\0'; }
5152  c49c 4f            	clr	a
5153  c49d 6b01          	ld	(OFST+0,sp),a
5155  c49f               L7262:
5158  c49f 5f            	clrw	x
5159  c4a0 97            	ld	xl,a
5160  c4a1 4f            	clr	a
5161  c4a2 1c4040        	addw	x,#_stored_mqtt_password
5162  c4a5 cdf486        	call	c_eewrc
5166  c4a8 0c01          	inc	(OFST+0,sp)
5170  c4aa 7b01          	ld	a,(OFST+0,sp)
5171  c4ac a10b          	cp	a,#11
5172  c4ae 25ef          	jrult	L7262
5173                     ; 1538     stored_port = 8080;
5175  c4b0 ae1f90        	ldw	x,#8080
5176  c4b3 89            	pushw	x
5177  c4b4 ae401d        	ldw	x,#_stored_port
5178  c4b7 cdf470        	call	c_eewrw
5180  c4ba 85            	popw	x
5181                     ; 1540     Port_Httpd = 8080;
5183  c4bb ae1f90        	ldw	x,#8080
5184  c4be cf0103        	ldw	_Port_Httpd,x
5185                     ; 1556     stored_uip_ethaddr_oct[5] = 0xc2;	//MAC MSB
5187  c4c1 a6c2          	ld	a,#194
5188  c4c3 ae401c        	ldw	x,#_stored_uip_ethaddr_oct+5
5189  c4c6 cdf486        	call	c_eewrc
5191                     ; 1557     stored_uip_ethaddr_oct[4] = 0x4d;
5193  c4c9 a64d          	ld	a,#77
5194  c4cb ae401b        	ldw	x,#_stored_uip_ethaddr_oct+4
5195  c4ce cdf486        	call	c_eewrc
5197                     ; 1558     stored_uip_ethaddr_oct[3] = 0x69;
5199  c4d1 a669          	ld	a,#105
5200  c4d3 ae401a        	ldw	x,#_stored_uip_ethaddr_oct+3
5201  c4d6 cdf486        	call	c_eewrc
5203                     ; 1559     stored_uip_ethaddr_oct[2] = 0x6b;
5205  c4d9 a66b          	ld	a,#107
5206  c4db ae4019        	ldw	x,#_stored_uip_ethaddr_oct+2
5207  c4de cdf486        	call	c_eewrc
5209                     ; 1560     stored_uip_ethaddr_oct[1] = 0x65;
5211  c4e1 a665          	ld	a,#101
5212  c4e3 ae4018        	ldw	x,#_stored_uip_ethaddr_oct+1
5213  c4e6 cdf486        	call	c_eewrc
5215                     ; 1561     stored_uip_ethaddr_oct[0] = 0x00;	//MAC LSB
5217  c4e9 4f            	clr	a
5218  c4ea ae4017        	ldw	x,#_stored_uip_ethaddr_oct
5219  c4ed cdf486        	call	c_eewrc
5221                     ; 1563     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
5223  c4f0 35c2000a      	mov	_uip_ethaddr,#194
5224                     ; 1564     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
5226  c4f4 354d000b      	mov	_uip_ethaddr+1,#77
5227                     ; 1565     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
5229  c4f8 3569000c      	mov	_uip_ethaddr+2,#105
5230                     ; 1566     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
5232  c4fc 356b000d      	mov	_uip_ethaddr+3,#107
5233                     ; 1567     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
5235  c500 3565000e      	mov	_uip_ethaddr+4,#101
5236                     ; 1568     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
5238  c504 725f000f      	clr	_uip_ethaddr+5
5239                     ; 1571     stored_devicename[0] =  'N';
5241  c508 a64e          	ld	a,#78
5242  c50a ae4000        	ldw	x,#_stored_devicename
5243  c50d cdf486        	call	c_eewrc
5245                     ; 1572     stored_devicename[1] =  'e';
5247  c510 a665          	ld	a,#101
5248  c512 ae4001        	ldw	x,#_stored_devicename+1
5249  c515 cdf486        	call	c_eewrc
5251                     ; 1573     stored_devicename[2] =  'w';
5253  c518 a677          	ld	a,#119
5254  c51a ae4002        	ldw	x,#_stored_devicename+2
5255  c51d cdf486        	call	c_eewrc
5257                     ; 1574     stored_devicename[3] =  'D';
5259  c520 a644          	ld	a,#68
5260  c522 ae4003        	ldw	x,#_stored_devicename+3
5261  c525 cdf486        	call	c_eewrc
5263                     ; 1575     stored_devicename[4] =  'e';
5265  c528 a665          	ld	a,#101
5266  c52a ae4004        	ldw	x,#_stored_devicename+4
5267  c52d cdf486        	call	c_eewrc
5269                     ; 1576     stored_devicename[5] =  'v';
5271  c530 a676          	ld	a,#118
5272  c532 ae4005        	ldw	x,#_stored_devicename+5
5273  c535 cdf486        	call	c_eewrc
5275                     ; 1577     stored_devicename[6] =  'i';
5277  c538 a669          	ld	a,#105
5278  c53a ae4006        	ldw	x,#_stored_devicename+6
5279  c53d cdf486        	call	c_eewrc
5281                     ; 1578     stored_devicename[7] =  'c';
5283  c540 a663          	ld	a,#99
5284  c542 ae4007        	ldw	x,#_stored_devicename+7
5285  c545 cdf486        	call	c_eewrc
5287                     ; 1579     stored_devicename[8] =  'e';
5289  c548 a665          	ld	a,#101
5290  c54a ae4008        	ldw	x,#_stored_devicename+8
5291  c54d cdf486        	call	c_eewrc
5293                     ; 1580     stored_devicename[9] =  '0';
5295  c550 a630          	ld	a,#48
5296  c552 ae4009        	ldw	x,#_stored_devicename+9
5297  c555 cdf486        	call	c_eewrc
5299                     ; 1581     stored_devicename[10] = '0';
5301  c558 a630          	ld	a,#48
5302  c55a ae400a        	ldw	x,#_stored_devicename+10
5303  c55d cdf486        	call	c_eewrc
5305                     ; 1582     stored_devicename[11] = '0';
5307  c560 a630          	ld	a,#48
5308  c562 ae400b        	ldw	x,#_stored_devicename+11
5309  c565 cdf486        	call	c_eewrc
5311                     ; 1583     for (i=12; i<20; i++) stored_devicename[i] = '\0';
5313  c568 a60c          	ld	a,#12
5314  c56a 6b01          	ld	(OFST+0,sp),a
5316  c56c               L5362:
5319  c56c 5f            	clrw	x
5320  c56d 97            	ld	xl,a
5321  c56e 4f            	clr	a
5322  c56f 1c4000        	addw	x,#_stored_devicename
5323  c572 cdf486        	call	c_eewrc
5327  c575 0c01          	inc	(OFST+0,sp)
5331  c577 7b01          	ld	a,(OFST+0,sp)
5332  c579 a114          	cp	a,#20
5333  c57b 25ef          	jrult	L5362
5334                     ; 1588     stored_config_settings[0] = '0'; // Set to Invert Output OFF
5336  c57d a630          	ld	a,#48
5337  c57f ae404c        	ldw	x,#_stored_config_settings
5338  c582 cdf486        	call	c_eewrc
5340                     ; 1589     stored_config_settings[1] = '0'; // Set to Invert Input Off
5342  c585 a630          	ld	a,#48
5343  c587 ae404d        	ldw	x,#_stored_config_settings+1
5344  c58a cdf486        	call	c_eewrc
5346                     ; 1590     stored_config_settings[2] = '2'; // Set to Retain pin states
5348  c58d a632          	ld	a,#50
5349  c58f ae404e        	ldw	x,#_stored_config_settings+2
5350  c592 cdf486        	call	c_eewrc
5352                     ; 1591     stored_config_settings[3] = '0'; // Set to Half Duplex
5354  c595 a630          	ld	a,#48
5355  c597 ae404f        	ldw	x,#_stored_config_settings+3
5356  c59a cdf486        	call	c_eewrc
5358                     ; 1592     stored_config_settings[4] = '0'; // undefined
5360  c59d a630          	ld	a,#48
5361  c59f ae4050        	ldw	x,#_stored_config_settings+4
5362  c5a2 cdf486        	call	c_eewrc
5364                     ; 1593     stored_config_settings[5] = '0'; // undefined
5366  c5a5 a630          	ld	a,#48
5367  c5a7 ae4051        	ldw	x,#_stored_config_settings+5
5368  c5aa cdf486        	call	c_eewrc
5370                     ; 1594     invert_output = 0x00;			// Turn off output invert bit
5372  c5ad 725f0166      	clr	_invert_output
5373                     ; 1595     invert_input = 0x00;			// Turn off output invert bit
5375  c5b1 725f0165      	clr	_invert_input
5376                     ; 1596     IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9 = 0x00;
5378  c5b5 4f            	clr	a
5379  c5b6 ae404b        	ldw	x,#_stored_IO_16to9
5380  c5b9 cdf486        	call	c_eewrc
5382  c5bc 725f0168      	clr	_IO_16to9_sent
5383  c5c0 725f016a      	clr	_IO_16to9_new2
5384  c5c4 725f016c      	clr	_IO_16to9_new1
5385  c5c8 725f016e      	clr	_IO_16to9
5386                     ; 1597     IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1  = 0x00;
5388  c5cc 4f            	clr	a
5389  c5cd ae4014        	ldw	x,#_stored_IO_8to1
5390  c5d0 cdf486        	call	c_eewrc
5392  c5d3 725f0167      	clr	_IO_8to1_sent
5393  c5d7 725f0169      	clr	_IO_8to1_new2
5394  c5db 725f016b      	clr	_IO_8to1_new1
5395  c5df 725f016d      	clr	_IO_8to1
5396                     ; 1598     write_output_registers();          // Set Relay Control outputs
5398  c5e3 cdcc1d        	call	_write_output_registers
5400                     ; 1601     magic4 = 0x55;		// MSB
5402  c5e6 a655          	ld	a,#85
5403  c5e8 ae402e        	ldw	x,#_magic4
5404  c5eb cdf486        	call	c_eewrc
5406                     ; 1602     magic3 = 0xee;		//
5408  c5ee a6ee          	ld	a,#238
5409  c5f0 ae402d        	ldw	x,#_magic3
5410  c5f3 cdf486        	call	c_eewrc
5412                     ; 1603     magic2 = 0x0f;		//
5414  c5f6 a60f          	ld	a,#15
5415  c5f8 ae402c        	ldw	x,#_magic2
5416  c5fb cdf486        	call	c_eewrc
5418                     ; 1604     magic1 = 0xf0;		// LSB
5420  c5fe a6f0          	ld	a,#240
5421  c600 ae402b        	ldw	x,#_magic1
5422  c603 cdf486        	call	c_eewrc
5424  c606               L7552:
5425                     ; 1609   for (i=0; i<4; i++) {
5427  c606 4f            	clr	a
5428  c607 6b01          	ld	(OFST+0,sp),a
5430  c609               L3462:
5431                     ; 1610     Pending_hostaddr[i] = stored_hostaddr[i];
5433  c609 5f            	clrw	x
5434  c60a 97            	ld	xl,a
5435  c60b d64027        	ld	a,(_stored_hostaddr,x)
5436  c60e d70143        	ld	(_Pending_hostaddr,x),a
5437                     ; 1611     Pending_draddr[i] = stored_draddr[i];
5439  c611 5f            	clrw	x
5440  c612 7b01          	ld	a,(OFST+0,sp)
5441  c614 97            	ld	xl,a
5442  c615 d64023        	ld	a,(_stored_draddr,x)
5443  c618 d7013f        	ld	(_Pending_draddr,x),a
5444                     ; 1612     Pending_netmask[i] = stored_netmask[i];
5446  c61b 5f            	clrw	x
5447  c61c 7b01          	ld	a,(OFST+0,sp)
5448  c61e 97            	ld	xl,a
5449  c61f d6401f        	ld	a,(_stored_netmask,x)
5450  c622 d7013b        	ld	(_Pending_netmask,x),a
5451                     ; 1609   for (i=0; i<4; i++) {
5453  c625 0c01          	inc	(OFST+0,sp)
5457  c627 7b01          	ld	a,(OFST+0,sp)
5458  c629 a104          	cp	a,#4
5459  c62b 25dc          	jrult	L3462
5460                     ; 1615   Pending_port = stored_port;
5462  c62d ce401d        	ldw	x,_stored_port
5463  c630 cf0139        	ldw	_Pending_port,x
5464                     ; 1617   for (i=0; i<20; i++) {
5466  c633 4f            	clr	a
5467  c634 6b01          	ld	(OFST+0,sp),a
5469  c636               L1562:
5470                     ; 1618     Pending_devicename[i] = stored_devicename[i];
5472  c636 5f            	clrw	x
5473  c637 97            	ld	xl,a
5474  c638 d64000        	ld	a,(_stored_devicename,x)
5475  c63b d70125        	ld	(_Pending_devicename,x),a
5476                     ; 1617   for (i=0; i<20; i++) {
5478  c63e 0c01          	inc	(OFST+0,sp)
5482  c640 7b01          	ld	a,(OFST+0,sp)
5483  c642 a114          	cp	a,#20
5484  c644 25f0          	jrult	L1562
5485                     ; 1621   for (i=0; i<6; i++) {
5487  c646 4f            	clr	a
5488  c647 6b01          	ld	(OFST+0,sp),a
5490  c649               L7562:
5491                     ; 1622     Pending_config_settings[i] = stored_config_settings[i];
5493  c649 5f            	clrw	x
5494  c64a 97            	ld	xl,a
5495  c64b d6404c        	ld	a,(_stored_config_settings,x)
5496  c64e d7011f        	ld	(_Pending_config_settings,x),a
5497                     ; 1623     Pending_uip_ethaddr_oct[i] = stored_uip_ethaddr_oct[i];
5499  c651 5f            	clrw	x
5500  c652 7b01          	ld	a,(OFST+0,sp)
5501  c654 97            	ld	xl,a
5502  c655 d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5503  c658 d70119        	ld	(_Pending_uip_ethaddr_oct,x),a
5504                     ; 1621   for (i=0; i<6; i++) {
5506  c65b 0c01          	inc	(OFST+0,sp)
5510  c65d 7b01          	ld	a,(OFST+0,sp)
5511  c65f a106          	cp	a,#6
5512  c661 25e6          	jrult	L7562
5513                     ; 1627   for (i=0; i<4; i++) {
5515  c663 4f            	clr	a
5516  c664 6b01          	ld	(OFST+0,sp),a
5518  c666               L5662:
5519                     ; 1628     Pending_mqttserveraddr[i] = stored_mqttserveraddr[i];
5521  c666 5f            	clrw	x
5522  c667 97            	ld	xl,a
5523  c668 d64031        	ld	a,(_stored_mqttserveraddr,x)
5524  c66b d7015f        	ld	(_Pending_mqttserveraddr,x),a
5525                     ; 1627   for (i=0; i<4; i++) {
5527  c66e 0c01          	inc	(OFST+0,sp)
5531  c670 7b01          	ld	a,(OFST+0,sp)
5532  c672 a104          	cp	a,#4
5533  c674 25f0          	jrult	L5662
5534                     ; 1630   Pending_mqttport = stored_mqttport;
5536  c676 ce402f        	ldw	x,_stored_mqttport
5537  c679 cf015d        	ldw	_Pending_mqttport,x
5538                     ; 1631   for (i=0; i<11; i++) {
5540  c67c 4f            	clr	a
5541  c67d 6b01          	ld	(OFST+0,sp),a
5543  c67f               L3762:
5544                     ; 1632     Pending_mqtt_username[i] = stored_mqtt_username[i];
5546  c67f 5f            	clrw	x
5547  c680 97            	ld	xl,a
5548  c681 d64035        	ld	a,(_stored_mqtt_username,x)
5549  c684 d70152        	ld	(_Pending_mqtt_username,x),a
5550                     ; 1633     Pending_mqtt_password[i] = stored_mqtt_password[i];
5552  c687 5f            	clrw	x
5553  c688 7b01          	ld	a,(OFST+0,sp)
5554  c68a 97            	ld	xl,a
5555  c68b d64040        	ld	a,(_stored_mqtt_password,x)
5556  c68e d70147        	ld	(_Pending_mqtt_password,x),a
5557                     ; 1631   for (i=0; i<11; i++) {
5559  c691 0c01          	inc	(OFST+0,sp)
5563  c693 7b01          	ld	a,(OFST+0,sp)
5564  c695 a10b          	cp	a,#11
5565  c697 25e6          	jrult	L3762
5566                     ; 1636   strcat(topic_base, stored_devicename);
5568  c699 ae4000        	ldw	x,#_stored_devicename
5569  c69c 89            	pushw	x
5570  c69d ae0074        	ldw	x,#_topic_base
5571  c6a0 cdf442        	call	_strcat
5573  c6a3 85            	popw	x
5574                     ; 1639   topic_base_len = (uint8_t)strlen(topic_base);
5576  c6a4 ae0074        	ldw	x,#_topic_base
5577  c6a7 cdf456        	call	_strlen
5579  c6aa 9f            	ld	a,xl
5580  c6ab c70073        	ld	_topic_base_len,a
5581                     ; 1643   update_mac_string();
5583  c6ae cdc6b3        	call	_update_mac_string
5585                     ; 1645 }
5588  c6b1 84            	pop	a
5589  c6b2 81            	ret	
5632                     ; 1648 void update_mac_string(void) {
5633                     .text:	section	.text,new
5634  c6b3               _update_mac_string:
5636  c6b3 89            	pushw	x
5637       00000002      OFST:	set	2
5640                     ; 1654   i = 5;
5642  c6b4 a605          	ld	a,#5
5643  c6b6 6b01          	ld	(OFST-1,sp),a
5645                     ; 1655   j = 0;
5647  c6b8 0f02          	clr	(OFST+0,sp)
5649  c6ba               L7172:
5650                     ; 1657     emb_itoa(stored_uip_ethaddr_oct[i], OctetArray, 16, 2);
5652  c6ba 4b02          	push	#2
5653  c6bc 4b10          	push	#16
5654  c6be ae005c        	ldw	x,#_OctetArray
5655  c6c1 89            	pushw	x
5656  c6c2 7b05          	ld	a,(OFST+3,sp)
5657  c6c4 5f            	clrw	x
5658  c6c5 97            	ld	xl,a
5659  c6c6 d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5660  c6c9 b703          	ld	c_lreg+3,a
5661  c6cb 3f02          	clr	c_lreg+2
5662  c6cd 3f01          	clr	c_lreg+1
5663  c6cf 3f00          	clr	c_lreg
5664  c6d1 be02          	ldw	x,c_lreg+2
5665  c6d3 89            	pushw	x
5666  c6d4 be00          	ldw	x,c_lreg
5667  c6d6 89            	pushw	x
5668  c6d7 cda318        	call	_emb_itoa
5670  c6da 5b08          	addw	sp,#8
5671                     ; 1658     mac_string[j++] = OctetArray[0];
5673  c6dc 7b02          	ld	a,(OFST+0,sp)
5674  c6de 0c02          	inc	(OFST+0,sp)
5676  c6e0 5f            	clrw	x
5677  c6e1 97            	ld	xl,a
5678  c6e2 c6005c        	ld	a,_OctetArray
5679  c6e5 d7010c        	ld	(_mac_string,x),a
5680                     ; 1659     mac_string[j++] = OctetArray[1];
5682  c6e8 7b02          	ld	a,(OFST+0,sp)
5683  c6ea 0c02          	inc	(OFST+0,sp)
5685  c6ec 5f            	clrw	x
5686  c6ed 97            	ld	xl,a
5687  c6ee c6005d        	ld	a,_OctetArray+1
5688  c6f1 d7010c        	ld	(_mac_string,x),a
5689                     ; 1660     i--;
5691  c6f4 0a01          	dec	(OFST-1,sp)
5693                     ; 1656   while (j<12) {
5695  c6f6 7b02          	ld	a,(OFST+0,sp)
5696  c6f8 a10c          	cp	a,#12
5697  c6fa 25be          	jrult	L7172
5698                     ; 1662   mac_string[12] = '\0';
5700  c6fc 725f0118      	clr	_mac_string+12
5701                     ; 1663 }
5704  c700 85            	popw	x
5705  c701 81            	ret	
5783                     ; 1666 void check_runtime_changes(void)
5783                     ; 1667 {
5784                     .text:	section	.text,new
5785  c702               _check_runtime_changes:
5787  c702 88            	push	a
5788       00000001      OFST:	set	1
5791                     ; 1680   read_input_registers();
5793  c703 cdcb85        	call	_read_input_registers
5795                     ; 1682   if (parse_complete == 1 || mqtt_parse_complete == 1) {
5797  c706 c60106        	ld	a,_parse_complete
5798  c709 4a            	dec	a
5799  c70a 2706          	jreq	L3472
5801  c70c c60105        	ld	a,_mqtt_parse_complete
5802  c70f 4a            	dec	a
5803  c710 2624          	jrne	L1472
5804  c712               L3472:
5805                     ; 1706     if (stored_IO_8to1 != IO_8to1) {
5807  c712 c64014        	ld	a,_stored_IO_8to1
5808  c715 c1016d        	cp	a,_IO_8to1
5809  c718 2710          	jreq	L5472
5810                     ; 1710       if (stored_config_settings[2] == '2') {
5812  c71a c6404e        	ld	a,_stored_config_settings+2
5813  c71d a132          	cp	a,#50
5814  c71f 2609          	jrne	L5472
5815                     ; 1711         stored_IO_8to1 = IO_8to1;
5817  c721 c6016d        	ld	a,_IO_8to1
5818  c724 ae4014        	ldw	x,#_stored_IO_8to1
5819  c727 cdf486        	call	c_eewrc
5821  c72a               L5472:
5822                     ; 1715     write_output_registers();
5824  c72a cdcc1d        	call	_write_output_registers
5826                     ; 1721     if (mqtt_parse_complete == 1) {
5828  c72d c60105        	ld	a,_mqtt_parse_complete
5829  c730 4a            	dec	a
5830  c731 2603          	jrne	L1472
5831                     ; 1723       mqtt_parse_complete = 0;
5833  c733 c70105        	ld	_mqtt_parse_complete,a
5834  c736               L1472:
5835                     ; 1728   if (parse_complete == 1) {
5837  c736 c60106        	ld	a,_parse_complete
5838  c739 4a            	dec	a
5839  c73a 2703ccc9c7    	jrne	L3572
5840                     ; 1769     if ((Pending_config_settings[0] != stored_config_settings[0])
5840                     ; 1770      || (stored_IO_8to1 != IO_8to1)) {
5842  c73f c6404c        	ld	a,_stored_config_settings
5843  c742 c1011f        	cp	a,_Pending_config_settings
5844  c745 2608          	jrne	L7572
5846  c747 c64014        	ld	a,_stored_IO_8to1
5847  c74a c1016d        	cp	a,_IO_8to1
5848  c74d 272d          	jreq	L5572
5849  c74f               L7572:
5850                     ; 1773       stored_config_settings[0] = Pending_config_settings[0];
5852  c74f c6011f        	ld	a,_Pending_config_settings
5853  c752 ae404c        	ldw	x,#_stored_config_settings
5854  c755 cdf486        	call	c_eewrc
5856                     ; 1776       if (stored_config_settings[0] == '0') invert_output = 0x00;
5858  c758 c6404c        	ld	a,_stored_config_settings
5859  c75b a130          	cp	a,#48
5860  c75d 2606          	jrne	L1672
5863  c75f 725f0166      	clr	_invert_output
5865  c763 2004          	jra	L3672
5866  c765               L1672:
5867                     ; 1777       else invert_output = 0xff;
5869  c765 35ff0166      	mov	_invert_output,#255
5870  c769               L3672:
5871                     ; 1781       if (stored_config_settings[2] == '2') {
5873  c769 c6404e        	ld	a,_stored_config_settings+2
5874  c76c a132          	cp	a,#50
5875  c76e 2609          	jrne	L5672
5876                     ; 1782         stored_IO_8to1 = IO_8to1;
5878  c770 c6016d        	ld	a,_IO_8to1
5879  c773 ae4014        	ldw	x,#_stored_IO_8to1
5880  c776 cdf486        	call	c_eewrc
5882  c779               L5672:
5883                     ; 1786       write_output_registers();
5885  c779 cdcc1d        	call	_write_output_registers
5887  c77c               L5572:
5888                     ; 1790     if (Pending_config_settings[1] != stored_config_settings[1]) {
5890  c77c c6404d        	ld	a,_stored_config_settings+1
5891  c77f c10120        	cp	a,_Pending_config_settings+1
5892  c782 271e          	jreq	L7672
5893                     ; 1792       stored_config_settings[1] = Pending_config_settings[1];
5895  c784 c60120        	ld	a,_Pending_config_settings+1
5896  c787 ae404d        	ldw	x,#_stored_config_settings+1
5897  c78a cdf486        	call	c_eewrc
5899                     ; 1795       if (stored_config_settings[1] == '0') invert_input = 0x00;
5901  c78d c6404d        	ld	a,_stored_config_settings+1
5902  c790 a130          	cp	a,#48
5903  c792 2606          	jrne	L1772
5906  c794 725f0165      	clr	_invert_input
5908  c798 2004          	jra	L3772
5909  c79a               L1772:
5910                     ; 1796       else invert_input = 0xff;
5912  c79a 35ff0165      	mov	_invert_input,#255
5913  c79e               L3772:
5914                     ; 1800       restart_request = 1;
5916  c79e 35010109      	mov	_restart_request,#1
5917  c7a2               L7672:
5918                     ; 1834     if (Pending_config_settings[2] != stored_config_settings[2]) {
5920  c7a2 c6404e        	ld	a,_stored_config_settings+2
5921  c7a5 c10121        	cp	a,_Pending_config_settings+2
5922  c7a8 2709          	jreq	L5772
5923                     ; 1836       stored_config_settings[2] = Pending_config_settings[2];
5925  c7aa c60121        	ld	a,_Pending_config_settings+2
5926  c7ad ae404e        	ldw	x,#_stored_config_settings+2
5927  c7b0 cdf486        	call	c_eewrc
5929  c7b3               L5772:
5930                     ; 1840     if (Pending_config_settings[3] != stored_config_settings[3]) {
5932  c7b3 c6404f        	ld	a,_stored_config_settings+3
5933  c7b6 c10122        	cp	a,_Pending_config_settings+3
5934  c7b9 270d          	jreq	L7772
5935                     ; 1843       stored_config_settings[3] = Pending_config_settings[3];
5937  c7bb c60122        	ld	a,_Pending_config_settings+3
5938  c7be ae404f        	ldw	x,#_stored_config_settings+3
5939  c7c1 cdf486        	call	c_eewrc
5941                     ; 1845       user_reboot_request = 1;
5943  c7c4 3501010a      	mov	_user_reboot_request,#1
5944  c7c8               L7772:
5945                     ; 1848     stored_config_settings[4] = Pending_config_settings[4];
5947  c7c8 c60123        	ld	a,_Pending_config_settings+4
5948  c7cb ae4050        	ldw	x,#_stored_config_settings+4
5949  c7ce cdf486        	call	c_eewrc
5951                     ; 1849     stored_config_settings[5] = Pending_config_settings[5];
5953  c7d1 c60124        	ld	a,_Pending_config_settings+5
5954  c7d4 ae4051        	ldw	x,#_stored_config_settings+5
5955  c7d7 cdf486        	call	c_eewrc
5957                     ; 1852     if (stored_hostaddr[3] != Pending_hostaddr[3] ||
5957                     ; 1853         stored_hostaddr[2] != Pending_hostaddr[2] ||
5957                     ; 1854         stored_hostaddr[1] != Pending_hostaddr[1] ||
5957                     ; 1855         stored_hostaddr[0] != Pending_hostaddr[0]) {
5959  c7da c6402a        	ld	a,_stored_hostaddr+3
5960  c7dd c10146        	cp	a,_Pending_hostaddr+3
5961  c7e0 2618          	jrne	L3003
5963  c7e2 c64029        	ld	a,_stored_hostaddr+2
5964  c7e5 c10145        	cp	a,_Pending_hostaddr+2
5965  c7e8 2610          	jrne	L3003
5967  c7ea c64028        	ld	a,_stored_hostaddr+1
5968  c7ed c10144        	cp	a,_Pending_hostaddr+1
5969  c7f0 2608          	jrne	L3003
5971  c7f2 c64027        	ld	a,_stored_hostaddr
5972  c7f5 c10143        	cp	a,_Pending_hostaddr
5973  c7f8 2713          	jreq	L1003
5974  c7fa               L3003:
5975                     ; 1857       for (i=0; i<4; i++) stored_hostaddr[i] = Pending_hostaddr[i];
5977  c7fa 4f            	clr	a
5978  c7fb 6b01          	ld	(OFST+0,sp),a
5980  c7fd               L1103:
5983  c7fd 5f            	clrw	x
5984  c7fe 97            	ld	xl,a
5985  c7ff d60143        	ld	a,(_Pending_hostaddr,x)
5986  c802 d74027        	ld	(_stored_hostaddr,x),a
5989  c805 0c01          	inc	(OFST+0,sp)
5993  c807 7b01          	ld	a,(OFST+0,sp)
5994  c809 a104          	cp	a,#4
5995  c80b 25f0          	jrult	L1103
5996  c80d               L1003:
5997                     ; 1861     if (stored_draddr[3] != Pending_draddr[3] ||
5997                     ; 1862         stored_draddr[2] != Pending_draddr[2] ||
5997                     ; 1863         stored_draddr[1] != Pending_draddr[1] ||
5997                     ; 1864         stored_draddr[0] != Pending_draddr[0]) {
5999  c80d c64026        	ld	a,_stored_draddr+3
6000  c810 c10142        	cp	a,_Pending_draddr+3
6001  c813 2618          	jrne	L1203
6003  c815 c64025        	ld	a,_stored_draddr+2
6004  c818 c10141        	cp	a,_Pending_draddr+2
6005  c81b 2610          	jrne	L1203
6007  c81d c64024        	ld	a,_stored_draddr+1
6008  c820 c10140        	cp	a,_Pending_draddr+1
6009  c823 2608          	jrne	L1203
6011  c825 c64023        	ld	a,_stored_draddr
6012  c828 c1013f        	cp	a,_Pending_draddr
6013  c82b 2717          	jreq	L7103
6014  c82d               L1203:
6015                     ; 1866       for (i=0; i<4; i++) stored_draddr[i] = Pending_draddr[i];
6017  c82d 4f            	clr	a
6018  c82e 6b01          	ld	(OFST+0,sp),a
6020  c830               L7203:
6023  c830 5f            	clrw	x
6024  c831 97            	ld	xl,a
6025  c832 d6013f        	ld	a,(_Pending_draddr,x)
6026  c835 d74023        	ld	(_stored_draddr,x),a
6029  c838 0c01          	inc	(OFST+0,sp)
6033  c83a 7b01          	ld	a,(OFST+0,sp)
6034  c83c a104          	cp	a,#4
6035  c83e 25f0          	jrult	L7203
6036                     ; 1867       restart_request = 1;
6038  c840 35010109      	mov	_restart_request,#1
6039  c844               L7103:
6040                     ; 1871     if (stored_netmask[3] != Pending_netmask[3] ||
6040                     ; 1872         stored_netmask[2] != Pending_netmask[2] ||
6040                     ; 1873         stored_netmask[1] != Pending_netmask[1] ||
6040                     ; 1874         stored_netmask[0] != Pending_netmask[0]) {
6042  c844 c64022        	ld	a,_stored_netmask+3
6043  c847 c1013e        	cp	a,_Pending_netmask+3
6044  c84a 2618          	jrne	L7303
6046  c84c c64021        	ld	a,_stored_netmask+2
6047  c84f c1013d        	cp	a,_Pending_netmask+2
6048  c852 2610          	jrne	L7303
6050  c854 c64020        	ld	a,_stored_netmask+1
6051  c857 c1013c        	cp	a,_Pending_netmask+1
6052  c85a 2608          	jrne	L7303
6054  c85c c6401f        	ld	a,_stored_netmask
6055  c85f c1013b        	cp	a,_Pending_netmask
6056  c862 2717          	jreq	L5303
6057  c864               L7303:
6058                     ; 1876       for (i=0; i<4; i++) stored_netmask[i] = Pending_netmask[i];
6060  c864 4f            	clr	a
6061  c865 6b01          	ld	(OFST+0,sp),a
6063  c867               L5403:
6066  c867 5f            	clrw	x
6067  c868 97            	ld	xl,a
6068  c869 d6013b        	ld	a,(_Pending_netmask,x)
6069  c86c d7401f        	ld	(_stored_netmask,x),a
6072  c86f 0c01          	inc	(OFST+0,sp)
6076  c871 7b01          	ld	a,(OFST+0,sp)
6077  c873 a104          	cp	a,#4
6078  c875 25f0          	jrult	L5403
6079                     ; 1877       restart_request = 1;
6081  c877 35010109      	mov	_restart_request,#1
6082  c87b               L5303:
6083                     ; 1881     if (stored_port != Pending_port) {
6085  c87b ce401d        	ldw	x,_stored_port
6086  c87e c30139        	cpw	x,_Pending_port
6087  c881 270f          	jreq	L3503
6088                     ; 1883       stored_port = Pending_port;
6090  c883 ce0139        	ldw	x,_Pending_port
6091  c886 89            	pushw	x
6092  c887 ae401d        	ldw	x,#_stored_port
6093  c88a cdf470        	call	c_eewrw
6095  c88d 35010109      	mov	_restart_request,#1
6096  c891 85            	popw	x
6097                     ; 1885       restart_request = 1;
6099  c892               L3503:
6100                     ; 1889     for(i=0; i<20; i++) {
6102  c892 4f            	clr	a
6103  c893 6b01          	ld	(OFST+0,sp),a
6105  c895               L5503:
6106                     ; 1890       if (stored_devicename[i] != Pending_devicename[i]) {
6108  c895 5f            	clrw	x
6109  c896 97            	ld	xl,a
6110  c897 905f          	clrw	y
6111  c899 9097          	ld	yl,a
6112  c89b 90d64000      	ld	a,(_stored_devicename,y)
6113  c89f d10125        	cp	a,(_Pending_devicename,x)
6114  c8a2 270e          	jreq	L3603
6115                     ; 1891         stored_devicename[i] = Pending_devicename[i];
6117  c8a4 7b01          	ld	a,(OFST+0,sp)
6118  c8a6 5f            	clrw	x
6119  c8a7 97            	ld	xl,a
6120  c8a8 d60125        	ld	a,(_Pending_devicename,x)
6121  c8ab d74000        	ld	(_stored_devicename,x),a
6122                     ; 1897         restart_request = 1;
6124  c8ae 35010109      	mov	_restart_request,#1
6125  c8b2               L3603:
6126                     ; 1889     for(i=0; i<20; i++) {
6128  c8b2 0c01          	inc	(OFST+0,sp)
6132  c8b4 7b01          	ld	a,(OFST+0,sp)
6133  c8b6 a114          	cp	a,#20
6134  c8b8 25db          	jrult	L5503
6135                     ; 1904     strcpy(topic_base, devicetype);
6137  c8ba ae0074        	ldw	x,#_topic_base
6138  c8bd 90ae9ccb      	ldw	y,#L5261_devicetype
6139  c8c1               L403:
6140  c8c1 90f6          	ld	a,(y)
6141  c8c3 905c          	incw	y
6142  c8c5 f7            	ld	(x),a
6143  c8c6 5c            	incw	x
6144  c8c7 4d            	tnz	a
6145  c8c8 26f7          	jrne	L403
6146                     ; 1905     strcat(topic_base, stored_devicename);
6148  c8ca ae4000        	ldw	x,#_stored_devicename
6149  c8cd 89            	pushw	x
6150  c8ce ae0074        	ldw	x,#_topic_base
6151  c8d1 cdf442        	call	_strcat
6153  c8d4 85            	popw	x
6154                     ; 1906     topic_base_len = (uint8_t)strlen(topic_base);
6156  c8d5 ae0074        	ldw	x,#_topic_base
6157  c8d8 cdf456        	call	_strlen
6159  c8db 9f            	ld	a,xl
6160  c8dc c70073        	ld	_topic_base_len,a
6161                     ; 1909     if (stored_mqttserveraddr[3] != Pending_mqttserveraddr[3] ||
6161                     ; 1910         stored_mqttserveraddr[2] != Pending_mqttserveraddr[2] ||
6161                     ; 1911         stored_mqttserveraddr[1] != Pending_mqttserveraddr[1] ||
6161                     ; 1912         stored_mqttserveraddr[0] != Pending_mqttserveraddr[0]) {
6163  c8df c64034        	ld	a,_stored_mqttserveraddr+3
6164  c8e2 c10162        	cp	a,_Pending_mqttserveraddr+3
6165  c8e5 2618          	jrne	L7603
6167  c8e7 c64033        	ld	a,_stored_mqttserveraddr+2
6168  c8ea c10161        	cp	a,_Pending_mqttserveraddr+2
6169  c8ed 2610          	jrne	L7603
6171  c8ef c64032        	ld	a,_stored_mqttserveraddr+1
6172  c8f2 c10160        	cp	a,_Pending_mqttserveraddr+1
6173  c8f5 2608          	jrne	L7603
6175  c8f7 c64031        	ld	a,_stored_mqttserveraddr
6176  c8fa c1015f        	cp	a,_Pending_mqttserveraddr
6177  c8fd 2717          	jreq	L5603
6178  c8ff               L7603:
6179                     ; 1914       for (i=0; i<4; i++) stored_mqttserveraddr[i] = Pending_mqttserveraddr[i];
6181  c8ff 4f            	clr	a
6182  c900 6b01          	ld	(OFST+0,sp),a
6184  c902               L5703:
6187  c902 5f            	clrw	x
6188  c903 97            	ld	xl,a
6189  c904 d6015f        	ld	a,(_Pending_mqttserveraddr,x)
6190  c907 d74031        	ld	(_stored_mqttserveraddr,x),a
6193  c90a 0c01          	inc	(OFST+0,sp)
6197  c90c 7b01          	ld	a,(OFST+0,sp)
6198  c90e a104          	cp	a,#4
6199  c910 25f0          	jrult	L5703
6200                     ; 1916       restart_request = 1;
6202  c912 35010109      	mov	_restart_request,#1
6203  c916               L5603:
6204                     ; 1920     if (stored_mqttport != Pending_mqttport) {
6206  c916 ce402f        	ldw	x,_stored_mqttport
6207  c919 c3015d        	cpw	x,_Pending_mqttport
6208  c91c 270f          	jreq	L3013
6209                     ; 1922       stored_mqttport = Pending_mqttport;
6211  c91e ce015d        	ldw	x,_Pending_mqttport
6212  c921 89            	pushw	x
6213  c922 ae402f        	ldw	x,#_stored_mqttport
6214  c925 cdf470        	call	c_eewrw
6216  c928 35010109      	mov	_restart_request,#1
6217  c92c 85            	popw	x
6218                     ; 1924       restart_request = 1;
6220  c92d               L3013:
6221                     ; 1928     for(i=0; i<11; i++) {
6223  c92d 4f            	clr	a
6224  c92e 6b01          	ld	(OFST+0,sp),a
6226  c930               L5013:
6227                     ; 1929       if (stored_mqtt_username[i] != Pending_mqtt_username[i]) {
6229  c930 5f            	clrw	x
6230  c931 97            	ld	xl,a
6231  c932 905f          	clrw	y
6232  c934 9097          	ld	yl,a
6233  c936 90d64035      	ld	a,(_stored_mqtt_username,y)
6234  c93a d10152        	cp	a,(_Pending_mqtt_username,x)
6235  c93d 270e          	jreq	L3113
6236                     ; 1930         stored_mqtt_username[i] = Pending_mqtt_username[i];
6238  c93f 7b01          	ld	a,(OFST+0,sp)
6239  c941 5f            	clrw	x
6240  c942 97            	ld	xl,a
6241  c943 d60152        	ld	a,(_Pending_mqtt_username,x)
6242  c946 d74035        	ld	(_stored_mqtt_username,x),a
6243                     ; 1932         restart_request = 1;
6245  c949 35010109      	mov	_restart_request,#1
6246  c94d               L3113:
6247                     ; 1928     for(i=0; i<11; i++) {
6249  c94d 0c01          	inc	(OFST+0,sp)
6253  c94f 7b01          	ld	a,(OFST+0,sp)
6254  c951 a10b          	cp	a,#11
6255  c953 25db          	jrult	L5013
6256                     ; 1937     for(i=0; i<11; i++) {
6258  c955 4f            	clr	a
6259  c956 6b01          	ld	(OFST+0,sp),a
6261  c958               L5113:
6262                     ; 1938       if (stored_mqtt_password[i] != Pending_mqtt_password[i]) {
6264  c958 5f            	clrw	x
6265  c959 97            	ld	xl,a
6266  c95a 905f          	clrw	y
6267  c95c 9097          	ld	yl,a
6268  c95e 90d64040      	ld	a,(_stored_mqtt_password,y)
6269  c962 d10147        	cp	a,(_Pending_mqtt_password,x)
6270  c965 270e          	jreq	L3213
6271                     ; 1939         stored_mqtt_password[i] = Pending_mqtt_password[i];
6273  c967 7b01          	ld	a,(OFST+0,sp)
6274  c969 5f            	clrw	x
6275  c96a 97            	ld	xl,a
6276  c96b d60147        	ld	a,(_Pending_mqtt_password,x)
6277  c96e d74040        	ld	(_stored_mqtt_password,x),a
6278                     ; 1941         restart_request = 1;
6280  c971 35010109      	mov	_restart_request,#1
6281  c975               L3213:
6282                     ; 1937     for(i=0; i<11; i++) {
6284  c975 0c01          	inc	(OFST+0,sp)
6288  c977 7b01          	ld	a,(OFST+0,sp)
6289  c979 a10b          	cp	a,#11
6290  c97b 25db          	jrult	L5113
6291                     ; 1947     if (stored_uip_ethaddr_oct[0] != Pending_uip_ethaddr_oct[0] ||
6291                     ; 1948       stored_uip_ethaddr_oct[1] != Pending_uip_ethaddr_oct[1] ||
6291                     ; 1949       stored_uip_ethaddr_oct[2] != Pending_uip_ethaddr_oct[2] ||
6291                     ; 1950       stored_uip_ethaddr_oct[3] != Pending_uip_ethaddr_oct[3] ||
6291                     ; 1951       stored_uip_ethaddr_oct[4] != Pending_uip_ethaddr_oct[4] ||
6291                     ; 1952       stored_uip_ethaddr_oct[5] != Pending_uip_ethaddr_oct[5]) {
6293  c97d c64017        	ld	a,_stored_uip_ethaddr_oct
6294  c980 c10119        	cp	a,_Pending_uip_ethaddr_oct
6295  c983 2628          	jrne	L7213
6297  c985 c64018        	ld	a,_stored_uip_ethaddr_oct+1
6298  c988 c1011a        	cp	a,_Pending_uip_ethaddr_oct+1
6299  c98b 2620          	jrne	L7213
6301  c98d c64019        	ld	a,_stored_uip_ethaddr_oct+2
6302  c990 c1011b        	cp	a,_Pending_uip_ethaddr_oct+2
6303  c993 2618          	jrne	L7213
6305  c995 c6401a        	ld	a,_stored_uip_ethaddr_oct+3
6306  c998 c1011c        	cp	a,_Pending_uip_ethaddr_oct+3
6307  c99b 2610          	jrne	L7213
6309  c99d c6401b        	ld	a,_stored_uip_ethaddr_oct+4
6310  c9a0 c1011d        	cp	a,_Pending_uip_ethaddr_oct+4
6311  c9a3 2608          	jrne	L7213
6313  c9a5 c6401c        	ld	a,_stored_uip_ethaddr_oct+5
6314  c9a8 c1011e        	cp	a,_Pending_uip_ethaddr_oct+5
6315  c9ab 271a          	jreq	L3572
6316  c9ad               L7213:
6317                     ; 1954       for (i=0; i<6; i++) stored_uip_ethaddr_oct[i] = Pending_uip_ethaddr_oct[i];
6319  c9ad 4f            	clr	a
6320  c9ae 6b01          	ld	(OFST+0,sp),a
6322  c9b0               L1413:
6325  c9b0 5f            	clrw	x
6326  c9b1 97            	ld	xl,a
6327  c9b2 d60119        	ld	a,(_Pending_uip_ethaddr_oct,x)
6328  c9b5 d74017        	ld	(_stored_uip_ethaddr_oct,x),a
6331  c9b8 0c01          	inc	(OFST+0,sp)
6335  c9ba 7b01          	ld	a,(OFST+0,sp)
6336  c9bc a106          	cp	a,#6
6337  c9be 25f0          	jrult	L1413
6338                     ; 1956       update_mac_string();
6340  c9c0 cdc6b3        	call	_update_mac_string
6342                     ; 1958       restart_request = 1;
6344  c9c3 35010109      	mov	_restart_request,#1
6345  c9c7               L3572:
6346                     ; 1962   if (restart_request == 1) {
6348  c9c7 c60109        	ld	a,_restart_request
6349  c9ca 4a            	dec	a
6350  c9cb 2609          	jrne	L7413
6351                     ; 1965     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6353  c9cd c60108        	ld	a,_restart_reboot_step
6354  c9d0 2604          	jrne	L7413
6355                     ; 1966       restart_reboot_step = RESTART_REBOOT_ARM;
6357  c9d2 35010108      	mov	_restart_reboot_step,#1
6358  c9d6               L7413:
6359                     ; 1970   if (user_reboot_request == 1) {
6361  c9d6 c6010a        	ld	a,_user_reboot_request
6362  c9d9 4a            	dec	a
6363  c9da 2611          	jrne	L3513
6364                     ; 1973     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6366  c9dc 725d0108      	tnz	_restart_reboot_step
6367  c9e0 260b          	jrne	L3513
6368                     ; 1974       restart_reboot_step = RESTART_REBOOT_ARM;
6370  c9e2 35010108      	mov	_restart_reboot_step,#1
6371                     ; 1975       user_reboot_request = 0;
6373  c9e6 c7010a        	ld	_user_reboot_request,a
6374                     ; 1976       reboot_request = 1;
6376  c9e9 3501010b      	mov	_reboot_request,#1
6377  c9ed               L3513:
6378                     ; 1985   parse_complete = 0; // Reset parse_complete for future changes
6380  c9ed 725f0106      	clr	_parse_complete
6381                     ; 1988   if (stack_limit1 != 0xaa || stack_limit2 != 0x55) {
6383  c9f1 c605ff        	ld	a,_stack_limit1
6384  c9f4 a1aa          	cp	a,#170
6385  c9f6 2607          	jrne	L1613
6387  c9f8 c605fe        	ld	a,_stack_limit2
6388  c9fb a155          	cp	a,#85
6389  c9fd 270a          	jreq	L7513
6390  c9ff               L1613:
6391                     ; 1989     stack_error = 1;
6393  c9ff 35010163      	mov	_stack_error,#1
6394                     ; 1990     fastflash();
6396  ca03 cdcd2d        	call	_fastflash
6398                     ; 1991     fastflash();
6400  ca06 cdcd2d        	call	_fastflash
6402  ca09               L7513:
6403                     ; 2004 }
6406  ca09 84            	pop	a
6407  ca0a 81            	ret	
6442                     ; 2007 void check_restart_reboot(void)
6442                     ; 2008 {
6443                     .text:	section	.text,new
6444  ca0b               _check_restart_reboot:
6448                     ; 2014   if (restart_request == 1 || reboot_request == 1) {
6450  ca0b c60109        	ld	a,_restart_request
6451  ca0e 4a            	dec	a
6452  ca0f 2709          	jreq	L5713
6454  ca11 c6010b        	ld	a,_reboot_request
6455  ca14 4a            	dec	a
6456  ca15 2703cccadf    	jrne	L3713
6457  ca1a               L5713:
6458                     ; 2025     if (restart_reboot_step == RESTART_REBOOT_ARM) {
6460  ca1a c60108        	ld	a,_restart_reboot_step
6461  ca1d a101          	cp	a,#1
6462  ca1f 2611          	jrne	L7713
6463                     ; 2030       time_mark2 = second_counter;
6465  ca21 ce029e        	ldw	x,_second_counter+2
6466  ca24 cf00fd        	ldw	_time_mark2+2,x
6467  ca27 ce029c        	ldw	x,_second_counter
6468  ca2a cf00fb        	ldw	_time_mark2,x
6469                     ; 2031       restart_reboot_step = RESTART_REBOOT_ARM2;
6471  ca2d 35020108      	mov	_restart_reboot_step,#2
6474  ca31 81            	ret	
6475  ca32               L7713:
6476                     ; 2034     else if (restart_reboot_step == RESTART_REBOOT_ARM2) {
6478  ca32 a102          	cp	a,#2
6479  ca34 2613          	jrne	L3023
6480                     ; 2040       if (second_counter > time_mark2 + 0 ) {
6482  ca36 ae029c        	ldw	x,#_second_counter
6483  ca39 cdf6e3        	call	c_ltor
6485  ca3c ae00fb        	ldw	x,#_time_mark2
6486  ca3f cdf678        	call	c_lcmp
6488  ca42 23d3          	jrule	L3713
6489                     ; 2041         restart_reboot_step = RESTART_REBOOT_DISCONNECT;
6491  ca44 35030108      	mov	_restart_reboot_step,#3
6493  ca48 81            	ret	
6494  ca49               L3023:
6495                     ; 2046     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECT) {
6497  ca49 a103          	cp	a,#3
6498  ca4b 261e          	jrne	L1123
6499                     ; 2047       restart_reboot_step = RESTART_REBOOT_DISCONNECTWAIT;
6501  ca4d 35040108      	mov	_restart_reboot_step,#4
6502                     ; 2048       if (mqtt_start == MQTT_START_COMPLETE) {
6504  ca51 c600a8        	ld	a,_mqtt_start
6505  ca54 a114          	cp	a,#20
6506  ca56 2606          	jrne	L3123
6507                     ; 2050         mqtt_disconnect(&mqttclient);
6509  ca58 ae00c5        	ldw	x,#_mqttclient
6510  ca5b cdd232        	call	_mqtt_disconnect
6512  ca5e               L3123:
6513                     ; 2053       time_mark2 = second_counter;
6515  ca5e ce029e        	ldw	x,_second_counter+2
6516  ca61 cf00fd        	ldw	_time_mark2+2,x
6517  ca64 ce029c        	ldw	x,_second_counter
6518  ca67 cf00fb        	ldw	_time_mark2,x
6521  ca6a 81            	ret	
6522  ca6b               L1123:
6523                     ; 2056     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECTWAIT) {
6525  ca6b a104          	cp	a,#4
6526  ca6d 2618          	jrne	L7123
6527                     ; 2057       if (second_counter > time_mark2 + 1 ) {
6529  ca6f ae00fb        	ldw	x,#_time_mark2
6530  ca72 cdf6e3        	call	c_ltor
6532  ca75 a601          	ld	a,#1
6533  ca77 cdf64f        	call	c_ladc
6535  ca7a ae029c        	ldw	x,#_second_counter
6536  ca7d cdf678        	call	c_lcmp
6538  ca80 245d          	jruge	L3713
6539                     ; 2060         restart_reboot_step = RESTART_REBOOT_TCPCLOSE;
6541  ca82 35050108      	mov	_restart_reboot_step,#5
6543  ca86 81            	ret	
6544  ca87               L7123:
6545                     ; 2064     else if (restart_reboot_step == RESTART_REBOOT_TCPCLOSE) {
6547  ca87 a105          	cp	a,#5
6548  ca89 2615          	jrne	L5223
6549                     ; 2080       mqtt_close_tcp = 1;
6551  ca8b 35010107      	mov	_mqtt_close_tcp,#1
6552                     ; 2082       time_mark2 = second_counter;
6554  ca8f ce029e        	ldw	x,_second_counter+2
6555  ca92 cf00fd        	ldw	_time_mark2+2,x
6556  ca95 ce029c        	ldw	x,_second_counter
6557  ca98 cf00fb        	ldw	_time_mark2,x
6558                     ; 2083       restart_reboot_step = RESTART_REBOOT_TCPWAIT;
6560  ca9b 35060108      	mov	_restart_reboot_step,#6
6563  ca9f 81            	ret	
6564  caa0               L5223:
6565                     ; 2085     else if (restart_reboot_step == RESTART_REBOOT_TCPWAIT) {
6567  caa0 a106          	cp	a,#6
6568  caa2 261c          	jrne	L1323
6569                     ; 2090       if (second_counter > time_mark2 + 1) {
6571  caa4 ae00fb        	ldw	x,#_time_mark2
6572  caa7 cdf6e3        	call	c_ltor
6574  caaa a601          	ld	a,#1
6575  caac cdf64f        	call	c_ladc
6577  caaf ae029c        	ldw	x,#_second_counter
6578  cab2 cdf678        	call	c_lcmp
6580  cab5 2428          	jruge	L3713
6581                     ; 2091 	mqtt_close_tcp = 0;
6583  cab7 725f0107      	clr	_mqtt_close_tcp
6584                     ; 2092         restart_reboot_step = RESTART_REBOOT_FINISH;
6586  cabb 35070108      	mov	_restart_reboot_step,#7
6588  cabf 81            	ret	
6589  cac0               L1323:
6590                     ; 2102     else if (restart_reboot_step == RESTART_REBOOT_FINISH) {
6592  cac0 a107          	cp	a,#7
6593  cac2 261b          	jrne	L3713
6594                     ; 2103       if (reboot_request == 1) {
6596  cac4 c6010b        	ld	a,_reboot_request
6597  cac7 4a            	dec	a
6598  cac8 2606          	jrne	L1423
6599                     ; 2104         restart_reboot_step = RESTART_REBOOT_IDLE;
6601  caca c70108        	ld	_restart_reboot_step,a
6602                     ; 2106         reboot();
6604  cacd cdcb60        	call	_reboot
6606  cad0               L1423:
6607                     ; 2108       if (restart_request == 1) {
6609  cad0 c60109        	ld	a,_restart_request
6610  cad3 4a            	dec	a
6611  cad4 2609          	jrne	L3713
6612                     ; 2109 	restart_request = 0;
6614  cad6 c70109        	ld	_restart_request,a
6615                     ; 2110         restart_reboot_step = RESTART_REBOOT_IDLE;
6617  cad9 c70108        	ld	_restart_reboot_step,a
6618                     ; 2112 	restart();
6620  cadc cdcae0        	call	_restart
6622  cadf               L3713:
6623                     ; 2116 }
6626  cadf 81            	ret	
6679                     ; 2119 void restart(void)
6679                     ; 2120 {
6680                     .text:	section	.text,new
6681  cae0               _restart:
6685                     ; 2134   LEDcontrol(0); // Turn LED off
6687  cae0 4f            	clr	a
6688  cae1 cda2a6        	call	_LEDcontrol
6690                     ; 2136   parse_complete = 0;
6692  cae4 725f0106      	clr	_parse_complete
6693                     ; 2137   reboot_request = 0;
6695  cae8 725f010b      	clr	_reboot_request
6696                     ; 2138   restart_request = 0;
6698  caec 725f0109      	clr	_restart_request
6699                     ; 2140   time_mark2 = 0;           // Time capture used in reboot
6701  caf0 5f            	clrw	x
6702  caf1 cf00fd        	ldw	_time_mark2+2,x
6703  caf4 cf00fb        	ldw	_time_mark2,x
6704                     ; 2143   mqtt_close_tcp = 0;
6706  caf7 725f0107      	clr	_mqtt_close_tcp
6707                     ; 2145   mqtt_start = MQTT_START_TCP_CONNECT;
6709  cafb 350100a8      	mov	_mqtt_start,#1
6710                     ; 2146   mqtt_start_status = MQTT_START_NOT_STARTED;
6712  caff 725f00a7      	clr	_mqtt_start_status
6713                     ; 2147   mqtt_start_ctr1 = 0;
6715  cb03 725f00a6      	clr	_mqtt_start_ctr1
6716                     ; 2148   mqtt_sanity_ctr = 0;
6718  cb07 725f00a4      	clr	_mqtt_sanity_ctr
6719                     ; 2149   mqtt_start_retry = 0;
6721  cb0b 725f00a3      	clr	_mqtt_start_retry
6722                     ; 2150   MQTT_error_status = 0;
6724  cb0f 725f029b      	clr	_MQTT_error_status
6725                     ; 2151   mqtt_restart_step = MQTT_RESTART_IDLE;
6727  cb13 725f00a0      	clr	_mqtt_restart_step
6728                     ; 2152   strcpy(topic_base, devicetype);
6730  cb17 ae0074        	ldw	x,#_topic_base
6731  cb1a 90ae9ccb      	ldw	y,#L5261_devicetype
6732  cb1e               L433:
6733  cb1e 90f6          	ld	a,(y)
6734  cb20 905c          	incw	y
6735  cb22 f7            	ld	(x),a
6736  cb23 5c            	incw	x
6737  cb24 4d            	tnz	a
6738  cb25 26f7          	jrne	L433
6739                     ; 2153   state_request = STATE_REQUEST_IDLE;
6741  cb27 c70164        	ld	_state_request,a
6742                     ; 2156   spi_init();              // Initialize the SPI bit bang interface to the
6744  cb2a cde237        	call	_spi_init
6746                     ; 2158   unlock_eeprom();         // unlock the EEPROM so writes can be performed
6748  cb2d cdc1e8        	call	_unlock_eeprom
6750                     ; 2159   check_eeprom_settings(); // Verify EEPROM up to date
6752  cb30 cdc1f8        	call	_check_eeprom_settings
6754                     ; 2160   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
6756  cb33 cd9e87        	call	_Enc28j60Init
6758                     ; 2161   uip_arp_init();          // Initialize the ARP module
6760  cb36 cdef9f        	call	_uip_arp_init
6762                     ; 2162   uip_init();              // Initialize uIP
6764  cb39 cde53d        	call	_uip_init
6766                     ; 2163   HttpDInit();             // Initialize httpd; sets up listening ports
6768  cb3c cdaa56        	call	_HttpDInit
6770                     ; 2167   mqtt_init(&mqttclient,
6770                     ; 2168             mqtt_sendbuf,
6770                     ; 2169 	    sizeof(mqtt_sendbuf),
6770                     ; 2170 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
6770                     ; 2171 	    UIP_APPDATA_SIZE,
6770                     ; 2172 	    publish_callback);
6772  cb3f aebf50        	ldw	x,#_publish_callback
6773  cb42 89            	pushw	x
6774  cb43 ae01be        	ldw	x,#446
6775  cb46 89            	pushw	x
6776  cb47 ae03ad        	ldw	x,#_uip_buf+54
6777  cb4a 89            	pushw	x
6778  cb4b ae00c8        	ldw	x,#200
6779  cb4e 89            	pushw	x
6780  cb4f ae016f        	ldw	x,#_mqtt_sendbuf
6781  cb52 89            	pushw	x
6782  cb53 ae00c5        	ldw	x,#_mqttclient
6783  cb56 cdcddf        	call	_mqtt_init
6785  cb59 5b0a          	addw	sp,#10
6786                     ; 2175   LEDcontrol(1); // Turn LED on
6788  cb5b a601          	ld	a,#1
6790                     ; 2178 }
6793  cb5d cca2a6        	jp	_LEDcontrol
6821                     ; 2181 void reboot(void)
6821                     ; 2182 {
6822                     .text:	section	.text,new
6823  cb60               _reboot:
6827                     ; 2185   fastflash(); // A useful signal that a deliberate reboot is occurring.
6829  cb60 cdcd2d        	call	_fastflash
6831                     ; 2187   LEDcontrol(0);  // turn LED off
6833  cb63 4f            	clr	a
6834  cb64 cda2a6        	call	_LEDcontrol
6836                     ; 2189   WWDG_WR = (uint8_t)0x7f;     // Window register reset
6838  cb67 357f50d2      	mov	_WWDG_WR,#127
6839                     ; 2190   WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
6841  cb6b 35ff50d1      	mov	_WWDG_CR,#255
6842                     ; 2191   WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
6844  cb6f 356050d2      	mov	_WWDG_WR,#96
6845                     ; 2194   wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
6847  cb73 aec350        	ldw	x,#50000
6848  cb76 cde40a        	call	_wait_timer
6850                     ; 2195   wait_timer((uint16_t)50000);
6852  cb79 aec350        	ldw	x,#50000
6853  cb7c cde40a        	call	_wait_timer
6855                     ; 2196   wait_timer((uint16_t)50000);
6857  cb7f aec350        	ldw	x,#50000
6859                     ; 2197 }
6862  cb82 cce40a        	jp	_wait_timer
6903                     ; 2200 void read_input_registers(void)
6903                     ; 2201 {
6904                     .text:	section	.text,new
6905  cb85               _read_input_registers:
6907  cb85 89            	pushw	x
6908       00000002      OFST:	set	2
6911                     ; 2218   if (PC_IDR & (uint8_t)0x40) IO_16to9_new1 |= 0x80; // PC bit 6 = 1, Input 8 = 1
6913  cb86 720d500b06    	btjf	_PC_IDR,#6,L1033
6916  cb8b 721e016c      	bset	_IO_16to9_new1,#7
6918  cb8f 2004          	jra	L3033
6919  cb91               L1033:
6920                     ; 2219   else IO_16to9_new1 &= (uint8_t)(~0x80);
6922  cb91 721f016c      	bres	_IO_16to9_new1,#7
6923  cb95               L3033:
6924                     ; 2220   if (PG_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x40; // PG bit 0 = 1, Input 7 = 1
6926  cb95 7201501f06    	btjf	_PG_IDR,#0,L5033
6929  cb9a 721c016c      	bset	_IO_16to9_new1,#6
6931  cb9e 2004          	jra	L7033
6932  cba0               L5033:
6933                     ; 2221   else IO_16to9_new1 &= (uint8_t)(~0x40);
6935  cba0 721d016c      	bres	_IO_16to9_new1,#6
6936  cba4               L7033:
6937                     ; 2222   if (PE_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x20; // PE bit 3 = 1, Input 6 = 1
6939  cba4 7207501506    	btjf	_PE_IDR,#3,L1133
6942  cba9 721a016c      	bset	_IO_16to9_new1,#5
6944  cbad 2004          	jra	L3133
6945  cbaf               L1133:
6946                     ; 2223   else IO_16to9_new1 &= (uint8_t)(~0x20);
6948  cbaf 721b016c      	bres	_IO_16to9_new1,#5
6949  cbb3               L3133:
6950                     ; 2224   if (PD_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x10; // PD bit 0 = 1, Input 5 = 1
6952  cbb3 7201501006    	btjf	_PD_IDR,#0,L5133
6955  cbb8 7218016c      	bset	_IO_16to9_new1,#4
6957  cbbc 2004          	jra	L7133
6958  cbbe               L5133:
6959                     ; 2225   else IO_16to9_new1 &= (uint8_t)(~0x10);
6961  cbbe 7219016c      	bres	_IO_16to9_new1,#4
6962  cbc2               L7133:
6963                     ; 2226   if (PD_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x08; // PD bit 3 = 1, Input 4 = 1
6965  cbc2 7207501006    	btjf	_PD_IDR,#3,L1233
6968  cbc7 7216016c      	bset	_IO_16to9_new1,#3
6970  cbcb 2004          	jra	L3233
6971  cbcd               L1233:
6972                     ; 2227   else IO_16to9_new1 &= (uint8_t)(~0x08);
6974  cbcd 7217016c      	bres	_IO_16to9_new1,#3
6975  cbd1               L3233:
6976                     ; 2228   if (PD_IDR & (uint8_t)0x20) IO_16to9_new1 |= 0x04; // PD bit 5 = 1, Input 3 = 1
6978  cbd1 720b501006    	btjf	_PD_IDR,#5,L5233
6981  cbd6 7214016c      	bset	_IO_16to9_new1,#2
6983  cbda 2004          	jra	L7233
6984  cbdc               L5233:
6985                     ; 2229   else IO_16to9_new1 &= (uint8_t)(~0x04);
6987  cbdc 7215016c      	bres	_IO_16to9_new1,#2
6988  cbe0               L7233:
6989                     ; 2230   if (PD_IDR & (uint8_t)0x80) IO_16to9_new1 |= 0x02; // PD bit 7 = 1, Input 2 = 1
6991  cbe0 720f501006    	btjf	_PD_IDR,#7,L1333
6994  cbe5 7212016c      	bset	_IO_16to9_new1,#1
6996  cbe9 2004          	jra	L3333
6997  cbeb               L1333:
6998                     ; 2231   else IO_16to9_new1 &= (uint8_t)(~0x02);
7000  cbeb 7213016c      	bres	_IO_16to9_new1,#1
7001  cbef               L3333:
7002                     ; 2232   if (PA_IDR & (uint8_t)0x10) IO_16to9_new1 |= 0x01; // PA bit 4 = 1, Input 1 = 1
7004  cbef 7209500106    	btjf	_PA_IDR,#4,L5333
7007  cbf4 7210016c      	bset	_IO_16to9_new1,#0
7009  cbf8 2004          	jra	L7333
7010  cbfa               L5333:
7011                     ; 2233   else IO_16to9_new1 &= (uint8_t)(~0x01);
7013  cbfa 7211016c      	bres	_IO_16to9_new1,#0
7014  cbfe               L7333:
7015                     ; 2238   xor_tmp = (uint8_t)((IO_16to9 ^ IO_16to9_new1) & (IO_16to9 ^ IO_16to9_new2));
7017  cbfe c6016e        	ld	a,_IO_16to9
7018  cc01 c8016a        	xor	a,_IO_16to9_new2
7019  cc04 6b01          	ld	(OFST-1,sp),a
7021  cc06 c6016e        	ld	a,_IO_16to9
7022  cc09 c8016c        	xor	a,_IO_16to9_new1
7023  cc0c 1401          	and	a,(OFST-1,sp)
7024  cc0e 6b02          	ld	(OFST+0,sp),a
7026                     ; 2239   IO_16to9 = (uint8_t)(IO_16to9 ^ xor_tmp);
7028  cc10 c8016e        	xor	a,_IO_16to9
7029  cc13 c7016e        	ld	_IO_16to9,a
7030                     ; 2241   IO_16to9_new2 = IO_16to9_new1;
7032                     ; 2295 }
7035  cc16 85            	popw	x
7036  cc17 55016c016a    	mov	_IO_16to9_new2,_IO_16to9_new1
7037  cc1c 81            	ret	
7077                     ; 2298 void write_output_registers(void)
7077                     ; 2299 {
7078                     .text:	section	.text,new
7079  cc1d               _write_output_registers:
7081  cc1d 88            	push	a
7082       00000001      OFST:	set	1
7085                     ; 2353   xor_tmp = (uint8_t)(invert_output ^ IO_8to1);
7087  cc1e c60166        	ld	a,_invert_output
7088  cc21 c8016d        	xor	a,_IO_8to1
7089  cc24 6b01          	ld	(OFST+0,sp),a
7091                     ; 2354   if (xor_tmp & 0x80) PC_ODR |= (uint8_t)0x80; // Relay 8 off
7093  cc26 2a06          	jrpl	L5533
7096  cc28 721e500a      	bset	_PC_ODR,#7
7098  cc2c 2004          	jra	L7533
7099  cc2e               L5533:
7100                     ; 2355   else PC_ODR &= (uint8_t)~0x80; // Relay 8 on
7102  cc2e 721f500a      	bres	_PC_ODR,#7
7103  cc32               L7533:
7104                     ; 2356   if (xor_tmp & 0x40) PG_ODR |= (uint8_t)0x02; // Relay 7 off
7106  cc32 a540          	bcp	a,#64
7107  cc34 2706          	jreq	L1633
7110  cc36 7212501e      	bset	_PG_ODR,#1
7112  cc3a 2004          	jra	L3633
7113  cc3c               L1633:
7114                     ; 2357   else PG_ODR &= (uint8_t)~0x02; // Relay 7 on
7116  cc3c 7213501e      	bres	_PG_ODR,#1
7117  cc40               L3633:
7118                     ; 2358   if (xor_tmp & 0x20) PE_ODR |= (uint8_t)0x01; // Relay 6 off
7120  cc40 7b01          	ld	a,(OFST+0,sp)
7121  cc42 a520          	bcp	a,#32
7122  cc44 2706          	jreq	L5633
7125  cc46 72105014      	bset	_PE_ODR,#0
7127  cc4a 2004          	jra	L7633
7128  cc4c               L5633:
7129                     ; 2359   else PE_ODR &= (uint8_t)~0x01; // Relay 6 on
7131  cc4c 72115014      	bres	_PE_ODR,#0
7132  cc50               L7633:
7133                     ; 2360   if (xor_tmp & 0x10) PD_ODR |= (uint8_t)0x04; // Relay 5 off
7135  cc50 a510          	bcp	a,#16
7136  cc52 2706          	jreq	L1733
7139  cc54 7214500f      	bset	_PD_ODR,#2
7141  cc58 2004          	jra	L3733
7142  cc5a               L1733:
7143                     ; 2361   else PD_ODR &= (uint8_t)~0x04; // Relay 5 on
7145  cc5a 7215500f      	bres	_PD_ODR,#2
7146  cc5e               L3733:
7147                     ; 2362   if (xor_tmp & 0x08) PD_ODR |= (uint8_t)0x10; // Relay 4 off
7149  cc5e 7b01          	ld	a,(OFST+0,sp)
7150  cc60 a508          	bcp	a,#8
7151  cc62 2706          	jreq	L5733
7154  cc64 7218500f      	bset	_PD_ODR,#4
7156  cc68 2004          	jra	L7733
7157  cc6a               L5733:
7158                     ; 2363   else PD_ODR &= (uint8_t)~0x10; // Relay 4 on
7160  cc6a 7219500f      	bres	_PD_ODR,#4
7161  cc6e               L7733:
7162                     ; 2364   if (xor_tmp & 0x04) PD_ODR |= (uint8_t)0x40; // Relay 3 off
7164  cc6e a504          	bcp	a,#4
7165  cc70 2706          	jreq	L1043
7168  cc72 721c500f      	bset	_PD_ODR,#6
7170  cc76 2004          	jra	L3043
7171  cc78               L1043:
7172                     ; 2365   else PD_ODR &= (uint8_t)~0x40; // Relay 3 on
7174  cc78 721d500f      	bres	_PD_ODR,#6
7175  cc7c               L3043:
7176                     ; 2366   if (xor_tmp & 0x02) PA_ODR |= (uint8_t)0x20; // Relay 2 off
7178  cc7c 7b01          	ld	a,(OFST+0,sp)
7179  cc7e a502          	bcp	a,#2
7180  cc80 2706          	jreq	L5043
7183  cc82 721a5000      	bset	_PA_ODR,#5
7185  cc86 2004          	jra	L7043
7186  cc88               L5043:
7187                     ; 2367   else PA_ODR &= (uint8_t)~0x20; // Relay 2 on
7189  cc88 721b5000      	bres	_PA_ODR,#5
7190  cc8c               L7043:
7191                     ; 2368   if (xor_tmp & 0x01) PA_ODR |= (uint8_t)0x08; // Relay 1 off
7193  cc8c a501          	bcp	a,#1
7194  cc8e 2706          	jreq	L1143
7197  cc90 72165000      	bset	_PA_ODR,#3
7199  cc94 2004          	jra	L3143
7200  cc96               L1143:
7201                     ; 2369   else PA_ODR &= (uint8_t)~0x08; // Relay 1 on
7203  cc96 72175000      	bres	_PA_ODR,#3
7204  cc9a               L3143:
7205                     ; 2375 }
7208  cc9a 84            	pop	a
7209  cc9b 81            	ret	
7250                     ; 2378 void check_reset_button(void)
7250                     ; 2379 {
7251                     .text:	section	.text,new
7252  cc9c               _check_reset_button:
7254  cc9c 88            	push	a
7255       00000001      OFST:	set	1
7258                     ; 2384   if ((PA_IDR & 0x02) == 0) {
7260  cc9d 720250015d    	btjt	_PA_IDR,#1,L1343
7261                     ; 2386     for (i=0; i<100; i++) {
7263  cca2 0f01          	clr	(OFST+0,sp)
7265  cca4               L3343:
7266                     ; 2387       wait_timer(50000); // wait 50ms
7268  cca4 aec350        	ldw	x,#50000
7269  cca7 cde40a        	call	_wait_timer
7271                     ; 2388       if ((PA_IDR & 0x02) == 1) { // check Reset Button again. If released
7273  ccaa c65001        	ld	a,_PA_IDR
7274  ccad a402          	and	a,#2
7275  ccaf 4a            	dec	a
7276  ccb0 2602          	jrne	L1443
7277                     ; 2390         return;
7280  ccb2 84            	pop	a
7281  ccb3 81            	ret	
7282  ccb4               L1443:
7283                     ; 2386     for (i=0; i<100; i++) {
7285  ccb4 0c01          	inc	(OFST+0,sp)
7289  ccb6 7b01          	ld	a,(OFST+0,sp)
7290  ccb8 a164          	cp	a,#100
7291  ccba 25e8          	jrult	L3343
7292                     ; 2395     LEDcontrol(0);  // turn LED off
7294  ccbc 4f            	clr	a
7295  ccbd cda2a6        	call	_LEDcontrol
7298  ccc0               L5443:
7299                     ; 2396     while((PA_IDR & 0x02) == 0) {  // Wait for button release
7301  ccc0 72035001fb    	btjf	_PA_IDR,#1,L5443
7302                     ; 2399     magic4 = 0x00;
7304  ccc5 4f            	clr	a
7305  ccc6 ae402e        	ldw	x,#_magic4
7306  ccc9 cdf486        	call	c_eewrc
7308                     ; 2400     magic3 = 0x00;
7310  cccc 4f            	clr	a
7311  cccd ae402d        	ldw	x,#_magic3
7312  ccd0 cdf486        	call	c_eewrc
7314                     ; 2401     magic2 = 0x00;
7316  ccd3 4f            	clr	a
7317  ccd4 ae402c        	ldw	x,#_magic2
7318  ccd7 cdf486        	call	c_eewrc
7320                     ; 2402     magic1 = 0x00;
7322  ccda 4f            	clr	a
7323  ccdb ae402b        	ldw	x,#_magic1
7324  ccde cdf486        	call	c_eewrc
7326                     ; 2404     WWDG_WR = (uint8_t)0x7f;       // Window register reset
7328  cce1 357f50d2      	mov	_WWDG_WR,#127
7329                     ; 2405     WWDG_CR = (uint8_t)0xff;       // Set watchdog to timeout in 49ms
7331  cce5 35ff50d1      	mov	_WWDG_CR,#255
7332                     ; 2406     WWDG_WR = (uint8_t)0x60;       // Window register value - doesn't matter
7334  cce9 356050d2      	mov	_WWDG_WR,#96
7335                     ; 2409     wait_timer((uint16_t)50000);   // Wait for watchdog to generate reset
7337  cced aec350        	ldw	x,#50000
7338  ccf0 cde40a        	call	_wait_timer
7340                     ; 2410     wait_timer((uint16_t)50000);
7342  ccf3 aec350        	ldw	x,#50000
7343  ccf6 cde40a        	call	_wait_timer
7345                     ; 2411     wait_timer((uint16_t)50000);
7347  ccf9 aec350        	ldw	x,#50000
7348  ccfc cde40a        	call	_wait_timer
7350  ccff               L1343:
7351                     ; 2413 }
7354  ccff 84            	pop	a
7355  cd00 81            	ret	
7389                     ; 2416 void debugflash(void)
7389                     ; 2417 {
7390                     .text:	section	.text,new
7391  cd01               _debugflash:
7393  cd01 88            	push	a
7394       00000001      OFST:	set	1
7397                     ; 2432   LEDcontrol(0);     // turn LED off
7399  cd02 4f            	clr	a
7400  cd03 cda2a6        	call	_LEDcontrol
7402                     ; 2433   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7404  cd06 0f01          	clr	(OFST+0,sp)
7406  cd08               L5643:
7409  cd08 aec350        	ldw	x,#50000
7410  cd0b cde40a        	call	_wait_timer
7414  cd0e 0c01          	inc	(OFST+0,sp)
7418  cd10 7b01          	ld	a,(OFST+0,sp)
7419  cd12 a10a          	cp	a,#10
7420  cd14 25f2          	jrult	L5643
7421                     ; 2435   LEDcontrol(1);     // turn LED on
7423  cd16 a601          	ld	a,#1
7424  cd18 cda2a6        	call	_LEDcontrol
7426                     ; 2436   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7428  cd1b 0f01          	clr	(OFST+0,sp)
7430  cd1d               L3743:
7433  cd1d aec350        	ldw	x,#50000
7434  cd20 cde40a        	call	_wait_timer
7438  cd23 0c01          	inc	(OFST+0,sp)
7442  cd25 7b01          	ld	a,(OFST+0,sp)
7443  cd27 a10a          	cp	a,#10
7444  cd29 25f2          	jrult	L3743
7445                     ; 2437 }
7448  cd2b 84            	pop	a
7449  cd2c 81            	ret	
7483                     ; 2440 void fastflash(void)
7483                     ; 2441 {
7484                     .text:	section	.text,new
7485  cd2d               _fastflash:
7487  cd2d 88            	push	a
7488       00000001      OFST:	set	1
7491                     ; 2456   for (i=0; i<10; i++) {
7493  cd2e 0f01          	clr	(OFST+0,sp)
7495  cd30               L5153:
7496                     ; 2457     LEDcontrol(0);     // turn LED off
7498  cd30 4f            	clr	a
7499  cd31 cda2a6        	call	_LEDcontrol
7501                     ; 2458     wait_timer((uint16_t)50000); // wait 50ms
7503  cd34 aec350        	ldw	x,#50000
7504  cd37 cde40a        	call	_wait_timer
7506                     ; 2460     LEDcontrol(1);     // turn LED on
7508  cd3a a601          	ld	a,#1
7509  cd3c cda2a6        	call	_LEDcontrol
7511                     ; 2461     wait_timer((uint16_t)50000); // wait 50ms
7513  cd3f aec350        	ldw	x,#50000
7514  cd42 cde40a        	call	_wait_timer
7516                     ; 2456   for (i=0; i<10; i++) {
7518  cd45 0c01          	inc	(OFST+0,sp)
7522  cd47 7b01          	ld	a,(OFST+0,sp)
7523  cd49 a10a          	cp	a,#10
7524  cd4b 25e3          	jrult	L5153
7525                     ; 2463 }
7528  cd4d 84            	pop	a
7529  cd4e 81            	ret	
7554                     ; 2466 void oneflash(void)
7554                     ; 2467 {
7555                     .text:	section	.text,new
7556                     _oneflash:
7560                     ; 2482   LEDcontrol(0);     // turn LED off
7562                     	clr	a
7563                     	call	_LEDcontrol
7565                     ; 2483   wait_timer((uint16_t)25000); // wait 25ms
7567                     	ldw	x,#25000
7568                     	call	_wait_timer
7570                     ; 2485   LEDcontrol(1);     // turn LED on
7572                     	ld	a,#1
7574                     ; 2486 }
7577                     	jp	_LEDcontrol
8905                     	switch	.bss
8906  0067               _TRANSMIT_counter:
8907  0067 00000000      	ds.b	4
8908                     	xdef	_TRANSMIT_counter
8909  006b               _TXERIF_counter:
8910  006b 00000000      	ds.b	4
8911                     	xdef	_TXERIF_counter
8912  006f               _RXERIF_counter:
8913  006f 00000000      	ds.b	4
8914                     	xdef	_RXERIF_counter
8915  0073               _topic_base_len:
8916  0073 00            	ds.b	1
8917                     	xdef	_topic_base_len
8918  0074               _topic_base:
8919  0074 000000000000  	ds.b	44
8920                     	xdef	_topic_base
8921  00a0               _mqtt_restart_step:
8922  00a0 00            	ds.b	1
8923                     	xdef	_mqtt_restart_step
8924                     	xref	_MQTT_error_status
8925  00a1               _mqtt_conn:
8926  00a1 0000          	ds.b	2
8927                     	xdef	_mqtt_conn
8928                     	xref	_mqtt_sendbuf
8929  00a3               _mqtt_start_retry:
8930  00a3 00            	ds.b	1
8931                     	xdef	_mqtt_start_retry
8932  00a4               _mqtt_sanity_ctr:
8933  00a4 00            	ds.b	1
8934                     	xdef	_mqtt_sanity_ctr
8935  00a5               _mqtt_start_ctr2:
8936  00a5 00            	ds.b	1
8937                     	xdef	_mqtt_start_ctr2
8938  00a6               _mqtt_start_ctr1:
8939  00a6 00            	ds.b	1
8940                     	xdef	_mqtt_start_ctr1
8941  00a7               _mqtt_start_status:
8942  00a7 00            	ds.b	1
8943                     	xdef	_mqtt_start_status
8944  00a8               _mqtt_start:
8945  00a8 00            	ds.b	1
8946                     	xdef	_mqtt_start
8947  00a9               _client_id_text:
8948  00a9 000000000000  	ds.b	26
8949                     	xdef	_client_id_text
8950  00c3               _client_id:
8951  00c3 0000          	ds.b	2
8952                     	xdef	_client_id
8953  00c5               _mqttclient:
8954  00c5 000000000000  	ds.b	44
8955                     	xdef	_mqttclient
8956  00f1               _mqtt_keep_alive:
8957  00f1 0000          	ds.b	2
8958                     	xdef	_mqtt_keep_alive
8959  00f3               _application_message:
8960  00f3 000000        	ds.b	3
8961                     	xdef	_application_message
8962  00f6               _Port_Mqttd:
8963  00f6 0000          	ds.b	2
8964                     	xdef	_Port_Mqttd
8965  00f8               _mqttport:
8966  00f8 0000          	ds.b	2
8967                     	xdef	_mqttport
8968  00fa               _connect_flags:
8969  00fa 00            	ds.b	1
8970                     	xdef	_connect_flags
8971                     	xref	_OctetArray
8972                     	xref	_second_counter
8973  00fb               _time_mark2:
8974  00fb 00000000      	ds.b	4
8975                     	xdef	_time_mark2
8976  00ff               _IpAddr:
8977  00ff 00000000      	ds.b	4
8978                     	xdef	_IpAddr
8979  0103               _Port_Httpd:
8980  0103 0000          	ds.b	2
8981                     	xdef	_Port_Httpd
8982  0105               _mqtt_parse_complete:
8983  0105 00            	ds.b	1
8984                     	xdef	_mqtt_parse_complete
8985  0106               _parse_complete:
8986  0106 00            	ds.b	1
8987                     	xdef	_parse_complete
8988  0107               _mqtt_close_tcp:
8989  0107 00            	ds.b	1
8990                     	xdef	_mqtt_close_tcp
8991  0108               _restart_reboot_step:
8992  0108 00            	ds.b	1
8993                     	xdef	_restart_reboot_step
8994  0109               _restart_request:
8995  0109 00            	ds.b	1
8996                     	xdef	_restart_request
8997  010a               _user_reboot_request:
8998  010a 00            	ds.b	1
8999                     	xdef	_user_reboot_request
9000  010b               _reboot_request:
9001  010b 00            	ds.b	1
9002                     	xdef	_reboot_request
9003  010c               _mac_string:
9004  010c 000000000000  	ds.b	13
9005                     	xdef	_mac_string
9006  0119               _Pending_uip_ethaddr_oct:
9007  0119 000000000000  	ds.b	6
9008                     	xdef	_Pending_uip_ethaddr_oct
9009  011f               _Pending_config_settings:
9010  011f 000000000000  	ds.b	6
9011                     	xdef	_Pending_config_settings
9012  0125               _Pending_devicename:
9013  0125 000000000000  	ds.b	20
9014                     	xdef	_Pending_devicename
9015  0139               _Pending_port:
9016  0139 0000          	ds.b	2
9017                     	xdef	_Pending_port
9018  013b               _Pending_netmask:
9019  013b 00000000      	ds.b	4
9020                     	xdef	_Pending_netmask
9021  013f               _Pending_draddr:
9022  013f 00000000      	ds.b	4
9023                     	xdef	_Pending_draddr
9024  0143               _Pending_hostaddr:
9025  0143 00000000      	ds.b	4
9026                     	xdef	_Pending_hostaddr
9027  0147               _Pending_mqtt_password:
9028  0147 000000000000  	ds.b	11
9029                     	xdef	_Pending_mqtt_password
9030  0152               _Pending_mqtt_username:
9031  0152 000000000000  	ds.b	11
9032                     	xdef	_Pending_mqtt_username
9033  015d               _Pending_mqttport:
9034  015d 0000          	ds.b	2
9035                     	xdef	_Pending_mqttport
9036  015f               _Pending_mqttserveraddr:
9037  015f 00000000      	ds.b	4
9038                     	xdef	_Pending_mqttserveraddr
9039  0163               _stack_error:
9040  0163 00            	ds.b	1
9041                     	xdef	_stack_error
9042  0164               _state_request:
9043  0164 00            	ds.b	1
9044                     	xdef	_state_request
9045  0165               _invert_input:
9046  0165 00            	ds.b	1
9047                     	xdef	_invert_input
9048  0166               _invert_output:
9049  0166 00            	ds.b	1
9050                     	xdef	_invert_output
9051  0167               _IO_8to1_sent:
9052  0167 00            	ds.b	1
9053                     	xdef	_IO_8to1_sent
9054  0168               _IO_16to9_sent:
9055  0168 00            	ds.b	1
9056                     	xdef	_IO_16to9_sent
9057  0169               _IO_8to1_new2:
9058  0169 00            	ds.b	1
9059                     	xdef	_IO_8to1_new2
9060  016a               _IO_16to9_new2:
9061  016a 00            	ds.b	1
9062                     	xdef	_IO_16to9_new2
9063  016b               _IO_8to1_new1:
9064  016b 00            	ds.b	1
9065                     	xdef	_IO_8to1_new1
9066  016c               _IO_16to9_new1:
9067  016c 00            	ds.b	1
9068                     	xdef	_IO_16to9_new1
9069  016d               _IO_8to1:
9070  016d 00            	ds.b	1
9071                     	xdef	_IO_8to1
9072  016e               _IO_16to9:
9073  016e 00            	ds.b	1
9074                     	xdef	_IO_16to9
9075                     .eeprom:	section	.data
9076  4000               _stored_devicename:
9077  4000 000000000000  	ds.b	20
9078                     	xdef	_stored_devicename
9079  4014               _stored_IO_8to1:
9080  4014 00            	ds.b	1
9081                     	xdef	_stored_IO_8to1
9082  4015               _stored_unused1:
9083  4015 00            	ds.b	1
9084                     	xdef	_stored_unused1
9085  4016               _stored_unused2:
9086  4016 00            	ds.b	1
9087                     	xdef	_stored_unused2
9088  4017               _stored_uip_ethaddr_oct:
9089  4017 000000000000  	ds.b	6
9090                     	xdef	_stored_uip_ethaddr_oct
9091  401d               _stored_port:
9092  401d 0000          	ds.b	2
9093                     	xdef	_stored_port
9094  401f               _stored_netmask:
9095  401f 00000000      	ds.b	4
9096                     	xdef	_stored_netmask
9097  4023               _stored_draddr:
9098  4023 00000000      	ds.b	4
9099                     	xdef	_stored_draddr
9100  4027               _stored_hostaddr:
9101  4027 00000000      	ds.b	4
9102                     	xdef	_stored_hostaddr
9103  402b               _magic1:
9104  402b 00            	ds.b	1
9105                     	xdef	_magic1
9106  402c               _magic2:
9107  402c 00            	ds.b	1
9108                     	xdef	_magic2
9109  402d               _magic3:
9110  402d 00            	ds.b	1
9111                     	xdef	_magic3
9112  402e               _magic4:
9113  402e 00            	ds.b	1
9114                     	xdef	_magic4
9115  402f               _stored_mqttport:
9116  402f 0000          	ds.b	2
9117                     	xdef	_stored_mqttport
9118  4031               _stored_mqttserveraddr:
9119  4031 00000000      	ds.b	4
9120                     	xdef	_stored_mqttserveraddr
9121  4035               _stored_mqtt_username:
9122  4035 000000000000  	ds.b	11
9123                     	xdef	_stored_mqtt_username
9124  4040               _stored_mqtt_password:
9125  4040 000000000000  	ds.b	11
9126                     	xdef	_stored_mqtt_password
9127  404b               _stored_IO_16to9:
9128  404b 00            	ds.b	1
9129                     	xdef	_stored_IO_16to9
9130  404c               _stored_config_settings:
9131  404c 000000000000  	ds.b	6
9132                     	xdef	_stored_config_settings
9133                     	xdef	_stack_limit2
9134                     	xdef	_stack_limit1
9135                     	xref	_mqtt_disconnect
9136                     	xref	_mqtt_subscribe
9137                     	xref	_mqtt_publish
9138                     	xref	_mqtt_connect
9139                     	xref	_mqtt_init
9140                     	xref	_strlen
9141                     	xref	_strcat
9142                     	xref	_wait_timer
9143                     	xref	_arp_timer_expired
9144                     	xref	_periodic_timer_expired
9145                     	xref	_clock_init
9146                     	xref	_LEDcontrol
9147                     	xref	_gpio_init
9148                     	xref	_check_mqtt_server_arp_entry
9149                     	xref	_uip_arp_timer
9150                     	xref	_uip_arp_out
9151                     	xref	_uip_arp_arpin
9152                     	xref	_uip_arp_init
9153                     	xref	_uip_ethaddr
9154                     	xref	_uip_mqttserveraddr
9155                     	xref	_uip_draddr
9156                     	xref	_uip_netmask
9157                     	xref	_uip_hostaddr
9158                     	xref	_uip_process
9159                     	xref	_uip_conns
9160                     	xref	_uip_conn
9161                     	xref	_uip_len
9162                     	xref	_uip_appdata
9163                     	xref	_htons
9164                     	xref	_uip_connect
9165                     	xref	_uip_buf
9166                     	xref	_uip_init
9167                     	xref	_GpioSetPin
9168                     	xref	_HttpDInit
9169                     	xref	_emb_itoa
9170                     	xref	_Enc28j60Send
9171                     	xref	_Enc28j60Receive
9172                     	xref	_Enc28j60Init
9173                     	xref	_spi_init
9174                     	xdef	_publish_pinstate_all
9175                     	xdef	_publish_pinstate
9176                     	xdef	_publish_outbound
9177                     	xdef	_publish_callback
9178                     	xdef	_mqtt_sanity_check
9179                     	xdef	_mqtt_startup
9180                     	xdef	_debugflash
9181                     	xdef	_fastflash
9182                     	xdef	_oneflash
9183                     	xdef	_reboot
9184                     	xdef	_restart
9185                     	xdef	_check_restart_reboot
9186                     	xdef	_check_reset_button
9187                     	xdef	_write_output_registers
9188                     	xdef	_read_input_registers
9189                     	xdef	_check_runtime_changes
9190                     	xdef	_update_mac_string
9191                     	xdef	_check_eeprom_settings
9192                     	xdef	_unlock_eeprom
9193                     	xdef	_main
9194                     	switch	.const
9195  9cda               L5242:
9196  9cda 2f7374617465  	dc.b	"/state",0
9197  9ce1               L7632:
9198  9ce1 2f6f75745f6f  	dc.b	"/out_off",0
9199  9cea               L3632:
9200  9cea 2f6f75745f6f  	dc.b	"/out_on",0
9201  9cf2               L5532:
9202  9cf2 2f696e5f6f66  	dc.b	"/in_off",0
9203  9cfa               L1532:
9204  9cfa 2f696e5f6f6e  	dc.b	"/in_on",0
9205  9d01               L5302:
9206  9d01 6f6e6c696e65  	dc.b	"online",0
9207  9d08               L5202:
9208  9d08 2f7374617465  	dc.b	"/state-req",0
9209  9d13               L5102:
9210  9d13 2f6f666600    	dc.b	"/off",0
9211  9d18               L5002:
9212  9d18 2f6f6e00      	dc.b	"/on",0
9213  9d1c               L1771:
9214  9d1c 6f66666c696e  	dc.b	"offline",0
9215  9d24               L7671:
9216  9d24 2f7374617475  	dc.b	"/status",0
9217                     	xref.b	c_lreg
9237                     	xref	c_ladc
9238                     	xref	c_lcmp
9239                     	xref	c_ltor
9240                     	xref	c_eewrw
9241                     	xref	c_eewrc
9242                     	end
