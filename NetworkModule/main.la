   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2518                     .iconst:	section	.bss
2519  05fe               _stack_limit2:
2520  05fe 00            	ds.b	1
2521  05ff               _stack_limit1:
2522  05ff 00            	ds.b	1
2523                     .const:	section	.text
2524  9e68               L5261_devicetype:
2525  9e68 4e6574776f72  	dc.b	"NetworkModule/",0
2624                     ; 296 int main(void)
2624                     ; 297 {
2626                     .text:	section	.text,new
2627  bd07               _main:
2629  bd07 88            	push	a
2630       00000001      OFST:	set	1
2633                     ; 301   parse_complete = 0;
2635  bd08 725f0106      	clr	_parse_complete
2636                     ; 302   mqtt_parse_complete = 0;
2638  bd0c 725f0105      	clr	_mqtt_parse_complete
2639                     ; 303   reboot_request = 0;
2641  bd10 725f010b      	clr	_reboot_request
2642                     ; 304   user_reboot_request = 0;
2644  bd14 725f010a      	clr	_user_reboot_request
2645                     ; 305   restart_request = 0;
2647  bd18 725f0109      	clr	_restart_request
2648                     ; 307   time_mark2 = 0;           // Time capture used in reboot
2650  bd1c 5f            	clrw	x
2651  bd1d cf00fd        	ldw	_time_mark2+2,x
2652  bd20 cf00fb        	ldw	_time_mark2,x
2653                     ; 310   restart_reboot_step = RESTART_REBOOT_IDLE;
2655  bd23 725f0108      	clr	_restart_reboot_step
2656                     ; 311   mqtt_close_tcp = 0;
2658  bd27 725f0107      	clr	_mqtt_close_tcp
2659                     ; 312   stack_error = 0;
2661  bd2b 725f0163      	clr	_stack_error
2662                     ; 315   mqtt_start = MQTT_START_TCP_CONNECT;	 // Tracks the MQTT startup steps
2664  bd2f 350100a8      	mov	_mqtt_start,#1
2665                     ; 316   mqtt_start_status = MQTT_START_NOT_STARTED; // Tracks error states during
2667  bd33 725f00a7      	clr	_mqtt_start_status
2668                     ; 318   mqtt_keep_alive = 60;                  // Ping interval in seconds
2670  bd37 ae003c        	ldw	x,#60
2671  bd3a cf00f1        	ldw	_mqtt_keep_alive,x
2672                     ; 320   mqtt_start_ctr1 = 0;			 // Tracks time for the MQTT startup
2674  bd3d 725f00a6      	clr	_mqtt_start_ctr1
2675                     ; 322   mqtt_start_ctr2 = 0;			 // Tracks time for the MQTT startup
2677  bd41 725f00a5      	clr	_mqtt_start_ctr2
2678                     ; 324   mqtt_sanity_ctr = 0;			 // Tracks time for the MQTT sanity
2680  bd45 725f00a4      	clr	_mqtt_sanity_ctr
2681                     ; 326   mqtt_start_retry = 0;                  // Flag to retry the ARP/TCP Connect
2683  bd49 725f00a3      	clr	_mqtt_start_retry
2684                     ; 327   MQTT_error_status = 0;                 // For MQTT error status display in
2686  bd4d 725f029b      	clr	_MQTT_error_status
2687                     ; 329   mqtt_restart_step = MQTT_RESTART_IDLE; // Step counter for MQTT restart
2689  bd51 725f00a0      	clr	_mqtt_restart_step
2690                     ; 330   strcpy(topic_base, devicetype);        // Initial content of the topic_base.
2692  bd55 ae0074        	ldw	x,#_topic_base
2693  bd58 90ae9e68      	ldw	y,#L5261_devicetype
2694  bd5c               L6:
2695  bd5c 90f6          	ld	a,(y)
2696  bd5e 905c          	incw	y
2697  bd60 f7            	ld	(x),a
2698  bd61 5c            	incw	x
2699  bd62 4d            	tnz	a
2700  bd63 26f7          	jrne	L6
2701                     ; 336   state_request = STATE_REQUEST_IDLE;    // Set the state request received to
2703  bd65 c70164        	ld	_state_request,a
2704                     ; 338   TXERIF_counter = 0;                    // Initialize the TXERIF error counter
2706  bd68 5f            	clrw	x
2707  bd69 cf006d        	ldw	_TXERIF_counter+2,x
2708  bd6c cf006b        	ldw	_TXERIF_counter,x
2709                     ; 339   RXERIF_counter = 0;                    // Initialize the RXERIF error counter
2711  bd6f cf0071        	ldw	_RXERIF_counter+2,x
2712  bd72 cf006f        	ldw	_RXERIF_counter,x
2713                     ; 340   TRANSMIT_counter = 0;
2715  bd75 cf0069        	ldw	_TRANSMIT_counter+2,x
2716  bd78 cf0067        	ldw	_TRANSMIT_counter,x
2717                     ; 346   clock_init();            // Initialize and enable clocks and timers
2719  bd7b cde538        	call	_clock_init
2721                     ; 348   gpio_init();             // Initialize and enable gpio pins
2723  bd7e cda41b        	call	_gpio_init
2725                     ; 350   spi_init();              // Initialize the SPI bit bang interface to the
2727  bd81 cde440        	call	_spi_init
2729                     ; 353   LEDcontrol(1);           // turn LED on
2731  bd84 a601          	ld	a,#1
2732  bd86 cda464        	call	_LEDcontrol
2734                     ; 355   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2736  bd89 cdc3f1        	call	_unlock_eeprom
2738                     ; 357   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2740  bd8c cdc401        	call	_check_eeprom_settings
2742                     ; 361   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2744  bd8f cda024        	call	_Enc28j60Init
2746                     ; 363   uip_arp_init();          // Initialize the ARP module
2748  bd92 cdf1a9        	call	_uip_arp_init
2750                     ; 365   uip_init();              // Initialize uIP Web Server
2752  bd95 cde746        	call	_uip_init
2754                     ; 367   HttpDInit();             // Initialize listening ports
2756  bd98 cdac89        	call	_HttpDInit
2758                     ; 374   stack_limit1 = 0xaa;
2760  bd9b 35aa05ff      	mov	_stack_limit1,#170
2761                     ; 375   stack_limit2 = 0x55;
2763  bd9f 355505fe      	mov	_stack_limit2,#85
2764                     ; 380   mqtt_init(&mqttclient,
2764                     ; 381             mqtt_sendbuf,
2764                     ; 382 	    sizeof(mqtt_sendbuf),
2764                     ; 383 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
2764                     ; 384 	    UIP_APPDATA_SIZE,
2764                     ; 385 	    publish_callback);
2766  bda3 aec159        	ldw	x,#_publish_callback
2767  bda6 89            	pushw	x
2768  bda7 ae01be        	ldw	x,#446
2769  bdaa 89            	pushw	x
2770  bdab ae03a9        	ldw	x,#_uip_buf+54
2771  bdae 89            	pushw	x
2772  bdaf ae00c8        	ldw	x,#200
2773  bdb2 89            	pushw	x
2774  bdb3 ae016f        	ldw	x,#_mqtt_sendbuf
2775  bdb6 89            	pushw	x
2776  bdb7 ae00c5        	ldw	x,#_mqttclient
2777  bdba cdcfe8        	call	_mqtt_init
2779  bdbd 5b0a          	addw	sp,#10
2780  bdbf               L1561:
2781                     ; 499     uip_len = Enc28j60Receive(uip_buf); // Check for incoming packets
2783  bdbf ae0373        	ldw	x,#_uip_buf
2784  bdc2 cda184        	call	_Enc28j60Receive
2786  bdc5 cf036f        	ldw	_uip_len,x
2787                     ; 501     if (uip_len > 0) {
2789  bdc8 2738          	jreq	L5561
2790                     ; 505       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2792  bdca ae0800        	ldw	x,#2048
2793  bdcd cdf184        	call	_htons
2795  bdd0 c3037f        	cpw	x,_uip_buf+12
2796  bdd3 2612          	jrne	L7561
2797                     ; 506         uip_input(); // Calls uip_process(UIP_DATA) to process a received
2799  bdd5 a601          	ld	a,#1
2800  bdd7 cde856        	call	_uip_process
2802                     ; 511         if (uip_len > 0) {
2804  bdda ce036f        	ldw	x,_uip_len
2805  bddd 2723          	jreq	L5561
2806                     ; 512           uip_arp_out();
2808  bddf cdf3d2        	call	_uip_arp_out
2810                     ; 516           Enc28j60Send(uip_buf, uip_len);
2812  bde2 ce036f        	ldw	x,_uip_len
2814  bde5 2013          	jp	LC001
2815  bde7               L7561:
2816                     ; 519       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2818  bde7 ae0806        	ldw	x,#2054
2819  bdea cdf184        	call	_htons
2821  bded c3037f        	cpw	x,_uip_buf+12
2822  bdf0 2610          	jrne	L5561
2823                     ; 520         uip_arp_arpin();
2825  bdf2 cdf323        	call	_uip_arp_arpin
2827                     ; 524         if (uip_len > 0) {
2829  bdf5 ce036f        	ldw	x,_uip_len
2830  bdf8 2708          	jreq	L5561
2831                     ; 528           Enc28j60Send(uip_buf, uip_len);
2834  bdfa               LC001:
2835  bdfa 89            	pushw	x
2836  bdfb ae0373        	ldw	x,#_uip_buf
2837  bdfe cda231        	call	_Enc28j60Send
2838  be01 85            	popw	x
2839  be02               L5561:
2840                     ; 538     if (mqtt_start != MQTT_START_COMPLETE
2840                     ; 539      && mqtt_restart_step == MQTT_RESTART_IDLE
2840                     ; 540      && restart_reboot_step == RESTART_REBOOT_IDLE) {
2842  be02 c600a8        	ld	a,_mqtt_start
2843  be05 a114          	cp	a,#20
2844  be07 270d          	jreq	L1761
2846  be09 c600a0        	ld	a,_mqtt_restart_step
2847  be0c 2608          	jrne	L1761
2849  be0e c60108        	ld	a,_restart_reboot_step
2850  be11 2603          	jrne	L1761
2851                     ; 541        mqtt_startup();
2853  be13 cdbe7c        	call	_mqtt_startup
2855  be16               L1761:
2856                     ; 545     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
2858  be16 c60108        	ld	a,_restart_reboot_step
2859  be19 2603          	jrne	L3761
2860                     ; 546       mqtt_sanity_check();
2862  be1b cdc0a2        	call	_mqtt_sanity_check
2864  be1e               L3761:
2865                     ; 550     if (periodic_timer_expired()) {
2867  be1e cde5ca        	call	_periodic_timer_expired
2869  be21 4d            	tnz	a
2870  be22 2743          	jreq	L5761
2871                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2873  be24 4f            	clr	a
2874  be25 6b01          	ld	(OFST+0,sp),a
2876  be27               L5071:
2877                     ; 553 	uip_periodic(i);
2879  be27 97            	ld	xl,a
2880  be28 a629          	ld	a,#41
2881  be2a 42            	mul	x,a
2882  be2b 1c02c9        	addw	x,#_uip_conns
2883  be2e cf036d        	ldw	_uip_conn,x
2886  be31 a602          	ld	a,#2
2887  be33 cde856        	call	_uip_process
2889                     ; 572 	if (uip_len > 0) {
2891  be36 ce036f        	ldw	x,_uip_len
2892  be39 270e          	jreq	L1171
2893                     ; 573 	  uip_arp_out(); // Verifies arp entry in the ARP table and builds LLH
2895  be3b cdf3d2        	call	_uip_arp_out
2897                     ; 574           Enc28j60Send(uip_buf, uip_len);
2899  be3e ce036f        	ldw	x,_uip_len
2900  be41 89            	pushw	x
2901  be42 ae0373        	ldw	x,#_uip_buf
2902  be45 cda231        	call	_Enc28j60Send
2904  be48 85            	popw	x
2905  be49               L1171:
2906                     ; 577         mqtt_start_ctr1++; // Increment the MQTT start loop timer 1. This is
2908  be49 725c00a6      	inc	_mqtt_start_ctr1
2909                     ; 581         mqtt_start_ctr2++; // Increment the MQTT start loop timer 2. This is
2911  be4d 725c00a5      	inc	_mqtt_start_ctr2
2912                     ; 584         mqtt_sanity_ctr++; // Increment the MQTT sanity loop timer. This is
2914  be51 725c00a4      	inc	_mqtt_sanity_ctr
2915                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2917  be55 0c01          	inc	(OFST+0,sp)
2921  be57 7b01          	ld	a,(OFST+0,sp)
2922  be59 a104          	cp	a,#4
2923  be5b 25ca          	jrult	L5071
2924                     ; 594       if (mqtt_start == MQTT_START_COMPLETE) {
2926  be5d c600a8        	ld	a,_mqtt_start
2927  be60 a114          	cp	a,#20
2928  be62 2603          	jrne	L5761
2929                     ; 595         publish_outbound();
2931  be64 cdc206        	call	_publish_outbound
2933  be67               L5761:
2934                     ; 602     if (arp_timer_expired()) {
2936  be67 cde603        	call	_arp_timer_expired
2938  be6a 4d            	tnz	a
2939  be6b 2703          	jreq	L5171
2940                     ; 603       uip_arp_timer(); // Clean out old ARP Table entries. Any entry that has
2942  be6d cdf1cc        	call	_uip_arp_timer
2944  be70               L5171:
2945                     ; 610     check_runtime_changes();
2947  be70 cdc90b        	call	_check_runtime_changes
2949                     ; 613     check_reset_button();
2951  be73 cdcea5        	call	_check_reset_button
2953                     ; 618     check_restart_reboot();
2955  be76 cdcc14        	call	_check_restart_reboot
2958  be79 ccbdbf        	jra	L1561
3009                     ; 646 void mqtt_startup(void)
3009                     ; 647 {
3010                     .text:	section	.text,new
3011  be7c               _mqtt_startup:
3015                     ; 663   if (mqtt_start == MQTT_START_TCP_CONNECT) {
3017  be7c c600a8        	ld	a,_mqtt_start
3018  be7f a101          	cp	a,#1
3019  be81 2630          	jrne	L7271
3020                     ; 664     if (stored_mqttserveraddr[3] != 0) {
3022  be83 c64034        	ld	a,_stored_mqttserveraddr+3
3023  be86 2603ccc0a1    	jreq	L7371
3024                     ; 684       mqtt_conn = uip_connect(&uip_mqttserveraddr, Port_Mqttd, Port_Mqttd);
3026  be8b ce00f6        	ldw	x,_Port_Mqttd
3027  be8e 89            	pushw	x
3028  be8f 89            	pushw	x
3029  be90 ae02b4        	ldw	x,#_uip_mqttserveraddr
3030  be93 cde775        	call	_uip_connect
3032  be96 5b04          	addw	sp,#4
3033  be98 cf00a1        	ldw	_mqtt_conn,x
3034                     ; 685       if (mqtt_conn != NULL) {
3036  be9b 2711          	jreq	L3371
3037                     ; 686         mqtt_start_ctr1 = 0; // Clear 100ms counter
3039  be9d 725f00a6      	clr	_mqtt_start_ctr1
3040                     ; 687         mqtt_start_ctr2 = 0; // Clear 100ms counter
3042  bea1 725f00a5      	clr	_mqtt_start_ctr2
3043                     ; 688         mqtt_start_status = MQTT_START_CONNECTIONS_GOOD;
3045  bea5 351000a7      	mov	_mqtt_start_status,#16
3046                     ; 689         mqtt_start = MQTT_START_VERIFY_ARP;
3048  bea9 350200a8      	mov	_mqtt_start,#2
3051  bead 81            	ret	
3052  beae               L3371:
3053                     ; 692         mqtt_start_status |= MQTT_START_CONNECTIONS_ERROR;
3055  beae 721000a7      	bset	_mqtt_start_status,#0
3057  beb2 81            	ret	
3058  beb3               L7271:
3059                     ; 697   else if (mqtt_start == MQTT_START_VERIFY_ARP
3059                     ; 698         && mqtt_start_ctr2 > 10) {
3061  beb3 a102          	cp	a,#2
3062  beb5 263a          	jrne	L1471
3064  beb7 c600a5        	ld	a,_mqtt_start_ctr2
3065  beba a10b          	cp	a,#11
3066  bebc 2533          	jrult	L1471
3067                     ; 699     mqtt_start_ctr2 = 0; // Clear 100ms counter
3069  bebe 725f00a5      	clr	_mqtt_start_ctr2
3070                     ; 706     if (check_mqtt_server_arp_entry() == 1) {
3072  bec2 cdf51d        	call	_check_mqtt_server_arp_entry
3074  bec5 5a            	decw	x
3075  bec6 2611          	jrne	L3471
3076                     ; 708       mqtt_start_retry = 0;
3078  bec8 725f00a3      	clr	_mqtt_start_retry
3079                     ; 709       mqtt_start_ctr1 = 0; // Clear 100ms counter
3081  becc 725f00a6      	clr	_mqtt_start_ctr1
3082                     ; 710       mqtt_start_status |= MQTT_START_ARP_REQUEST_GOOD;
3084  bed0 721a00a7      	bset	_mqtt_start_status,#5
3085                     ; 711       mqtt_start = MQTT_START_VERIFY_TCP;
3087  bed4 350300a8      	mov	_mqtt_start,#3
3090  bed8 81            	ret	
3091  bed9               L3471:
3092                     ; 713     else if (mqtt_start_ctr1 > 150) {
3094  bed9 c600a6        	ld	a,_mqtt_start_ctr1
3095  bedc a197          	cp	a,#151
3096  bede 25a8          	jrult	L7371
3097                     ; 716       mqtt_start_status |= MQTT_START_ARP_REQUEST_ERROR;
3099  bee0 721200a7      	bset	_mqtt_start_status,#1
3100                     ; 717       mqtt_start = MQTT_START_TCP_CONNECT;
3102  bee4 350100a8      	mov	_mqtt_start,#1
3103                     ; 719       mqtt_start_status = MQTT_START_NOT_STARTED;
3105  bee8 725f00a7      	clr	_mqtt_start_status
3106                     ; 720       mqtt_start_retry++;
3108  beec 725c00a3      	inc	_mqtt_start_retry
3110  bef0 81            	ret	
3111  bef1               L1471:
3112                     ; 724   else if (mqtt_start == MQTT_START_VERIFY_TCP
3112                     ; 725         && mqtt_start_ctr2 > 10) {
3114  bef1 c600a8        	ld	a,_mqtt_start
3115  bef4 a103          	cp	a,#3
3116  bef6 263e          	jrne	L3571
3118  bef8 c600a5        	ld	a,_mqtt_start_ctr2
3119  befb a10b          	cp	a,#11
3120  befd 2537          	jrult	L3571
3121                     ; 726     mqtt_start_ctr2 = 0; // Clear 100ms counter
3123  beff 725f00a5      	clr	_mqtt_start_ctr2
3124                     ; 734     if ((mqtt_conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
3126  bf03 ce00a1        	ldw	x,_mqtt_conn
3127  bf06 e619          	ld	a,(25,x)
3128  bf08 a40f          	and	a,#15
3129  bf0a a103          	cp	a,#3
3130  bf0c 260d          	jrne	L5571
3131                     ; 735       mqtt_start_retry = 0;
3133  bf0e 725f00a3      	clr	_mqtt_start_retry
3134                     ; 736       mqtt_start_status |= MQTT_START_TCP_CONNECT_GOOD;
3136  bf12 721c00a7      	bset	_mqtt_start_status,#6
3137                     ; 737       mqtt_start = MQTT_START_QUEUE_CONNECT;
3139  bf16 350400a8      	mov	_mqtt_start,#4
3142  bf1a 81            	ret	
3143  bf1b               L5571:
3144                     ; 739     else if (mqtt_start_ctr1 > 150) {
3146  bf1b c600a6        	ld	a,_mqtt_start_ctr1
3147  bf1e a197          	cp	a,#151
3148  bf20 2403ccc0a1    	jrult	L7371
3149                     ; 742       mqtt_start_status |= MQTT_START_TCP_CONNECT_ERROR;
3151  bf25 721400a7      	bset	_mqtt_start_status,#2
3152                     ; 743       mqtt_start = MQTT_START_TCP_CONNECT;
3154  bf29 350100a8      	mov	_mqtt_start,#1
3155                     ; 745       mqtt_start_status = MQTT_START_NOT_STARTED; 
3157  bf2d 725f00a7      	clr	_mqtt_start_status
3158                     ; 746       mqtt_start_retry++;
3160  bf31 725c00a3      	inc	_mqtt_start_retry
3162  bf35 81            	ret	
3163  bf36               L3571:
3164                     ; 750   else if (mqtt_start == MQTT_START_QUEUE_CONNECT) {
3166  bf36 c600a8        	ld	a,_mqtt_start
3167  bf39 a104          	cp	a,#4
3168  bf3b 2703ccbfc3    	jrne	L5671
3169                     ; 761     strcpy(client_id_text, devicetype);
3171  bf40 ae00a9        	ldw	x,#_client_id_text
3172  bf43 90ae9e68      	ldw	y,#L5261_devicetype
3173  bf47               L411:
3174  bf47 90f6          	ld	a,(y)
3175  bf49 905c          	incw	y
3176  bf4b f7            	ld	(x),a
3177  bf4c 5c            	incw	x
3178  bf4d 4d            	tnz	a
3179  bf4e 26f7          	jrne	L411
3180                     ; 763     client_id_text[strlen(client_id_text) - 1] = '\0';
3182  bf50 ae00a9        	ldw	x,#_client_id_text
3183  bf53 cdf660        	call	_strlen
3185  bf56 5a            	decw	x
3186  bf57 724f00a9      	clr	(_client_id_text,x)
3187                     ; 765     strcat(client_id_text, mac_string);
3189  bf5b ae010c        	ldw	x,#_mac_string
3190  bf5e 89            	pushw	x
3191  bf5f ae00a9        	ldw	x,#_client_id_text
3192  bf62 cdf64c        	call	_strcat
3194  bf65 85            	popw	x
3195                     ; 766     client_id = client_id_text;
3197  bf66 ae00a9        	ldw	x,#_client_id_text
3198  bf69 cf00c3        	ldw	_client_id,x
3199                     ; 769     connect_flags = MQTT_CONNECT_CLEAN_SESSION;
3201  bf6c 350200fa      	mov	_connect_flags,#2
3202                     ; 772     topic_base[topic_base_len] = '\0';
3204  bf70 5f            	clrw	x
3205  bf71 c60073        	ld	a,_topic_base_len
3206  bf74 97            	ld	xl,a
3207  bf75 724f0074      	clr	(_topic_base,x)
3208                     ; 773     strcat(topic_base, "/status");
3210  bf79 ae9ec1        	ldw	x,#L7671
3211  bf7c 89            	pushw	x
3212  bf7d ae0074        	ldw	x,#_topic_base
3213  bf80 cdf64c        	call	_strcat
3215  bf83 85            	popw	x
3216                     ; 776     mqtt_connect(&mqttclient,
3216                     ; 777                  client_id,              // Based on MAC address
3216                     ; 778                  topic_base,             // Will topic
3216                     ; 779                  "offline",              // Will message 
3216                     ; 780                  7,                      // Will message size
3216                     ; 781                  stored_mqtt_username,   // Username
3216                     ; 782                  stored_mqtt_password,   // Password
3216                     ; 783                  connect_flags,          // Connect flags
3216                     ; 784                  mqtt_keep_alive);       // Ping interval
3218  bf84 ce00f1        	ldw	x,_mqtt_keep_alive
3219  bf87 89            	pushw	x
3220  bf88 3b00fa        	push	_connect_flags
3221  bf8b ae4040        	ldw	x,#_stored_mqtt_password
3222  bf8e 89            	pushw	x
3223  bf8f ae4035        	ldw	x,#_stored_mqtt_username
3224  bf92 89            	pushw	x
3225  bf93 ae0007        	ldw	x,#7
3226  bf96 89            	pushw	x
3227  bf97 ae9eb9        	ldw	x,#L1771
3228  bf9a 89            	pushw	x
3229  bf9b ae0074        	ldw	x,#_topic_base
3230  bf9e 89            	pushw	x
3231  bf9f ce00c3        	ldw	x,_client_id
3232  bfa2 89            	pushw	x
3233  bfa3 ae00c5        	ldw	x,#_mqttclient
3234  bfa6 cdd040        	call	_mqtt_connect
3236  bfa9 5b0f          	addw	sp,#15
3237                     ; 786     if (mqttclient.error == MQTT_OK) {
3239  bfab ce00cf        	ldw	x,_mqttclient+10
3240  bfae 5a            	decw	x
3241  bfaf 260d          	jrne	L3771
3242                     ; 787       mqtt_start_ctr1 = 0; // Clear 100ms counter
3244  bfb1 725f00a6      	clr	_mqtt_start_ctr1
3245                     ; 788       mqtt_start_status |= MQTT_START_MQTT_CONNECT_GOOD;
3247  bfb5 721e00a7      	bset	_mqtt_start_status,#7
3248                     ; 789       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE1;
3250  bfb9 350500a8      	mov	_mqtt_start,#5
3253  bfbd 81            	ret	
3254  bfbe               L3771:
3255                     ; 792       mqtt_start_status |= MQTT_START_MQTT_CONNECT_ERROR;
3257  bfbe 721600a7      	bset	_mqtt_start_status,#3
3259  bfc2 81            	ret	
3260  bfc3               L5671:
3261                     ; 796   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE1) {
3263  bfc3 a105          	cp	a,#5
3264  bfc5 2635          	jrne	L1002
3265                     ; 806     if (mqtt_start_ctr1 > 20) {
3267  bfc7 c600a6        	ld	a,_mqtt_start_ctr1
3268  bfca a115          	cp	a,#21
3269  bfcc 2403ccc0a1    	jrult	L7371
3270                     ; 817       topic_base[topic_base_len] = '\0';
3272  bfd1 c60073        	ld	a,_topic_base_len
3273  bfd4 5f            	clrw	x
3274  bfd5 97            	ld	xl,a
3275  bfd6 724f0074      	clr	(_topic_base,x)
3276                     ; 818       strcat(topic_base, "/on");
3278  bfda ae9eb5        	ldw	x,#L5002
3279  bfdd 89            	pushw	x
3280  bfde ae0074        	ldw	x,#_topic_base
3281  bfe1 cdf64c        	call	_strcat
3283  bfe4 85            	popw	x
3284                     ; 819       mqtt_subscribe(&mqttclient, topic_base, 0);
3286  bfe5 5f            	clrw	x
3287  bfe6 89            	pushw	x
3288  bfe7 ae0074        	ldw	x,#_topic_base
3289  bfea 89            	pushw	x
3290  bfeb ae00c5        	ldw	x,#_mqttclient
3291  bfee cdd34f        	call	_mqtt_subscribe
3293  bff1 5b04          	addw	sp,#4
3294                     ; 820       mqtt_start_ctr1 = 0; // Clear 100ms counter
3296  bff3 725f00a6      	clr	_mqtt_start_ctr1
3297                     ; 821       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE2;
3299  bff7 350600a8      	mov	_mqtt_start,#6
3301  bffb 81            	ret	
3302  bffc               L1002:
3303                     ; 825   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE2) {
3305  bffc a106          	cp	a,#6
3306  bffe 2632          	jrne	L1102
3307                     ; 826     if (mqtt_start_ctr1 > 10) {
3309  c000 c600a6        	ld	a,_mqtt_start_ctr1
3310  c003 a10b          	cp	a,#11
3311  c005 25c7          	jrult	L7371
3312                     ; 829       topic_base[topic_base_len] = '\0';
3314  c007 c60073        	ld	a,_topic_base_len
3315  c00a 5f            	clrw	x
3316  c00b 97            	ld	xl,a
3317  c00c 724f0074      	clr	(_topic_base,x)
3318                     ; 830       strcat(topic_base, "/off");
3320  c010 ae9eb0        	ldw	x,#L5102
3321  c013 89            	pushw	x
3322  c014 ae0074        	ldw	x,#_topic_base
3323  c017 cdf64c        	call	_strcat
3325  c01a 85            	popw	x
3326                     ; 831       mqtt_subscribe(&mqttclient, topic_base, 0);
3328  c01b 5f            	clrw	x
3329  c01c 89            	pushw	x
3330  c01d ae0074        	ldw	x,#_topic_base
3331  c020 89            	pushw	x
3332  c021 ae00c5        	ldw	x,#_mqttclient
3333  c024 cdd34f        	call	_mqtt_subscribe
3335  c027 5b04          	addw	sp,#4
3336                     ; 832       mqtt_start_ctr1 = 0; // Clear 100ms counter
3338  c029 725f00a6      	clr	_mqtt_start_ctr1
3339                     ; 833       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE3;
3341  c02d 350700a8      	mov	_mqtt_start,#7
3343  c031 81            	ret	
3344  c032               L1102:
3345                     ; 837   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE3) {
3347  c032 a107          	cp	a,#7
3348  c034 2632          	jrne	L1202
3349                     ; 838     if (mqtt_start_ctr1 > 10) {
3351  c036 c600a6        	ld	a,_mqtt_start_ctr1
3352  c039 a10b          	cp	a,#11
3353  c03b 2564          	jrult	L7371
3354                     ; 841       topic_base[topic_base_len] = '\0';
3356  c03d c60073        	ld	a,_topic_base_len
3357  c040 5f            	clrw	x
3358  c041 97            	ld	xl,a
3359  c042 724f0074      	clr	(_topic_base,x)
3360                     ; 842       strcat(topic_base, "/state-req");
3362  c046 ae9ea5        	ldw	x,#L5202
3363  c049 89            	pushw	x
3364  c04a ae0074        	ldw	x,#_topic_base
3365  c04d cdf64c        	call	_strcat
3367  c050 85            	popw	x
3368                     ; 843       mqtt_subscribe(&mqttclient, topic_base, 0);
3370  c051 5f            	clrw	x
3371  c052 89            	pushw	x
3372  c053 ae0074        	ldw	x,#_topic_base
3373  c056 89            	pushw	x
3374  c057 ae00c5        	ldw	x,#_mqttclient
3375  c05a cdd34f        	call	_mqtt_subscribe
3377  c05d 5b04          	addw	sp,#4
3378                     ; 844       mqtt_start_ctr1 = 0; // Clear 100ms counter
3380  c05f 725f00a6      	clr	_mqtt_start_ctr1
3381                     ; 845       mqtt_start = MQTT_START_QUEUE_PUBLISH;
3383  c063 350900a8      	mov	_mqtt_start,#9
3385  c067 81            	ret	
3386  c068               L1202:
3387                     ; 849   else if (mqtt_start == MQTT_START_QUEUE_PUBLISH) {
3389  c068 a109          	cp	a,#9
3390  c06a 2635          	jrne	L7371
3391                     ; 850     if (mqtt_start_ctr1 > 10) {
3393  c06c c600a6        	ld	a,_mqtt_start_ctr1
3394  c06f a10b          	cp	a,#11
3395  c071 252e          	jrult	L7371
3396                     ; 853       topic_base[topic_base_len] = '\0';
3398  c073 c60073        	ld	a,_topic_base_len
3399  c076 5f            	clrw	x
3400  c077 97            	ld	xl,a
3401  c078 724f0074      	clr	(_topic_base,x)
3402                     ; 854       strcat(topic_base, "/status");
3404  c07c ae9ec1        	ldw	x,#L7671
3405  c07f 89            	pushw	x
3406  c080 ae0074        	ldw	x,#_topic_base
3407  c083 cdf64c        	call	_strcat
3409  c086 85            	popw	x
3410                     ; 855       mqtt_publish(&mqttclient,
3410                     ; 856                    topic_base,
3410                     ; 857 		   "online",
3410                     ; 858 		   6,
3410                     ; 859 		   MQTT_PUBLISH_QOS_0 | MQTT_PUBLISH_RETAIN);
3412  c087 4b01          	push	#1
3413  c089 ae0006        	ldw	x,#6
3414  c08c 89            	pushw	x
3415  c08d ae9e9e        	ldw	x,#L5302
3416  c090 89            	pushw	x
3417  c091 ae0074        	ldw	x,#_topic_base
3418  c094 89            	pushw	x
3419  c095 ae00c5        	ldw	x,#_mqttclient
3420  c098 cdd0ea        	call	_mqtt_publish
3422  c09b 5b07          	addw	sp,#7
3423                     ; 861       mqtt_start = MQTT_START_COMPLETE;
3425  c09d 351400a8      	mov	_mqtt_start,#20
3426  c0a1               L7371:
3427                     ; 864 }
3430  c0a1 81            	ret	
3466                     ; 867 void mqtt_sanity_check(void)
3466                     ; 868 {
3467                     .text:	section	.text,new
3468  c0a2               _mqtt_sanity_check:
3472                     ; 880   if (mqtt_restart_step == MQTT_RESTART_IDLE) {
3474  c0a2 c600a0        	ld	a,_mqtt_restart_step
3475  c0a5 2634          	jrne	L7402
3476                     ; 887     if (mqttclient.number_of_timeouts > 1) {
3478  c0a7 ce00d3        	ldw	x,_mqttclient+14
3479  c0aa a30002        	cpw	x,#2
3480  c0ad 2f08          	jrslt	L1502
3481                     ; 889       mqttclient.number_of_timeouts = 0;
3483  c0af 5f            	clrw	x
3484  c0b0 cf00d3        	ldw	_mqttclient+14,x
3485                     ; 890       mqtt_restart_step = MQTT_RESTART_BEGIN;
3487  c0b3 350100a0      	mov	_mqtt_restart_step,#1
3488  c0b7               L1502:
3489                     ; 896     if (mqtt_start == MQTT_START_COMPLETE
3489                     ; 897      && mqtt_conn->tcpstateflags == UIP_CLOSED) {
3491  c0b7 c600a8        	ld	a,_mqtt_start
3492  c0ba a114          	cp	a,#20
3493  c0bc 260b          	jrne	L3502
3495  c0be ce00a1        	ldw	x,_mqtt_conn
3496  c0c1 6d19          	tnz	(25,x)
3497  c0c3 2604          	jrne	L3502
3498                     ; 898       mqtt_restart_step = MQTT_RESTART_BEGIN;
3500  c0c5 350100a0      	mov	_mqtt_restart_step,#1
3501  c0c9               L3502:
3502                     ; 904     if (mqtt_start == MQTT_START_COMPLETE
3502                     ; 905      && mqttclient.error != MQTT_OK) {
3504  c0c9 a114          	cp	a,#20
3505  c0cb 2703ccc158    	jrne	L7502
3507  c0d0 ce00cf        	ldw	x,_mqttclient+10
3508  c0d3 5a            	decw	x
3509  c0d4 27f7          	jreq	L7502
3510                     ; 906       mqtt_restart_step = MQTT_RESTART_BEGIN;
3512  c0d6 350100a0      	mov	_mqtt_restart_step,#1
3514  c0da 81            	ret	
3515  c0db               L7402:
3516                     ; 910   else if (mqtt_restart_step == MQTT_RESTART_BEGIN) {
3518  c0db a101          	cp	a,#1
3519  c0dd 2609          	jrne	L1602
3520                     ; 918     mqtt_restart_step = MQTT_RESTART_DISCONNECT_START;
3522  c0df 350200a0      	mov	_mqtt_restart_step,#2
3523                     ; 921     mqtt_start_status = MQTT_START_NOT_STARTED;
3525  c0e3 725f00a7      	clr	_mqtt_start_status
3528  c0e7 81            	ret	
3529  c0e8               L1602:
3530                     ; 924   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_START) {
3532  c0e8 a102          	cp	a,#2
3533  c0ea 260f          	jrne	L5602
3534                     ; 925     mqtt_restart_step = MQTT_RESTART_DISCONNECT_WAIT;
3536  c0ec 350300a0      	mov	_mqtt_restart_step,#3
3537                     ; 927     mqtt_disconnect(&mqttclient);
3539  c0f0 ae00c5        	ldw	x,#_mqttclient
3540  c0f3 cdd43b        	call	_mqtt_disconnect
3542                     ; 928     mqtt_sanity_ctr = 0; // Clear 100ms counter
3544  c0f6 725f00a4      	clr	_mqtt_sanity_ctr
3547  c0fa 81            	ret	
3548  c0fb               L5602:
3549                     ; 931   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_WAIT) {
3551  c0fb a103          	cp	a,#3
3552  c0fd 260c          	jrne	L1702
3553                     ; 932     if (mqtt_sanity_ctr > 10) {
3555  c0ff c600a4        	ld	a,_mqtt_sanity_ctr
3556  c102 a10b          	cp	a,#11
3557  c104 2552          	jrult	L7502
3558                     ; 935       mqtt_restart_step = MQTT_RESTART_TCPCLOSE;
3560  c106 350400a0      	mov	_mqtt_restart_step,#4
3562  c10a 81            	ret	
3563  c10b               L1702:
3564                     ; 939   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE) {
3566  c10b a104          	cp	a,#4
3567  c10d 260d          	jrne	L7702
3568                     ; 955     mqtt_close_tcp = 1;
3570  c10f 35010107      	mov	_mqtt_close_tcp,#1
3571                     ; 957     mqtt_sanity_ctr = 0; // Clear 100ms counter
3573  c113 725f00a4      	clr	_mqtt_sanity_ctr
3574                     ; 958     mqtt_restart_step = MQTT_RESTART_TCPCLOSE_WAIT;
3576  c117 350500a0      	mov	_mqtt_restart_step,#5
3579  c11b 81            	ret	
3580  c11c               L7702:
3581                     ; 961   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE_WAIT) {
3583  c11c a105          	cp	a,#5
3584  c11e 2610          	jrne	L3012
3585                     ; 966     if (mqtt_sanity_ctr > 20) {
3587  c120 c600a4        	ld	a,_mqtt_sanity_ctr
3588  c123 a115          	cp	a,#21
3589  c125 2531          	jrult	L7502
3590                     ; 967       mqtt_close_tcp = 0;
3592  c127 725f0107      	clr	_mqtt_close_tcp
3593                     ; 968       mqtt_restart_step = MQTT_RESTART_SIGNAL_STARTUP;
3595  c12b 350600a0      	mov	_mqtt_restart_step,#6
3597  c12f 81            	ret	
3598  c130               L3012:
3599                     ; 972   else if (mqtt_restart_step == MQTT_RESTART_SIGNAL_STARTUP) {
3601  c130 a106          	cp	a,#6
3602  c132 2624          	jrne	L7502
3603                     ; 974     mqtt_init(&mqttclient,
3603                     ; 975               mqtt_sendbuf,
3603                     ; 976 	      sizeof(mqtt_sendbuf),
3603                     ; 977 	      &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
3603                     ; 978 	      UIP_APPDATA_SIZE,
3603                     ; 979 	      publish_callback);
3605  c134 aec159        	ldw	x,#_publish_callback
3606  c137 89            	pushw	x
3607  c138 ae01be        	ldw	x,#446
3608  c13b 89            	pushw	x
3609  c13c ae03a9        	ldw	x,#_uip_buf+54
3610  c13f 89            	pushw	x
3611  c140 ae00c8        	ldw	x,#200
3612  c143 89            	pushw	x
3613  c144 ae016f        	ldw	x,#_mqtt_sendbuf
3614  c147 89            	pushw	x
3615  c148 ae00c5        	ldw	x,#_mqttclient
3616  c14b cdcfe8        	call	_mqtt_init
3618  c14e 5b0a          	addw	sp,#10
3619                     ; 982     mqtt_restart_step = MQTT_RESTART_IDLE;
3621  c150 725f00a0      	clr	_mqtt_restart_step
3622                     ; 983     mqtt_start = MQTT_START_TCP_CONNECT;
3624  c154 350100a8      	mov	_mqtt_start,#1
3625  c158               L7502:
3626                     ; 985 }
3629  c158 81            	ret	
3702                     ; 1063 void publish_callback(void** unused, struct mqtt_response_publish *published)
3702                     ; 1064 {
3703                     .text:	section	.text,new
3704  c159               _publish_callback:
3706  c159 5204          	subw	sp,#4
3707       00000004      OFST:	set	4
3710                     ; 1070   pin_value = 0;
3712  c15b 0f01          	clr	(OFST-3,sp)
3714                     ; 1071   ParseNum = 0;
3716                     ; 1099   pBuffer = uip_appdata;
3718  c15d ce0371        	ldw	x,_uip_appdata
3720                     ; 1101   pBuffer = pBuffer + 1;
3722  c160 1c0012        	addw	x,#18
3724                     ; 1103   pBuffer = pBuffer + 1;
3727                     ; 1105   pBuffer = pBuffer + 2;
3730                     ; 1107   pBuffer = pBuffer + 14;
3732  c163 1f03          	ldw	(OFST-1,sp),x
3734                     ; 1109   pBuffer = pBuffer + strlen(stored_devicename) + 1;
3736  c165 ae4000        	ldw	x,#_stored_devicename
3737  c168 cdf660        	call	_strlen
3739  c16b 72fb03        	addw	x,(OFST-1,sp)
3740  c16e 5c            	incw	x
3741  c16f 1f03          	ldw	(OFST-1,sp),x
3743                     ; 1112   if (*pBuffer == 'o') {
3745  c171 f6            	ld	a,(x)
3746  c172 a16f          	cp	a,#111
3747  c174 267a          	jrne	L3412
3748                     ; 1113     pBuffer++;
3750  c176 5c            	incw	x
3751  c177 1f03          	ldw	(OFST-1,sp),x
3753                     ; 1114     if (*pBuffer == 'n') {
3755  c179 f6            	ld	a,(x)
3756  c17a a16e          	cp	a,#110
3757  c17c 2609          	jrne	L5412
3758                     ; 1115       pBuffer++;
3760  c17e 5c            	incw	x
3761  c17f 1f03          	ldw	(OFST-1,sp),x
3763                     ; 1116       pin_value = 1;
3765  c181 a601          	ld	a,#1
3766  c183 6b01          	ld	(OFST-3,sp),a
3769  c185 200b          	jra	L7412
3770  c187               L5412:
3771                     ; 1118     else if (*pBuffer == 'f') {
3773  c187 a166          	cp	a,#102
3774  c189 2607          	jrne	L7412
3775                     ; 1119       pBuffer = pBuffer + 2;
3777  c18b 1c0002        	addw	x,#2
3778  c18e 1f03          	ldw	(OFST-1,sp),x
3780                     ; 1120       pin_value = 0;
3782  c190 0f01          	clr	(OFST-3,sp)
3784  c192               L7412:
3785                     ; 1124     if (*pBuffer == 'a') {
3787  c192 f6            	ld	a,(x)
3788  c193 a161          	cp	a,#97
3789  c195 2625          	jrne	L3512
3790                     ; 1125       pBuffer++;
3792  c197 5c            	incw	x
3793  c198 1f03          	ldw	(OFST-1,sp),x
3795                     ; 1126       if (*pBuffer == 'l') {
3797  c19a f6            	ld	a,(x)
3798  c19b a16c          	cp	a,#108
3799  c19d 264b          	jrne	L7612
3800                     ; 1127         pBuffer++;
3802  c19f 5c            	incw	x
3803  c1a0 1f03          	ldw	(OFST-1,sp),x
3805                     ; 1128         if (*pBuffer == 'l') {
3807  c1a2 f6            	ld	a,(x)
3808  c1a3 a16c          	cp	a,#108
3809  c1a5 2643          	jrne	L7612
3810                     ; 1130 	  for (i=0; i<8; i++) GpioSetPin(i, (uint8_t)pin_value);
3812  c1a7 0f02          	clr	(OFST-2,sp)
3814  c1a9               L1612:
3817  c1a9 7b01          	ld	a,(OFST-3,sp)
3818  c1ab 97            	ld	xl,a
3819  c1ac 7b02          	ld	a,(OFST-2,sp)
3820  c1ae 95            	ld	xh,a
3821  c1af cdbc18        	call	_GpioSetPin
3825  c1b2 0c02          	inc	(OFST-2,sp)
3829  c1b4 7b02          	ld	a,(OFST-2,sp)
3830  c1b6 a108          	cp	a,#8
3831  c1b8 25ef          	jrult	L1612
3832  c1ba 202e          	jra	L7612
3833  c1bc               L3512:
3834                     ; 1136     else if (*pBuffer == '0' || *pBuffer == '1') {
3836  c1bc a130          	cp	a,#48
3837  c1be 2704          	jreq	L3712
3839  c1c0 a131          	cp	a,#49
3840  c1c2 2626          	jrne	L7612
3841  c1c4               L3712:
3842                     ; 1138       ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3844  c1c4 97            	ld	xl,a
3845  c1c5 a60a          	ld	a,#10
3846  c1c7 42            	mul	x,a
3847  c1c8 9f            	ld	a,xl
3848  c1c9 a0e0          	sub	a,#224
3849  c1cb 6b02          	ld	(OFST-2,sp),a
3851                     ; 1139       pBuffer++;
3853  c1cd 1e03          	ldw	x,(OFST-1,sp)
3854  c1cf 5c            	incw	x
3855  c1d0 1f03          	ldw	(OFST-1,sp),x
3857                     ; 1141       ParseNum += (uint8_t)(*pBuffer - '0');
3859  c1d2 f6            	ld	a,(x)
3860  c1d3 a030          	sub	a,#48
3861  c1d5 1b02          	add	a,(OFST-2,sp)
3862  c1d7 6b02          	ld	(OFST-2,sp),a
3864                     ; 1143       if (ParseNum > 0 && ParseNum < 9) {
3866  c1d9 270f          	jreq	L7612
3868  c1db a109          	cp	a,#9
3869  c1dd 240b          	jruge	L7612
3870                     ; 1145         ParseNum--;
3872  c1df 0a02          	dec	(OFST-2,sp)
3874                     ; 1147         GpioSetPin(ParseNum, (uint8_t)pin_value);
3876  c1e1 7b01          	ld	a,(OFST-3,sp)
3877  c1e3 97            	ld	xl,a
3878  c1e4 7b02          	ld	a,(OFST-2,sp)
3879  c1e6 95            	ld	xh,a
3880  c1e7 cdbc18        	call	_GpioSetPin
3882  c1ea               L7612:
3883                     ; 1153     mqtt_parse_complete = 1;
3885  c1ea 35010105      	mov	_mqtt_parse_complete,#1
3887  c1ee 2013          	jra	L7712
3888  c1f0               L3412:
3889                     ; 1157   else if (*pBuffer == 's') {
3891  c1f0 a173          	cp	a,#115
3892  c1f2 260f          	jrne	L7712
3893                     ; 1158     pBuffer += 8;
3895  c1f4 1c0008        	addw	x,#8
3897                     ; 1159     if (*pBuffer == 'q') {
3899  c1f7 f6            	ld	a,(x)
3900  c1f8 a171          	cp	a,#113
3901  c1fa 2607          	jrne	L7712
3902                     ; 1160       *pBuffer = '0'; // Destroy 'q' in buffer so subsequent "state"
3904  c1fc a630          	ld	a,#48
3905  c1fe f7            	ld	(x),a
3906                     ; 1171       state_request = STATE_REQUEST_RCVD;
3908  c1ff 35010164      	mov	_state_request,#1
3909  c203               L7712:
3910                     ; 1174 }
3913  c203 5b04          	addw	sp,#4
3914  c205 81            	ret	
3953                     ; 1177 void publish_outbound(void)
3953                     ; 1178 {
3954                     .text:	section	.text,new
3955  c206               _publish_outbound:
3957  c206 88            	push	a
3958       00000001      OFST:	set	1
3961                     ; 1186   if (state_request == STATE_REQUEST_IDLE) {
3963  c207 c60164        	ld	a,_state_request
3964  c20a 2703ccc2ff    	jrne	L1222
3965                     ; 1189     xor_tmp = (uint8_t)(IO_16to9 ^ IO_16to9_sent);
3967  c20f c6016e        	ld	a,_IO_16to9
3968  c212 c80168        	xor	a,_IO_16to9_sent
3969  c215 6b01          	ld	(OFST+0,sp),a
3971                     ; 1191     if      (xor_tmp & 0x80) publish_pinstate('I', '8', IO_16to9, 0x80); // Input 8
3973  c217 2a0a          	jrpl	L3222
3976  c219 4b80          	push	#128
3977  c21b 3b016e        	push	_IO_16to9
3978  c21e ae4938        	ldw	x,#18744
3981  c221 2060          	jp	LC002
3982  c223               L3222:
3983                     ; 1192     else if (xor_tmp & 0x40) publish_pinstate('I', '7', IO_16to9, 0x40); // Input 7
3985  c223 a540          	bcp	a,#64
3986  c225 270a          	jreq	L7222
3989  c227 4b40          	push	#64
3990  c229 3b016e        	push	_IO_16to9
3991  c22c ae4937        	ldw	x,#18743
3994  c22f 2052          	jp	LC002
3995  c231               L7222:
3996                     ; 1193     else if (xor_tmp & 0x20) publish_pinstate('I', '6', IO_16to9, 0x20); // Input 6
3998  c231 a520          	bcp	a,#32
3999  c233 270a          	jreq	L3322
4002  c235 4b20          	push	#32
4003  c237 3b016e        	push	_IO_16to9
4004  c23a ae4936        	ldw	x,#18742
4007  c23d 2044          	jp	LC002
4008  c23f               L3322:
4009                     ; 1194     else if (xor_tmp & 0x10) publish_pinstate('I', '5', IO_16to9, 0x10); // Input 5
4011  c23f a510          	bcp	a,#16
4012  c241 270a          	jreq	L7322
4015  c243 4b10          	push	#16
4016  c245 3b016e        	push	_IO_16to9
4017  c248 ae4935        	ldw	x,#18741
4020  c24b 2036          	jp	LC002
4021  c24d               L7322:
4022                     ; 1195     else if (xor_tmp & 0x08) publish_pinstate('I', '4', IO_16to9, 0x08); // Input 4
4024  c24d a508          	bcp	a,#8
4025  c24f 270a          	jreq	L3422
4028  c251 4b08          	push	#8
4029  c253 3b016e        	push	_IO_16to9
4030  c256 ae4934        	ldw	x,#18740
4033  c259 2028          	jp	LC002
4034  c25b               L3422:
4035                     ; 1196     else if (xor_tmp & 0x04) publish_pinstate('I', '3', IO_16to9, 0x04); // Input 3
4037  c25b a504          	bcp	a,#4
4038  c25d 270a          	jreq	L7422
4041  c25f 4b04          	push	#4
4042  c261 3b016e        	push	_IO_16to9
4043  c264 ae4933        	ldw	x,#18739
4046  c267 201a          	jp	LC002
4047  c269               L7422:
4048                     ; 1197     else if (xor_tmp & 0x02) publish_pinstate('I', '2', IO_16to9, 0x02); // Input 2
4050  c269 a502          	bcp	a,#2
4051  c26b 270a          	jreq	L3522
4054  c26d 4b02          	push	#2
4055  c26f 3b016e        	push	_IO_16to9
4056  c272 ae4932        	ldw	x,#18738
4059  c275 200c          	jp	LC002
4060  c277               L3522:
4061                     ; 1198     else if (xor_tmp & 0x01) publish_pinstate('I', '1', IO_16to9, 0x01); // Input 1
4063  c277 a501          	bcp	a,#1
4064  c279 270c          	jreq	L5222
4067  c27b 4b01          	push	#1
4068  c27d 3b016e        	push	_IO_16to9
4069  c280 ae4931        	ldw	x,#18737
4071  c283               LC002:
4072  c283 cdc30d        	call	_publish_pinstate
4073  c286 85            	popw	x
4074  c287               L5222:
4075                     ; 1202     xor_tmp = (uint8_t)(IO_8to1 ^ IO_8to1_sent);
4077  c287 c6016d        	ld	a,_IO_8to1
4078  c28a c80167        	xor	a,_IO_8to1_sent
4079  c28d 6b01          	ld	(OFST+0,sp),a
4081                     ; 1204     if      (xor_tmp & 0x80) publish_pinstate('O', '8', IO_8to1, 0x80); // Output 8
4083  c28f 2a0a          	jrpl	L1622
4086  c291 4b80          	push	#128
4087  c293 3b016d        	push	_IO_8to1
4088  c296 ae4f38        	ldw	x,#20280
4091  c299 2060          	jp	LC003
4092  c29b               L1622:
4093                     ; 1205     else if (xor_tmp & 0x40) publish_pinstate('O', '7', IO_8to1, 0x40); // Output 7
4095  c29b a540          	bcp	a,#64
4096  c29d 270a          	jreq	L5622
4099  c29f 4b40          	push	#64
4100  c2a1 3b016d        	push	_IO_8to1
4101  c2a4 ae4f37        	ldw	x,#20279
4104  c2a7 2052          	jp	LC003
4105  c2a9               L5622:
4106                     ; 1206     else if (xor_tmp & 0x20) publish_pinstate('O', '6', IO_8to1, 0x20); // Output 6
4108  c2a9 a520          	bcp	a,#32
4109  c2ab 270a          	jreq	L1722
4112  c2ad 4b20          	push	#32
4113  c2af 3b016d        	push	_IO_8to1
4114  c2b2 ae4f36        	ldw	x,#20278
4117  c2b5 2044          	jp	LC003
4118  c2b7               L1722:
4119                     ; 1207     else if (xor_tmp & 0x10) publish_pinstate('O', '5', IO_8to1, 0x10); // Output 5
4121  c2b7 a510          	bcp	a,#16
4122  c2b9 270a          	jreq	L5722
4125  c2bb 4b10          	push	#16
4126  c2bd 3b016d        	push	_IO_8to1
4127  c2c0 ae4f35        	ldw	x,#20277
4130  c2c3 2036          	jp	LC003
4131  c2c5               L5722:
4132                     ; 1208     else if (xor_tmp & 0x08) publish_pinstate('O', '4', IO_8to1, 0x08); // Output 4
4134  c2c5 a508          	bcp	a,#8
4135  c2c7 270a          	jreq	L1032
4138  c2c9 4b08          	push	#8
4139  c2cb 3b016d        	push	_IO_8to1
4140  c2ce ae4f34        	ldw	x,#20276
4143  c2d1 2028          	jp	LC003
4144  c2d3               L1032:
4145                     ; 1209     else if (xor_tmp & 0x04) publish_pinstate('O', '3', IO_8to1, 0x04); // Output 3
4147  c2d3 a504          	bcp	a,#4
4148  c2d5 270a          	jreq	L5032
4151  c2d7 4b04          	push	#4
4152  c2d9 3b016d        	push	_IO_8to1
4153  c2dc ae4f33        	ldw	x,#20275
4156  c2df 201a          	jp	LC003
4157  c2e1               L5032:
4158                     ; 1210     else if (xor_tmp & 0x02) publish_pinstate('O', '2', IO_8to1, 0x02); // Output 2
4160  c2e1 a502          	bcp	a,#2
4161  c2e3 270a          	jreq	L1132
4164  c2e5 4b02          	push	#2
4165  c2e7 3b016d        	push	_IO_8to1
4166  c2ea ae4f32        	ldw	x,#20274
4169  c2ed 200c          	jp	LC003
4170  c2ef               L1132:
4171                     ; 1211     else if (xor_tmp & 0x01) publish_pinstate('O', '1', IO_8to1, 0x01); // Output 1
4173  c2ef a501          	bcp	a,#1
4174  c2f1 270c          	jreq	L1222
4177  c2f3 4b01          	push	#1
4178  c2f5 3b016d        	push	_IO_8to1
4179  c2f8 ae4f31        	ldw	x,#20273
4181  c2fb               LC003:
4182  c2fb cdc30d        	call	_publish_pinstate
4183  c2fe 85            	popw	x
4184  c2ff               L1222:
4185                     ; 1215   if (state_request == STATE_REQUEST_RCVD) {
4187  c2ff c60164        	ld	a,_state_request
4188  c302 4a            	dec	a
4189  c303 2606          	jrne	L7132
4190                     ; 1217     state_request = STATE_REQUEST_IDLE;
4192  c305 c70164        	ld	_state_request,a
4193                     ; 1218     publish_pinstate_all();
4195  c308 cdc3a5        	call	_publish_pinstate_all
4197  c30b               L7132:
4198                     ; 1246 }
4201  c30b 84            	pop	a
4202  c30c 81            	ret	
4266                     ; 1249 void publish_pinstate(uint8_t direction, uint8_t pin, uint8_t value, uint8_t mask)
4266                     ; 1250 {
4267                     .text:	section	.text,new
4268  c30d               _publish_pinstate:
4270  c30d 89            	pushw	x
4271       00000000      OFST:	set	0
4274                     ; 1253   application_message[0] = '0';
4276  c30e 353000f3      	mov	_application_message,#48
4277                     ; 1254   application_message[1] = (uint8_t)(pin);
4279  c312 9f            	ld	a,xl
4280  c313 c700f4        	ld	_application_message+1,a
4281                     ; 1255   application_message[2] = '\0';
4283  c316 725f00f5      	clr	_application_message+2
4284                     ; 1257   topic_base[topic_base_len] = '\0';
4286  c31a 5f            	clrw	x
4287  c31b c60073        	ld	a,_topic_base_len
4288  c31e 97            	ld	xl,a
4289  c31f 724f0074      	clr	(_topic_base,x)
4290                     ; 1260   if (direction == 'I') {
4292  c323 7b01          	ld	a,(OFST+1,sp)
4293  c325 a149          	cp	a,#73
4294  c327 2618          	jrne	L3432
4295                     ; 1262     if (invert_input == 0xff) value = (uint8_t)(~value);
4297  c329 c60165        	ld	a,_invert_input
4298  c32c 4c            	inc	a
4299  c32d 2602          	jrne	L5432
4302  c32f 0305          	cpl	(OFST+5,sp)
4303  c331               L5432:
4304                     ; 1263     if (value & mask) strcat(topic_base, "/in_on");
4306  c331 7b05          	ld	a,(OFST+5,sp)
4307  c333 1506          	bcp	a,(OFST+6,sp)
4308  c335 2705          	jreq	L7432
4311  c337 ae9e97        	ldw	x,#L1532
4314  c33a 2013          	jra	L7532
4315  c33c               L7432:
4316                     ; 1264     else strcat(topic_base, "/in_off");
4318  c33c ae9e8f        	ldw	x,#L5532
4320  c33f 200e          	jra	L7532
4321  c341               L3432:
4322                     ; 1268     if (value & mask) strcat(topic_base, "/out_on");
4324  c341 7b05          	ld	a,(OFST+5,sp)
4325  c343 1506          	bcp	a,(OFST+6,sp)
4326  c345 2705          	jreq	L1632
4329  c347 ae9e87        	ldw	x,#L3632
4332  c34a 2003          	jra	L7532
4333  c34c               L1632:
4334                     ; 1269     else strcat(topic_base, "/out_off");
4336  c34c ae9e7e        	ldw	x,#L7632
4338  c34f               L7532:
4339  c34f 89            	pushw	x
4340  c350 ae0074        	ldw	x,#_topic_base
4341  c353 cdf64c        	call	_strcat
4342  c356 85            	popw	x
4343                     ; 1273   mqtt_publish(&mqttclient,
4343                     ; 1274                topic_base,
4343                     ; 1275 	       application_message,
4343                     ; 1276 	       2,
4343                     ; 1277 	       MQTT_PUBLISH_QOS_0);
4345  c357 4b00          	push	#0
4346  c359 ae0002        	ldw	x,#2
4347  c35c 89            	pushw	x
4348  c35d ae00f3        	ldw	x,#_application_message
4349  c360 89            	pushw	x
4350  c361 ae0074        	ldw	x,#_topic_base
4351  c364 89            	pushw	x
4352  c365 ae00c5        	ldw	x,#_mqttclient
4353  c368 cdd0ea        	call	_mqtt_publish
4355  c36b 5b07          	addw	sp,#7
4356                     ; 1279   if (direction == 'I') {
4358  c36d 7b01          	ld	a,(OFST+1,sp)
4359  c36f a149          	cp	a,#73
4360  c371 2619          	jrne	L1732
4361                     ; 1281     if (IO_16to9 & mask) IO_16to9_sent |= mask;
4363  c373 c6016e        	ld	a,_IO_16to9
4364  c376 1506          	bcp	a,(OFST+6,sp)
4365  c378 2707          	jreq	L3732
4368  c37a c60168        	ld	a,_IO_16to9_sent
4369  c37d 1a06          	or	a,(OFST+6,sp)
4371  c37f 2006          	jp	LC005
4372  c381               L3732:
4373                     ; 1282     else IO_16to9_sent &= (uint8_t)~mask;
4375  c381 7b06          	ld	a,(OFST+6,sp)
4376  c383 43            	cpl	a
4377  c384 c40168        	and	a,_IO_16to9_sent
4378  c387               LC005:
4379  c387 c70168        	ld	_IO_16to9_sent,a
4380  c38a 2017          	jra	L7732
4381  c38c               L1732:
4382                     ; 1286     if (IO_8to1 & mask) IO_8to1_sent |= mask;
4384  c38c c6016d        	ld	a,_IO_8to1
4385  c38f 1506          	bcp	a,(OFST+6,sp)
4386  c391 2707          	jreq	L1042
4389  c393 c60167        	ld	a,_IO_8to1_sent
4390  c396 1a06          	or	a,(OFST+6,sp)
4392  c398 2006          	jp	LC004
4393  c39a               L1042:
4394                     ; 1287     else IO_8to1_sent &= (uint8_t)~mask;
4396  c39a 7b06          	ld	a,(OFST+6,sp)
4397  c39c 43            	cpl	a
4398  c39d c40167        	and	a,_IO_8to1_sent
4399  c3a0               LC004:
4400  c3a0 c70167        	ld	_IO_8to1_sent,a
4401  c3a3               L7732:
4402                     ; 1289 }
4405  c3a3 85            	popw	x
4406  c3a4 81            	ret	
4455                     ; 1292 void publish_pinstate_all(void)
4455                     ; 1293 {
4456                     .text:	section	.text,new
4457  c3a5               _publish_pinstate_all:
4459  c3a5 89            	pushw	x
4460       00000002      OFST:	set	2
4463                     ; 1299   j = IO_16to9;
4465  c3a6 c6016e        	ld	a,_IO_16to9
4466  c3a9 6b02          	ld	(OFST+0,sp),a
4468                     ; 1300   k = IO_8to1;
4470  c3ab c6016d        	ld	a,_IO_8to1
4471  c3ae 6b01          	ld	(OFST-1,sp),a
4473                     ; 1303   if (invert_input == 0xff) j = (uint8_t)(~j);
4475  c3b0 c60165        	ld	a,_invert_input
4476  c3b3 4c            	inc	a
4477  c3b4 2602          	jrne	L3242
4480  c3b6 0302          	cpl	(OFST+0,sp)
4482  c3b8               L3242:
4483                     ; 1305   application_message[0] = j;
4485  c3b8 7b02          	ld	a,(OFST+0,sp)
4486  c3ba c700f3        	ld	_application_message,a
4487                     ; 1306   application_message[1] = k;
4489  c3bd 7b01          	ld	a,(OFST-1,sp)
4490  c3bf c700f4        	ld	_application_message+1,a
4491                     ; 1307   application_message[2] = '\0';
4493  c3c2 725f00f5      	clr	_application_message+2
4494                     ; 1309   topic_base[topic_base_len] = '\0';
4496  c3c6 5f            	clrw	x
4497  c3c7 c60073        	ld	a,_topic_base_len
4498  c3ca 97            	ld	xl,a
4499  c3cb 724f0074      	clr	(_topic_base,x)
4500                     ; 1310   strcat(topic_base, "/state");
4502  c3cf ae9e77        	ldw	x,#L5242
4503  c3d2 89            	pushw	x
4504  c3d3 ae0074        	ldw	x,#_topic_base
4505  c3d6 cdf64c        	call	_strcat
4507  c3d9 85            	popw	x
4508                     ; 1313   mqtt_publish(&mqttclient,
4508                     ; 1314                topic_base,
4508                     ; 1315 	       application_message,
4508                     ; 1316 	       2,
4508                     ; 1317 	       MQTT_PUBLISH_QOS_0);
4510  c3da 4b00          	push	#0
4511  c3dc ae0002        	ldw	x,#2
4512  c3df 89            	pushw	x
4513  c3e0 ae00f3        	ldw	x,#_application_message
4514  c3e3 89            	pushw	x
4515  c3e4 ae0074        	ldw	x,#_topic_base
4516  c3e7 89            	pushw	x
4517  c3e8 ae00c5        	ldw	x,#_mqttclient
4518  c3eb cdd0ea        	call	_mqtt_publish
4520                     ; 1318 }
4523  c3ee 5b09          	addw	sp,#9
4524  c3f0 81            	ret	
4549                     ; 1323 void unlock_eeprom(void)
4549                     ; 1324 {
4550                     .text:	section	.text,new
4551  c3f1               _unlock_eeprom:
4555  c3f1 2008          	jra	L1442
4556  c3f3               L7342:
4557                     ; 1336     FLASH_DUKR = 0xAE; // MASS key 1
4559  c3f3 35ae5064      	mov	_FLASH_DUKR,#174
4560                     ; 1337     FLASH_DUKR = 0x56; // MASS key 2
4562  c3f7 35565064      	mov	_FLASH_DUKR,#86
4563  c3fb               L1442:
4564                     ; 1335   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
4566  c3fb 7207505ff3    	btjf	_FLASH_IAPSR,#3,L7342
4567                     ; 1365 }
4570  c400 81            	ret	
4655                     ; 1368 void check_eeprom_settings(void)
4655                     ; 1369 {
4656                     .text:	section	.text,new
4657  c401               _check_eeprom_settings:
4659  c401 88            	push	a
4660       00000001      OFST:	set	1
4663                     ; 1381   if ((magic4 == 0x55) && 
4663                     ; 1382       (magic3 == 0xee) && 
4663                     ; 1383       (magic2 == 0x0f) && 
4663                     ; 1384       (magic1 == 0xf0)) {
4665  c402 c6402e        	ld	a,_magic4
4666  c405 a155          	cp	a,#85
4667  c407 2703ccc5b0    	jrne	L1652
4669  c40c c6402d        	ld	a,_magic3
4670  c40f a1ee          	cp	a,#238
4671  c411 26f6          	jrne	L1652
4673  c413 c6402c        	ld	a,_magic2
4674  c416 a10f          	cp	a,#15
4675  c418 26ef          	jrne	L1652
4677  c41a c6402b        	ld	a,_magic1
4678  c41d a1f0          	cp	a,#240
4679  c41f 26e8          	jrne	L1652
4680                     ; 1389     uip_ipaddr(IpAddr, stored_hostaddr[3], stored_hostaddr[2], stored_hostaddr[1], stored_hostaddr[0]);
4682  c421 c6402a        	ld	a,_stored_hostaddr+3
4683  c424 97            	ld	xl,a
4684  c425 c64029        	ld	a,_stored_hostaddr+2
4685  c428 02            	rlwa	x,a
4686  c429 cf00ff        	ldw	_IpAddr,x
4689  c42c c64028        	ld	a,_stored_hostaddr+1
4690  c42f 97            	ld	xl,a
4691  c430 c64027        	ld	a,_stored_hostaddr
4692  c433 02            	rlwa	x,a
4693  c434 cf0101        	ldw	_IpAddr+2,x
4694                     ; 1390     uip_sethostaddr(IpAddr);
4696  c437 ce00ff        	ldw	x,_IpAddr
4697  c43a cf02c0        	ldw	_uip_hostaddr,x
4700  c43d ce0101        	ldw	x,_IpAddr+2
4701  c440 cf02c2        	ldw	_uip_hostaddr+2,x
4702                     ; 1393     uip_ipaddr(IpAddr,
4704  c443 c64026        	ld	a,_stored_draddr+3
4705  c446 97            	ld	xl,a
4706  c447 c64025        	ld	a,_stored_draddr+2
4707  c44a 02            	rlwa	x,a
4708  c44b cf00ff        	ldw	_IpAddr,x
4711  c44e c64024        	ld	a,_stored_draddr+1
4712  c451 97            	ld	xl,a
4713  c452 c64023        	ld	a,_stored_draddr
4714  c455 02            	rlwa	x,a
4715  c456 cf0101        	ldw	_IpAddr+2,x
4716                     ; 1398     uip_setdraddr(IpAddr);
4718  c459 ce00ff        	ldw	x,_IpAddr
4719  c45c cf02b8        	ldw	_uip_draddr,x
4722  c45f ce0101        	ldw	x,_IpAddr+2
4723  c462 cf02ba        	ldw	_uip_draddr+2,x
4724                     ; 1401     uip_ipaddr(IpAddr,
4726  c465 c64022        	ld	a,_stored_netmask+3
4727  c468 97            	ld	xl,a
4728  c469 c64021        	ld	a,_stored_netmask+2
4729  c46c 02            	rlwa	x,a
4730  c46d cf00ff        	ldw	_IpAddr,x
4733  c470 c64020        	ld	a,_stored_netmask+1
4734  c473 97            	ld	xl,a
4735  c474 c6401f        	ld	a,_stored_netmask
4736  c477 02            	rlwa	x,a
4737  c478 cf0101        	ldw	_IpAddr+2,x
4738                     ; 1406     uip_setnetmask(IpAddr);
4740  c47b ce00ff        	ldw	x,_IpAddr
4741  c47e cf02bc        	ldw	_uip_netmask,x
4744  c481 ce0101        	ldw	x,_IpAddr+2
4745  c484 cf02be        	ldw	_uip_netmask+2,x
4746                     ; 1410     uip_ipaddr(IpAddr,
4748  c487 c64034        	ld	a,_stored_mqttserveraddr+3
4749  c48a 97            	ld	xl,a
4750  c48b c64033        	ld	a,_stored_mqttserveraddr+2
4751  c48e 02            	rlwa	x,a
4752  c48f cf00ff        	ldw	_IpAddr,x
4755  c492 c64032        	ld	a,_stored_mqttserveraddr+1
4756  c495 97            	ld	xl,a
4757  c496 c64031        	ld	a,_stored_mqttserveraddr
4758  c499 02            	rlwa	x,a
4759  c49a cf0101        	ldw	_IpAddr+2,x
4760                     ; 1415     uip_setmqttserveraddr(IpAddr);
4762  c49d ce00ff        	ldw	x,_IpAddr
4763  c4a0 cf02b4        	ldw	_uip_mqttserveraddr,x
4766  c4a3 ce0101        	ldw	x,_IpAddr+2
4767  c4a6 cf02b6        	ldw	_uip_mqttserveraddr+2,x
4768                     ; 1417     Port_Mqttd = stored_mqttport;
4770  c4a9 ce402f        	ldw	x,_stored_mqttport
4771  c4ac cf00f6        	ldw	_Port_Mqttd,x
4772                     ; 1421     Port_Httpd = stored_port;
4774  c4af ce401d        	ldw	x,_stored_port
4775  c4b2 cf0103        	ldw	_Port_Httpd,x
4776                     ; 1426     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
4778  c4b5 55401c000a    	mov	_uip_ethaddr,_stored_uip_ethaddr_oct+5
4779                     ; 1427     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
4781  c4ba 55401b000b    	mov	_uip_ethaddr+1,_stored_uip_ethaddr_oct+4
4782                     ; 1428     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
4784  c4bf 55401a000c    	mov	_uip_ethaddr+2,_stored_uip_ethaddr_oct+3
4785                     ; 1429     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
4787  c4c4 554019000d    	mov	_uip_ethaddr+3,_stored_uip_ethaddr_oct+2
4788                     ; 1430     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
4790  c4c9 554018000e    	mov	_uip_ethaddr+4,_stored_uip_ethaddr_oct+1
4791                     ; 1431     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
4793  c4ce 554017000f    	mov	_uip_ethaddr+5,_stored_uip_ethaddr_oct
4794                     ; 1435     if (stored_config_settings[0] != '0' && stored_config_settings[0] != '1') {
4796  c4d3 c6404c        	ld	a,_stored_config_settings
4797  c4d6 a130          	cp	a,#48
4798  c4d8 270c          	jreq	L3252
4800  c4da a131          	cp	a,#49
4801  c4dc 2708          	jreq	L3252
4802                     ; 1436       stored_config_settings[0] = '0';
4804  c4de a630          	ld	a,#48
4805  c4e0 ae404c        	ldw	x,#_stored_config_settings
4806  c4e3 cdf690        	call	c_eewrc
4808  c4e6               L3252:
4809                     ; 1438     if (stored_config_settings[1] != '0' && stored_config_settings[1] != '1') {
4811  c4e6 c6404d        	ld	a,_stored_config_settings+1
4812  c4e9 a130          	cp	a,#48
4813  c4eb 270c          	jreq	L5252
4815  c4ed a131          	cp	a,#49
4816  c4ef 2708          	jreq	L5252
4817                     ; 1439       stored_config_settings[1] = '0';
4819  c4f1 a630          	ld	a,#48
4820  c4f3 ae404d        	ldw	x,#_stored_config_settings+1
4821  c4f6 cdf690        	call	c_eewrc
4823  c4f9               L5252:
4824                     ; 1441     if (stored_config_settings[2] != '0' && stored_config_settings[2] != '1' && stored_config_settings[2] != '2') {
4826  c4f9 c6404e        	ld	a,_stored_config_settings+2
4827  c4fc a130          	cp	a,#48
4828  c4fe 2710          	jreq	L7252
4830  c500 a131          	cp	a,#49
4831  c502 270c          	jreq	L7252
4833  c504 a132          	cp	a,#50
4834  c506 2708          	jreq	L7252
4835                     ; 1442       stored_config_settings[2] = '2';
4837  c508 a632          	ld	a,#50
4838  c50a ae404e        	ldw	x,#_stored_config_settings+2
4839  c50d cdf690        	call	c_eewrc
4841  c510               L7252:
4842                     ; 1444     if (stored_config_settings[3] != '0' && stored_config_settings[3] != '1') {
4844  c510 c6404f        	ld	a,_stored_config_settings+3
4845  c513 a130          	cp	a,#48
4846  c515 270c          	jreq	L1352
4848  c517 a131          	cp	a,#49
4849  c519 2708          	jreq	L1352
4850                     ; 1445       stored_config_settings[3] = '0';
4852  c51b a630          	ld	a,#48
4853  c51d ae404f        	ldw	x,#_stored_config_settings+3
4854  c520 cdf690        	call	c_eewrc
4856  c523               L1352:
4857                     ; 1447     if (stored_config_settings[4] != '0') {
4859  c523 c64050        	ld	a,_stored_config_settings+4
4860  c526 a130          	cp	a,#48
4861  c528 2708          	jreq	L3352
4862                     ; 1448       stored_config_settings[4] = '0';
4864  c52a a630          	ld	a,#48
4865  c52c ae4050        	ldw	x,#_stored_config_settings+4
4866  c52f cdf690        	call	c_eewrc
4868  c532               L3352:
4869                     ; 1450     if (stored_config_settings[5] != '0') {
4871  c532 c64051        	ld	a,_stored_config_settings+5
4872  c535 a130          	cp	a,#48
4873  c537 2708          	jreq	L5352
4874                     ; 1451       stored_config_settings[5] = '0';
4876  c539 a630          	ld	a,#48
4877  c53b ae4051        	ldw	x,#_stored_config_settings+5
4878  c53e cdf690        	call	c_eewrc
4880  c541               L5352:
4881                     ; 1455     if (stored_config_settings[0] == '0') invert_output = 0x00;
4883  c541 c6404c        	ld	a,_stored_config_settings
4884  c544 a130          	cp	a,#48
4885  c546 2606          	jrne	L7352
4888  c548 725f0166      	clr	_invert_output
4890  c54c 2004          	jra	L1452
4891  c54e               L7352:
4892                     ; 1456     else invert_output = 0xff;
4894  c54e 35ff0166      	mov	_invert_output,#255
4895  c552               L1452:
4896                     ; 1459     if (stored_config_settings[1] == '0') invert_input = 0x00;
4898  c552 c6404d        	ld	a,_stored_config_settings+1
4899  c555 a130          	cp	a,#48
4900  c557 2606          	jrne	L3452
4903  c559 725f0165      	clr	_invert_input
4905  c55d 2004          	jra	L5452
4906  c55f               L3452:
4907                     ; 1460     else invert_input = 0xff;
4909  c55f 35ff0165      	mov	_invert_input,#255
4910  c563               L5452:
4911                     ; 1465     if (stored_config_settings[2] == '0') {
4913  c563 c6404e        	ld	a,_stored_config_settings+2
4914  c566 a130          	cp	a,#48
4915  c568 260a          	jrne	L7452
4916                     ; 1467       IO_16to9 = 0x00;
4918  c56a 725f016e      	clr	_IO_16to9
4919                     ; 1468       IO_8to1 = 0x00;
4921  c56e 725f016d      	clr	_IO_8to1
4923  c572 2036          	jra	L1552
4924  c574               L7452:
4925                     ; 1470     else if (stored_config_settings[2] == '1') {
4927  c574 a131          	cp	a,#49
4928  c576 260a          	jrne	L3552
4929                     ; 1472       IO_16to9 = 0xff;
4931  c578 35ff016e      	mov	_IO_16to9,#255
4932                     ; 1473       IO_8to1 = 0xff;
4934  c57c 35ff016d      	mov	_IO_8to1,#255
4936  c580 2028          	jra	L1552
4937  c582               L3552:
4938                     ; 1477       IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9;
4940  c582 55404b0168    	mov	_IO_16to9_sent,_stored_IO_16to9
4941  c587 550168016a    	mov	_IO_16to9_new2,_IO_16to9_sent
4942  c58c 55016a016c    	mov	_IO_16to9_new1,_IO_16to9_new2
4943  c591 55016c016e    	mov	_IO_16to9,_IO_16to9_new1
4944                     ; 1478       IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1;
4946  c596 5540140167    	mov	_IO_8to1_sent,_stored_IO_8to1
4947  c59b 5501670169    	mov	_IO_8to1_new2,_IO_8to1_sent
4948  c5a0 550169016b    	mov	_IO_8to1_new1,_IO_8to1_new2
4949  c5a5 55016b016d    	mov	_IO_8to1,_IO_8to1_new1
4950  c5aa               L1552:
4951                     ; 1482     write_output_registers();
4953  c5aa cdce26        	call	_write_output_registers
4956  c5ad ccc80f        	jra	L7552
4957  c5b0               L1652:
4958                     ; 1491     uip_ipaddr(IpAddr, 192,168,1,4);
4960  c5b0 aec0a8        	ldw	x,#49320
4961  c5b3 cf00ff        	ldw	_IpAddr,x
4964  c5b6 ae0104        	ldw	x,#260
4965  c5b9 cf0101        	ldw	_IpAddr+2,x
4966                     ; 1492     uip_sethostaddr(IpAddr);
4968  c5bc ce00ff        	ldw	x,_IpAddr
4969  c5bf cf02c0        	ldw	_uip_hostaddr,x
4972  c5c2 ce0101        	ldw	x,_IpAddr+2
4973  c5c5 cf02c2        	ldw	_uip_hostaddr+2,x
4974                     ; 1494     stored_hostaddr[3] = 192;	// MSB
4976  c5c8 a6c0          	ld	a,#192
4977  c5ca ae402a        	ldw	x,#_stored_hostaddr+3
4978  c5cd cdf690        	call	c_eewrc
4980                     ; 1495     stored_hostaddr[2] = 168;	//
4982  c5d0 a6a8          	ld	a,#168
4983  c5d2 ae4029        	ldw	x,#_stored_hostaddr+2
4984  c5d5 cdf690        	call	c_eewrc
4986                     ; 1496     stored_hostaddr[1] = 1;	//
4988  c5d8 a601          	ld	a,#1
4989  c5da ae4028        	ldw	x,#_stored_hostaddr+1
4990  c5dd cdf690        	call	c_eewrc
4992                     ; 1497     stored_hostaddr[0] = 4;	// LSB
4994  c5e0 a604          	ld	a,#4
4995  c5e2 ae4027        	ldw	x,#_stored_hostaddr
4996  c5e5 cdf690        	call	c_eewrc
4998                     ; 1500     uip_ipaddr(IpAddr, 192,168,1,1);
5000  c5e8 aec0a8        	ldw	x,#49320
5001  c5eb cf00ff        	ldw	_IpAddr,x
5004  c5ee ae0101        	ldw	x,#257
5005  c5f1 cf0101        	ldw	_IpAddr+2,x
5006                     ; 1501     uip_setdraddr(IpAddr);
5008  c5f4 ce00ff        	ldw	x,_IpAddr
5009  c5f7 cf02b8        	ldw	_uip_draddr,x
5012  c5fa ce0101        	ldw	x,_IpAddr+2
5013  c5fd cf02ba        	ldw	_uip_draddr+2,x
5014                     ; 1503     stored_draddr[3] = 192;	// MSB
5016  c600 a6c0          	ld	a,#192
5017  c602 ae4026        	ldw	x,#_stored_draddr+3
5018  c605 cdf690        	call	c_eewrc
5020                     ; 1504     stored_draddr[2] = 168;	//
5022  c608 a6a8          	ld	a,#168
5023  c60a ae4025        	ldw	x,#_stored_draddr+2
5024  c60d cdf690        	call	c_eewrc
5026                     ; 1505     stored_draddr[1] = 1;		//
5028  c610 a601          	ld	a,#1
5029  c612 ae4024        	ldw	x,#_stored_draddr+1
5030  c615 cdf690        	call	c_eewrc
5032                     ; 1506     stored_draddr[0] = 1;		// LSB
5034  c618 a601          	ld	a,#1
5035  c61a ae4023        	ldw	x,#_stored_draddr
5036  c61d cdf690        	call	c_eewrc
5038                     ; 1509     uip_ipaddr(IpAddr, 255,255,255,0);
5040  c620 aeffff        	ldw	x,#65535
5041  c623 cf00ff        	ldw	_IpAddr,x
5044  c626 aeff00        	ldw	x,#65280
5045  c629 cf0101        	ldw	_IpAddr+2,x
5046                     ; 1510     uip_setnetmask(IpAddr);
5048  c62c ce00ff        	ldw	x,_IpAddr
5049  c62f cf02bc        	ldw	_uip_netmask,x
5052  c632 ce0101        	ldw	x,_IpAddr+2
5053  c635 cf02be        	ldw	_uip_netmask+2,x
5054                     ; 1512     stored_netmask[3] = 255;	// MSB
5056  c638 a6ff          	ld	a,#255
5057  c63a ae4022        	ldw	x,#_stored_netmask+3
5058  c63d cdf690        	call	c_eewrc
5060                     ; 1513     stored_netmask[2] = 255;	//
5062  c640 a6ff          	ld	a,#255
5063  c642 ae4021        	ldw	x,#_stored_netmask+2
5064  c645 cdf690        	call	c_eewrc
5066                     ; 1514     stored_netmask[1] = 255;	//
5068  c648 a6ff          	ld	a,#255
5069  c64a ae4020        	ldw	x,#_stored_netmask+1
5070  c64d cdf690        	call	c_eewrc
5072                     ; 1515     stored_netmask[0] = 0;	// LSB
5074  c650 4f            	clr	a
5075  c651 ae401f        	ldw	x,#_stored_netmask
5076  c654 cdf690        	call	c_eewrc
5078                     ; 1519     uip_ipaddr(IpAddr, 0,0,0,0);
5080  c657 5f            	clrw	x
5081  c658 cf00ff        	ldw	_IpAddr,x
5084  c65b cf0101        	ldw	_IpAddr+2,x
5085                     ; 1520     uip_setmqttserveraddr(IpAddr);
5087  c65e cf02b4        	ldw	_uip_mqttserveraddr,x
5090  c661 cf02b6        	ldw	_uip_mqttserveraddr+2,x
5091                     ; 1523     stored_mqttserveraddr[3] = 0;	// MSB
5093  c664 4f            	clr	a
5094  c665 ae4034        	ldw	x,#_stored_mqttserveraddr+3
5095  c668 cdf690        	call	c_eewrc
5097                     ; 1524     stored_mqttserveraddr[2] = 0;	//
5099  c66b 4f            	clr	a
5100  c66c ae4033        	ldw	x,#_stored_mqttserveraddr+2
5101  c66f cdf690        	call	c_eewrc
5103                     ; 1525     stored_mqttserveraddr[1] = 0;	//
5105  c672 4f            	clr	a
5106  c673 ae4032        	ldw	x,#_stored_mqttserveraddr+1
5107  c676 cdf690        	call	c_eewrc
5109                     ; 1526     stored_mqttserveraddr[0] = 0;	// LSB
5111  c679 4f            	clr	a
5112  c67a ae4031        	ldw	x,#_stored_mqttserveraddr
5113  c67d cdf690        	call	c_eewrc
5115                     ; 1529     stored_mqttport = 1883;		// Port
5117  c680 ae075b        	ldw	x,#1883
5118  c683 89            	pushw	x
5119  c684 ae402f        	ldw	x,#_stored_mqttport
5120  c687 cdf67a        	call	c_eewrw
5122  c68a 85            	popw	x
5123                     ; 1531     Port_Mqttd = 1883;
5125  c68b ae075b        	ldw	x,#1883
5126  c68e cf00f6        	ldw	_Port_Mqttd,x
5127                     ; 1534     for(i=0; i<11; i++) { stored_mqtt_username[i] = '\0'; }
5129  c691 4f            	clr	a
5130  c692 6b01          	ld	(OFST+0,sp),a
5132  c694               L1262:
5135  c694 5f            	clrw	x
5136  c695 97            	ld	xl,a
5137  c696 4f            	clr	a
5138  c697 1c4035        	addw	x,#_stored_mqtt_username
5139  c69a cdf690        	call	c_eewrc
5143  c69d 0c01          	inc	(OFST+0,sp)
5147  c69f 7b01          	ld	a,(OFST+0,sp)
5148  c6a1 a10b          	cp	a,#11
5149  c6a3 25ef          	jrult	L1262
5150                     ; 1535     for(i=0; i<11; i++) { stored_mqtt_password[i] = '\0'; }
5152  c6a5 4f            	clr	a
5153  c6a6 6b01          	ld	(OFST+0,sp),a
5155  c6a8               L7262:
5158  c6a8 5f            	clrw	x
5159  c6a9 97            	ld	xl,a
5160  c6aa 4f            	clr	a
5161  c6ab 1c4040        	addw	x,#_stored_mqtt_password
5162  c6ae cdf690        	call	c_eewrc
5166  c6b1 0c01          	inc	(OFST+0,sp)
5170  c6b3 7b01          	ld	a,(OFST+0,sp)
5171  c6b5 a10b          	cp	a,#11
5172  c6b7 25ef          	jrult	L7262
5173                     ; 1540     stored_port = 8080;
5175  c6b9 ae1f90        	ldw	x,#8080
5176  c6bc 89            	pushw	x
5177  c6bd ae401d        	ldw	x,#_stored_port
5178  c6c0 cdf67a        	call	c_eewrw
5180  c6c3 85            	popw	x
5181                     ; 1542     Port_Httpd = 8080;
5183  c6c4 ae1f90        	ldw	x,#8080
5184  c6c7 cf0103        	ldw	_Port_Httpd,x
5185                     ; 1558     stored_uip_ethaddr_oct[5] = 0xc2;	//MAC MSB
5187  c6ca a6c2          	ld	a,#194
5188  c6cc ae401c        	ldw	x,#_stored_uip_ethaddr_oct+5
5189  c6cf cdf690        	call	c_eewrc
5191                     ; 1559     stored_uip_ethaddr_oct[4] = 0x4d;
5193  c6d2 a64d          	ld	a,#77
5194  c6d4 ae401b        	ldw	x,#_stored_uip_ethaddr_oct+4
5195  c6d7 cdf690        	call	c_eewrc
5197                     ; 1560     stored_uip_ethaddr_oct[3] = 0x69;
5199  c6da a669          	ld	a,#105
5200  c6dc ae401a        	ldw	x,#_stored_uip_ethaddr_oct+3
5201  c6df cdf690        	call	c_eewrc
5203                     ; 1561     stored_uip_ethaddr_oct[2] = 0x6b;
5205  c6e2 a66b          	ld	a,#107
5206  c6e4 ae4019        	ldw	x,#_stored_uip_ethaddr_oct+2
5207  c6e7 cdf690        	call	c_eewrc
5209                     ; 1562     stored_uip_ethaddr_oct[1] = 0x65;
5211  c6ea a665          	ld	a,#101
5212  c6ec ae4018        	ldw	x,#_stored_uip_ethaddr_oct+1
5213  c6ef cdf690        	call	c_eewrc
5215                     ; 1563     stored_uip_ethaddr_oct[0] = 0x00;	//MAC LSB
5217  c6f2 4f            	clr	a
5218  c6f3 ae4017        	ldw	x,#_stored_uip_ethaddr_oct
5219  c6f6 cdf690        	call	c_eewrc
5221                     ; 1565     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
5223  c6f9 35c2000a      	mov	_uip_ethaddr,#194
5224                     ; 1566     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
5226  c6fd 354d000b      	mov	_uip_ethaddr+1,#77
5227                     ; 1567     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
5229  c701 3569000c      	mov	_uip_ethaddr+2,#105
5230                     ; 1568     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
5232  c705 356b000d      	mov	_uip_ethaddr+3,#107
5233                     ; 1569     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
5235  c709 3565000e      	mov	_uip_ethaddr+4,#101
5236                     ; 1570     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
5238  c70d 725f000f      	clr	_uip_ethaddr+5
5239                     ; 1573     stored_devicename[0] =  'N';
5241  c711 a64e          	ld	a,#78
5242  c713 ae4000        	ldw	x,#_stored_devicename
5243  c716 cdf690        	call	c_eewrc
5245                     ; 1574     stored_devicename[1] =  'e';
5247  c719 a665          	ld	a,#101
5248  c71b ae4001        	ldw	x,#_stored_devicename+1
5249  c71e cdf690        	call	c_eewrc
5251                     ; 1575     stored_devicename[2] =  'w';
5253  c721 a677          	ld	a,#119
5254  c723 ae4002        	ldw	x,#_stored_devicename+2
5255  c726 cdf690        	call	c_eewrc
5257                     ; 1576     stored_devicename[3] =  'D';
5259  c729 a644          	ld	a,#68
5260  c72b ae4003        	ldw	x,#_stored_devicename+3
5261  c72e cdf690        	call	c_eewrc
5263                     ; 1577     stored_devicename[4] =  'e';
5265  c731 a665          	ld	a,#101
5266  c733 ae4004        	ldw	x,#_stored_devicename+4
5267  c736 cdf690        	call	c_eewrc
5269                     ; 1578     stored_devicename[5] =  'v';
5271  c739 a676          	ld	a,#118
5272  c73b ae4005        	ldw	x,#_stored_devicename+5
5273  c73e cdf690        	call	c_eewrc
5275                     ; 1579     stored_devicename[6] =  'i';
5277  c741 a669          	ld	a,#105
5278  c743 ae4006        	ldw	x,#_stored_devicename+6
5279  c746 cdf690        	call	c_eewrc
5281                     ; 1580     stored_devicename[7] =  'c';
5283  c749 a663          	ld	a,#99
5284  c74b ae4007        	ldw	x,#_stored_devicename+7
5285  c74e cdf690        	call	c_eewrc
5287                     ; 1581     stored_devicename[8] =  'e';
5289  c751 a665          	ld	a,#101
5290  c753 ae4008        	ldw	x,#_stored_devicename+8
5291  c756 cdf690        	call	c_eewrc
5293                     ; 1582     stored_devicename[9] =  '0';
5295  c759 a630          	ld	a,#48
5296  c75b ae4009        	ldw	x,#_stored_devicename+9
5297  c75e cdf690        	call	c_eewrc
5299                     ; 1583     stored_devicename[10] = '0';
5301  c761 a630          	ld	a,#48
5302  c763 ae400a        	ldw	x,#_stored_devicename+10
5303  c766 cdf690        	call	c_eewrc
5305                     ; 1584     stored_devicename[11] = '0';
5307  c769 a630          	ld	a,#48
5308  c76b ae400b        	ldw	x,#_stored_devicename+11
5309  c76e cdf690        	call	c_eewrc
5311                     ; 1585     for (i=12; i<20; i++) stored_devicename[i] = '\0';
5313  c771 a60c          	ld	a,#12
5314  c773 6b01          	ld	(OFST+0,sp),a
5316  c775               L5362:
5319  c775 5f            	clrw	x
5320  c776 97            	ld	xl,a
5321  c777 4f            	clr	a
5322  c778 1c4000        	addw	x,#_stored_devicename
5323  c77b cdf690        	call	c_eewrc
5327  c77e 0c01          	inc	(OFST+0,sp)
5331  c780 7b01          	ld	a,(OFST+0,sp)
5332  c782 a114          	cp	a,#20
5333  c784 25ef          	jrult	L5362
5334                     ; 1590     stored_config_settings[0] = '0'; // Set to Invert Output OFF
5336  c786 a630          	ld	a,#48
5337  c788 ae404c        	ldw	x,#_stored_config_settings
5338  c78b cdf690        	call	c_eewrc
5340                     ; 1591     stored_config_settings[1] = '0'; // Set to Invert Input Off
5342  c78e a630          	ld	a,#48
5343  c790 ae404d        	ldw	x,#_stored_config_settings+1
5344  c793 cdf690        	call	c_eewrc
5346                     ; 1592     stored_config_settings[2] = '2'; // Set to Retain pin states
5348  c796 a632          	ld	a,#50
5349  c798 ae404e        	ldw	x,#_stored_config_settings+2
5350  c79b cdf690        	call	c_eewrc
5352                     ; 1593     stored_config_settings[3] = '0'; // Set to Half Duplex
5354  c79e a630          	ld	a,#48
5355  c7a0 ae404f        	ldw	x,#_stored_config_settings+3
5356  c7a3 cdf690        	call	c_eewrc
5358                     ; 1594     stored_config_settings[4] = '0'; // undefined
5360  c7a6 a630          	ld	a,#48
5361  c7a8 ae4050        	ldw	x,#_stored_config_settings+4
5362  c7ab cdf690        	call	c_eewrc
5364                     ; 1595     stored_config_settings[5] = '0'; // undefined
5366  c7ae a630          	ld	a,#48
5367  c7b0 ae4051        	ldw	x,#_stored_config_settings+5
5368  c7b3 cdf690        	call	c_eewrc
5370                     ; 1596     invert_output = 0x00;			// Turn off output invert bit
5372  c7b6 725f0166      	clr	_invert_output
5373                     ; 1597     invert_input = 0x00;			// Turn off output invert bit
5375  c7ba 725f0165      	clr	_invert_input
5376                     ; 1598     IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9 = 0x00;
5378  c7be 4f            	clr	a
5379  c7bf ae404b        	ldw	x,#_stored_IO_16to9
5380  c7c2 cdf690        	call	c_eewrc
5382  c7c5 725f0168      	clr	_IO_16to9_sent
5383  c7c9 725f016a      	clr	_IO_16to9_new2
5384  c7cd 725f016c      	clr	_IO_16to9_new1
5385  c7d1 725f016e      	clr	_IO_16to9
5386                     ; 1599     IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1  = 0x00;
5388  c7d5 4f            	clr	a
5389  c7d6 ae4014        	ldw	x,#_stored_IO_8to1
5390  c7d9 cdf690        	call	c_eewrc
5392  c7dc 725f0167      	clr	_IO_8to1_sent
5393  c7e0 725f0169      	clr	_IO_8to1_new2
5394  c7e4 725f016b      	clr	_IO_8to1_new1
5395  c7e8 725f016d      	clr	_IO_8to1
5396                     ; 1600     write_output_registers();          // Set Relay Control outputs
5398  c7ec cdce26        	call	_write_output_registers
5400                     ; 1603     magic4 = 0x55;		// MSB
5402  c7ef a655          	ld	a,#85
5403  c7f1 ae402e        	ldw	x,#_magic4
5404  c7f4 cdf690        	call	c_eewrc
5406                     ; 1604     magic3 = 0xee;		//
5408  c7f7 a6ee          	ld	a,#238
5409  c7f9 ae402d        	ldw	x,#_magic3
5410  c7fc cdf690        	call	c_eewrc
5412                     ; 1605     magic2 = 0x0f;		//
5414  c7ff a60f          	ld	a,#15
5415  c801 ae402c        	ldw	x,#_magic2
5416  c804 cdf690        	call	c_eewrc
5418                     ; 1606     magic1 = 0xf0;		// LSB
5420  c807 a6f0          	ld	a,#240
5421  c809 ae402b        	ldw	x,#_magic1
5422  c80c cdf690        	call	c_eewrc
5424  c80f               L7552:
5425                     ; 1611   for (i=0; i<4; i++) {
5427  c80f 4f            	clr	a
5428  c810 6b01          	ld	(OFST+0,sp),a
5430  c812               L3462:
5431                     ; 1612     Pending_hostaddr[i] = stored_hostaddr[i];
5433  c812 5f            	clrw	x
5434  c813 97            	ld	xl,a
5435  c814 d64027        	ld	a,(_stored_hostaddr,x)
5436  c817 d70143        	ld	(_Pending_hostaddr,x),a
5437                     ; 1613     Pending_draddr[i] = stored_draddr[i];
5439  c81a 5f            	clrw	x
5440  c81b 7b01          	ld	a,(OFST+0,sp)
5441  c81d 97            	ld	xl,a
5442  c81e d64023        	ld	a,(_stored_draddr,x)
5443  c821 d7013f        	ld	(_Pending_draddr,x),a
5444                     ; 1614     Pending_netmask[i] = stored_netmask[i];
5446  c824 5f            	clrw	x
5447  c825 7b01          	ld	a,(OFST+0,sp)
5448  c827 97            	ld	xl,a
5449  c828 d6401f        	ld	a,(_stored_netmask,x)
5450  c82b d7013b        	ld	(_Pending_netmask,x),a
5451                     ; 1611   for (i=0; i<4; i++) {
5453  c82e 0c01          	inc	(OFST+0,sp)
5457  c830 7b01          	ld	a,(OFST+0,sp)
5458  c832 a104          	cp	a,#4
5459  c834 25dc          	jrult	L3462
5460                     ; 1617   Pending_port = stored_port;
5462  c836 ce401d        	ldw	x,_stored_port
5463  c839 cf0139        	ldw	_Pending_port,x
5464                     ; 1619   for (i=0; i<20; i++) {
5466  c83c 4f            	clr	a
5467  c83d 6b01          	ld	(OFST+0,sp),a
5469  c83f               L1562:
5470                     ; 1620     Pending_devicename[i] = stored_devicename[i];
5472  c83f 5f            	clrw	x
5473  c840 97            	ld	xl,a
5474  c841 d64000        	ld	a,(_stored_devicename,x)
5475  c844 d70125        	ld	(_Pending_devicename,x),a
5476                     ; 1619   for (i=0; i<20; i++) {
5478  c847 0c01          	inc	(OFST+0,sp)
5482  c849 7b01          	ld	a,(OFST+0,sp)
5483  c84b a114          	cp	a,#20
5484  c84d 25f0          	jrult	L1562
5485                     ; 1623   for (i=0; i<6; i++) {
5487  c84f 4f            	clr	a
5488  c850 6b01          	ld	(OFST+0,sp),a
5490  c852               L7562:
5491                     ; 1624     Pending_config_settings[i] = stored_config_settings[i];
5493  c852 5f            	clrw	x
5494  c853 97            	ld	xl,a
5495  c854 d6404c        	ld	a,(_stored_config_settings,x)
5496  c857 d7011f        	ld	(_Pending_config_settings,x),a
5497                     ; 1625     Pending_uip_ethaddr_oct[i] = stored_uip_ethaddr_oct[i];
5499  c85a 5f            	clrw	x
5500  c85b 7b01          	ld	a,(OFST+0,sp)
5501  c85d 97            	ld	xl,a
5502  c85e d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5503  c861 d70119        	ld	(_Pending_uip_ethaddr_oct,x),a
5504                     ; 1623   for (i=0; i<6; i++) {
5506  c864 0c01          	inc	(OFST+0,sp)
5510  c866 7b01          	ld	a,(OFST+0,sp)
5511  c868 a106          	cp	a,#6
5512  c86a 25e6          	jrult	L7562
5513                     ; 1629   for (i=0; i<4; i++) {
5515  c86c 4f            	clr	a
5516  c86d 6b01          	ld	(OFST+0,sp),a
5518  c86f               L5662:
5519                     ; 1630     Pending_mqttserveraddr[i] = stored_mqttserveraddr[i];
5521  c86f 5f            	clrw	x
5522  c870 97            	ld	xl,a
5523  c871 d64031        	ld	a,(_stored_mqttserveraddr,x)
5524  c874 d7015f        	ld	(_Pending_mqttserveraddr,x),a
5525                     ; 1629   for (i=0; i<4; i++) {
5527  c877 0c01          	inc	(OFST+0,sp)
5531  c879 7b01          	ld	a,(OFST+0,sp)
5532  c87b a104          	cp	a,#4
5533  c87d 25f0          	jrult	L5662
5534                     ; 1632   Pending_mqttport = stored_mqttport;
5536  c87f ce402f        	ldw	x,_stored_mqttport
5537  c882 cf015d        	ldw	_Pending_mqttport,x
5538                     ; 1633   for (i=0; i<11; i++) {
5540  c885 4f            	clr	a
5541  c886 6b01          	ld	(OFST+0,sp),a
5543  c888               L3762:
5544                     ; 1634     Pending_mqtt_username[i] = stored_mqtt_username[i];
5546  c888 5f            	clrw	x
5547  c889 97            	ld	xl,a
5548  c88a d64035        	ld	a,(_stored_mqtt_username,x)
5549  c88d d70152        	ld	(_Pending_mqtt_username,x),a
5550                     ; 1635     Pending_mqtt_password[i] = stored_mqtt_password[i];
5552  c890 5f            	clrw	x
5553  c891 7b01          	ld	a,(OFST+0,sp)
5554  c893 97            	ld	xl,a
5555  c894 d64040        	ld	a,(_stored_mqtt_password,x)
5556  c897 d70147        	ld	(_Pending_mqtt_password,x),a
5557                     ; 1633   for (i=0; i<11; i++) {
5559  c89a 0c01          	inc	(OFST+0,sp)
5563  c89c 7b01          	ld	a,(OFST+0,sp)
5564  c89e a10b          	cp	a,#11
5565  c8a0 25e6          	jrult	L3762
5566                     ; 1638   strcat(topic_base, stored_devicename);
5568  c8a2 ae4000        	ldw	x,#_stored_devicename
5569  c8a5 89            	pushw	x
5570  c8a6 ae0074        	ldw	x,#_topic_base
5571  c8a9 cdf64c        	call	_strcat
5573  c8ac 85            	popw	x
5574                     ; 1641   topic_base_len = (uint8_t)strlen(topic_base);
5576  c8ad ae0074        	ldw	x,#_topic_base
5577  c8b0 cdf660        	call	_strlen
5579  c8b3 9f            	ld	a,xl
5580  c8b4 c70073        	ld	_topic_base_len,a
5581                     ; 1645   update_mac_string();
5583  c8b7 cdc8bc        	call	_update_mac_string
5585                     ; 1647 }
5588  c8ba 84            	pop	a
5589  c8bb 81            	ret	
5632                     ; 1650 void update_mac_string(void) {
5633                     .text:	section	.text,new
5634  c8bc               _update_mac_string:
5636  c8bc 89            	pushw	x
5637       00000002      OFST:	set	2
5640                     ; 1656   i = 5;
5642  c8bd a605          	ld	a,#5
5643  c8bf 6b01          	ld	(OFST-1,sp),a
5645                     ; 1657   j = 0;
5647  c8c1 0f02          	clr	(OFST+0,sp)
5649  c8c3               L7172:
5650                     ; 1659     emb_itoa(stored_uip_ethaddr_oct[i], OctetArray, 16, 2);
5652  c8c3 4b02          	push	#2
5653  c8c5 4b10          	push	#16
5654  c8c7 ae005c        	ldw	x,#_OctetArray
5655  c8ca 89            	pushw	x
5656  c8cb 7b05          	ld	a,(OFST+3,sp)
5657  c8cd 5f            	clrw	x
5658  c8ce 97            	ld	xl,a
5659  c8cf d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5660  c8d2 b703          	ld	c_lreg+3,a
5661  c8d4 3f02          	clr	c_lreg+2
5662  c8d6 3f01          	clr	c_lreg+1
5663  c8d8 3f00          	clr	c_lreg
5664  c8da be02          	ldw	x,c_lreg+2
5665  c8dc 89            	pushw	x
5666  c8dd be00          	ldw	x,c_lreg
5667  c8df 89            	pushw	x
5668  c8e0 cda4d6        	call	_emb_itoa
5670  c8e3 5b08          	addw	sp,#8
5671                     ; 1660     mac_string[j++] = OctetArray[0];
5673  c8e5 7b02          	ld	a,(OFST+0,sp)
5674  c8e7 0c02          	inc	(OFST+0,sp)
5676  c8e9 5f            	clrw	x
5677  c8ea 97            	ld	xl,a
5678  c8eb c6005c        	ld	a,_OctetArray
5679  c8ee d7010c        	ld	(_mac_string,x),a
5680                     ; 1661     mac_string[j++] = OctetArray[1];
5682  c8f1 7b02          	ld	a,(OFST+0,sp)
5683  c8f3 0c02          	inc	(OFST+0,sp)
5685  c8f5 5f            	clrw	x
5686  c8f6 97            	ld	xl,a
5687  c8f7 c6005d        	ld	a,_OctetArray+1
5688  c8fa d7010c        	ld	(_mac_string,x),a
5689                     ; 1662     i--;
5691  c8fd 0a01          	dec	(OFST-1,sp)
5693                     ; 1658   while (j<12) {
5695  c8ff 7b02          	ld	a,(OFST+0,sp)
5696  c901 a10c          	cp	a,#12
5697  c903 25be          	jrult	L7172
5698                     ; 1664   mac_string[12] = '\0';
5700  c905 725f0118      	clr	_mac_string+12
5701                     ; 1665 }
5704  c909 85            	popw	x
5705  c90a 81            	ret	
5783                     ; 1668 void check_runtime_changes(void)
5783                     ; 1669 {
5784                     .text:	section	.text,new
5785  c90b               _check_runtime_changes:
5787  c90b 88            	push	a
5788       00000001      OFST:	set	1
5791                     ; 1682   read_input_registers();
5793  c90c cdcd8e        	call	_read_input_registers
5795                     ; 1684   if (parse_complete == 1 || mqtt_parse_complete == 1) {
5797  c90f c60106        	ld	a,_parse_complete
5798  c912 4a            	dec	a
5799  c913 2706          	jreq	L3472
5801  c915 c60105        	ld	a,_mqtt_parse_complete
5802  c918 4a            	dec	a
5803  c919 2624          	jrne	L1472
5804  c91b               L3472:
5805                     ; 1707     if (stored_IO_8to1 != IO_8to1) {
5807  c91b c64014        	ld	a,_stored_IO_8to1
5808  c91e c1016d        	cp	a,_IO_8to1
5809  c921 2710          	jreq	L5472
5810                     ; 1711       if (stored_config_settings[2] == '2') {
5812  c923 c6404e        	ld	a,_stored_config_settings+2
5813  c926 a132          	cp	a,#50
5814  c928 2609          	jrne	L5472
5815                     ; 1712         stored_IO_8to1 = IO_8to1;
5817  c92a c6016d        	ld	a,_IO_8to1
5818  c92d ae4014        	ldw	x,#_stored_IO_8to1
5819  c930 cdf690        	call	c_eewrc
5821  c933               L5472:
5822                     ; 1716     write_output_registers();
5824  c933 cdce26        	call	_write_output_registers
5826                     ; 1722     if (mqtt_parse_complete == 1) {
5828  c936 c60105        	ld	a,_mqtt_parse_complete
5829  c939 4a            	dec	a
5830  c93a 2603          	jrne	L1472
5831                     ; 1724       mqtt_parse_complete = 0;
5833  c93c c70105        	ld	_mqtt_parse_complete,a
5834  c93f               L1472:
5835                     ; 1729   if (parse_complete == 1) {
5837  c93f c60106        	ld	a,_parse_complete
5838  c942 4a            	dec	a
5839  c943 2703cccbd0    	jrne	L3572
5840                     ; 1770     if ((Pending_config_settings[0] != stored_config_settings[0])
5840                     ; 1771      || (stored_IO_8to1 != IO_8to1)) {
5842  c948 c6404c        	ld	a,_stored_config_settings
5843  c94b c1011f        	cp	a,_Pending_config_settings
5844  c94e 2608          	jrne	L7572
5846  c950 c64014        	ld	a,_stored_IO_8to1
5847  c953 c1016d        	cp	a,_IO_8to1
5848  c956 272d          	jreq	L5572
5849  c958               L7572:
5850                     ; 1774       stored_config_settings[0] = Pending_config_settings[0];
5852  c958 c6011f        	ld	a,_Pending_config_settings
5853  c95b ae404c        	ldw	x,#_stored_config_settings
5854  c95e cdf690        	call	c_eewrc
5856                     ; 1777       if (stored_config_settings[0] == '0') invert_output = 0x00;
5858  c961 c6404c        	ld	a,_stored_config_settings
5859  c964 a130          	cp	a,#48
5860  c966 2606          	jrne	L1672
5863  c968 725f0166      	clr	_invert_output
5865  c96c 2004          	jra	L3672
5866  c96e               L1672:
5867                     ; 1778       else invert_output = 0xff;
5869  c96e 35ff0166      	mov	_invert_output,#255
5870  c972               L3672:
5871                     ; 1782       if (stored_config_settings[2] == '2') {
5873  c972 c6404e        	ld	a,_stored_config_settings+2
5874  c975 a132          	cp	a,#50
5875  c977 2609          	jrne	L5672
5876                     ; 1783         stored_IO_8to1 = IO_8to1;
5878  c979 c6016d        	ld	a,_IO_8to1
5879  c97c ae4014        	ldw	x,#_stored_IO_8to1
5880  c97f cdf690        	call	c_eewrc
5882  c982               L5672:
5883                     ; 1787       write_output_registers();
5885  c982 cdce26        	call	_write_output_registers
5887  c985               L5572:
5888                     ; 1791     if (Pending_config_settings[1] != stored_config_settings[1]) {
5890  c985 c6404d        	ld	a,_stored_config_settings+1
5891  c988 c10120        	cp	a,_Pending_config_settings+1
5892  c98b 271e          	jreq	L7672
5893                     ; 1793       stored_config_settings[1] = Pending_config_settings[1];
5895  c98d c60120        	ld	a,_Pending_config_settings+1
5896  c990 ae404d        	ldw	x,#_stored_config_settings+1
5897  c993 cdf690        	call	c_eewrc
5899                     ; 1796       if (stored_config_settings[1] == '0') invert_input = 0x00;
5901  c996 c6404d        	ld	a,_stored_config_settings+1
5902  c999 a130          	cp	a,#48
5903  c99b 2606          	jrne	L1772
5906  c99d 725f0165      	clr	_invert_input
5908  c9a1 2004          	jra	L3772
5909  c9a3               L1772:
5910                     ; 1797       else invert_input = 0xff;
5912  c9a3 35ff0165      	mov	_invert_input,#255
5913  c9a7               L3772:
5914                     ; 1801       restart_request = 1;
5916  c9a7 35010109      	mov	_restart_request,#1
5917  c9ab               L7672:
5918                     ; 1835     if (Pending_config_settings[2] != stored_config_settings[2]) {
5920  c9ab c6404e        	ld	a,_stored_config_settings+2
5921  c9ae c10121        	cp	a,_Pending_config_settings+2
5922  c9b1 2709          	jreq	L5772
5923                     ; 1837       stored_config_settings[2] = Pending_config_settings[2];
5925  c9b3 c60121        	ld	a,_Pending_config_settings+2
5926  c9b6 ae404e        	ldw	x,#_stored_config_settings+2
5927  c9b9 cdf690        	call	c_eewrc
5929  c9bc               L5772:
5930                     ; 1841     if (Pending_config_settings[3] != stored_config_settings[3]) {
5932  c9bc c6404f        	ld	a,_stored_config_settings+3
5933  c9bf c10122        	cp	a,_Pending_config_settings+3
5934  c9c2 270d          	jreq	L7772
5935                     ; 1844       stored_config_settings[3] = Pending_config_settings[3];
5937  c9c4 c60122        	ld	a,_Pending_config_settings+3
5938  c9c7 ae404f        	ldw	x,#_stored_config_settings+3
5939  c9ca cdf690        	call	c_eewrc
5941                     ; 1846       user_reboot_request = 1;
5943  c9cd 3501010a      	mov	_user_reboot_request,#1
5944  c9d1               L7772:
5945                     ; 1849     stored_config_settings[4] = Pending_config_settings[4];
5947  c9d1 c60123        	ld	a,_Pending_config_settings+4
5948  c9d4 ae4050        	ldw	x,#_stored_config_settings+4
5949  c9d7 cdf690        	call	c_eewrc
5951                     ; 1850     stored_config_settings[5] = Pending_config_settings[5];
5953  c9da c60124        	ld	a,_Pending_config_settings+5
5954  c9dd ae4051        	ldw	x,#_stored_config_settings+5
5955  c9e0 cdf690        	call	c_eewrc
5957                     ; 1853     if (stored_hostaddr[3] != Pending_hostaddr[3] ||
5957                     ; 1854         stored_hostaddr[2] != Pending_hostaddr[2] ||
5957                     ; 1855         stored_hostaddr[1] != Pending_hostaddr[1] ||
5957                     ; 1856         stored_hostaddr[0] != Pending_hostaddr[0]) {
5959  c9e3 c6402a        	ld	a,_stored_hostaddr+3
5960  c9e6 c10146        	cp	a,_Pending_hostaddr+3
5961  c9e9 2618          	jrne	L3003
5963  c9eb c64029        	ld	a,_stored_hostaddr+2
5964  c9ee c10145        	cp	a,_Pending_hostaddr+2
5965  c9f1 2610          	jrne	L3003
5967  c9f3 c64028        	ld	a,_stored_hostaddr+1
5968  c9f6 c10144        	cp	a,_Pending_hostaddr+1
5969  c9f9 2608          	jrne	L3003
5971  c9fb c64027        	ld	a,_stored_hostaddr
5972  c9fe c10143        	cp	a,_Pending_hostaddr
5973  ca01 2713          	jreq	L1003
5974  ca03               L3003:
5975                     ; 1858       for (i=0; i<4; i++) stored_hostaddr[i] = Pending_hostaddr[i];
5977  ca03 4f            	clr	a
5978  ca04 6b01          	ld	(OFST+0,sp),a
5980  ca06               L1103:
5983  ca06 5f            	clrw	x
5984  ca07 97            	ld	xl,a
5985  ca08 d60143        	ld	a,(_Pending_hostaddr,x)
5986  ca0b d74027        	ld	(_stored_hostaddr,x),a
5989  ca0e 0c01          	inc	(OFST+0,sp)
5993  ca10 7b01          	ld	a,(OFST+0,sp)
5994  ca12 a104          	cp	a,#4
5995  ca14 25f0          	jrult	L1103
5996  ca16               L1003:
5997                     ; 1862     if (stored_draddr[3] != Pending_draddr[3] ||
5997                     ; 1863         stored_draddr[2] != Pending_draddr[2] ||
5997                     ; 1864         stored_draddr[1] != Pending_draddr[1] ||
5997                     ; 1865         stored_draddr[0] != Pending_draddr[0]) {
5999  ca16 c64026        	ld	a,_stored_draddr+3
6000  ca19 c10142        	cp	a,_Pending_draddr+3
6001  ca1c 2618          	jrne	L1203
6003  ca1e c64025        	ld	a,_stored_draddr+2
6004  ca21 c10141        	cp	a,_Pending_draddr+2
6005  ca24 2610          	jrne	L1203
6007  ca26 c64024        	ld	a,_stored_draddr+1
6008  ca29 c10140        	cp	a,_Pending_draddr+1
6009  ca2c 2608          	jrne	L1203
6011  ca2e c64023        	ld	a,_stored_draddr
6012  ca31 c1013f        	cp	a,_Pending_draddr
6013  ca34 2717          	jreq	L7103
6014  ca36               L1203:
6015                     ; 1867       for (i=0; i<4; i++) stored_draddr[i] = Pending_draddr[i];
6017  ca36 4f            	clr	a
6018  ca37 6b01          	ld	(OFST+0,sp),a
6020  ca39               L7203:
6023  ca39 5f            	clrw	x
6024  ca3a 97            	ld	xl,a
6025  ca3b d6013f        	ld	a,(_Pending_draddr,x)
6026  ca3e d74023        	ld	(_stored_draddr,x),a
6029  ca41 0c01          	inc	(OFST+0,sp)
6033  ca43 7b01          	ld	a,(OFST+0,sp)
6034  ca45 a104          	cp	a,#4
6035  ca47 25f0          	jrult	L7203
6036                     ; 1868       restart_request = 1;
6038  ca49 35010109      	mov	_restart_request,#1
6039  ca4d               L7103:
6040                     ; 1872     if (stored_netmask[3] != Pending_netmask[3] ||
6040                     ; 1873         stored_netmask[2] != Pending_netmask[2] ||
6040                     ; 1874         stored_netmask[1] != Pending_netmask[1] ||
6040                     ; 1875         stored_netmask[0] != Pending_netmask[0]) {
6042  ca4d c64022        	ld	a,_stored_netmask+3
6043  ca50 c1013e        	cp	a,_Pending_netmask+3
6044  ca53 2618          	jrne	L7303
6046  ca55 c64021        	ld	a,_stored_netmask+2
6047  ca58 c1013d        	cp	a,_Pending_netmask+2
6048  ca5b 2610          	jrne	L7303
6050  ca5d c64020        	ld	a,_stored_netmask+1
6051  ca60 c1013c        	cp	a,_Pending_netmask+1
6052  ca63 2608          	jrne	L7303
6054  ca65 c6401f        	ld	a,_stored_netmask
6055  ca68 c1013b        	cp	a,_Pending_netmask
6056  ca6b 2717          	jreq	L5303
6057  ca6d               L7303:
6058                     ; 1877       for (i=0; i<4; i++) stored_netmask[i] = Pending_netmask[i];
6060  ca6d 4f            	clr	a
6061  ca6e 6b01          	ld	(OFST+0,sp),a
6063  ca70               L5403:
6066  ca70 5f            	clrw	x
6067  ca71 97            	ld	xl,a
6068  ca72 d6013b        	ld	a,(_Pending_netmask,x)
6069  ca75 d7401f        	ld	(_stored_netmask,x),a
6072  ca78 0c01          	inc	(OFST+0,sp)
6076  ca7a 7b01          	ld	a,(OFST+0,sp)
6077  ca7c a104          	cp	a,#4
6078  ca7e 25f0          	jrult	L5403
6079                     ; 1878       restart_request = 1;
6081  ca80 35010109      	mov	_restart_request,#1
6082  ca84               L5303:
6083                     ; 1882     if (stored_port != Pending_port) {
6085  ca84 ce401d        	ldw	x,_stored_port
6086  ca87 c30139        	cpw	x,_Pending_port
6087  ca8a 270f          	jreq	L3503
6088                     ; 1884       stored_port = Pending_port;
6090  ca8c ce0139        	ldw	x,_Pending_port
6091  ca8f 89            	pushw	x
6092  ca90 ae401d        	ldw	x,#_stored_port
6093  ca93 cdf67a        	call	c_eewrw
6095  ca96 35010109      	mov	_restart_request,#1
6096  ca9a 85            	popw	x
6097                     ; 1886       restart_request = 1;
6099  ca9b               L3503:
6100                     ; 1890     for(i=0; i<20; i++) {
6102  ca9b 4f            	clr	a
6103  ca9c 6b01          	ld	(OFST+0,sp),a
6105  ca9e               L5503:
6106                     ; 1891       if (stored_devicename[i] != Pending_devicename[i]) {
6108  ca9e 5f            	clrw	x
6109  ca9f 97            	ld	xl,a
6110  caa0 905f          	clrw	y
6111  caa2 9097          	ld	yl,a
6112  caa4 90d64000      	ld	a,(_stored_devicename,y)
6113  caa8 d10125        	cp	a,(_Pending_devicename,x)
6114  caab 270e          	jreq	L3603
6115                     ; 1892         stored_devicename[i] = Pending_devicename[i];
6117  caad 7b01          	ld	a,(OFST+0,sp)
6118  caaf 5f            	clrw	x
6119  cab0 97            	ld	xl,a
6120  cab1 d60125        	ld	a,(_Pending_devicename,x)
6121  cab4 d74000        	ld	(_stored_devicename,x),a
6122                     ; 1898         restart_request = 1;
6124  cab7 35010109      	mov	_restart_request,#1
6125  cabb               L3603:
6126                     ; 1890     for(i=0; i<20; i++) {
6128  cabb 0c01          	inc	(OFST+0,sp)
6132  cabd 7b01          	ld	a,(OFST+0,sp)
6133  cabf a114          	cp	a,#20
6134  cac1 25db          	jrult	L5503
6135                     ; 1905     strcpy(topic_base, devicetype);
6137  cac3 ae0074        	ldw	x,#_topic_base
6138  cac6 90ae9e68      	ldw	y,#L5261_devicetype
6139  caca               L403:
6140  caca 90f6          	ld	a,(y)
6141  cacc 905c          	incw	y
6142  cace f7            	ld	(x),a
6143  cacf 5c            	incw	x
6144  cad0 4d            	tnz	a
6145  cad1 26f7          	jrne	L403
6146                     ; 1906     strcat(topic_base, stored_devicename);
6148  cad3 ae4000        	ldw	x,#_stored_devicename
6149  cad6 89            	pushw	x
6150  cad7 ae0074        	ldw	x,#_topic_base
6151  cada cdf64c        	call	_strcat
6153  cadd 85            	popw	x
6154                     ; 1907     topic_base_len = (uint8_t)strlen(topic_base);
6156  cade ae0074        	ldw	x,#_topic_base
6157  cae1 cdf660        	call	_strlen
6159  cae4 9f            	ld	a,xl
6160  cae5 c70073        	ld	_topic_base_len,a
6161                     ; 1910     if (stored_mqttserveraddr[3] != Pending_mqttserveraddr[3] ||
6161                     ; 1911         stored_mqttserveraddr[2] != Pending_mqttserveraddr[2] ||
6161                     ; 1912         stored_mqttserveraddr[1] != Pending_mqttserveraddr[1] ||
6161                     ; 1913         stored_mqttserveraddr[0] != Pending_mqttserveraddr[0]) {
6163  cae8 c64034        	ld	a,_stored_mqttserveraddr+3
6164  caeb c10162        	cp	a,_Pending_mqttserveraddr+3
6165  caee 2618          	jrne	L7603
6167  caf0 c64033        	ld	a,_stored_mqttserveraddr+2
6168  caf3 c10161        	cp	a,_Pending_mqttserveraddr+2
6169  caf6 2610          	jrne	L7603
6171  caf8 c64032        	ld	a,_stored_mqttserveraddr+1
6172  cafb c10160        	cp	a,_Pending_mqttserveraddr+1
6173  cafe 2608          	jrne	L7603
6175  cb00 c64031        	ld	a,_stored_mqttserveraddr
6176  cb03 c1015f        	cp	a,_Pending_mqttserveraddr
6177  cb06 2717          	jreq	L5603
6178  cb08               L7603:
6179                     ; 1915       for (i=0; i<4; i++) stored_mqttserveraddr[i] = Pending_mqttserveraddr[i];
6181  cb08 4f            	clr	a
6182  cb09 6b01          	ld	(OFST+0,sp),a
6184  cb0b               L5703:
6187  cb0b 5f            	clrw	x
6188  cb0c 97            	ld	xl,a
6189  cb0d d6015f        	ld	a,(_Pending_mqttserveraddr,x)
6190  cb10 d74031        	ld	(_stored_mqttserveraddr,x),a
6193  cb13 0c01          	inc	(OFST+0,sp)
6197  cb15 7b01          	ld	a,(OFST+0,sp)
6198  cb17 a104          	cp	a,#4
6199  cb19 25f0          	jrult	L5703
6200                     ; 1917       restart_request = 1;
6202  cb1b 35010109      	mov	_restart_request,#1
6203  cb1f               L5603:
6204                     ; 1921     if (stored_mqttport != Pending_mqttport) {
6206  cb1f ce402f        	ldw	x,_stored_mqttport
6207  cb22 c3015d        	cpw	x,_Pending_mqttport
6208  cb25 270f          	jreq	L3013
6209                     ; 1923       stored_mqttport = Pending_mqttport;
6211  cb27 ce015d        	ldw	x,_Pending_mqttport
6212  cb2a 89            	pushw	x
6213  cb2b ae402f        	ldw	x,#_stored_mqttport
6214  cb2e cdf67a        	call	c_eewrw
6216  cb31 35010109      	mov	_restart_request,#1
6217  cb35 85            	popw	x
6218                     ; 1925       restart_request = 1;
6220  cb36               L3013:
6221                     ; 1929     for(i=0; i<11; i++) {
6223  cb36 4f            	clr	a
6224  cb37 6b01          	ld	(OFST+0,sp),a
6226  cb39               L5013:
6227                     ; 1930       if (stored_mqtt_username[i] != Pending_mqtt_username[i]) {
6229  cb39 5f            	clrw	x
6230  cb3a 97            	ld	xl,a
6231  cb3b 905f          	clrw	y
6232  cb3d 9097          	ld	yl,a
6233  cb3f 90d64035      	ld	a,(_stored_mqtt_username,y)
6234  cb43 d10152        	cp	a,(_Pending_mqtt_username,x)
6235  cb46 270e          	jreq	L3113
6236                     ; 1931         stored_mqtt_username[i] = Pending_mqtt_username[i];
6238  cb48 7b01          	ld	a,(OFST+0,sp)
6239  cb4a 5f            	clrw	x
6240  cb4b 97            	ld	xl,a
6241  cb4c d60152        	ld	a,(_Pending_mqtt_username,x)
6242  cb4f d74035        	ld	(_stored_mqtt_username,x),a
6243                     ; 1933         restart_request = 1;
6245  cb52 35010109      	mov	_restart_request,#1
6246  cb56               L3113:
6247                     ; 1929     for(i=0; i<11; i++) {
6249  cb56 0c01          	inc	(OFST+0,sp)
6253  cb58 7b01          	ld	a,(OFST+0,sp)
6254  cb5a a10b          	cp	a,#11
6255  cb5c 25db          	jrult	L5013
6256                     ; 1938     for(i=0; i<11; i++) {
6258  cb5e 4f            	clr	a
6259  cb5f 6b01          	ld	(OFST+0,sp),a
6261  cb61               L5113:
6262                     ; 1939       if (stored_mqtt_password[i] != Pending_mqtt_password[i]) {
6264  cb61 5f            	clrw	x
6265  cb62 97            	ld	xl,a
6266  cb63 905f          	clrw	y
6267  cb65 9097          	ld	yl,a
6268  cb67 90d64040      	ld	a,(_stored_mqtt_password,y)
6269  cb6b d10147        	cp	a,(_Pending_mqtt_password,x)
6270  cb6e 270e          	jreq	L3213
6271                     ; 1940         stored_mqtt_password[i] = Pending_mqtt_password[i];
6273  cb70 7b01          	ld	a,(OFST+0,sp)
6274  cb72 5f            	clrw	x
6275  cb73 97            	ld	xl,a
6276  cb74 d60147        	ld	a,(_Pending_mqtt_password,x)
6277  cb77 d74040        	ld	(_stored_mqtt_password,x),a
6278                     ; 1942         restart_request = 1;
6280  cb7a 35010109      	mov	_restart_request,#1
6281  cb7e               L3213:
6282                     ; 1938     for(i=0; i<11; i++) {
6284  cb7e 0c01          	inc	(OFST+0,sp)
6288  cb80 7b01          	ld	a,(OFST+0,sp)
6289  cb82 a10b          	cp	a,#11
6290  cb84 25db          	jrult	L5113
6291                     ; 1948     if (stored_uip_ethaddr_oct[0] != Pending_uip_ethaddr_oct[0] ||
6291                     ; 1949       stored_uip_ethaddr_oct[1] != Pending_uip_ethaddr_oct[1] ||
6291                     ; 1950       stored_uip_ethaddr_oct[2] != Pending_uip_ethaddr_oct[2] ||
6291                     ; 1951       stored_uip_ethaddr_oct[3] != Pending_uip_ethaddr_oct[3] ||
6291                     ; 1952       stored_uip_ethaddr_oct[4] != Pending_uip_ethaddr_oct[4] ||
6291                     ; 1953       stored_uip_ethaddr_oct[5] != Pending_uip_ethaddr_oct[5]) {
6293  cb86 c64017        	ld	a,_stored_uip_ethaddr_oct
6294  cb89 c10119        	cp	a,_Pending_uip_ethaddr_oct
6295  cb8c 2628          	jrne	L7213
6297  cb8e c64018        	ld	a,_stored_uip_ethaddr_oct+1
6298  cb91 c1011a        	cp	a,_Pending_uip_ethaddr_oct+1
6299  cb94 2620          	jrne	L7213
6301  cb96 c64019        	ld	a,_stored_uip_ethaddr_oct+2
6302  cb99 c1011b        	cp	a,_Pending_uip_ethaddr_oct+2
6303  cb9c 2618          	jrne	L7213
6305  cb9e c6401a        	ld	a,_stored_uip_ethaddr_oct+3
6306  cba1 c1011c        	cp	a,_Pending_uip_ethaddr_oct+3
6307  cba4 2610          	jrne	L7213
6309  cba6 c6401b        	ld	a,_stored_uip_ethaddr_oct+4
6310  cba9 c1011d        	cp	a,_Pending_uip_ethaddr_oct+4
6311  cbac 2608          	jrne	L7213
6313  cbae c6401c        	ld	a,_stored_uip_ethaddr_oct+5
6314  cbb1 c1011e        	cp	a,_Pending_uip_ethaddr_oct+5
6315  cbb4 271a          	jreq	L3572
6316  cbb6               L7213:
6317                     ; 1955       for (i=0; i<6; i++) stored_uip_ethaddr_oct[i] = Pending_uip_ethaddr_oct[i];
6319  cbb6 4f            	clr	a
6320  cbb7 6b01          	ld	(OFST+0,sp),a
6322  cbb9               L1413:
6325  cbb9 5f            	clrw	x
6326  cbba 97            	ld	xl,a
6327  cbbb d60119        	ld	a,(_Pending_uip_ethaddr_oct,x)
6328  cbbe d74017        	ld	(_stored_uip_ethaddr_oct,x),a
6331  cbc1 0c01          	inc	(OFST+0,sp)
6335  cbc3 7b01          	ld	a,(OFST+0,sp)
6336  cbc5 a106          	cp	a,#6
6337  cbc7 25f0          	jrult	L1413
6338                     ; 1957       update_mac_string();
6340  cbc9 cdc8bc        	call	_update_mac_string
6342                     ; 1959       restart_request = 1;
6344  cbcc 35010109      	mov	_restart_request,#1
6345  cbd0               L3572:
6346                     ; 1963   if (restart_request == 1) {
6348  cbd0 c60109        	ld	a,_restart_request
6349  cbd3 4a            	dec	a
6350  cbd4 2609          	jrne	L7413
6351                     ; 1966     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6353  cbd6 c60108        	ld	a,_restart_reboot_step
6354  cbd9 2604          	jrne	L7413
6355                     ; 1967       restart_reboot_step = RESTART_REBOOT_ARM;
6357  cbdb 35010108      	mov	_restart_reboot_step,#1
6358  cbdf               L7413:
6359                     ; 1971   if (user_reboot_request == 1) {
6361  cbdf c6010a        	ld	a,_user_reboot_request
6362  cbe2 4a            	dec	a
6363  cbe3 2611          	jrne	L3513
6364                     ; 1974     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6366  cbe5 725d0108      	tnz	_restart_reboot_step
6367  cbe9 260b          	jrne	L3513
6368                     ; 1975       restart_reboot_step = RESTART_REBOOT_ARM;
6370  cbeb 35010108      	mov	_restart_reboot_step,#1
6371                     ; 1976       user_reboot_request = 0;
6373  cbef c7010a        	ld	_user_reboot_request,a
6374                     ; 1977       reboot_request = 1;
6376  cbf2 3501010b      	mov	_reboot_request,#1
6377  cbf6               L3513:
6378                     ; 1986   parse_complete = 0; // Reset parse_complete for future changes
6380  cbf6 725f0106      	clr	_parse_complete
6381                     ; 1989   if (stack_limit1 != 0xaa || stack_limit2 != 0x55) {
6383  cbfa c605ff        	ld	a,_stack_limit1
6384  cbfd a1aa          	cp	a,#170
6385  cbff 2607          	jrne	L1613
6387  cc01 c605fe        	ld	a,_stack_limit2
6388  cc04 a155          	cp	a,#85
6389  cc06 270a          	jreq	L7513
6390  cc08               L1613:
6391                     ; 1990     stack_error = 1;
6393  cc08 35010163      	mov	_stack_error,#1
6394                     ; 1991     fastflash();
6396  cc0c cdcf36        	call	_fastflash
6398                     ; 1992     fastflash();
6400  cc0f cdcf36        	call	_fastflash
6402  cc12               L7513:
6403                     ; 2005 }
6406  cc12 84            	pop	a
6407  cc13 81            	ret	
6442                     ; 2008 void check_restart_reboot(void)
6442                     ; 2009 {
6443                     .text:	section	.text,new
6444  cc14               _check_restart_reboot:
6448                     ; 2015   if (restart_request == 1 || reboot_request == 1) {
6450  cc14 c60109        	ld	a,_restart_request
6451  cc17 4a            	dec	a
6452  cc18 2709          	jreq	L5713
6454  cc1a c6010b        	ld	a,_reboot_request
6455  cc1d 4a            	dec	a
6456  cc1e 2703cccce8    	jrne	L3713
6457  cc23               L5713:
6458                     ; 2026     if (restart_reboot_step == RESTART_REBOOT_ARM) {
6460  cc23 c60108        	ld	a,_restart_reboot_step
6461  cc26 a101          	cp	a,#1
6462  cc28 2611          	jrne	L7713
6463                     ; 2031       time_mark2 = second_counter;
6465  cc2a ce029e        	ldw	x,_second_counter+2
6466  cc2d cf00fd        	ldw	_time_mark2+2,x
6467  cc30 ce029c        	ldw	x,_second_counter
6468  cc33 cf00fb        	ldw	_time_mark2,x
6469                     ; 2032       restart_reboot_step = RESTART_REBOOT_ARM2;
6471  cc36 35020108      	mov	_restart_reboot_step,#2
6474  cc3a 81            	ret	
6475  cc3b               L7713:
6476                     ; 2035     else if (restart_reboot_step == RESTART_REBOOT_ARM2) {
6478  cc3b a102          	cp	a,#2
6479  cc3d 2613          	jrne	L3023
6480                     ; 2041       if (second_counter > time_mark2 + 0 ) {
6482  cc3f ae029c        	ldw	x,#_second_counter
6483  cc42 cdf8ed        	call	c_ltor
6485  cc45 ae00fb        	ldw	x,#_time_mark2
6486  cc48 cdf882        	call	c_lcmp
6488  cc4b 23d3          	jrule	L3713
6489                     ; 2042         restart_reboot_step = RESTART_REBOOT_DISCONNECT;
6491  cc4d 35030108      	mov	_restart_reboot_step,#3
6493  cc51 81            	ret	
6494  cc52               L3023:
6495                     ; 2047     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECT) {
6497  cc52 a103          	cp	a,#3
6498  cc54 261e          	jrne	L1123
6499                     ; 2048       restart_reboot_step = RESTART_REBOOT_DISCONNECTWAIT;
6501  cc56 35040108      	mov	_restart_reboot_step,#4
6502                     ; 2049       if (mqtt_start == MQTT_START_COMPLETE) {
6504  cc5a c600a8        	ld	a,_mqtt_start
6505  cc5d a114          	cp	a,#20
6506  cc5f 2606          	jrne	L3123
6507                     ; 2051         mqtt_disconnect(&mqttclient);
6509  cc61 ae00c5        	ldw	x,#_mqttclient
6510  cc64 cdd43b        	call	_mqtt_disconnect
6512  cc67               L3123:
6513                     ; 2054       time_mark2 = second_counter;
6515  cc67 ce029e        	ldw	x,_second_counter+2
6516  cc6a cf00fd        	ldw	_time_mark2+2,x
6517  cc6d ce029c        	ldw	x,_second_counter
6518  cc70 cf00fb        	ldw	_time_mark2,x
6521  cc73 81            	ret	
6522  cc74               L1123:
6523                     ; 2057     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECTWAIT) {
6525  cc74 a104          	cp	a,#4
6526  cc76 2618          	jrne	L7123
6527                     ; 2058       if (second_counter > time_mark2 + 1 ) {
6529  cc78 ae00fb        	ldw	x,#_time_mark2
6530  cc7b cdf8ed        	call	c_ltor
6532  cc7e a601          	ld	a,#1
6533  cc80 cdf859        	call	c_ladc
6535  cc83 ae029c        	ldw	x,#_second_counter
6536  cc86 cdf882        	call	c_lcmp
6538  cc89 245d          	jruge	L3713
6539                     ; 2061         restart_reboot_step = RESTART_REBOOT_TCPCLOSE;
6541  cc8b 35050108      	mov	_restart_reboot_step,#5
6543  cc8f 81            	ret	
6544  cc90               L7123:
6545                     ; 2065     else if (restart_reboot_step == RESTART_REBOOT_TCPCLOSE) {
6547  cc90 a105          	cp	a,#5
6548  cc92 2615          	jrne	L5223
6549                     ; 2081       mqtt_close_tcp = 1;
6551  cc94 35010107      	mov	_mqtt_close_tcp,#1
6552                     ; 2083       time_mark2 = second_counter;
6554  cc98 ce029e        	ldw	x,_second_counter+2
6555  cc9b cf00fd        	ldw	_time_mark2+2,x
6556  cc9e ce029c        	ldw	x,_second_counter
6557  cca1 cf00fb        	ldw	_time_mark2,x
6558                     ; 2084       restart_reboot_step = RESTART_REBOOT_TCPWAIT;
6560  cca4 35060108      	mov	_restart_reboot_step,#6
6563  cca8 81            	ret	
6564  cca9               L5223:
6565                     ; 2086     else if (restart_reboot_step == RESTART_REBOOT_TCPWAIT) {
6567  cca9 a106          	cp	a,#6
6568  ccab 261c          	jrne	L1323
6569                     ; 2091       if (second_counter > time_mark2 + 1) {
6571  ccad ae00fb        	ldw	x,#_time_mark2
6572  ccb0 cdf8ed        	call	c_ltor
6574  ccb3 a601          	ld	a,#1
6575  ccb5 cdf859        	call	c_ladc
6577  ccb8 ae029c        	ldw	x,#_second_counter
6578  ccbb cdf882        	call	c_lcmp
6580  ccbe 2428          	jruge	L3713
6581                     ; 2092 	mqtt_close_tcp = 0;
6583  ccc0 725f0107      	clr	_mqtt_close_tcp
6584                     ; 2093         restart_reboot_step = RESTART_REBOOT_FINISH;
6586  ccc4 35070108      	mov	_restart_reboot_step,#7
6588  ccc8 81            	ret	
6589  ccc9               L1323:
6590                     ; 2103     else if (restart_reboot_step == RESTART_REBOOT_FINISH) {
6592  ccc9 a107          	cp	a,#7
6593  cccb 261b          	jrne	L3713
6594                     ; 2104       if (reboot_request == 1) {
6596  cccd c6010b        	ld	a,_reboot_request
6597  ccd0 4a            	dec	a
6598  ccd1 2606          	jrne	L1423
6599                     ; 2105         restart_reboot_step = RESTART_REBOOT_IDLE;
6601  ccd3 c70108        	ld	_restart_reboot_step,a
6602                     ; 2107         reboot();
6604  ccd6 cdcd69        	call	_reboot
6606  ccd9               L1423:
6607                     ; 2109       if (restart_request == 1) {
6609  ccd9 c60109        	ld	a,_restart_request
6610  ccdc 4a            	dec	a
6611  ccdd 2609          	jrne	L3713
6612                     ; 2110 	restart_request = 0;
6614  ccdf c70109        	ld	_restart_request,a
6615                     ; 2111         restart_reboot_step = RESTART_REBOOT_IDLE;
6617  cce2 c70108        	ld	_restart_reboot_step,a
6618                     ; 2113 	restart();
6620  cce5 cdcce9        	call	_restart
6622  cce8               L3713:
6623                     ; 2117 }
6626  cce8 81            	ret	
6679                     ; 2120 void restart(void)
6679                     ; 2121 {
6680                     .text:	section	.text,new
6681  cce9               _restart:
6685                     ; 2135   LEDcontrol(0); // Turn LED off
6687  cce9 4f            	clr	a
6688  ccea cda464        	call	_LEDcontrol
6690                     ; 2137   parse_complete = 0;
6692  cced 725f0106      	clr	_parse_complete
6693                     ; 2138   reboot_request = 0;
6695  ccf1 725f010b      	clr	_reboot_request
6696                     ; 2139   restart_request = 0;
6698  ccf5 725f0109      	clr	_restart_request
6699                     ; 2141   time_mark2 = 0;           // Time capture used in reboot
6701  ccf9 5f            	clrw	x
6702  ccfa cf00fd        	ldw	_time_mark2+2,x
6703  ccfd cf00fb        	ldw	_time_mark2,x
6704                     ; 2144   mqtt_close_tcp = 0;
6706  cd00 725f0107      	clr	_mqtt_close_tcp
6707                     ; 2146   mqtt_start = MQTT_START_TCP_CONNECT;
6709  cd04 350100a8      	mov	_mqtt_start,#1
6710                     ; 2147   mqtt_start_status = MQTT_START_NOT_STARTED;
6712  cd08 725f00a7      	clr	_mqtt_start_status
6713                     ; 2148   mqtt_start_ctr1 = 0;
6715  cd0c 725f00a6      	clr	_mqtt_start_ctr1
6716                     ; 2149   mqtt_sanity_ctr = 0;
6718  cd10 725f00a4      	clr	_mqtt_sanity_ctr
6719                     ; 2150   mqtt_start_retry = 0;
6721  cd14 725f00a3      	clr	_mqtt_start_retry
6722                     ; 2151   MQTT_error_status = 0;
6724  cd18 725f029b      	clr	_MQTT_error_status
6725                     ; 2152   mqtt_restart_step = MQTT_RESTART_IDLE;
6727  cd1c 725f00a0      	clr	_mqtt_restart_step
6728                     ; 2153   strcpy(topic_base, devicetype);
6730  cd20 ae0074        	ldw	x,#_topic_base
6731  cd23 90ae9e68      	ldw	y,#L5261_devicetype
6732  cd27               L433:
6733  cd27 90f6          	ld	a,(y)
6734  cd29 905c          	incw	y
6735  cd2b f7            	ld	(x),a
6736  cd2c 5c            	incw	x
6737  cd2d 4d            	tnz	a
6738  cd2e 26f7          	jrne	L433
6739                     ; 2154   state_request = STATE_REQUEST_IDLE;
6741  cd30 c70164        	ld	_state_request,a
6742                     ; 2157   spi_init();              // Initialize the SPI bit bang interface to the
6744  cd33 cde440        	call	_spi_init
6746                     ; 2159   unlock_eeprom();         // unlock the EEPROM so writes can be performed
6748  cd36 cdc3f1        	call	_unlock_eeprom
6750                     ; 2160   check_eeprom_settings(); // Verify EEPROM up to date
6752  cd39 cdc401        	call	_check_eeprom_settings
6754                     ; 2161   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
6756  cd3c cda024        	call	_Enc28j60Init
6758                     ; 2162   uip_arp_init();          // Initialize the ARP module
6760  cd3f cdf1a9        	call	_uip_arp_init
6762                     ; 2163   uip_init();              // Initialize uIP
6764  cd42 cde746        	call	_uip_init
6766                     ; 2164   HttpDInit();             // Initialize httpd; sets up listening ports
6768  cd45 cdac89        	call	_HttpDInit
6770                     ; 2168   mqtt_init(&mqttclient,
6770                     ; 2169             mqtt_sendbuf,
6770                     ; 2170 	    sizeof(mqtt_sendbuf),
6770                     ; 2171 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
6770                     ; 2172 	    UIP_APPDATA_SIZE,
6770                     ; 2173 	    publish_callback);
6772  cd48 aec159        	ldw	x,#_publish_callback
6773  cd4b 89            	pushw	x
6774  cd4c ae01be        	ldw	x,#446
6775  cd4f 89            	pushw	x
6776  cd50 ae03a9        	ldw	x,#_uip_buf+54
6777  cd53 89            	pushw	x
6778  cd54 ae00c8        	ldw	x,#200
6779  cd57 89            	pushw	x
6780  cd58 ae016f        	ldw	x,#_mqtt_sendbuf
6781  cd5b 89            	pushw	x
6782  cd5c ae00c5        	ldw	x,#_mqttclient
6783  cd5f cdcfe8        	call	_mqtt_init
6785  cd62 5b0a          	addw	sp,#10
6786                     ; 2176   LEDcontrol(1); // Turn LED on
6788  cd64 a601          	ld	a,#1
6790                     ; 2179 }
6793  cd66 cca464        	jp	_LEDcontrol
6821                     ; 2182 void reboot(void)
6821                     ; 2183 {
6822                     .text:	section	.text,new
6823  cd69               _reboot:
6827                     ; 2186   fastflash(); // A useful signal that a deliberate reboot is occurring.
6829  cd69 cdcf36        	call	_fastflash
6831                     ; 2188   LEDcontrol(0);  // turn LED off
6833  cd6c 4f            	clr	a
6834  cd6d cda464        	call	_LEDcontrol
6836                     ; 2190   WWDG_WR = (uint8_t)0x7f;     // Window register reset
6838  cd70 357f50d2      	mov	_WWDG_WR,#127
6839                     ; 2191   WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
6841  cd74 35ff50d1      	mov	_WWDG_CR,#255
6842                     ; 2192   WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
6844  cd78 356050d2      	mov	_WWDG_WR,#96
6845                     ; 2195   wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
6847  cd7c aec350        	ldw	x,#50000
6848  cd7f cde613        	call	_wait_timer
6850                     ; 2196   wait_timer((uint16_t)50000);
6852  cd82 aec350        	ldw	x,#50000
6853  cd85 cde613        	call	_wait_timer
6855                     ; 2197   wait_timer((uint16_t)50000);
6857  cd88 aec350        	ldw	x,#50000
6859                     ; 2198 }
6862  cd8b cce613        	jp	_wait_timer
6903                     ; 2201 void read_input_registers(void)
6903                     ; 2202 {
6904                     .text:	section	.text,new
6905  cd8e               _read_input_registers:
6907  cd8e 89            	pushw	x
6908       00000002      OFST:	set	2
6911                     ; 2219   if (PC_IDR & (uint8_t)0x40) IO_16to9_new1 |= 0x80; // PC bit 6 = 1, Input 8 = 1
6913  cd8f 720d500b06    	btjf	_PC_IDR,#6,L1033
6916  cd94 721e016c      	bset	_IO_16to9_new1,#7
6918  cd98 2004          	jra	L3033
6919  cd9a               L1033:
6920                     ; 2220   else IO_16to9_new1 &= (uint8_t)(~0x80);
6922  cd9a 721f016c      	bres	_IO_16to9_new1,#7
6923  cd9e               L3033:
6924                     ; 2221   if (PG_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x40; // PG bit 0 = 1, Input 7 = 1
6926  cd9e 7201501f06    	btjf	_PG_IDR,#0,L5033
6929  cda3 721c016c      	bset	_IO_16to9_new1,#6
6931  cda7 2004          	jra	L7033
6932  cda9               L5033:
6933                     ; 2222   else IO_16to9_new1 &= (uint8_t)(~0x40);
6935  cda9 721d016c      	bres	_IO_16to9_new1,#6
6936  cdad               L7033:
6937                     ; 2223   if (PE_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x20; // PE bit 3 = 1, Input 6 = 1
6939  cdad 7207501506    	btjf	_PE_IDR,#3,L1133
6942  cdb2 721a016c      	bset	_IO_16to9_new1,#5
6944  cdb6 2004          	jra	L3133
6945  cdb8               L1133:
6946                     ; 2224   else IO_16to9_new1 &= (uint8_t)(~0x20);
6948  cdb8 721b016c      	bres	_IO_16to9_new1,#5
6949  cdbc               L3133:
6950                     ; 2225   if (PD_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x10; // PD bit 0 = 1, Input 5 = 1
6952  cdbc 7201501006    	btjf	_PD_IDR,#0,L5133
6955  cdc1 7218016c      	bset	_IO_16to9_new1,#4
6957  cdc5 2004          	jra	L7133
6958  cdc7               L5133:
6959                     ; 2226   else IO_16to9_new1 &= (uint8_t)(~0x10);
6961  cdc7 7219016c      	bres	_IO_16to9_new1,#4
6962  cdcb               L7133:
6963                     ; 2227   if (PD_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x08; // PD bit 3 = 1, Input 4 = 1
6965  cdcb 7207501006    	btjf	_PD_IDR,#3,L1233
6968  cdd0 7216016c      	bset	_IO_16to9_new1,#3
6970  cdd4 2004          	jra	L3233
6971  cdd6               L1233:
6972                     ; 2228   else IO_16to9_new1 &= (uint8_t)(~0x08);
6974  cdd6 7217016c      	bres	_IO_16to9_new1,#3
6975  cdda               L3233:
6976                     ; 2229   if (PD_IDR & (uint8_t)0x20) IO_16to9_new1 |= 0x04; // PD bit 5 = 1, Input 3 = 1
6978  cdda 720b501006    	btjf	_PD_IDR,#5,L5233
6981  cddf 7214016c      	bset	_IO_16to9_new1,#2
6983  cde3 2004          	jra	L7233
6984  cde5               L5233:
6985                     ; 2230   else IO_16to9_new1 &= (uint8_t)(~0x04);
6987  cde5 7215016c      	bres	_IO_16to9_new1,#2
6988  cde9               L7233:
6989                     ; 2231   if (PD_IDR & (uint8_t)0x80) IO_16to9_new1 |= 0x02; // PD bit 7 = 1, Input 2 = 1
6991  cde9 720f501006    	btjf	_PD_IDR,#7,L1333
6994  cdee 7212016c      	bset	_IO_16to9_new1,#1
6996  cdf2 2004          	jra	L3333
6997  cdf4               L1333:
6998                     ; 2232   else IO_16to9_new1 &= (uint8_t)(~0x02);
7000  cdf4 7213016c      	bres	_IO_16to9_new1,#1
7001  cdf8               L3333:
7002                     ; 2233   if (PA_IDR & (uint8_t)0x10) IO_16to9_new1 |= 0x01; // PA bit 4 = 1, Input 1 = 1
7004  cdf8 7209500106    	btjf	_PA_IDR,#4,L5333
7007  cdfd 7210016c      	bset	_IO_16to9_new1,#0
7009  ce01 2004          	jra	L7333
7010  ce03               L5333:
7011                     ; 2234   else IO_16to9_new1 &= (uint8_t)(~0x01);
7013  ce03 7211016c      	bres	_IO_16to9_new1,#0
7014  ce07               L7333:
7015                     ; 2239   xor_tmp = (uint8_t)((IO_16to9 ^ IO_16to9_new1) & (IO_16to9 ^ IO_16to9_new2));
7017  ce07 c6016e        	ld	a,_IO_16to9
7018  ce0a c8016a        	xor	a,_IO_16to9_new2
7019  ce0d 6b01          	ld	(OFST-1,sp),a
7021  ce0f c6016e        	ld	a,_IO_16to9
7022  ce12 c8016c        	xor	a,_IO_16to9_new1
7023  ce15 1401          	and	a,(OFST-1,sp)
7024  ce17 6b02          	ld	(OFST+0,sp),a
7026                     ; 2240   IO_16to9 = (uint8_t)(IO_16to9 ^ xor_tmp);
7028  ce19 c8016e        	xor	a,_IO_16to9
7029  ce1c c7016e        	ld	_IO_16to9,a
7030                     ; 2242   IO_16to9_new2 = IO_16to9_new1;
7032                     ; 2296 }
7035  ce1f 85            	popw	x
7036  ce20 55016c016a    	mov	_IO_16to9_new2,_IO_16to9_new1
7037  ce25 81            	ret	
7077                     ; 2299 void write_output_registers(void)
7077                     ; 2300 {
7078                     .text:	section	.text,new
7079  ce26               _write_output_registers:
7081  ce26 88            	push	a
7082       00000001      OFST:	set	1
7085                     ; 2354   xor_tmp = (uint8_t)(invert_output ^ IO_8to1);
7087  ce27 c60166        	ld	a,_invert_output
7088  ce2a c8016d        	xor	a,_IO_8to1
7089  ce2d 6b01          	ld	(OFST+0,sp),a
7091                     ; 2355   if (xor_tmp & 0x80) PC_ODR |= (uint8_t)0x80; // Relay 8 off
7093  ce2f 2a06          	jrpl	L5533
7096  ce31 721e500a      	bset	_PC_ODR,#7
7098  ce35 2004          	jra	L7533
7099  ce37               L5533:
7100                     ; 2356   else PC_ODR &= (uint8_t)~0x80; // Relay 8 on
7102  ce37 721f500a      	bres	_PC_ODR,#7
7103  ce3b               L7533:
7104                     ; 2357   if (xor_tmp & 0x40) PG_ODR |= (uint8_t)0x02; // Relay 7 off
7106  ce3b a540          	bcp	a,#64
7107  ce3d 2706          	jreq	L1633
7110  ce3f 7212501e      	bset	_PG_ODR,#1
7112  ce43 2004          	jra	L3633
7113  ce45               L1633:
7114                     ; 2358   else PG_ODR &= (uint8_t)~0x02; // Relay 7 on
7116  ce45 7213501e      	bres	_PG_ODR,#1
7117  ce49               L3633:
7118                     ; 2359   if (xor_tmp & 0x20) PE_ODR |= (uint8_t)0x01; // Relay 6 off
7120  ce49 7b01          	ld	a,(OFST+0,sp)
7121  ce4b a520          	bcp	a,#32
7122  ce4d 2706          	jreq	L5633
7125  ce4f 72105014      	bset	_PE_ODR,#0
7127  ce53 2004          	jra	L7633
7128  ce55               L5633:
7129                     ; 2360   else PE_ODR &= (uint8_t)~0x01; // Relay 6 on
7131  ce55 72115014      	bres	_PE_ODR,#0
7132  ce59               L7633:
7133                     ; 2361   if (xor_tmp & 0x10) PD_ODR |= (uint8_t)0x04; // Relay 5 off
7135  ce59 a510          	bcp	a,#16
7136  ce5b 2706          	jreq	L1733
7139  ce5d 7214500f      	bset	_PD_ODR,#2
7141  ce61 2004          	jra	L3733
7142  ce63               L1733:
7143                     ; 2362   else PD_ODR &= (uint8_t)~0x04; // Relay 5 on
7145  ce63 7215500f      	bres	_PD_ODR,#2
7146  ce67               L3733:
7147                     ; 2363   if (xor_tmp & 0x08) PD_ODR |= (uint8_t)0x10; // Relay 4 off
7149  ce67 7b01          	ld	a,(OFST+0,sp)
7150  ce69 a508          	bcp	a,#8
7151  ce6b 2706          	jreq	L5733
7154  ce6d 7218500f      	bset	_PD_ODR,#4
7156  ce71 2004          	jra	L7733
7157  ce73               L5733:
7158                     ; 2364   else PD_ODR &= (uint8_t)~0x10; // Relay 4 on
7160  ce73 7219500f      	bres	_PD_ODR,#4
7161  ce77               L7733:
7162                     ; 2365   if (xor_tmp & 0x04) PD_ODR |= (uint8_t)0x40; // Relay 3 off
7164  ce77 a504          	bcp	a,#4
7165  ce79 2706          	jreq	L1043
7168  ce7b 721c500f      	bset	_PD_ODR,#6
7170  ce7f 2004          	jra	L3043
7171  ce81               L1043:
7172                     ; 2366   else PD_ODR &= (uint8_t)~0x40; // Relay 3 on
7174  ce81 721d500f      	bres	_PD_ODR,#6
7175  ce85               L3043:
7176                     ; 2367   if (xor_tmp & 0x02) PA_ODR |= (uint8_t)0x20; // Relay 2 off
7178  ce85 7b01          	ld	a,(OFST+0,sp)
7179  ce87 a502          	bcp	a,#2
7180  ce89 2706          	jreq	L5043
7183  ce8b 721a5000      	bset	_PA_ODR,#5
7185  ce8f 2004          	jra	L7043
7186  ce91               L5043:
7187                     ; 2368   else PA_ODR &= (uint8_t)~0x20; // Relay 2 on
7189  ce91 721b5000      	bres	_PA_ODR,#5
7190  ce95               L7043:
7191                     ; 2369   if (xor_tmp & 0x01) PA_ODR |= (uint8_t)0x08; // Relay 1 off
7193  ce95 a501          	bcp	a,#1
7194  ce97 2706          	jreq	L1143
7197  ce99 72165000      	bset	_PA_ODR,#3
7199  ce9d 2004          	jra	L3143
7200  ce9f               L1143:
7201                     ; 2370   else PA_ODR &= (uint8_t)~0x08; // Relay 1 on
7203  ce9f 72175000      	bres	_PA_ODR,#3
7204  cea3               L3143:
7205                     ; 2376 }
7208  cea3 84            	pop	a
7209  cea4 81            	ret	
7250                     ; 2379 void check_reset_button(void)
7250                     ; 2380 {
7251                     .text:	section	.text,new
7252  cea5               _check_reset_button:
7254  cea5 88            	push	a
7255       00000001      OFST:	set	1
7258                     ; 2385   if ((PA_IDR & 0x02) == 0) {
7260  cea6 720250015d    	btjt	_PA_IDR,#1,L1343
7261                     ; 2387     for (i=0; i<100; i++) {
7263  ceab 0f01          	clr	(OFST+0,sp)
7265  cead               L3343:
7266                     ; 2388       wait_timer(50000); // wait 50ms
7268  cead aec350        	ldw	x,#50000
7269  ceb0 cde613        	call	_wait_timer
7271                     ; 2389       if ((PA_IDR & 0x02) == 1) { // check Reset Button again. If released
7273  ceb3 c65001        	ld	a,_PA_IDR
7274  ceb6 a402          	and	a,#2
7275  ceb8 4a            	dec	a
7276  ceb9 2602          	jrne	L1443
7277                     ; 2391         return;
7280  cebb 84            	pop	a
7281  cebc 81            	ret	
7282  cebd               L1443:
7283                     ; 2387     for (i=0; i<100; i++) {
7285  cebd 0c01          	inc	(OFST+0,sp)
7289  cebf 7b01          	ld	a,(OFST+0,sp)
7290  cec1 a164          	cp	a,#100
7291  cec3 25e8          	jrult	L3343
7292                     ; 2396     LEDcontrol(0);  // turn LED off
7294  cec5 4f            	clr	a
7295  cec6 cda464        	call	_LEDcontrol
7298  cec9               L5443:
7299                     ; 2397     while((PA_IDR & 0x02) == 0) {  // Wait for button release
7301  cec9 72035001fb    	btjf	_PA_IDR,#1,L5443
7302                     ; 2400     magic4 = 0x00;
7304  cece 4f            	clr	a
7305  cecf ae402e        	ldw	x,#_magic4
7306  ced2 cdf690        	call	c_eewrc
7308                     ; 2401     magic3 = 0x00;
7310  ced5 4f            	clr	a
7311  ced6 ae402d        	ldw	x,#_magic3
7312  ced9 cdf690        	call	c_eewrc
7314                     ; 2402     magic2 = 0x00;
7316  cedc 4f            	clr	a
7317  cedd ae402c        	ldw	x,#_magic2
7318  cee0 cdf690        	call	c_eewrc
7320                     ; 2403     magic1 = 0x00;
7322  cee3 4f            	clr	a
7323  cee4 ae402b        	ldw	x,#_magic1
7324  cee7 cdf690        	call	c_eewrc
7326                     ; 2405     WWDG_WR = (uint8_t)0x7f;       // Window register reset
7328  ceea 357f50d2      	mov	_WWDG_WR,#127
7329                     ; 2406     WWDG_CR = (uint8_t)0xff;       // Set watchdog to timeout in 49ms
7331  ceee 35ff50d1      	mov	_WWDG_CR,#255
7332                     ; 2407     WWDG_WR = (uint8_t)0x60;       // Window register value - doesn't matter
7334  cef2 356050d2      	mov	_WWDG_WR,#96
7335                     ; 2410     wait_timer((uint16_t)50000);   // Wait for watchdog to generate reset
7337  cef6 aec350        	ldw	x,#50000
7338  cef9 cde613        	call	_wait_timer
7340                     ; 2411     wait_timer((uint16_t)50000);
7342  cefc aec350        	ldw	x,#50000
7343  ceff cde613        	call	_wait_timer
7345                     ; 2412     wait_timer((uint16_t)50000);
7347  cf02 aec350        	ldw	x,#50000
7348  cf05 cde613        	call	_wait_timer
7350  cf08               L1343:
7351                     ; 2414 }
7354  cf08 84            	pop	a
7355  cf09 81            	ret	
7389                     ; 2417 void debugflash(void)
7389                     ; 2418 {
7390                     .text:	section	.text,new
7391  cf0a               _debugflash:
7393  cf0a 88            	push	a
7394       00000001      OFST:	set	1
7397                     ; 2433   LEDcontrol(0);     // turn LED off
7399  cf0b 4f            	clr	a
7400  cf0c cda464        	call	_LEDcontrol
7402                     ; 2434   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7404  cf0f 0f01          	clr	(OFST+0,sp)
7406  cf11               L5643:
7409  cf11 aec350        	ldw	x,#50000
7410  cf14 cde613        	call	_wait_timer
7414  cf17 0c01          	inc	(OFST+0,sp)
7418  cf19 7b01          	ld	a,(OFST+0,sp)
7419  cf1b a10a          	cp	a,#10
7420  cf1d 25f2          	jrult	L5643
7421                     ; 2436   LEDcontrol(1);     // turn LED on
7423  cf1f a601          	ld	a,#1
7424  cf21 cda464        	call	_LEDcontrol
7426                     ; 2437   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7428  cf24 0f01          	clr	(OFST+0,sp)
7430  cf26               L3743:
7433  cf26 aec350        	ldw	x,#50000
7434  cf29 cde613        	call	_wait_timer
7438  cf2c 0c01          	inc	(OFST+0,sp)
7442  cf2e 7b01          	ld	a,(OFST+0,sp)
7443  cf30 a10a          	cp	a,#10
7444  cf32 25f2          	jrult	L3743
7445                     ; 2438 }
7448  cf34 84            	pop	a
7449  cf35 81            	ret	
7483                     ; 2441 void fastflash(void)
7483                     ; 2442 {
7484                     .text:	section	.text,new
7485  cf36               _fastflash:
7487  cf36 88            	push	a
7488       00000001      OFST:	set	1
7491                     ; 2457   for (i=0; i<10; i++) {
7493  cf37 0f01          	clr	(OFST+0,sp)
7495  cf39               L5153:
7496                     ; 2458     LEDcontrol(0);     // turn LED off
7498  cf39 4f            	clr	a
7499  cf3a cda464        	call	_LEDcontrol
7501                     ; 2459     wait_timer((uint16_t)50000); // wait 50ms
7503  cf3d aec350        	ldw	x,#50000
7504  cf40 cde613        	call	_wait_timer
7506                     ; 2461     LEDcontrol(1);     // turn LED on
7508  cf43 a601          	ld	a,#1
7509  cf45 cda464        	call	_LEDcontrol
7511                     ; 2462     wait_timer((uint16_t)50000); // wait 50ms
7513  cf48 aec350        	ldw	x,#50000
7514  cf4b cde613        	call	_wait_timer
7516                     ; 2457   for (i=0; i<10; i++) {
7518  cf4e 0c01          	inc	(OFST+0,sp)
7522  cf50 7b01          	ld	a,(OFST+0,sp)
7523  cf52 a10a          	cp	a,#10
7524  cf54 25e3          	jrult	L5153
7525                     ; 2464 }
7528  cf56 84            	pop	a
7529  cf57 81            	ret	
7554                     ; 2467 void oneflash(void)
7554                     ; 2468 {
7555                     .text:	section	.text,new
7556                     _oneflash:
7560                     ; 2483   LEDcontrol(0);     // turn LED off
7562                     	clr	a
7563                     	call	_LEDcontrol
7565                     ; 2484   wait_timer((uint16_t)25000); // wait 25ms
7567                     	ldw	x,#25000
7568                     	call	_wait_timer
7570                     ; 2486   LEDcontrol(1);     // turn LED on
7572                     	ld	a,#1
7574                     ; 2487 }
7577                     	jp	_LEDcontrol
8905                     	switch	.bss
8906  0067               _TRANSMIT_counter:
8907  0067 00000000      	ds.b	4
8908                     	xdef	_TRANSMIT_counter
8909  006b               _TXERIF_counter:
8910  006b 00000000      	ds.b	4
8911                     	xdef	_TXERIF_counter
8912  006f               _RXERIF_counter:
8913  006f 00000000      	ds.b	4
8914                     	xdef	_RXERIF_counter
8915  0073               _topic_base_len:
8916  0073 00            	ds.b	1
8917                     	xdef	_topic_base_len
8918  0074               _topic_base:
8919  0074 000000000000  	ds.b	44
8920                     	xdef	_topic_base
8921  00a0               _mqtt_restart_step:
8922  00a0 00            	ds.b	1
8923                     	xdef	_mqtt_restart_step
8924                     	xref	_MQTT_error_status
8925  00a1               _mqtt_conn:
8926  00a1 0000          	ds.b	2
8927                     	xdef	_mqtt_conn
8928                     	xref	_mqtt_sendbuf
8929  00a3               _mqtt_start_retry:
8930  00a3 00            	ds.b	1
8931                     	xdef	_mqtt_start_retry
8932  00a4               _mqtt_sanity_ctr:
8933  00a4 00            	ds.b	1
8934                     	xdef	_mqtt_sanity_ctr
8935  00a5               _mqtt_start_ctr2:
8936  00a5 00            	ds.b	1
8937                     	xdef	_mqtt_start_ctr2
8938  00a6               _mqtt_start_ctr1:
8939  00a6 00            	ds.b	1
8940                     	xdef	_mqtt_start_ctr1
8941  00a7               _mqtt_start_status:
8942  00a7 00            	ds.b	1
8943                     	xdef	_mqtt_start_status
8944  00a8               _mqtt_start:
8945  00a8 00            	ds.b	1
8946                     	xdef	_mqtt_start
8947  00a9               _client_id_text:
8948  00a9 000000000000  	ds.b	26
8949                     	xdef	_client_id_text
8950  00c3               _client_id:
8951  00c3 0000          	ds.b	2
8952                     	xdef	_client_id
8953  00c5               _mqttclient:
8954  00c5 000000000000  	ds.b	44
8955                     	xdef	_mqttclient
8956  00f1               _mqtt_keep_alive:
8957  00f1 0000          	ds.b	2
8958                     	xdef	_mqtt_keep_alive
8959  00f3               _application_message:
8960  00f3 000000        	ds.b	3
8961                     	xdef	_application_message
8962  00f6               _Port_Mqttd:
8963  00f6 0000          	ds.b	2
8964                     	xdef	_Port_Mqttd
8965  00f8               _mqttport:
8966  00f8 0000          	ds.b	2
8967                     	xdef	_mqttport
8968  00fa               _connect_flags:
8969  00fa 00            	ds.b	1
8970                     	xdef	_connect_flags
8971                     	xref	_OctetArray
8972                     	xref	_second_counter
8973  00fb               _time_mark2:
8974  00fb 00000000      	ds.b	4
8975                     	xdef	_time_mark2
8976  00ff               _IpAddr:
8977  00ff 00000000      	ds.b	4
8978                     	xdef	_IpAddr
8979  0103               _Port_Httpd:
8980  0103 0000          	ds.b	2
8981                     	xdef	_Port_Httpd
8982  0105               _mqtt_parse_complete:
8983  0105 00            	ds.b	1
8984                     	xdef	_mqtt_parse_complete
8985  0106               _parse_complete:
8986  0106 00            	ds.b	1
8987                     	xdef	_parse_complete
8988  0107               _mqtt_close_tcp:
8989  0107 00            	ds.b	1
8990                     	xdef	_mqtt_close_tcp
8991  0108               _restart_reboot_step:
8992  0108 00            	ds.b	1
8993                     	xdef	_restart_reboot_step
8994  0109               _restart_request:
8995  0109 00            	ds.b	1
8996                     	xdef	_restart_request
8997  010a               _user_reboot_request:
8998  010a 00            	ds.b	1
8999                     	xdef	_user_reboot_request
9000  010b               _reboot_request:
9001  010b 00            	ds.b	1
9002                     	xdef	_reboot_request
9003  010c               _mac_string:
9004  010c 000000000000  	ds.b	13
9005                     	xdef	_mac_string
9006  0119               _Pending_uip_ethaddr_oct:
9007  0119 000000000000  	ds.b	6
9008                     	xdef	_Pending_uip_ethaddr_oct
9009  011f               _Pending_config_settings:
9010  011f 000000000000  	ds.b	6
9011                     	xdef	_Pending_config_settings
9012  0125               _Pending_devicename:
9013  0125 000000000000  	ds.b	20
9014                     	xdef	_Pending_devicename
9015  0139               _Pending_port:
9016  0139 0000          	ds.b	2
9017                     	xdef	_Pending_port
9018  013b               _Pending_netmask:
9019  013b 00000000      	ds.b	4
9020                     	xdef	_Pending_netmask
9021  013f               _Pending_draddr:
9022  013f 00000000      	ds.b	4
9023                     	xdef	_Pending_draddr
9024  0143               _Pending_hostaddr:
9025  0143 00000000      	ds.b	4
9026                     	xdef	_Pending_hostaddr
9027  0147               _Pending_mqtt_password:
9028  0147 000000000000  	ds.b	11
9029                     	xdef	_Pending_mqtt_password
9030  0152               _Pending_mqtt_username:
9031  0152 000000000000  	ds.b	11
9032                     	xdef	_Pending_mqtt_username
9033  015d               _Pending_mqttport:
9034  015d 0000          	ds.b	2
9035                     	xdef	_Pending_mqttport
9036  015f               _Pending_mqttserveraddr:
9037  015f 00000000      	ds.b	4
9038                     	xdef	_Pending_mqttserveraddr
9039  0163               _stack_error:
9040  0163 00            	ds.b	1
9041                     	xdef	_stack_error
9042  0164               _state_request:
9043  0164 00            	ds.b	1
9044                     	xdef	_state_request
9045  0165               _invert_input:
9046  0165 00            	ds.b	1
9047                     	xdef	_invert_input
9048  0166               _invert_output:
9049  0166 00            	ds.b	1
9050                     	xdef	_invert_output
9051  0167               _IO_8to1_sent:
9052  0167 00            	ds.b	1
9053                     	xdef	_IO_8to1_sent
9054  0168               _IO_16to9_sent:
9055  0168 00            	ds.b	1
9056                     	xdef	_IO_16to9_sent
9057  0169               _IO_8to1_new2:
9058  0169 00            	ds.b	1
9059                     	xdef	_IO_8to1_new2
9060  016a               _IO_16to9_new2:
9061  016a 00            	ds.b	1
9062                     	xdef	_IO_16to9_new2
9063  016b               _IO_8to1_new1:
9064  016b 00            	ds.b	1
9065                     	xdef	_IO_8to1_new1
9066  016c               _IO_16to9_new1:
9067  016c 00            	ds.b	1
9068                     	xdef	_IO_16to9_new1
9069  016d               _IO_8to1:
9070  016d 00            	ds.b	1
9071                     	xdef	_IO_8to1
9072  016e               _IO_16to9:
9073  016e 00            	ds.b	1
9074                     	xdef	_IO_16to9
9075                     .eeprom:	section	.data
9076  4000               _stored_devicename:
9077  4000 000000000000  	ds.b	20
9078                     	xdef	_stored_devicename
9079  4014               _stored_IO_8to1:
9080  4014 00            	ds.b	1
9081                     	xdef	_stored_IO_8to1
9082  4015               _stored_unused1:
9083  4015 00            	ds.b	1
9084                     	xdef	_stored_unused1
9085  4016               _stored_unused2:
9086  4016 00            	ds.b	1
9087                     	xdef	_stored_unused2
9088  4017               _stored_uip_ethaddr_oct:
9089  4017 000000000000  	ds.b	6
9090                     	xdef	_stored_uip_ethaddr_oct
9091  401d               _stored_port:
9092  401d 0000          	ds.b	2
9093                     	xdef	_stored_port
9094  401f               _stored_netmask:
9095  401f 00000000      	ds.b	4
9096                     	xdef	_stored_netmask
9097  4023               _stored_draddr:
9098  4023 00000000      	ds.b	4
9099                     	xdef	_stored_draddr
9100  4027               _stored_hostaddr:
9101  4027 00000000      	ds.b	4
9102                     	xdef	_stored_hostaddr
9103  402b               _magic1:
9104  402b 00            	ds.b	1
9105                     	xdef	_magic1
9106  402c               _magic2:
9107  402c 00            	ds.b	1
9108                     	xdef	_magic2
9109  402d               _magic3:
9110  402d 00            	ds.b	1
9111                     	xdef	_magic3
9112  402e               _magic4:
9113  402e 00            	ds.b	1
9114                     	xdef	_magic4
9115  402f               _stored_mqttport:
9116  402f 0000          	ds.b	2
9117                     	xdef	_stored_mqttport
9118  4031               _stored_mqttserveraddr:
9119  4031 00000000      	ds.b	4
9120                     	xdef	_stored_mqttserveraddr
9121  4035               _stored_mqtt_username:
9122  4035 000000000000  	ds.b	11
9123                     	xdef	_stored_mqtt_username
9124  4040               _stored_mqtt_password:
9125  4040 000000000000  	ds.b	11
9126                     	xdef	_stored_mqtt_password
9127  404b               _stored_IO_16to9:
9128  404b 00            	ds.b	1
9129                     	xdef	_stored_IO_16to9
9130  404c               _stored_config_settings:
9131  404c 000000000000  	ds.b	6
9132                     	xdef	_stored_config_settings
9133                     	xdef	_stack_limit2
9134                     	xdef	_stack_limit1
9135                     	xref	_mqtt_disconnect
9136                     	xref	_mqtt_subscribe
9137                     	xref	_mqtt_publish
9138                     	xref	_mqtt_connect
9139                     	xref	_mqtt_init
9140                     	xref	_strlen
9141                     	xref	_strcat
9142                     	xref	_wait_timer
9143                     	xref	_arp_timer_expired
9144                     	xref	_periodic_timer_expired
9145                     	xref	_clock_init
9146                     	xref	_LEDcontrol
9147                     	xref	_gpio_init
9148                     	xref	_check_mqtt_server_arp_entry
9149                     	xref	_uip_arp_timer
9150                     	xref	_uip_arp_out
9151                     	xref	_uip_arp_arpin
9152                     	xref	_uip_arp_init
9153                     	xref	_uip_ethaddr
9154                     	xref	_uip_mqttserveraddr
9155                     	xref	_uip_draddr
9156                     	xref	_uip_netmask
9157                     	xref	_uip_hostaddr
9158                     	xref	_uip_process
9159                     	xref	_uip_conns
9160                     	xref	_uip_conn
9161                     	xref	_uip_len
9162                     	xref	_uip_appdata
9163                     	xref	_htons
9164                     	xref	_uip_connect
9165                     	xref	_uip_buf
9166                     	xref	_uip_init
9167                     	xref	_GpioSetPin
9168                     	xref	_HttpDInit
9169                     	xref	_emb_itoa
9170                     	xref	_Enc28j60Send
9171                     	xref	_Enc28j60Receive
9172                     	xref	_Enc28j60Init
9173                     	xref	_spi_init
9174                     	xdef	_publish_pinstate_all
9175                     	xdef	_publish_pinstate
9176                     	xdef	_publish_outbound
9177                     	xdef	_publish_callback
9178                     	xdef	_mqtt_sanity_check
9179                     	xdef	_mqtt_startup
9180                     	xdef	_debugflash
9181                     	xdef	_fastflash
9182                     	xdef	_oneflash
9183                     	xdef	_reboot
9184                     	xdef	_restart
9185                     	xdef	_check_restart_reboot
9186                     	xdef	_check_reset_button
9187                     	xdef	_write_output_registers
9188                     	xdef	_read_input_registers
9189                     	xdef	_check_runtime_changes
9190                     	xdef	_update_mac_string
9191                     	xdef	_check_eeprom_settings
9192                     	xdef	_unlock_eeprom
9193                     	xdef	_main
9194                     	switch	.const
9195  9e77               L5242:
9196  9e77 2f7374617465  	dc.b	"/state",0
9197  9e7e               L7632:
9198  9e7e 2f6f75745f6f  	dc.b	"/out_off",0
9199  9e87               L3632:
9200  9e87 2f6f75745f6f  	dc.b	"/out_on",0
9201  9e8f               L5532:
9202  9e8f 2f696e5f6f66  	dc.b	"/in_off",0
9203  9e97               L1532:
9204  9e97 2f696e5f6f6e  	dc.b	"/in_on",0
9205  9e9e               L5302:
9206  9e9e 6f6e6c696e65  	dc.b	"online",0
9207  9ea5               L5202:
9208  9ea5 2f7374617465  	dc.b	"/state-req",0
9209  9eb0               L5102:
9210  9eb0 2f6f666600    	dc.b	"/off",0
9211  9eb5               L5002:
9212  9eb5 2f6f6e00      	dc.b	"/on",0
9213  9eb9               L1771:
9214  9eb9 6f66666c696e  	dc.b	"offline",0
9215  9ec1               L7671:
9216  9ec1 2f7374617475  	dc.b	"/status",0
9217                     	xref.b	c_lreg
9237                     	xref	c_ladc
9238                     	xref	c_lcmp
9239                     	xref	c_ltor
9240                     	xref	c_eewrw
9241                     	xref	c_eewrc
9242                     	end
