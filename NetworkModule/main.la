   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2518                     .iconst:	section	.bss
2519  05fe               _stack_limit2:
2520  05fe 00            	ds.b	1
2521  05ff               _stack_limit1:
2522  05ff 00            	ds.b	1
2523                     .const:	section	.text
2524  9e43               L5261_devicetype:
2525  9e43 4e6574776f72  	dc.b	"NetworkModule/",0
2623                     ; 295 int main(void)
2623                     ; 296 {
2625                     .text:	section	.text,new
2626  bc9c               _main:
2628  bc9c 88            	push	a
2629       00000001      OFST:	set	1
2632                     ; 300   parse_complete = 0;
2634  bc9d 725f0102      	clr	_parse_complete
2635                     ; 301   mqtt_parse_complete = 0;
2637  bca1 725f0101      	clr	_mqtt_parse_complete
2638                     ; 302   reboot_request = 0;
2640  bca5 725f0107      	clr	_reboot_request
2641                     ; 303   user_reboot_request = 0;
2643  bca9 725f0106      	clr	_user_reboot_request
2644                     ; 304   restart_request = 0;
2646  bcad 725f0105      	clr	_restart_request
2647                     ; 306   time_mark2 = 0;           // Time capture used in reboot
2649  bcb1 5f            	clrw	x
2650  bcb2 cf00f9        	ldw	_time_mark2+2,x
2651  bcb5 cf00f7        	ldw	_time_mark2,x
2652                     ; 309   restart_reboot_step = RESTART_REBOOT_IDLE;
2654  bcb8 725f0104      	clr	_restart_reboot_step
2655                     ; 310   mqtt_close_tcp = 0;
2657  bcbc 725f0103      	clr	_mqtt_close_tcp
2658                     ; 311   stack_error = 0;
2660  bcc0 725f015f      	clr	_stack_error
2661                     ; 314   mqtt_start = MQTT_START_TCP_CONNECT;	 // Tracks the MQTT startup steps
2663  bcc4 350100a4      	mov	_mqtt_start,#1
2664                     ; 315   mqtt_start_status = MQTT_START_NOT_STARTED; // Tracks error states during
2666  bcc8 725f00a3      	clr	_mqtt_start_status
2667                     ; 317   mqtt_keep_alive = 60;                  // Ping interval in seconds
2669  bccc ae003c        	ldw	x,#60
2670  bccf cf00ed        	ldw	_mqtt_keep_alive,x
2671                     ; 319   mqtt_start_ctr1 = 0;			 // Tracks time for the MQTT startup
2673  bcd2 725f00a2      	clr	_mqtt_start_ctr1
2674                     ; 321   mqtt_start_ctr2 = 0;			 // Tracks time for the MQTT startup
2676  bcd6 725f00a1      	clr	_mqtt_start_ctr2
2677                     ; 323   mqtt_sanity_ctr = 0;			 // Tracks time for the MQTT sanity
2679  bcda 725f00a0      	clr	_mqtt_sanity_ctr
2680                     ; 325   mqtt_start_retry = 0;                  // Flag to retry the ARP/TCP Connect
2682  bcde 725f009f      	clr	_mqtt_start_retry
2683                     ; 326   MQTT_error_status = 0;                 // For MQTT error status display in
2685  bce2 725f0297      	clr	_MQTT_error_status
2686                     ; 328   mqtt_restart_step = MQTT_RESTART_IDLE; // Step counter for MQTT restart
2688  bce6 725f009c      	clr	_mqtt_restart_step
2689                     ; 329   strcpy(topic_base, devicetype);        // Initial content of the topic_base.
2691  bcea ae0070        	ldw	x,#_topic_base
2692  bced 90ae9e43      	ldw	y,#L5261_devicetype
2693  bcf1               L6:
2694  bcf1 90f6          	ld	a,(y)
2695  bcf3 905c          	incw	y
2696  bcf5 f7            	ld	(x),a
2697  bcf6 5c            	incw	x
2698  bcf7 4d            	tnz	a
2699  bcf8 26f7          	jrne	L6
2700                     ; 335   state_request = STATE_REQUEST_IDLE;    // Set the state request received to
2702  bcfa c70160        	ld	_state_request,a
2703                     ; 337   TXERIF_counter = 0;                    // Initialize the TXERIF error counter
2705  bcfd 5f            	clrw	x
2706  bcfe cf006d        	ldw	_TXERIF_counter+2,x
2707  bd01 cf006b        	ldw	_TXERIF_counter,x
2708                     ; 338   RXERIF_counter = 0;                    // Initialize the RXERIF error counter
2710  bd04 cf0069        	ldw	_RXERIF_counter+2,x
2711  bd07 cf0067        	ldw	_RXERIF_counter,x
2712                     ; 344   clock_init();            // Initialize and enable clocks and timers
2714  bd0a cde4c7        	call	_clock_init
2716                     ; 346   gpio_init();             // Initialize and enable gpio pins
2718  bd0d cda3c4        	call	_gpio_init
2720                     ; 348   spi_init();              // Initialize the SPI bit bang interface to the
2722  bd10 cde3cf        	call	_spi_init
2724                     ; 351   LEDcontrol(1);           // turn LED on
2726  bd13 a601          	ld	a,#1
2727  bd15 cda40d        	call	_LEDcontrol
2729                     ; 353   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2731  bd18 cdc380        	call	_unlock_eeprom
2733                     ; 355   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2735  bd1b cdc390        	call	_check_eeprom_settings
2737                     ; 359   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2739  bd1e cd9fff        	call	_Enc28j60Init
2741                     ; 361   uip_arp_init();          // Initialize the ARP module
2743  bd21 cdf138        	call	_uip_arp_init
2745                     ; 363   uip_init();              // Initialize uIP Web Server
2747  bd24 cde6d5        	call	_uip_init
2749                     ; 365   HttpDInit();             // Initialize listening ports
2751  bd27 cdac1e        	call	_HttpDInit
2753                     ; 389   stack_limit1 = 0xaa;
2755  bd2a 35aa05ff      	mov	_stack_limit1,#170
2756                     ; 390   stack_limit2 = 0x55;
2758  bd2e 355505fe      	mov	_stack_limit2,#85
2759                     ; 401   mqtt_init(&mqttclient,
2759                     ; 402             mqtt_sendbuf,
2759                     ; 403 	    sizeof(mqtt_sendbuf),
2759                     ; 404 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
2759                     ; 405 	    UIP_APPDATA_SIZE,
2759                     ; 406 	    publish_callback);
2761  bd32 aec0e8        	ldw	x,#_publish_callback
2762  bd35 89            	pushw	x
2763  bd36 ae01be        	ldw	x,#446
2764  bd39 89            	pushw	x
2765  bd3a ae03a5        	ldw	x,#_uip_buf+54
2766  bd3d 89            	pushw	x
2767  bd3e ae00c8        	ldw	x,#200
2768  bd41 89            	pushw	x
2769  bd42 ae016b        	ldw	x,#_mqtt_sendbuf
2770  bd45 89            	pushw	x
2771  bd46 ae00c1        	ldw	x,#_mqttclient
2772  bd49 cdcf77        	call	_mqtt_init
2774  bd4c 5b0a          	addw	sp,#10
2775  bd4e               L1561:
2776                     ; 520     uip_len = Enc28j60Receive(uip_buf); // Check for incoming packets
2778  bd4e ae036f        	ldw	x,#_uip_buf
2779  bd51 cda15f        	call	_Enc28j60Receive
2781  bd54 cf036b        	ldw	_uip_len,x
2782                     ; 522     if (uip_len > 0) {
2784  bd57 2738          	jreq	L5561
2785                     ; 531       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2787  bd59 ae0800        	ldw	x,#2048
2788  bd5c cdf113        	call	_htons
2790  bd5f c3037b        	cpw	x,_uip_buf+12
2791  bd62 2612          	jrne	L7561
2792                     ; 532         uip_input(); // Calls uip_process(UIP_DATA) to process a received
2794  bd64 a601          	ld	a,#1
2795  bd66 cde7e5        	call	_uip_process
2797                     ; 537         if (uip_len > 0) {
2799  bd69 ce036b        	ldw	x,_uip_len
2800  bd6c 2723          	jreq	L5561
2801                     ; 538           uip_arp_out();
2803  bd6e cdf361        	call	_uip_arp_out
2805                     ; 542           Enc28j60Send(uip_buf, uip_len);
2807  bd71 ce036b        	ldw	x,_uip_len
2809  bd74 2013          	jp	LC001
2810  bd76               L7561:
2811                     ; 545       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2813  bd76 ae0806        	ldw	x,#2054
2814  bd79 cdf113        	call	_htons
2816  bd7c c3037b        	cpw	x,_uip_buf+12
2817  bd7f 2610          	jrne	L5561
2818                     ; 546         uip_arp_arpin();
2820  bd81 cdf2b2        	call	_uip_arp_arpin
2822                     ; 550         if (uip_len > 0) {
2824  bd84 ce036b        	ldw	x,_uip_len
2825  bd87 2708          	jreq	L5561
2826                     ; 554           Enc28j60Send(uip_buf, uip_len);
2829  bd89               LC001:
2830  bd89 89            	pushw	x
2831  bd8a ae036f        	ldw	x,#_uip_buf
2832  bd8d cda20c        	call	_Enc28j60Send
2833  bd90 85            	popw	x
2834  bd91               L5561:
2835                     ; 564     if (mqtt_start != MQTT_START_COMPLETE
2835                     ; 565      && mqtt_restart_step == MQTT_RESTART_IDLE
2835                     ; 566      && restart_reboot_step == RESTART_REBOOT_IDLE) {
2837  bd91 c600a4        	ld	a,_mqtt_start
2838  bd94 a114          	cp	a,#20
2839  bd96 270d          	jreq	L1761
2841  bd98 c6009c        	ld	a,_mqtt_restart_step
2842  bd9b 2608          	jrne	L1761
2844  bd9d c60104        	ld	a,_restart_reboot_step
2845  bda0 2603          	jrne	L1761
2846                     ; 567        mqtt_startup();
2848  bda2 cdbe0b        	call	_mqtt_startup
2850  bda5               L1761:
2851                     ; 571     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
2853  bda5 c60104        	ld	a,_restart_reboot_step
2854  bda8 2603          	jrne	L3761
2855                     ; 572       mqtt_sanity_check();
2857  bdaa cdc031        	call	_mqtt_sanity_check
2859  bdad               L3761:
2860                     ; 576     if (periodic_timer_expired()) {
2862  bdad cde559        	call	_periodic_timer_expired
2864  bdb0 4d            	tnz	a
2865  bdb1 2743          	jreq	L5761
2866                     ; 578       for(i = 0; i < UIP_CONNS; i++) {
2868  bdb3 4f            	clr	a
2869  bdb4 6b01          	ld	(OFST+0,sp),a
2871  bdb6               L5071:
2872                     ; 579 	uip_periodic(i);
2874  bdb6 97            	ld	xl,a
2875  bdb7 a629          	ld	a,#41
2876  bdb9 42            	mul	x,a
2877  bdba 1c02c5        	addw	x,#_uip_conns
2878  bdbd cf0369        	ldw	_uip_conn,x
2881  bdc0 a602          	ld	a,#2
2882  bdc2 cde7e5        	call	_uip_process
2884                     ; 598 	if (uip_len > 0) {
2886  bdc5 ce036b        	ldw	x,_uip_len
2887  bdc8 270e          	jreq	L1171
2888                     ; 599 	  uip_arp_out(); // Verifies arp entry in the ARP table and builds LLH
2890  bdca cdf361        	call	_uip_arp_out
2892                     ; 600           Enc28j60Send(uip_buf, uip_len);
2894  bdcd ce036b        	ldw	x,_uip_len
2895  bdd0 89            	pushw	x
2896  bdd1 ae036f        	ldw	x,#_uip_buf
2897  bdd4 cda20c        	call	_Enc28j60Send
2899  bdd7 85            	popw	x
2900  bdd8               L1171:
2901                     ; 603         mqtt_start_ctr1++; // Increment the MQTT start loop timer 1. This is
2903  bdd8 725c00a2      	inc	_mqtt_start_ctr1
2904                     ; 607         mqtt_start_ctr2++; // Increment the MQTT start loop timer 2. This is
2906  bddc 725c00a1      	inc	_mqtt_start_ctr2
2907                     ; 610         mqtt_sanity_ctr++; // Increment the MQTT sanity loop timer. This is
2909  bde0 725c00a0      	inc	_mqtt_sanity_ctr
2910                     ; 578       for(i = 0; i < UIP_CONNS; i++) {
2912  bde4 0c01          	inc	(OFST+0,sp)
2916  bde6 7b01          	ld	a,(OFST+0,sp)
2917  bde8 a104          	cp	a,#4
2918  bdea 25ca          	jrult	L5071
2919                     ; 620       if (mqtt_start == MQTT_START_COMPLETE) {
2921  bdec c600a4        	ld	a,_mqtt_start
2922  bdef a114          	cp	a,#20
2923  bdf1 2603          	jrne	L5761
2924                     ; 621         publish_outbound();
2926  bdf3 cdc195        	call	_publish_outbound
2928  bdf6               L5761:
2929                     ; 628     if (arp_timer_expired()) {
2931  bdf6 cde592        	call	_arp_timer_expired
2933  bdf9 4d            	tnz	a
2934  bdfa 2703          	jreq	L5171
2935                     ; 629       uip_arp_timer(); // Clean out old ARP Table entries. Any entry that has
2937  bdfc cdf15b        	call	_uip_arp_timer
2939  bdff               L5171:
2940                     ; 636     check_runtime_changes();
2942  bdff cdc89a        	call	_check_runtime_changes
2944                     ; 639     check_reset_button();
2946  be02 cdce34        	call	_check_reset_button
2948                     ; 644     check_restart_reboot();
2950  be05 cdcba3        	call	_check_restart_reboot
2953  be08 ccbd4e        	jra	L1561
3004                     ; 672 void mqtt_startup(void)
3004                     ; 673 {
3005                     .text:	section	.text,new
3006  be0b               _mqtt_startup:
3010                     ; 689   if (mqtt_start == MQTT_START_TCP_CONNECT) {
3012  be0b c600a4        	ld	a,_mqtt_start
3013  be0e a101          	cp	a,#1
3014  be10 2630          	jrne	L7271
3015                     ; 690     if (stored_mqttserveraddr[3] != 0) {
3017  be12 c64034        	ld	a,_stored_mqttserveraddr+3
3018  be15 2603ccc030    	jreq	L7371
3019                     ; 710       mqtt_conn = uip_connect(&uip_mqttserveraddr, Port_Mqttd, Port_Mqttd);
3021  be1a ce00f2        	ldw	x,_Port_Mqttd
3022  be1d 89            	pushw	x
3023  be1e 89            	pushw	x
3024  be1f ae02b0        	ldw	x,#_uip_mqttserveraddr
3025  be22 cde704        	call	_uip_connect
3027  be25 5b04          	addw	sp,#4
3028  be27 cf009d        	ldw	_mqtt_conn,x
3029                     ; 711       if (mqtt_conn != NULL) {
3031  be2a 2711          	jreq	L3371
3032                     ; 712         mqtt_start_ctr1 = 0; // Clear 100ms counter
3034  be2c 725f00a2      	clr	_mqtt_start_ctr1
3035                     ; 713         mqtt_start_ctr2 = 0; // Clear 100ms counter
3037  be30 725f00a1      	clr	_mqtt_start_ctr2
3038                     ; 714         mqtt_start_status = MQTT_START_CONNECTIONS_GOOD;
3040  be34 351000a3      	mov	_mqtt_start_status,#16
3041                     ; 715         mqtt_start = MQTT_START_VERIFY_ARP;
3043  be38 350200a4      	mov	_mqtt_start,#2
3046  be3c 81            	ret	
3047  be3d               L3371:
3048                     ; 718         mqtt_start_status |= MQTT_START_CONNECTIONS_ERROR;
3050  be3d 721000a3      	bset	_mqtt_start_status,#0
3052  be41 81            	ret	
3053  be42               L7271:
3054                     ; 723   else if (mqtt_start == MQTT_START_VERIFY_ARP
3054                     ; 724         && mqtt_start_ctr2 > 10) {
3056  be42 a102          	cp	a,#2
3057  be44 263a          	jrne	L1471
3059  be46 c600a1        	ld	a,_mqtt_start_ctr2
3060  be49 a10b          	cp	a,#11
3061  be4b 2533          	jrult	L1471
3062                     ; 725     mqtt_start_ctr2 = 0; // Clear 100ms counter
3064  be4d 725f00a1      	clr	_mqtt_start_ctr2
3065                     ; 732     if (check_mqtt_server_arp_entry() == 1) {
3067  be51 cdf4ac        	call	_check_mqtt_server_arp_entry
3069  be54 5a            	decw	x
3070  be55 2611          	jrne	L3471
3071                     ; 734       mqtt_start_retry = 0;
3073  be57 725f009f      	clr	_mqtt_start_retry
3074                     ; 735       mqtt_start_ctr1 = 0; // Clear 100ms counter
3076  be5b 725f00a2      	clr	_mqtt_start_ctr1
3077                     ; 736       mqtt_start_status |= MQTT_START_ARP_REQUEST_GOOD;
3079  be5f 721a00a3      	bset	_mqtt_start_status,#5
3080                     ; 737       mqtt_start = MQTT_START_VERIFY_TCP;
3082  be63 350300a4      	mov	_mqtt_start,#3
3085  be67 81            	ret	
3086  be68               L3471:
3087                     ; 739     else if (mqtt_start_ctr1 > 150) {
3089  be68 c600a2        	ld	a,_mqtt_start_ctr1
3090  be6b a197          	cp	a,#151
3091  be6d 25a8          	jrult	L7371
3092                     ; 742       mqtt_start_status |= MQTT_START_ARP_REQUEST_ERROR;
3094  be6f 721200a3      	bset	_mqtt_start_status,#1
3095                     ; 743       mqtt_start = MQTT_START_TCP_CONNECT;
3097  be73 350100a4      	mov	_mqtt_start,#1
3098                     ; 745       mqtt_start_status = MQTT_START_NOT_STARTED;
3100  be77 725f00a3      	clr	_mqtt_start_status
3101                     ; 746       mqtt_start_retry++;
3103  be7b 725c009f      	inc	_mqtt_start_retry
3105  be7f 81            	ret	
3106  be80               L1471:
3107                     ; 750   else if (mqtt_start == MQTT_START_VERIFY_TCP
3107                     ; 751         && mqtt_start_ctr2 > 10) {
3109  be80 c600a4        	ld	a,_mqtt_start
3110  be83 a103          	cp	a,#3
3111  be85 263e          	jrne	L3571
3113  be87 c600a1        	ld	a,_mqtt_start_ctr2
3114  be8a a10b          	cp	a,#11
3115  be8c 2537          	jrult	L3571
3116                     ; 752     mqtt_start_ctr2 = 0; // Clear 100ms counter
3118  be8e 725f00a1      	clr	_mqtt_start_ctr2
3119                     ; 760     if ((mqtt_conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
3121  be92 ce009d        	ldw	x,_mqtt_conn
3122  be95 e619          	ld	a,(25,x)
3123  be97 a40f          	and	a,#15
3124  be99 a103          	cp	a,#3
3125  be9b 260d          	jrne	L5571
3126                     ; 761       mqtt_start_retry = 0;
3128  be9d 725f009f      	clr	_mqtt_start_retry
3129                     ; 762       mqtt_start_status |= MQTT_START_TCP_CONNECT_GOOD;
3131  bea1 721c00a3      	bset	_mqtt_start_status,#6
3132                     ; 763       mqtt_start = MQTT_START_QUEUE_CONNECT;
3134  bea5 350400a4      	mov	_mqtt_start,#4
3137  bea9 81            	ret	
3138  beaa               L5571:
3139                     ; 765     else if (mqtt_start_ctr1 > 150) {
3141  beaa c600a2        	ld	a,_mqtt_start_ctr1
3142  bead a197          	cp	a,#151
3143  beaf 2403ccc030    	jrult	L7371
3144                     ; 768       mqtt_start_status |= MQTT_START_TCP_CONNECT_ERROR;
3146  beb4 721400a3      	bset	_mqtt_start_status,#2
3147                     ; 769       mqtt_start = MQTT_START_TCP_CONNECT;
3149  beb8 350100a4      	mov	_mqtt_start,#1
3150                     ; 771       mqtt_start_status = MQTT_START_NOT_STARTED; 
3152  bebc 725f00a3      	clr	_mqtt_start_status
3153                     ; 772       mqtt_start_retry++;
3155  bec0 725c009f      	inc	_mqtt_start_retry
3157  bec4 81            	ret	
3158  bec5               L3571:
3159                     ; 776   else if (mqtt_start == MQTT_START_QUEUE_CONNECT) {
3161  bec5 c600a4        	ld	a,_mqtt_start
3162  bec8 a104          	cp	a,#4
3163  beca 2703ccbf52    	jrne	L5671
3164                     ; 787     strcpy(client_id_text, devicetype);
3166  becf ae00a5        	ldw	x,#_client_id_text
3167  bed2 90ae9e43      	ldw	y,#L5261_devicetype
3168  bed6               L411:
3169  bed6 90f6          	ld	a,(y)
3170  bed8 905c          	incw	y
3171  beda f7            	ld	(x),a
3172  bedb 5c            	incw	x
3173  bedc 4d            	tnz	a
3174  bedd 26f7          	jrne	L411
3175                     ; 789     client_id_text[strlen(client_id_text) - 1] = '\0';
3177  bedf ae00a5        	ldw	x,#_client_id_text
3178  bee2 cdf5ef        	call	_strlen
3180  bee5 5a            	decw	x
3181  bee6 724f00a5      	clr	(_client_id_text,x)
3182                     ; 791     strcat(client_id_text, mac_string);
3184  beea ae0108        	ldw	x,#_mac_string
3185  beed 89            	pushw	x
3186  beee ae00a5        	ldw	x,#_client_id_text
3187  bef1 cdf5db        	call	_strcat
3189  bef4 85            	popw	x
3190                     ; 792     client_id = client_id_text;
3192  bef5 ae00a5        	ldw	x,#_client_id_text
3193  bef8 cf00bf        	ldw	_client_id,x
3194                     ; 795     connect_flags = MQTT_CONNECT_CLEAN_SESSION;
3196  befb 350200f6      	mov	_connect_flags,#2
3197                     ; 798     topic_base[topic_base_len] = '\0';
3199  beff 5f            	clrw	x
3200  bf00 c6006f        	ld	a,_topic_base_len
3201  bf03 97            	ld	xl,a
3202  bf04 724f0070      	clr	(_topic_base,x)
3203                     ; 799     strcat(topic_base, "/status");
3205  bf08 ae9e9c        	ldw	x,#L7671
3206  bf0b 89            	pushw	x
3207  bf0c ae0070        	ldw	x,#_topic_base
3208  bf0f cdf5db        	call	_strcat
3210  bf12 85            	popw	x
3211                     ; 802     mqtt_connect(&mqttclient,
3211                     ; 803                  client_id,              // Based on MAC address
3211                     ; 804                  topic_base,             // Will topic
3211                     ; 805                  "offline",              // Will message 
3211                     ; 806                  7,                      // Will message size
3211                     ; 807                  stored_mqtt_username,   // Username
3211                     ; 808                  stored_mqtt_password,   // Password
3211                     ; 809                  connect_flags,          // Connect flags
3211                     ; 810                  mqtt_keep_alive);       // Ping interval
3213  bf13 ce00ed        	ldw	x,_mqtt_keep_alive
3214  bf16 89            	pushw	x
3215  bf17 3b00f6        	push	_connect_flags
3216  bf1a ae4040        	ldw	x,#_stored_mqtt_password
3217  bf1d 89            	pushw	x
3218  bf1e ae4035        	ldw	x,#_stored_mqtt_username
3219  bf21 89            	pushw	x
3220  bf22 ae0007        	ldw	x,#7
3221  bf25 89            	pushw	x
3222  bf26 ae9e94        	ldw	x,#L1771
3223  bf29 89            	pushw	x
3224  bf2a ae0070        	ldw	x,#_topic_base
3225  bf2d 89            	pushw	x
3226  bf2e ce00bf        	ldw	x,_client_id
3227  bf31 89            	pushw	x
3228  bf32 ae00c1        	ldw	x,#_mqttclient
3229  bf35 cdcfcf        	call	_mqtt_connect
3231  bf38 5b0f          	addw	sp,#15
3232                     ; 812     if (mqttclient.error == MQTT_OK) {
3234  bf3a ce00cb        	ldw	x,_mqttclient+10
3235  bf3d 5a            	decw	x
3236  bf3e 260d          	jrne	L3771
3237                     ; 813       mqtt_start_ctr1 = 0; // Clear 100ms counter
3239  bf40 725f00a2      	clr	_mqtt_start_ctr1
3240                     ; 814       mqtt_start_status |= MQTT_START_MQTT_CONNECT_GOOD;
3242  bf44 721e00a3      	bset	_mqtt_start_status,#7
3243                     ; 815       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE1;
3245  bf48 350500a4      	mov	_mqtt_start,#5
3248  bf4c 81            	ret	
3249  bf4d               L3771:
3250                     ; 818       mqtt_start_status |= MQTT_START_MQTT_CONNECT_ERROR;
3252  bf4d 721600a3      	bset	_mqtt_start_status,#3
3254  bf51 81            	ret	
3255  bf52               L5671:
3256                     ; 822   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE1) {
3258  bf52 a105          	cp	a,#5
3259  bf54 2635          	jrne	L1002
3260                     ; 832     if (mqtt_start_ctr1 > 20) {
3262  bf56 c600a2        	ld	a,_mqtt_start_ctr1
3263  bf59 a115          	cp	a,#21
3264  bf5b 2403ccc030    	jrult	L7371
3265                     ; 843       topic_base[topic_base_len] = '\0';
3267  bf60 c6006f        	ld	a,_topic_base_len
3268  bf63 5f            	clrw	x
3269  bf64 97            	ld	xl,a
3270  bf65 724f0070      	clr	(_topic_base,x)
3271                     ; 844       strcat(topic_base, "/on");
3273  bf69 ae9e90        	ldw	x,#L5002
3274  bf6c 89            	pushw	x
3275  bf6d ae0070        	ldw	x,#_topic_base
3276  bf70 cdf5db        	call	_strcat
3278  bf73 85            	popw	x
3279                     ; 845       mqtt_subscribe(&mqttclient, topic_base, 0);
3281  bf74 5f            	clrw	x
3282  bf75 89            	pushw	x
3283  bf76 ae0070        	ldw	x,#_topic_base
3284  bf79 89            	pushw	x
3285  bf7a ae00c1        	ldw	x,#_mqttclient
3286  bf7d cdd2de        	call	_mqtt_subscribe
3288  bf80 5b04          	addw	sp,#4
3289                     ; 846       mqtt_start_ctr1 = 0; // Clear 100ms counter
3291  bf82 725f00a2      	clr	_mqtt_start_ctr1
3292                     ; 847       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE2;
3294  bf86 350600a4      	mov	_mqtt_start,#6
3296  bf8a 81            	ret	
3297  bf8b               L1002:
3298                     ; 851   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE2) {
3300  bf8b a106          	cp	a,#6
3301  bf8d 2632          	jrne	L1102
3302                     ; 852     if (mqtt_start_ctr1 > 10) {
3304  bf8f c600a2        	ld	a,_mqtt_start_ctr1
3305  bf92 a10b          	cp	a,#11
3306  bf94 25c7          	jrult	L7371
3307                     ; 855       topic_base[topic_base_len] = '\0';
3309  bf96 c6006f        	ld	a,_topic_base_len
3310  bf99 5f            	clrw	x
3311  bf9a 97            	ld	xl,a
3312  bf9b 724f0070      	clr	(_topic_base,x)
3313                     ; 856       strcat(topic_base, "/off");
3315  bf9f ae9e8b        	ldw	x,#L5102
3316  bfa2 89            	pushw	x
3317  bfa3 ae0070        	ldw	x,#_topic_base
3318  bfa6 cdf5db        	call	_strcat
3320  bfa9 85            	popw	x
3321                     ; 857       mqtt_subscribe(&mqttclient, topic_base, 0);
3323  bfaa 5f            	clrw	x
3324  bfab 89            	pushw	x
3325  bfac ae0070        	ldw	x,#_topic_base
3326  bfaf 89            	pushw	x
3327  bfb0 ae00c1        	ldw	x,#_mqttclient
3328  bfb3 cdd2de        	call	_mqtt_subscribe
3330  bfb6 5b04          	addw	sp,#4
3331                     ; 858       mqtt_start_ctr1 = 0; // Clear 100ms counter
3333  bfb8 725f00a2      	clr	_mqtt_start_ctr1
3334                     ; 859       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE3;
3336  bfbc 350700a4      	mov	_mqtt_start,#7
3338  bfc0 81            	ret	
3339  bfc1               L1102:
3340                     ; 863   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE3) {
3342  bfc1 a107          	cp	a,#7
3343  bfc3 2632          	jrne	L1202
3344                     ; 864     if (mqtt_start_ctr1 > 10) {
3346  bfc5 c600a2        	ld	a,_mqtt_start_ctr1
3347  bfc8 a10b          	cp	a,#11
3348  bfca 2564          	jrult	L7371
3349                     ; 867       topic_base[topic_base_len] = '\0';
3351  bfcc c6006f        	ld	a,_topic_base_len
3352  bfcf 5f            	clrw	x
3353  bfd0 97            	ld	xl,a
3354  bfd1 724f0070      	clr	(_topic_base,x)
3355                     ; 868       strcat(topic_base, "/state-req");
3357  bfd5 ae9e80        	ldw	x,#L5202
3358  bfd8 89            	pushw	x
3359  bfd9 ae0070        	ldw	x,#_topic_base
3360  bfdc cdf5db        	call	_strcat
3362  bfdf 85            	popw	x
3363                     ; 869       mqtt_subscribe(&mqttclient, topic_base, 0);
3365  bfe0 5f            	clrw	x
3366  bfe1 89            	pushw	x
3367  bfe2 ae0070        	ldw	x,#_topic_base
3368  bfe5 89            	pushw	x
3369  bfe6 ae00c1        	ldw	x,#_mqttclient
3370  bfe9 cdd2de        	call	_mqtt_subscribe
3372  bfec 5b04          	addw	sp,#4
3373                     ; 870       mqtt_start_ctr1 = 0; // Clear 100ms counter
3375  bfee 725f00a2      	clr	_mqtt_start_ctr1
3376                     ; 871       mqtt_start = MQTT_START_QUEUE_PUBLISH;
3378  bff2 350900a4      	mov	_mqtt_start,#9
3380  bff6 81            	ret	
3381  bff7               L1202:
3382                     ; 875   else if (mqtt_start == MQTT_START_QUEUE_PUBLISH) {
3384  bff7 a109          	cp	a,#9
3385  bff9 2635          	jrne	L7371
3386                     ; 876     if (mqtt_start_ctr1 > 10) {
3388  bffb c600a2        	ld	a,_mqtt_start_ctr1
3389  bffe a10b          	cp	a,#11
3390  c000 252e          	jrult	L7371
3391                     ; 879       topic_base[topic_base_len] = '\0';
3393  c002 c6006f        	ld	a,_topic_base_len
3394  c005 5f            	clrw	x
3395  c006 97            	ld	xl,a
3396  c007 724f0070      	clr	(_topic_base,x)
3397                     ; 880       strcat(topic_base, "/status");
3399  c00b ae9e9c        	ldw	x,#L7671
3400  c00e 89            	pushw	x
3401  c00f ae0070        	ldw	x,#_topic_base
3402  c012 cdf5db        	call	_strcat
3404  c015 85            	popw	x
3405                     ; 881       mqtt_publish(&mqttclient,
3405                     ; 882                    topic_base,
3405                     ; 883 		   "online",
3405                     ; 884 		   6,
3405                     ; 885 		   MQTT_PUBLISH_QOS_0 | MQTT_PUBLISH_RETAIN);
3407  c016 4b01          	push	#1
3408  c018 ae0006        	ldw	x,#6
3409  c01b 89            	pushw	x
3410  c01c ae9e79        	ldw	x,#L5302
3411  c01f 89            	pushw	x
3412  c020 ae0070        	ldw	x,#_topic_base
3413  c023 89            	pushw	x
3414  c024 ae00c1        	ldw	x,#_mqttclient
3415  c027 cdd079        	call	_mqtt_publish
3417  c02a 5b07          	addw	sp,#7
3418                     ; 887       mqtt_start = MQTT_START_COMPLETE;
3420  c02c 351400a4      	mov	_mqtt_start,#20
3421  c030               L7371:
3422                     ; 890 }
3425  c030 81            	ret	
3461                     ; 893 void mqtt_sanity_check(void)
3461                     ; 894 {
3462                     .text:	section	.text,new
3463  c031               _mqtt_sanity_check:
3467                     ; 906   if (mqtt_restart_step == MQTT_RESTART_IDLE) {
3469  c031 c6009c        	ld	a,_mqtt_restart_step
3470  c034 2634          	jrne	L7402
3471                     ; 913     if (mqttclient.number_of_timeouts > 1) {
3473  c036 ce00cf        	ldw	x,_mqttclient+14
3474  c039 a30002        	cpw	x,#2
3475  c03c 2f08          	jrslt	L1502
3476                     ; 915       mqttclient.number_of_timeouts = 0;
3478  c03e 5f            	clrw	x
3479  c03f cf00cf        	ldw	_mqttclient+14,x
3480                     ; 916       mqtt_restart_step = MQTT_RESTART_BEGIN;
3482  c042 3501009c      	mov	_mqtt_restart_step,#1
3483  c046               L1502:
3484                     ; 922     if (mqtt_start == MQTT_START_COMPLETE
3484                     ; 923      && mqtt_conn->tcpstateflags == UIP_CLOSED) {
3486  c046 c600a4        	ld	a,_mqtt_start
3487  c049 a114          	cp	a,#20
3488  c04b 260b          	jrne	L3502
3490  c04d ce009d        	ldw	x,_mqtt_conn
3491  c050 6d19          	tnz	(25,x)
3492  c052 2604          	jrne	L3502
3493                     ; 924       mqtt_restart_step = MQTT_RESTART_BEGIN;
3495  c054 3501009c      	mov	_mqtt_restart_step,#1
3496  c058               L3502:
3497                     ; 930     if (mqtt_start == MQTT_START_COMPLETE
3497                     ; 931      && mqttclient.error != MQTT_OK) {
3499  c058 a114          	cp	a,#20
3500  c05a 2703ccc0e7    	jrne	L7502
3502  c05f ce00cb        	ldw	x,_mqttclient+10
3503  c062 5a            	decw	x
3504  c063 27f7          	jreq	L7502
3505                     ; 932       mqtt_restart_step = MQTT_RESTART_BEGIN;
3507  c065 3501009c      	mov	_mqtt_restart_step,#1
3509  c069 81            	ret	
3510  c06a               L7402:
3511                     ; 936   else if (mqtt_restart_step == MQTT_RESTART_BEGIN) {
3513  c06a a101          	cp	a,#1
3514  c06c 2609          	jrne	L1602
3515                     ; 944     mqtt_restart_step = MQTT_RESTART_DISCONNECT_START;
3517  c06e 3502009c      	mov	_mqtt_restart_step,#2
3518                     ; 947     mqtt_start_status = MQTT_START_NOT_STARTED;
3520  c072 725f00a3      	clr	_mqtt_start_status
3523  c076 81            	ret	
3524  c077               L1602:
3525                     ; 950   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_START) {
3527  c077 a102          	cp	a,#2
3528  c079 260f          	jrne	L5602
3529                     ; 951     mqtt_restart_step = MQTT_RESTART_DISCONNECT_WAIT;
3531  c07b 3503009c      	mov	_mqtt_restart_step,#3
3532                     ; 953     mqtt_disconnect(&mqttclient);
3534  c07f ae00c1        	ldw	x,#_mqttclient
3535  c082 cdd3ca        	call	_mqtt_disconnect
3537                     ; 954     mqtt_sanity_ctr = 0; // Clear 100ms counter
3539  c085 725f00a0      	clr	_mqtt_sanity_ctr
3542  c089 81            	ret	
3543  c08a               L5602:
3544                     ; 957   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_WAIT) {
3546  c08a a103          	cp	a,#3
3547  c08c 260c          	jrne	L1702
3548                     ; 958     if (mqtt_sanity_ctr > 10) {
3550  c08e c600a0        	ld	a,_mqtt_sanity_ctr
3551  c091 a10b          	cp	a,#11
3552  c093 2552          	jrult	L7502
3553                     ; 961       mqtt_restart_step = MQTT_RESTART_TCPCLOSE;
3555  c095 3504009c      	mov	_mqtt_restart_step,#4
3557  c099 81            	ret	
3558  c09a               L1702:
3559                     ; 965   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE) {
3561  c09a a104          	cp	a,#4
3562  c09c 260d          	jrne	L7702
3563                     ; 981     mqtt_close_tcp = 1;
3565  c09e 35010103      	mov	_mqtt_close_tcp,#1
3566                     ; 983     mqtt_sanity_ctr = 0; // Clear 100ms counter
3568  c0a2 725f00a0      	clr	_mqtt_sanity_ctr
3569                     ; 984     mqtt_restart_step = MQTT_RESTART_TCPCLOSE_WAIT;
3571  c0a6 3505009c      	mov	_mqtt_restart_step,#5
3574  c0aa 81            	ret	
3575  c0ab               L7702:
3576                     ; 987   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE_WAIT) {
3578  c0ab a105          	cp	a,#5
3579  c0ad 2610          	jrne	L3012
3580                     ; 992     if (mqtt_sanity_ctr > 20) {
3582  c0af c600a0        	ld	a,_mqtt_sanity_ctr
3583  c0b2 a115          	cp	a,#21
3584  c0b4 2531          	jrult	L7502
3585                     ; 993       mqtt_close_tcp = 0;
3587  c0b6 725f0103      	clr	_mqtt_close_tcp
3588                     ; 994       mqtt_restart_step = MQTT_RESTART_SIGNAL_STARTUP;
3590  c0ba 3506009c      	mov	_mqtt_restart_step,#6
3592  c0be 81            	ret	
3593  c0bf               L3012:
3594                     ; 998   else if (mqtt_restart_step == MQTT_RESTART_SIGNAL_STARTUP) {
3596  c0bf a106          	cp	a,#6
3597  c0c1 2624          	jrne	L7502
3598                     ; 1000     mqtt_init(&mqttclient,
3598                     ; 1001               mqtt_sendbuf,
3598                     ; 1002 	      sizeof(mqtt_sendbuf),
3598                     ; 1003 	      &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
3598                     ; 1004 	      UIP_APPDATA_SIZE,
3598                     ; 1005 	      publish_callback);
3600  c0c3 aec0e8        	ldw	x,#_publish_callback
3601  c0c6 89            	pushw	x
3602  c0c7 ae01be        	ldw	x,#446
3603  c0ca 89            	pushw	x
3604  c0cb ae03a5        	ldw	x,#_uip_buf+54
3605  c0ce 89            	pushw	x
3606  c0cf ae00c8        	ldw	x,#200
3607  c0d2 89            	pushw	x
3608  c0d3 ae016b        	ldw	x,#_mqtt_sendbuf
3609  c0d6 89            	pushw	x
3610  c0d7 ae00c1        	ldw	x,#_mqttclient
3611  c0da cdcf77        	call	_mqtt_init
3613  c0dd 5b0a          	addw	sp,#10
3614                     ; 1008     mqtt_restart_step = MQTT_RESTART_IDLE;
3616  c0df 725f009c      	clr	_mqtt_restart_step
3617                     ; 1009     mqtt_start = MQTT_START_TCP_CONNECT;
3619  c0e3 350100a4      	mov	_mqtt_start,#1
3620  c0e7               L7502:
3621                     ; 1011 }
3624  c0e7 81            	ret	
3697                     ; 1089 void publish_callback(void** unused, struct mqtt_response_publish *published)
3697                     ; 1090 {
3698                     .text:	section	.text,new
3699  c0e8               _publish_callback:
3701  c0e8 5204          	subw	sp,#4
3702       00000004      OFST:	set	4
3705                     ; 1096   pin_value = 0;
3707  c0ea 0f01          	clr	(OFST-3,sp)
3709                     ; 1097   ParseNum = 0;
3711                     ; 1125   pBuffer = uip_appdata;
3713  c0ec ce036d        	ldw	x,_uip_appdata
3715                     ; 1127   pBuffer = pBuffer + 1;
3717  c0ef 1c0012        	addw	x,#18
3719                     ; 1129   pBuffer = pBuffer + 1;
3722                     ; 1131   pBuffer = pBuffer + 2;
3725                     ; 1133   pBuffer = pBuffer + 14;
3727  c0f2 1f03          	ldw	(OFST-1,sp),x
3729                     ; 1135   pBuffer = pBuffer + strlen(stored_devicename) + 1;
3731  c0f4 ae4000        	ldw	x,#_stored_devicename
3732  c0f7 cdf5ef        	call	_strlen
3734  c0fa 72fb03        	addw	x,(OFST-1,sp)
3735  c0fd 5c            	incw	x
3736  c0fe 1f03          	ldw	(OFST-1,sp),x
3738                     ; 1138   if (*pBuffer == 'o') {
3740  c100 f6            	ld	a,(x)
3741  c101 a16f          	cp	a,#111
3742  c103 267a          	jrne	L3412
3743                     ; 1139     pBuffer++;
3745  c105 5c            	incw	x
3746  c106 1f03          	ldw	(OFST-1,sp),x
3748                     ; 1140     if (*pBuffer == 'n') {
3750  c108 f6            	ld	a,(x)
3751  c109 a16e          	cp	a,#110
3752  c10b 2609          	jrne	L5412
3753                     ; 1141       pBuffer++;
3755  c10d 5c            	incw	x
3756  c10e 1f03          	ldw	(OFST-1,sp),x
3758                     ; 1142       pin_value = 1;
3760  c110 a601          	ld	a,#1
3761  c112 6b01          	ld	(OFST-3,sp),a
3764  c114 200b          	jra	L7412
3765  c116               L5412:
3766                     ; 1144     else if (*pBuffer == 'f') {
3768  c116 a166          	cp	a,#102
3769  c118 2607          	jrne	L7412
3770                     ; 1145       pBuffer = pBuffer + 2;
3772  c11a 1c0002        	addw	x,#2
3773  c11d 1f03          	ldw	(OFST-1,sp),x
3775                     ; 1146       pin_value = 0;
3777  c11f 0f01          	clr	(OFST-3,sp)
3779  c121               L7412:
3780                     ; 1150     if (*pBuffer == 'a') {
3782  c121 f6            	ld	a,(x)
3783  c122 a161          	cp	a,#97
3784  c124 2625          	jrne	L3512
3785                     ; 1151       pBuffer++;
3787  c126 5c            	incw	x
3788  c127 1f03          	ldw	(OFST-1,sp),x
3790                     ; 1152       if (*pBuffer == 'l') {
3792  c129 f6            	ld	a,(x)
3793  c12a a16c          	cp	a,#108
3794  c12c 264b          	jrne	L7612
3795                     ; 1153         pBuffer++;
3797  c12e 5c            	incw	x
3798  c12f 1f03          	ldw	(OFST-1,sp),x
3800                     ; 1154         if (*pBuffer == 'l') {
3802  c131 f6            	ld	a,(x)
3803  c132 a16c          	cp	a,#108
3804  c134 2643          	jrne	L7612
3805                     ; 1156 	  for (i=0; i<8; i++) GpioSetPin(i, (uint8_t)pin_value);
3807  c136 0f02          	clr	(OFST-2,sp)
3809  c138               L1612:
3812  c138 7b01          	ld	a,(OFST-3,sp)
3813  c13a 97            	ld	xl,a
3814  c13b 7b02          	ld	a,(OFST-2,sp)
3815  c13d 95            	ld	xh,a
3816  c13e cdbbad        	call	_GpioSetPin
3820  c141 0c02          	inc	(OFST-2,sp)
3824  c143 7b02          	ld	a,(OFST-2,sp)
3825  c145 a108          	cp	a,#8
3826  c147 25ef          	jrult	L1612
3827  c149 202e          	jra	L7612
3828  c14b               L3512:
3829                     ; 1162     else if (*pBuffer == '0' || *pBuffer == '1') {
3831  c14b a130          	cp	a,#48
3832  c14d 2704          	jreq	L3712
3834  c14f a131          	cp	a,#49
3835  c151 2626          	jrne	L7612
3836  c153               L3712:
3837                     ; 1164       ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3839  c153 97            	ld	xl,a
3840  c154 a60a          	ld	a,#10
3841  c156 42            	mul	x,a
3842  c157 9f            	ld	a,xl
3843  c158 a0e0          	sub	a,#224
3844  c15a 6b02          	ld	(OFST-2,sp),a
3846                     ; 1165       pBuffer++;
3848  c15c 1e03          	ldw	x,(OFST-1,sp)
3849  c15e 5c            	incw	x
3850  c15f 1f03          	ldw	(OFST-1,sp),x
3852                     ; 1167       ParseNum += (uint8_t)(*pBuffer - '0');
3854  c161 f6            	ld	a,(x)
3855  c162 a030          	sub	a,#48
3856  c164 1b02          	add	a,(OFST-2,sp)
3857  c166 6b02          	ld	(OFST-2,sp),a
3859                     ; 1169       if (ParseNum > 0 && ParseNum < 9) {
3861  c168 270f          	jreq	L7612
3863  c16a a109          	cp	a,#9
3864  c16c 240b          	jruge	L7612
3865                     ; 1171         ParseNum--;
3867  c16e 0a02          	dec	(OFST-2,sp)
3869                     ; 1173         GpioSetPin(ParseNum, (uint8_t)pin_value);
3871  c170 7b01          	ld	a,(OFST-3,sp)
3872  c172 97            	ld	xl,a
3873  c173 7b02          	ld	a,(OFST-2,sp)
3874  c175 95            	ld	xh,a
3875  c176 cdbbad        	call	_GpioSetPin
3877  c179               L7612:
3878                     ; 1179     mqtt_parse_complete = 1;
3880  c179 35010101      	mov	_mqtt_parse_complete,#1
3882  c17d 2013          	jra	L7712
3883  c17f               L3412:
3884                     ; 1183   else if (*pBuffer == 's') {
3886  c17f a173          	cp	a,#115
3887  c181 260f          	jrne	L7712
3888                     ; 1184     pBuffer += 8;
3890  c183 1c0008        	addw	x,#8
3892                     ; 1185     if (*pBuffer == 'q') {
3894  c186 f6            	ld	a,(x)
3895  c187 a171          	cp	a,#113
3896  c189 2607          	jrne	L7712
3897                     ; 1186       *pBuffer = '0'; // Destroy 'q' in buffer so subsequent "state"
3899  c18b a630          	ld	a,#48
3900  c18d f7            	ld	(x),a
3901                     ; 1197       state_request = STATE_REQUEST_RCVD;
3903  c18e 35010160      	mov	_state_request,#1
3904  c192               L7712:
3905                     ; 1200 }
3908  c192 5b04          	addw	sp,#4
3909  c194 81            	ret	
3948                     ; 1203 void publish_outbound(void)
3948                     ; 1204 {
3949                     .text:	section	.text,new
3950  c195               _publish_outbound:
3952  c195 88            	push	a
3953       00000001      OFST:	set	1
3956                     ; 1212   if (state_request == STATE_REQUEST_IDLE) {
3958  c196 c60160        	ld	a,_state_request
3959  c199 2703ccc28e    	jrne	L1222
3960                     ; 1215     xor_tmp = (uint8_t)(IO_16to9 ^ IO_16to9_sent);
3962  c19e c6016a        	ld	a,_IO_16to9
3963  c1a1 c80164        	xor	a,_IO_16to9_sent
3964  c1a4 6b01          	ld	(OFST+0,sp),a
3966                     ; 1217     if      (xor_tmp & 0x80) publish_pinstate('I', '8', IO_16to9, 0x80); // Input 8
3968  c1a6 2a0a          	jrpl	L3222
3971  c1a8 4b80          	push	#128
3972  c1aa 3b016a        	push	_IO_16to9
3973  c1ad ae4938        	ldw	x,#18744
3976  c1b0 2060          	jp	LC002
3977  c1b2               L3222:
3978                     ; 1218     else if (xor_tmp & 0x40) publish_pinstate('I', '7', IO_16to9, 0x40); // Input 7
3980  c1b2 a540          	bcp	a,#64
3981  c1b4 270a          	jreq	L7222
3984  c1b6 4b40          	push	#64
3985  c1b8 3b016a        	push	_IO_16to9
3986  c1bb ae4937        	ldw	x,#18743
3989  c1be 2052          	jp	LC002
3990  c1c0               L7222:
3991                     ; 1219     else if (xor_tmp & 0x20) publish_pinstate('I', '6', IO_16to9, 0x20); // Input 6
3993  c1c0 a520          	bcp	a,#32
3994  c1c2 270a          	jreq	L3322
3997  c1c4 4b20          	push	#32
3998  c1c6 3b016a        	push	_IO_16to9
3999  c1c9 ae4936        	ldw	x,#18742
4002  c1cc 2044          	jp	LC002
4003  c1ce               L3322:
4004                     ; 1220     else if (xor_tmp & 0x10) publish_pinstate('I', '5', IO_16to9, 0x10); // Input 5
4006  c1ce a510          	bcp	a,#16
4007  c1d0 270a          	jreq	L7322
4010  c1d2 4b10          	push	#16
4011  c1d4 3b016a        	push	_IO_16to9
4012  c1d7 ae4935        	ldw	x,#18741
4015  c1da 2036          	jp	LC002
4016  c1dc               L7322:
4017                     ; 1221     else if (xor_tmp & 0x08) publish_pinstate('I', '4', IO_16to9, 0x08); // Input 4
4019  c1dc a508          	bcp	a,#8
4020  c1de 270a          	jreq	L3422
4023  c1e0 4b08          	push	#8
4024  c1e2 3b016a        	push	_IO_16to9
4025  c1e5 ae4934        	ldw	x,#18740
4028  c1e8 2028          	jp	LC002
4029  c1ea               L3422:
4030                     ; 1222     else if (xor_tmp & 0x04) publish_pinstate('I', '3', IO_16to9, 0x04); // Input 3
4032  c1ea a504          	bcp	a,#4
4033  c1ec 270a          	jreq	L7422
4036  c1ee 4b04          	push	#4
4037  c1f0 3b016a        	push	_IO_16to9
4038  c1f3 ae4933        	ldw	x,#18739
4041  c1f6 201a          	jp	LC002
4042  c1f8               L7422:
4043                     ; 1223     else if (xor_tmp & 0x02) publish_pinstate('I', '2', IO_16to9, 0x02); // Input 2
4045  c1f8 a502          	bcp	a,#2
4046  c1fa 270a          	jreq	L3522
4049  c1fc 4b02          	push	#2
4050  c1fe 3b016a        	push	_IO_16to9
4051  c201 ae4932        	ldw	x,#18738
4054  c204 200c          	jp	LC002
4055  c206               L3522:
4056                     ; 1224     else if (xor_tmp & 0x01) publish_pinstate('I', '1', IO_16to9, 0x01); // Input 1
4058  c206 a501          	bcp	a,#1
4059  c208 270c          	jreq	L5222
4062  c20a 4b01          	push	#1
4063  c20c 3b016a        	push	_IO_16to9
4064  c20f ae4931        	ldw	x,#18737
4066  c212               LC002:
4067  c212 cdc29c        	call	_publish_pinstate
4068  c215 85            	popw	x
4069  c216               L5222:
4070                     ; 1228     xor_tmp = (uint8_t)(IO_8to1 ^ IO_8to1_sent);
4072  c216 c60169        	ld	a,_IO_8to1
4073  c219 c80163        	xor	a,_IO_8to1_sent
4074  c21c 6b01          	ld	(OFST+0,sp),a
4076                     ; 1230     if      (xor_tmp & 0x80) publish_pinstate('O', '8', IO_8to1, 0x80); // Output 8
4078  c21e 2a0a          	jrpl	L1622
4081  c220 4b80          	push	#128
4082  c222 3b0169        	push	_IO_8to1
4083  c225 ae4f38        	ldw	x,#20280
4086  c228 2060          	jp	LC003
4087  c22a               L1622:
4088                     ; 1231     else if (xor_tmp & 0x40) publish_pinstate('O', '7', IO_8to1, 0x40); // Output 7
4090  c22a a540          	bcp	a,#64
4091  c22c 270a          	jreq	L5622
4094  c22e 4b40          	push	#64
4095  c230 3b0169        	push	_IO_8to1
4096  c233 ae4f37        	ldw	x,#20279
4099  c236 2052          	jp	LC003
4100  c238               L5622:
4101                     ; 1232     else if (xor_tmp & 0x20) publish_pinstate('O', '6', IO_8to1, 0x20); // Output 6
4103  c238 a520          	bcp	a,#32
4104  c23a 270a          	jreq	L1722
4107  c23c 4b20          	push	#32
4108  c23e 3b0169        	push	_IO_8to1
4109  c241 ae4f36        	ldw	x,#20278
4112  c244 2044          	jp	LC003
4113  c246               L1722:
4114                     ; 1233     else if (xor_tmp & 0x10) publish_pinstate('O', '5', IO_8to1, 0x10); // Output 5
4116  c246 a510          	bcp	a,#16
4117  c248 270a          	jreq	L5722
4120  c24a 4b10          	push	#16
4121  c24c 3b0169        	push	_IO_8to1
4122  c24f ae4f35        	ldw	x,#20277
4125  c252 2036          	jp	LC003
4126  c254               L5722:
4127                     ; 1234     else if (xor_tmp & 0x08) publish_pinstate('O', '4', IO_8to1, 0x08); // Output 4
4129  c254 a508          	bcp	a,#8
4130  c256 270a          	jreq	L1032
4133  c258 4b08          	push	#8
4134  c25a 3b0169        	push	_IO_8to1
4135  c25d ae4f34        	ldw	x,#20276
4138  c260 2028          	jp	LC003
4139  c262               L1032:
4140                     ; 1235     else if (xor_tmp & 0x04) publish_pinstate('O', '3', IO_8to1, 0x04); // Output 3
4142  c262 a504          	bcp	a,#4
4143  c264 270a          	jreq	L5032
4146  c266 4b04          	push	#4
4147  c268 3b0169        	push	_IO_8to1
4148  c26b ae4f33        	ldw	x,#20275
4151  c26e 201a          	jp	LC003
4152  c270               L5032:
4153                     ; 1236     else if (xor_tmp & 0x02) publish_pinstate('O', '2', IO_8to1, 0x02); // Output 2
4155  c270 a502          	bcp	a,#2
4156  c272 270a          	jreq	L1132
4159  c274 4b02          	push	#2
4160  c276 3b0169        	push	_IO_8to1
4161  c279 ae4f32        	ldw	x,#20274
4164  c27c 200c          	jp	LC003
4165  c27e               L1132:
4166                     ; 1237     else if (xor_tmp & 0x01) publish_pinstate('O', '1', IO_8to1, 0x01); // Output 1
4168  c27e a501          	bcp	a,#1
4169  c280 270c          	jreq	L1222
4172  c282 4b01          	push	#1
4173  c284 3b0169        	push	_IO_8to1
4174  c287 ae4f31        	ldw	x,#20273
4176  c28a               LC003:
4177  c28a cdc29c        	call	_publish_pinstate
4178  c28d 85            	popw	x
4179  c28e               L1222:
4180                     ; 1241   if (state_request == STATE_REQUEST_RCVD) {
4182  c28e c60160        	ld	a,_state_request
4183  c291 4a            	dec	a
4184  c292 2606          	jrne	L7132
4185                     ; 1243     state_request = STATE_REQUEST_IDLE;
4187  c294 c70160        	ld	_state_request,a
4188                     ; 1244     publish_pinstate_all();
4190  c297 cdc334        	call	_publish_pinstate_all
4192  c29a               L7132:
4193                     ; 1272 }
4196  c29a 84            	pop	a
4197  c29b 81            	ret	
4261                     ; 1275 void publish_pinstate(uint8_t direction, uint8_t pin, uint8_t value, uint8_t mask)
4261                     ; 1276 {
4262                     .text:	section	.text,new
4263  c29c               _publish_pinstate:
4265  c29c 89            	pushw	x
4266       00000000      OFST:	set	0
4269                     ; 1279   application_message[0] = '0';
4271  c29d 353000ef      	mov	_application_message,#48
4272                     ; 1280   application_message[1] = (uint8_t)(pin);
4274  c2a1 9f            	ld	a,xl
4275  c2a2 c700f0        	ld	_application_message+1,a
4276                     ; 1281   application_message[2] = '\0';
4278  c2a5 725f00f1      	clr	_application_message+2
4279                     ; 1283   topic_base[topic_base_len] = '\0';
4281  c2a9 5f            	clrw	x
4282  c2aa c6006f        	ld	a,_topic_base_len
4283  c2ad 97            	ld	xl,a
4284  c2ae 724f0070      	clr	(_topic_base,x)
4285                     ; 1286   if (direction == 'I') {
4287  c2b2 7b01          	ld	a,(OFST+1,sp)
4288  c2b4 a149          	cp	a,#73
4289  c2b6 2618          	jrne	L3432
4290                     ; 1288     if (invert_input == 0xff) value = (uint8_t)(~value);
4292  c2b8 c60161        	ld	a,_invert_input
4293  c2bb 4c            	inc	a
4294  c2bc 2602          	jrne	L5432
4297  c2be 0305          	cpl	(OFST+5,sp)
4298  c2c0               L5432:
4299                     ; 1289     if (value & mask) strcat(topic_base, "/in_on");
4301  c2c0 7b05          	ld	a,(OFST+5,sp)
4302  c2c2 1506          	bcp	a,(OFST+6,sp)
4303  c2c4 2705          	jreq	L7432
4306  c2c6 ae9e72        	ldw	x,#L1532
4309  c2c9 2013          	jra	L7532
4310  c2cb               L7432:
4311                     ; 1290     else strcat(topic_base, "/in_off");
4313  c2cb ae9e6a        	ldw	x,#L5532
4315  c2ce 200e          	jra	L7532
4316  c2d0               L3432:
4317                     ; 1294     if (value & mask) strcat(topic_base, "/out_on");
4319  c2d0 7b05          	ld	a,(OFST+5,sp)
4320  c2d2 1506          	bcp	a,(OFST+6,sp)
4321  c2d4 2705          	jreq	L1632
4324  c2d6 ae9e62        	ldw	x,#L3632
4327  c2d9 2003          	jra	L7532
4328  c2db               L1632:
4329                     ; 1295     else strcat(topic_base, "/out_off");
4331  c2db ae9e59        	ldw	x,#L7632
4333  c2de               L7532:
4334  c2de 89            	pushw	x
4335  c2df ae0070        	ldw	x,#_topic_base
4336  c2e2 cdf5db        	call	_strcat
4337  c2e5 85            	popw	x
4338                     ; 1299   mqtt_publish(&mqttclient,
4338                     ; 1300                topic_base,
4338                     ; 1301 	       application_message,
4338                     ; 1302 	       2,
4338                     ; 1303 	       MQTT_PUBLISH_QOS_0);
4340  c2e6 4b00          	push	#0
4341  c2e8 ae0002        	ldw	x,#2
4342  c2eb 89            	pushw	x
4343  c2ec ae00ef        	ldw	x,#_application_message
4344  c2ef 89            	pushw	x
4345  c2f0 ae0070        	ldw	x,#_topic_base
4346  c2f3 89            	pushw	x
4347  c2f4 ae00c1        	ldw	x,#_mqttclient
4348  c2f7 cdd079        	call	_mqtt_publish
4350  c2fa 5b07          	addw	sp,#7
4351                     ; 1305   if (direction == 'I') {
4353  c2fc 7b01          	ld	a,(OFST+1,sp)
4354  c2fe a149          	cp	a,#73
4355  c300 2619          	jrne	L1732
4356                     ; 1307     if (IO_16to9 & mask) IO_16to9_sent |= mask;
4358  c302 c6016a        	ld	a,_IO_16to9
4359  c305 1506          	bcp	a,(OFST+6,sp)
4360  c307 2707          	jreq	L3732
4363  c309 c60164        	ld	a,_IO_16to9_sent
4364  c30c 1a06          	or	a,(OFST+6,sp)
4366  c30e 2006          	jp	LC005
4367  c310               L3732:
4368                     ; 1308     else IO_16to9_sent &= (uint8_t)~mask;
4370  c310 7b06          	ld	a,(OFST+6,sp)
4371  c312 43            	cpl	a
4372  c313 c40164        	and	a,_IO_16to9_sent
4373  c316               LC005:
4374  c316 c70164        	ld	_IO_16to9_sent,a
4375  c319 2017          	jra	L7732
4376  c31b               L1732:
4377                     ; 1312     if (IO_8to1 & mask) IO_8to1_sent |= mask;
4379  c31b c60169        	ld	a,_IO_8to1
4380  c31e 1506          	bcp	a,(OFST+6,sp)
4381  c320 2707          	jreq	L1042
4384  c322 c60163        	ld	a,_IO_8to1_sent
4385  c325 1a06          	or	a,(OFST+6,sp)
4387  c327 2006          	jp	LC004
4388  c329               L1042:
4389                     ; 1313     else IO_8to1_sent &= (uint8_t)~mask;
4391  c329 7b06          	ld	a,(OFST+6,sp)
4392  c32b 43            	cpl	a
4393  c32c c40163        	and	a,_IO_8to1_sent
4394  c32f               LC004:
4395  c32f c70163        	ld	_IO_8to1_sent,a
4396  c332               L7732:
4397                     ; 1315 }
4400  c332 85            	popw	x
4401  c333 81            	ret	
4450                     ; 1318 void publish_pinstate_all(void)
4450                     ; 1319 {
4451                     .text:	section	.text,new
4452  c334               _publish_pinstate_all:
4454  c334 89            	pushw	x
4455       00000002      OFST:	set	2
4458                     ; 1325   j = IO_16to9;
4460  c335 c6016a        	ld	a,_IO_16to9
4461  c338 6b02          	ld	(OFST+0,sp),a
4463                     ; 1326   k = IO_8to1;
4465  c33a c60169        	ld	a,_IO_8to1
4466  c33d 6b01          	ld	(OFST-1,sp),a
4468                     ; 1329   if (invert_input == 0xff) j = (uint8_t)(~j);
4470  c33f c60161        	ld	a,_invert_input
4471  c342 4c            	inc	a
4472  c343 2602          	jrne	L3242
4475  c345 0302          	cpl	(OFST+0,sp)
4477  c347               L3242:
4478                     ; 1331   application_message[0] = j;
4480  c347 7b02          	ld	a,(OFST+0,sp)
4481  c349 c700ef        	ld	_application_message,a
4482                     ; 1332   application_message[1] = k;
4484  c34c 7b01          	ld	a,(OFST-1,sp)
4485  c34e c700f0        	ld	_application_message+1,a
4486                     ; 1333   application_message[2] = '\0';
4488  c351 725f00f1      	clr	_application_message+2
4489                     ; 1335   topic_base[topic_base_len] = '\0';
4491  c355 5f            	clrw	x
4492  c356 c6006f        	ld	a,_topic_base_len
4493  c359 97            	ld	xl,a
4494  c35a 724f0070      	clr	(_topic_base,x)
4495                     ; 1336   strcat(topic_base, "/state");
4497  c35e ae9e52        	ldw	x,#L5242
4498  c361 89            	pushw	x
4499  c362 ae0070        	ldw	x,#_topic_base
4500  c365 cdf5db        	call	_strcat
4502  c368 85            	popw	x
4503                     ; 1339   mqtt_publish(&mqttclient,
4503                     ; 1340                topic_base,
4503                     ; 1341 	       application_message,
4503                     ; 1342 	       2,
4503                     ; 1343 	       MQTT_PUBLISH_QOS_0);
4505  c369 4b00          	push	#0
4506  c36b ae0002        	ldw	x,#2
4507  c36e 89            	pushw	x
4508  c36f ae00ef        	ldw	x,#_application_message
4509  c372 89            	pushw	x
4510  c373 ae0070        	ldw	x,#_topic_base
4511  c376 89            	pushw	x
4512  c377 ae00c1        	ldw	x,#_mqttclient
4513  c37a cdd079        	call	_mqtt_publish
4515                     ; 1344 }
4518  c37d 5b09          	addw	sp,#9
4519  c37f 81            	ret	
4544                     ; 1349 void unlock_eeprom(void)
4544                     ; 1350 {
4545                     .text:	section	.text,new
4546  c380               _unlock_eeprom:
4550  c380 2008          	jra	L1442
4551  c382               L7342:
4552                     ; 1362     FLASH_DUKR = 0xAE; // MASS key 1
4554  c382 35ae5064      	mov	_FLASH_DUKR,#174
4555                     ; 1363     FLASH_DUKR = 0x56; // MASS key 2
4557  c386 35565064      	mov	_FLASH_DUKR,#86
4558  c38a               L1442:
4559                     ; 1361   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
4561  c38a 7207505ff3    	btjf	_FLASH_IAPSR,#3,L7342
4562                     ; 1391 }
4565  c38f 81            	ret	
4650                     ; 1394 void check_eeprom_settings(void)
4650                     ; 1395 {
4651                     .text:	section	.text,new
4652  c390               _check_eeprom_settings:
4654  c390 88            	push	a
4655       00000001      OFST:	set	1
4658                     ; 1407   if ((magic4 == 0x55) && 
4658                     ; 1408       (magic3 == 0xee) && 
4658                     ; 1409       (magic2 == 0x0f) && 
4658                     ; 1410       (magic1 == 0xf0)) {
4660  c391 c6402e        	ld	a,_magic4
4661  c394 a155          	cp	a,#85
4662  c396 2703ccc53f    	jrne	L1652
4664  c39b c6402d        	ld	a,_magic3
4665  c39e a1ee          	cp	a,#238
4666  c3a0 26f6          	jrne	L1652
4668  c3a2 c6402c        	ld	a,_magic2
4669  c3a5 a10f          	cp	a,#15
4670  c3a7 26ef          	jrne	L1652
4672  c3a9 c6402b        	ld	a,_magic1
4673  c3ac a1f0          	cp	a,#240
4674  c3ae 26e8          	jrne	L1652
4675                     ; 1415     uip_ipaddr(IpAddr, stored_hostaddr[3], stored_hostaddr[2], stored_hostaddr[1], stored_hostaddr[0]);
4677  c3b0 c6402a        	ld	a,_stored_hostaddr+3
4678  c3b3 97            	ld	xl,a
4679  c3b4 c64029        	ld	a,_stored_hostaddr+2
4680  c3b7 02            	rlwa	x,a
4681  c3b8 cf00fb        	ldw	_IpAddr,x
4684  c3bb c64028        	ld	a,_stored_hostaddr+1
4685  c3be 97            	ld	xl,a
4686  c3bf c64027        	ld	a,_stored_hostaddr
4687  c3c2 02            	rlwa	x,a
4688  c3c3 cf00fd        	ldw	_IpAddr+2,x
4689                     ; 1416     uip_sethostaddr(IpAddr);
4691  c3c6 ce00fb        	ldw	x,_IpAddr
4692  c3c9 cf02bc        	ldw	_uip_hostaddr,x
4695  c3cc ce00fd        	ldw	x,_IpAddr+2
4696  c3cf cf02be        	ldw	_uip_hostaddr+2,x
4697                     ; 1419     uip_ipaddr(IpAddr,
4699  c3d2 c64026        	ld	a,_stored_draddr+3
4700  c3d5 97            	ld	xl,a
4701  c3d6 c64025        	ld	a,_stored_draddr+2
4702  c3d9 02            	rlwa	x,a
4703  c3da cf00fb        	ldw	_IpAddr,x
4706  c3dd c64024        	ld	a,_stored_draddr+1
4707  c3e0 97            	ld	xl,a
4708  c3e1 c64023        	ld	a,_stored_draddr
4709  c3e4 02            	rlwa	x,a
4710  c3e5 cf00fd        	ldw	_IpAddr+2,x
4711                     ; 1424     uip_setdraddr(IpAddr);
4713  c3e8 ce00fb        	ldw	x,_IpAddr
4714  c3eb cf02b4        	ldw	_uip_draddr,x
4717  c3ee ce00fd        	ldw	x,_IpAddr+2
4718  c3f1 cf02b6        	ldw	_uip_draddr+2,x
4719                     ; 1427     uip_ipaddr(IpAddr,
4721  c3f4 c64022        	ld	a,_stored_netmask+3
4722  c3f7 97            	ld	xl,a
4723  c3f8 c64021        	ld	a,_stored_netmask+2
4724  c3fb 02            	rlwa	x,a
4725  c3fc cf00fb        	ldw	_IpAddr,x
4728  c3ff c64020        	ld	a,_stored_netmask+1
4729  c402 97            	ld	xl,a
4730  c403 c6401f        	ld	a,_stored_netmask
4731  c406 02            	rlwa	x,a
4732  c407 cf00fd        	ldw	_IpAddr+2,x
4733                     ; 1432     uip_setnetmask(IpAddr);
4735  c40a ce00fb        	ldw	x,_IpAddr
4736  c40d cf02b8        	ldw	_uip_netmask,x
4739  c410 ce00fd        	ldw	x,_IpAddr+2
4740  c413 cf02ba        	ldw	_uip_netmask+2,x
4741                     ; 1436     uip_ipaddr(IpAddr,
4743  c416 c64034        	ld	a,_stored_mqttserveraddr+3
4744  c419 97            	ld	xl,a
4745  c41a c64033        	ld	a,_stored_mqttserveraddr+2
4746  c41d 02            	rlwa	x,a
4747  c41e cf00fb        	ldw	_IpAddr,x
4750  c421 c64032        	ld	a,_stored_mqttserveraddr+1
4751  c424 97            	ld	xl,a
4752  c425 c64031        	ld	a,_stored_mqttserveraddr
4753  c428 02            	rlwa	x,a
4754  c429 cf00fd        	ldw	_IpAddr+2,x
4755                     ; 1441     uip_setmqttserveraddr(IpAddr);
4757  c42c ce00fb        	ldw	x,_IpAddr
4758  c42f cf02b0        	ldw	_uip_mqttserveraddr,x
4761  c432 ce00fd        	ldw	x,_IpAddr+2
4762  c435 cf02b2        	ldw	_uip_mqttserveraddr+2,x
4763                     ; 1443     Port_Mqttd = stored_mqttport;
4765  c438 ce402f        	ldw	x,_stored_mqttport
4766  c43b cf00f2        	ldw	_Port_Mqttd,x
4767                     ; 1447     Port_Httpd = stored_port;
4769  c43e ce401d        	ldw	x,_stored_port
4770  c441 cf00ff        	ldw	_Port_Httpd,x
4771                     ; 1452     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
4773  c444 55401c000a    	mov	_uip_ethaddr,_stored_uip_ethaddr_oct+5
4774                     ; 1453     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
4776  c449 55401b000b    	mov	_uip_ethaddr+1,_stored_uip_ethaddr_oct+4
4777                     ; 1454     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
4779  c44e 55401a000c    	mov	_uip_ethaddr+2,_stored_uip_ethaddr_oct+3
4780                     ; 1455     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
4782  c453 554019000d    	mov	_uip_ethaddr+3,_stored_uip_ethaddr_oct+2
4783                     ; 1456     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
4785  c458 554018000e    	mov	_uip_ethaddr+4,_stored_uip_ethaddr_oct+1
4786                     ; 1457     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
4788  c45d 554017000f    	mov	_uip_ethaddr+5,_stored_uip_ethaddr_oct
4789                     ; 1461     if (stored_config_settings[0] != '0' && stored_config_settings[0] != '1') {
4791  c462 c6404c        	ld	a,_stored_config_settings
4792  c465 a130          	cp	a,#48
4793  c467 270c          	jreq	L3252
4795  c469 a131          	cp	a,#49
4796  c46b 2708          	jreq	L3252
4797                     ; 1462       stored_config_settings[0] = '0';
4799  c46d a630          	ld	a,#48
4800  c46f ae404c        	ldw	x,#_stored_config_settings
4801  c472 cdf61f        	call	c_eewrc
4803  c475               L3252:
4804                     ; 1464     if (stored_config_settings[1] != '0' && stored_config_settings[1] != '1') {
4806  c475 c6404d        	ld	a,_stored_config_settings+1
4807  c478 a130          	cp	a,#48
4808  c47a 270c          	jreq	L5252
4810  c47c a131          	cp	a,#49
4811  c47e 2708          	jreq	L5252
4812                     ; 1465       stored_config_settings[1] = '0';
4814  c480 a630          	ld	a,#48
4815  c482 ae404d        	ldw	x,#_stored_config_settings+1
4816  c485 cdf61f        	call	c_eewrc
4818  c488               L5252:
4819                     ; 1467     if (stored_config_settings[2] != '0' && stored_config_settings[2] != '1' && stored_config_settings[2] != '2') {
4821  c488 c6404e        	ld	a,_stored_config_settings+2
4822  c48b a130          	cp	a,#48
4823  c48d 2710          	jreq	L7252
4825  c48f a131          	cp	a,#49
4826  c491 270c          	jreq	L7252
4828  c493 a132          	cp	a,#50
4829  c495 2708          	jreq	L7252
4830                     ; 1468       stored_config_settings[2] = '2';
4832  c497 a632          	ld	a,#50
4833  c499 ae404e        	ldw	x,#_stored_config_settings+2
4834  c49c cdf61f        	call	c_eewrc
4836  c49f               L7252:
4837                     ; 1470     if (stored_config_settings[3] != '0' && stored_config_settings[3] != '1') {
4839  c49f c6404f        	ld	a,_stored_config_settings+3
4840  c4a2 a130          	cp	a,#48
4841  c4a4 270c          	jreq	L1352
4843  c4a6 a131          	cp	a,#49
4844  c4a8 2708          	jreq	L1352
4845                     ; 1471       stored_config_settings[3] = '0';
4847  c4aa a630          	ld	a,#48
4848  c4ac ae404f        	ldw	x,#_stored_config_settings+3
4849  c4af cdf61f        	call	c_eewrc
4851  c4b2               L1352:
4852                     ; 1473     if (stored_config_settings[4] != '0') {
4854  c4b2 c64050        	ld	a,_stored_config_settings+4
4855  c4b5 a130          	cp	a,#48
4856  c4b7 2708          	jreq	L3352
4857                     ; 1474       stored_config_settings[4] = '0';
4859  c4b9 a630          	ld	a,#48
4860  c4bb ae4050        	ldw	x,#_stored_config_settings+4
4861  c4be cdf61f        	call	c_eewrc
4863  c4c1               L3352:
4864                     ; 1476     if (stored_config_settings[5] != '0') {
4866  c4c1 c64051        	ld	a,_stored_config_settings+5
4867  c4c4 a130          	cp	a,#48
4868  c4c6 2708          	jreq	L5352
4869                     ; 1477       stored_config_settings[5] = '0';
4871  c4c8 a630          	ld	a,#48
4872  c4ca ae4051        	ldw	x,#_stored_config_settings+5
4873  c4cd cdf61f        	call	c_eewrc
4875  c4d0               L5352:
4876                     ; 1481     if (stored_config_settings[0] == '0') invert_output = 0x00;
4878  c4d0 c6404c        	ld	a,_stored_config_settings
4879  c4d3 a130          	cp	a,#48
4880  c4d5 2606          	jrne	L7352
4883  c4d7 725f0162      	clr	_invert_output
4885  c4db 2004          	jra	L1452
4886  c4dd               L7352:
4887                     ; 1482     else invert_output = 0xff;
4889  c4dd 35ff0162      	mov	_invert_output,#255
4890  c4e1               L1452:
4891                     ; 1485     if (stored_config_settings[1] == '0') invert_input = 0x00;
4893  c4e1 c6404d        	ld	a,_stored_config_settings+1
4894  c4e4 a130          	cp	a,#48
4895  c4e6 2606          	jrne	L3452
4898  c4e8 725f0161      	clr	_invert_input
4900  c4ec 2004          	jra	L5452
4901  c4ee               L3452:
4902                     ; 1486     else invert_input = 0xff;
4904  c4ee 35ff0161      	mov	_invert_input,#255
4905  c4f2               L5452:
4906                     ; 1491     if (stored_config_settings[2] == '0') {
4908  c4f2 c6404e        	ld	a,_stored_config_settings+2
4909  c4f5 a130          	cp	a,#48
4910  c4f7 260a          	jrne	L7452
4911                     ; 1493       IO_16to9 = 0x00;
4913  c4f9 725f016a      	clr	_IO_16to9
4914                     ; 1494       IO_8to1 = 0x00;
4916  c4fd 725f0169      	clr	_IO_8to1
4918  c501 2036          	jra	L1552
4919  c503               L7452:
4920                     ; 1496     else if (stored_config_settings[2] == '1') {
4922  c503 a131          	cp	a,#49
4923  c505 260a          	jrne	L3552
4924                     ; 1498       IO_16to9 = 0xff;
4926  c507 35ff016a      	mov	_IO_16to9,#255
4927                     ; 1499       IO_8to1 = 0xff;
4929  c50b 35ff0169      	mov	_IO_8to1,#255
4931  c50f 2028          	jra	L1552
4932  c511               L3552:
4933                     ; 1503       IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9;
4935  c511 55404b0164    	mov	_IO_16to9_sent,_stored_IO_16to9
4936  c516 5501640166    	mov	_IO_16to9_new2,_IO_16to9_sent
4937  c51b 5501660168    	mov	_IO_16to9_new1,_IO_16to9_new2
4938  c520 550168016a    	mov	_IO_16to9,_IO_16to9_new1
4939                     ; 1504       IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1;
4941  c525 5540140163    	mov	_IO_8to1_sent,_stored_IO_8to1
4942  c52a 5501630165    	mov	_IO_8to1_new2,_IO_8to1_sent
4943  c52f 5501650167    	mov	_IO_8to1_new1,_IO_8to1_new2
4944  c534 5501670169    	mov	_IO_8to1,_IO_8to1_new1
4945  c539               L1552:
4946                     ; 1508     write_output_registers();
4948  c539 cdcdb5        	call	_write_output_registers
4951  c53c ccc79e        	jra	L7552
4952  c53f               L1652:
4953                     ; 1517     uip_ipaddr(IpAddr, 192,168,1,4);
4955  c53f aec0a8        	ldw	x,#49320
4956  c542 cf00fb        	ldw	_IpAddr,x
4959  c545 ae0104        	ldw	x,#260
4960  c548 cf00fd        	ldw	_IpAddr+2,x
4961                     ; 1518     uip_sethostaddr(IpAddr);
4963  c54b ce00fb        	ldw	x,_IpAddr
4964  c54e cf02bc        	ldw	_uip_hostaddr,x
4967  c551 ce00fd        	ldw	x,_IpAddr+2
4968  c554 cf02be        	ldw	_uip_hostaddr+2,x
4969                     ; 1520     stored_hostaddr[3] = 192;	// MSB
4971  c557 a6c0          	ld	a,#192
4972  c559 ae402a        	ldw	x,#_stored_hostaddr+3
4973  c55c cdf61f        	call	c_eewrc
4975                     ; 1521     stored_hostaddr[2] = 168;	//
4977  c55f a6a8          	ld	a,#168
4978  c561 ae4029        	ldw	x,#_stored_hostaddr+2
4979  c564 cdf61f        	call	c_eewrc
4981                     ; 1522     stored_hostaddr[1] = 1;	//
4983  c567 a601          	ld	a,#1
4984  c569 ae4028        	ldw	x,#_stored_hostaddr+1
4985  c56c cdf61f        	call	c_eewrc
4987                     ; 1523     stored_hostaddr[0] = 4;	// LSB
4989  c56f a604          	ld	a,#4
4990  c571 ae4027        	ldw	x,#_stored_hostaddr
4991  c574 cdf61f        	call	c_eewrc
4993                     ; 1526     uip_ipaddr(IpAddr, 192,168,1,1);
4995  c577 aec0a8        	ldw	x,#49320
4996  c57a cf00fb        	ldw	_IpAddr,x
4999  c57d ae0101        	ldw	x,#257
5000  c580 cf00fd        	ldw	_IpAddr+2,x
5001                     ; 1527     uip_setdraddr(IpAddr);
5003  c583 ce00fb        	ldw	x,_IpAddr
5004  c586 cf02b4        	ldw	_uip_draddr,x
5007  c589 ce00fd        	ldw	x,_IpAddr+2
5008  c58c cf02b6        	ldw	_uip_draddr+2,x
5009                     ; 1529     stored_draddr[3] = 192;	// MSB
5011  c58f a6c0          	ld	a,#192
5012  c591 ae4026        	ldw	x,#_stored_draddr+3
5013  c594 cdf61f        	call	c_eewrc
5015                     ; 1530     stored_draddr[2] = 168;	//
5017  c597 a6a8          	ld	a,#168
5018  c599 ae4025        	ldw	x,#_stored_draddr+2
5019  c59c cdf61f        	call	c_eewrc
5021                     ; 1531     stored_draddr[1] = 1;		//
5023  c59f a601          	ld	a,#1
5024  c5a1 ae4024        	ldw	x,#_stored_draddr+1
5025  c5a4 cdf61f        	call	c_eewrc
5027                     ; 1532     stored_draddr[0] = 1;		// LSB
5029  c5a7 a601          	ld	a,#1
5030  c5a9 ae4023        	ldw	x,#_stored_draddr
5031  c5ac cdf61f        	call	c_eewrc
5033                     ; 1535     uip_ipaddr(IpAddr, 255,255,255,0);
5035  c5af aeffff        	ldw	x,#65535
5036  c5b2 cf00fb        	ldw	_IpAddr,x
5039  c5b5 aeff00        	ldw	x,#65280
5040  c5b8 cf00fd        	ldw	_IpAddr+2,x
5041                     ; 1536     uip_setnetmask(IpAddr);
5043  c5bb ce00fb        	ldw	x,_IpAddr
5044  c5be cf02b8        	ldw	_uip_netmask,x
5047  c5c1 ce00fd        	ldw	x,_IpAddr+2
5048  c5c4 cf02ba        	ldw	_uip_netmask+2,x
5049                     ; 1538     stored_netmask[3] = 255;	// MSB
5051  c5c7 a6ff          	ld	a,#255
5052  c5c9 ae4022        	ldw	x,#_stored_netmask+3
5053  c5cc cdf61f        	call	c_eewrc
5055                     ; 1539     stored_netmask[2] = 255;	//
5057  c5cf a6ff          	ld	a,#255
5058  c5d1 ae4021        	ldw	x,#_stored_netmask+2
5059  c5d4 cdf61f        	call	c_eewrc
5061                     ; 1540     stored_netmask[1] = 255;	//
5063  c5d7 a6ff          	ld	a,#255
5064  c5d9 ae4020        	ldw	x,#_stored_netmask+1
5065  c5dc cdf61f        	call	c_eewrc
5067                     ; 1541     stored_netmask[0] = 0;	// LSB
5069  c5df 4f            	clr	a
5070  c5e0 ae401f        	ldw	x,#_stored_netmask
5071  c5e3 cdf61f        	call	c_eewrc
5073                     ; 1545     uip_ipaddr(IpAddr, 0,0,0,0);
5075  c5e6 5f            	clrw	x
5076  c5e7 cf00fb        	ldw	_IpAddr,x
5079  c5ea cf00fd        	ldw	_IpAddr+2,x
5080                     ; 1546     uip_setmqttserveraddr(IpAddr);
5082  c5ed cf02b0        	ldw	_uip_mqttserveraddr,x
5085  c5f0 cf02b2        	ldw	_uip_mqttserveraddr+2,x
5086                     ; 1549     stored_mqttserveraddr[3] = 0;	// MSB
5088  c5f3 4f            	clr	a
5089  c5f4 ae4034        	ldw	x,#_stored_mqttserveraddr+3
5090  c5f7 cdf61f        	call	c_eewrc
5092                     ; 1550     stored_mqttserveraddr[2] = 0;	//
5094  c5fa 4f            	clr	a
5095  c5fb ae4033        	ldw	x,#_stored_mqttserveraddr+2
5096  c5fe cdf61f        	call	c_eewrc
5098                     ; 1551     stored_mqttserveraddr[1] = 0;	//
5100  c601 4f            	clr	a
5101  c602 ae4032        	ldw	x,#_stored_mqttserveraddr+1
5102  c605 cdf61f        	call	c_eewrc
5104                     ; 1552     stored_mqttserveraddr[0] = 0;	// LSB
5106  c608 4f            	clr	a
5107  c609 ae4031        	ldw	x,#_stored_mqttserveraddr
5108  c60c cdf61f        	call	c_eewrc
5110                     ; 1555     stored_mqttport = 1883;		// Port
5112  c60f ae075b        	ldw	x,#1883
5113  c612 89            	pushw	x
5114  c613 ae402f        	ldw	x,#_stored_mqttport
5115  c616 cdf609        	call	c_eewrw
5117  c619 85            	popw	x
5118                     ; 1557     Port_Mqttd = 1883;
5120  c61a ae075b        	ldw	x,#1883
5121  c61d cf00f2        	ldw	_Port_Mqttd,x
5122                     ; 1560     for(i=0; i<11; i++) { stored_mqtt_username[i] = '\0'; }
5124  c620 4f            	clr	a
5125  c621 6b01          	ld	(OFST+0,sp),a
5127  c623               L1262:
5130  c623 5f            	clrw	x
5131  c624 97            	ld	xl,a
5132  c625 4f            	clr	a
5133  c626 1c4035        	addw	x,#_stored_mqtt_username
5134  c629 cdf61f        	call	c_eewrc
5138  c62c 0c01          	inc	(OFST+0,sp)
5142  c62e 7b01          	ld	a,(OFST+0,sp)
5143  c630 a10b          	cp	a,#11
5144  c632 25ef          	jrult	L1262
5145                     ; 1561     for(i=0; i<11; i++) { stored_mqtt_password[i] = '\0'; }
5147  c634 4f            	clr	a
5148  c635 6b01          	ld	(OFST+0,sp),a
5150  c637               L7262:
5153  c637 5f            	clrw	x
5154  c638 97            	ld	xl,a
5155  c639 4f            	clr	a
5156  c63a 1c4040        	addw	x,#_stored_mqtt_password
5157  c63d cdf61f        	call	c_eewrc
5161  c640 0c01          	inc	(OFST+0,sp)
5165  c642 7b01          	ld	a,(OFST+0,sp)
5166  c644 a10b          	cp	a,#11
5167  c646 25ef          	jrult	L7262
5168                     ; 1566     stored_port = 8080;
5170  c648 ae1f90        	ldw	x,#8080
5171  c64b 89            	pushw	x
5172  c64c ae401d        	ldw	x,#_stored_port
5173  c64f cdf609        	call	c_eewrw
5175  c652 85            	popw	x
5176                     ; 1568     Port_Httpd = 8080;
5178  c653 ae1f90        	ldw	x,#8080
5179  c656 cf00ff        	ldw	_Port_Httpd,x
5180                     ; 1584     stored_uip_ethaddr_oct[5] = 0xc2;	//MAC MSB
5182  c659 a6c2          	ld	a,#194
5183  c65b ae401c        	ldw	x,#_stored_uip_ethaddr_oct+5
5184  c65e cdf61f        	call	c_eewrc
5186                     ; 1585     stored_uip_ethaddr_oct[4] = 0x4d;
5188  c661 a64d          	ld	a,#77
5189  c663 ae401b        	ldw	x,#_stored_uip_ethaddr_oct+4
5190  c666 cdf61f        	call	c_eewrc
5192                     ; 1586     stored_uip_ethaddr_oct[3] = 0x69;
5194  c669 a669          	ld	a,#105
5195  c66b ae401a        	ldw	x,#_stored_uip_ethaddr_oct+3
5196  c66e cdf61f        	call	c_eewrc
5198                     ; 1587     stored_uip_ethaddr_oct[2] = 0x6b;
5200  c671 a66b          	ld	a,#107
5201  c673 ae4019        	ldw	x,#_stored_uip_ethaddr_oct+2
5202  c676 cdf61f        	call	c_eewrc
5204                     ; 1588     stored_uip_ethaddr_oct[1] = 0x65;
5206  c679 a665          	ld	a,#101
5207  c67b ae4018        	ldw	x,#_stored_uip_ethaddr_oct+1
5208  c67e cdf61f        	call	c_eewrc
5210                     ; 1589     stored_uip_ethaddr_oct[0] = 0x00;	//MAC LSB
5212  c681 4f            	clr	a
5213  c682 ae4017        	ldw	x,#_stored_uip_ethaddr_oct
5214  c685 cdf61f        	call	c_eewrc
5216                     ; 1591     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
5218  c688 35c2000a      	mov	_uip_ethaddr,#194
5219                     ; 1592     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
5221  c68c 354d000b      	mov	_uip_ethaddr+1,#77
5222                     ; 1593     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
5224  c690 3569000c      	mov	_uip_ethaddr+2,#105
5225                     ; 1594     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
5227  c694 356b000d      	mov	_uip_ethaddr+3,#107
5228                     ; 1595     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
5230  c698 3565000e      	mov	_uip_ethaddr+4,#101
5231                     ; 1596     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
5233  c69c 725f000f      	clr	_uip_ethaddr+5
5234                     ; 1599     stored_devicename[0] =  'N';
5236  c6a0 a64e          	ld	a,#78
5237  c6a2 ae4000        	ldw	x,#_stored_devicename
5238  c6a5 cdf61f        	call	c_eewrc
5240                     ; 1600     stored_devicename[1] =  'e';
5242  c6a8 a665          	ld	a,#101
5243  c6aa ae4001        	ldw	x,#_stored_devicename+1
5244  c6ad cdf61f        	call	c_eewrc
5246                     ; 1601     stored_devicename[2] =  'w';
5248  c6b0 a677          	ld	a,#119
5249  c6b2 ae4002        	ldw	x,#_stored_devicename+2
5250  c6b5 cdf61f        	call	c_eewrc
5252                     ; 1602     stored_devicename[3] =  'D';
5254  c6b8 a644          	ld	a,#68
5255  c6ba ae4003        	ldw	x,#_stored_devicename+3
5256  c6bd cdf61f        	call	c_eewrc
5258                     ; 1603     stored_devicename[4] =  'e';
5260  c6c0 a665          	ld	a,#101
5261  c6c2 ae4004        	ldw	x,#_stored_devicename+4
5262  c6c5 cdf61f        	call	c_eewrc
5264                     ; 1604     stored_devicename[5] =  'v';
5266  c6c8 a676          	ld	a,#118
5267  c6ca ae4005        	ldw	x,#_stored_devicename+5
5268  c6cd cdf61f        	call	c_eewrc
5270                     ; 1605     stored_devicename[6] =  'i';
5272  c6d0 a669          	ld	a,#105
5273  c6d2 ae4006        	ldw	x,#_stored_devicename+6
5274  c6d5 cdf61f        	call	c_eewrc
5276                     ; 1606     stored_devicename[7] =  'c';
5278  c6d8 a663          	ld	a,#99
5279  c6da ae4007        	ldw	x,#_stored_devicename+7
5280  c6dd cdf61f        	call	c_eewrc
5282                     ; 1607     stored_devicename[8] =  'e';
5284  c6e0 a665          	ld	a,#101
5285  c6e2 ae4008        	ldw	x,#_stored_devicename+8
5286  c6e5 cdf61f        	call	c_eewrc
5288                     ; 1608     stored_devicename[9] =  '0';
5290  c6e8 a630          	ld	a,#48
5291  c6ea ae4009        	ldw	x,#_stored_devicename+9
5292  c6ed cdf61f        	call	c_eewrc
5294                     ; 1609     stored_devicename[10] = '0';
5296  c6f0 a630          	ld	a,#48
5297  c6f2 ae400a        	ldw	x,#_stored_devicename+10
5298  c6f5 cdf61f        	call	c_eewrc
5300                     ; 1610     stored_devicename[11] = '0';
5302  c6f8 a630          	ld	a,#48
5303  c6fa ae400b        	ldw	x,#_stored_devicename+11
5304  c6fd cdf61f        	call	c_eewrc
5306                     ; 1611     for (i=12; i<20; i++) stored_devicename[i] = '\0';
5308  c700 a60c          	ld	a,#12
5309  c702 6b01          	ld	(OFST+0,sp),a
5311  c704               L5362:
5314  c704 5f            	clrw	x
5315  c705 97            	ld	xl,a
5316  c706 4f            	clr	a
5317  c707 1c4000        	addw	x,#_stored_devicename
5318  c70a cdf61f        	call	c_eewrc
5322  c70d 0c01          	inc	(OFST+0,sp)
5326  c70f 7b01          	ld	a,(OFST+0,sp)
5327  c711 a114          	cp	a,#20
5328  c713 25ef          	jrult	L5362
5329                     ; 1616     stored_config_settings[0] = '0'; // Set to Invert Output OFF
5331  c715 a630          	ld	a,#48
5332  c717 ae404c        	ldw	x,#_stored_config_settings
5333  c71a cdf61f        	call	c_eewrc
5335                     ; 1617     stored_config_settings[1] = '0'; // Set to Invert Input Off
5337  c71d a630          	ld	a,#48
5338  c71f ae404d        	ldw	x,#_stored_config_settings+1
5339  c722 cdf61f        	call	c_eewrc
5341                     ; 1618     stored_config_settings[2] = '2'; // Set to Retain pin states
5343  c725 a632          	ld	a,#50
5344  c727 ae404e        	ldw	x,#_stored_config_settings+2
5345  c72a cdf61f        	call	c_eewrc
5347                     ; 1619     stored_config_settings[3] = '0'; // Set to Half Duplex
5349  c72d a630          	ld	a,#48
5350  c72f ae404f        	ldw	x,#_stored_config_settings+3
5351  c732 cdf61f        	call	c_eewrc
5353                     ; 1620     stored_config_settings[4] = '0'; // undefined
5355  c735 a630          	ld	a,#48
5356  c737 ae4050        	ldw	x,#_stored_config_settings+4
5357  c73a cdf61f        	call	c_eewrc
5359                     ; 1621     stored_config_settings[5] = '0'; // undefined
5361  c73d a630          	ld	a,#48
5362  c73f ae4051        	ldw	x,#_stored_config_settings+5
5363  c742 cdf61f        	call	c_eewrc
5365                     ; 1622     invert_output = 0x00;			// Turn off output invert bit
5367  c745 725f0162      	clr	_invert_output
5368                     ; 1623     invert_input = 0x00;			// Turn off output invert bit
5370  c749 725f0161      	clr	_invert_input
5371                     ; 1624     IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9 = 0x00;
5373  c74d 4f            	clr	a
5374  c74e ae404b        	ldw	x,#_stored_IO_16to9
5375  c751 cdf61f        	call	c_eewrc
5377  c754 725f0164      	clr	_IO_16to9_sent
5378  c758 725f0166      	clr	_IO_16to9_new2
5379  c75c 725f0168      	clr	_IO_16to9_new1
5380  c760 725f016a      	clr	_IO_16to9
5381                     ; 1625     IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1  = 0x00;
5383  c764 4f            	clr	a
5384  c765 ae4014        	ldw	x,#_stored_IO_8to1
5385  c768 cdf61f        	call	c_eewrc
5387  c76b 725f0163      	clr	_IO_8to1_sent
5388  c76f 725f0165      	clr	_IO_8to1_new2
5389  c773 725f0167      	clr	_IO_8to1_new1
5390  c777 725f0169      	clr	_IO_8to1
5391                     ; 1626     write_output_registers();          // Set Relay Control outputs
5393  c77b cdcdb5        	call	_write_output_registers
5395                     ; 1629     magic4 = 0x55;		// MSB
5397  c77e a655          	ld	a,#85
5398  c780 ae402e        	ldw	x,#_magic4
5399  c783 cdf61f        	call	c_eewrc
5401                     ; 1630     magic3 = 0xee;		//
5403  c786 a6ee          	ld	a,#238
5404  c788 ae402d        	ldw	x,#_magic3
5405  c78b cdf61f        	call	c_eewrc
5407                     ; 1631     magic2 = 0x0f;		//
5409  c78e a60f          	ld	a,#15
5410  c790 ae402c        	ldw	x,#_magic2
5411  c793 cdf61f        	call	c_eewrc
5413                     ; 1632     magic1 = 0xf0;		// LSB
5415  c796 a6f0          	ld	a,#240
5416  c798 ae402b        	ldw	x,#_magic1
5417  c79b cdf61f        	call	c_eewrc
5419  c79e               L7552:
5420                     ; 1637   for (i=0; i<4; i++) {
5422  c79e 4f            	clr	a
5423  c79f 6b01          	ld	(OFST+0,sp),a
5425  c7a1               L3462:
5426                     ; 1638     Pending_hostaddr[i] = stored_hostaddr[i];
5428  c7a1 5f            	clrw	x
5429  c7a2 97            	ld	xl,a
5430  c7a3 d64027        	ld	a,(_stored_hostaddr,x)
5431  c7a6 d7013f        	ld	(_Pending_hostaddr,x),a
5432                     ; 1639     Pending_draddr[i] = stored_draddr[i];
5434  c7a9 5f            	clrw	x
5435  c7aa 7b01          	ld	a,(OFST+0,sp)
5436  c7ac 97            	ld	xl,a
5437  c7ad d64023        	ld	a,(_stored_draddr,x)
5438  c7b0 d7013b        	ld	(_Pending_draddr,x),a
5439                     ; 1640     Pending_netmask[i] = stored_netmask[i];
5441  c7b3 5f            	clrw	x
5442  c7b4 7b01          	ld	a,(OFST+0,sp)
5443  c7b6 97            	ld	xl,a
5444  c7b7 d6401f        	ld	a,(_stored_netmask,x)
5445  c7ba d70137        	ld	(_Pending_netmask,x),a
5446                     ; 1637   for (i=0; i<4; i++) {
5448  c7bd 0c01          	inc	(OFST+0,sp)
5452  c7bf 7b01          	ld	a,(OFST+0,sp)
5453  c7c1 a104          	cp	a,#4
5454  c7c3 25dc          	jrult	L3462
5455                     ; 1643   Pending_port = stored_port;
5457  c7c5 ce401d        	ldw	x,_stored_port
5458  c7c8 cf0135        	ldw	_Pending_port,x
5459                     ; 1645   for (i=0; i<20; i++) {
5461  c7cb 4f            	clr	a
5462  c7cc 6b01          	ld	(OFST+0,sp),a
5464  c7ce               L1562:
5465                     ; 1646     Pending_devicename[i] = stored_devicename[i];
5467  c7ce 5f            	clrw	x
5468  c7cf 97            	ld	xl,a
5469  c7d0 d64000        	ld	a,(_stored_devicename,x)
5470  c7d3 d70121        	ld	(_Pending_devicename,x),a
5471                     ; 1645   for (i=0; i<20; i++) {
5473  c7d6 0c01          	inc	(OFST+0,sp)
5477  c7d8 7b01          	ld	a,(OFST+0,sp)
5478  c7da a114          	cp	a,#20
5479  c7dc 25f0          	jrult	L1562
5480                     ; 1649   for (i=0; i<6; i++) {
5482  c7de 4f            	clr	a
5483  c7df 6b01          	ld	(OFST+0,sp),a
5485  c7e1               L7562:
5486                     ; 1650     Pending_config_settings[i] = stored_config_settings[i];
5488  c7e1 5f            	clrw	x
5489  c7e2 97            	ld	xl,a
5490  c7e3 d6404c        	ld	a,(_stored_config_settings,x)
5491  c7e6 d7011b        	ld	(_Pending_config_settings,x),a
5492                     ; 1651     Pending_uip_ethaddr_oct[i] = stored_uip_ethaddr_oct[i];
5494  c7e9 5f            	clrw	x
5495  c7ea 7b01          	ld	a,(OFST+0,sp)
5496  c7ec 97            	ld	xl,a
5497  c7ed d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5498  c7f0 d70115        	ld	(_Pending_uip_ethaddr_oct,x),a
5499                     ; 1649   for (i=0; i<6; i++) {
5501  c7f3 0c01          	inc	(OFST+0,sp)
5505  c7f5 7b01          	ld	a,(OFST+0,sp)
5506  c7f7 a106          	cp	a,#6
5507  c7f9 25e6          	jrult	L7562
5508                     ; 1655   for (i=0; i<4; i++) {
5510  c7fb 4f            	clr	a
5511  c7fc 6b01          	ld	(OFST+0,sp),a
5513  c7fe               L5662:
5514                     ; 1656     Pending_mqttserveraddr[i] = stored_mqttserveraddr[i];
5516  c7fe 5f            	clrw	x
5517  c7ff 97            	ld	xl,a
5518  c800 d64031        	ld	a,(_stored_mqttserveraddr,x)
5519  c803 d7015b        	ld	(_Pending_mqttserveraddr,x),a
5520                     ; 1655   for (i=0; i<4; i++) {
5522  c806 0c01          	inc	(OFST+0,sp)
5526  c808 7b01          	ld	a,(OFST+0,sp)
5527  c80a a104          	cp	a,#4
5528  c80c 25f0          	jrult	L5662
5529                     ; 1658   Pending_mqttport = stored_mqttport;
5531  c80e ce402f        	ldw	x,_stored_mqttport
5532  c811 cf0159        	ldw	_Pending_mqttport,x
5533                     ; 1659   for (i=0; i<11; i++) {
5535  c814 4f            	clr	a
5536  c815 6b01          	ld	(OFST+0,sp),a
5538  c817               L3762:
5539                     ; 1660     Pending_mqtt_username[i] = stored_mqtt_username[i];
5541  c817 5f            	clrw	x
5542  c818 97            	ld	xl,a
5543  c819 d64035        	ld	a,(_stored_mqtt_username,x)
5544  c81c d7014e        	ld	(_Pending_mqtt_username,x),a
5545                     ; 1661     Pending_mqtt_password[i] = stored_mqtt_password[i];
5547  c81f 5f            	clrw	x
5548  c820 7b01          	ld	a,(OFST+0,sp)
5549  c822 97            	ld	xl,a
5550  c823 d64040        	ld	a,(_stored_mqtt_password,x)
5551  c826 d70143        	ld	(_Pending_mqtt_password,x),a
5552                     ; 1659   for (i=0; i<11; i++) {
5554  c829 0c01          	inc	(OFST+0,sp)
5558  c82b 7b01          	ld	a,(OFST+0,sp)
5559  c82d a10b          	cp	a,#11
5560  c82f 25e6          	jrult	L3762
5561                     ; 1664   strcat(topic_base, stored_devicename);
5563  c831 ae4000        	ldw	x,#_stored_devicename
5564  c834 89            	pushw	x
5565  c835 ae0070        	ldw	x,#_topic_base
5566  c838 cdf5db        	call	_strcat
5568  c83b 85            	popw	x
5569                     ; 1667   topic_base_len = (uint8_t)strlen(topic_base);
5571  c83c ae0070        	ldw	x,#_topic_base
5572  c83f cdf5ef        	call	_strlen
5574  c842 9f            	ld	a,xl
5575  c843 c7006f        	ld	_topic_base_len,a
5576                     ; 1671   update_mac_string();
5578  c846 cdc84b        	call	_update_mac_string
5580                     ; 1673 }
5583  c849 84            	pop	a
5584  c84a 81            	ret	
5627                     ; 1676 void update_mac_string(void) {
5628                     .text:	section	.text,new
5629  c84b               _update_mac_string:
5631  c84b 89            	pushw	x
5632       00000002      OFST:	set	2
5635                     ; 1682   i = 5;
5637  c84c a605          	ld	a,#5
5638  c84e 6b01          	ld	(OFST-1,sp),a
5640                     ; 1683   j = 0;
5642  c850 0f02          	clr	(OFST+0,sp)
5644  c852               L7172:
5645                     ; 1685     emb_itoa(stored_uip_ethaddr_oct[i], OctetArray, 16, 2);
5647  c852 4b02          	push	#2
5648  c854 4b10          	push	#16
5649  c856 ae005c        	ldw	x,#_OctetArray
5650  c859 89            	pushw	x
5651  c85a 7b05          	ld	a,(OFST+3,sp)
5652  c85c 5f            	clrw	x
5653  c85d 97            	ld	xl,a
5654  c85e d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5655  c861 b703          	ld	c_lreg+3,a
5656  c863 3f02          	clr	c_lreg+2
5657  c865 3f01          	clr	c_lreg+1
5658  c867 3f00          	clr	c_lreg
5659  c869 be02          	ldw	x,c_lreg+2
5660  c86b 89            	pushw	x
5661  c86c be00          	ldw	x,c_lreg
5662  c86e 89            	pushw	x
5663  c86f cda47f        	call	_emb_itoa
5665  c872 5b08          	addw	sp,#8
5666                     ; 1686     mac_string[j++] = OctetArray[0];
5668  c874 7b02          	ld	a,(OFST+0,sp)
5669  c876 0c02          	inc	(OFST+0,sp)
5671  c878 5f            	clrw	x
5672  c879 97            	ld	xl,a
5673  c87a c6005c        	ld	a,_OctetArray
5674  c87d d70108        	ld	(_mac_string,x),a
5675                     ; 1687     mac_string[j++] = OctetArray[1];
5677  c880 7b02          	ld	a,(OFST+0,sp)
5678  c882 0c02          	inc	(OFST+0,sp)
5680  c884 5f            	clrw	x
5681  c885 97            	ld	xl,a
5682  c886 c6005d        	ld	a,_OctetArray+1
5683  c889 d70108        	ld	(_mac_string,x),a
5684                     ; 1688     i--;
5686  c88c 0a01          	dec	(OFST-1,sp)
5688                     ; 1684   while (j<12) {
5690  c88e 7b02          	ld	a,(OFST+0,sp)
5691  c890 a10c          	cp	a,#12
5692  c892 25be          	jrult	L7172
5693                     ; 1690   mac_string[12] = '\0';
5695  c894 725f0114      	clr	_mac_string+12
5696                     ; 1691 }
5699  c898 85            	popw	x
5700  c899 81            	ret	
5778                     ; 1694 void check_runtime_changes(void)
5778                     ; 1695 {
5779                     .text:	section	.text,new
5780  c89a               _check_runtime_changes:
5782  c89a 88            	push	a
5783       00000001      OFST:	set	1
5786                     ; 1708   read_input_registers();
5788  c89b cdcd1d        	call	_read_input_registers
5790                     ; 1710   if (parse_complete == 1 || mqtt_parse_complete == 1) {
5792  c89e c60102        	ld	a,_parse_complete
5793  c8a1 4a            	dec	a
5794  c8a2 2706          	jreq	L3472
5796  c8a4 c60101        	ld	a,_mqtt_parse_complete
5797  c8a7 4a            	dec	a
5798  c8a8 2624          	jrne	L1472
5799  c8aa               L3472:
5800                     ; 1734     if (stored_IO_8to1 != IO_8to1) {
5802  c8aa c64014        	ld	a,_stored_IO_8to1
5803  c8ad c10169        	cp	a,_IO_8to1
5804  c8b0 2713          	jreq	L5472
5805                     ; 1738       if (stored_config_settings[2] == '2') {
5807  c8b2 c6404e        	ld	a,_stored_config_settings+2
5808  c8b5 a132          	cp	a,#50
5809  c8b7 2609          	jrne	L7472
5810                     ; 1739         stored_IO_8to1 = IO_8to1;
5812  c8b9 c60169        	ld	a,_IO_8to1
5813  c8bc ae4014        	ldw	x,#_stored_IO_8to1
5814  c8bf cdf61f        	call	c_eewrc
5816  c8c2               L7472:
5817                     ; 1743       write_output_registers();
5819  c8c2 cdcdb5        	call	_write_output_registers
5821  c8c5               L5472:
5822                     ; 1750     if (mqtt_parse_complete == 1) {
5824  c8c5 c60101        	ld	a,_mqtt_parse_complete
5825  c8c8 4a            	dec	a
5826  c8c9 2603          	jrne	L1472
5827                     ; 1752       mqtt_parse_complete = 0;
5829  c8cb c70101        	ld	_mqtt_parse_complete,a
5830  c8ce               L1472:
5831                     ; 1757   if (parse_complete == 1) {
5833  c8ce c60102        	ld	a,_parse_complete
5834  c8d1 4a            	dec	a
5835  c8d2 2703cccb5f    	jrne	L3572
5836                     ; 1798     if ((Pending_config_settings[0] != stored_config_settings[0])
5836                     ; 1799      || (stored_IO_8to1 != IO_8to1)) {
5838  c8d7 c6404c        	ld	a,_stored_config_settings
5839  c8da c1011b        	cp	a,_Pending_config_settings
5840  c8dd 2608          	jrne	L7572
5842  c8df c64014        	ld	a,_stored_IO_8to1
5843  c8e2 c10169        	cp	a,_IO_8to1
5844  c8e5 272d          	jreq	L5572
5845  c8e7               L7572:
5846                     ; 1802       stored_config_settings[0] = Pending_config_settings[0];
5848  c8e7 c6011b        	ld	a,_Pending_config_settings
5849  c8ea ae404c        	ldw	x,#_stored_config_settings
5850  c8ed cdf61f        	call	c_eewrc
5852                     ; 1805       if (stored_config_settings[0] == '0') invert_output = 0x00;
5854  c8f0 c6404c        	ld	a,_stored_config_settings
5855  c8f3 a130          	cp	a,#48
5856  c8f5 2606          	jrne	L1672
5859  c8f7 725f0162      	clr	_invert_output
5861  c8fb 2004          	jra	L3672
5862  c8fd               L1672:
5863                     ; 1806       else invert_output = 0xff;
5865  c8fd 35ff0162      	mov	_invert_output,#255
5866  c901               L3672:
5867                     ; 1810       if (stored_config_settings[2] == '2') {
5869  c901 c6404e        	ld	a,_stored_config_settings+2
5870  c904 a132          	cp	a,#50
5871  c906 2609          	jrne	L5672
5872                     ; 1811         stored_IO_8to1 = IO_8to1;
5874  c908 c60169        	ld	a,_IO_8to1
5875  c90b ae4014        	ldw	x,#_stored_IO_8to1
5876  c90e cdf61f        	call	c_eewrc
5878  c911               L5672:
5879                     ; 1815       write_output_registers();
5881  c911 cdcdb5        	call	_write_output_registers
5883  c914               L5572:
5884                     ; 1819     if (Pending_config_settings[1] != stored_config_settings[1]) {
5886  c914 c6404d        	ld	a,_stored_config_settings+1
5887  c917 c1011c        	cp	a,_Pending_config_settings+1
5888  c91a 271e          	jreq	L7672
5889                     ; 1821       stored_config_settings[1] = Pending_config_settings[1];
5891  c91c c6011c        	ld	a,_Pending_config_settings+1
5892  c91f ae404d        	ldw	x,#_stored_config_settings+1
5893  c922 cdf61f        	call	c_eewrc
5895                     ; 1824       if (stored_config_settings[1] == '0') invert_input = 0x00;
5897  c925 c6404d        	ld	a,_stored_config_settings+1
5898  c928 a130          	cp	a,#48
5899  c92a 2606          	jrne	L1772
5902  c92c 725f0161      	clr	_invert_input
5904  c930 2004          	jra	L3772
5905  c932               L1772:
5906                     ; 1825       else invert_input = 0xff;
5908  c932 35ff0161      	mov	_invert_input,#255
5909  c936               L3772:
5910                     ; 1829       restart_request = 1;
5912  c936 35010105      	mov	_restart_request,#1
5913  c93a               L7672:
5914                     ; 1863     if (Pending_config_settings[2] != stored_config_settings[2]) {
5916  c93a c6404e        	ld	a,_stored_config_settings+2
5917  c93d c1011d        	cp	a,_Pending_config_settings+2
5918  c940 2709          	jreq	L5772
5919                     ; 1865       stored_config_settings[2] = Pending_config_settings[2];
5921  c942 c6011d        	ld	a,_Pending_config_settings+2
5922  c945 ae404e        	ldw	x,#_stored_config_settings+2
5923  c948 cdf61f        	call	c_eewrc
5925  c94b               L5772:
5926                     ; 1869     if (Pending_config_settings[3] != stored_config_settings[3]) {
5928  c94b c6404f        	ld	a,_stored_config_settings+3
5929  c94e c1011e        	cp	a,_Pending_config_settings+3
5930  c951 270d          	jreq	L7772
5931                     ; 1872       stored_config_settings[3] = Pending_config_settings[3];
5933  c953 c6011e        	ld	a,_Pending_config_settings+3
5934  c956 ae404f        	ldw	x,#_stored_config_settings+3
5935  c959 cdf61f        	call	c_eewrc
5937                     ; 1874       user_reboot_request = 1;
5939  c95c 35010106      	mov	_user_reboot_request,#1
5940  c960               L7772:
5941                     ; 1877     stored_config_settings[4] = Pending_config_settings[4];
5943  c960 c6011f        	ld	a,_Pending_config_settings+4
5944  c963 ae4050        	ldw	x,#_stored_config_settings+4
5945  c966 cdf61f        	call	c_eewrc
5947                     ; 1878     stored_config_settings[5] = Pending_config_settings[5];
5949  c969 c60120        	ld	a,_Pending_config_settings+5
5950  c96c ae4051        	ldw	x,#_stored_config_settings+5
5951  c96f cdf61f        	call	c_eewrc
5953                     ; 1881     if (stored_hostaddr[3] != Pending_hostaddr[3] ||
5953                     ; 1882         stored_hostaddr[2] != Pending_hostaddr[2] ||
5953                     ; 1883         stored_hostaddr[1] != Pending_hostaddr[1] ||
5953                     ; 1884         stored_hostaddr[0] != Pending_hostaddr[0]) {
5955  c972 c6402a        	ld	a,_stored_hostaddr+3
5956  c975 c10142        	cp	a,_Pending_hostaddr+3
5957  c978 2618          	jrne	L3003
5959  c97a c64029        	ld	a,_stored_hostaddr+2
5960  c97d c10141        	cp	a,_Pending_hostaddr+2
5961  c980 2610          	jrne	L3003
5963  c982 c64028        	ld	a,_stored_hostaddr+1
5964  c985 c10140        	cp	a,_Pending_hostaddr+1
5965  c988 2608          	jrne	L3003
5967  c98a c64027        	ld	a,_stored_hostaddr
5968  c98d c1013f        	cp	a,_Pending_hostaddr
5969  c990 2713          	jreq	L1003
5970  c992               L3003:
5971                     ; 1886       for (i=0; i<4; i++) stored_hostaddr[i] = Pending_hostaddr[i];
5973  c992 4f            	clr	a
5974  c993 6b01          	ld	(OFST+0,sp),a
5976  c995               L1103:
5979  c995 5f            	clrw	x
5980  c996 97            	ld	xl,a
5981  c997 d6013f        	ld	a,(_Pending_hostaddr,x)
5982  c99a d74027        	ld	(_stored_hostaddr,x),a
5985  c99d 0c01          	inc	(OFST+0,sp)
5989  c99f 7b01          	ld	a,(OFST+0,sp)
5990  c9a1 a104          	cp	a,#4
5991  c9a3 25f0          	jrult	L1103
5992  c9a5               L1003:
5993                     ; 1890     if (stored_draddr[3] != Pending_draddr[3] ||
5993                     ; 1891         stored_draddr[2] != Pending_draddr[2] ||
5993                     ; 1892         stored_draddr[1] != Pending_draddr[1] ||
5993                     ; 1893         stored_draddr[0] != Pending_draddr[0]) {
5995  c9a5 c64026        	ld	a,_stored_draddr+3
5996  c9a8 c1013e        	cp	a,_Pending_draddr+3
5997  c9ab 2618          	jrne	L1203
5999  c9ad c64025        	ld	a,_stored_draddr+2
6000  c9b0 c1013d        	cp	a,_Pending_draddr+2
6001  c9b3 2610          	jrne	L1203
6003  c9b5 c64024        	ld	a,_stored_draddr+1
6004  c9b8 c1013c        	cp	a,_Pending_draddr+1
6005  c9bb 2608          	jrne	L1203
6007  c9bd c64023        	ld	a,_stored_draddr
6008  c9c0 c1013b        	cp	a,_Pending_draddr
6009  c9c3 2717          	jreq	L7103
6010  c9c5               L1203:
6011                     ; 1895       for (i=0; i<4; i++) stored_draddr[i] = Pending_draddr[i];
6013  c9c5 4f            	clr	a
6014  c9c6 6b01          	ld	(OFST+0,sp),a
6016  c9c8               L7203:
6019  c9c8 5f            	clrw	x
6020  c9c9 97            	ld	xl,a
6021  c9ca d6013b        	ld	a,(_Pending_draddr,x)
6022  c9cd d74023        	ld	(_stored_draddr,x),a
6025  c9d0 0c01          	inc	(OFST+0,sp)
6029  c9d2 7b01          	ld	a,(OFST+0,sp)
6030  c9d4 a104          	cp	a,#4
6031  c9d6 25f0          	jrult	L7203
6032                     ; 1896       restart_request = 1;
6034  c9d8 35010105      	mov	_restart_request,#1
6035  c9dc               L7103:
6036                     ; 1900     if (stored_netmask[3] != Pending_netmask[3] ||
6036                     ; 1901         stored_netmask[2] != Pending_netmask[2] ||
6036                     ; 1902         stored_netmask[1] != Pending_netmask[1] ||
6036                     ; 1903         stored_netmask[0] != Pending_netmask[0]) {
6038  c9dc c64022        	ld	a,_stored_netmask+3
6039  c9df c1013a        	cp	a,_Pending_netmask+3
6040  c9e2 2618          	jrne	L7303
6042  c9e4 c64021        	ld	a,_stored_netmask+2
6043  c9e7 c10139        	cp	a,_Pending_netmask+2
6044  c9ea 2610          	jrne	L7303
6046  c9ec c64020        	ld	a,_stored_netmask+1
6047  c9ef c10138        	cp	a,_Pending_netmask+1
6048  c9f2 2608          	jrne	L7303
6050  c9f4 c6401f        	ld	a,_stored_netmask
6051  c9f7 c10137        	cp	a,_Pending_netmask
6052  c9fa 2717          	jreq	L5303
6053  c9fc               L7303:
6054                     ; 1905       for (i=0; i<4; i++) stored_netmask[i] = Pending_netmask[i];
6056  c9fc 4f            	clr	a
6057  c9fd 6b01          	ld	(OFST+0,sp),a
6059  c9ff               L5403:
6062  c9ff 5f            	clrw	x
6063  ca00 97            	ld	xl,a
6064  ca01 d60137        	ld	a,(_Pending_netmask,x)
6065  ca04 d7401f        	ld	(_stored_netmask,x),a
6068  ca07 0c01          	inc	(OFST+0,sp)
6072  ca09 7b01          	ld	a,(OFST+0,sp)
6073  ca0b a104          	cp	a,#4
6074  ca0d 25f0          	jrult	L5403
6075                     ; 1906       restart_request = 1;
6077  ca0f 35010105      	mov	_restart_request,#1
6078  ca13               L5303:
6079                     ; 1910     if (stored_port != Pending_port) {
6081  ca13 ce401d        	ldw	x,_stored_port
6082  ca16 c30135        	cpw	x,_Pending_port
6083  ca19 270f          	jreq	L3503
6084                     ; 1912       stored_port = Pending_port;
6086  ca1b ce0135        	ldw	x,_Pending_port
6087  ca1e 89            	pushw	x
6088  ca1f ae401d        	ldw	x,#_stored_port
6089  ca22 cdf609        	call	c_eewrw
6091  ca25 35010105      	mov	_restart_request,#1
6092  ca29 85            	popw	x
6093                     ; 1914       restart_request = 1;
6095  ca2a               L3503:
6096                     ; 1918     for(i=0; i<20; i++) {
6098  ca2a 4f            	clr	a
6099  ca2b 6b01          	ld	(OFST+0,sp),a
6101  ca2d               L5503:
6102                     ; 1919       if (stored_devicename[i] != Pending_devicename[i]) {
6104  ca2d 5f            	clrw	x
6105  ca2e 97            	ld	xl,a
6106  ca2f 905f          	clrw	y
6107  ca31 9097          	ld	yl,a
6108  ca33 90d64000      	ld	a,(_stored_devicename,y)
6109  ca37 d10121        	cp	a,(_Pending_devicename,x)
6110  ca3a 270e          	jreq	L3603
6111                     ; 1920         stored_devicename[i] = Pending_devicename[i];
6113  ca3c 7b01          	ld	a,(OFST+0,sp)
6114  ca3e 5f            	clrw	x
6115  ca3f 97            	ld	xl,a
6116  ca40 d60121        	ld	a,(_Pending_devicename,x)
6117  ca43 d74000        	ld	(_stored_devicename,x),a
6118                     ; 1926         restart_request = 1;
6120  ca46 35010105      	mov	_restart_request,#1
6121  ca4a               L3603:
6122                     ; 1918     for(i=0; i<20; i++) {
6124  ca4a 0c01          	inc	(OFST+0,sp)
6128  ca4c 7b01          	ld	a,(OFST+0,sp)
6129  ca4e a114          	cp	a,#20
6130  ca50 25db          	jrult	L5503
6131                     ; 1933     strcpy(topic_base, devicetype);
6133  ca52 ae0070        	ldw	x,#_topic_base
6134  ca55 90ae9e43      	ldw	y,#L5261_devicetype
6135  ca59               L403:
6136  ca59 90f6          	ld	a,(y)
6137  ca5b 905c          	incw	y
6138  ca5d f7            	ld	(x),a
6139  ca5e 5c            	incw	x
6140  ca5f 4d            	tnz	a
6141  ca60 26f7          	jrne	L403
6142                     ; 1934     strcat(topic_base, stored_devicename);
6144  ca62 ae4000        	ldw	x,#_stored_devicename
6145  ca65 89            	pushw	x
6146  ca66 ae0070        	ldw	x,#_topic_base
6147  ca69 cdf5db        	call	_strcat
6149  ca6c 85            	popw	x
6150                     ; 1935     topic_base_len = (uint8_t)strlen(topic_base);
6152  ca6d ae0070        	ldw	x,#_topic_base
6153  ca70 cdf5ef        	call	_strlen
6155  ca73 9f            	ld	a,xl
6156  ca74 c7006f        	ld	_topic_base_len,a
6157                     ; 1938     if (stored_mqttserveraddr[3] != Pending_mqttserveraddr[3] ||
6157                     ; 1939         stored_mqttserveraddr[2] != Pending_mqttserveraddr[2] ||
6157                     ; 1940         stored_mqttserveraddr[1] != Pending_mqttserveraddr[1] ||
6157                     ; 1941         stored_mqttserveraddr[0] != Pending_mqttserveraddr[0]) {
6159  ca77 c64034        	ld	a,_stored_mqttserveraddr+3
6160  ca7a c1015e        	cp	a,_Pending_mqttserveraddr+3
6161  ca7d 2618          	jrne	L7603
6163  ca7f c64033        	ld	a,_stored_mqttserveraddr+2
6164  ca82 c1015d        	cp	a,_Pending_mqttserveraddr+2
6165  ca85 2610          	jrne	L7603
6167  ca87 c64032        	ld	a,_stored_mqttserveraddr+1
6168  ca8a c1015c        	cp	a,_Pending_mqttserveraddr+1
6169  ca8d 2608          	jrne	L7603
6171  ca8f c64031        	ld	a,_stored_mqttserveraddr
6172  ca92 c1015b        	cp	a,_Pending_mqttserveraddr
6173  ca95 2717          	jreq	L5603
6174  ca97               L7603:
6175                     ; 1943       for (i=0; i<4; i++) stored_mqttserveraddr[i] = Pending_mqttserveraddr[i];
6177  ca97 4f            	clr	a
6178  ca98 6b01          	ld	(OFST+0,sp),a
6180  ca9a               L5703:
6183  ca9a 5f            	clrw	x
6184  ca9b 97            	ld	xl,a
6185  ca9c d6015b        	ld	a,(_Pending_mqttserveraddr,x)
6186  ca9f d74031        	ld	(_stored_mqttserveraddr,x),a
6189  caa2 0c01          	inc	(OFST+0,sp)
6193  caa4 7b01          	ld	a,(OFST+0,sp)
6194  caa6 a104          	cp	a,#4
6195  caa8 25f0          	jrult	L5703
6196                     ; 1945       restart_request = 1;
6198  caaa 35010105      	mov	_restart_request,#1
6199  caae               L5603:
6200                     ; 1949     if (stored_mqttport != Pending_mqttport) {
6202  caae ce402f        	ldw	x,_stored_mqttport
6203  cab1 c30159        	cpw	x,_Pending_mqttport
6204  cab4 270f          	jreq	L3013
6205                     ; 1951       stored_mqttport = Pending_mqttport;
6207  cab6 ce0159        	ldw	x,_Pending_mqttport
6208  cab9 89            	pushw	x
6209  caba ae402f        	ldw	x,#_stored_mqttport
6210  cabd cdf609        	call	c_eewrw
6212  cac0 35010105      	mov	_restart_request,#1
6213  cac4 85            	popw	x
6214                     ; 1953       restart_request = 1;
6216  cac5               L3013:
6217                     ; 1957     for(i=0; i<11; i++) {
6219  cac5 4f            	clr	a
6220  cac6 6b01          	ld	(OFST+0,sp),a
6222  cac8               L5013:
6223                     ; 1958       if (stored_mqtt_username[i] != Pending_mqtt_username[i]) {
6225  cac8 5f            	clrw	x
6226  cac9 97            	ld	xl,a
6227  caca 905f          	clrw	y
6228  cacc 9097          	ld	yl,a
6229  cace 90d64035      	ld	a,(_stored_mqtt_username,y)
6230  cad2 d1014e        	cp	a,(_Pending_mqtt_username,x)
6231  cad5 270e          	jreq	L3113
6232                     ; 1959         stored_mqtt_username[i] = Pending_mqtt_username[i];
6234  cad7 7b01          	ld	a,(OFST+0,sp)
6235  cad9 5f            	clrw	x
6236  cada 97            	ld	xl,a
6237  cadb d6014e        	ld	a,(_Pending_mqtt_username,x)
6238  cade d74035        	ld	(_stored_mqtt_username,x),a
6239                     ; 1961         restart_request = 1;
6241  cae1 35010105      	mov	_restart_request,#1
6242  cae5               L3113:
6243                     ; 1957     for(i=0; i<11; i++) {
6245  cae5 0c01          	inc	(OFST+0,sp)
6249  cae7 7b01          	ld	a,(OFST+0,sp)
6250  cae9 a10b          	cp	a,#11
6251  caeb 25db          	jrult	L5013
6252                     ; 1966     for(i=0; i<11; i++) {
6254  caed 4f            	clr	a
6255  caee 6b01          	ld	(OFST+0,sp),a
6257  caf0               L5113:
6258                     ; 1967       if (stored_mqtt_password[i] != Pending_mqtt_password[i]) {
6260  caf0 5f            	clrw	x
6261  caf1 97            	ld	xl,a
6262  caf2 905f          	clrw	y
6263  caf4 9097          	ld	yl,a
6264  caf6 90d64040      	ld	a,(_stored_mqtt_password,y)
6265  cafa d10143        	cp	a,(_Pending_mqtt_password,x)
6266  cafd 270e          	jreq	L3213
6267                     ; 1968         stored_mqtt_password[i] = Pending_mqtt_password[i];
6269  caff 7b01          	ld	a,(OFST+0,sp)
6270  cb01 5f            	clrw	x
6271  cb02 97            	ld	xl,a
6272  cb03 d60143        	ld	a,(_Pending_mqtt_password,x)
6273  cb06 d74040        	ld	(_stored_mqtt_password,x),a
6274                     ; 1970         restart_request = 1;
6276  cb09 35010105      	mov	_restart_request,#1
6277  cb0d               L3213:
6278                     ; 1966     for(i=0; i<11; i++) {
6280  cb0d 0c01          	inc	(OFST+0,sp)
6284  cb0f 7b01          	ld	a,(OFST+0,sp)
6285  cb11 a10b          	cp	a,#11
6286  cb13 25db          	jrult	L5113
6287                     ; 1976     if (stored_uip_ethaddr_oct[0] != Pending_uip_ethaddr_oct[0] ||
6287                     ; 1977       stored_uip_ethaddr_oct[1] != Pending_uip_ethaddr_oct[1] ||
6287                     ; 1978       stored_uip_ethaddr_oct[2] != Pending_uip_ethaddr_oct[2] ||
6287                     ; 1979       stored_uip_ethaddr_oct[3] != Pending_uip_ethaddr_oct[3] ||
6287                     ; 1980       stored_uip_ethaddr_oct[4] != Pending_uip_ethaddr_oct[4] ||
6287                     ; 1981       stored_uip_ethaddr_oct[5] != Pending_uip_ethaddr_oct[5]) {
6289  cb15 c64017        	ld	a,_stored_uip_ethaddr_oct
6290  cb18 c10115        	cp	a,_Pending_uip_ethaddr_oct
6291  cb1b 2628          	jrne	L7213
6293  cb1d c64018        	ld	a,_stored_uip_ethaddr_oct+1
6294  cb20 c10116        	cp	a,_Pending_uip_ethaddr_oct+1
6295  cb23 2620          	jrne	L7213
6297  cb25 c64019        	ld	a,_stored_uip_ethaddr_oct+2
6298  cb28 c10117        	cp	a,_Pending_uip_ethaddr_oct+2
6299  cb2b 2618          	jrne	L7213
6301  cb2d c6401a        	ld	a,_stored_uip_ethaddr_oct+3
6302  cb30 c10118        	cp	a,_Pending_uip_ethaddr_oct+3
6303  cb33 2610          	jrne	L7213
6305  cb35 c6401b        	ld	a,_stored_uip_ethaddr_oct+4
6306  cb38 c10119        	cp	a,_Pending_uip_ethaddr_oct+4
6307  cb3b 2608          	jrne	L7213
6309  cb3d c6401c        	ld	a,_stored_uip_ethaddr_oct+5
6310  cb40 c1011a        	cp	a,_Pending_uip_ethaddr_oct+5
6311  cb43 271a          	jreq	L3572
6312  cb45               L7213:
6313                     ; 1983       for (i=0; i<6; i++) stored_uip_ethaddr_oct[i] = Pending_uip_ethaddr_oct[i];
6315  cb45 4f            	clr	a
6316  cb46 6b01          	ld	(OFST+0,sp),a
6318  cb48               L1413:
6321  cb48 5f            	clrw	x
6322  cb49 97            	ld	xl,a
6323  cb4a d60115        	ld	a,(_Pending_uip_ethaddr_oct,x)
6324  cb4d d74017        	ld	(_stored_uip_ethaddr_oct,x),a
6327  cb50 0c01          	inc	(OFST+0,sp)
6331  cb52 7b01          	ld	a,(OFST+0,sp)
6332  cb54 a106          	cp	a,#6
6333  cb56 25f0          	jrult	L1413
6334                     ; 1985       update_mac_string();
6336  cb58 cdc84b        	call	_update_mac_string
6338                     ; 1987       restart_request = 1;
6340  cb5b 35010105      	mov	_restart_request,#1
6341  cb5f               L3572:
6342                     ; 1991   if (restart_request == 1) {
6344  cb5f c60105        	ld	a,_restart_request
6345  cb62 4a            	dec	a
6346  cb63 2609          	jrne	L7413
6347                     ; 1994     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6349  cb65 c60104        	ld	a,_restart_reboot_step
6350  cb68 2604          	jrne	L7413
6351                     ; 1995       restart_reboot_step = RESTART_REBOOT_ARM;
6353  cb6a 35010104      	mov	_restart_reboot_step,#1
6354  cb6e               L7413:
6355                     ; 1999   if (user_reboot_request == 1) {
6357  cb6e c60106        	ld	a,_user_reboot_request
6358  cb71 4a            	dec	a
6359  cb72 2611          	jrne	L3513
6360                     ; 2002     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6362  cb74 725d0104      	tnz	_restart_reboot_step
6363  cb78 260b          	jrne	L3513
6364                     ; 2003       restart_reboot_step = RESTART_REBOOT_ARM;
6366  cb7a 35010104      	mov	_restart_reboot_step,#1
6367                     ; 2004       user_reboot_request = 0;
6369  cb7e c70106        	ld	_user_reboot_request,a
6370                     ; 2005       reboot_request = 1;
6372  cb81 35010107      	mov	_reboot_request,#1
6373  cb85               L3513:
6374                     ; 2014   parse_complete = 0; // Reset parse_complete for future changes
6376  cb85 725f0102      	clr	_parse_complete
6377                     ; 2017   if (stack_limit1 != 0xaa || stack_limit2 != 0x55) {
6379  cb89 c605ff        	ld	a,_stack_limit1
6380  cb8c a1aa          	cp	a,#170
6381  cb8e 2607          	jrne	L1613
6383  cb90 c605fe        	ld	a,_stack_limit2
6384  cb93 a155          	cp	a,#85
6385  cb95 270a          	jreq	L7513
6386  cb97               L1613:
6387                     ; 2018     stack_error = 1;
6389  cb97 3501015f      	mov	_stack_error,#1
6390                     ; 2019     fastflash();
6392  cb9b cdcec5        	call	_fastflash
6394                     ; 2020     fastflash();
6396  cb9e cdcec5        	call	_fastflash
6398  cba1               L7513:
6399                     ; 2033 }
6402  cba1 84            	pop	a
6403  cba2 81            	ret	
6438                     ; 2036 void check_restart_reboot(void)
6438                     ; 2037 {
6439                     .text:	section	.text,new
6440  cba3               _check_restart_reboot:
6444                     ; 2043   if (restart_request == 1 || reboot_request == 1) {
6446  cba3 c60105        	ld	a,_restart_request
6447  cba6 4a            	dec	a
6448  cba7 2709          	jreq	L5713
6450  cba9 c60107        	ld	a,_reboot_request
6451  cbac 4a            	dec	a
6452  cbad 2703cccc77    	jrne	L3713
6453  cbb2               L5713:
6454                     ; 2054     if (restart_reboot_step == RESTART_REBOOT_ARM) {
6456  cbb2 c60104        	ld	a,_restart_reboot_step
6457  cbb5 a101          	cp	a,#1
6458  cbb7 2611          	jrne	L7713
6459                     ; 2059       time_mark2 = second_counter;
6461  cbb9 ce029a        	ldw	x,_second_counter+2
6462  cbbc cf00f9        	ldw	_time_mark2+2,x
6463  cbbf ce0298        	ldw	x,_second_counter
6464  cbc2 cf00f7        	ldw	_time_mark2,x
6465                     ; 2060       restart_reboot_step = RESTART_REBOOT_ARM2;
6467  cbc5 35020104      	mov	_restart_reboot_step,#2
6470  cbc9 81            	ret	
6471  cbca               L7713:
6472                     ; 2063     else if (restart_reboot_step == RESTART_REBOOT_ARM2) {
6474  cbca a102          	cp	a,#2
6475  cbcc 2613          	jrne	L3023
6476                     ; 2069       if (second_counter > time_mark2 + 0 ) {
6478  cbce ae0298        	ldw	x,#_second_counter
6479  cbd1 cdf87c        	call	c_ltor
6481  cbd4 ae00f7        	ldw	x,#_time_mark2
6482  cbd7 cdf811        	call	c_lcmp
6484  cbda 23d3          	jrule	L3713
6485                     ; 2070         restart_reboot_step = RESTART_REBOOT_DISCONNECT;
6487  cbdc 35030104      	mov	_restart_reboot_step,#3
6489  cbe0 81            	ret	
6490  cbe1               L3023:
6491                     ; 2075     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECT) {
6493  cbe1 a103          	cp	a,#3
6494  cbe3 261e          	jrne	L1123
6495                     ; 2076       restart_reboot_step = RESTART_REBOOT_DISCONNECTWAIT;
6497  cbe5 35040104      	mov	_restart_reboot_step,#4
6498                     ; 2077       if (mqtt_start == MQTT_START_COMPLETE) {
6500  cbe9 c600a4        	ld	a,_mqtt_start
6501  cbec a114          	cp	a,#20
6502  cbee 2606          	jrne	L3123
6503                     ; 2079         mqtt_disconnect(&mqttclient);
6505  cbf0 ae00c1        	ldw	x,#_mqttclient
6506  cbf3 cdd3ca        	call	_mqtt_disconnect
6508  cbf6               L3123:
6509                     ; 2082       time_mark2 = second_counter;
6511  cbf6 ce029a        	ldw	x,_second_counter+2
6512  cbf9 cf00f9        	ldw	_time_mark2+2,x
6513  cbfc ce0298        	ldw	x,_second_counter
6514  cbff cf00f7        	ldw	_time_mark2,x
6517  cc02 81            	ret	
6518  cc03               L1123:
6519                     ; 2085     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECTWAIT) {
6521  cc03 a104          	cp	a,#4
6522  cc05 2618          	jrne	L7123
6523                     ; 2086       if (second_counter > time_mark2 + 1 ) {
6525  cc07 ae00f7        	ldw	x,#_time_mark2
6526  cc0a cdf87c        	call	c_ltor
6528  cc0d a601          	ld	a,#1
6529  cc0f cdf7e8        	call	c_ladc
6531  cc12 ae0298        	ldw	x,#_second_counter
6532  cc15 cdf811        	call	c_lcmp
6534  cc18 245d          	jruge	L3713
6535                     ; 2089         restart_reboot_step = RESTART_REBOOT_TCPCLOSE;
6537  cc1a 35050104      	mov	_restart_reboot_step,#5
6539  cc1e 81            	ret	
6540  cc1f               L7123:
6541                     ; 2093     else if (restart_reboot_step == RESTART_REBOOT_TCPCLOSE) {
6543  cc1f a105          	cp	a,#5
6544  cc21 2615          	jrne	L5223
6545                     ; 2109       mqtt_close_tcp = 1;
6547  cc23 35010103      	mov	_mqtt_close_tcp,#1
6548                     ; 2111       time_mark2 = second_counter;
6550  cc27 ce029a        	ldw	x,_second_counter+2
6551  cc2a cf00f9        	ldw	_time_mark2+2,x
6552  cc2d ce0298        	ldw	x,_second_counter
6553  cc30 cf00f7        	ldw	_time_mark2,x
6554                     ; 2112       restart_reboot_step = RESTART_REBOOT_TCPWAIT;
6556  cc33 35060104      	mov	_restart_reboot_step,#6
6559  cc37 81            	ret	
6560  cc38               L5223:
6561                     ; 2114     else if (restart_reboot_step == RESTART_REBOOT_TCPWAIT) {
6563  cc38 a106          	cp	a,#6
6564  cc3a 261c          	jrne	L1323
6565                     ; 2119       if (second_counter > time_mark2 + 1) {
6567  cc3c ae00f7        	ldw	x,#_time_mark2
6568  cc3f cdf87c        	call	c_ltor
6570  cc42 a601          	ld	a,#1
6571  cc44 cdf7e8        	call	c_ladc
6573  cc47 ae0298        	ldw	x,#_second_counter
6574  cc4a cdf811        	call	c_lcmp
6576  cc4d 2428          	jruge	L3713
6577                     ; 2120 	mqtt_close_tcp = 0;
6579  cc4f 725f0103      	clr	_mqtt_close_tcp
6580                     ; 2121         restart_reboot_step = RESTART_REBOOT_FINISH;
6582  cc53 35070104      	mov	_restart_reboot_step,#7
6584  cc57 81            	ret	
6585  cc58               L1323:
6586                     ; 2131     else if (restart_reboot_step == RESTART_REBOOT_FINISH) {
6588  cc58 a107          	cp	a,#7
6589  cc5a 261b          	jrne	L3713
6590                     ; 2132       if (reboot_request == 1) {
6592  cc5c c60107        	ld	a,_reboot_request
6593  cc5f 4a            	dec	a
6594  cc60 2606          	jrne	L1423
6595                     ; 2133         restart_reboot_step = RESTART_REBOOT_IDLE;
6597  cc62 c70104        	ld	_restart_reboot_step,a
6598                     ; 2135         reboot();
6600  cc65 cdccf8        	call	_reboot
6602  cc68               L1423:
6603                     ; 2137       if (restart_request == 1) {
6605  cc68 c60105        	ld	a,_restart_request
6606  cc6b 4a            	dec	a
6607  cc6c 2609          	jrne	L3713
6608                     ; 2138 	restart_request = 0;
6610  cc6e c70105        	ld	_restart_request,a
6611                     ; 2139         restart_reboot_step = RESTART_REBOOT_IDLE;
6613  cc71 c70104        	ld	_restart_reboot_step,a
6614                     ; 2141 	restart();
6616  cc74 cdcc78        	call	_restart
6618  cc77               L3713:
6619                     ; 2145 }
6622  cc77 81            	ret	
6675                     ; 2148 void restart(void)
6675                     ; 2149 {
6676                     .text:	section	.text,new
6677  cc78               _restart:
6681                     ; 2163   LEDcontrol(0); // Turn LED off
6683  cc78 4f            	clr	a
6684  cc79 cda40d        	call	_LEDcontrol
6686                     ; 2165   parse_complete = 0;
6688  cc7c 725f0102      	clr	_parse_complete
6689                     ; 2166   reboot_request = 0;
6691  cc80 725f0107      	clr	_reboot_request
6692                     ; 2167   restart_request = 0;
6694  cc84 725f0105      	clr	_restart_request
6695                     ; 2169   time_mark2 = 0;           // Time capture used in reboot
6697  cc88 5f            	clrw	x
6698  cc89 cf00f9        	ldw	_time_mark2+2,x
6699  cc8c cf00f7        	ldw	_time_mark2,x
6700                     ; 2172   mqtt_close_tcp = 0;
6702  cc8f 725f0103      	clr	_mqtt_close_tcp
6703                     ; 2174   mqtt_start = MQTT_START_TCP_CONNECT;
6705  cc93 350100a4      	mov	_mqtt_start,#1
6706                     ; 2175   mqtt_start_status = MQTT_START_NOT_STARTED;
6708  cc97 725f00a3      	clr	_mqtt_start_status
6709                     ; 2176   mqtt_start_ctr1 = 0;
6711  cc9b 725f00a2      	clr	_mqtt_start_ctr1
6712                     ; 2177   mqtt_sanity_ctr = 0;
6714  cc9f 725f00a0      	clr	_mqtt_sanity_ctr
6715                     ; 2178   mqtt_start_retry = 0;
6717  cca3 725f009f      	clr	_mqtt_start_retry
6718                     ; 2179   MQTT_error_status = 0;
6720  cca7 725f0297      	clr	_MQTT_error_status
6721                     ; 2180   mqtt_restart_step = MQTT_RESTART_IDLE;
6723  ccab 725f009c      	clr	_mqtt_restart_step
6724                     ; 2181   strcpy(topic_base, devicetype);
6726  ccaf ae0070        	ldw	x,#_topic_base
6727  ccb2 90ae9e43      	ldw	y,#L5261_devicetype
6728  ccb6               L433:
6729  ccb6 90f6          	ld	a,(y)
6730  ccb8 905c          	incw	y
6731  ccba f7            	ld	(x),a
6732  ccbb 5c            	incw	x
6733  ccbc 4d            	tnz	a
6734  ccbd 26f7          	jrne	L433
6735                     ; 2182   state_request = STATE_REQUEST_IDLE;
6737  ccbf c70160        	ld	_state_request,a
6738                     ; 2185   spi_init();              // Initialize the SPI bit bang interface to the
6740  ccc2 cde3cf        	call	_spi_init
6742                     ; 2187   unlock_eeprom();         // unlock the EEPROM so writes can be performed
6744  ccc5 cdc380        	call	_unlock_eeprom
6746                     ; 2188   check_eeprom_settings(); // Verify EEPROM up to date
6748  ccc8 cdc390        	call	_check_eeprom_settings
6750                     ; 2189   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
6752  cccb cd9fff        	call	_Enc28j60Init
6754                     ; 2190   uip_arp_init();          // Initialize the ARP module
6756  ccce cdf138        	call	_uip_arp_init
6758                     ; 2191   uip_init();              // Initialize uIP
6760  ccd1 cde6d5        	call	_uip_init
6762                     ; 2192   HttpDInit();             // Initialize httpd; sets up listening ports
6764  ccd4 cdac1e        	call	_HttpDInit
6766                     ; 2196   mqtt_init(&mqttclient,
6766                     ; 2197             mqtt_sendbuf,
6766                     ; 2198 	    sizeof(mqtt_sendbuf),
6766                     ; 2199 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
6766                     ; 2200 	    UIP_APPDATA_SIZE,
6766                     ; 2201 	    publish_callback);
6768  ccd7 aec0e8        	ldw	x,#_publish_callback
6769  ccda 89            	pushw	x
6770  ccdb ae01be        	ldw	x,#446
6771  ccde 89            	pushw	x
6772  ccdf ae03a5        	ldw	x,#_uip_buf+54
6773  cce2 89            	pushw	x
6774  cce3 ae00c8        	ldw	x,#200
6775  cce6 89            	pushw	x
6776  cce7 ae016b        	ldw	x,#_mqtt_sendbuf
6777  ccea 89            	pushw	x
6778  cceb ae00c1        	ldw	x,#_mqttclient
6779  ccee cdcf77        	call	_mqtt_init
6781  ccf1 5b0a          	addw	sp,#10
6782                     ; 2204   LEDcontrol(1); // Turn LED on
6784  ccf3 a601          	ld	a,#1
6786                     ; 2207 }
6789  ccf5 cca40d        	jp	_LEDcontrol
6817                     ; 2210 void reboot(void)
6817                     ; 2211 {
6818                     .text:	section	.text,new
6819  ccf8               _reboot:
6823                     ; 2214   fastflash(); // A useful signal that a deliberate reboot is occurring.
6825  ccf8 cdcec5        	call	_fastflash
6827                     ; 2216   LEDcontrol(0);  // turn LED off
6829  ccfb 4f            	clr	a
6830  ccfc cda40d        	call	_LEDcontrol
6832                     ; 2218   WWDG_WR = (uint8_t)0x7f;     // Window register reset
6834  ccff 357f50d2      	mov	_WWDG_WR,#127
6835                     ; 2219   WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
6837  cd03 35ff50d1      	mov	_WWDG_CR,#255
6838                     ; 2220   WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
6840  cd07 356050d2      	mov	_WWDG_WR,#96
6841                     ; 2223   wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
6843  cd0b aec350        	ldw	x,#50000
6844  cd0e cde5a2        	call	_wait_timer
6846                     ; 2224   wait_timer((uint16_t)50000);
6848  cd11 aec350        	ldw	x,#50000
6849  cd14 cde5a2        	call	_wait_timer
6851                     ; 2225   wait_timer((uint16_t)50000);
6853  cd17 aec350        	ldw	x,#50000
6855                     ; 2226 }
6858  cd1a cce5a2        	jp	_wait_timer
6899                     ; 2229 void read_input_registers(void)
6899                     ; 2230 {
6900                     .text:	section	.text,new
6901  cd1d               _read_input_registers:
6903  cd1d 89            	pushw	x
6904       00000002      OFST:	set	2
6907                     ; 2247   if (PC_IDR & (uint8_t)0x40) IO_16to9_new1 |= 0x80; // PC bit 6 = 1, Input 8 = 1
6909  cd1e 720d500b06    	btjf	_PC_IDR,#6,L1033
6912  cd23 721e0168      	bset	_IO_16to9_new1,#7
6914  cd27 2004          	jra	L3033
6915  cd29               L1033:
6916                     ; 2248   else IO_16to9_new1 &= (uint8_t)(~0x80);
6918  cd29 721f0168      	bres	_IO_16to9_new1,#7
6919  cd2d               L3033:
6920                     ; 2249   if (PG_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x40; // PG bit 0 = 1, Input 7 = 1
6922  cd2d 7201501f06    	btjf	_PG_IDR,#0,L5033
6925  cd32 721c0168      	bset	_IO_16to9_new1,#6
6927  cd36 2004          	jra	L7033
6928  cd38               L5033:
6929                     ; 2250   else IO_16to9_new1 &= (uint8_t)(~0x40);
6931  cd38 721d0168      	bres	_IO_16to9_new1,#6
6932  cd3c               L7033:
6933                     ; 2251   if (PE_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x20; // PE bit 3 = 1, Input 6 = 1
6935  cd3c 7207501506    	btjf	_PE_IDR,#3,L1133
6938  cd41 721a0168      	bset	_IO_16to9_new1,#5
6940  cd45 2004          	jra	L3133
6941  cd47               L1133:
6942                     ; 2252   else IO_16to9_new1 &= (uint8_t)(~0x20);
6944  cd47 721b0168      	bres	_IO_16to9_new1,#5
6945  cd4b               L3133:
6946                     ; 2253   if (PD_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x10; // PD bit 0 = 1, Input 5 = 1
6948  cd4b 7201501006    	btjf	_PD_IDR,#0,L5133
6951  cd50 72180168      	bset	_IO_16to9_new1,#4
6953  cd54 2004          	jra	L7133
6954  cd56               L5133:
6955                     ; 2254   else IO_16to9_new1 &= (uint8_t)(~0x10);
6957  cd56 72190168      	bres	_IO_16to9_new1,#4
6958  cd5a               L7133:
6959                     ; 2255   if (PD_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x08; // PD bit 3 = 1, Input 4 = 1
6961  cd5a 7207501006    	btjf	_PD_IDR,#3,L1233
6964  cd5f 72160168      	bset	_IO_16to9_new1,#3
6966  cd63 2004          	jra	L3233
6967  cd65               L1233:
6968                     ; 2256   else IO_16to9_new1 &= (uint8_t)(~0x08);
6970  cd65 72170168      	bres	_IO_16to9_new1,#3
6971  cd69               L3233:
6972                     ; 2257   if (PD_IDR & (uint8_t)0x20) IO_16to9_new1 |= 0x04; // PD bit 5 = 1, Input 3 = 1
6974  cd69 720b501006    	btjf	_PD_IDR,#5,L5233
6977  cd6e 72140168      	bset	_IO_16to9_new1,#2
6979  cd72 2004          	jra	L7233
6980  cd74               L5233:
6981                     ; 2258   else IO_16to9_new1 &= (uint8_t)(~0x04);
6983  cd74 72150168      	bres	_IO_16to9_new1,#2
6984  cd78               L7233:
6985                     ; 2259   if (PD_IDR & (uint8_t)0x80) IO_16to9_new1 |= 0x02; // PD bit 7 = 1, Input 2 = 1
6987  cd78 720f501006    	btjf	_PD_IDR,#7,L1333
6990  cd7d 72120168      	bset	_IO_16to9_new1,#1
6992  cd81 2004          	jra	L3333
6993  cd83               L1333:
6994                     ; 2260   else IO_16to9_new1 &= (uint8_t)(~0x02);
6996  cd83 72130168      	bres	_IO_16to9_new1,#1
6997  cd87               L3333:
6998                     ; 2261   if (PA_IDR & (uint8_t)0x10) IO_16to9_new1 |= 0x01; // PA bit 4 = 1, Input 1 = 1
7000  cd87 7209500106    	btjf	_PA_IDR,#4,L5333
7003  cd8c 72100168      	bset	_IO_16to9_new1,#0
7005  cd90 2004          	jra	L7333
7006  cd92               L5333:
7007                     ; 2262   else IO_16to9_new1 &= (uint8_t)(~0x01);
7009  cd92 72110168      	bres	_IO_16to9_new1,#0
7010  cd96               L7333:
7011                     ; 2267   xor_tmp = (uint8_t)((IO_16to9 ^ IO_16to9_new1) & (IO_16to9 ^ IO_16to9_new2));
7013  cd96 c6016a        	ld	a,_IO_16to9
7014  cd99 c80166        	xor	a,_IO_16to9_new2
7015  cd9c 6b01          	ld	(OFST-1,sp),a
7017  cd9e c6016a        	ld	a,_IO_16to9
7018  cda1 c80168        	xor	a,_IO_16to9_new1
7019  cda4 1401          	and	a,(OFST-1,sp)
7020  cda6 6b02          	ld	(OFST+0,sp),a
7022                     ; 2268   IO_16to9 = (uint8_t)(IO_16to9 ^ xor_tmp);
7024  cda8 c8016a        	xor	a,_IO_16to9
7025  cdab c7016a        	ld	_IO_16to9,a
7026                     ; 2270   IO_16to9_new2 = IO_16to9_new1;
7028                     ; 2324 }
7031  cdae 85            	popw	x
7032  cdaf 5501680166    	mov	_IO_16to9_new2,_IO_16to9_new1
7033  cdb4 81            	ret	
7073                     ; 2327 void write_output_registers(void)
7073                     ; 2328 {
7074                     .text:	section	.text,new
7075  cdb5               _write_output_registers:
7077  cdb5 88            	push	a
7078       00000001      OFST:	set	1
7081                     ; 2382   xor_tmp = (uint8_t)(invert_output ^ IO_8to1);
7083  cdb6 c60162        	ld	a,_invert_output
7084  cdb9 c80169        	xor	a,_IO_8to1
7085  cdbc 6b01          	ld	(OFST+0,sp),a
7087                     ; 2383   if (xor_tmp & 0x80) PC_ODR |= (uint8_t)0x80; // Relay 8 off
7089  cdbe 2a06          	jrpl	L5533
7092  cdc0 721e500a      	bset	_PC_ODR,#7
7094  cdc4 2004          	jra	L7533
7095  cdc6               L5533:
7096                     ; 2384   else PC_ODR &= (uint8_t)~0x80; // Relay 8 on
7098  cdc6 721f500a      	bres	_PC_ODR,#7
7099  cdca               L7533:
7100                     ; 2385   if (xor_tmp & 0x40) PG_ODR |= (uint8_t)0x02; // Relay 7 off
7102  cdca a540          	bcp	a,#64
7103  cdcc 2706          	jreq	L1633
7106  cdce 7212501e      	bset	_PG_ODR,#1
7108  cdd2 2004          	jra	L3633
7109  cdd4               L1633:
7110                     ; 2386   else PG_ODR &= (uint8_t)~0x02; // Relay 7 on
7112  cdd4 7213501e      	bres	_PG_ODR,#1
7113  cdd8               L3633:
7114                     ; 2387   if (xor_tmp & 0x20) PE_ODR |= (uint8_t)0x01; // Relay 6 off
7116  cdd8 7b01          	ld	a,(OFST+0,sp)
7117  cdda a520          	bcp	a,#32
7118  cddc 2706          	jreq	L5633
7121  cdde 72105014      	bset	_PE_ODR,#0
7123  cde2 2004          	jra	L7633
7124  cde4               L5633:
7125                     ; 2388   else PE_ODR &= (uint8_t)~0x01; // Relay 6 on
7127  cde4 72115014      	bres	_PE_ODR,#0
7128  cde8               L7633:
7129                     ; 2389   if (xor_tmp & 0x10) PD_ODR |= (uint8_t)0x04; // Relay 5 off
7131  cde8 a510          	bcp	a,#16
7132  cdea 2706          	jreq	L1733
7135  cdec 7214500f      	bset	_PD_ODR,#2
7137  cdf0 2004          	jra	L3733
7138  cdf2               L1733:
7139                     ; 2390   else PD_ODR &= (uint8_t)~0x04; // Relay 5 on
7141  cdf2 7215500f      	bres	_PD_ODR,#2
7142  cdf6               L3733:
7143                     ; 2391   if (xor_tmp & 0x08) PD_ODR |= (uint8_t)0x10; // Relay 4 off
7145  cdf6 7b01          	ld	a,(OFST+0,sp)
7146  cdf8 a508          	bcp	a,#8
7147  cdfa 2706          	jreq	L5733
7150  cdfc 7218500f      	bset	_PD_ODR,#4
7152  ce00 2004          	jra	L7733
7153  ce02               L5733:
7154                     ; 2392   else PD_ODR &= (uint8_t)~0x10; // Relay 4 on
7156  ce02 7219500f      	bres	_PD_ODR,#4
7157  ce06               L7733:
7158                     ; 2393   if (xor_tmp & 0x04) PD_ODR |= (uint8_t)0x40; // Relay 3 off
7160  ce06 a504          	bcp	a,#4
7161  ce08 2706          	jreq	L1043
7164  ce0a 721c500f      	bset	_PD_ODR,#6
7166  ce0e 2004          	jra	L3043
7167  ce10               L1043:
7168                     ; 2394   else PD_ODR &= (uint8_t)~0x40; // Relay 3 on
7170  ce10 721d500f      	bres	_PD_ODR,#6
7171  ce14               L3043:
7172                     ; 2395   if (xor_tmp & 0x02) PA_ODR |= (uint8_t)0x20; // Relay 2 off
7174  ce14 7b01          	ld	a,(OFST+0,sp)
7175  ce16 a502          	bcp	a,#2
7176  ce18 2706          	jreq	L5043
7179  ce1a 721a5000      	bset	_PA_ODR,#5
7181  ce1e 2004          	jra	L7043
7182  ce20               L5043:
7183                     ; 2396   else PA_ODR &= (uint8_t)~0x20; // Relay 2 on
7185  ce20 721b5000      	bres	_PA_ODR,#5
7186  ce24               L7043:
7187                     ; 2397   if (xor_tmp & 0x01) PA_ODR |= (uint8_t)0x08; // Relay 1 off
7189  ce24 a501          	bcp	a,#1
7190  ce26 2706          	jreq	L1143
7193  ce28 72165000      	bset	_PA_ODR,#3
7195  ce2c 2004          	jra	L3143
7196  ce2e               L1143:
7197                     ; 2398   else PA_ODR &= (uint8_t)~0x08; // Relay 1 on
7199  ce2e 72175000      	bres	_PA_ODR,#3
7200  ce32               L3143:
7201                     ; 2404 }
7204  ce32 84            	pop	a
7205  ce33 81            	ret	
7246                     ; 2407 void check_reset_button(void)
7246                     ; 2408 {
7247                     .text:	section	.text,new
7248  ce34               _check_reset_button:
7250  ce34 88            	push	a
7251       00000001      OFST:	set	1
7254                     ; 2413   if ((PA_IDR & 0x02) == 0) {
7256  ce35 720250015d    	btjt	_PA_IDR,#1,L1343
7257                     ; 2415     for (i=0; i<100; i++) {
7259  ce3a 0f01          	clr	(OFST+0,sp)
7261  ce3c               L3343:
7262                     ; 2416       wait_timer(50000); // wait 50ms
7264  ce3c aec350        	ldw	x,#50000
7265  ce3f cde5a2        	call	_wait_timer
7267                     ; 2417       if ((PA_IDR & 0x02) == 1) { // check Reset Button again. If released
7269  ce42 c65001        	ld	a,_PA_IDR
7270  ce45 a402          	and	a,#2
7271  ce47 4a            	dec	a
7272  ce48 2602          	jrne	L1443
7273                     ; 2419         return;
7276  ce4a 84            	pop	a
7277  ce4b 81            	ret	
7278  ce4c               L1443:
7279                     ; 2415     for (i=0; i<100; i++) {
7281  ce4c 0c01          	inc	(OFST+0,sp)
7285  ce4e 7b01          	ld	a,(OFST+0,sp)
7286  ce50 a164          	cp	a,#100
7287  ce52 25e8          	jrult	L3343
7288                     ; 2424     LEDcontrol(0);  // turn LED off
7290  ce54 4f            	clr	a
7291  ce55 cda40d        	call	_LEDcontrol
7294  ce58               L5443:
7295                     ; 2425     while((PA_IDR & 0x02) == 0) {  // Wait for button release
7297  ce58 72035001fb    	btjf	_PA_IDR,#1,L5443
7298                     ; 2428     magic4 = 0x00;
7300  ce5d 4f            	clr	a
7301  ce5e ae402e        	ldw	x,#_magic4
7302  ce61 cdf61f        	call	c_eewrc
7304                     ; 2429     magic3 = 0x00;
7306  ce64 4f            	clr	a
7307  ce65 ae402d        	ldw	x,#_magic3
7308  ce68 cdf61f        	call	c_eewrc
7310                     ; 2430     magic2 = 0x00;
7312  ce6b 4f            	clr	a
7313  ce6c ae402c        	ldw	x,#_magic2
7314  ce6f cdf61f        	call	c_eewrc
7316                     ; 2431     magic1 = 0x00;
7318  ce72 4f            	clr	a
7319  ce73 ae402b        	ldw	x,#_magic1
7320  ce76 cdf61f        	call	c_eewrc
7322                     ; 2433     WWDG_WR = (uint8_t)0x7f;       // Window register reset
7324  ce79 357f50d2      	mov	_WWDG_WR,#127
7325                     ; 2434     WWDG_CR = (uint8_t)0xff;       // Set watchdog to timeout in 49ms
7327  ce7d 35ff50d1      	mov	_WWDG_CR,#255
7328                     ; 2435     WWDG_WR = (uint8_t)0x60;       // Window register value - doesn't matter
7330  ce81 356050d2      	mov	_WWDG_WR,#96
7331                     ; 2438     wait_timer((uint16_t)50000);   // Wait for watchdog to generate reset
7333  ce85 aec350        	ldw	x,#50000
7334  ce88 cde5a2        	call	_wait_timer
7336                     ; 2439     wait_timer((uint16_t)50000);
7338  ce8b aec350        	ldw	x,#50000
7339  ce8e cde5a2        	call	_wait_timer
7341                     ; 2440     wait_timer((uint16_t)50000);
7343  ce91 aec350        	ldw	x,#50000
7344  ce94 cde5a2        	call	_wait_timer
7346  ce97               L1343:
7347                     ; 2442 }
7350  ce97 84            	pop	a
7351  ce98 81            	ret	
7385                     ; 2445 void debugflash(void)
7385                     ; 2446 {
7386                     .text:	section	.text,new
7387  ce99               _debugflash:
7389  ce99 88            	push	a
7390       00000001      OFST:	set	1
7393                     ; 2461   LEDcontrol(0);     // turn LED off
7395  ce9a 4f            	clr	a
7396  ce9b cda40d        	call	_LEDcontrol
7398                     ; 2462   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7400  ce9e 0f01          	clr	(OFST+0,sp)
7402  cea0               L5643:
7405  cea0 aec350        	ldw	x,#50000
7406  cea3 cde5a2        	call	_wait_timer
7410  cea6 0c01          	inc	(OFST+0,sp)
7414  cea8 7b01          	ld	a,(OFST+0,sp)
7415  ceaa a10a          	cp	a,#10
7416  ceac 25f2          	jrult	L5643
7417                     ; 2464   LEDcontrol(1);     // turn LED on
7419  ceae a601          	ld	a,#1
7420  ceb0 cda40d        	call	_LEDcontrol
7422                     ; 2465   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7424  ceb3 0f01          	clr	(OFST+0,sp)
7426  ceb5               L3743:
7429  ceb5 aec350        	ldw	x,#50000
7430  ceb8 cde5a2        	call	_wait_timer
7434  cebb 0c01          	inc	(OFST+0,sp)
7438  cebd 7b01          	ld	a,(OFST+0,sp)
7439  cebf a10a          	cp	a,#10
7440  cec1 25f2          	jrult	L3743
7441                     ; 2466 }
7444  cec3 84            	pop	a
7445  cec4 81            	ret	
7479                     ; 2469 void fastflash(void)
7479                     ; 2470 {
7480                     .text:	section	.text,new
7481  cec5               _fastflash:
7483  cec5 88            	push	a
7484       00000001      OFST:	set	1
7487                     ; 2485   for (i=0; i<10; i++) {
7489  cec6 0f01          	clr	(OFST+0,sp)
7491  cec8               L5153:
7492                     ; 2486     LEDcontrol(0);     // turn LED off
7494  cec8 4f            	clr	a
7495  cec9 cda40d        	call	_LEDcontrol
7497                     ; 2487     wait_timer((uint16_t)50000); // wait 50ms
7499  cecc aec350        	ldw	x,#50000
7500  cecf cde5a2        	call	_wait_timer
7502                     ; 2489     LEDcontrol(1);     // turn LED on
7504  ced2 a601          	ld	a,#1
7505  ced4 cda40d        	call	_LEDcontrol
7507                     ; 2490     wait_timer((uint16_t)50000); // wait 50ms
7509  ced7 aec350        	ldw	x,#50000
7510  ceda cde5a2        	call	_wait_timer
7512                     ; 2485   for (i=0; i<10; i++) {
7514  cedd 0c01          	inc	(OFST+0,sp)
7518  cedf 7b01          	ld	a,(OFST+0,sp)
7519  cee1 a10a          	cp	a,#10
7520  cee3 25e3          	jrult	L5153
7521                     ; 2492 }
7524  cee5 84            	pop	a
7525  cee6 81            	ret	
7550                     ; 2495 void oneflash(void)
7550                     ; 2496 {
7551                     .text:	section	.text,new
7552                     _oneflash:
7556                     ; 2511   LEDcontrol(0);     // turn LED off
7558                     	clr	a
7559                     	call	_LEDcontrol
7561                     ; 2512   wait_timer((uint16_t)25000); // wait 25ms
7563                     	ldw	x,#25000
7564                     	call	_wait_timer
7566                     ; 2514   LEDcontrol(1);     // turn LED on
7568                     	ld	a,#1
7570                     ; 2515 }
7573                     	jp	_LEDcontrol
8894                     	switch	.bss
8895  0067               _RXERIF_counter:
8896  0067 00000000      	ds.b	4
8897                     	xdef	_RXERIF_counter
8898  006b               _TXERIF_counter:
8899  006b 00000000      	ds.b	4
8900                     	xdef	_TXERIF_counter
8901  006f               _topic_base_len:
8902  006f 00            	ds.b	1
8903                     	xdef	_topic_base_len
8904  0070               _topic_base:
8905  0070 000000000000  	ds.b	44
8906                     	xdef	_topic_base
8907  009c               _mqtt_restart_step:
8908  009c 00            	ds.b	1
8909                     	xdef	_mqtt_restart_step
8910                     	xref	_MQTT_error_status
8911  009d               _mqtt_conn:
8912  009d 0000          	ds.b	2
8913                     	xdef	_mqtt_conn
8914                     	xref	_mqtt_sendbuf
8915  009f               _mqtt_start_retry:
8916  009f 00            	ds.b	1
8917                     	xdef	_mqtt_start_retry
8918  00a0               _mqtt_sanity_ctr:
8919  00a0 00            	ds.b	1
8920                     	xdef	_mqtt_sanity_ctr
8921  00a1               _mqtt_start_ctr2:
8922  00a1 00            	ds.b	1
8923                     	xdef	_mqtt_start_ctr2
8924  00a2               _mqtt_start_ctr1:
8925  00a2 00            	ds.b	1
8926                     	xdef	_mqtt_start_ctr1
8927  00a3               _mqtt_start_status:
8928  00a3 00            	ds.b	1
8929                     	xdef	_mqtt_start_status
8930  00a4               _mqtt_start:
8931  00a4 00            	ds.b	1
8932                     	xdef	_mqtt_start
8933  00a5               _client_id_text:
8934  00a5 000000000000  	ds.b	26
8935                     	xdef	_client_id_text
8936  00bf               _client_id:
8937  00bf 0000          	ds.b	2
8938                     	xdef	_client_id
8939  00c1               _mqttclient:
8940  00c1 000000000000  	ds.b	44
8941                     	xdef	_mqttclient
8942  00ed               _mqtt_keep_alive:
8943  00ed 0000          	ds.b	2
8944                     	xdef	_mqtt_keep_alive
8945  00ef               _application_message:
8946  00ef 000000        	ds.b	3
8947                     	xdef	_application_message
8948  00f2               _Port_Mqttd:
8949  00f2 0000          	ds.b	2
8950                     	xdef	_Port_Mqttd
8951  00f4               _mqttport:
8952  00f4 0000          	ds.b	2
8953                     	xdef	_mqttport
8954  00f6               _connect_flags:
8955  00f6 00            	ds.b	1
8956                     	xdef	_connect_flags
8957                     	xref	_OctetArray
8958                     	xref	_second_counter
8959  00f7               _time_mark2:
8960  00f7 00000000      	ds.b	4
8961                     	xdef	_time_mark2
8962  00fb               _IpAddr:
8963  00fb 00000000      	ds.b	4
8964                     	xdef	_IpAddr
8965  00ff               _Port_Httpd:
8966  00ff 0000          	ds.b	2
8967                     	xdef	_Port_Httpd
8968  0101               _mqtt_parse_complete:
8969  0101 00            	ds.b	1
8970                     	xdef	_mqtt_parse_complete
8971  0102               _parse_complete:
8972  0102 00            	ds.b	1
8973                     	xdef	_parse_complete
8974  0103               _mqtt_close_tcp:
8975  0103 00            	ds.b	1
8976                     	xdef	_mqtt_close_tcp
8977  0104               _restart_reboot_step:
8978  0104 00            	ds.b	1
8979                     	xdef	_restart_reboot_step
8980  0105               _restart_request:
8981  0105 00            	ds.b	1
8982                     	xdef	_restart_request
8983  0106               _user_reboot_request:
8984  0106 00            	ds.b	1
8985                     	xdef	_user_reboot_request
8986  0107               _reboot_request:
8987  0107 00            	ds.b	1
8988                     	xdef	_reboot_request
8989  0108               _mac_string:
8990  0108 000000000000  	ds.b	13
8991                     	xdef	_mac_string
8992  0115               _Pending_uip_ethaddr_oct:
8993  0115 000000000000  	ds.b	6
8994                     	xdef	_Pending_uip_ethaddr_oct
8995  011b               _Pending_config_settings:
8996  011b 000000000000  	ds.b	6
8997                     	xdef	_Pending_config_settings
8998  0121               _Pending_devicename:
8999  0121 000000000000  	ds.b	20
9000                     	xdef	_Pending_devicename
9001  0135               _Pending_port:
9002  0135 0000          	ds.b	2
9003                     	xdef	_Pending_port
9004  0137               _Pending_netmask:
9005  0137 00000000      	ds.b	4
9006                     	xdef	_Pending_netmask
9007  013b               _Pending_draddr:
9008  013b 00000000      	ds.b	4
9009                     	xdef	_Pending_draddr
9010  013f               _Pending_hostaddr:
9011  013f 00000000      	ds.b	4
9012                     	xdef	_Pending_hostaddr
9013  0143               _Pending_mqtt_password:
9014  0143 000000000000  	ds.b	11
9015                     	xdef	_Pending_mqtt_password
9016  014e               _Pending_mqtt_username:
9017  014e 000000000000  	ds.b	11
9018                     	xdef	_Pending_mqtt_username
9019  0159               _Pending_mqttport:
9020  0159 0000          	ds.b	2
9021                     	xdef	_Pending_mqttport
9022  015b               _Pending_mqttserveraddr:
9023  015b 00000000      	ds.b	4
9024                     	xdef	_Pending_mqttserveraddr
9025  015f               _stack_error:
9026  015f 00            	ds.b	1
9027                     	xdef	_stack_error
9028  0160               _state_request:
9029  0160 00            	ds.b	1
9030                     	xdef	_state_request
9031  0161               _invert_input:
9032  0161 00            	ds.b	1
9033                     	xdef	_invert_input
9034  0162               _invert_output:
9035  0162 00            	ds.b	1
9036                     	xdef	_invert_output
9037  0163               _IO_8to1_sent:
9038  0163 00            	ds.b	1
9039                     	xdef	_IO_8to1_sent
9040  0164               _IO_16to9_sent:
9041  0164 00            	ds.b	1
9042                     	xdef	_IO_16to9_sent
9043  0165               _IO_8to1_new2:
9044  0165 00            	ds.b	1
9045                     	xdef	_IO_8to1_new2
9046  0166               _IO_16to9_new2:
9047  0166 00            	ds.b	1
9048                     	xdef	_IO_16to9_new2
9049  0167               _IO_8to1_new1:
9050  0167 00            	ds.b	1
9051                     	xdef	_IO_8to1_new1
9052  0168               _IO_16to9_new1:
9053  0168 00            	ds.b	1
9054                     	xdef	_IO_16to9_new1
9055  0169               _IO_8to1:
9056  0169 00            	ds.b	1
9057                     	xdef	_IO_8to1
9058  016a               _IO_16to9:
9059  016a 00            	ds.b	1
9060                     	xdef	_IO_16to9
9061                     .eeprom:	section	.data
9062  4000               _stored_devicename:
9063  4000 000000000000  	ds.b	20
9064                     	xdef	_stored_devicename
9065  4014               _stored_IO_8to1:
9066  4014 00            	ds.b	1
9067                     	xdef	_stored_IO_8to1
9068  4015               _stored_unused1:
9069  4015 00            	ds.b	1
9070                     	xdef	_stored_unused1
9071  4016               _stored_unused2:
9072  4016 00            	ds.b	1
9073                     	xdef	_stored_unused2
9074  4017               _stored_uip_ethaddr_oct:
9075  4017 000000000000  	ds.b	6
9076                     	xdef	_stored_uip_ethaddr_oct
9077  401d               _stored_port:
9078  401d 0000          	ds.b	2
9079                     	xdef	_stored_port
9080  401f               _stored_netmask:
9081  401f 00000000      	ds.b	4
9082                     	xdef	_stored_netmask
9083  4023               _stored_draddr:
9084  4023 00000000      	ds.b	4
9085                     	xdef	_stored_draddr
9086  4027               _stored_hostaddr:
9087  4027 00000000      	ds.b	4
9088                     	xdef	_stored_hostaddr
9089  402b               _magic1:
9090  402b 00            	ds.b	1
9091                     	xdef	_magic1
9092  402c               _magic2:
9093  402c 00            	ds.b	1
9094                     	xdef	_magic2
9095  402d               _magic3:
9096  402d 00            	ds.b	1
9097                     	xdef	_magic3
9098  402e               _magic4:
9099  402e 00            	ds.b	1
9100                     	xdef	_magic4
9101  402f               _stored_mqttport:
9102  402f 0000          	ds.b	2
9103                     	xdef	_stored_mqttport
9104  4031               _stored_mqttserveraddr:
9105  4031 00000000      	ds.b	4
9106                     	xdef	_stored_mqttserveraddr
9107  4035               _stored_mqtt_username:
9108  4035 000000000000  	ds.b	11
9109                     	xdef	_stored_mqtt_username
9110  4040               _stored_mqtt_password:
9111  4040 000000000000  	ds.b	11
9112                     	xdef	_stored_mqtt_password
9113  404b               _stored_IO_16to9:
9114  404b 00            	ds.b	1
9115                     	xdef	_stored_IO_16to9
9116  404c               _stored_config_settings:
9117  404c 000000000000  	ds.b	6
9118                     	xdef	_stored_config_settings
9119                     	xdef	_stack_limit2
9120                     	xdef	_stack_limit1
9121                     	xref	_mqtt_disconnect
9122                     	xref	_mqtt_subscribe
9123                     	xref	_mqtt_publish
9124                     	xref	_mqtt_connect
9125                     	xref	_mqtt_init
9126                     	xref	_strlen
9127                     	xref	_strcat
9128                     	xref	_wait_timer
9129                     	xref	_arp_timer_expired
9130                     	xref	_periodic_timer_expired
9131                     	xref	_clock_init
9132                     	xref	_LEDcontrol
9133                     	xref	_gpio_init
9134                     	xref	_check_mqtt_server_arp_entry
9135                     	xref	_uip_arp_timer
9136                     	xref	_uip_arp_out
9137                     	xref	_uip_arp_arpin
9138                     	xref	_uip_arp_init
9139                     	xref	_uip_ethaddr
9140                     	xref	_uip_mqttserveraddr
9141                     	xref	_uip_draddr
9142                     	xref	_uip_netmask
9143                     	xref	_uip_hostaddr
9144                     	xref	_uip_process
9145                     	xref	_uip_conns
9146                     	xref	_uip_conn
9147                     	xref	_uip_len
9148                     	xref	_uip_appdata
9149                     	xref	_htons
9150                     	xref	_uip_connect
9151                     	xref	_uip_buf
9152                     	xref	_uip_init
9153                     	xref	_GpioSetPin
9154                     	xref	_HttpDInit
9155                     	xref	_emb_itoa
9156                     	xref	_Enc28j60Send
9157                     	xref	_Enc28j60Receive
9158                     	xref	_Enc28j60Init
9159                     	xref	_spi_init
9160                     	xdef	_publish_pinstate_all
9161                     	xdef	_publish_pinstate
9162                     	xdef	_publish_outbound
9163                     	xdef	_publish_callback
9164                     	xdef	_mqtt_sanity_check
9165                     	xdef	_mqtt_startup
9166                     	xdef	_debugflash
9167                     	xdef	_fastflash
9168                     	xdef	_oneflash
9169                     	xdef	_reboot
9170                     	xdef	_restart
9171                     	xdef	_check_restart_reboot
9172                     	xdef	_check_reset_button
9173                     	xdef	_write_output_registers
9174                     	xdef	_read_input_registers
9175                     	xdef	_check_runtime_changes
9176                     	xdef	_update_mac_string
9177                     	xdef	_check_eeprom_settings
9178                     	xdef	_unlock_eeprom
9179                     	xdef	_main
9180                     	switch	.const
9181  9e52               L5242:
9182  9e52 2f7374617465  	dc.b	"/state",0
9183  9e59               L7632:
9184  9e59 2f6f75745f6f  	dc.b	"/out_off",0
9185  9e62               L3632:
9186  9e62 2f6f75745f6f  	dc.b	"/out_on",0
9187  9e6a               L5532:
9188  9e6a 2f696e5f6f66  	dc.b	"/in_off",0
9189  9e72               L1532:
9190  9e72 2f696e5f6f6e  	dc.b	"/in_on",0
9191  9e79               L5302:
9192  9e79 6f6e6c696e65  	dc.b	"online",0
9193  9e80               L5202:
9194  9e80 2f7374617465  	dc.b	"/state-req",0
9195  9e8b               L5102:
9196  9e8b 2f6f666600    	dc.b	"/off",0
9197  9e90               L5002:
9198  9e90 2f6f6e00      	dc.b	"/on",0
9199  9e94               L1771:
9200  9e94 6f66666c696e  	dc.b	"offline",0
9201  9e9c               L7671:
9202  9e9c 2f7374617475  	dc.b	"/status",0
9203                     	xref.b	c_lreg
9223                     	xref	c_ladc
9224                     	xref	c_lcmp
9225                     	xref	c_ltor
9226                     	xref	c_eewrw
9227                     	xref	c_eewrc
9228                     	end
