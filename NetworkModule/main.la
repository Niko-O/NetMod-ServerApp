   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2518                     .iconst:	section	.bss
2519  05fe               _stack_limit2:
2520  05fe 00            	ds.b	1
2521  05ff               _stack_limit1:
2522  05ff 00            	ds.b	1
2523                     .const:	section	.text
2524  9e6c               L5261_devicetype:
2525  9e6c 4e6574776f72  	dc.b	"NetworkModule/",0
2624                     ; 296 int main(void)
2624                     ; 297 {
2626                     .text:	section	.text,new
2627  bda6               _main:
2629  bda6 88            	push	a
2630       00000001      OFST:	set	1
2633                     ; 301   parse_complete = 0;
2635  bda7 725f0106      	clr	_parse_complete
2636                     ; 302   mqtt_parse_complete = 0;
2638  bdab 725f0105      	clr	_mqtt_parse_complete
2639                     ; 303   reboot_request = 0;
2641  bdaf 725f010b      	clr	_reboot_request
2642                     ; 304   user_reboot_request = 0;
2644  bdb3 725f010a      	clr	_user_reboot_request
2645                     ; 305   restart_request = 0;
2647  bdb7 725f0109      	clr	_restart_request
2648                     ; 307   time_mark2 = 0;           // Time capture used in reboot
2650  bdbb 5f            	clrw	x
2651  bdbc cf00fd        	ldw	_time_mark2+2,x
2652  bdbf cf00fb        	ldw	_time_mark2,x
2653                     ; 310   restart_reboot_step = RESTART_REBOOT_IDLE;
2655  bdc2 725f0108      	clr	_restart_reboot_step
2656                     ; 311   mqtt_close_tcp = 0;
2658  bdc6 725f0107      	clr	_mqtt_close_tcp
2659                     ; 312   stack_error = 0;
2661  bdca 725f0163      	clr	_stack_error
2662                     ; 315   mqtt_start = MQTT_START_TCP_CONNECT;	 // Tracks the MQTT startup steps
2664  bdce 350100a8      	mov	_mqtt_start,#1
2665                     ; 316   mqtt_start_status = MQTT_START_NOT_STARTED; // Tracks error states during
2667  bdd2 725f00a7      	clr	_mqtt_start_status
2668                     ; 318   mqtt_keep_alive = 60;                  // Ping interval in seconds
2670  bdd6 ae003c        	ldw	x,#60
2671  bdd9 cf00f1        	ldw	_mqtt_keep_alive,x
2672                     ; 320   mqtt_start_ctr1 = 0;			 // Tracks time for the MQTT startup
2674  bddc 725f00a6      	clr	_mqtt_start_ctr1
2675                     ; 322   mqtt_start_ctr2 = 0;			 // Tracks time for the MQTT startup
2677  bde0 725f00a5      	clr	_mqtt_start_ctr2
2678                     ; 324   mqtt_sanity_ctr = 0;			 // Tracks time for the MQTT sanity
2680  bde4 725f00a4      	clr	_mqtt_sanity_ctr
2681                     ; 326   mqtt_start_retry = 0;                  // Flag to retry the ARP/TCP Connect
2683  bde8 725f00a3      	clr	_mqtt_start_retry
2684                     ; 327   MQTT_error_status = 0;                 // For MQTT error status display in
2686  bdec 725f029b      	clr	_MQTT_error_status
2687                     ; 329   mqtt_restart_step = MQTT_RESTART_IDLE; // Step counter for MQTT restart
2689  bdf0 725f00a0      	clr	_mqtt_restart_step
2690                     ; 330   strcpy(topic_base, devicetype);        // Initial content of the topic_base.
2692  bdf4 ae0074        	ldw	x,#_topic_base
2693  bdf7 90ae9e6c      	ldw	y,#L5261_devicetype
2694  bdfb               L6:
2695  bdfb 90f6          	ld	a,(y)
2696  bdfd 905c          	incw	y
2697  bdff f7            	ld	(x),a
2698  be00 5c            	incw	x
2699  be01 4d            	tnz	a
2700  be02 26f7          	jrne	L6
2701                     ; 336   state_request = STATE_REQUEST_IDLE;    // Set the state request received to
2703  be04 c70164        	ld	_state_request,a
2704                     ; 338   TXERIF_counter = 0;                    // Initialize the TXERIF error counter
2706  be07 5f            	clrw	x
2707  be08 cf006d        	ldw	_TXERIF_counter+2,x
2708  be0b cf006b        	ldw	_TXERIF_counter,x
2709                     ; 339   RXERIF_counter = 0;                    // Initialize the RXERIF error counter
2711  be0e cf0071        	ldw	_RXERIF_counter+2,x
2712  be11 cf006f        	ldw	_RXERIF_counter,x
2713                     ; 340   TRANSMIT_counter = 0;
2715  be14 cf0069        	ldw	_TRANSMIT_counter+2,x
2716  be17 cf0067        	ldw	_TRANSMIT_counter,x
2717                     ; 346   clock_init();            // Initialize and enable clocks and timers
2719  be1a cde5d9        	call	_clock_init
2721                     ; 348   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2723  be1d cdc490        	call	_unlock_eeprom
2725                     ; 350   gpio_init();             // Initialize and enable gpio pins
2727  be20 cda41f        	call	_gpio_init
2729                     ; 352   spi_init();              // Initialize the SPI bit bang interface to the
2731  be23 cde4e1        	call	_spi_init
2733                     ; 355   LEDcontrol(1);           // turn LED on
2735  be26 a601          	ld	a,#1
2736  be28 cda48a        	call	_LEDcontrol
2738                     ; 357   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2740  be2b cdc4a0        	call	_check_eeprom_settings
2742                     ; 361   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2744  be2e cda028        	call	_Enc28j60Init
2746                     ; 363   uip_arp_init();          // Initialize the ARP module
2748  be31 cdf24a        	call	_uip_arp_init
2750                     ; 365   uip_init();              // Initialize uIP Web Server
2752  be34 cde7e7        	call	_uip_init
2754                     ; 367   HttpDInit();             // Initialize listening ports
2756  be37 cdacb8        	call	_HttpDInit
2758                     ; 374   stack_limit1 = 0xaa;
2760  be3a 35aa05ff      	mov	_stack_limit1,#170
2761                     ; 375   stack_limit2 = 0x55;
2763  be3e 355505fe      	mov	_stack_limit2,#85
2764                     ; 380   mqtt_init(&mqttclient,
2764                     ; 381             mqtt_sendbuf,
2764                     ; 382 	    sizeof(mqtt_sendbuf),
2764                     ; 383 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
2764                     ; 384 	    UIP_APPDATA_SIZE,
2764                     ; 385 	    publish_callback);
2766  be42 aec1f8        	ldw	x,#_publish_callback
2767  be45 89            	pushw	x
2768  be46 ae01be        	ldw	x,#446
2769  be49 89            	pushw	x
2770  be4a ae03ad        	ldw	x,#_uip_buf+54
2771  be4d 89            	pushw	x
2772  be4e ae00c8        	ldw	x,#200
2773  be51 89            	pushw	x
2774  be52 ae016f        	ldw	x,#_mqtt_sendbuf
2775  be55 89            	pushw	x
2776  be56 ae00c5        	ldw	x,#_mqttclient
2777  be59 cdd089        	call	_mqtt_init
2779  be5c 5b0a          	addw	sp,#10
2780  be5e               L1561:
2781                     ; 499     uip_len = Enc28j60Receive(uip_buf); // Check for incoming packets
2783  be5e ae0377        	ldw	x,#_uip_buf
2784  be61 cda188        	call	_Enc28j60Receive
2786  be64 cf0373        	ldw	_uip_len,x
2787                     ; 501     if (uip_len > 0) {
2789  be67 2738          	jreq	L5561
2790                     ; 505       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2792  be69 ae0800        	ldw	x,#2048
2793  be6c cdf225        	call	_htons
2795  be6f c30383        	cpw	x,_uip_buf+12
2796  be72 2612          	jrne	L7561
2797                     ; 506         uip_input(); // Calls uip_process(UIP_DATA) to process a received
2799  be74 a601          	ld	a,#1
2800  be76 cde8f7        	call	_uip_process
2802                     ; 511         if (uip_len > 0) {
2804  be79 ce0373        	ldw	x,_uip_len
2805  be7c 2723          	jreq	L5561
2806                     ; 512           uip_arp_out();
2808  be7e cdf473        	call	_uip_arp_out
2810                     ; 516           Enc28j60Send(uip_buf, uip_len);
2812  be81 ce0373        	ldw	x,_uip_len
2814  be84 2013          	jp	LC001
2815  be86               L7561:
2816                     ; 519       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2818  be86 ae0806        	ldw	x,#2054
2819  be89 cdf225        	call	_htons
2821  be8c c30383        	cpw	x,_uip_buf+12
2822  be8f 2610          	jrne	L5561
2823                     ; 520         uip_arp_arpin();
2825  be91 cdf3c4        	call	_uip_arp_arpin
2827                     ; 524         if (uip_len > 0) {
2829  be94 ce0373        	ldw	x,_uip_len
2830  be97 2708          	jreq	L5561
2831                     ; 528           Enc28j60Send(uip_buf, uip_len);
2834  be99               LC001:
2835  be99 89            	pushw	x
2836  be9a ae0377        	ldw	x,#_uip_buf
2837  be9d cda235        	call	_Enc28j60Send
2838  bea0 85            	popw	x
2839  bea1               L5561:
2840                     ; 538     if (mqtt_start != MQTT_START_COMPLETE
2840                     ; 539      && mqtt_restart_step == MQTT_RESTART_IDLE
2840                     ; 540      && restart_reboot_step == RESTART_REBOOT_IDLE) {
2842  bea1 c600a8        	ld	a,_mqtt_start
2843  bea4 a114          	cp	a,#20
2844  bea6 270d          	jreq	L1761
2846  bea8 c600a0        	ld	a,_mqtt_restart_step
2847  beab 2608          	jrne	L1761
2849  bead c60108        	ld	a,_restart_reboot_step
2850  beb0 2603          	jrne	L1761
2851                     ; 541        mqtt_startup();
2853  beb2 cdbf1b        	call	_mqtt_startup
2855  beb5               L1761:
2856                     ; 545     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
2858  beb5 c60108        	ld	a,_restart_reboot_step
2859  beb8 2603          	jrne	L3761
2860                     ; 546       mqtt_sanity_check();
2862  beba cdc141        	call	_mqtt_sanity_check
2864  bebd               L3761:
2865                     ; 550     if (periodic_timer_expired()) {
2867  bebd cde66b        	call	_periodic_timer_expired
2869  bec0 4d            	tnz	a
2870  bec1 2743          	jreq	L5761
2871                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2873  bec3 4f            	clr	a
2874  bec4 6b01          	ld	(OFST+0,sp),a
2876  bec6               L5071:
2877                     ; 553 	uip_periodic(i);
2879  bec6 97            	ld	xl,a
2880  bec7 a629          	ld	a,#41
2881  bec9 42            	mul	x,a
2882  beca 1c02cd        	addw	x,#_uip_conns
2883  becd cf0371        	ldw	_uip_conn,x
2886  bed0 a602          	ld	a,#2
2887  bed2 cde8f7        	call	_uip_process
2889                     ; 572 	if (uip_len > 0) {
2891  bed5 ce0373        	ldw	x,_uip_len
2892  bed8 270e          	jreq	L1171
2893                     ; 573 	  uip_arp_out(); // Verifies arp entry in the ARP table and builds LLH
2895  beda cdf473        	call	_uip_arp_out
2897                     ; 574           Enc28j60Send(uip_buf, uip_len);
2899  bedd ce0373        	ldw	x,_uip_len
2900  bee0 89            	pushw	x
2901  bee1 ae0377        	ldw	x,#_uip_buf
2902  bee4 cda235        	call	_Enc28j60Send
2904  bee7 85            	popw	x
2905  bee8               L1171:
2906                     ; 577         mqtt_start_ctr1++; // Increment the MQTT start loop timer 1. This is
2908  bee8 725c00a6      	inc	_mqtt_start_ctr1
2909                     ; 581         mqtt_start_ctr2++; // Increment the MQTT start loop timer 2. This is
2911  beec 725c00a5      	inc	_mqtt_start_ctr2
2912                     ; 584         mqtt_sanity_ctr++; // Increment the MQTT sanity loop timer. This is
2914  bef0 725c00a4      	inc	_mqtt_sanity_ctr
2915                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2917  bef4 0c01          	inc	(OFST+0,sp)
2921  bef6 7b01          	ld	a,(OFST+0,sp)
2922  bef8 a104          	cp	a,#4
2923  befa 25ca          	jrult	L5071
2924                     ; 594       if (mqtt_start == MQTT_START_COMPLETE) {
2926  befc c600a8        	ld	a,_mqtt_start
2927  beff a114          	cp	a,#20
2928  bf01 2603          	jrne	L5761
2929                     ; 595         publish_outbound();
2931  bf03 cdc2a5        	call	_publish_outbound
2933  bf06               L5761:
2934                     ; 602     if (arp_timer_expired()) {
2936  bf06 cde6a4        	call	_arp_timer_expired
2938  bf09 4d            	tnz	a
2939  bf0a 2703          	jreq	L5171
2940                     ; 603       uip_arp_timer(); // Clean out old ARP Table entries. Any entry that has
2942  bf0c cdf26d        	call	_uip_arp_timer
2944  bf0f               L5171:
2945                     ; 610     check_runtime_changes();
2947  bf0f cdc9ac        	call	_check_runtime_changes
2949                     ; 613     check_reset_button();
2951  bf12 cdcf46        	call	_check_reset_button
2953                     ; 618     check_restart_reboot();
2955  bf15 cdccb5        	call	_check_restart_reboot
2958  bf18 ccbe5e        	jra	L1561
3009                     ; 646 void mqtt_startup(void)
3009                     ; 647 {
3010                     .text:	section	.text,new
3011  bf1b               _mqtt_startup:
3015                     ; 663   if (mqtt_start == MQTT_START_TCP_CONNECT) {
3017  bf1b c600a8        	ld	a,_mqtt_start
3018  bf1e a101          	cp	a,#1
3019  bf20 2630          	jrne	L7271
3020                     ; 664     if (stored_mqttserveraddr[3] != 0) {
3022  bf22 c64034        	ld	a,_stored_mqttserveraddr+3
3023  bf25 2603ccc140    	jreq	L7371
3024                     ; 684       mqtt_conn = uip_connect(&uip_mqttserveraddr, Port_Mqttd, Port_Mqttd);
3026  bf2a ce00f6        	ldw	x,_Port_Mqttd
3027  bf2d 89            	pushw	x
3028  bf2e 89            	pushw	x
3029  bf2f ae02b8        	ldw	x,#_uip_mqttserveraddr
3030  bf32 cde816        	call	_uip_connect
3032  bf35 5b04          	addw	sp,#4
3033  bf37 cf00a1        	ldw	_mqtt_conn,x
3034                     ; 685       if (mqtt_conn != NULL) {
3036  bf3a 2711          	jreq	L3371
3037                     ; 686         mqtt_start_ctr1 = 0; // Clear 100ms counter
3039  bf3c 725f00a6      	clr	_mqtt_start_ctr1
3040                     ; 687         mqtt_start_ctr2 = 0; // Clear 100ms counter
3042  bf40 725f00a5      	clr	_mqtt_start_ctr2
3043                     ; 688         mqtt_start_status = MQTT_START_CONNECTIONS_GOOD;
3045  bf44 351000a7      	mov	_mqtt_start_status,#16
3046                     ; 689         mqtt_start = MQTT_START_VERIFY_ARP;
3048  bf48 350200a8      	mov	_mqtt_start,#2
3051  bf4c 81            	ret	
3052  bf4d               L3371:
3053                     ; 692         mqtt_start_status |= MQTT_START_CONNECTIONS_ERROR;
3055  bf4d 721000a7      	bset	_mqtt_start_status,#0
3057  bf51 81            	ret	
3058  bf52               L7271:
3059                     ; 697   else if (mqtt_start == MQTT_START_VERIFY_ARP
3059                     ; 698         && mqtt_start_ctr2 > 10) {
3061  bf52 a102          	cp	a,#2
3062  bf54 263a          	jrne	L1471
3064  bf56 c600a5        	ld	a,_mqtt_start_ctr2
3065  bf59 a10b          	cp	a,#11
3066  bf5b 2533          	jrult	L1471
3067                     ; 699     mqtt_start_ctr2 = 0; // Clear 100ms counter
3069  bf5d 725f00a5      	clr	_mqtt_start_ctr2
3070                     ; 706     if (check_mqtt_server_arp_entry() == 1) {
3072  bf61 cdf5be        	call	_check_mqtt_server_arp_entry
3074  bf64 5a            	decw	x
3075  bf65 2611          	jrne	L3471
3076                     ; 708       mqtt_start_retry = 0;
3078  bf67 725f00a3      	clr	_mqtt_start_retry
3079                     ; 709       mqtt_start_ctr1 = 0; // Clear 100ms counter
3081  bf6b 725f00a6      	clr	_mqtt_start_ctr1
3082                     ; 710       mqtt_start_status |= MQTT_START_ARP_REQUEST_GOOD;
3084  bf6f 721a00a7      	bset	_mqtt_start_status,#5
3085                     ; 711       mqtt_start = MQTT_START_VERIFY_TCP;
3087  bf73 350300a8      	mov	_mqtt_start,#3
3090  bf77 81            	ret	
3091  bf78               L3471:
3092                     ; 713     else if (mqtt_start_ctr1 > 150) {
3094  bf78 c600a6        	ld	a,_mqtt_start_ctr1
3095  bf7b a197          	cp	a,#151
3096  bf7d 25a8          	jrult	L7371
3097                     ; 716       mqtt_start_status |= MQTT_START_ARP_REQUEST_ERROR;
3099  bf7f 721200a7      	bset	_mqtt_start_status,#1
3100                     ; 717       mqtt_start = MQTT_START_TCP_CONNECT;
3102  bf83 350100a8      	mov	_mqtt_start,#1
3103                     ; 719       mqtt_start_status = MQTT_START_NOT_STARTED;
3105  bf87 725f00a7      	clr	_mqtt_start_status
3106                     ; 720       mqtt_start_retry++;
3108  bf8b 725c00a3      	inc	_mqtt_start_retry
3110  bf8f 81            	ret	
3111  bf90               L1471:
3112                     ; 724   else if (mqtt_start == MQTT_START_VERIFY_TCP
3112                     ; 725         && mqtt_start_ctr2 > 10) {
3114  bf90 c600a8        	ld	a,_mqtt_start
3115  bf93 a103          	cp	a,#3
3116  bf95 263e          	jrne	L3571
3118  bf97 c600a5        	ld	a,_mqtt_start_ctr2
3119  bf9a a10b          	cp	a,#11
3120  bf9c 2537          	jrult	L3571
3121                     ; 726     mqtt_start_ctr2 = 0; // Clear 100ms counter
3123  bf9e 725f00a5      	clr	_mqtt_start_ctr2
3124                     ; 734     if ((mqtt_conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
3126  bfa2 ce00a1        	ldw	x,_mqtt_conn
3127  bfa5 e619          	ld	a,(25,x)
3128  bfa7 a40f          	and	a,#15
3129  bfa9 a103          	cp	a,#3
3130  bfab 260d          	jrne	L5571
3131                     ; 735       mqtt_start_retry = 0;
3133  bfad 725f00a3      	clr	_mqtt_start_retry
3134                     ; 736       mqtt_start_status |= MQTT_START_TCP_CONNECT_GOOD;
3136  bfb1 721c00a7      	bset	_mqtt_start_status,#6
3137                     ; 737       mqtt_start = MQTT_START_QUEUE_CONNECT;
3139  bfb5 350400a8      	mov	_mqtt_start,#4
3142  bfb9 81            	ret	
3143  bfba               L5571:
3144                     ; 739     else if (mqtt_start_ctr1 > 150) {
3146  bfba c600a6        	ld	a,_mqtt_start_ctr1
3147  bfbd a197          	cp	a,#151
3148  bfbf 2403ccc140    	jrult	L7371
3149                     ; 742       mqtt_start_status |= MQTT_START_TCP_CONNECT_ERROR;
3151  bfc4 721400a7      	bset	_mqtt_start_status,#2
3152                     ; 743       mqtt_start = MQTT_START_TCP_CONNECT;
3154  bfc8 350100a8      	mov	_mqtt_start,#1
3155                     ; 745       mqtt_start_status = MQTT_START_NOT_STARTED; 
3157  bfcc 725f00a7      	clr	_mqtt_start_status
3158                     ; 746       mqtt_start_retry++;
3160  bfd0 725c00a3      	inc	_mqtt_start_retry
3162  bfd4 81            	ret	
3163  bfd5               L3571:
3164                     ; 750   else if (mqtt_start == MQTT_START_QUEUE_CONNECT) {
3166  bfd5 c600a8        	ld	a,_mqtt_start
3167  bfd8 a104          	cp	a,#4
3168  bfda 2703ccc062    	jrne	L5671
3169                     ; 761     strcpy(client_id_text, devicetype);
3171  bfdf ae00a9        	ldw	x,#_client_id_text
3172  bfe2 90ae9e6c      	ldw	y,#L5261_devicetype
3173  bfe6               L411:
3174  bfe6 90f6          	ld	a,(y)
3175  bfe8 905c          	incw	y
3176  bfea f7            	ld	(x),a
3177  bfeb 5c            	incw	x
3178  bfec 4d            	tnz	a
3179  bfed 26f7          	jrne	L411
3180                     ; 763     client_id_text[strlen(client_id_text) - 1] = '\0';
3182  bfef ae00a9        	ldw	x,#_client_id_text
3183  bff2 cdf701        	call	_strlen
3185  bff5 5a            	decw	x
3186  bff6 724f00a9      	clr	(_client_id_text,x)
3187                     ; 765     strcat(client_id_text, mac_string);
3189  bffa ae010c        	ldw	x,#_mac_string
3190  bffd 89            	pushw	x
3191  bffe ae00a9        	ldw	x,#_client_id_text
3192  c001 cdf6ed        	call	_strcat
3194  c004 85            	popw	x
3195                     ; 766     client_id = client_id_text;
3197  c005 ae00a9        	ldw	x,#_client_id_text
3198  c008 cf00c3        	ldw	_client_id,x
3199                     ; 769     connect_flags = MQTT_CONNECT_CLEAN_SESSION;
3201  c00b 350200fa      	mov	_connect_flags,#2
3202                     ; 772     topic_base[topic_base_len] = '\0';
3204  c00f 5f            	clrw	x
3205  c010 c60073        	ld	a,_topic_base_len
3206  c013 97            	ld	xl,a
3207  c014 724f0074      	clr	(_topic_base,x)
3208                     ; 773     strcat(topic_base, "/status");
3210  c018 ae9ec5        	ldw	x,#L7671
3211  c01b 89            	pushw	x
3212  c01c ae0074        	ldw	x,#_topic_base
3213  c01f cdf6ed        	call	_strcat
3215  c022 85            	popw	x
3216                     ; 776     mqtt_connect(&mqttclient,
3216                     ; 777                  client_id,              // Based on MAC address
3216                     ; 778                  topic_base,             // Will topic
3216                     ; 779                  "offline",              // Will message 
3216                     ; 780                  7,                      // Will message size
3216                     ; 781                  stored_mqtt_username,   // Username
3216                     ; 782                  stored_mqtt_password,   // Password
3216                     ; 783                  connect_flags,          // Connect flags
3216                     ; 784                  mqtt_keep_alive);       // Ping interval
3218  c023 ce00f1        	ldw	x,_mqtt_keep_alive
3219  c026 89            	pushw	x
3220  c027 3b00fa        	push	_connect_flags
3221  c02a ae4040        	ldw	x,#_stored_mqtt_password
3222  c02d 89            	pushw	x
3223  c02e ae4035        	ldw	x,#_stored_mqtt_username
3224  c031 89            	pushw	x
3225  c032 ae0007        	ldw	x,#7
3226  c035 89            	pushw	x
3227  c036 ae9ebd        	ldw	x,#L1771
3228  c039 89            	pushw	x
3229  c03a ae0074        	ldw	x,#_topic_base
3230  c03d 89            	pushw	x
3231  c03e ce00c3        	ldw	x,_client_id
3232  c041 89            	pushw	x
3233  c042 ae00c5        	ldw	x,#_mqttclient
3234  c045 cdd0e1        	call	_mqtt_connect
3236  c048 5b0f          	addw	sp,#15
3237                     ; 786     if (mqttclient.error == MQTT_OK) {
3239  c04a ce00cf        	ldw	x,_mqttclient+10
3240  c04d 5a            	decw	x
3241  c04e 260d          	jrne	L3771
3242                     ; 787       mqtt_start_ctr1 = 0; // Clear 100ms counter
3244  c050 725f00a6      	clr	_mqtt_start_ctr1
3245                     ; 788       mqtt_start_status |= MQTT_START_MQTT_CONNECT_GOOD;
3247  c054 721e00a7      	bset	_mqtt_start_status,#7
3248                     ; 789       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE1;
3250  c058 350500a8      	mov	_mqtt_start,#5
3253  c05c 81            	ret	
3254  c05d               L3771:
3255                     ; 792       mqtt_start_status |= MQTT_START_MQTT_CONNECT_ERROR;
3257  c05d 721600a7      	bset	_mqtt_start_status,#3
3259  c061 81            	ret	
3260  c062               L5671:
3261                     ; 796   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE1) {
3263  c062 a105          	cp	a,#5
3264  c064 2635          	jrne	L1002
3265                     ; 806     if (mqtt_start_ctr1 > 20) {
3267  c066 c600a6        	ld	a,_mqtt_start_ctr1
3268  c069 a115          	cp	a,#21
3269  c06b 2403ccc140    	jrult	L7371
3270                     ; 817       topic_base[topic_base_len] = '\0';
3272  c070 c60073        	ld	a,_topic_base_len
3273  c073 5f            	clrw	x
3274  c074 97            	ld	xl,a
3275  c075 724f0074      	clr	(_topic_base,x)
3276                     ; 818       strcat(topic_base, "/on");
3278  c079 ae9eb9        	ldw	x,#L5002
3279  c07c 89            	pushw	x
3280  c07d ae0074        	ldw	x,#_topic_base
3281  c080 cdf6ed        	call	_strcat
3283  c083 85            	popw	x
3284                     ; 819       mqtt_subscribe(&mqttclient, topic_base, 0);
3286  c084 5f            	clrw	x
3287  c085 89            	pushw	x
3288  c086 ae0074        	ldw	x,#_topic_base
3289  c089 89            	pushw	x
3290  c08a ae00c5        	ldw	x,#_mqttclient
3291  c08d cdd3f0        	call	_mqtt_subscribe
3293  c090 5b04          	addw	sp,#4
3294                     ; 820       mqtt_start_ctr1 = 0; // Clear 100ms counter
3296  c092 725f00a6      	clr	_mqtt_start_ctr1
3297                     ; 821       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE2;
3299  c096 350600a8      	mov	_mqtt_start,#6
3301  c09a 81            	ret	
3302  c09b               L1002:
3303                     ; 825   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE2) {
3305  c09b a106          	cp	a,#6
3306  c09d 2632          	jrne	L1102
3307                     ; 826     if (mqtt_start_ctr1 > 10) {
3309  c09f c600a6        	ld	a,_mqtt_start_ctr1
3310  c0a2 a10b          	cp	a,#11
3311  c0a4 25c7          	jrult	L7371
3312                     ; 829       topic_base[topic_base_len] = '\0';
3314  c0a6 c60073        	ld	a,_topic_base_len
3315  c0a9 5f            	clrw	x
3316  c0aa 97            	ld	xl,a
3317  c0ab 724f0074      	clr	(_topic_base,x)
3318                     ; 830       strcat(topic_base, "/off");
3320  c0af ae9eb4        	ldw	x,#L5102
3321  c0b2 89            	pushw	x
3322  c0b3 ae0074        	ldw	x,#_topic_base
3323  c0b6 cdf6ed        	call	_strcat
3325  c0b9 85            	popw	x
3326                     ; 831       mqtt_subscribe(&mqttclient, topic_base, 0);
3328  c0ba 5f            	clrw	x
3329  c0bb 89            	pushw	x
3330  c0bc ae0074        	ldw	x,#_topic_base
3331  c0bf 89            	pushw	x
3332  c0c0 ae00c5        	ldw	x,#_mqttclient
3333  c0c3 cdd3f0        	call	_mqtt_subscribe
3335  c0c6 5b04          	addw	sp,#4
3336                     ; 832       mqtt_start_ctr1 = 0; // Clear 100ms counter
3338  c0c8 725f00a6      	clr	_mqtt_start_ctr1
3339                     ; 833       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE3;
3341  c0cc 350700a8      	mov	_mqtt_start,#7
3343  c0d0 81            	ret	
3344  c0d1               L1102:
3345                     ; 837   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE3) {
3347  c0d1 a107          	cp	a,#7
3348  c0d3 2632          	jrne	L1202
3349                     ; 838     if (mqtt_start_ctr1 > 10) {
3351  c0d5 c600a6        	ld	a,_mqtt_start_ctr1
3352  c0d8 a10b          	cp	a,#11
3353  c0da 2564          	jrult	L7371
3354                     ; 841       topic_base[topic_base_len] = '\0';
3356  c0dc c60073        	ld	a,_topic_base_len
3357  c0df 5f            	clrw	x
3358  c0e0 97            	ld	xl,a
3359  c0e1 724f0074      	clr	(_topic_base,x)
3360                     ; 842       strcat(topic_base, "/state-req");
3362  c0e5 ae9ea9        	ldw	x,#L5202
3363  c0e8 89            	pushw	x
3364  c0e9 ae0074        	ldw	x,#_topic_base
3365  c0ec cdf6ed        	call	_strcat
3367  c0ef 85            	popw	x
3368                     ; 843       mqtt_subscribe(&mqttclient, topic_base, 0);
3370  c0f0 5f            	clrw	x
3371  c0f1 89            	pushw	x
3372  c0f2 ae0074        	ldw	x,#_topic_base
3373  c0f5 89            	pushw	x
3374  c0f6 ae00c5        	ldw	x,#_mqttclient
3375  c0f9 cdd3f0        	call	_mqtt_subscribe
3377  c0fc 5b04          	addw	sp,#4
3378                     ; 844       mqtt_start_ctr1 = 0; // Clear 100ms counter
3380  c0fe 725f00a6      	clr	_mqtt_start_ctr1
3381                     ; 845       mqtt_start = MQTT_START_QUEUE_PUBLISH;
3383  c102 350900a8      	mov	_mqtt_start,#9
3385  c106 81            	ret	
3386  c107               L1202:
3387                     ; 849   else if (mqtt_start == MQTT_START_QUEUE_PUBLISH) {
3389  c107 a109          	cp	a,#9
3390  c109 2635          	jrne	L7371
3391                     ; 850     if (mqtt_start_ctr1 > 10) {
3393  c10b c600a6        	ld	a,_mqtt_start_ctr1
3394  c10e a10b          	cp	a,#11
3395  c110 252e          	jrult	L7371
3396                     ; 853       topic_base[topic_base_len] = '\0';
3398  c112 c60073        	ld	a,_topic_base_len
3399  c115 5f            	clrw	x
3400  c116 97            	ld	xl,a
3401  c117 724f0074      	clr	(_topic_base,x)
3402                     ; 854       strcat(topic_base, "/status");
3404  c11b ae9ec5        	ldw	x,#L7671
3405  c11e 89            	pushw	x
3406  c11f ae0074        	ldw	x,#_topic_base
3407  c122 cdf6ed        	call	_strcat
3409  c125 85            	popw	x
3410                     ; 855       mqtt_publish(&mqttclient,
3410                     ; 856                    topic_base,
3410                     ; 857 		   "online",
3410                     ; 858 		   6,
3410                     ; 859 		   MQTT_PUBLISH_QOS_0 | MQTT_PUBLISH_RETAIN);
3412  c126 4b01          	push	#1
3413  c128 ae0006        	ldw	x,#6
3414  c12b 89            	pushw	x
3415  c12c ae9ea2        	ldw	x,#L5302
3416  c12f 89            	pushw	x
3417  c130 ae0074        	ldw	x,#_topic_base
3418  c133 89            	pushw	x
3419  c134 ae00c5        	ldw	x,#_mqttclient
3420  c137 cdd18b        	call	_mqtt_publish
3422  c13a 5b07          	addw	sp,#7
3423                     ; 861       mqtt_start = MQTT_START_COMPLETE;
3425  c13c 351400a8      	mov	_mqtt_start,#20
3426  c140               L7371:
3427                     ; 864 }
3430  c140 81            	ret	
3466                     ; 867 void mqtt_sanity_check(void)
3466                     ; 868 {
3467                     .text:	section	.text,new
3468  c141               _mqtt_sanity_check:
3472                     ; 880   if (mqtt_restart_step == MQTT_RESTART_IDLE) {
3474  c141 c600a0        	ld	a,_mqtt_restart_step
3475  c144 2634          	jrne	L7402
3476                     ; 887     if (mqttclient.number_of_timeouts > 1) {
3478  c146 ce00d3        	ldw	x,_mqttclient+14
3479  c149 a30002        	cpw	x,#2
3480  c14c 2f08          	jrslt	L1502
3481                     ; 889       mqttclient.number_of_timeouts = 0;
3483  c14e 5f            	clrw	x
3484  c14f cf00d3        	ldw	_mqttclient+14,x
3485                     ; 890       mqtt_restart_step = MQTT_RESTART_BEGIN;
3487  c152 350100a0      	mov	_mqtt_restart_step,#1
3488  c156               L1502:
3489                     ; 896     if (mqtt_start == MQTT_START_COMPLETE
3489                     ; 897      && mqtt_conn->tcpstateflags == UIP_CLOSED) {
3491  c156 c600a8        	ld	a,_mqtt_start
3492  c159 a114          	cp	a,#20
3493  c15b 260b          	jrne	L3502
3495  c15d ce00a1        	ldw	x,_mqtt_conn
3496  c160 6d19          	tnz	(25,x)
3497  c162 2604          	jrne	L3502
3498                     ; 898       mqtt_restart_step = MQTT_RESTART_BEGIN;
3500  c164 350100a0      	mov	_mqtt_restart_step,#1
3501  c168               L3502:
3502                     ; 904     if (mqtt_start == MQTT_START_COMPLETE
3502                     ; 905      && mqttclient.error != MQTT_OK) {
3504  c168 a114          	cp	a,#20
3505  c16a 2703ccc1f7    	jrne	L7502
3507  c16f ce00cf        	ldw	x,_mqttclient+10
3508  c172 5a            	decw	x
3509  c173 27f7          	jreq	L7502
3510                     ; 906       mqtt_restart_step = MQTT_RESTART_BEGIN;
3512  c175 350100a0      	mov	_mqtt_restart_step,#1
3514  c179 81            	ret	
3515  c17a               L7402:
3516                     ; 910   else if (mqtt_restart_step == MQTT_RESTART_BEGIN) {
3518  c17a a101          	cp	a,#1
3519  c17c 2609          	jrne	L1602
3520                     ; 918     mqtt_restart_step = MQTT_RESTART_DISCONNECT_START;
3522  c17e 350200a0      	mov	_mqtt_restart_step,#2
3523                     ; 921     mqtt_start_status = MQTT_START_NOT_STARTED;
3525  c182 725f00a7      	clr	_mqtt_start_status
3528  c186 81            	ret	
3529  c187               L1602:
3530                     ; 924   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_START) {
3532  c187 a102          	cp	a,#2
3533  c189 260f          	jrne	L5602
3534                     ; 925     mqtt_restart_step = MQTT_RESTART_DISCONNECT_WAIT;
3536  c18b 350300a0      	mov	_mqtt_restart_step,#3
3537                     ; 927     mqtt_disconnect(&mqttclient);
3539  c18f ae00c5        	ldw	x,#_mqttclient
3540  c192 cdd4dc        	call	_mqtt_disconnect
3542                     ; 928     mqtt_sanity_ctr = 0; // Clear 100ms counter
3544  c195 725f00a4      	clr	_mqtt_sanity_ctr
3547  c199 81            	ret	
3548  c19a               L5602:
3549                     ; 931   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_WAIT) {
3551  c19a a103          	cp	a,#3
3552  c19c 260c          	jrne	L1702
3553                     ; 932     if (mqtt_sanity_ctr > 10) {
3555  c19e c600a4        	ld	a,_mqtt_sanity_ctr
3556  c1a1 a10b          	cp	a,#11
3557  c1a3 2552          	jrult	L7502
3558                     ; 935       mqtt_restart_step = MQTT_RESTART_TCPCLOSE;
3560  c1a5 350400a0      	mov	_mqtt_restart_step,#4
3562  c1a9 81            	ret	
3563  c1aa               L1702:
3564                     ; 939   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE) {
3566  c1aa a104          	cp	a,#4
3567  c1ac 260d          	jrne	L7702
3568                     ; 955     mqtt_close_tcp = 1;
3570  c1ae 35010107      	mov	_mqtt_close_tcp,#1
3571                     ; 957     mqtt_sanity_ctr = 0; // Clear 100ms counter
3573  c1b2 725f00a4      	clr	_mqtt_sanity_ctr
3574                     ; 958     mqtt_restart_step = MQTT_RESTART_TCPCLOSE_WAIT;
3576  c1b6 350500a0      	mov	_mqtt_restart_step,#5
3579  c1ba 81            	ret	
3580  c1bb               L7702:
3581                     ; 961   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE_WAIT) {
3583  c1bb a105          	cp	a,#5
3584  c1bd 2610          	jrne	L3012
3585                     ; 966     if (mqtt_sanity_ctr > 20) {
3587  c1bf c600a4        	ld	a,_mqtt_sanity_ctr
3588  c1c2 a115          	cp	a,#21
3589  c1c4 2531          	jrult	L7502
3590                     ; 967       mqtt_close_tcp = 0;
3592  c1c6 725f0107      	clr	_mqtt_close_tcp
3593                     ; 968       mqtt_restart_step = MQTT_RESTART_SIGNAL_STARTUP;
3595  c1ca 350600a0      	mov	_mqtt_restart_step,#6
3597  c1ce 81            	ret	
3598  c1cf               L3012:
3599                     ; 972   else if (mqtt_restart_step == MQTT_RESTART_SIGNAL_STARTUP) {
3601  c1cf a106          	cp	a,#6
3602  c1d1 2624          	jrne	L7502
3603                     ; 974     mqtt_init(&mqttclient,
3603                     ; 975               mqtt_sendbuf,
3603                     ; 976 	      sizeof(mqtt_sendbuf),
3603                     ; 977 	      &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
3603                     ; 978 	      UIP_APPDATA_SIZE,
3603                     ; 979 	      publish_callback);
3605  c1d3 aec1f8        	ldw	x,#_publish_callback
3606  c1d6 89            	pushw	x
3607  c1d7 ae01be        	ldw	x,#446
3608  c1da 89            	pushw	x
3609  c1db ae03ad        	ldw	x,#_uip_buf+54
3610  c1de 89            	pushw	x
3611  c1df ae00c8        	ldw	x,#200
3612  c1e2 89            	pushw	x
3613  c1e3 ae016f        	ldw	x,#_mqtt_sendbuf
3614  c1e6 89            	pushw	x
3615  c1e7 ae00c5        	ldw	x,#_mqttclient
3616  c1ea cdd089        	call	_mqtt_init
3618  c1ed 5b0a          	addw	sp,#10
3619                     ; 982     mqtt_restart_step = MQTT_RESTART_IDLE;
3621  c1ef 725f00a0      	clr	_mqtt_restart_step
3622                     ; 983     mqtt_start = MQTT_START_TCP_CONNECT;
3624  c1f3 350100a8      	mov	_mqtt_start,#1
3625  c1f7               L7502:
3626                     ; 985 }
3629  c1f7 81            	ret	
3702                     ; 1063 void publish_callback(void** unused, struct mqtt_response_publish *published)
3702                     ; 1064 {
3703                     .text:	section	.text,new
3704  c1f8               _publish_callback:
3706  c1f8 5204          	subw	sp,#4
3707       00000004      OFST:	set	4
3710                     ; 1070   pin_value = 0;
3712  c1fa 0f01          	clr	(OFST-3,sp)
3714                     ; 1071   ParseNum = 0;
3716                     ; 1099   pBuffer = uip_appdata;
3718  c1fc ce0375        	ldw	x,_uip_appdata
3720                     ; 1101   pBuffer = pBuffer + 1;
3722  c1ff 1c0012        	addw	x,#18
3724                     ; 1103   pBuffer = pBuffer + 1;
3727                     ; 1105   pBuffer = pBuffer + 2;
3730                     ; 1107   pBuffer = pBuffer + 14;
3732  c202 1f03          	ldw	(OFST-1,sp),x
3734                     ; 1109   pBuffer = pBuffer + strlen(stored_devicename) + 1;
3736  c204 ae4000        	ldw	x,#_stored_devicename
3737  c207 cdf701        	call	_strlen
3739  c20a 72fb03        	addw	x,(OFST-1,sp)
3740  c20d 5c            	incw	x
3741  c20e 1f03          	ldw	(OFST-1,sp),x
3743                     ; 1112   if (*pBuffer == 'o') {
3745  c210 f6            	ld	a,(x)
3746  c211 a16f          	cp	a,#111
3747  c213 267a          	jrne	L3412
3748                     ; 1113     pBuffer++;
3750  c215 5c            	incw	x
3751  c216 1f03          	ldw	(OFST-1,sp),x
3753                     ; 1114     if (*pBuffer == 'n') {
3755  c218 f6            	ld	a,(x)
3756  c219 a16e          	cp	a,#110
3757  c21b 2609          	jrne	L5412
3758                     ; 1115       pBuffer++;
3760  c21d 5c            	incw	x
3761  c21e 1f03          	ldw	(OFST-1,sp),x
3763                     ; 1116       pin_value = 1;
3765  c220 a601          	ld	a,#1
3766  c222 6b01          	ld	(OFST-3,sp),a
3769  c224 200b          	jra	L7412
3770  c226               L5412:
3771                     ; 1118     else if (*pBuffer == 'f') {
3773  c226 a166          	cp	a,#102
3774  c228 2607          	jrne	L7412
3775                     ; 1119       pBuffer = pBuffer + 2;
3777  c22a 1c0002        	addw	x,#2
3778  c22d 1f03          	ldw	(OFST-1,sp),x
3780                     ; 1120       pin_value = 0;
3782  c22f 0f01          	clr	(OFST-3,sp)
3784  c231               L7412:
3785                     ; 1124     if (*pBuffer == 'a') {
3787  c231 f6            	ld	a,(x)
3788  c232 a161          	cp	a,#97
3789  c234 2625          	jrne	L3512
3790                     ; 1125       pBuffer++;
3792  c236 5c            	incw	x
3793  c237 1f03          	ldw	(OFST-1,sp),x
3795                     ; 1126       if (*pBuffer == 'l') {
3797  c239 f6            	ld	a,(x)
3798  c23a a16c          	cp	a,#108
3799  c23c 264b          	jrne	L7612
3800                     ; 1127         pBuffer++;
3802  c23e 5c            	incw	x
3803  c23f 1f03          	ldw	(OFST-1,sp),x
3805                     ; 1128         if (*pBuffer == 'l') {
3807  c241 f6            	ld	a,(x)
3808  c242 a16c          	cp	a,#108
3809  c244 2643          	jrne	L7612
3810                     ; 1130 	  for (i=0; i<8; i++) GpioSetPin(i, (uint8_t)pin_value);
3812  c246 0f02          	clr	(OFST-2,sp)
3814  c248               L1612:
3817  c248 7b01          	ld	a,(OFST-3,sp)
3818  c24a 97            	ld	xl,a
3819  c24b 7b02          	ld	a,(OFST-2,sp)
3820  c24d 95            	ld	xh,a
3821  c24e cdbcb7        	call	_GpioSetPin
3825  c251 0c02          	inc	(OFST-2,sp)
3829  c253 7b02          	ld	a,(OFST-2,sp)
3830  c255 a108          	cp	a,#8
3831  c257 25ef          	jrult	L1612
3832  c259 202e          	jra	L7612
3833  c25b               L3512:
3834                     ; 1136     else if (*pBuffer == '0' || *pBuffer == '1') {
3836  c25b a130          	cp	a,#48
3837  c25d 2704          	jreq	L3712
3839  c25f a131          	cp	a,#49
3840  c261 2626          	jrne	L7612
3841  c263               L3712:
3842                     ; 1138       ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3844  c263 97            	ld	xl,a
3845  c264 a60a          	ld	a,#10
3846  c266 42            	mul	x,a
3847  c267 9f            	ld	a,xl
3848  c268 a0e0          	sub	a,#224
3849  c26a 6b02          	ld	(OFST-2,sp),a
3851                     ; 1139       pBuffer++;
3853  c26c 1e03          	ldw	x,(OFST-1,sp)
3854  c26e 5c            	incw	x
3855  c26f 1f03          	ldw	(OFST-1,sp),x
3857                     ; 1141       ParseNum += (uint8_t)(*pBuffer - '0');
3859  c271 f6            	ld	a,(x)
3860  c272 a030          	sub	a,#48
3861  c274 1b02          	add	a,(OFST-2,sp)
3862  c276 6b02          	ld	(OFST-2,sp),a
3864                     ; 1143       if (ParseNum > 0 && ParseNum < 9) {
3866  c278 270f          	jreq	L7612
3868  c27a a109          	cp	a,#9
3869  c27c 240b          	jruge	L7612
3870                     ; 1145         ParseNum--;
3872  c27e 0a02          	dec	(OFST-2,sp)
3874                     ; 1147         GpioSetPin(ParseNum, (uint8_t)pin_value);
3876  c280 7b01          	ld	a,(OFST-3,sp)
3877  c282 97            	ld	xl,a
3878  c283 7b02          	ld	a,(OFST-2,sp)
3879  c285 95            	ld	xh,a
3880  c286 cdbcb7        	call	_GpioSetPin
3882  c289               L7612:
3883                     ; 1153     mqtt_parse_complete = 1;
3885  c289 35010105      	mov	_mqtt_parse_complete,#1
3887  c28d 2013          	jra	L7712
3888  c28f               L3412:
3889                     ; 1157   else if (*pBuffer == 's') {
3891  c28f a173          	cp	a,#115
3892  c291 260f          	jrne	L7712
3893                     ; 1158     pBuffer += 8;
3895  c293 1c0008        	addw	x,#8
3897                     ; 1159     if (*pBuffer == 'q') {
3899  c296 f6            	ld	a,(x)
3900  c297 a171          	cp	a,#113
3901  c299 2607          	jrne	L7712
3902                     ; 1160       *pBuffer = '0'; // Destroy 'q' in buffer so subsequent "state"
3904  c29b a630          	ld	a,#48
3905  c29d f7            	ld	(x),a
3906                     ; 1171       state_request = STATE_REQUEST_RCVD;
3908  c29e 35010164      	mov	_state_request,#1
3909  c2a2               L7712:
3910                     ; 1174 }
3913  c2a2 5b04          	addw	sp,#4
3914  c2a4 81            	ret	
3953                     ; 1177 void publish_outbound(void)
3953                     ; 1178 {
3954                     .text:	section	.text,new
3955  c2a5               _publish_outbound:
3957  c2a5 88            	push	a
3958       00000001      OFST:	set	1
3961                     ; 1210   if (state_request == STATE_REQUEST_IDLE) {
3963  c2a6 c60164        	ld	a,_state_request
3964  c2a9 2703ccc39e    	jrne	L1222
3965                     ; 1213     xor_tmp = (uint8_t)(IO_16to9 ^ IO_16to9_sent);
3967  c2ae c6016e        	ld	a,_IO_16to9
3968  c2b1 c80168        	xor	a,_IO_16to9_sent
3969  c2b4 6b01          	ld	(OFST+0,sp),a
3971                     ; 1215     if      (xor_tmp & 0x80) publish_pinstate('I', '8', IO_16to9, 0x80); // Input 8
3973  c2b6 2a0a          	jrpl	L3222
3976  c2b8 4b80          	push	#128
3977  c2ba 3b016e        	push	_IO_16to9
3978  c2bd ae4938        	ldw	x,#18744
3981  c2c0 2060          	jp	LC002
3982  c2c2               L3222:
3983                     ; 1216     else if (xor_tmp & 0x40) publish_pinstate('I', '7', IO_16to9, 0x40); // Input 7
3985  c2c2 a540          	bcp	a,#64
3986  c2c4 270a          	jreq	L7222
3989  c2c6 4b40          	push	#64
3990  c2c8 3b016e        	push	_IO_16to9
3991  c2cb ae4937        	ldw	x,#18743
3994  c2ce 2052          	jp	LC002
3995  c2d0               L7222:
3996                     ; 1217     else if (xor_tmp & 0x20) publish_pinstate('I', '6', IO_16to9, 0x20); // Input 6
3998  c2d0 a520          	bcp	a,#32
3999  c2d2 270a          	jreq	L3322
4002  c2d4 4b20          	push	#32
4003  c2d6 3b016e        	push	_IO_16to9
4004  c2d9 ae4936        	ldw	x,#18742
4007  c2dc 2044          	jp	LC002
4008  c2de               L3322:
4009                     ; 1218     else if (xor_tmp & 0x10) publish_pinstate('I', '5', IO_16to9, 0x10); // Input 5
4011  c2de a510          	bcp	a,#16
4012  c2e0 270a          	jreq	L7322
4015  c2e2 4b10          	push	#16
4016  c2e4 3b016e        	push	_IO_16to9
4017  c2e7 ae4935        	ldw	x,#18741
4020  c2ea 2036          	jp	LC002
4021  c2ec               L7322:
4022                     ; 1219     else if (xor_tmp & 0x08) publish_pinstate('I', '4', IO_16to9, 0x08); // Input 4
4024  c2ec a508          	bcp	a,#8
4025  c2ee 270a          	jreq	L3422
4028  c2f0 4b08          	push	#8
4029  c2f2 3b016e        	push	_IO_16to9
4030  c2f5 ae4934        	ldw	x,#18740
4033  c2f8 2028          	jp	LC002
4034  c2fa               L3422:
4035                     ; 1220     else if (xor_tmp & 0x04) publish_pinstate('I', '3', IO_16to9, 0x04); // Input 3
4037  c2fa a504          	bcp	a,#4
4038  c2fc 270a          	jreq	L7422
4041  c2fe 4b04          	push	#4
4042  c300 3b016e        	push	_IO_16to9
4043  c303 ae4933        	ldw	x,#18739
4046  c306 201a          	jp	LC002
4047  c308               L7422:
4048                     ; 1221     else if (xor_tmp & 0x02) publish_pinstate('I', '2', IO_16to9, 0x02); // Input 2
4050  c308 a502          	bcp	a,#2
4051  c30a 270a          	jreq	L3522
4054  c30c 4b02          	push	#2
4055  c30e 3b016e        	push	_IO_16to9
4056  c311 ae4932        	ldw	x,#18738
4059  c314 200c          	jp	LC002
4060  c316               L3522:
4061                     ; 1222     else if (xor_tmp & 0x01) publish_pinstate('I', '1', IO_16to9, 0x01); // Input 1
4063  c316 a501          	bcp	a,#1
4064  c318 270c          	jreq	L5222
4067  c31a 4b01          	push	#1
4068  c31c 3b016e        	push	_IO_16to9
4069  c31f ae4931        	ldw	x,#18737
4071  c322               LC002:
4072  c322 cdc3ac        	call	_publish_pinstate
4073  c325 85            	popw	x
4074  c326               L5222:
4075                     ; 1226     xor_tmp = (uint8_t)(IO_8to1 ^ IO_8to1_sent);
4077  c326 c6016d        	ld	a,_IO_8to1
4078  c329 c80167        	xor	a,_IO_8to1_sent
4079  c32c 6b01          	ld	(OFST+0,sp),a
4081                     ; 1228     if      (xor_tmp & 0x80) publish_pinstate('O', '8', IO_8to1, 0x80); // Output 8
4083  c32e 2a0a          	jrpl	L1622
4086  c330 4b80          	push	#128
4087  c332 3b016d        	push	_IO_8to1
4088  c335 ae4f38        	ldw	x,#20280
4091  c338 2060          	jp	LC003
4092  c33a               L1622:
4093                     ; 1229     else if (xor_tmp & 0x40) publish_pinstate('O', '7', IO_8to1, 0x40); // Output 7
4095  c33a a540          	bcp	a,#64
4096  c33c 270a          	jreq	L5622
4099  c33e 4b40          	push	#64
4100  c340 3b016d        	push	_IO_8to1
4101  c343 ae4f37        	ldw	x,#20279
4104  c346 2052          	jp	LC003
4105  c348               L5622:
4106                     ; 1230     else if (xor_tmp & 0x20) publish_pinstate('O', '6', IO_8to1, 0x20); // Output 6
4108  c348 a520          	bcp	a,#32
4109  c34a 270a          	jreq	L1722
4112  c34c 4b20          	push	#32
4113  c34e 3b016d        	push	_IO_8to1
4114  c351 ae4f36        	ldw	x,#20278
4117  c354 2044          	jp	LC003
4118  c356               L1722:
4119                     ; 1231     else if (xor_tmp & 0x10) publish_pinstate('O', '5', IO_8to1, 0x10); // Output 5
4121  c356 a510          	bcp	a,#16
4122  c358 270a          	jreq	L5722
4125  c35a 4b10          	push	#16
4126  c35c 3b016d        	push	_IO_8to1
4127  c35f ae4f35        	ldw	x,#20277
4130  c362 2036          	jp	LC003
4131  c364               L5722:
4132                     ; 1232     else if (xor_tmp & 0x08) publish_pinstate('O', '4', IO_8to1, 0x08); // Output 4
4134  c364 a508          	bcp	a,#8
4135  c366 270a          	jreq	L1032
4138  c368 4b08          	push	#8
4139  c36a 3b016d        	push	_IO_8to1
4140  c36d ae4f34        	ldw	x,#20276
4143  c370 2028          	jp	LC003
4144  c372               L1032:
4145                     ; 1233     else if (xor_tmp & 0x04) publish_pinstate('O', '3', IO_8to1, 0x04); // Output 3
4147  c372 a504          	bcp	a,#4
4148  c374 270a          	jreq	L5032
4151  c376 4b04          	push	#4
4152  c378 3b016d        	push	_IO_8to1
4153  c37b ae4f33        	ldw	x,#20275
4156  c37e 201a          	jp	LC003
4157  c380               L5032:
4158                     ; 1234     else if (xor_tmp & 0x02) publish_pinstate('O', '2', IO_8to1, 0x02); // Output 2
4160  c380 a502          	bcp	a,#2
4161  c382 270a          	jreq	L1132
4164  c384 4b02          	push	#2
4165  c386 3b016d        	push	_IO_8to1
4166  c389 ae4f32        	ldw	x,#20274
4169  c38c 200c          	jp	LC003
4170  c38e               L1132:
4171                     ; 1235     else if (xor_tmp & 0x01) publish_pinstate('O', '1', IO_8to1, 0x01); // Output 1
4173  c38e a501          	bcp	a,#1
4174  c390 270c          	jreq	L1222
4177  c392 4b01          	push	#1
4178  c394 3b016d        	push	_IO_8to1
4179  c397 ae4f31        	ldw	x,#20273
4181  c39a               LC003:
4182  c39a cdc3ac        	call	_publish_pinstate
4183  c39d 85            	popw	x
4184  c39e               L1222:
4185                     ; 1239   if (state_request == STATE_REQUEST_RCVD) {
4187  c39e c60164        	ld	a,_state_request
4188  c3a1 4a            	dec	a
4189  c3a2 2606          	jrne	L7132
4190                     ; 1241     state_request = STATE_REQUEST_IDLE;
4192  c3a4 c70164        	ld	_state_request,a
4193                     ; 1242     publish_pinstate_all();
4195  c3a7 cdc444        	call	_publish_pinstate_all
4197  c3aa               L7132:
4198                     ; 1244 }
4201  c3aa 84            	pop	a
4202  c3ab 81            	ret	
4266                     ; 1247 void publish_pinstate(uint8_t direction, uint8_t pin, uint8_t value, uint8_t mask)
4266                     ; 1248 {
4267                     .text:	section	.text,new
4268  c3ac               _publish_pinstate:
4270  c3ac 89            	pushw	x
4271       00000000      OFST:	set	0
4274                     ; 1251   application_message[0] = '0';
4276  c3ad 353000f3      	mov	_application_message,#48
4277                     ; 1252   application_message[1] = (uint8_t)(pin);
4279  c3b1 9f            	ld	a,xl
4280  c3b2 c700f4        	ld	_application_message+1,a
4281                     ; 1253   application_message[2] = '\0';
4283  c3b5 725f00f5      	clr	_application_message+2
4284                     ; 1255   topic_base[topic_base_len] = '\0';
4286  c3b9 5f            	clrw	x
4287  c3ba c60073        	ld	a,_topic_base_len
4288  c3bd 97            	ld	xl,a
4289  c3be 724f0074      	clr	(_topic_base,x)
4290                     ; 1258   if (direction == 'I') {
4292  c3c2 7b01          	ld	a,(OFST+1,sp)
4293  c3c4 a149          	cp	a,#73
4294  c3c6 2618          	jrne	L3432
4295                     ; 1260     if (invert_input == 0xff) value = (uint8_t)(~value);
4297  c3c8 c60165        	ld	a,_invert_input
4298  c3cb 4c            	inc	a
4299  c3cc 2602          	jrne	L5432
4302  c3ce 0305          	cpl	(OFST+5,sp)
4303  c3d0               L5432:
4304                     ; 1261     if (value & mask) strcat(topic_base, "/in_on");
4306  c3d0 7b05          	ld	a,(OFST+5,sp)
4307  c3d2 1506          	bcp	a,(OFST+6,sp)
4308  c3d4 2705          	jreq	L7432
4311  c3d6 ae9e9b        	ldw	x,#L1532
4314  c3d9 2013          	jra	L7532
4315  c3db               L7432:
4316                     ; 1262     else strcat(topic_base, "/in_off");
4318  c3db ae9e93        	ldw	x,#L5532
4320  c3de 200e          	jra	L7532
4321  c3e0               L3432:
4322                     ; 1266     if (value & mask) strcat(topic_base, "/out_on");
4324  c3e0 7b05          	ld	a,(OFST+5,sp)
4325  c3e2 1506          	bcp	a,(OFST+6,sp)
4326  c3e4 2705          	jreq	L1632
4329  c3e6 ae9e8b        	ldw	x,#L3632
4332  c3e9 2003          	jra	L7532
4333  c3eb               L1632:
4334                     ; 1267     else strcat(topic_base, "/out_off");
4336  c3eb ae9e82        	ldw	x,#L7632
4338  c3ee               L7532:
4339  c3ee 89            	pushw	x
4340  c3ef ae0074        	ldw	x,#_topic_base
4341  c3f2 cdf6ed        	call	_strcat
4342  c3f5 85            	popw	x
4343                     ; 1271   mqtt_publish(&mqttclient,
4343                     ; 1272                topic_base,
4343                     ; 1273 	       application_message,
4343                     ; 1274 	       2,
4343                     ; 1275 	       MQTT_PUBLISH_QOS_0);
4345  c3f6 4b00          	push	#0
4346  c3f8 ae0002        	ldw	x,#2
4347  c3fb 89            	pushw	x
4348  c3fc ae00f3        	ldw	x,#_application_message
4349  c3ff 89            	pushw	x
4350  c400 ae0074        	ldw	x,#_topic_base
4351  c403 89            	pushw	x
4352  c404 ae00c5        	ldw	x,#_mqttclient
4353  c407 cdd18b        	call	_mqtt_publish
4355  c40a 5b07          	addw	sp,#7
4356                     ; 1277   if (direction == 'I') {
4358  c40c 7b01          	ld	a,(OFST+1,sp)
4359  c40e a149          	cp	a,#73
4360  c410 2619          	jrne	L1732
4361                     ; 1279     if (IO_16to9 & mask) IO_16to9_sent |= mask;
4363  c412 c6016e        	ld	a,_IO_16to9
4364  c415 1506          	bcp	a,(OFST+6,sp)
4365  c417 2707          	jreq	L3732
4368  c419 c60168        	ld	a,_IO_16to9_sent
4369  c41c 1a06          	or	a,(OFST+6,sp)
4371  c41e 2006          	jp	LC005
4372  c420               L3732:
4373                     ; 1280     else IO_16to9_sent &= (uint8_t)~mask;
4375  c420 7b06          	ld	a,(OFST+6,sp)
4376  c422 43            	cpl	a
4377  c423 c40168        	and	a,_IO_16to9_sent
4378  c426               LC005:
4379  c426 c70168        	ld	_IO_16to9_sent,a
4380  c429 2017          	jra	L7732
4381  c42b               L1732:
4382                     ; 1284     if (IO_8to1 & mask) IO_8to1_sent |= mask;
4384  c42b c6016d        	ld	a,_IO_8to1
4385  c42e 1506          	bcp	a,(OFST+6,sp)
4386  c430 2707          	jreq	L1042
4389  c432 c60167        	ld	a,_IO_8to1_sent
4390  c435 1a06          	or	a,(OFST+6,sp)
4392  c437 2006          	jp	LC004
4393  c439               L1042:
4394                     ; 1285     else IO_8to1_sent &= (uint8_t)~mask;
4396  c439 7b06          	ld	a,(OFST+6,sp)
4397  c43b 43            	cpl	a
4398  c43c c40167        	and	a,_IO_8to1_sent
4399  c43f               LC004:
4400  c43f c70167        	ld	_IO_8to1_sent,a
4401  c442               L7732:
4402                     ; 1287 }
4405  c442 85            	popw	x
4406  c443 81            	ret	
4455                     ; 1290 void publish_pinstate_all(void)
4455                     ; 1291 {
4456                     .text:	section	.text,new
4457  c444               _publish_pinstate_all:
4459  c444 89            	pushw	x
4460       00000002      OFST:	set	2
4463                     ; 1297   j = IO_16to9;
4465  c445 c6016e        	ld	a,_IO_16to9
4466  c448 6b02          	ld	(OFST+0,sp),a
4468                     ; 1298   k = IO_8to1;
4470  c44a c6016d        	ld	a,_IO_8to1
4471  c44d 6b01          	ld	(OFST-1,sp),a
4473                     ; 1301   if (invert_input == 0xff) j = (uint8_t)(~j);
4475  c44f c60165        	ld	a,_invert_input
4476  c452 4c            	inc	a
4477  c453 2602          	jrne	L3242
4480  c455 0302          	cpl	(OFST+0,sp)
4482  c457               L3242:
4483                     ; 1303   application_message[0] = j;
4485  c457 7b02          	ld	a,(OFST+0,sp)
4486  c459 c700f3        	ld	_application_message,a
4487                     ; 1304   application_message[1] = k;
4489  c45c 7b01          	ld	a,(OFST-1,sp)
4490  c45e c700f4        	ld	_application_message+1,a
4491                     ; 1305   application_message[2] = '\0';
4493  c461 725f00f5      	clr	_application_message+2
4494                     ; 1307   topic_base[topic_base_len] = '\0';
4496  c465 5f            	clrw	x
4497  c466 c60073        	ld	a,_topic_base_len
4498  c469 97            	ld	xl,a
4499  c46a 724f0074      	clr	(_topic_base,x)
4500                     ; 1308   strcat(topic_base, "/state");
4502  c46e ae9e7b        	ldw	x,#L5242
4503  c471 89            	pushw	x
4504  c472 ae0074        	ldw	x,#_topic_base
4505  c475 cdf6ed        	call	_strcat
4507  c478 85            	popw	x
4508                     ; 1311   mqtt_publish(&mqttclient,
4508                     ; 1312                topic_base,
4508                     ; 1313 	       application_message,
4508                     ; 1314 	       2,
4508                     ; 1315 	       MQTT_PUBLISH_QOS_0);
4510  c479 4b00          	push	#0
4511  c47b ae0002        	ldw	x,#2
4512  c47e 89            	pushw	x
4513  c47f ae00f3        	ldw	x,#_application_message
4514  c482 89            	pushw	x
4515  c483 ae0074        	ldw	x,#_topic_base
4516  c486 89            	pushw	x
4517  c487 ae00c5        	ldw	x,#_mqttclient
4518  c48a cdd18b        	call	_mqtt_publish
4520                     ; 1316 }
4523  c48d 5b09          	addw	sp,#9
4524  c48f 81            	ret	
4549                     ; 1321 void unlock_eeprom(void)
4549                     ; 1322 {
4550                     .text:	section	.text,new
4551  c490               _unlock_eeprom:
4555  c490 2008          	jra	L1442
4556  c492               L7342:
4557                     ; 1335     FLASH_DUKR = 0xAE; // MASS key 1
4559  c492 35ae5064      	mov	_FLASH_DUKR,#174
4560                     ; 1336     FLASH_DUKR = 0x56; // MASS key 2
4562  c496 35565064      	mov	_FLASH_DUKR,#86
4563  c49a               L1442:
4564                     ; 1334   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
4566  c49a 7207505ff3    	btjf	_FLASH_IAPSR,#3,L7342
4567                     ; 1364 }
4570  c49f 81            	ret	
4656                     ; 1367 void check_eeprom_settings(void)
4656                     ; 1368 {
4657                     .text:	section	.text,new
4658  c4a0               _check_eeprom_settings:
4660  c4a0 88            	push	a
4661       00000001      OFST:	set	1
4664                     ; 1380   if ((magic4 == 0x55) && 
4664                     ; 1381       (magic3 == 0xee) && 
4664                     ; 1382       (magic2 == 0x0f) && 
4664                     ; 1383       (magic1 == 0xf0)) {
4666  c4a1 c6402e        	ld	a,_magic4
4667  c4a4 a155          	cp	a,#85
4668  c4a6 2703ccc57b    	jrne	L5252
4670  c4ab c6402d        	ld	a,_magic3
4671  c4ae a1ee          	cp	a,#238
4672  c4b0 26f6          	jrne	L5252
4674  c4b2 c6402c        	ld	a,_magic2
4675  c4b5 a10f          	cp	a,#15
4676  c4b7 26ef          	jrne	L5252
4678  c4b9 c6402b        	ld	a,_magic1
4679  c4bc a1f0          	cp	a,#240
4680  c4be 26e8          	jrne	L5252
4681                     ; 1388     uip_ipaddr(IpAddr, stored_hostaddr[3], stored_hostaddr[2], stored_hostaddr[1], stored_hostaddr[0]);
4683  c4c0 c6402a        	ld	a,_stored_hostaddr+3
4684  c4c3 97            	ld	xl,a
4685  c4c4 c64029        	ld	a,_stored_hostaddr+2
4686  c4c7 02            	rlwa	x,a
4687  c4c8 cf00ff        	ldw	_IpAddr,x
4690  c4cb c64028        	ld	a,_stored_hostaddr+1
4691  c4ce 97            	ld	xl,a
4692  c4cf c64027        	ld	a,_stored_hostaddr
4693  c4d2 02            	rlwa	x,a
4694  c4d3 cf0101        	ldw	_IpAddr+2,x
4695                     ; 1389     uip_sethostaddr(IpAddr);
4697  c4d6 ce00ff        	ldw	x,_IpAddr
4698  c4d9 cf02c4        	ldw	_uip_hostaddr,x
4701  c4dc ce0101        	ldw	x,_IpAddr+2
4702  c4df cf02c6        	ldw	_uip_hostaddr+2,x
4703                     ; 1392     uip_ipaddr(IpAddr,
4705  c4e2 c64026        	ld	a,_stored_draddr+3
4706  c4e5 97            	ld	xl,a
4707  c4e6 c64025        	ld	a,_stored_draddr+2
4708  c4e9 02            	rlwa	x,a
4709  c4ea cf00ff        	ldw	_IpAddr,x
4712  c4ed c64024        	ld	a,_stored_draddr+1
4713  c4f0 97            	ld	xl,a
4714  c4f1 c64023        	ld	a,_stored_draddr
4715  c4f4 02            	rlwa	x,a
4716  c4f5 cf0101        	ldw	_IpAddr+2,x
4717                     ; 1397     uip_setdraddr(IpAddr);
4719  c4f8 ce00ff        	ldw	x,_IpAddr
4720  c4fb cf02bc        	ldw	_uip_draddr,x
4723  c4fe ce0101        	ldw	x,_IpAddr+2
4724  c501 cf02be        	ldw	_uip_draddr+2,x
4725                     ; 1400     uip_ipaddr(IpAddr,
4727  c504 c64022        	ld	a,_stored_netmask+3
4728  c507 97            	ld	xl,a
4729  c508 c64021        	ld	a,_stored_netmask+2
4730  c50b 02            	rlwa	x,a
4731  c50c cf00ff        	ldw	_IpAddr,x
4734  c50f c64020        	ld	a,_stored_netmask+1
4735  c512 97            	ld	xl,a
4736  c513 c6401f        	ld	a,_stored_netmask
4737  c516 02            	rlwa	x,a
4738  c517 cf0101        	ldw	_IpAddr+2,x
4739                     ; 1405     uip_setnetmask(IpAddr);
4741  c51a ce00ff        	ldw	x,_IpAddr
4742  c51d cf02c0        	ldw	_uip_netmask,x
4745  c520 ce0101        	ldw	x,_IpAddr+2
4746  c523 cf02c2        	ldw	_uip_netmask+2,x
4747                     ; 1409     uip_ipaddr(IpAddr,
4749  c526 c64034        	ld	a,_stored_mqttserveraddr+3
4750  c529 97            	ld	xl,a
4751  c52a c64033        	ld	a,_stored_mqttserveraddr+2
4752  c52d 02            	rlwa	x,a
4753  c52e cf00ff        	ldw	_IpAddr,x
4756  c531 c64032        	ld	a,_stored_mqttserveraddr+1
4757  c534 97            	ld	xl,a
4758  c535 c64031        	ld	a,_stored_mqttserveraddr
4759  c538 02            	rlwa	x,a
4760  c539 cf0101        	ldw	_IpAddr+2,x
4761                     ; 1414     uip_setmqttserveraddr(IpAddr);
4763  c53c ce00ff        	ldw	x,_IpAddr
4764  c53f cf02b8        	ldw	_uip_mqttserveraddr,x
4767  c542 ce0101        	ldw	x,_IpAddr+2
4768  c545 cf02ba        	ldw	_uip_mqttserveraddr+2,x
4769                     ; 1416     Port_Mqttd = stored_mqttport;
4771  c548 ce402f        	ldw	x,_stored_mqttport
4772  c54b cf00f6        	ldw	_Port_Mqttd,x
4773                     ; 1420     Port_Httpd = stored_port;
4775  c54e ce401d        	ldw	x,_stored_port
4776  c551 cf0103        	ldw	_Port_Httpd,x
4777                     ; 1425     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
4779  c554 55401c000a    	mov	_uip_ethaddr,_stored_uip_ethaddr_oct+5
4780                     ; 1426     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
4782  c559 55401b000b    	mov	_uip_ethaddr+1,_stored_uip_ethaddr_oct+4
4783                     ; 1427     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
4785  c55e 55401a000c    	mov	_uip_ethaddr+2,_stored_uip_ethaddr_oct+3
4786                     ; 1428     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
4788  c563 554019000d    	mov	_uip_ethaddr+3,_stored_uip_ethaddr_oct+2
4789                     ; 1429     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
4791  c568 554018000e    	mov	_uip_ethaddr+4,_stored_uip_ethaddr_oct+1
4792                     ; 1430     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
4794  c56d 554017000f    	mov	_uip_ethaddr+5,_stored_uip_ethaddr_oct
4795                     ; 1436     check_eeprom_IOpin_settings();
4797  c572 cdc887        	call	_check_eeprom_IOpin_settings
4799                     ; 1439     write_output_registers();
4801  c575 cdcec7        	call	_write_output_registers
4804  c578 ccc7da        	jra	L3252
4805  c57b               L5252:
4806                     ; 1448     uip_ipaddr(IpAddr, 192,168,1,4);
4808  c57b aec0a8        	ldw	x,#49320
4809  c57e cf00ff        	ldw	_IpAddr,x
4812  c581 ae0104        	ldw	x,#260
4813  c584 cf0101        	ldw	_IpAddr+2,x
4814                     ; 1449     uip_sethostaddr(IpAddr);
4816  c587 ce00ff        	ldw	x,_IpAddr
4817  c58a cf02c4        	ldw	_uip_hostaddr,x
4820  c58d ce0101        	ldw	x,_IpAddr+2
4821  c590 cf02c6        	ldw	_uip_hostaddr+2,x
4822                     ; 1451     stored_hostaddr[3] = 192;	// MSB
4824  c593 a6c0          	ld	a,#192
4825  c595 ae402a        	ldw	x,#_stored_hostaddr+3
4826  c598 cdf731        	call	c_eewrc
4828                     ; 1452     stored_hostaddr[2] = 168;	//
4830  c59b a6a8          	ld	a,#168
4831  c59d ae4029        	ldw	x,#_stored_hostaddr+2
4832  c5a0 cdf731        	call	c_eewrc
4834                     ; 1453     stored_hostaddr[1] = 1;	//
4836  c5a3 a601          	ld	a,#1
4837  c5a5 ae4028        	ldw	x,#_stored_hostaddr+1
4838  c5a8 cdf731        	call	c_eewrc
4840                     ; 1454     stored_hostaddr[0] = 4;	// LSB
4842  c5ab a604          	ld	a,#4
4843  c5ad ae4027        	ldw	x,#_stored_hostaddr
4844  c5b0 cdf731        	call	c_eewrc
4846                     ; 1457     uip_ipaddr(IpAddr, 192,168,1,1);
4848  c5b3 aec0a8        	ldw	x,#49320
4849  c5b6 cf00ff        	ldw	_IpAddr,x
4852  c5b9 ae0101        	ldw	x,#257
4853  c5bc cf0101        	ldw	_IpAddr+2,x
4854                     ; 1458     uip_setdraddr(IpAddr);
4856  c5bf ce00ff        	ldw	x,_IpAddr
4857  c5c2 cf02bc        	ldw	_uip_draddr,x
4860  c5c5 ce0101        	ldw	x,_IpAddr+2
4861  c5c8 cf02be        	ldw	_uip_draddr+2,x
4862                     ; 1460     stored_draddr[3] = 192;	// MSB
4864  c5cb a6c0          	ld	a,#192
4865  c5cd ae4026        	ldw	x,#_stored_draddr+3
4866  c5d0 cdf731        	call	c_eewrc
4868                     ; 1461     stored_draddr[2] = 168;	//
4870  c5d3 a6a8          	ld	a,#168
4871  c5d5 ae4025        	ldw	x,#_stored_draddr+2
4872  c5d8 cdf731        	call	c_eewrc
4874                     ; 1462     stored_draddr[1] = 1;		//
4876  c5db a601          	ld	a,#1
4877  c5dd ae4024        	ldw	x,#_stored_draddr+1
4878  c5e0 cdf731        	call	c_eewrc
4880                     ; 1463     stored_draddr[0] = 1;		// LSB
4882  c5e3 a601          	ld	a,#1
4883  c5e5 ae4023        	ldw	x,#_stored_draddr
4884  c5e8 cdf731        	call	c_eewrc
4886                     ; 1466     uip_ipaddr(IpAddr, 255,255,255,0);
4888  c5eb aeffff        	ldw	x,#65535
4889  c5ee cf00ff        	ldw	_IpAddr,x
4892  c5f1 aeff00        	ldw	x,#65280
4893  c5f4 cf0101        	ldw	_IpAddr+2,x
4894                     ; 1467     uip_setnetmask(IpAddr);
4896  c5f7 ce00ff        	ldw	x,_IpAddr
4897  c5fa cf02c0        	ldw	_uip_netmask,x
4900  c5fd ce0101        	ldw	x,_IpAddr+2
4901  c600 cf02c2        	ldw	_uip_netmask+2,x
4902                     ; 1469     stored_netmask[3] = 255;	// MSB
4904  c603 a6ff          	ld	a,#255
4905  c605 ae4022        	ldw	x,#_stored_netmask+3
4906  c608 cdf731        	call	c_eewrc
4908                     ; 1470     stored_netmask[2] = 255;	//
4910  c60b a6ff          	ld	a,#255
4911  c60d ae4021        	ldw	x,#_stored_netmask+2
4912  c610 cdf731        	call	c_eewrc
4914                     ; 1471     stored_netmask[1] = 255;	//
4916  c613 a6ff          	ld	a,#255
4917  c615 ae4020        	ldw	x,#_stored_netmask+1
4918  c618 cdf731        	call	c_eewrc
4920                     ; 1472     stored_netmask[0] = 0;	// LSB
4922  c61b 4f            	clr	a
4923  c61c ae401f        	ldw	x,#_stored_netmask
4924  c61f cdf731        	call	c_eewrc
4926                     ; 1476     uip_ipaddr(IpAddr, 0,0,0,0);
4928  c622 5f            	clrw	x
4929  c623 cf00ff        	ldw	_IpAddr,x
4932  c626 cf0101        	ldw	_IpAddr+2,x
4933                     ; 1477     uip_setmqttserveraddr(IpAddr);
4935  c629 cf02b8        	ldw	_uip_mqttserveraddr,x
4938  c62c cf02ba        	ldw	_uip_mqttserveraddr+2,x
4939                     ; 1480     stored_mqttserveraddr[3] = 0;	// MSB
4941  c62f 4f            	clr	a
4942  c630 ae4034        	ldw	x,#_stored_mqttserveraddr+3
4943  c633 cdf731        	call	c_eewrc
4945                     ; 1481     stored_mqttserveraddr[2] = 0;	//
4947  c636 4f            	clr	a
4948  c637 ae4033        	ldw	x,#_stored_mqttserveraddr+2
4949  c63a cdf731        	call	c_eewrc
4951                     ; 1482     stored_mqttserveraddr[1] = 0;	//
4953  c63d 4f            	clr	a
4954  c63e ae4032        	ldw	x,#_stored_mqttserveraddr+1
4955  c641 cdf731        	call	c_eewrc
4957                     ; 1483     stored_mqttserveraddr[0] = 0;	// LSB
4959  c644 4f            	clr	a
4960  c645 ae4031        	ldw	x,#_stored_mqttserveraddr
4961  c648 cdf731        	call	c_eewrc
4963                     ; 1486     stored_mqttport = 1883;		// Port
4965  c64b ae075b        	ldw	x,#1883
4966  c64e 89            	pushw	x
4967  c64f ae402f        	ldw	x,#_stored_mqttport
4968  c652 cdf71b        	call	c_eewrw
4970  c655 85            	popw	x
4971                     ; 1488     Port_Mqttd = 1883;
4973  c656 ae075b        	ldw	x,#1883
4974  c659 cf00f6        	ldw	_Port_Mqttd,x
4975                     ; 1491     for(i=0; i<11; i++) { stored_mqtt_username[i] = '\0'; }
4977  c65c 4f            	clr	a
4978  c65d 6b01          	ld	(OFST+0,sp),a
4980  c65f               L5652:
4983  c65f 5f            	clrw	x
4984  c660 97            	ld	xl,a
4985  c661 4f            	clr	a
4986  c662 1c4035        	addw	x,#_stored_mqtt_username
4987  c665 cdf731        	call	c_eewrc
4991  c668 0c01          	inc	(OFST+0,sp)
4995  c66a 7b01          	ld	a,(OFST+0,sp)
4996  c66c a10b          	cp	a,#11
4997  c66e 25ef          	jrult	L5652
4998                     ; 1492     for(i=0; i<11; i++) { stored_mqtt_password[i] = '\0'; }
5000  c670 4f            	clr	a
5001  c671 6b01          	ld	(OFST+0,sp),a
5003  c673               L3752:
5006  c673 5f            	clrw	x
5007  c674 97            	ld	xl,a
5008  c675 4f            	clr	a
5009  c676 1c4040        	addw	x,#_stored_mqtt_password
5010  c679 cdf731        	call	c_eewrc
5014  c67c 0c01          	inc	(OFST+0,sp)
5018  c67e 7b01          	ld	a,(OFST+0,sp)
5019  c680 a10b          	cp	a,#11
5020  c682 25ef          	jrult	L3752
5021                     ; 1497     stored_port = 8080;
5023  c684 ae1f90        	ldw	x,#8080
5024  c687 89            	pushw	x
5025  c688 ae401d        	ldw	x,#_stored_port
5026  c68b cdf71b        	call	c_eewrw
5028  c68e 85            	popw	x
5029                     ; 1499     Port_Httpd = 8080;
5031  c68f ae1f90        	ldw	x,#8080
5032  c692 cf0103        	ldw	_Port_Httpd,x
5033                     ; 1515     stored_uip_ethaddr_oct[5] = 0xc2;	//MAC MSB
5035  c695 a6c2          	ld	a,#194
5036  c697 ae401c        	ldw	x,#_stored_uip_ethaddr_oct+5
5037  c69a cdf731        	call	c_eewrc
5039                     ; 1516     stored_uip_ethaddr_oct[4] = 0x4d;
5041  c69d a64d          	ld	a,#77
5042  c69f ae401b        	ldw	x,#_stored_uip_ethaddr_oct+4
5043  c6a2 cdf731        	call	c_eewrc
5045                     ; 1517     stored_uip_ethaddr_oct[3] = 0x69;
5047  c6a5 a669          	ld	a,#105
5048  c6a7 ae401a        	ldw	x,#_stored_uip_ethaddr_oct+3
5049  c6aa cdf731        	call	c_eewrc
5051                     ; 1518     stored_uip_ethaddr_oct[2] = 0x6b;
5053  c6ad a66b          	ld	a,#107
5054  c6af ae4019        	ldw	x,#_stored_uip_ethaddr_oct+2
5055  c6b2 cdf731        	call	c_eewrc
5057                     ; 1519     stored_uip_ethaddr_oct[1] = 0x65;
5059  c6b5 a665          	ld	a,#101
5060  c6b7 ae4018        	ldw	x,#_stored_uip_ethaddr_oct+1
5061  c6ba cdf731        	call	c_eewrc
5063                     ; 1520     stored_uip_ethaddr_oct[0] = 0x00;	//MAC LSB
5065  c6bd 4f            	clr	a
5066  c6be ae4017        	ldw	x,#_stored_uip_ethaddr_oct
5067  c6c1 cdf731        	call	c_eewrc
5069                     ; 1522     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
5071  c6c4 35c2000a      	mov	_uip_ethaddr,#194
5072                     ; 1523     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
5074  c6c8 354d000b      	mov	_uip_ethaddr+1,#77
5075                     ; 1524     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
5077  c6cc 3569000c      	mov	_uip_ethaddr+2,#105
5078                     ; 1525     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
5080  c6d0 356b000d      	mov	_uip_ethaddr+3,#107
5081                     ; 1526     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
5083  c6d4 3565000e      	mov	_uip_ethaddr+4,#101
5084                     ; 1527     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
5086  c6d8 725f000f      	clr	_uip_ethaddr+5
5087                     ; 1530     stored_devicename[0] =  'N';
5089  c6dc a64e          	ld	a,#78
5090  c6de ae4000        	ldw	x,#_stored_devicename
5091  c6e1 cdf731        	call	c_eewrc
5093                     ; 1531     stored_devicename[1] =  'e';
5095  c6e4 a665          	ld	a,#101
5096  c6e6 ae4001        	ldw	x,#_stored_devicename+1
5097  c6e9 cdf731        	call	c_eewrc
5099                     ; 1532     stored_devicename[2] =  'w';
5101  c6ec a677          	ld	a,#119
5102  c6ee ae4002        	ldw	x,#_stored_devicename+2
5103  c6f1 cdf731        	call	c_eewrc
5105                     ; 1533     stored_devicename[3] =  'D';
5107  c6f4 a644          	ld	a,#68
5108  c6f6 ae4003        	ldw	x,#_stored_devicename+3
5109  c6f9 cdf731        	call	c_eewrc
5111                     ; 1534     stored_devicename[4] =  'e';
5113  c6fc a665          	ld	a,#101
5114  c6fe ae4004        	ldw	x,#_stored_devicename+4
5115  c701 cdf731        	call	c_eewrc
5117                     ; 1535     stored_devicename[5] =  'v';
5119  c704 a676          	ld	a,#118
5120  c706 ae4005        	ldw	x,#_stored_devicename+5
5121  c709 cdf731        	call	c_eewrc
5123                     ; 1536     stored_devicename[6] =  'i';
5125  c70c a669          	ld	a,#105
5126  c70e ae4006        	ldw	x,#_stored_devicename+6
5127  c711 cdf731        	call	c_eewrc
5129                     ; 1537     stored_devicename[7] =  'c';
5131  c714 a663          	ld	a,#99
5132  c716 ae4007        	ldw	x,#_stored_devicename+7
5133  c719 cdf731        	call	c_eewrc
5135                     ; 1538     stored_devicename[8] =  'e';
5137  c71c a665          	ld	a,#101
5138  c71e ae4008        	ldw	x,#_stored_devicename+8
5139  c721 cdf731        	call	c_eewrc
5141                     ; 1539     stored_devicename[9] =  '0';
5143  c724 a630          	ld	a,#48
5144  c726 ae4009        	ldw	x,#_stored_devicename+9
5145  c729 cdf731        	call	c_eewrc
5147                     ; 1540     stored_devicename[10] = '0';
5149  c72c a630          	ld	a,#48
5150  c72e ae400a        	ldw	x,#_stored_devicename+10
5151  c731 cdf731        	call	c_eewrc
5153                     ; 1541     stored_devicename[11] = '0';
5155  c734 a630          	ld	a,#48
5156  c736 ae400b        	ldw	x,#_stored_devicename+11
5157  c739 cdf731        	call	c_eewrc
5159                     ; 1542     for (i=12; i<20; i++) stored_devicename[i] = '\0';
5161  c73c a60c          	ld	a,#12
5162  c73e 6b01          	ld	(OFST+0,sp),a
5164  c740               L1062:
5167  c740 5f            	clrw	x
5168  c741 97            	ld	xl,a
5169  c742 4f            	clr	a
5170  c743 1c4000        	addw	x,#_stored_devicename
5171  c746 cdf731        	call	c_eewrc
5175  c749 0c01          	inc	(OFST+0,sp)
5179  c74b 7b01          	ld	a,(OFST+0,sp)
5180  c74d a114          	cp	a,#20
5181  c74f 25ef          	jrult	L1062
5182                     ; 1547     stored_config_settings[0] = '0'; // Set to Invert Output OFF
5184  c751 a630          	ld	a,#48
5185  c753 ae404c        	ldw	x,#_stored_config_settings
5186  c756 cdf731        	call	c_eewrc
5188                     ; 1548     stored_config_settings[1] = '0'; // Set to Invert Input Off
5190  c759 a630          	ld	a,#48
5191  c75b ae404d        	ldw	x,#_stored_config_settings+1
5192  c75e cdf731        	call	c_eewrc
5194                     ; 1549     stored_config_settings[2] = '2'; // Set to Retain pin states
5196  c761 a632          	ld	a,#50
5197  c763 ae404e        	ldw	x,#_stored_config_settings+2
5198  c766 cdf731        	call	c_eewrc
5200                     ; 1550     stored_config_settings[3] = '0'; // Set to Half Duplex
5202  c769 a630          	ld	a,#48
5203  c76b ae404f        	ldw	x,#_stored_config_settings+3
5204  c76e cdf731        	call	c_eewrc
5206                     ; 1551     stored_config_settings[4] = '0'; // undefined
5208  c771 a630          	ld	a,#48
5209  c773 ae4050        	ldw	x,#_stored_config_settings+4
5210  c776 cdf731        	call	c_eewrc
5212                     ; 1552     stored_config_settings[5] = '0'; // undefined
5214  c779 a630          	ld	a,#48
5215  c77b ae4051        	ldw	x,#_stored_config_settings+5
5216  c77e cdf731        	call	c_eewrc
5218                     ; 1553     invert_output = 0x00;			// Turn off output invert bit
5220  c781 725f0166      	clr	_invert_output
5221                     ; 1554     invert_input = 0x00;			// Turn off output invert bit
5223  c785 725f0165      	clr	_invert_input
5224                     ; 1555     IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9 = 0x00;
5226  c789 4f            	clr	a
5227  c78a ae404b        	ldw	x,#_stored_IO_16to9
5228  c78d cdf731        	call	c_eewrc
5230  c790 725f0168      	clr	_IO_16to9_sent
5231  c794 725f016a      	clr	_IO_16to9_new2
5232  c798 725f016c      	clr	_IO_16to9_new1
5233  c79c 725f016e      	clr	_IO_16to9
5234                     ; 1556     IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1  = 0x00;
5236  c7a0 4f            	clr	a
5237  c7a1 ae4014        	ldw	x,#_stored_IO_8to1
5238  c7a4 cdf731        	call	c_eewrc
5240  c7a7 725f0167      	clr	_IO_8to1_sent
5241  c7ab 725f0169      	clr	_IO_8to1_new2
5242  c7af 725f016b      	clr	_IO_8to1_new1
5243  c7b3 725f016d      	clr	_IO_8to1
5244                     ; 1557     write_output_registers();          // Set Relay Control outputs
5246  c7b7 cdcec7        	call	_write_output_registers
5248                     ; 1560     magic4 = 0x55;		// MSB
5250  c7ba a655          	ld	a,#85
5251  c7bc ae402e        	ldw	x,#_magic4
5252  c7bf cdf731        	call	c_eewrc
5254                     ; 1561     magic3 = 0xee;		//
5256  c7c2 a6ee          	ld	a,#238
5257  c7c4 ae402d        	ldw	x,#_magic3
5258  c7c7 cdf731        	call	c_eewrc
5260                     ; 1562     magic2 = 0x0f;		//
5262  c7ca a60f          	ld	a,#15
5263  c7cc ae402c        	ldw	x,#_magic2
5264  c7cf cdf731        	call	c_eewrc
5266                     ; 1563     magic1 = 0xf0;		// LSB
5268  c7d2 a6f0          	ld	a,#240
5269  c7d4 ae402b        	ldw	x,#_magic1
5270  c7d7 cdf731        	call	c_eewrc
5272  c7da               L3252:
5273                     ; 1568   for (i=0; i<4; i++) {
5275  c7da 4f            	clr	a
5276  c7db 6b01          	ld	(OFST+0,sp),a
5278  c7dd               L7062:
5279                     ; 1569     Pending_hostaddr[i] = stored_hostaddr[i];
5281  c7dd 5f            	clrw	x
5282  c7de 97            	ld	xl,a
5283  c7df d64027        	ld	a,(_stored_hostaddr,x)
5284  c7e2 d70143        	ld	(_Pending_hostaddr,x),a
5285                     ; 1570     Pending_draddr[i] = stored_draddr[i];
5287  c7e5 5f            	clrw	x
5288  c7e6 7b01          	ld	a,(OFST+0,sp)
5289  c7e8 97            	ld	xl,a
5290  c7e9 d64023        	ld	a,(_stored_draddr,x)
5291  c7ec d7013f        	ld	(_Pending_draddr,x),a
5292                     ; 1571     Pending_netmask[i] = stored_netmask[i];
5294  c7ef 5f            	clrw	x
5295  c7f0 7b01          	ld	a,(OFST+0,sp)
5296  c7f2 97            	ld	xl,a
5297  c7f3 d6401f        	ld	a,(_stored_netmask,x)
5298  c7f6 d7013b        	ld	(_Pending_netmask,x),a
5299                     ; 1568   for (i=0; i<4; i++) {
5301  c7f9 0c01          	inc	(OFST+0,sp)
5305  c7fb 7b01          	ld	a,(OFST+0,sp)
5306  c7fd a104          	cp	a,#4
5307  c7ff 25dc          	jrult	L7062
5308                     ; 1574   Pending_port = stored_port;
5310  c801 ce401d        	ldw	x,_stored_port
5311  c804 cf0139        	ldw	_Pending_port,x
5312                     ; 1576   for (i=0; i<20; i++) {
5314  c807 4f            	clr	a
5315  c808 6b01          	ld	(OFST+0,sp),a
5317  c80a               L5162:
5318                     ; 1577     Pending_devicename[i] = stored_devicename[i];
5320  c80a 5f            	clrw	x
5321  c80b 97            	ld	xl,a
5322  c80c d64000        	ld	a,(_stored_devicename,x)
5323  c80f d70125        	ld	(_Pending_devicename,x),a
5324                     ; 1576   for (i=0; i<20; i++) {
5326  c812 0c01          	inc	(OFST+0,sp)
5330  c814 7b01          	ld	a,(OFST+0,sp)
5331  c816 a114          	cp	a,#20
5332  c818 25f0          	jrult	L5162
5333                     ; 1580   for (i=0; i<6; i++) {
5335  c81a 4f            	clr	a
5336  c81b 6b01          	ld	(OFST+0,sp),a
5338  c81d               L3262:
5339                     ; 1581     Pending_config_settings[i] = stored_config_settings[i];
5341  c81d 5f            	clrw	x
5342  c81e 97            	ld	xl,a
5343  c81f d6404c        	ld	a,(_stored_config_settings,x)
5344  c822 d7011f        	ld	(_Pending_config_settings,x),a
5345                     ; 1582     Pending_uip_ethaddr_oct[i] = stored_uip_ethaddr_oct[i];
5347  c825 5f            	clrw	x
5348  c826 7b01          	ld	a,(OFST+0,sp)
5349  c828 97            	ld	xl,a
5350  c829 d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5351  c82c d70119        	ld	(_Pending_uip_ethaddr_oct,x),a
5352                     ; 1580   for (i=0; i<6; i++) {
5354  c82f 0c01          	inc	(OFST+0,sp)
5358  c831 7b01          	ld	a,(OFST+0,sp)
5359  c833 a106          	cp	a,#6
5360  c835 25e6          	jrult	L3262
5361                     ; 1586   for (i=0; i<4; i++) {
5363  c837 4f            	clr	a
5364  c838 6b01          	ld	(OFST+0,sp),a
5366  c83a               L1362:
5367                     ; 1587     Pending_mqttserveraddr[i] = stored_mqttserveraddr[i];
5369  c83a 5f            	clrw	x
5370  c83b 97            	ld	xl,a
5371  c83c d64031        	ld	a,(_stored_mqttserveraddr,x)
5372  c83f d7015f        	ld	(_Pending_mqttserveraddr,x),a
5373                     ; 1586   for (i=0; i<4; i++) {
5375  c842 0c01          	inc	(OFST+0,sp)
5379  c844 7b01          	ld	a,(OFST+0,sp)
5380  c846 a104          	cp	a,#4
5381  c848 25f0          	jrult	L1362
5382                     ; 1589   Pending_mqttport = stored_mqttport;
5384  c84a ce402f        	ldw	x,_stored_mqttport
5385  c84d cf015d        	ldw	_Pending_mqttport,x
5386                     ; 1590   for (i=0; i<11; i++) {
5388  c850 4f            	clr	a
5389  c851 6b01          	ld	(OFST+0,sp),a
5391  c853               L7362:
5392                     ; 1591     Pending_mqtt_username[i] = stored_mqtt_username[i];
5394  c853 5f            	clrw	x
5395  c854 97            	ld	xl,a
5396  c855 d64035        	ld	a,(_stored_mqtt_username,x)
5397  c858 d70152        	ld	(_Pending_mqtt_username,x),a
5398                     ; 1592     Pending_mqtt_password[i] = stored_mqtt_password[i];
5400  c85b 5f            	clrw	x
5401  c85c 7b01          	ld	a,(OFST+0,sp)
5402  c85e 97            	ld	xl,a
5403  c85f d64040        	ld	a,(_stored_mqtt_password,x)
5404  c862 d70147        	ld	(_Pending_mqtt_password,x),a
5405                     ; 1590   for (i=0; i<11; i++) {
5407  c865 0c01          	inc	(OFST+0,sp)
5411  c867 7b01          	ld	a,(OFST+0,sp)
5412  c869 a10b          	cp	a,#11
5413  c86b 25e6          	jrult	L7362
5414                     ; 1595   strcat(topic_base, stored_devicename);
5416  c86d ae4000        	ldw	x,#_stored_devicename
5417  c870 89            	pushw	x
5418  c871 ae0074        	ldw	x,#_topic_base
5419  c874 cdf6ed        	call	_strcat
5421  c877 85            	popw	x
5422                     ; 1598   topic_base_len = (uint8_t)strlen(topic_base);
5424  c878 ae0074        	ldw	x,#_topic_base
5425  c87b cdf701        	call	_strlen
5427  c87e 9f            	ld	a,xl
5428  c87f c70073        	ld	_topic_base_len,a
5429                     ; 1602   update_mac_string();
5431  c882 cdc95d        	call	_update_mac_string
5433                     ; 1604 }
5436  c885 84            	pop	a
5437  c886 81            	ret	
5474                     ; 1607 void check_eeprom_IOpin_settings(void)
5474                     ; 1608 {
5475                     .text:	section	.text,new
5476  c887               _check_eeprom_IOpin_settings:
5480                     ; 1614   if (stored_config_settings[0] != '0' && stored_config_settings[0] != '1') {
5482  c887 c6404c        	ld	a,_stored_config_settings
5483  c88a a130          	cp	a,#48
5484  c88c 270c          	jreq	L5562
5486  c88e a131          	cp	a,#49
5487  c890 2708          	jreq	L5562
5488                     ; 1615     stored_config_settings[0] = '0';
5490  c892 a630          	ld	a,#48
5491  c894 ae404c        	ldw	x,#_stored_config_settings
5492  c897 cdf731        	call	c_eewrc
5494  c89a               L5562:
5495                     ; 1617   if (stored_config_settings[1] != '0' && stored_config_settings[1] != '1') {
5497  c89a c6404d        	ld	a,_stored_config_settings+1
5498  c89d a130          	cp	a,#48
5499  c89f 270c          	jreq	L7562
5501  c8a1 a131          	cp	a,#49
5502  c8a3 2708          	jreq	L7562
5503                     ; 1618     stored_config_settings[1] = '0';
5505  c8a5 a630          	ld	a,#48
5506  c8a7 ae404d        	ldw	x,#_stored_config_settings+1
5507  c8aa cdf731        	call	c_eewrc
5509  c8ad               L7562:
5510                     ; 1620   if (stored_config_settings[2] != '0' && stored_config_settings[2] != '1' && stored_config_settings[2] != '2') {
5512  c8ad c6404e        	ld	a,_stored_config_settings+2
5513  c8b0 a130          	cp	a,#48
5514  c8b2 2710          	jreq	L1662
5516  c8b4 a131          	cp	a,#49
5517  c8b6 270c          	jreq	L1662
5519  c8b8 a132          	cp	a,#50
5520  c8ba 2708          	jreq	L1662
5521                     ; 1621     stored_config_settings[2] = '2';
5523  c8bc a632          	ld	a,#50
5524  c8be ae404e        	ldw	x,#_stored_config_settings+2
5525  c8c1 cdf731        	call	c_eewrc
5527  c8c4               L1662:
5528                     ; 1623   if (stored_config_settings[3] != '0' && stored_config_settings[3] != '1') {
5530  c8c4 c6404f        	ld	a,_stored_config_settings+3
5531  c8c7 a130          	cp	a,#48
5532  c8c9 270c          	jreq	L3662
5534  c8cb a131          	cp	a,#49
5535  c8cd 2708          	jreq	L3662
5536                     ; 1624     stored_config_settings[3] = '0';
5538  c8cf a630          	ld	a,#48
5539  c8d1 ae404f        	ldw	x,#_stored_config_settings+3
5540  c8d4 cdf731        	call	c_eewrc
5542  c8d7               L3662:
5543                     ; 1626   if (stored_config_settings[4] != '0') {
5545  c8d7 c64050        	ld	a,_stored_config_settings+4
5546  c8da a130          	cp	a,#48
5547  c8dc 2708          	jreq	L5662
5548                     ; 1627     stored_config_settings[4] = '0';
5550  c8de a630          	ld	a,#48
5551  c8e0 ae4050        	ldw	x,#_stored_config_settings+4
5552  c8e3 cdf731        	call	c_eewrc
5554  c8e6               L5662:
5555                     ; 1629   if (stored_config_settings[5] != '0') {
5557  c8e6 c64051        	ld	a,_stored_config_settings+5
5558  c8e9 a130          	cp	a,#48
5559  c8eb 2708          	jreq	L7662
5560                     ; 1630     stored_config_settings[5] = '0';
5562  c8ed a630          	ld	a,#48
5563  c8ef ae4051        	ldw	x,#_stored_config_settings+5
5564  c8f2 cdf731        	call	c_eewrc
5566  c8f5               L7662:
5567                     ; 1634   if (stored_config_settings[0] == '0') invert_output = 0x00;
5569  c8f5 c6404c        	ld	a,_stored_config_settings
5570  c8f8 a130          	cp	a,#48
5571  c8fa 2606          	jrne	L1762
5574  c8fc 725f0166      	clr	_invert_output
5576  c900 2004          	jra	L3762
5577  c902               L1762:
5578                     ; 1635   else invert_output = 0xff;
5580  c902 35ff0166      	mov	_invert_output,#255
5581  c906               L3762:
5582                     ; 1638   if (stored_config_settings[1] == '0') invert_input = 0x00;
5584  c906 c6404d        	ld	a,_stored_config_settings+1
5585  c909 a130          	cp	a,#48
5586  c90b 2606          	jrne	L5762
5589  c90d 725f0165      	clr	_invert_input
5591  c911 2004          	jra	L7762
5592  c913               L5762:
5593                     ; 1639   else invert_input = 0xff;
5595  c913 35ff0165      	mov	_invert_input,#255
5596  c917               L7762:
5597                     ; 1644   if (stored_config_settings[2] == '0') {
5599  c917 c6404e        	ld	a,_stored_config_settings+2
5600  c91a a130          	cp	a,#48
5601  c91c 2609          	jrne	L1072
5602                     ; 1646     IO_16to9 = 0x00;
5604  c91e 725f016e      	clr	_IO_16to9
5605                     ; 1647     IO_8to1 = 0x00;
5607  c922 725f016d      	clr	_IO_8to1
5610  c926 81            	ret	
5611  c927               L1072:
5612                     ; 1649   else if (stored_config_settings[2] == '1') {
5614  c927 a131          	cp	a,#49
5615  c929 2609          	jrne	L5072
5616                     ; 1651     IO_16to9 = 0xff;
5618  c92b 35ff016e      	mov	_IO_16to9,#255
5619                     ; 1652     IO_8to1 = 0xff;
5621  c92f 35ff016d      	mov	_IO_8to1,#255
5624  c933 81            	ret	
5625  c934               L5072:
5626                     ; 1656     IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9;
5628  c934 55404b0168    	mov	_IO_16to9_sent,_stored_IO_16to9
5629  c939 550168016a    	mov	_IO_16to9_new2,_IO_16to9_sent
5630  c93e 55016a016c    	mov	_IO_16to9_new1,_IO_16to9_new2
5631  c943 55016c016e    	mov	_IO_16to9,_IO_16to9_new1
5632                     ; 1657     IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1;
5634  c948 5540140167    	mov	_IO_8to1_sent,_stored_IO_8to1
5635  c94d 5501670169    	mov	_IO_8to1_new2,_IO_8to1_sent
5636  c952 550169016b    	mov	_IO_8to1_new1,_IO_8to1_new2
5637  c957 55016b016d    	mov	_IO_8to1,_IO_8to1_new1
5638                     ; 1659 }  
5641  c95c 81            	ret	
5684                     ; 1662 void update_mac_string(void)
5684                     ; 1663 {
5685                     .text:	section	.text,new
5686  c95d               _update_mac_string:
5688  c95d 89            	pushw	x
5689       00000002      OFST:	set	2
5692                     ; 1669   i = 5;
5694  c95e a605          	ld	a,#5
5695  c960 6b01          	ld	(OFST-1,sp),a
5697                     ; 1670   j = 0;
5699  c962 0f02          	clr	(OFST+0,sp)
5701  c964               L7272:
5702                     ; 1672     emb_itoa(stored_uip_ethaddr_oct[i], OctetArray, 16, 2);
5704  c964 4b02          	push	#2
5705  c966 4b10          	push	#16
5706  c968 ae005c        	ldw	x,#_OctetArray
5707  c96b 89            	pushw	x
5708  c96c 7b05          	ld	a,(OFST+3,sp)
5709  c96e 5f            	clrw	x
5710  c96f 97            	ld	xl,a
5711  c970 d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5712  c973 b703          	ld	c_lreg+3,a
5713  c975 3f02          	clr	c_lreg+2
5714  c977 3f01          	clr	c_lreg+1
5715  c979 3f00          	clr	c_lreg
5716  c97b be02          	ldw	x,c_lreg+2
5717  c97d 89            	pushw	x
5718  c97e be00          	ldw	x,c_lreg
5719  c980 89            	pushw	x
5720  c981 cda505        	call	_emb_itoa
5722  c984 5b08          	addw	sp,#8
5723                     ; 1673     mac_string[j++] = OctetArray[0];
5725  c986 7b02          	ld	a,(OFST+0,sp)
5726  c988 0c02          	inc	(OFST+0,sp)
5728  c98a 5f            	clrw	x
5729  c98b 97            	ld	xl,a
5730  c98c c6005c        	ld	a,_OctetArray
5731  c98f d7010c        	ld	(_mac_string,x),a
5732                     ; 1674     mac_string[j++] = OctetArray[1];
5734  c992 7b02          	ld	a,(OFST+0,sp)
5735  c994 0c02          	inc	(OFST+0,sp)
5737  c996 5f            	clrw	x
5738  c997 97            	ld	xl,a
5739  c998 c6005d        	ld	a,_OctetArray+1
5740  c99b d7010c        	ld	(_mac_string,x),a
5741                     ; 1675     i--;
5743  c99e 0a01          	dec	(OFST-1,sp)
5745                     ; 1671   while (j<12) {
5747  c9a0 7b02          	ld	a,(OFST+0,sp)
5748  c9a2 a10c          	cp	a,#12
5749  c9a4 25be          	jrult	L7272
5750                     ; 1677   mac_string[12] = '\0';
5752  c9a6 725f0118      	clr	_mac_string+12
5753                     ; 1678 }
5756  c9aa 85            	popw	x
5757  c9ab 81            	ret	
5835                     ; 1681 void check_runtime_changes(void)
5835                     ; 1682 {
5836                     .text:	section	.text,new
5837  c9ac               _check_runtime_changes:
5839  c9ac 88            	push	a
5840       00000001      OFST:	set	1
5843                     ; 1695   read_input_registers();
5845  c9ad cdce2f        	call	_read_input_registers
5847                     ; 1697   if (parse_complete == 1 || mqtt_parse_complete == 1) {
5849  c9b0 c60106        	ld	a,_parse_complete
5850  c9b3 4a            	dec	a
5851  c9b4 2706          	jreq	L3572
5853  c9b6 c60105        	ld	a,_mqtt_parse_complete
5854  c9b9 4a            	dec	a
5855  c9ba 2624          	jrne	L1572
5856  c9bc               L3572:
5857                     ; 1721     if (stored_IO_8to1 != IO_8to1) {
5859  c9bc c64014        	ld	a,_stored_IO_8to1
5860  c9bf c1016d        	cp	a,_IO_8to1
5861  c9c2 2710          	jreq	L5572
5862                     ; 1725       if (stored_config_settings[2] == '2') {
5864  c9c4 c6404e        	ld	a,_stored_config_settings+2
5865  c9c7 a132          	cp	a,#50
5866  c9c9 2609          	jrne	L5572
5867                     ; 1726         stored_IO_8to1 = IO_8to1;
5869  c9cb c6016d        	ld	a,_IO_8to1
5870  c9ce ae4014        	ldw	x,#_stored_IO_8to1
5871  c9d1 cdf731        	call	c_eewrc
5873  c9d4               L5572:
5874                     ; 1730     write_output_registers();
5876  c9d4 cdcec7        	call	_write_output_registers
5878                     ; 1736     if (mqtt_parse_complete == 1) {
5880  c9d7 c60105        	ld	a,_mqtt_parse_complete
5881  c9da 4a            	dec	a
5882  c9db 2603          	jrne	L1572
5883                     ; 1738       mqtt_parse_complete = 0;
5885  c9dd c70105        	ld	_mqtt_parse_complete,a
5886  c9e0               L1572:
5887                     ; 1743   if (parse_complete == 1) {
5889  c9e0 c60106        	ld	a,_parse_complete
5890  c9e3 4a            	dec	a
5891  c9e4 2703cccc71    	jrne	L3672
5892                     ; 1784     if ((Pending_config_settings[0] != stored_config_settings[0])
5892                     ; 1785      || (stored_IO_8to1 != IO_8to1)) {
5894  c9e9 c6404c        	ld	a,_stored_config_settings
5895  c9ec c1011f        	cp	a,_Pending_config_settings
5896  c9ef 2608          	jrne	L7672
5898  c9f1 c64014        	ld	a,_stored_IO_8to1
5899  c9f4 c1016d        	cp	a,_IO_8to1
5900  c9f7 272d          	jreq	L5672
5901  c9f9               L7672:
5902                     ; 1788       stored_config_settings[0] = Pending_config_settings[0];
5904  c9f9 c6011f        	ld	a,_Pending_config_settings
5905  c9fc ae404c        	ldw	x,#_stored_config_settings
5906  c9ff cdf731        	call	c_eewrc
5908                     ; 1791       if (stored_config_settings[0] == '0') invert_output = 0x00;
5910  ca02 c6404c        	ld	a,_stored_config_settings
5911  ca05 a130          	cp	a,#48
5912  ca07 2606          	jrne	L1772
5915  ca09 725f0166      	clr	_invert_output
5917  ca0d 2004          	jra	L3772
5918  ca0f               L1772:
5919                     ; 1792       else invert_output = 0xff;
5921  ca0f 35ff0166      	mov	_invert_output,#255
5922  ca13               L3772:
5923                     ; 1796       if (stored_config_settings[2] == '2') {
5925  ca13 c6404e        	ld	a,_stored_config_settings+2
5926  ca16 a132          	cp	a,#50
5927  ca18 2609          	jrne	L5772
5928                     ; 1797         stored_IO_8to1 = IO_8to1;
5930  ca1a c6016d        	ld	a,_IO_8to1
5931  ca1d ae4014        	ldw	x,#_stored_IO_8to1
5932  ca20 cdf731        	call	c_eewrc
5934  ca23               L5772:
5935                     ; 1801       write_output_registers();
5937  ca23 cdcec7        	call	_write_output_registers
5939  ca26               L5672:
5940                     ; 1805     if (Pending_config_settings[1] != stored_config_settings[1]) {
5942  ca26 c6404d        	ld	a,_stored_config_settings+1
5943  ca29 c10120        	cp	a,_Pending_config_settings+1
5944  ca2c 271e          	jreq	L7772
5945                     ; 1807       stored_config_settings[1] = Pending_config_settings[1];
5947  ca2e c60120        	ld	a,_Pending_config_settings+1
5948  ca31 ae404d        	ldw	x,#_stored_config_settings+1
5949  ca34 cdf731        	call	c_eewrc
5951                     ; 1810       if (stored_config_settings[1] == '0') invert_input = 0x00;
5953  ca37 c6404d        	ld	a,_stored_config_settings+1
5954  ca3a a130          	cp	a,#48
5955  ca3c 2606          	jrne	L1003
5958  ca3e 725f0165      	clr	_invert_input
5960  ca42 2004          	jra	L3003
5961  ca44               L1003:
5962                     ; 1811       else invert_input = 0xff;
5964  ca44 35ff0165      	mov	_invert_input,#255
5965  ca48               L3003:
5966                     ; 1815       restart_request = 1;
5968  ca48 35010109      	mov	_restart_request,#1
5969  ca4c               L7772:
5970                     ; 1849     if (Pending_config_settings[2] != stored_config_settings[2]) {
5972  ca4c c6404e        	ld	a,_stored_config_settings+2
5973  ca4f c10121        	cp	a,_Pending_config_settings+2
5974  ca52 2709          	jreq	L5003
5975                     ; 1851       stored_config_settings[2] = Pending_config_settings[2];
5977  ca54 c60121        	ld	a,_Pending_config_settings+2
5978  ca57 ae404e        	ldw	x,#_stored_config_settings+2
5979  ca5a cdf731        	call	c_eewrc
5981  ca5d               L5003:
5982                     ; 1855     if (Pending_config_settings[3] != stored_config_settings[3]) {
5984  ca5d c6404f        	ld	a,_stored_config_settings+3
5985  ca60 c10122        	cp	a,_Pending_config_settings+3
5986  ca63 270d          	jreq	L7003
5987                     ; 1858       stored_config_settings[3] = Pending_config_settings[3];
5989  ca65 c60122        	ld	a,_Pending_config_settings+3
5990  ca68 ae404f        	ldw	x,#_stored_config_settings+3
5991  ca6b cdf731        	call	c_eewrc
5993                     ; 1860       user_reboot_request = 1;
5995  ca6e 3501010a      	mov	_user_reboot_request,#1
5996  ca72               L7003:
5997                     ; 1863     stored_config_settings[4] = Pending_config_settings[4];
5999  ca72 c60123        	ld	a,_Pending_config_settings+4
6000  ca75 ae4050        	ldw	x,#_stored_config_settings+4
6001  ca78 cdf731        	call	c_eewrc
6003                     ; 1864     stored_config_settings[5] = Pending_config_settings[5];
6005  ca7b c60124        	ld	a,_Pending_config_settings+5
6006  ca7e ae4051        	ldw	x,#_stored_config_settings+5
6007  ca81 cdf731        	call	c_eewrc
6009                     ; 1867     if (stored_hostaddr[3] != Pending_hostaddr[3] ||
6009                     ; 1868         stored_hostaddr[2] != Pending_hostaddr[2] ||
6009                     ; 1869         stored_hostaddr[1] != Pending_hostaddr[1] ||
6009                     ; 1870         stored_hostaddr[0] != Pending_hostaddr[0]) {
6011  ca84 c6402a        	ld	a,_stored_hostaddr+3
6012  ca87 c10146        	cp	a,_Pending_hostaddr+3
6013  ca8a 2618          	jrne	L3103
6015  ca8c c64029        	ld	a,_stored_hostaddr+2
6016  ca8f c10145        	cp	a,_Pending_hostaddr+2
6017  ca92 2610          	jrne	L3103
6019  ca94 c64028        	ld	a,_stored_hostaddr+1
6020  ca97 c10144        	cp	a,_Pending_hostaddr+1
6021  ca9a 2608          	jrne	L3103
6023  ca9c c64027        	ld	a,_stored_hostaddr
6024  ca9f c10143        	cp	a,_Pending_hostaddr
6025  caa2 2713          	jreq	L1103
6026  caa4               L3103:
6027                     ; 1872       for (i=0; i<4; i++) stored_hostaddr[i] = Pending_hostaddr[i];
6029  caa4 4f            	clr	a
6030  caa5 6b01          	ld	(OFST+0,sp),a
6032  caa7               L1203:
6035  caa7 5f            	clrw	x
6036  caa8 97            	ld	xl,a
6037  caa9 d60143        	ld	a,(_Pending_hostaddr,x)
6038  caac d74027        	ld	(_stored_hostaddr,x),a
6041  caaf 0c01          	inc	(OFST+0,sp)
6045  cab1 7b01          	ld	a,(OFST+0,sp)
6046  cab3 a104          	cp	a,#4
6047  cab5 25f0          	jrult	L1203
6048  cab7               L1103:
6049                     ; 1876     if (stored_draddr[3] != Pending_draddr[3] ||
6049                     ; 1877         stored_draddr[2] != Pending_draddr[2] ||
6049                     ; 1878         stored_draddr[1] != Pending_draddr[1] ||
6049                     ; 1879         stored_draddr[0] != Pending_draddr[0]) {
6051  cab7 c64026        	ld	a,_stored_draddr+3
6052  caba c10142        	cp	a,_Pending_draddr+3
6053  cabd 2618          	jrne	L1303
6055  cabf c64025        	ld	a,_stored_draddr+2
6056  cac2 c10141        	cp	a,_Pending_draddr+2
6057  cac5 2610          	jrne	L1303
6059  cac7 c64024        	ld	a,_stored_draddr+1
6060  caca c10140        	cp	a,_Pending_draddr+1
6061  cacd 2608          	jrne	L1303
6063  cacf c64023        	ld	a,_stored_draddr
6064  cad2 c1013f        	cp	a,_Pending_draddr
6065  cad5 2717          	jreq	L7203
6066  cad7               L1303:
6067                     ; 1881       for (i=0; i<4; i++) stored_draddr[i] = Pending_draddr[i];
6069  cad7 4f            	clr	a
6070  cad8 6b01          	ld	(OFST+0,sp),a
6072  cada               L7303:
6075  cada 5f            	clrw	x
6076  cadb 97            	ld	xl,a
6077  cadc d6013f        	ld	a,(_Pending_draddr,x)
6078  cadf d74023        	ld	(_stored_draddr,x),a
6081  cae2 0c01          	inc	(OFST+0,sp)
6085  cae4 7b01          	ld	a,(OFST+0,sp)
6086  cae6 a104          	cp	a,#4
6087  cae8 25f0          	jrult	L7303
6088                     ; 1882       restart_request = 1;
6090  caea 35010109      	mov	_restart_request,#1
6091  caee               L7203:
6092                     ; 1886     if (stored_netmask[3] != Pending_netmask[3] ||
6092                     ; 1887         stored_netmask[2] != Pending_netmask[2] ||
6092                     ; 1888         stored_netmask[1] != Pending_netmask[1] ||
6092                     ; 1889         stored_netmask[0] != Pending_netmask[0]) {
6094  caee c64022        	ld	a,_stored_netmask+3
6095  caf1 c1013e        	cp	a,_Pending_netmask+3
6096  caf4 2618          	jrne	L7403
6098  caf6 c64021        	ld	a,_stored_netmask+2
6099  caf9 c1013d        	cp	a,_Pending_netmask+2
6100  cafc 2610          	jrne	L7403
6102  cafe c64020        	ld	a,_stored_netmask+1
6103  cb01 c1013c        	cp	a,_Pending_netmask+1
6104  cb04 2608          	jrne	L7403
6106  cb06 c6401f        	ld	a,_stored_netmask
6107  cb09 c1013b        	cp	a,_Pending_netmask
6108  cb0c 2717          	jreq	L5403
6109  cb0e               L7403:
6110                     ; 1891       for (i=0; i<4; i++) stored_netmask[i] = Pending_netmask[i];
6112  cb0e 4f            	clr	a
6113  cb0f 6b01          	ld	(OFST+0,sp),a
6115  cb11               L5503:
6118  cb11 5f            	clrw	x
6119  cb12 97            	ld	xl,a
6120  cb13 d6013b        	ld	a,(_Pending_netmask,x)
6121  cb16 d7401f        	ld	(_stored_netmask,x),a
6124  cb19 0c01          	inc	(OFST+0,sp)
6128  cb1b 7b01          	ld	a,(OFST+0,sp)
6129  cb1d a104          	cp	a,#4
6130  cb1f 25f0          	jrult	L5503
6131                     ; 1892       restart_request = 1;
6133  cb21 35010109      	mov	_restart_request,#1
6134  cb25               L5403:
6135                     ; 1896     if (stored_port != Pending_port) {
6137  cb25 ce401d        	ldw	x,_stored_port
6138  cb28 c30139        	cpw	x,_Pending_port
6139  cb2b 270f          	jreq	L3603
6140                     ; 1898       stored_port = Pending_port;
6142  cb2d ce0139        	ldw	x,_Pending_port
6143  cb30 89            	pushw	x
6144  cb31 ae401d        	ldw	x,#_stored_port
6145  cb34 cdf71b        	call	c_eewrw
6147  cb37 35010109      	mov	_restart_request,#1
6148  cb3b 85            	popw	x
6149                     ; 1900       restart_request = 1;
6151  cb3c               L3603:
6152                     ; 1904     for(i=0; i<20; i++) {
6154  cb3c 4f            	clr	a
6155  cb3d 6b01          	ld	(OFST+0,sp),a
6157  cb3f               L5603:
6158                     ; 1905       if (stored_devicename[i] != Pending_devicename[i]) {
6160  cb3f 5f            	clrw	x
6161  cb40 97            	ld	xl,a
6162  cb41 905f          	clrw	y
6163  cb43 9097          	ld	yl,a
6164  cb45 90d64000      	ld	a,(_stored_devicename,y)
6165  cb49 d10125        	cp	a,(_Pending_devicename,x)
6166  cb4c 270e          	jreq	L3703
6167                     ; 1906         stored_devicename[i] = Pending_devicename[i];
6169  cb4e 7b01          	ld	a,(OFST+0,sp)
6170  cb50 5f            	clrw	x
6171  cb51 97            	ld	xl,a
6172  cb52 d60125        	ld	a,(_Pending_devicename,x)
6173  cb55 d74000        	ld	(_stored_devicename,x),a
6174                     ; 1912         restart_request = 1;
6176  cb58 35010109      	mov	_restart_request,#1
6177  cb5c               L3703:
6178                     ; 1904     for(i=0; i<20; i++) {
6180  cb5c 0c01          	inc	(OFST+0,sp)
6184  cb5e 7b01          	ld	a,(OFST+0,sp)
6185  cb60 a114          	cp	a,#20
6186  cb62 25db          	jrult	L5603
6187                     ; 1919     strcpy(topic_base, devicetype);
6189  cb64 ae0074        	ldw	x,#_topic_base
6190  cb67 90ae9e6c      	ldw	y,#L5261_devicetype
6191  cb6b               L013:
6192  cb6b 90f6          	ld	a,(y)
6193  cb6d 905c          	incw	y
6194  cb6f f7            	ld	(x),a
6195  cb70 5c            	incw	x
6196  cb71 4d            	tnz	a
6197  cb72 26f7          	jrne	L013
6198                     ; 1920     strcat(topic_base, stored_devicename);
6200  cb74 ae4000        	ldw	x,#_stored_devicename
6201  cb77 89            	pushw	x
6202  cb78 ae0074        	ldw	x,#_topic_base
6203  cb7b cdf6ed        	call	_strcat
6205  cb7e 85            	popw	x
6206                     ; 1921     topic_base_len = (uint8_t)strlen(topic_base);
6208  cb7f ae0074        	ldw	x,#_topic_base
6209  cb82 cdf701        	call	_strlen
6211  cb85 9f            	ld	a,xl
6212  cb86 c70073        	ld	_topic_base_len,a
6213                     ; 1924     if (stored_mqttserveraddr[3] != Pending_mqttserveraddr[3] ||
6213                     ; 1925         stored_mqttserveraddr[2] != Pending_mqttserveraddr[2] ||
6213                     ; 1926         stored_mqttserveraddr[1] != Pending_mqttserveraddr[1] ||
6213                     ; 1927         stored_mqttserveraddr[0] != Pending_mqttserveraddr[0]) {
6215  cb89 c64034        	ld	a,_stored_mqttserveraddr+3
6216  cb8c c10162        	cp	a,_Pending_mqttserveraddr+3
6217  cb8f 2618          	jrne	L7703
6219  cb91 c64033        	ld	a,_stored_mqttserveraddr+2
6220  cb94 c10161        	cp	a,_Pending_mqttserveraddr+2
6221  cb97 2610          	jrne	L7703
6223  cb99 c64032        	ld	a,_stored_mqttserveraddr+1
6224  cb9c c10160        	cp	a,_Pending_mqttserveraddr+1
6225  cb9f 2608          	jrne	L7703
6227  cba1 c64031        	ld	a,_stored_mqttserveraddr
6228  cba4 c1015f        	cp	a,_Pending_mqttserveraddr
6229  cba7 2717          	jreq	L5703
6230  cba9               L7703:
6231                     ; 1929       for (i=0; i<4; i++) stored_mqttserveraddr[i] = Pending_mqttserveraddr[i];
6233  cba9 4f            	clr	a
6234  cbaa 6b01          	ld	(OFST+0,sp),a
6236  cbac               L5013:
6239  cbac 5f            	clrw	x
6240  cbad 97            	ld	xl,a
6241  cbae d6015f        	ld	a,(_Pending_mqttserveraddr,x)
6242  cbb1 d74031        	ld	(_stored_mqttserveraddr,x),a
6245  cbb4 0c01          	inc	(OFST+0,sp)
6249  cbb6 7b01          	ld	a,(OFST+0,sp)
6250  cbb8 a104          	cp	a,#4
6251  cbba 25f0          	jrult	L5013
6252                     ; 1931       restart_request = 1;
6254  cbbc 35010109      	mov	_restart_request,#1
6255  cbc0               L5703:
6256                     ; 1935     if (stored_mqttport != Pending_mqttport) {
6258  cbc0 ce402f        	ldw	x,_stored_mqttport
6259  cbc3 c3015d        	cpw	x,_Pending_mqttport
6260  cbc6 270f          	jreq	L3113
6261                     ; 1937       stored_mqttport = Pending_mqttport;
6263  cbc8 ce015d        	ldw	x,_Pending_mqttport
6264  cbcb 89            	pushw	x
6265  cbcc ae402f        	ldw	x,#_stored_mqttport
6266  cbcf cdf71b        	call	c_eewrw
6268  cbd2 35010109      	mov	_restart_request,#1
6269  cbd6 85            	popw	x
6270                     ; 1939       restart_request = 1;
6272  cbd7               L3113:
6273                     ; 1943     for(i=0; i<11; i++) {
6275  cbd7 4f            	clr	a
6276  cbd8 6b01          	ld	(OFST+0,sp),a
6278  cbda               L5113:
6279                     ; 1944       if (stored_mqtt_username[i] != Pending_mqtt_username[i]) {
6281  cbda 5f            	clrw	x
6282  cbdb 97            	ld	xl,a
6283  cbdc 905f          	clrw	y
6284  cbde 9097          	ld	yl,a
6285  cbe0 90d64035      	ld	a,(_stored_mqtt_username,y)
6286  cbe4 d10152        	cp	a,(_Pending_mqtt_username,x)
6287  cbe7 270e          	jreq	L3213
6288                     ; 1945         stored_mqtt_username[i] = Pending_mqtt_username[i];
6290  cbe9 7b01          	ld	a,(OFST+0,sp)
6291  cbeb 5f            	clrw	x
6292  cbec 97            	ld	xl,a
6293  cbed d60152        	ld	a,(_Pending_mqtt_username,x)
6294  cbf0 d74035        	ld	(_stored_mqtt_username,x),a
6295                     ; 1947         restart_request = 1;
6297  cbf3 35010109      	mov	_restart_request,#1
6298  cbf7               L3213:
6299                     ; 1943     for(i=0; i<11; i++) {
6301  cbf7 0c01          	inc	(OFST+0,sp)
6305  cbf9 7b01          	ld	a,(OFST+0,sp)
6306  cbfb a10b          	cp	a,#11
6307  cbfd 25db          	jrult	L5113
6308                     ; 1952     for(i=0; i<11; i++) {
6310  cbff 4f            	clr	a
6311  cc00 6b01          	ld	(OFST+0,sp),a
6313  cc02               L5213:
6314                     ; 1953       if (stored_mqtt_password[i] != Pending_mqtt_password[i]) {
6316  cc02 5f            	clrw	x
6317  cc03 97            	ld	xl,a
6318  cc04 905f          	clrw	y
6319  cc06 9097          	ld	yl,a
6320  cc08 90d64040      	ld	a,(_stored_mqtt_password,y)
6321  cc0c d10147        	cp	a,(_Pending_mqtt_password,x)
6322  cc0f 270e          	jreq	L3313
6323                     ; 1954         stored_mqtt_password[i] = Pending_mqtt_password[i];
6325  cc11 7b01          	ld	a,(OFST+0,sp)
6326  cc13 5f            	clrw	x
6327  cc14 97            	ld	xl,a
6328  cc15 d60147        	ld	a,(_Pending_mqtt_password,x)
6329  cc18 d74040        	ld	(_stored_mqtt_password,x),a
6330                     ; 1956         restart_request = 1;
6332  cc1b 35010109      	mov	_restart_request,#1
6333  cc1f               L3313:
6334                     ; 1952     for(i=0; i<11; i++) {
6336  cc1f 0c01          	inc	(OFST+0,sp)
6340  cc21 7b01          	ld	a,(OFST+0,sp)
6341  cc23 a10b          	cp	a,#11
6342  cc25 25db          	jrult	L5213
6343                     ; 1962     if (stored_uip_ethaddr_oct[0] != Pending_uip_ethaddr_oct[0] ||
6343                     ; 1963       stored_uip_ethaddr_oct[1] != Pending_uip_ethaddr_oct[1] ||
6343                     ; 1964       stored_uip_ethaddr_oct[2] != Pending_uip_ethaddr_oct[2] ||
6343                     ; 1965       stored_uip_ethaddr_oct[3] != Pending_uip_ethaddr_oct[3] ||
6343                     ; 1966       stored_uip_ethaddr_oct[4] != Pending_uip_ethaddr_oct[4] ||
6343                     ; 1967       stored_uip_ethaddr_oct[5] != Pending_uip_ethaddr_oct[5]) {
6345  cc27 c64017        	ld	a,_stored_uip_ethaddr_oct
6346  cc2a c10119        	cp	a,_Pending_uip_ethaddr_oct
6347  cc2d 2628          	jrne	L7313
6349  cc2f c64018        	ld	a,_stored_uip_ethaddr_oct+1
6350  cc32 c1011a        	cp	a,_Pending_uip_ethaddr_oct+1
6351  cc35 2620          	jrne	L7313
6353  cc37 c64019        	ld	a,_stored_uip_ethaddr_oct+2
6354  cc3a c1011b        	cp	a,_Pending_uip_ethaddr_oct+2
6355  cc3d 2618          	jrne	L7313
6357  cc3f c6401a        	ld	a,_stored_uip_ethaddr_oct+3
6358  cc42 c1011c        	cp	a,_Pending_uip_ethaddr_oct+3
6359  cc45 2610          	jrne	L7313
6361  cc47 c6401b        	ld	a,_stored_uip_ethaddr_oct+4
6362  cc4a c1011d        	cp	a,_Pending_uip_ethaddr_oct+4
6363  cc4d 2608          	jrne	L7313
6365  cc4f c6401c        	ld	a,_stored_uip_ethaddr_oct+5
6366  cc52 c1011e        	cp	a,_Pending_uip_ethaddr_oct+5
6367  cc55 271a          	jreq	L3672
6368  cc57               L7313:
6369                     ; 1969       for (i=0; i<6; i++) stored_uip_ethaddr_oct[i] = Pending_uip_ethaddr_oct[i];
6371  cc57 4f            	clr	a
6372  cc58 6b01          	ld	(OFST+0,sp),a
6374  cc5a               L1513:
6377  cc5a 5f            	clrw	x
6378  cc5b 97            	ld	xl,a
6379  cc5c d60119        	ld	a,(_Pending_uip_ethaddr_oct,x)
6380  cc5f d74017        	ld	(_stored_uip_ethaddr_oct,x),a
6383  cc62 0c01          	inc	(OFST+0,sp)
6387  cc64 7b01          	ld	a,(OFST+0,sp)
6388  cc66 a106          	cp	a,#6
6389  cc68 25f0          	jrult	L1513
6390                     ; 1971       update_mac_string();
6392  cc6a cdc95d        	call	_update_mac_string
6394                     ; 1973       restart_request = 1;
6396  cc6d 35010109      	mov	_restart_request,#1
6397  cc71               L3672:
6398                     ; 1977   if (restart_request == 1) {
6400  cc71 c60109        	ld	a,_restart_request
6401  cc74 4a            	dec	a
6402  cc75 2609          	jrne	L7513
6403                     ; 1980     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6405  cc77 c60108        	ld	a,_restart_reboot_step
6406  cc7a 2604          	jrne	L7513
6407                     ; 1981       restart_reboot_step = RESTART_REBOOT_ARM;
6409  cc7c 35010108      	mov	_restart_reboot_step,#1
6410  cc80               L7513:
6411                     ; 1985   if (user_reboot_request == 1) {
6413  cc80 c6010a        	ld	a,_user_reboot_request
6414  cc83 4a            	dec	a
6415  cc84 2611          	jrne	L3613
6416                     ; 1988     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6418  cc86 725d0108      	tnz	_restart_reboot_step
6419  cc8a 260b          	jrne	L3613
6420                     ; 1989       restart_reboot_step = RESTART_REBOOT_ARM;
6422  cc8c 35010108      	mov	_restart_reboot_step,#1
6423                     ; 1990       user_reboot_request = 0;
6425  cc90 c7010a        	ld	_user_reboot_request,a
6426                     ; 1991       reboot_request = 1;
6428  cc93 3501010b      	mov	_reboot_request,#1
6429  cc97               L3613:
6430                     ; 2000   parse_complete = 0; // Reset parse_complete for future changes
6432  cc97 725f0106      	clr	_parse_complete
6433                     ; 2003   if (stack_limit1 != 0xaa || stack_limit2 != 0x55) {
6435  cc9b c605ff        	ld	a,_stack_limit1
6436  cc9e a1aa          	cp	a,#170
6437  cca0 2607          	jrne	L1713
6439  cca2 c605fe        	ld	a,_stack_limit2
6440  cca5 a155          	cp	a,#85
6441  cca7 270a          	jreq	L7613
6442  cca9               L1713:
6443                     ; 2004     stack_error = 1;
6445  cca9 35010163      	mov	_stack_error,#1
6446                     ; 2005     fastflash();
6448  ccad cdcfd7        	call	_fastflash
6450                     ; 2006     fastflash();
6452  ccb0 cdcfd7        	call	_fastflash
6454  ccb3               L7613:
6455                     ; 2019 }
6458  ccb3 84            	pop	a
6459  ccb4 81            	ret	
6494                     ; 2022 void check_restart_reboot(void)
6494                     ; 2023 {
6495                     .text:	section	.text,new
6496  ccb5               _check_restart_reboot:
6500                     ; 2029   if (restart_request == 1 || reboot_request == 1) {
6502  ccb5 c60109        	ld	a,_restart_request
6503  ccb8 4a            	dec	a
6504  ccb9 2709          	jreq	L5023
6506  ccbb c6010b        	ld	a,_reboot_request
6507  ccbe 4a            	dec	a
6508  ccbf 2703cccd89    	jrne	L3023
6509  ccc4               L5023:
6510                     ; 2040     if (restart_reboot_step == RESTART_REBOOT_ARM) {
6512  ccc4 c60108        	ld	a,_restart_reboot_step
6513  ccc7 a101          	cp	a,#1
6514  ccc9 2611          	jrne	L7023
6515                     ; 2045       time_mark2 = second_counter;
6517  cccb ce029e        	ldw	x,_second_counter+2
6518  ccce cf00fd        	ldw	_time_mark2+2,x
6519  ccd1 ce029c        	ldw	x,_second_counter
6520  ccd4 cf00fb        	ldw	_time_mark2,x
6521                     ; 2046       restart_reboot_step = RESTART_REBOOT_ARM2;
6523  ccd7 35020108      	mov	_restart_reboot_step,#2
6526  ccdb 81            	ret	
6527  ccdc               L7023:
6528                     ; 2049     else if (restart_reboot_step == RESTART_REBOOT_ARM2) {
6530  ccdc a102          	cp	a,#2
6531  ccde 2613          	jrne	L3123
6532                     ; 2055       if (second_counter > time_mark2 + 0 ) {
6534  cce0 ae029c        	ldw	x,#_second_counter
6535  cce3 cdf98e        	call	c_ltor
6537  cce6 ae00fb        	ldw	x,#_time_mark2
6538  cce9 cdf923        	call	c_lcmp
6540  ccec 23d3          	jrule	L3023
6541                     ; 2056         restart_reboot_step = RESTART_REBOOT_DISCONNECT;
6543  ccee 35030108      	mov	_restart_reboot_step,#3
6545  ccf2 81            	ret	
6546  ccf3               L3123:
6547                     ; 2061     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECT) {
6549  ccf3 a103          	cp	a,#3
6550  ccf5 261e          	jrne	L1223
6551                     ; 2062       restart_reboot_step = RESTART_REBOOT_DISCONNECTWAIT;
6553  ccf7 35040108      	mov	_restart_reboot_step,#4
6554                     ; 2063       if (mqtt_start == MQTT_START_COMPLETE) {
6556  ccfb c600a8        	ld	a,_mqtt_start
6557  ccfe a114          	cp	a,#20
6558  cd00 2606          	jrne	L3223
6559                     ; 2065         mqtt_disconnect(&mqttclient);
6561  cd02 ae00c5        	ldw	x,#_mqttclient
6562  cd05 cdd4dc        	call	_mqtt_disconnect
6564  cd08               L3223:
6565                     ; 2068       time_mark2 = second_counter;
6567  cd08 ce029e        	ldw	x,_second_counter+2
6568  cd0b cf00fd        	ldw	_time_mark2+2,x
6569  cd0e ce029c        	ldw	x,_second_counter
6570  cd11 cf00fb        	ldw	_time_mark2,x
6573  cd14 81            	ret	
6574  cd15               L1223:
6575                     ; 2071     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECTWAIT) {
6577  cd15 a104          	cp	a,#4
6578  cd17 2618          	jrne	L7223
6579                     ; 2072       if (second_counter > time_mark2 + 1 ) {
6581  cd19 ae00fb        	ldw	x,#_time_mark2
6582  cd1c cdf98e        	call	c_ltor
6584  cd1f a601          	ld	a,#1
6585  cd21 cdf8fa        	call	c_ladc
6587  cd24 ae029c        	ldw	x,#_second_counter
6588  cd27 cdf923        	call	c_lcmp
6590  cd2a 245d          	jruge	L3023
6591                     ; 2075         restart_reboot_step = RESTART_REBOOT_TCPCLOSE;
6593  cd2c 35050108      	mov	_restart_reboot_step,#5
6595  cd30 81            	ret	
6596  cd31               L7223:
6597                     ; 2079     else if (restart_reboot_step == RESTART_REBOOT_TCPCLOSE) {
6599  cd31 a105          	cp	a,#5
6600  cd33 2615          	jrne	L5323
6601                     ; 2095       mqtt_close_tcp = 1;
6603  cd35 35010107      	mov	_mqtt_close_tcp,#1
6604                     ; 2097       time_mark2 = second_counter;
6606  cd39 ce029e        	ldw	x,_second_counter+2
6607  cd3c cf00fd        	ldw	_time_mark2+2,x
6608  cd3f ce029c        	ldw	x,_second_counter
6609  cd42 cf00fb        	ldw	_time_mark2,x
6610                     ; 2098       restart_reboot_step = RESTART_REBOOT_TCPWAIT;
6612  cd45 35060108      	mov	_restart_reboot_step,#6
6615  cd49 81            	ret	
6616  cd4a               L5323:
6617                     ; 2100     else if (restart_reboot_step == RESTART_REBOOT_TCPWAIT) {
6619  cd4a a106          	cp	a,#6
6620  cd4c 261c          	jrne	L1423
6621                     ; 2105       if (second_counter > time_mark2 + 1) {
6623  cd4e ae00fb        	ldw	x,#_time_mark2
6624  cd51 cdf98e        	call	c_ltor
6626  cd54 a601          	ld	a,#1
6627  cd56 cdf8fa        	call	c_ladc
6629  cd59 ae029c        	ldw	x,#_second_counter
6630  cd5c cdf923        	call	c_lcmp
6632  cd5f 2428          	jruge	L3023
6633                     ; 2106 	mqtt_close_tcp = 0;
6635  cd61 725f0107      	clr	_mqtt_close_tcp
6636                     ; 2107         restart_reboot_step = RESTART_REBOOT_FINISH;
6638  cd65 35070108      	mov	_restart_reboot_step,#7
6640  cd69 81            	ret	
6641  cd6a               L1423:
6642                     ; 2117     else if (restart_reboot_step == RESTART_REBOOT_FINISH) {
6644  cd6a a107          	cp	a,#7
6645  cd6c 261b          	jrne	L3023
6646                     ; 2118       if (reboot_request == 1) {
6648  cd6e c6010b        	ld	a,_reboot_request
6649  cd71 4a            	dec	a
6650  cd72 2606          	jrne	L1523
6651                     ; 2119         restart_reboot_step = RESTART_REBOOT_IDLE;
6653  cd74 c70108        	ld	_restart_reboot_step,a
6654                     ; 2121         reboot();
6656  cd77 cdce0a        	call	_reboot
6658  cd7a               L1523:
6659                     ; 2123       if (restart_request == 1) {
6661  cd7a c60109        	ld	a,_restart_request
6662  cd7d 4a            	dec	a
6663  cd7e 2609          	jrne	L3023
6664                     ; 2124 	restart_request = 0;
6666  cd80 c70109        	ld	_restart_request,a
6667                     ; 2125         restart_reboot_step = RESTART_REBOOT_IDLE;
6669  cd83 c70108        	ld	_restart_reboot_step,a
6670                     ; 2127 	restart();
6672  cd86 cdcd8a        	call	_restart
6674  cd89               L3023:
6675                     ; 2131 }
6678  cd89 81            	ret	
6731                     ; 2134 void restart(void)
6731                     ; 2135 {
6732                     .text:	section	.text,new
6733  cd8a               _restart:
6737                     ; 2149   LEDcontrol(0); // Turn LED off
6739  cd8a 4f            	clr	a
6740  cd8b cda48a        	call	_LEDcontrol
6742                     ; 2151   parse_complete = 0;
6744  cd8e 725f0106      	clr	_parse_complete
6745                     ; 2152   reboot_request = 0;
6747  cd92 725f010b      	clr	_reboot_request
6748                     ; 2153   restart_request = 0;
6750  cd96 725f0109      	clr	_restart_request
6751                     ; 2155   time_mark2 = 0;           // Time capture used in reboot
6753  cd9a 5f            	clrw	x
6754  cd9b cf00fd        	ldw	_time_mark2+2,x
6755  cd9e cf00fb        	ldw	_time_mark2,x
6756                     ; 2158   mqtt_close_tcp = 0;
6758  cda1 725f0107      	clr	_mqtt_close_tcp
6759                     ; 2160   mqtt_start = MQTT_START_TCP_CONNECT;
6761  cda5 350100a8      	mov	_mqtt_start,#1
6762                     ; 2161   mqtt_start_status = MQTT_START_NOT_STARTED;
6764  cda9 725f00a7      	clr	_mqtt_start_status
6765                     ; 2162   mqtt_start_ctr1 = 0;
6767  cdad 725f00a6      	clr	_mqtt_start_ctr1
6768                     ; 2163   mqtt_sanity_ctr = 0;
6770  cdb1 725f00a4      	clr	_mqtt_sanity_ctr
6771                     ; 2164   mqtt_start_retry = 0;
6773  cdb5 725f00a3      	clr	_mqtt_start_retry
6774                     ; 2165   MQTT_error_status = 0;
6776  cdb9 725f029b      	clr	_MQTT_error_status
6777                     ; 2166   mqtt_restart_step = MQTT_RESTART_IDLE;
6779  cdbd 725f00a0      	clr	_mqtt_restart_step
6780                     ; 2167   strcpy(topic_base, devicetype);
6782  cdc1 ae0074        	ldw	x,#_topic_base
6783  cdc4 90ae9e6c      	ldw	y,#L5261_devicetype
6784  cdc8               L043:
6785  cdc8 90f6          	ld	a,(y)
6786  cdca 905c          	incw	y
6787  cdcc f7            	ld	(x),a
6788  cdcd 5c            	incw	x
6789  cdce 4d            	tnz	a
6790  cdcf 26f7          	jrne	L043
6791                     ; 2168   state_request = STATE_REQUEST_IDLE;
6793  cdd1 c70164        	ld	_state_request,a
6794                     ; 2171   spi_init();              // Initialize the SPI bit bang interface to the
6796  cdd4 cde4e1        	call	_spi_init
6798                     ; 2173   unlock_eeprom();         // unlock the EEPROM so writes can be performed
6800  cdd7 cdc490        	call	_unlock_eeprom
6802                     ; 2174   check_eeprom_settings(); // Verify EEPROM up to date
6804  cdda cdc4a0        	call	_check_eeprom_settings
6806                     ; 2175   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
6808  cddd cda028        	call	_Enc28j60Init
6810                     ; 2176   uip_arp_init();          // Initialize the ARP module
6812  cde0 cdf24a        	call	_uip_arp_init
6814                     ; 2177   uip_init();              // Initialize uIP
6816  cde3 cde7e7        	call	_uip_init
6818                     ; 2178   HttpDInit();             // Initialize httpd; sets up listening ports
6820  cde6 cdacb8        	call	_HttpDInit
6822                     ; 2182   mqtt_init(&mqttclient,
6822                     ; 2183             mqtt_sendbuf,
6822                     ; 2184 	    sizeof(mqtt_sendbuf),
6822                     ; 2185 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
6822                     ; 2186 	    UIP_APPDATA_SIZE,
6822                     ; 2187 	    publish_callback);
6824  cde9 aec1f8        	ldw	x,#_publish_callback
6825  cdec 89            	pushw	x
6826  cded ae01be        	ldw	x,#446
6827  cdf0 89            	pushw	x
6828  cdf1 ae03ad        	ldw	x,#_uip_buf+54
6829  cdf4 89            	pushw	x
6830  cdf5 ae00c8        	ldw	x,#200
6831  cdf8 89            	pushw	x
6832  cdf9 ae016f        	ldw	x,#_mqtt_sendbuf
6833  cdfc 89            	pushw	x
6834  cdfd ae00c5        	ldw	x,#_mqttclient
6835  ce00 cdd089        	call	_mqtt_init
6837  ce03 5b0a          	addw	sp,#10
6838                     ; 2190   LEDcontrol(1); // Turn LED on
6840  ce05 a601          	ld	a,#1
6842                     ; 2193 }
6845  ce07 cca48a        	jp	_LEDcontrol
6873                     ; 2196 void reboot(void)
6873                     ; 2197 {
6874                     .text:	section	.text,new
6875  ce0a               _reboot:
6879                     ; 2200   fastflash(); // A useful signal that a deliberate reboot is occurring.
6881  ce0a cdcfd7        	call	_fastflash
6883                     ; 2202   LEDcontrol(0);  // turn LED off
6885  ce0d 4f            	clr	a
6886  ce0e cda48a        	call	_LEDcontrol
6888                     ; 2204   WWDG_WR = (uint8_t)0x7f;     // Window register reset
6890  ce11 357f50d2      	mov	_WWDG_WR,#127
6891                     ; 2205   WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
6893  ce15 35ff50d1      	mov	_WWDG_CR,#255
6894                     ; 2206   WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
6896  ce19 356050d2      	mov	_WWDG_WR,#96
6897                     ; 2209   wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
6899  ce1d aec350        	ldw	x,#50000
6900  ce20 cde6b4        	call	_wait_timer
6902                     ; 2210   wait_timer((uint16_t)50000);
6904  ce23 aec350        	ldw	x,#50000
6905  ce26 cde6b4        	call	_wait_timer
6907                     ; 2211   wait_timer((uint16_t)50000);
6909  ce29 aec350        	ldw	x,#50000
6911                     ; 2212 }
6914  ce2c cce6b4        	jp	_wait_timer
6955                     ; 2215 void read_input_registers(void)
6955                     ; 2216 {
6956                     .text:	section	.text,new
6957  ce2f               _read_input_registers:
6959  ce2f 89            	pushw	x
6960       00000002      OFST:	set	2
6963                     ; 2233   if (PC_IDR & (uint8_t)0x40) IO_16to9_new1 |= 0x80; // PC bit 6 = 1, Input 8 = 1
6965  ce30 720d500b06    	btjf	_PC_IDR,#6,L1133
6968  ce35 721e016c      	bset	_IO_16to9_new1,#7
6970  ce39 2004          	jra	L3133
6971  ce3b               L1133:
6972                     ; 2234   else IO_16to9_new1 &= (uint8_t)(~0x80);
6974  ce3b 721f016c      	bres	_IO_16to9_new1,#7
6975  ce3f               L3133:
6976                     ; 2235   if (PG_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x40; // PG bit 0 = 1, Input 7 = 1
6978  ce3f 7201501f06    	btjf	_PG_IDR,#0,L5133
6981  ce44 721c016c      	bset	_IO_16to9_new1,#6
6983  ce48 2004          	jra	L7133
6984  ce4a               L5133:
6985                     ; 2236   else IO_16to9_new1 &= (uint8_t)(~0x40);
6987  ce4a 721d016c      	bres	_IO_16to9_new1,#6
6988  ce4e               L7133:
6989                     ; 2237   if (PE_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x20; // PE bit 3 = 1, Input 6 = 1
6991  ce4e 7207501506    	btjf	_PE_IDR,#3,L1233
6994  ce53 721a016c      	bset	_IO_16to9_new1,#5
6996  ce57 2004          	jra	L3233
6997  ce59               L1233:
6998                     ; 2238   else IO_16to9_new1 &= (uint8_t)(~0x20);
7000  ce59 721b016c      	bres	_IO_16to9_new1,#5
7001  ce5d               L3233:
7002                     ; 2239   if (PD_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x10; // PD bit 0 = 1, Input 5 = 1
7004  ce5d 7201501006    	btjf	_PD_IDR,#0,L5233
7007  ce62 7218016c      	bset	_IO_16to9_new1,#4
7009  ce66 2004          	jra	L7233
7010  ce68               L5233:
7011                     ; 2240   else IO_16to9_new1 &= (uint8_t)(~0x10);
7013  ce68 7219016c      	bres	_IO_16to9_new1,#4
7014  ce6c               L7233:
7015                     ; 2241   if (PD_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x08; // PD bit 3 = 1, Input 4 = 1
7017  ce6c 7207501006    	btjf	_PD_IDR,#3,L1333
7020  ce71 7216016c      	bset	_IO_16to9_new1,#3
7022  ce75 2004          	jra	L3333
7023  ce77               L1333:
7024                     ; 2242   else IO_16to9_new1 &= (uint8_t)(~0x08);
7026  ce77 7217016c      	bres	_IO_16to9_new1,#3
7027  ce7b               L3333:
7028                     ; 2243   if (PD_IDR & (uint8_t)0x20) IO_16to9_new1 |= 0x04; // PD bit 5 = 1, Input 3 = 1
7030  ce7b 720b501006    	btjf	_PD_IDR,#5,L5333
7033  ce80 7214016c      	bset	_IO_16to9_new1,#2
7035  ce84 2004          	jra	L7333
7036  ce86               L5333:
7037                     ; 2244   else IO_16to9_new1 &= (uint8_t)(~0x04);
7039  ce86 7215016c      	bres	_IO_16to9_new1,#2
7040  ce8a               L7333:
7041                     ; 2245   if (PD_IDR & (uint8_t)0x80) IO_16to9_new1 |= 0x02; // PD bit 7 = 1, Input 2 = 1
7043  ce8a 720f501006    	btjf	_PD_IDR,#7,L1433
7046  ce8f 7212016c      	bset	_IO_16to9_new1,#1
7048  ce93 2004          	jra	L3433
7049  ce95               L1433:
7050                     ; 2246   else IO_16to9_new1 &= (uint8_t)(~0x02);
7052  ce95 7213016c      	bres	_IO_16to9_new1,#1
7053  ce99               L3433:
7054                     ; 2247   if (PA_IDR & (uint8_t)0x10) IO_16to9_new1 |= 0x01; // PA bit 4 = 1, Input 1 = 1
7056  ce99 7209500106    	btjf	_PA_IDR,#4,L5433
7059  ce9e 7210016c      	bset	_IO_16to9_new1,#0
7061  cea2 2004          	jra	L7433
7062  cea4               L5433:
7063                     ; 2248   else IO_16to9_new1 &= (uint8_t)(~0x01);
7065  cea4 7211016c      	bres	_IO_16to9_new1,#0
7066  cea8               L7433:
7067                     ; 2253   xor_tmp = (uint8_t)((IO_16to9 ^ IO_16to9_new1) & (IO_16to9 ^ IO_16to9_new2));
7069  cea8 c6016e        	ld	a,_IO_16to9
7070  ceab c8016a        	xor	a,_IO_16to9_new2
7071  ceae 6b01          	ld	(OFST-1,sp),a
7073  ceb0 c6016e        	ld	a,_IO_16to9
7074  ceb3 c8016c        	xor	a,_IO_16to9_new1
7075  ceb6 1401          	and	a,(OFST-1,sp)
7076  ceb8 6b02          	ld	(OFST+0,sp),a
7078                     ; 2254   IO_16to9 = (uint8_t)(IO_16to9 ^ xor_tmp);
7080  ceba c8016e        	xor	a,_IO_16to9
7081  cebd c7016e        	ld	_IO_16to9,a
7082                     ; 2256   IO_16to9_new2 = IO_16to9_new1;
7084                     ; 2310 }
7087  cec0 85            	popw	x
7088  cec1 55016c016a    	mov	_IO_16to9_new2,_IO_16to9_new1
7089  cec6 81            	ret	
7129                     ; 2313 void write_output_registers(void)
7129                     ; 2314 {
7130                     .text:	section	.text,new
7131  cec7               _write_output_registers:
7133  cec7 88            	push	a
7134       00000001      OFST:	set	1
7137                     ; 2368   xor_tmp = (uint8_t)(invert_output ^ IO_8to1);
7139  cec8 c60166        	ld	a,_invert_output
7140  cecb c8016d        	xor	a,_IO_8to1
7141  cece 6b01          	ld	(OFST+0,sp),a
7143                     ; 2369   if (xor_tmp & 0x80) PC_ODR |= (uint8_t)0x80; // Relay 8 off
7145  ced0 2a06          	jrpl	L5633
7148  ced2 721e500a      	bset	_PC_ODR,#7
7150  ced6 2004          	jra	L7633
7151  ced8               L5633:
7152                     ; 2370   else PC_ODR &= (uint8_t)~0x80; // Relay 8 on
7154  ced8 721f500a      	bres	_PC_ODR,#7
7155  cedc               L7633:
7156                     ; 2371   if (xor_tmp & 0x40) PG_ODR |= (uint8_t)0x02; // Relay 7 off
7158  cedc a540          	bcp	a,#64
7159  cede 2706          	jreq	L1733
7162  cee0 7212501e      	bset	_PG_ODR,#1
7164  cee4 2004          	jra	L3733
7165  cee6               L1733:
7166                     ; 2372   else PG_ODR &= (uint8_t)~0x02; // Relay 7 on
7168  cee6 7213501e      	bres	_PG_ODR,#1
7169  ceea               L3733:
7170                     ; 2373   if (xor_tmp & 0x20) PE_ODR |= (uint8_t)0x01; // Relay 6 off
7172  ceea 7b01          	ld	a,(OFST+0,sp)
7173  ceec a520          	bcp	a,#32
7174  ceee 2706          	jreq	L5733
7177  cef0 72105014      	bset	_PE_ODR,#0
7179  cef4 2004          	jra	L7733
7180  cef6               L5733:
7181                     ; 2374   else PE_ODR &= (uint8_t)~0x01; // Relay 6 on
7183  cef6 72115014      	bres	_PE_ODR,#0
7184  cefa               L7733:
7185                     ; 2375   if (xor_tmp & 0x10) PD_ODR |= (uint8_t)0x04; // Relay 5 off
7187  cefa a510          	bcp	a,#16
7188  cefc 2706          	jreq	L1043
7191  cefe 7214500f      	bset	_PD_ODR,#2
7193  cf02 2004          	jra	L3043
7194  cf04               L1043:
7195                     ; 2376   else PD_ODR &= (uint8_t)~0x04; // Relay 5 on
7197  cf04 7215500f      	bres	_PD_ODR,#2
7198  cf08               L3043:
7199                     ; 2377   if (xor_tmp & 0x08) PD_ODR |= (uint8_t)0x10; // Relay 4 off
7201  cf08 7b01          	ld	a,(OFST+0,sp)
7202  cf0a a508          	bcp	a,#8
7203  cf0c 2706          	jreq	L5043
7206  cf0e 7218500f      	bset	_PD_ODR,#4
7208  cf12 2004          	jra	L7043
7209  cf14               L5043:
7210                     ; 2378   else PD_ODR &= (uint8_t)~0x10; // Relay 4 on
7212  cf14 7219500f      	bres	_PD_ODR,#4
7213  cf18               L7043:
7214                     ; 2379   if (xor_tmp & 0x04) PD_ODR |= (uint8_t)0x40; // Relay 3 off
7216  cf18 a504          	bcp	a,#4
7217  cf1a 2706          	jreq	L1143
7220  cf1c 721c500f      	bset	_PD_ODR,#6
7222  cf20 2004          	jra	L3143
7223  cf22               L1143:
7224                     ; 2380   else PD_ODR &= (uint8_t)~0x40; // Relay 3 on
7226  cf22 721d500f      	bres	_PD_ODR,#6
7227  cf26               L3143:
7228                     ; 2381   if (xor_tmp & 0x02) PA_ODR |= (uint8_t)0x20; // Relay 2 off
7230  cf26 7b01          	ld	a,(OFST+0,sp)
7231  cf28 a502          	bcp	a,#2
7232  cf2a 2706          	jreq	L5143
7235  cf2c 721a5000      	bset	_PA_ODR,#5
7237  cf30 2004          	jra	L7143
7238  cf32               L5143:
7239                     ; 2382   else PA_ODR &= (uint8_t)~0x20; // Relay 2 on
7241  cf32 721b5000      	bres	_PA_ODR,#5
7242  cf36               L7143:
7243                     ; 2383   if (xor_tmp & 0x01) PA_ODR |= (uint8_t)0x08; // Relay 1 off
7245  cf36 a501          	bcp	a,#1
7246  cf38 2706          	jreq	L1243
7249  cf3a 72165000      	bset	_PA_ODR,#3
7251  cf3e 2004          	jra	L3243
7252  cf40               L1243:
7253                     ; 2384   else PA_ODR &= (uint8_t)~0x08; // Relay 1 on
7255  cf40 72175000      	bres	_PA_ODR,#3
7256  cf44               L3243:
7257                     ; 2390 }
7260  cf44 84            	pop	a
7261  cf45 81            	ret	
7302                     ; 2393 void check_reset_button(void)
7302                     ; 2394 {
7303                     .text:	section	.text,new
7304  cf46               _check_reset_button:
7306  cf46 88            	push	a
7307       00000001      OFST:	set	1
7310                     ; 2399   if ((PA_IDR & 0x02) == 0) {
7312  cf47 720250015d    	btjt	_PA_IDR,#1,L1443
7313                     ; 2401     for (i=0; i<100; i++) {
7315  cf4c 0f01          	clr	(OFST+0,sp)
7317  cf4e               L3443:
7318                     ; 2402       wait_timer(50000); // wait 50ms
7320  cf4e aec350        	ldw	x,#50000
7321  cf51 cde6b4        	call	_wait_timer
7323                     ; 2403       if ((PA_IDR & 0x02) == 1) { // check Reset Button again. If released
7325  cf54 c65001        	ld	a,_PA_IDR
7326  cf57 a402          	and	a,#2
7327  cf59 4a            	dec	a
7328  cf5a 2602          	jrne	L1543
7329                     ; 2405         return;
7332  cf5c 84            	pop	a
7333  cf5d 81            	ret	
7334  cf5e               L1543:
7335                     ; 2401     for (i=0; i<100; i++) {
7337  cf5e 0c01          	inc	(OFST+0,sp)
7341  cf60 7b01          	ld	a,(OFST+0,sp)
7342  cf62 a164          	cp	a,#100
7343  cf64 25e8          	jrult	L3443
7344                     ; 2410     LEDcontrol(0);  // turn LED off
7346  cf66 4f            	clr	a
7347  cf67 cda48a        	call	_LEDcontrol
7350  cf6a               L5543:
7351                     ; 2411     while((PA_IDR & 0x02) == 0) {  // Wait for button release
7353  cf6a 72035001fb    	btjf	_PA_IDR,#1,L5543
7354                     ; 2414     magic4 = 0x00;
7356  cf6f 4f            	clr	a
7357  cf70 ae402e        	ldw	x,#_magic4
7358  cf73 cdf731        	call	c_eewrc
7360                     ; 2415     magic3 = 0x00;
7362  cf76 4f            	clr	a
7363  cf77 ae402d        	ldw	x,#_magic3
7364  cf7a cdf731        	call	c_eewrc
7366                     ; 2416     magic2 = 0x00;
7368  cf7d 4f            	clr	a
7369  cf7e ae402c        	ldw	x,#_magic2
7370  cf81 cdf731        	call	c_eewrc
7372                     ; 2417     magic1 = 0x00;
7374  cf84 4f            	clr	a
7375  cf85 ae402b        	ldw	x,#_magic1
7376  cf88 cdf731        	call	c_eewrc
7378                     ; 2419     WWDG_WR = (uint8_t)0x7f;       // Window register reset
7380  cf8b 357f50d2      	mov	_WWDG_WR,#127
7381                     ; 2420     WWDG_CR = (uint8_t)0xff;       // Set watchdog to timeout in 49ms
7383  cf8f 35ff50d1      	mov	_WWDG_CR,#255
7384                     ; 2421     WWDG_WR = (uint8_t)0x60;       // Window register value - doesn't matter
7386  cf93 356050d2      	mov	_WWDG_WR,#96
7387                     ; 2424     wait_timer((uint16_t)50000);   // Wait for watchdog to generate reset
7389  cf97 aec350        	ldw	x,#50000
7390  cf9a cde6b4        	call	_wait_timer
7392                     ; 2425     wait_timer((uint16_t)50000);
7394  cf9d aec350        	ldw	x,#50000
7395  cfa0 cde6b4        	call	_wait_timer
7397                     ; 2426     wait_timer((uint16_t)50000);
7399  cfa3 aec350        	ldw	x,#50000
7400  cfa6 cde6b4        	call	_wait_timer
7402  cfa9               L1443:
7403                     ; 2428 }
7406  cfa9 84            	pop	a
7407  cfaa 81            	ret	
7441                     ; 2431 void debugflash(void)
7441                     ; 2432 {
7442                     .text:	section	.text,new
7443  cfab               _debugflash:
7445  cfab 88            	push	a
7446       00000001      OFST:	set	1
7449                     ; 2447   LEDcontrol(0);     // turn LED off
7451  cfac 4f            	clr	a
7452  cfad cda48a        	call	_LEDcontrol
7454                     ; 2448   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7456  cfb0 0f01          	clr	(OFST+0,sp)
7458  cfb2               L5743:
7461  cfb2 aec350        	ldw	x,#50000
7462  cfb5 cde6b4        	call	_wait_timer
7466  cfb8 0c01          	inc	(OFST+0,sp)
7470  cfba 7b01          	ld	a,(OFST+0,sp)
7471  cfbc a10a          	cp	a,#10
7472  cfbe 25f2          	jrult	L5743
7473                     ; 2450   LEDcontrol(1);     // turn LED on
7475  cfc0 a601          	ld	a,#1
7476  cfc2 cda48a        	call	_LEDcontrol
7478                     ; 2451   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7480  cfc5 0f01          	clr	(OFST+0,sp)
7482  cfc7               L3053:
7485  cfc7 aec350        	ldw	x,#50000
7486  cfca cde6b4        	call	_wait_timer
7490  cfcd 0c01          	inc	(OFST+0,sp)
7494  cfcf 7b01          	ld	a,(OFST+0,sp)
7495  cfd1 a10a          	cp	a,#10
7496  cfd3 25f2          	jrult	L3053
7497                     ; 2452 }
7500  cfd5 84            	pop	a
7501  cfd6 81            	ret	
7535                     ; 2455 void fastflash(void)
7535                     ; 2456 {
7536                     .text:	section	.text,new
7537  cfd7               _fastflash:
7539  cfd7 88            	push	a
7540       00000001      OFST:	set	1
7543                     ; 2471   for (i=0; i<10; i++) {
7545  cfd8 0f01          	clr	(OFST+0,sp)
7547  cfda               L5253:
7548                     ; 2472     LEDcontrol(0);     // turn LED off
7550  cfda 4f            	clr	a
7551  cfdb cda48a        	call	_LEDcontrol
7553                     ; 2473     wait_timer((uint16_t)50000); // wait 50ms
7555  cfde aec350        	ldw	x,#50000
7556  cfe1 cde6b4        	call	_wait_timer
7558                     ; 2475     LEDcontrol(1);     // turn LED on
7560  cfe4 a601          	ld	a,#1
7561  cfe6 cda48a        	call	_LEDcontrol
7563                     ; 2476     wait_timer((uint16_t)50000); // wait 50ms
7565  cfe9 aec350        	ldw	x,#50000
7566  cfec cde6b4        	call	_wait_timer
7568                     ; 2471   for (i=0; i<10; i++) {
7570  cfef 0c01          	inc	(OFST+0,sp)
7574  cff1 7b01          	ld	a,(OFST+0,sp)
7575  cff3 a10a          	cp	a,#10
7576  cff5 25e3          	jrult	L5253
7577                     ; 2478 }
7580  cff7 84            	pop	a
7581  cff8 81            	ret	
7606                     ; 2481 void oneflash(void)
7606                     ; 2482 {
7607                     .text:	section	.text,new
7608                     _oneflash:
7612                     ; 2497   LEDcontrol(0);     // turn LED off
7614                     	clr	a
7615                     	call	_LEDcontrol
7617                     ; 2498   wait_timer((uint16_t)25000); // wait 25ms
7619                     	ldw	x,#25000
7620                     	call	_wait_timer
7622                     ; 2500   LEDcontrol(1);     // turn LED on
7624                     	ld	a,#1
7626                     ; 2501 }
7629                     	jp	_LEDcontrol
8957                     	switch	.bss
8958  0067               _TRANSMIT_counter:
8959  0067 00000000      	ds.b	4
8960                     	xdef	_TRANSMIT_counter
8961  006b               _TXERIF_counter:
8962  006b 00000000      	ds.b	4
8963                     	xdef	_TXERIF_counter
8964  006f               _RXERIF_counter:
8965  006f 00000000      	ds.b	4
8966                     	xdef	_RXERIF_counter
8967  0073               _topic_base_len:
8968  0073 00            	ds.b	1
8969                     	xdef	_topic_base_len
8970  0074               _topic_base:
8971  0074 000000000000  	ds.b	44
8972                     	xdef	_topic_base
8973  00a0               _mqtt_restart_step:
8974  00a0 00            	ds.b	1
8975                     	xdef	_mqtt_restart_step
8976                     	xref	_MQTT_error_status
8977  00a1               _mqtt_conn:
8978  00a1 0000          	ds.b	2
8979                     	xdef	_mqtt_conn
8980                     	xref	_mqtt_sendbuf
8981  00a3               _mqtt_start_retry:
8982  00a3 00            	ds.b	1
8983                     	xdef	_mqtt_start_retry
8984  00a4               _mqtt_sanity_ctr:
8985  00a4 00            	ds.b	1
8986                     	xdef	_mqtt_sanity_ctr
8987  00a5               _mqtt_start_ctr2:
8988  00a5 00            	ds.b	1
8989                     	xdef	_mqtt_start_ctr2
8990  00a6               _mqtt_start_ctr1:
8991  00a6 00            	ds.b	1
8992                     	xdef	_mqtt_start_ctr1
8993  00a7               _mqtt_start_status:
8994  00a7 00            	ds.b	1
8995                     	xdef	_mqtt_start_status
8996  00a8               _mqtt_start:
8997  00a8 00            	ds.b	1
8998                     	xdef	_mqtt_start
8999  00a9               _client_id_text:
9000  00a9 000000000000  	ds.b	26
9001                     	xdef	_client_id_text
9002  00c3               _client_id:
9003  00c3 0000          	ds.b	2
9004                     	xdef	_client_id
9005  00c5               _mqttclient:
9006  00c5 000000000000  	ds.b	44
9007                     	xdef	_mqttclient
9008  00f1               _mqtt_keep_alive:
9009  00f1 0000          	ds.b	2
9010                     	xdef	_mqtt_keep_alive
9011  00f3               _application_message:
9012  00f3 000000        	ds.b	3
9013                     	xdef	_application_message
9014  00f6               _Port_Mqttd:
9015  00f6 0000          	ds.b	2
9016                     	xdef	_Port_Mqttd
9017  00f8               _mqttport:
9018  00f8 0000          	ds.b	2
9019                     	xdef	_mqttport
9020  00fa               _connect_flags:
9021  00fa 00            	ds.b	1
9022                     	xdef	_connect_flags
9023                     	xref	_OctetArray
9024                     	xref	_second_counter
9025  00fb               _time_mark2:
9026  00fb 00000000      	ds.b	4
9027                     	xdef	_time_mark2
9028  00ff               _IpAddr:
9029  00ff 00000000      	ds.b	4
9030                     	xdef	_IpAddr
9031  0103               _Port_Httpd:
9032  0103 0000          	ds.b	2
9033                     	xdef	_Port_Httpd
9034  0105               _mqtt_parse_complete:
9035  0105 00            	ds.b	1
9036                     	xdef	_mqtt_parse_complete
9037  0106               _parse_complete:
9038  0106 00            	ds.b	1
9039                     	xdef	_parse_complete
9040  0107               _mqtt_close_tcp:
9041  0107 00            	ds.b	1
9042                     	xdef	_mqtt_close_tcp
9043  0108               _restart_reboot_step:
9044  0108 00            	ds.b	1
9045                     	xdef	_restart_reboot_step
9046  0109               _restart_request:
9047  0109 00            	ds.b	1
9048                     	xdef	_restart_request
9049  010a               _user_reboot_request:
9050  010a 00            	ds.b	1
9051                     	xdef	_user_reboot_request
9052  010b               _reboot_request:
9053  010b 00            	ds.b	1
9054                     	xdef	_reboot_request
9055  010c               _mac_string:
9056  010c 000000000000  	ds.b	13
9057                     	xdef	_mac_string
9058  0119               _Pending_uip_ethaddr_oct:
9059  0119 000000000000  	ds.b	6
9060                     	xdef	_Pending_uip_ethaddr_oct
9061  011f               _Pending_config_settings:
9062  011f 000000000000  	ds.b	6
9063                     	xdef	_Pending_config_settings
9064  0125               _Pending_devicename:
9065  0125 000000000000  	ds.b	20
9066                     	xdef	_Pending_devicename
9067  0139               _Pending_port:
9068  0139 0000          	ds.b	2
9069                     	xdef	_Pending_port
9070  013b               _Pending_netmask:
9071  013b 00000000      	ds.b	4
9072                     	xdef	_Pending_netmask
9073  013f               _Pending_draddr:
9074  013f 00000000      	ds.b	4
9075                     	xdef	_Pending_draddr
9076  0143               _Pending_hostaddr:
9077  0143 00000000      	ds.b	4
9078                     	xdef	_Pending_hostaddr
9079  0147               _Pending_mqtt_password:
9080  0147 000000000000  	ds.b	11
9081                     	xdef	_Pending_mqtt_password
9082  0152               _Pending_mqtt_username:
9083  0152 000000000000  	ds.b	11
9084                     	xdef	_Pending_mqtt_username
9085  015d               _Pending_mqttport:
9086  015d 0000          	ds.b	2
9087                     	xdef	_Pending_mqttport
9088  015f               _Pending_mqttserveraddr:
9089  015f 00000000      	ds.b	4
9090                     	xdef	_Pending_mqttserveraddr
9091  0163               _stack_error:
9092  0163 00            	ds.b	1
9093                     	xdef	_stack_error
9094  0164               _state_request:
9095  0164 00            	ds.b	1
9096                     	xdef	_state_request
9097  0165               _invert_input:
9098  0165 00            	ds.b	1
9099                     	xdef	_invert_input
9100  0166               _invert_output:
9101  0166 00            	ds.b	1
9102                     	xdef	_invert_output
9103  0167               _IO_8to1_sent:
9104  0167 00            	ds.b	1
9105                     	xdef	_IO_8to1_sent
9106  0168               _IO_16to9_sent:
9107  0168 00            	ds.b	1
9108                     	xdef	_IO_16to9_sent
9109  0169               _IO_8to1_new2:
9110  0169 00            	ds.b	1
9111                     	xdef	_IO_8to1_new2
9112  016a               _IO_16to9_new2:
9113  016a 00            	ds.b	1
9114                     	xdef	_IO_16to9_new2
9115  016b               _IO_8to1_new1:
9116  016b 00            	ds.b	1
9117                     	xdef	_IO_8to1_new1
9118  016c               _IO_16to9_new1:
9119  016c 00            	ds.b	1
9120                     	xdef	_IO_16to9_new1
9121  016d               _IO_8to1:
9122  016d 00            	ds.b	1
9123                     	xdef	_IO_8to1
9124  016e               _IO_16to9:
9125  016e 00            	ds.b	1
9126                     	xdef	_IO_16to9
9127                     .eeprom:	section	.data
9128  4000               _stored_devicename:
9129  4000 000000000000  	ds.b	20
9130                     	xdef	_stored_devicename
9131  4014               _stored_IO_8to1:
9132  4014 00            	ds.b	1
9133                     	xdef	_stored_IO_8to1
9134  4015               _stored_unused1:
9135  4015 00            	ds.b	1
9136                     	xdef	_stored_unused1
9137  4016               _stored_unused2:
9138  4016 00            	ds.b	1
9139                     	xdef	_stored_unused2
9140  4017               _stored_uip_ethaddr_oct:
9141  4017 000000000000  	ds.b	6
9142                     	xdef	_stored_uip_ethaddr_oct
9143  401d               _stored_port:
9144  401d 0000          	ds.b	2
9145                     	xdef	_stored_port
9146  401f               _stored_netmask:
9147  401f 00000000      	ds.b	4
9148                     	xdef	_stored_netmask
9149  4023               _stored_draddr:
9150  4023 00000000      	ds.b	4
9151                     	xdef	_stored_draddr
9152  4027               _stored_hostaddr:
9153  4027 00000000      	ds.b	4
9154                     	xdef	_stored_hostaddr
9155  402b               _magic1:
9156  402b 00            	ds.b	1
9157                     	xdef	_magic1
9158  402c               _magic2:
9159  402c 00            	ds.b	1
9160                     	xdef	_magic2
9161  402d               _magic3:
9162  402d 00            	ds.b	1
9163                     	xdef	_magic3
9164  402e               _magic4:
9165  402e 00            	ds.b	1
9166                     	xdef	_magic4
9167  402f               _stored_mqttport:
9168  402f 0000          	ds.b	2
9169                     	xdef	_stored_mqttport
9170  4031               _stored_mqttserveraddr:
9171  4031 00000000      	ds.b	4
9172                     	xdef	_stored_mqttserveraddr
9173  4035               _stored_mqtt_username:
9174  4035 000000000000  	ds.b	11
9175                     	xdef	_stored_mqtt_username
9176  4040               _stored_mqtt_password:
9177  4040 000000000000  	ds.b	11
9178                     	xdef	_stored_mqtt_password
9179  404b               _stored_IO_16to9:
9180  404b 00            	ds.b	1
9181                     	xdef	_stored_IO_16to9
9182  404c               _stored_config_settings:
9183  404c 000000000000  	ds.b	6
9184                     	xdef	_stored_config_settings
9185                     	xdef	_stack_limit2
9186                     	xdef	_stack_limit1
9187                     	xref	_mqtt_disconnect
9188                     	xref	_mqtt_subscribe
9189                     	xref	_mqtt_publish
9190                     	xref	_mqtt_connect
9191                     	xref	_mqtt_init
9192                     	xref	_strlen
9193                     	xref	_strcat
9194                     	xref	_wait_timer
9195                     	xref	_arp_timer_expired
9196                     	xref	_periodic_timer_expired
9197                     	xref	_clock_init
9198                     	xref	_LEDcontrol
9199                     	xref	_gpio_init
9200                     	xref	_check_mqtt_server_arp_entry
9201                     	xref	_uip_arp_timer
9202                     	xref	_uip_arp_out
9203                     	xref	_uip_arp_arpin
9204                     	xref	_uip_arp_init
9205                     	xref	_uip_ethaddr
9206                     	xref	_uip_mqttserveraddr
9207                     	xref	_uip_draddr
9208                     	xref	_uip_netmask
9209                     	xref	_uip_hostaddr
9210                     	xref	_uip_process
9211                     	xref	_uip_conns
9212                     	xref	_uip_conn
9213                     	xref	_uip_len
9214                     	xref	_uip_appdata
9215                     	xref	_htons
9216                     	xref	_uip_connect
9217                     	xref	_uip_buf
9218                     	xref	_uip_init
9219                     	xref	_GpioSetPin
9220                     	xref	_HttpDInit
9221                     	xref	_emb_itoa
9222                     	xref	_Enc28j60Send
9223                     	xref	_Enc28j60Receive
9224                     	xref	_Enc28j60Init
9225                     	xref	_spi_init
9226                     	xdef	_publish_pinstate_all
9227                     	xdef	_publish_pinstate
9228                     	xdef	_publish_outbound
9229                     	xdef	_publish_callback
9230                     	xdef	_mqtt_sanity_check
9231                     	xdef	_mqtt_startup
9232                     	xdef	_debugflash
9233                     	xdef	_fastflash
9234                     	xdef	_oneflash
9235                     	xdef	_reboot
9236                     	xdef	_restart
9237                     	xdef	_check_restart_reboot
9238                     	xdef	_check_reset_button
9239                     	xdef	_write_output_registers
9240                     	xdef	_read_input_registers
9241                     	xdef	_check_runtime_changes
9242                     	xdef	_update_mac_string
9243                     	xdef	_check_eeprom_IOpin_settings
9244                     	xdef	_check_eeprom_settings
9245                     	xdef	_unlock_eeprom
9246                     	xdef	_main
9247                     	switch	.const
9248  9e7b               L5242:
9249  9e7b 2f7374617465  	dc.b	"/state",0
9250  9e82               L7632:
9251  9e82 2f6f75745f6f  	dc.b	"/out_off",0
9252  9e8b               L3632:
9253  9e8b 2f6f75745f6f  	dc.b	"/out_on",0
9254  9e93               L5532:
9255  9e93 2f696e5f6f66  	dc.b	"/in_off",0
9256  9e9b               L1532:
9257  9e9b 2f696e5f6f6e  	dc.b	"/in_on",0
9258  9ea2               L5302:
9259  9ea2 6f6e6c696e65  	dc.b	"online",0
9260  9ea9               L5202:
9261  9ea9 2f7374617465  	dc.b	"/state-req",0
9262  9eb4               L5102:
9263  9eb4 2f6f666600    	dc.b	"/off",0
9264  9eb9               L5002:
9265  9eb9 2f6f6e00      	dc.b	"/on",0
9266  9ebd               L1771:
9267  9ebd 6f66666c696e  	dc.b	"offline",0
9268  9ec5               L7671:
9269  9ec5 2f7374617475  	dc.b	"/status",0
9270                     	xref.b	c_lreg
9290                     	xref	c_ladc
9291                     	xref	c_lcmp
9292                     	xref	c_ltor
9293                     	xref	c_eewrw
9294                     	xref	c_eewrc
9295                     	end
