   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2518                     .iconst:	section	.bss
2519  05fe               _stack_limit2:
2520  05fe 00            	ds.b	1
2521  05ff               _stack_limit1:
2522  05ff 00            	ds.b	1
2523                     .const:	section	.text
2524  9e6c               L5261_devicetype:
2525  9e6c 4e6574776f72  	dc.b	"NetworkModule/",0
2624                     ; 296 int main(void)
2624                     ; 297 {
2626                     .text:	section	.text,new
2627  bd84               _main:
2629  bd84 88            	push	a
2630       00000001      OFST:	set	1
2633                     ; 301   parse_complete = 0;
2635  bd85 725f0106      	clr	_parse_complete
2636                     ; 302   mqtt_parse_complete = 0;
2638  bd89 725f0105      	clr	_mqtt_parse_complete
2639                     ; 303   reboot_request = 0;
2641  bd8d 725f010b      	clr	_reboot_request
2642                     ; 304   user_reboot_request = 0;
2644  bd91 725f010a      	clr	_user_reboot_request
2645                     ; 305   restart_request = 0;
2647  bd95 725f0109      	clr	_restart_request
2648                     ; 307   time_mark2 = 0;           // Time capture used in reboot
2650  bd99 5f            	clrw	x
2651  bd9a cf00fd        	ldw	_time_mark2+2,x
2652  bd9d cf00fb        	ldw	_time_mark2,x
2653                     ; 310   restart_reboot_step = RESTART_REBOOT_IDLE;
2655  bda0 725f0108      	clr	_restart_reboot_step
2656                     ; 311   mqtt_close_tcp = 0;
2658  bda4 725f0107      	clr	_mqtt_close_tcp
2659                     ; 312   stack_error = 0;
2661  bda8 725f0163      	clr	_stack_error
2662                     ; 315   mqtt_start = MQTT_START_TCP_CONNECT;	 // Tracks the MQTT startup steps
2664  bdac 350100a8      	mov	_mqtt_start,#1
2665                     ; 316   mqtt_start_status = MQTT_START_NOT_STARTED; // Tracks error states during
2667  bdb0 725f00a7      	clr	_mqtt_start_status
2668                     ; 318   mqtt_keep_alive = 60;                  // Ping interval in seconds
2670  bdb4 ae003c        	ldw	x,#60
2671  bdb7 cf00f1        	ldw	_mqtt_keep_alive,x
2672                     ; 320   mqtt_start_ctr1 = 0;			 // Tracks time for the MQTT startup
2674  bdba 725f00a6      	clr	_mqtt_start_ctr1
2675                     ; 322   mqtt_start_ctr2 = 0;			 // Tracks time for the MQTT startup
2677  bdbe 725f00a5      	clr	_mqtt_start_ctr2
2678                     ; 324   mqtt_sanity_ctr = 0;			 // Tracks time for the MQTT sanity
2680  bdc2 725f00a4      	clr	_mqtt_sanity_ctr
2681                     ; 326   mqtt_start_retry = 0;                  // Flag to retry the ARP/TCP Connect
2683  bdc6 725f00a3      	clr	_mqtt_start_retry
2684                     ; 327   MQTT_error_status = 0;                 // For MQTT error status display in
2686  bdca 725f029b      	clr	_MQTT_error_status
2687                     ; 329   mqtt_restart_step = MQTT_RESTART_IDLE; // Step counter for MQTT restart
2689  bdce 725f00a0      	clr	_mqtt_restart_step
2690                     ; 330   strcpy(topic_base, devicetype);        // Initial content of the topic_base.
2692  bdd2 ae0074        	ldw	x,#_topic_base
2693  bdd5 90ae9e6c      	ldw	y,#L5261_devicetype
2694  bdd9               L6:
2695  bdd9 90f6          	ld	a,(y)
2696  bddb 905c          	incw	y
2697  bddd f7            	ld	(x),a
2698  bdde 5c            	incw	x
2699  bddf 4d            	tnz	a
2700  bde0 26f7          	jrne	L6
2701                     ; 336   state_request = STATE_REQUEST_IDLE;    // Set the state request received to
2703  bde2 c70164        	ld	_state_request,a
2704                     ; 338   TXERIF_counter = 0;                    // Initialize the TXERIF error counter
2706  bde5 5f            	clrw	x
2707  bde6 cf006d        	ldw	_TXERIF_counter+2,x
2708  bde9 cf006b        	ldw	_TXERIF_counter,x
2709                     ; 339   RXERIF_counter = 0;                    // Initialize the RXERIF error counter
2711  bdec cf0071        	ldw	_RXERIF_counter+2,x
2712  bdef cf006f        	ldw	_RXERIF_counter,x
2713                     ; 340   TRANSMIT_counter = 0;
2715  bdf2 cf0069        	ldw	_TRANSMIT_counter+2,x
2716  bdf5 cf0067        	ldw	_TRANSMIT_counter,x
2717                     ; 346   clock_init();            // Initialize and enable clocks and timers
2719  bdf8 cde5b5        	call	_clock_init
2721                     ; 348   gpio_init();             // Initialize and enable gpio pins
2723  bdfb cda41f        	call	_gpio_init
2725                     ; 350   spi_init();              // Initialize the SPI bit bang interface to the
2727  bdfe cde4bd        	call	_spi_init
2729                     ; 353   LEDcontrol(1);           // turn LED on
2731  be01 a601          	ld	a,#1
2732  be03 cda468        	call	_LEDcontrol
2734                     ; 355   unlock_eeprom();         // unlock the EEPROM so writes can be performed
2736  be06 cdc46e        	call	_unlock_eeprom
2738                     ; 357   check_eeprom_settings(); // Check the EEPROM for previously stored Address
2740  be09 cdc47e        	call	_check_eeprom_settings
2742                     ; 361   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
2744  be0c cda028        	call	_Enc28j60Init
2746                     ; 363   uip_arp_init();          // Initialize the ARP module
2748  be0f cdf226        	call	_uip_arp_init
2750                     ; 365   uip_init();              // Initialize uIP Web Server
2752  be12 cde7c3        	call	_uip_init
2754                     ; 367   HttpDInit();             // Initialize listening ports
2756  be15 cdac96        	call	_HttpDInit
2758                     ; 374   stack_limit1 = 0xaa;
2760  be18 35aa05ff      	mov	_stack_limit1,#170
2761                     ; 375   stack_limit2 = 0x55;
2763  be1c 355505fe      	mov	_stack_limit2,#85
2764                     ; 380   mqtt_init(&mqttclient,
2764                     ; 381             mqtt_sendbuf,
2764                     ; 382 	    sizeof(mqtt_sendbuf),
2764                     ; 383 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
2764                     ; 384 	    UIP_APPDATA_SIZE,
2764                     ; 385 	    publish_callback);
2766  be20 aec1d6        	ldw	x,#_publish_callback
2767  be23 89            	pushw	x
2768  be24 ae01be        	ldw	x,#446
2769  be27 89            	pushw	x
2770  be28 ae03ad        	ldw	x,#_uip_buf+54
2771  be2b 89            	pushw	x
2772  be2c ae00c8        	ldw	x,#200
2773  be2f 89            	pushw	x
2774  be30 ae016f        	ldw	x,#_mqtt_sendbuf
2775  be33 89            	pushw	x
2776  be34 ae00c5        	ldw	x,#_mqttclient
2777  be37 cdd065        	call	_mqtt_init
2779  be3a 5b0a          	addw	sp,#10
2780  be3c               L1561:
2781                     ; 499     uip_len = Enc28j60Receive(uip_buf); // Check for incoming packets
2783  be3c ae0377        	ldw	x,#_uip_buf
2784  be3f cda188        	call	_Enc28j60Receive
2786  be42 cf0373        	ldw	_uip_len,x
2787                     ; 501     if (uip_len > 0) {
2789  be45 2738          	jreq	L5561
2790                     ; 505       if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_IP)) {
2792  be47 ae0800        	ldw	x,#2048
2793  be4a cdf201        	call	_htons
2795  be4d c30383        	cpw	x,_uip_buf+12
2796  be50 2612          	jrne	L7561
2797                     ; 506         uip_input(); // Calls uip_process(UIP_DATA) to process a received
2799  be52 a601          	ld	a,#1
2800  be54 cde8d3        	call	_uip_process
2802                     ; 511         if (uip_len > 0) {
2804  be57 ce0373        	ldw	x,_uip_len
2805  be5a 2723          	jreq	L5561
2806                     ; 512           uip_arp_out();
2808  be5c cdf44f        	call	_uip_arp_out
2810                     ; 516           Enc28j60Send(uip_buf, uip_len);
2812  be5f ce0373        	ldw	x,_uip_len
2814  be62 2013          	jp	LC001
2815  be64               L7561:
2816                     ; 519       else if (((struct uip_eth_hdr *) & uip_buf[0])->type == htons(UIP_ETHTYPE_ARP)) {
2818  be64 ae0806        	ldw	x,#2054
2819  be67 cdf201        	call	_htons
2821  be6a c30383        	cpw	x,_uip_buf+12
2822  be6d 2610          	jrne	L5561
2823                     ; 520         uip_arp_arpin();
2825  be6f cdf3a0        	call	_uip_arp_arpin
2827                     ; 524         if (uip_len > 0) {
2829  be72 ce0373        	ldw	x,_uip_len
2830  be75 2708          	jreq	L5561
2831                     ; 528           Enc28j60Send(uip_buf, uip_len);
2834  be77               LC001:
2835  be77 89            	pushw	x
2836  be78 ae0377        	ldw	x,#_uip_buf
2837  be7b cda235        	call	_Enc28j60Send
2838  be7e 85            	popw	x
2839  be7f               L5561:
2840                     ; 538     if (mqtt_start != MQTT_START_COMPLETE
2840                     ; 539      && mqtt_restart_step == MQTT_RESTART_IDLE
2840                     ; 540      && restart_reboot_step == RESTART_REBOOT_IDLE) {
2842  be7f c600a8        	ld	a,_mqtt_start
2843  be82 a114          	cp	a,#20
2844  be84 270d          	jreq	L1761
2846  be86 c600a0        	ld	a,_mqtt_restart_step
2847  be89 2608          	jrne	L1761
2849  be8b c60108        	ld	a,_restart_reboot_step
2850  be8e 2603          	jrne	L1761
2851                     ; 541        mqtt_startup();
2853  be90 cdbef9        	call	_mqtt_startup
2855  be93               L1761:
2856                     ; 545     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
2858  be93 c60108        	ld	a,_restart_reboot_step
2859  be96 2603          	jrne	L3761
2860                     ; 546       mqtt_sanity_check();
2862  be98 cdc11f        	call	_mqtt_sanity_check
2864  be9b               L3761:
2865                     ; 550     if (periodic_timer_expired()) {
2867  be9b cde647        	call	_periodic_timer_expired
2869  be9e 4d            	tnz	a
2870  be9f 2743          	jreq	L5761
2871                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2873  bea1 4f            	clr	a
2874  bea2 6b01          	ld	(OFST+0,sp),a
2876  bea4               L5071:
2877                     ; 553 	uip_periodic(i);
2879  bea4 97            	ld	xl,a
2880  bea5 a629          	ld	a,#41
2881  bea7 42            	mul	x,a
2882  bea8 1c02cd        	addw	x,#_uip_conns
2883  beab cf0371        	ldw	_uip_conn,x
2886  beae a602          	ld	a,#2
2887  beb0 cde8d3        	call	_uip_process
2889                     ; 572 	if (uip_len > 0) {
2891  beb3 ce0373        	ldw	x,_uip_len
2892  beb6 270e          	jreq	L1171
2893                     ; 573 	  uip_arp_out(); // Verifies arp entry in the ARP table and builds LLH
2895  beb8 cdf44f        	call	_uip_arp_out
2897                     ; 574           Enc28j60Send(uip_buf, uip_len);
2899  bebb ce0373        	ldw	x,_uip_len
2900  bebe 89            	pushw	x
2901  bebf ae0377        	ldw	x,#_uip_buf
2902  bec2 cda235        	call	_Enc28j60Send
2904  bec5 85            	popw	x
2905  bec6               L1171:
2906                     ; 577         mqtt_start_ctr1++; // Increment the MQTT start loop timer 1. This is
2908  bec6 725c00a6      	inc	_mqtt_start_ctr1
2909                     ; 581         mqtt_start_ctr2++; // Increment the MQTT start loop timer 2. This is
2911  beca 725c00a5      	inc	_mqtt_start_ctr2
2912                     ; 584         mqtt_sanity_ctr++; // Increment the MQTT sanity loop timer. This is
2914  bece 725c00a4      	inc	_mqtt_sanity_ctr
2915                     ; 552       for(i = 0; i < UIP_CONNS; i++) {
2917  bed2 0c01          	inc	(OFST+0,sp)
2921  bed4 7b01          	ld	a,(OFST+0,sp)
2922  bed6 a104          	cp	a,#4
2923  bed8 25ca          	jrult	L5071
2924                     ; 594       if (mqtt_start == MQTT_START_COMPLETE) {
2926  beda c600a8        	ld	a,_mqtt_start
2927  bedd a114          	cp	a,#20
2928  bedf 2603          	jrne	L5761
2929                     ; 595         publish_outbound();
2931  bee1 cdc283        	call	_publish_outbound
2933  bee4               L5761:
2934                     ; 602     if (arp_timer_expired()) {
2936  bee4 cde680        	call	_arp_timer_expired
2938  bee7 4d            	tnz	a
2939  bee8 2703          	jreq	L5171
2940                     ; 603       uip_arp_timer(); // Clean out old ARP Table entries. Any entry that has
2942  beea cdf249        	call	_uip_arp_timer
2944  beed               L5171:
2945                     ; 610     check_runtime_changes();
2947  beed cdc988        	call	_check_runtime_changes
2949                     ; 613     check_reset_button();
2951  bef0 cdcf22        	call	_check_reset_button
2953                     ; 618     check_restart_reboot();
2955  bef3 cdcc91        	call	_check_restart_reboot
2958  bef6 ccbe3c        	jra	L1561
3009                     ; 646 void mqtt_startup(void)
3009                     ; 647 {
3010                     .text:	section	.text,new
3011  bef9               _mqtt_startup:
3015                     ; 663   if (mqtt_start == MQTT_START_TCP_CONNECT) {
3017  bef9 c600a8        	ld	a,_mqtt_start
3018  befc a101          	cp	a,#1
3019  befe 2630          	jrne	L7271
3020                     ; 664     if (stored_mqttserveraddr[3] != 0) {
3022  bf00 c64034        	ld	a,_stored_mqttserveraddr+3
3023  bf03 2603ccc11e    	jreq	L7371
3024                     ; 684       mqtt_conn = uip_connect(&uip_mqttserveraddr, Port_Mqttd, Port_Mqttd);
3026  bf08 ce00f6        	ldw	x,_Port_Mqttd
3027  bf0b 89            	pushw	x
3028  bf0c 89            	pushw	x
3029  bf0d ae02b8        	ldw	x,#_uip_mqttserveraddr
3030  bf10 cde7f2        	call	_uip_connect
3032  bf13 5b04          	addw	sp,#4
3033  bf15 cf00a1        	ldw	_mqtt_conn,x
3034                     ; 685       if (mqtt_conn != NULL) {
3036  bf18 2711          	jreq	L3371
3037                     ; 686         mqtt_start_ctr1 = 0; // Clear 100ms counter
3039  bf1a 725f00a6      	clr	_mqtt_start_ctr1
3040                     ; 687         mqtt_start_ctr2 = 0; // Clear 100ms counter
3042  bf1e 725f00a5      	clr	_mqtt_start_ctr2
3043                     ; 688         mqtt_start_status = MQTT_START_CONNECTIONS_GOOD;
3045  bf22 351000a7      	mov	_mqtt_start_status,#16
3046                     ; 689         mqtt_start = MQTT_START_VERIFY_ARP;
3048  bf26 350200a8      	mov	_mqtt_start,#2
3051  bf2a 81            	ret	
3052  bf2b               L3371:
3053                     ; 692         mqtt_start_status |= MQTT_START_CONNECTIONS_ERROR;
3055  bf2b 721000a7      	bset	_mqtt_start_status,#0
3057  bf2f 81            	ret	
3058  bf30               L7271:
3059                     ; 697   else if (mqtt_start == MQTT_START_VERIFY_ARP
3059                     ; 698         && mqtt_start_ctr2 > 10) {
3061  bf30 a102          	cp	a,#2
3062  bf32 263a          	jrne	L1471
3064  bf34 c600a5        	ld	a,_mqtt_start_ctr2
3065  bf37 a10b          	cp	a,#11
3066  bf39 2533          	jrult	L1471
3067                     ; 699     mqtt_start_ctr2 = 0; // Clear 100ms counter
3069  bf3b 725f00a5      	clr	_mqtt_start_ctr2
3070                     ; 706     if (check_mqtt_server_arp_entry() == 1) {
3072  bf3f cdf59a        	call	_check_mqtt_server_arp_entry
3074  bf42 5a            	decw	x
3075  bf43 2611          	jrne	L3471
3076                     ; 708       mqtt_start_retry = 0;
3078  bf45 725f00a3      	clr	_mqtt_start_retry
3079                     ; 709       mqtt_start_ctr1 = 0; // Clear 100ms counter
3081  bf49 725f00a6      	clr	_mqtt_start_ctr1
3082                     ; 710       mqtt_start_status |= MQTT_START_ARP_REQUEST_GOOD;
3084  bf4d 721a00a7      	bset	_mqtt_start_status,#5
3085                     ; 711       mqtt_start = MQTT_START_VERIFY_TCP;
3087  bf51 350300a8      	mov	_mqtt_start,#3
3090  bf55 81            	ret	
3091  bf56               L3471:
3092                     ; 713     else if (mqtt_start_ctr1 > 150) {
3094  bf56 c600a6        	ld	a,_mqtt_start_ctr1
3095  bf59 a197          	cp	a,#151
3096  bf5b 25a8          	jrult	L7371
3097                     ; 716       mqtt_start_status |= MQTT_START_ARP_REQUEST_ERROR;
3099  bf5d 721200a7      	bset	_mqtt_start_status,#1
3100                     ; 717       mqtt_start = MQTT_START_TCP_CONNECT;
3102  bf61 350100a8      	mov	_mqtt_start,#1
3103                     ; 719       mqtt_start_status = MQTT_START_NOT_STARTED;
3105  bf65 725f00a7      	clr	_mqtt_start_status
3106                     ; 720       mqtt_start_retry++;
3108  bf69 725c00a3      	inc	_mqtt_start_retry
3110  bf6d 81            	ret	
3111  bf6e               L1471:
3112                     ; 724   else if (mqtt_start == MQTT_START_VERIFY_TCP
3112                     ; 725         && mqtt_start_ctr2 > 10) {
3114  bf6e c600a8        	ld	a,_mqtt_start
3115  bf71 a103          	cp	a,#3
3116  bf73 263e          	jrne	L3571
3118  bf75 c600a5        	ld	a,_mqtt_start_ctr2
3119  bf78 a10b          	cp	a,#11
3120  bf7a 2537          	jrult	L3571
3121                     ; 726     mqtt_start_ctr2 = 0; // Clear 100ms counter
3123  bf7c 725f00a5      	clr	_mqtt_start_ctr2
3124                     ; 734     if ((mqtt_conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
3126  bf80 ce00a1        	ldw	x,_mqtt_conn
3127  bf83 e619          	ld	a,(25,x)
3128  bf85 a40f          	and	a,#15
3129  bf87 a103          	cp	a,#3
3130  bf89 260d          	jrne	L5571
3131                     ; 735       mqtt_start_retry = 0;
3133  bf8b 725f00a3      	clr	_mqtt_start_retry
3134                     ; 736       mqtt_start_status |= MQTT_START_TCP_CONNECT_GOOD;
3136  bf8f 721c00a7      	bset	_mqtt_start_status,#6
3137                     ; 737       mqtt_start = MQTT_START_QUEUE_CONNECT;
3139  bf93 350400a8      	mov	_mqtt_start,#4
3142  bf97 81            	ret	
3143  bf98               L5571:
3144                     ; 739     else if (mqtt_start_ctr1 > 150) {
3146  bf98 c600a6        	ld	a,_mqtt_start_ctr1
3147  bf9b a197          	cp	a,#151
3148  bf9d 2403ccc11e    	jrult	L7371
3149                     ; 742       mqtt_start_status |= MQTT_START_TCP_CONNECT_ERROR;
3151  bfa2 721400a7      	bset	_mqtt_start_status,#2
3152                     ; 743       mqtt_start = MQTT_START_TCP_CONNECT;
3154  bfa6 350100a8      	mov	_mqtt_start,#1
3155                     ; 745       mqtt_start_status = MQTT_START_NOT_STARTED; 
3157  bfaa 725f00a7      	clr	_mqtt_start_status
3158                     ; 746       mqtt_start_retry++;
3160  bfae 725c00a3      	inc	_mqtt_start_retry
3162  bfb2 81            	ret	
3163  bfb3               L3571:
3164                     ; 750   else if (mqtt_start == MQTT_START_QUEUE_CONNECT) {
3166  bfb3 c600a8        	ld	a,_mqtt_start
3167  bfb6 a104          	cp	a,#4
3168  bfb8 2703ccc040    	jrne	L5671
3169                     ; 761     strcpy(client_id_text, devicetype);
3171  bfbd ae00a9        	ldw	x,#_client_id_text
3172  bfc0 90ae9e6c      	ldw	y,#L5261_devicetype
3173  bfc4               L411:
3174  bfc4 90f6          	ld	a,(y)
3175  bfc6 905c          	incw	y
3176  bfc8 f7            	ld	(x),a
3177  bfc9 5c            	incw	x
3178  bfca 4d            	tnz	a
3179  bfcb 26f7          	jrne	L411
3180                     ; 763     client_id_text[strlen(client_id_text) - 1] = '\0';
3182  bfcd ae00a9        	ldw	x,#_client_id_text
3183  bfd0 cdf6dd        	call	_strlen
3185  bfd3 5a            	decw	x
3186  bfd4 724f00a9      	clr	(_client_id_text,x)
3187                     ; 765     strcat(client_id_text, mac_string);
3189  bfd8 ae010c        	ldw	x,#_mac_string
3190  bfdb 89            	pushw	x
3191  bfdc ae00a9        	ldw	x,#_client_id_text
3192  bfdf cdf6c9        	call	_strcat
3194  bfe2 85            	popw	x
3195                     ; 766     client_id = client_id_text;
3197  bfe3 ae00a9        	ldw	x,#_client_id_text
3198  bfe6 cf00c3        	ldw	_client_id,x
3199                     ; 769     connect_flags = MQTT_CONNECT_CLEAN_SESSION;
3201  bfe9 350200fa      	mov	_connect_flags,#2
3202                     ; 772     topic_base[topic_base_len] = '\0';
3204  bfed 5f            	clrw	x
3205  bfee c60073        	ld	a,_topic_base_len
3206  bff1 97            	ld	xl,a
3207  bff2 724f0074      	clr	(_topic_base,x)
3208                     ; 773     strcat(topic_base, "/status");
3210  bff6 ae9ec5        	ldw	x,#L7671
3211  bff9 89            	pushw	x
3212  bffa ae0074        	ldw	x,#_topic_base
3213  bffd cdf6c9        	call	_strcat
3215  c000 85            	popw	x
3216                     ; 776     mqtt_connect(&mqttclient,
3216                     ; 777                  client_id,              // Based on MAC address
3216                     ; 778                  topic_base,             // Will topic
3216                     ; 779                  "offline",              // Will message 
3216                     ; 780                  7,                      // Will message size
3216                     ; 781                  stored_mqtt_username,   // Username
3216                     ; 782                  stored_mqtt_password,   // Password
3216                     ; 783                  connect_flags,          // Connect flags
3216                     ; 784                  mqtt_keep_alive);       // Ping interval
3218  c001 ce00f1        	ldw	x,_mqtt_keep_alive
3219  c004 89            	pushw	x
3220  c005 3b00fa        	push	_connect_flags
3221  c008 ae4040        	ldw	x,#_stored_mqtt_password
3222  c00b 89            	pushw	x
3223  c00c ae4035        	ldw	x,#_stored_mqtt_username
3224  c00f 89            	pushw	x
3225  c010 ae0007        	ldw	x,#7
3226  c013 89            	pushw	x
3227  c014 ae9ebd        	ldw	x,#L1771
3228  c017 89            	pushw	x
3229  c018 ae0074        	ldw	x,#_topic_base
3230  c01b 89            	pushw	x
3231  c01c ce00c3        	ldw	x,_client_id
3232  c01f 89            	pushw	x
3233  c020 ae00c5        	ldw	x,#_mqttclient
3234  c023 cdd0bd        	call	_mqtt_connect
3236  c026 5b0f          	addw	sp,#15
3237                     ; 786     if (mqttclient.error == MQTT_OK) {
3239  c028 ce00cf        	ldw	x,_mqttclient+10
3240  c02b 5a            	decw	x
3241  c02c 260d          	jrne	L3771
3242                     ; 787       mqtt_start_ctr1 = 0; // Clear 100ms counter
3244  c02e 725f00a6      	clr	_mqtt_start_ctr1
3245                     ; 788       mqtt_start_status |= MQTT_START_MQTT_CONNECT_GOOD;
3247  c032 721e00a7      	bset	_mqtt_start_status,#7
3248                     ; 789       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE1;
3250  c036 350500a8      	mov	_mqtt_start,#5
3253  c03a 81            	ret	
3254  c03b               L3771:
3255                     ; 792       mqtt_start_status |= MQTT_START_MQTT_CONNECT_ERROR;
3257  c03b 721600a7      	bset	_mqtt_start_status,#3
3259  c03f 81            	ret	
3260  c040               L5671:
3261                     ; 796   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE1) {
3263  c040 a105          	cp	a,#5
3264  c042 2635          	jrne	L1002
3265                     ; 806     if (mqtt_start_ctr1 > 20) {
3267  c044 c600a6        	ld	a,_mqtt_start_ctr1
3268  c047 a115          	cp	a,#21
3269  c049 2403ccc11e    	jrult	L7371
3270                     ; 817       topic_base[topic_base_len] = '\0';
3272  c04e c60073        	ld	a,_topic_base_len
3273  c051 5f            	clrw	x
3274  c052 97            	ld	xl,a
3275  c053 724f0074      	clr	(_topic_base,x)
3276                     ; 818       strcat(topic_base, "/on");
3278  c057 ae9eb9        	ldw	x,#L5002
3279  c05a 89            	pushw	x
3280  c05b ae0074        	ldw	x,#_topic_base
3281  c05e cdf6c9        	call	_strcat
3283  c061 85            	popw	x
3284                     ; 819       mqtt_subscribe(&mqttclient, topic_base, 0);
3286  c062 5f            	clrw	x
3287  c063 89            	pushw	x
3288  c064 ae0074        	ldw	x,#_topic_base
3289  c067 89            	pushw	x
3290  c068 ae00c5        	ldw	x,#_mqttclient
3291  c06b cdd3cc        	call	_mqtt_subscribe
3293  c06e 5b04          	addw	sp,#4
3294                     ; 820       mqtt_start_ctr1 = 0; // Clear 100ms counter
3296  c070 725f00a6      	clr	_mqtt_start_ctr1
3297                     ; 821       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE2;
3299  c074 350600a8      	mov	_mqtt_start,#6
3301  c078 81            	ret	
3302  c079               L1002:
3303                     ; 825   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE2) {
3305  c079 a106          	cp	a,#6
3306  c07b 2632          	jrne	L1102
3307                     ; 826     if (mqtt_start_ctr1 > 10) {
3309  c07d c600a6        	ld	a,_mqtt_start_ctr1
3310  c080 a10b          	cp	a,#11
3311  c082 25c7          	jrult	L7371
3312                     ; 829       topic_base[topic_base_len] = '\0';
3314  c084 c60073        	ld	a,_topic_base_len
3315  c087 5f            	clrw	x
3316  c088 97            	ld	xl,a
3317  c089 724f0074      	clr	(_topic_base,x)
3318                     ; 830       strcat(topic_base, "/off");
3320  c08d ae9eb4        	ldw	x,#L5102
3321  c090 89            	pushw	x
3322  c091 ae0074        	ldw	x,#_topic_base
3323  c094 cdf6c9        	call	_strcat
3325  c097 85            	popw	x
3326                     ; 831       mqtt_subscribe(&mqttclient, topic_base, 0);
3328  c098 5f            	clrw	x
3329  c099 89            	pushw	x
3330  c09a ae0074        	ldw	x,#_topic_base
3331  c09d 89            	pushw	x
3332  c09e ae00c5        	ldw	x,#_mqttclient
3333  c0a1 cdd3cc        	call	_mqtt_subscribe
3335  c0a4 5b04          	addw	sp,#4
3336                     ; 832       mqtt_start_ctr1 = 0; // Clear 100ms counter
3338  c0a6 725f00a6      	clr	_mqtt_start_ctr1
3339                     ; 833       mqtt_start = MQTT_START_QUEUE_SUBSCRIBE3;
3341  c0aa 350700a8      	mov	_mqtt_start,#7
3343  c0ae 81            	ret	
3344  c0af               L1102:
3345                     ; 837   else if (mqtt_start == MQTT_START_QUEUE_SUBSCRIBE3) {
3347  c0af a107          	cp	a,#7
3348  c0b1 2632          	jrne	L1202
3349                     ; 838     if (mqtt_start_ctr1 > 10) {
3351  c0b3 c600a6        	ld	a,_mqtt_start_ctr1
3352  c0b6 a10b          	cp	a,#11
3353  c0b8 2564          	jrult	L7371
3354                     ; 841       topic_base[topic_base_len] = '\0';
3356  c0ba c60073        	ld	a,_topic_base_len
3357  c0bd 5f            	clrw	x
3358  c0be 97            	ld	xl,a
3359  c0bf 724f0074      	clr	(_topic_base,x)
3360                     ; 842       strcat(topic_base, "/state-req");
3362  c0c3 ae9ea9        	ldw	x,#L5202
3363  c0c6 89            	pushw	x
3364  c0c7 ae0074        	ldw	x,#_topic_base
3365  c0ca cdf6c9        	call	_strcat
3367  c0cd 85            	popw	x
3368                     ; 843       mqtt_subscribe(&mqttclient, topic_base, 0);
3370  c0ce 5f            	clrw	x
3371  c0cf 89            	pushw	x
3372  c0d0 ae0074        	ldw	x,#_topic_base
3373  c0d3 89            	pushw	x
3374  c0d4 ae00c5        	ldw	x,#_mqttclient
3375  c0d7 cdd3cc        	call	_mqtt_subscribe
3377  c0da 5b04          	addw	sp,#4
3378                     ; 844       mqtt_start_ctr1 = 0; // Clear 100ms counter
3380  c0dc 725f00a6      	clr	_mqtt_start_ctr1
3381                     ; 845       mqtt_start = MQTT_START_QUEUE_PUBLISH;
3383  c0e0 350900a8      	mov	_mqtt_start,#9
3385  c0e4 81            	ret	
3386  c0e5               L1202:
3387                     ; 849   else if (mqtt_start == MQTT_START_QUEUE_PUBLISH) {
3389  c0e5 a109          	cp	a,#9
3390  c0e7 2635          	jrne	L7371
3391                     ; 850     if (mqtt_start_ctr1 > 10) {
3393  c0e9 c600a6        	ld	a,_mqtt_start_ctr1
3394  c0ec a10b          	cp	a,#11
3395  c0ee 252e          	jrult	L7371
3396                     ; 853       topic_base[topic_base_len] = '\0';
3398  c0f0 c60073        	ld	a,_topic_base_len
3399  c0f3 5f            	clrw	x
3400  c0f4 97            	ld	xl,a
3401  c0f5 724f0074      	clr	(_topic_base,x)
3402                     ; 854       strcat(topic_base, "/status");
3404  c0f9 ae9ec5        	ldw	x,#L7671
3405  c0fc 89            	pushw	x
3406  c0fd ae0074        	ldw	x,#_topic_base
3407  c100 cdf6c9        	call	_strcat
3409  c103 85            	popw	x
3410                     ; 855       mqtt_publish(&mqttclient,
3410                     ; 856                    topic_base,
3410                     ; 857 		   "online",
3410                     ; 858 		   6,
3410                     ; 859 		   MQTT_PUBLISH_QOS_0 | MQTT_PUBLISH_RETAIN);
3412  c104 4b01          	push	#1
3413  c106 ae0006        	ldw	x,#6
3414  c109 89            	pushw	x
3415  c10a ae9ea2        	ldw	x,#L5302
3416  c10d 89            	pushw	x
3417  c10e ae0074        	ldw	x,#_topic_base
3418  c111 89            	pushw	x
3419  c112 ae00c5        	ldw	x,#_mqttclient
3420  c115 cdd167        	call	_mqtt_publish
3422  c118 5b07          	addw	sp,#7
3423                     ; 861       mqtt_start = MQTT_START_COMPLETE;
3425  c11a 351400a8      	mov	_mqtt_start,#20
3426  c11e               L7371:
3427                     ; 864 }
3430  c11e 81            	ret	
3466                     ; 867 void mqtt_sanity_check(void)
3466                     ; 868 {
3467                     .text:	section	.text,new
3468  c11f               _mqtt_sanity_check:
3472                     ; 880   if (mqtt_restart_step == MQTT_RESTART_IDLE) {
3474  c11f c600a0        	ld	a,_mqtt_restart_step
3475  c122 2634          	jrne	L7402
3476                     ; 887     if (mqttclient.number_of_timeouts > 1) {
3478  c124 ce00d3        	ldw	x,_mqttclient+14
3479  c127 a30002        	cpw	x,#2
3480  c12a 2f08          	jrslt	L1502
3481                     ; 889       mqttclient.number_of_timeouts = 0;
3483  c12c 5f            	clrw	x
3484  c12d cf00d3        	ldw	_mqttclient+14,x
3485                     ; 890       mqtt_restart_step = MQTT_RESTART_BEGIN;
3487  c130 350100a0      	mov	_mqtt_restart_step,#1
3488  c134               L1502:
3489                     ; 896     if (mqtt_start == MQTT_START_COMPLETE
3489                     ; 897      && mqtt_conn->tcpstateflags == UIP_CLOSED) {
3491  c134 c600a8        	ld	a,_mqtt_start
3492  c137 a114          	cp	a,#20
3493  c139 260b          	jrne	L3502
3495  c13b ce00a1        	ldw	x,_mqtt_conn
3496  c13e 6d19          	tnz	(25,x)
3497  c140 2604          	jrne	L3502
3498                     ; 898       mqtt_restart_step = MQTT_RESTART_BEGIN;
3500  c142 350100a0      	mov	_mqtt_restart_step,#1
3501  c146               L3502:
3502                     ; 904     if (mqtt_start == MQTT_START_COMPLETE
3502                     ; 905      && mqttclient.error != MQTT_OK) {
3504  c146 a114          	cp	a,#20
3505  c148 2703ccc1d5    	jrne	L7502
3507  c14d ce00cf        	ldw	x,_mqttclient+10
3508  c150 5a            	decw	x
3509  c151 27f7          	jreq	L7502
3510                     ; 906       mqtt_restart_step = MQTT_RESTART_BEGIN;
3512  c153 350100a0      	mov	_mqtt_restart_step,#1
3514  c157 81            	ret	
3515  c158               L7402:
3516                     ; 910   else if (mqtt_restart_step == MQTT_RESTART_BEGIN) {
3518  c158 a101          	cp	a,#1
3519  c15a 2609          	jrne	L1602
3520                     ; 918     mqtt_restart_step = MQTT_RESTART_DISCONNECT_START;
3522  c15c 350200a0      	mov	_mqtt_restart_step,#2
3523                     ; 921     mqtt_start_status = MQTT_START_NOT_STARTED;
3525  c160 725f00a7      	clr	_mqtt_start_status
3528  c164 81            	ret	
3529  c165               L1602:
3530                     ; 924   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_START) {
3532  c165 a102          	cp	a,#2
3533  c167 260f          	jrne	L5602
3534                     ; 925     mqtt_restart_step = MQTT_RESTART_DISCONNECT_WAIT;
3536  c169 350300a0      	mov	_mqtt_restart_step,#3
3537                     ; 927     mqtt_disconnect(&mqttclient);
3539  c16d ae00c5        	ldw	x,#_mqttclient
3540  c170 cdd4b8        	call	_mqtt_disconnect
3542                     ; 928     mqtt_sanity_ctr = 0; // Clear 100ms counter
3544  c173 725f00a4      	clr	_mqtt_sanity_ctr
3547  c177 81            	ret	
3548  c178               L5602:
3549                     ; 931   else if (mqtt_restart_step == MQTT_RESTART_DISCONNECT_WAIT) {
3551  c178 a103          	cp	a,#3
3552  c17a 260c          	jrne	L1702
3553                     ; 932     if (mqtt_sanity_ctr > 10) {
3555  c17c c600a4        	ld	a,_mqtt_sanity_ctr
3556  c17f a10b          	cp	a,#11
3557  c181 2552          	jrult	L7502
3558                     ; 935       mqtt_restart_step = MQTT_RESTART_TCPCLOSE;
3560  c183 350400a0      	mov	_mqtt_restart_step,#4
3562  c187 81            	ret	
3563  c188               L1702:
3564                     ; 939   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE) {
3566  c188 a104          	cp	a,#4
3567  c18a 260d          	jrne	L7702
3568                     ; 955     mqtt_close_tcp = 1;
3570  c18c 35010107      	mov	_mqtt_close_tcp,#1
3571                     ; 957     mqtt_sanity_ctr = 0; // Clear 100ms counter
3573  c190 725f00a4      	clr	_mqtt_sanity_ctr
3574                     ; 958     mqtt_restart_step = MQTT_RESTART_TCPCLOSE_WAIT;
3576  c194 350500a0      	mov	_mqtt_restart_step,#5
3579  c198 81            	ret	
3580  c199               L7702:
3581                     ; 961   else if (mqtt_restart_step == MQTT_RESTART_TCPCLOSE_WAIT) {
3583  c199 a105          	cp	a,#5
3584  c19b 2610          	jrne	L3012
3585                     ; 966     if (mqtt_sanity_ctr > 20) {
3587  c19d c600a4        	ld	a,_mqtt_sanity_ctr
3588  c1a0 a115          	cp	a,#21
3589  c1a2 2531          	jrult	L7502
3590                     ; 967       mqtt_close_tcp = 0;
3592  c1a4 725f0107      	clr	_mqtt_close_tcp
3593                     ; 968       mqtt_restart_step = MQTT_RESTART_SIGNAL_STARTUP;
3595  c1a8 350600a0      	mov	_mqtt_restart_step,#6
3597  c1ac 81            	ret	
3598  c1ad               L3012:
3599                     ; 972   else if (mqtt_restart_step == MQTT_RESTART_SIGNAL_STARTUP) {
3601  c1ad a106          	cp	a,#6
3602  c1af 2624          	jrne	L7502
3603                     ; 974     mqtt_init(&mqttclient,
3603                     ; 975               mqtt_sendbuf,
3603                     ; 976 	      sizeof(mqtt_sendbuf),
3603                     ; 977 	      &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
3603                     ; 978 	      UIP_APPDATA_SIZE,
3603                     ; 979 	      publish_callback);
3605  c1b1 aec1d6        	ldw	x,#_publish_callback
3606  c1b4 89            	pushw	x
3607  c1b5 ae01be        	ldw	x,#446
3608  c1b8 89            	pushw	x
3609  c1b9 ae03ad        	ldw	x,#_uip_buf+54
3610  c1bc 89            	pushw	x
3611  c1bd ae00c8        	ldw	x,#200
3612  c1c0 89            	pushw	x
3613  c1c1 ae016f        	ldw	x,#_mqtt_sendbuf
3614  c1c4 89            	pushw	x
3615  c1c5 ae00c5        	ldw	x,#_mqttclient
3616  c1c8 cdd065        	call	_mqtt_init
3618  c1cb 5b0a          	addw	sp,#10
3619                     ; 982     mqtt_restart_step = MQTT_RESTART_IDLE;
3621  c1cd 725f00a0      	clr	_mqtt_restart_step
3622                     ; 983     mqtt_start = MQTT_START_TCP_CONNECT;
3624  c1d1 350100a8      	mov	_mqtt_start,#1
3625  c1d5               L7502:
3626                     ; 985 }
3629  c1d5 81            	ret	
3702                     ; 1063 void publish_callback(void** unused, struct mqtt_response_publish *published)
3702                     ; 1064 {
3703                     .text:	section	.text,new
3704  c1d6               _publish_callback:
3706  c1d6 5204          	subw	sp,#4
3707       00000004      OFST:	set	4
3710                     ; 1070   pin_value = 0;
3712  c1d8 0f01          	clr	(OFST-3,sp)
3714                     ; 1071   ParseNum = 0;
3716                     ; 1099   pBuffer = uip_appdata;
3718  c1da ce0375        	ldw	x,_uip_appdata
3720                     ; 1101   pBuffer = pBuffer + 1;
3722  c1dd 1c0012        	addw	x,#18
3724                     ; 1103   pBuffer = pBuffer + 1;
3727                     ; 1105   pBuffer = pBuffer + 2;
3730                     ; 1107   pBuffer = pBuffer + 14;
3732  c1e0 1f03          	ldw	(OFST-1,sp),x
3734                     ; 1109   pBuffer = pBuffer + strlen(stored_devicename) + 1;
3736  c1e2 ae4000        	ldw	x,#_stored_devicename
3737  c1e5 cdf6dd        	call	_strlen
3739  c1e8 72fb03        	addw	x,(OFST-1,sp)
3740  c1eb 5c            	incw	x
3741  c1ec 1f03          	ldw	(OFST-1,sp),x
3743                     ; 1112   if (*pBuffer == 'o') {
3745  c1ee f6            	ld	a,(x)
3746  c1ef a16f          	cp	a,#111
3747  c1f1 267a          	jrne	L3412
3748                     ; 1113     pBuffer++;
3750  c1f3 5c            	incw	x
3751  c1f4 1f03          	ldw	(OFST-1,sp),x
3753                     ; 1114     if (*pBuffer == 'n') {
3755  c1f6 f6            	ld	a,(x)
3756  c1f7 a16e          	cp	a,#110
3757  c1f9 2609          	jrne	L5412
3758                     ; 1115       pBuffer++;
3760  c1fb 5c            	incw	x
3761  c1fc 1f03          	ldw	(OFST-1,sp),x
3763                     ; 1116       pin_value = 1;
3765  c1fe a601          	ld	a,#1
3766  c200 6b01          	ld	(OFST-3,sp),a
3769  c202 200b          	jra	L7412
3770  c204               L5412:
3771                     ; 1118     else if (*pBuffer == 'f') {
3773  c204 a166          	cp	a,#102
3774  c206 2607          	jrne	L7412
3775                     ; 1119       pBuffer = pBuffer + 2;
3777  c208 1c0002        	addw	x,#2
3778  c20b 1f03          	ldw	(OFST-1,sp),x
3780                     ; 1120       pin_value = 0;
3782  c20d 0f01          	clr	(OFST-3,sp)
3784  c20f               L7412:
3785                     ; 1124     if (*pBuffer == 'a') {
3787  c20f f6            	ld	a,(x)
3788  c210 a161          	cp	a,#97
3789  c212 2625          	jrne	L3512
3790                     ; 1125       pBuffer++;
3792  c214 5c            	incw	x
3793  c215 1f03          	ldw	(OFST-1,sp),x
3795                     ; 1126       if (*pBuffer == 'l') {
3797  c217 f6            	ld	a,(x)
3798  c218 a16c          	cp	a,#108
3799  c21a 264b          	jrne	L7612
3800                     ; 1127         pBuffer++;
3802  c21c 5c            	incw	x
3803  c21d 1f03          	ldw	(OFST-1,sp),x
3805                     ; 1128         if (*pBuffer == 'l') {
3807  c21f f6            	ld	a,(x)
3808  c220 a16c          	cp	a,#108
3809  c222 2643          	jrne	L7612
3810                     ; 1130 	  for (i=0; i<8; i++) GpioSetPin(i, (uint8_t)pin_value);
3812  c224 0f02          	clr	(OFST-2,sp)
3814  c226               L1612:
3817  c226 7b01          	ld	a,(OFST-3,sp)
3818  c228 97            	ld	xl,a
3819  c229 7b02          	ld	a,(OFST-2,sp)
3820  c22b 95            	ld	xh,a
3821  c22c cdbc95        	call	_GpioSetPin
3825  c22f 0c02          	inc	(OFST-2,sp)
3829  c231 7b02          	ld	a,(OFST-2,sp)
3830  c233 a108          	cp	a,#8
3831  c235 25ef          	jrult	L1612
3832  c237 202e          	jra	L7612
3833  c239               L3512:
3834                     ; 1136     else if (*pBuffer == '0' || *pBuffer == '1') {
3836  c239 a130          	cp	a,#48
3837  c23b 2704          	jreq	L3712
3839  c23d a131          	cp	a,#49
3840  c23f 2626          	jrne	L7612
3841  c241               L3712:
3842                     ; 1138       ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3844  c241 97            	ld	xl,a
3845  c242 a60a          	ld	a,#10
3846  c244 42            	mul	x,a
3847  c245 9f            	ld	a,xl
3848  c246 a0e0          	sub	a,#224
3849  c248 6b02          	ld	(OFST-2,sp),a
3851                     ; 1139       pBuffer++;
3853  c24a 1e03          	ldw	x,(OFST-1,sp)
3854  c24c 5c            	incw	x
3855  c24d 1f03          	ldw	(OFST-1,sp),x
3857                     ; 1141       ParseNum += (uint8_t)(*pBuffer - '0');
3859  c24f f6            	ld	a,(x)
3860  c250 a030          	sub	a,#48
3861  c252 1b02          	add	a,(OFST-2,sp)
3862  c254 6b02          	ld	(OFST-2,sp),a
3864                     ; 1143       if (ParseNum > 0 && ParseNum < 9) {
3866  c256 270f          	jreq	L7612
3868  c258 a109          	cp	a,#9
3869  c25a 240b          	jruge	L7612
3870                     ; 1145         ParseNum--;
3872  c25c 0a02          	dec	(OFST-2,sp)
3874                     ; 1147         GpioSetPin(ParseNum, (uint8_t)pin_value);
3876  c25e 7b01          	ld	a,(OFST-3,sp)
3877  c260 97            	ld	xl,a
3878  c261 7b02          	ld	a,(OFST-2,sp)
3879  c263 95            	ld	xh,a
3880  c264 cdbc95        	call	_GpioSetPin
3882  c267               L7612:
3883                     ; 1153     mqtt_parse_complete = 1;
3885  c267 35010105      	mov	_mqtt_parse_complete,#1
3887  c26b 2013          	jra	L7712
3888  c26d               L3412:
3889                     ; 1157   else if (*pBuffer == 's') {
3891  c26d a173          	cp	a,#115
3892  c26f 260f          	jrne	L7712
3893                     ; 1158     pBuffer += 8;
3895  c271 1c0008        	addw	x,#8
3897                     ; 1159     if (*pBuffer == 'q') {
3899  c274 f6            	ld	a,(x)
3900  c275 a171          	cp	a,#113
3901  c277 2607          	jrne	L7712
3902                     ; 1160       *pBuffer = '0'; // Destroy 'q' in buffer so subsequent "state"
3904  c279 a630          	ld	a,#48
3905  c27b f7            	ld	(x),a
3906                     ; 1171       state_request = STATE_REQUEST_RCVD;
3908  c27c 35010164      	mov	_state_request,#1
3909  c280               L7712:
3910                     ; 1174 }
3913  c280 5b04          	addw	sp,#4
3914  c282 81            	ret	
3953                     ; 1177 void publish_outbound(void)
3953                     ; 1178 {
3954                     .text:	section	.text,new
3955  c283               _publish_outbound:
3957  c283 88            	push	a
3958       00000001      OFST:	set	1
3961                     ; 1210   if (state_request == STATE_REQUEST_IDLE) {
3963  c284 c60164        	ld	a,_state_request
3964  c287 2703ccc37c    	jrne	L1222
3965                     ; 1213     xor_tmp = (uint8_t)(IO_16to9 ^ IO_16to9_sent);
3967  c28c c6016e        	ld	a,_IO_16to9
3968  c28f c80168        	xor	a,_IO_16to9_sent
3969  c292 6b01          	ld	(OFST+0,sp),a
3971                     ; 1215     if      (xor_tmp & 0x80) publish_pinstate('I', '8', IO_16to9, 0x80); // Input 8
3973  c294 2a0a          	jrpl	L3222
3976  c296 4b80          	push	#128
3977  c298 3b016e        	push	_IO_16to9
3978  c29b ae4938        	ldw	x,#18744
3981  c29e 2060          	jp	LC002
3982  c2a0               L3222:
3983                     ; 1216     else if (xor_tmp & 0x40) publish_pinstate('I', '7', IO_16to9, 0x40); // Input 7
3985  c2a0 a540          	bcp	a,#64
3986  c2a2 270a          	jreq	L7222
3989  c2a4 4b40          	push	#64
3990  c2a6 3b016e        	push	_IO_16to9
3991  c2a9 ae4937        	ldw	x,#18743
3994  c2ac 2052          	jp	LC002
3995  c2ae               L7222:
3996                     ; 1217     else if (xor_tmp & 0x20) publish_pinstate('I', '6', IO_16to9, 0x20); // Input 6
3998  c2ae a520          	bcp	a,#32
3999  c2b0 270a          	jreq	L3322
4002  c2b2 4b20          	push	#32
4003  c2b4 3b016e        	push	_IO_16to9
4004  c2b7 ae4936        	ldw	x,#18742
4007  c2ba 2044          	jp	LC002
4008  c2bc               L3322:
4009                     ; 1218     else if (xor_tmp & 0x10) publish_pinstate('I', '5', IO_16to9, 0x10); // Input 5
4011  c2bc a510          	bcp	a,#16
4012  c2be 270a          	jreq	L7322
4015  c2c0 4b10          	push	#16
4016  c2c2 3b016e        	push	_IO_16to9
4017  c2c5 ae4935        	ldw	x,#18741
4020  c2c8 2036          	jp	LC002
4021  c2ca               L7322:
4022                     ; 1219     else if (xor_tmp & 0x08) publish_pinstate('I', '4', IO_16to9, 0x08); // Input 4
4024  c2ca a508          	bcp	a,#8
4025  c2cc 270a          	jreq	L3422
4028  c2ce 4b08          	push	#8
4029  c2d0 3b016e        	push	_IO_16to9
4030  c2d3 ae4934        	ldw	x,#18740
4033  c2d6 2028          	jp	LC002
4034  c2d8               L3422:
4035                     ; 1220     else if (xor_tmp & 0x04) publish_pinstate('I', '3', IO_16to9, 0x04); // Input 3
4037  c2d8 a504          	bcp	a,#4
4038  c2da 270a          	jreq	L7422
4041  c2dc 4b04          	push	#4
4042  c2de 3b016e        	push	_IO_16to9
4043  c2e1 ae4933        	ldw	x,#18739
4046  c2e4 201a          	jp	LC002
4047  c2e6               L7422:
4048                     ; 1221     else if (xor_tmp & 0x02) publish_pinstate('I', '2', IO_16to9, 0x02); // Input 2
4050  c2e6 a502          	bcp	a,#2
4051  c2e8 270a          	jreq	L3522
4054  c2ea 4b02          	push	#2
4055  c2ec 3b016e        	push	_IO_16to9
4056  c2ef ae4932        	ldw	x,#18738
4059  c2f2 200c          	jp	LC002
4060  c2f4               L3522:
4061                     ; 1222     else if (xor_tmp & 0x01) publish_pinstate('I', '1', IO_16to9, 0x01); // Input 1
4063  c2f4 a501          	bcp	a,#1
4064  c2f6 270c          	jreq	L5222
4067  c2f8 4b01          	push	#1
4068  c2fa 3b016e        	push	_IO_16to9
4069  c2fd ae4931        	ldw	x,#18737
4071  c300               LC002:
4072  c300 cdc38a        	call	_publish_pinstate
4073  c303 85            	popw	x
4074  c304               L5222:
4075                     ; 1226     xor_tmp = (uint8_t)(IO_8to1 ^ IO_8to1_sent);
4077  c304 c6016d        	ld	a,_IO_8to1
4078  c307 c80167        	xor	a,_IO_8to1_sent
4079  c30a 6b01          	ld	(OFST+0,sp),a
4081                     ; 1228     if      (xor_tmp & 0x80) publish_pinstate('O', '8', IO_8to1, 0x80); // Output 8
4083  c30c 2a0a          	jrpl	L1622
4086  c30e 4b80          	push	#128
4087  c310 3b016d        	push	_IO_8to1
4088  c313 ae4f38        	ldw	x,#20280
4091  c316 2060          	jp	LC003
4092  c318               L1622:
4093                     ; 1229     else if (xor_tmp & 0x40) publish_pinstate('O', '7', IO_8to1, 0x40); // Output 7
4095  c318 a540          	bcp	a,#64
4096  c31a 270a          	jreq	L5622
4099  c31c 4b40          	push	#64
4100  c31e 3b016d        	push	_IO_8to1
4101  c321 ae4f37        	ldw	x,#20279
4104  c324 2052          	jp	LC003
4105  c326               L5622:
4106                     ; 1230     else if (xor_tmp & 0x20) publish_pinstate('O', '6', IO_8to1, 0x20); // Output 6
4108  c326 a520          	bcp	a,#32
4109  c328 270a          	jreq	L1722
4112  c32a 4b20          	push	#32
4113  c32c 3b016d        	push	_IO_8to1
4114  c32f ae4f36        	ldw	x,#20278
4117  c332 2044          	jp	LC003
4118  c334               L1722:
4119                     ; 1231     else if (xor_tmp & 0x10) publish_pinstate('O', '5', IO_8to1, 0x10); // Output 5
4121  c334 a510          	bcp	a,#16
4122  c336 270a          	jreq	L5722
4125  c338 4b10          	push	#16
4126  c33a 3b016d        	push	_IO_8to1
4127  c33d ae4f35        	ldw	x,#20277
4130  c340 2036          	jp	LC003
4131  c342               L5722:
4132                     ; 1232     else if (xor_tmp & 0x08) publish_pinstate('O', '4', IO_8to1, 0x08); // Output 4
4134  c342 a508          	bcp	a,#8
4135  c344 270a          	jreq	L1032
4138  c346 4b08          	push	#8
4139  c348 3b016d        	push	_IO_8to1
4140  c34b ae4f34        	ldw	x,#20276
4143  c34e 2028          	jp	LC003
4144  c350               L1032:
4145                     ; 1233     else if (xor_tmp & 0x04) publish_pinstate('O', '3', IO_8to1, 0x04); // Output 3
4147  c350 a504          	bcp	a,#4
4148  c352 270a          	jreq	L5032
4151  c354 4b04          	push	#4
4152  c356 3b016d        	push	_IO_8to1
4153  c359 ae4f33        	ldw	x,#20275
4156  c35c 201a          	jp	LC003
4157  c35e               L5032:
4158                     ; 1234     else if (xor_tmp & 0x02) publish_pinstate('O', '2', IO_8to1, 0x02); // Output 2
4160  c35e a502          	bcp	a,#2
4161  c360 270a          	jreq	L1132
4164  c362 4b02          	push	#2
4165  c364 3b016d        	push	_IO_8to1
4166  c367 ae4f32        	ldw	x,#20274
4169  c36a 200c          	jp	LC003
4170  c36c               L1132:
4171                     ; 1235     else if (xor_tmp & 0x01) publish_pinstate('O', '1', IO_8to1, 0x01); // Output 1
4173  c36c a501          	bcp	a,#1
4174  c36e 270c          	jreq	L1222
4177  c370 4b01          	push	#1
4178  c372 3b016d        	push	_IO_8to1
4179  c375 ae4f31        	ldw	x,#20273
4181  c378               LC003:
4182  c378 cdc38a        	call	_publish_pinstate
4183  c37b 85            	popw	x
4184  c37c               L1222:
4185                     ; 1239   if (state_request == STATE_REQUEST_RCVD) {
4187  c37c c60164        	ld	a,_state_request
4188  c37f 4a            	dec	a
4189  c380 2606          	jrne	L7132
4190                     ; 1241     state_request = STATE_REQUEST_IDLE;
4192  c382 c70164        	ld	_state_request,a
4193                     ; 1242     publish_pinstate_all();
4195  c385 cdc422        	call	_publish_pinstate_all
4197  c388               L7132:
4198                     ; 1244 }
4201  c388 84            	pop	a
4202  c389 81            	ret	
4266                     ; 1247 void publish_pinstate(uint8_t direction, uint8_t pin, uint8_t value, uint8_t mask)
4266                     ; 1248 {
4267                     .text:	section	.text,new
4268  c38a               _publish_pinstate:
4270  c38a 89            	pushw	x
4271       00000000      OFST:	set	0
4274                     ; 1251   application_message[0] = '0';
4276  c38b 353000f3      	mov	_application_message,#48
4277                     ; 1252   application_message[1] = (uint8_t)(pin);
4279  c38f 9f            	ld	a,xl
4280  c390 c700f4        	ld	_application_message+1,a
4281                     ; 1253   application_message[2] = '\0';
4283  c393 725f00f5      	clr	_application_message+2
4284                     ; 1255   topic_base[topic_base_len] = '\0';
4286  c397 5f            	clrw	x
4287  c398 c60073        	ld	a,_topic_base_len
4288  c39b 97            	ld	xl,a
4289  c39c 724f0074      	clr	(_topic_base,x)
4290                     ; 1258   if (direction == 'I') {
4292  c3a0 7b01          	ld	a,(OFST+1,sp)
4293  c3a2 a149          	cp	a,#73
4294  c3a4 2618          	jrne	L3432
4295                     ; 1260     if (invert_input == 0xff) value = (uint8_t)(~value);
4297  c3a6 c60165        	ld	a,_invert_input
4298  c3a9 4c            	inc	a
4299  c3aa 2602          	jrne	L5432
4302  c3ac 0305          	cpl	(OFST+5,sp)
4303  c3ae               L5432:
4304                     ; 1261     if (value & mask) strcat(topic_base, "/in_on");
4306  c3ae 7b05          	ld	a,(OFST+5,sp)
4307  c3b0 1506          	bcp	a,(OFST+6,sp)
4308  c3b2 2705          	jreq	L7432
4311  c3b4 ae9e9b        	ldw	x,#L1532
4314  c3b7 2013          	jra	L7532
4315  c3b9               L7432:
4316                     ; 1262     else strcat(topic_base, "/in_off");
4318  c3b9 ae9e93        	ldw	x,#L5532
4320  c3bc 200e          	jra	L7532
4321  c3be               L3432:
4322                     ; 1266     if (value & mask) strcat(topic_base, "/out_on");
4324  c3be 7b05          	ld	a,(OFST+5,sp)
4325  c3c0 1506          	bcp	a,(OFST+6,sp)
4326  c3c2 2705          	jreq	L1632
4329  c3c4 ae9e8b        	ldw	x,#L3632
4332  c3c7 2003          	jra	L7532
4333  c3c9               L1632:
4334                     ; 1267     else strcat(topic_base, "/out_off");
4336  c3c9 ae9e82        	ldw	x,#L7632
4338  c3cc               L7532:
4339  c3cc 89            	pushw	x
4340  c3cd ae0074        	ldw	x,#_topic_base
4341  c3d0 cdf6c9        	call	_strcat
4342  c3d3 85            	popw	x
4343                     ; 1271   mqtt_publish(&mqttclient,
4343                     ; 1272                topic_base,
4343                     ; 1273 	       application_message,
4343                     ; 1274 	       2,
4343                     ; 1275 	       MQTT_PUBLISH_QOS_0);
4345  c3d4 4b00          	push	#0
4346  c3d6 ae0002        	ldw	x,#2
4347  c3d9 89            	pushw	x
4348  c3da ae00f3        	ldw	x,#_application_message
4349  c3dd 89            	pushw	x
4350  c3de ae0074        	ldw	x,#_topic_base
4351  c3e1 89            	pushw	x
4352  c3e2 ae00c5        	ldw	x,#_mqttclient
4353  c3e5 cdd167        	call	_mqtt_publish
4355  c3e8 5b07          	addw	sp,#7
4356                     ; 1277   if (direction == 'I') {
4358  c3ea 7b01          	ld	a,(OFST+1,sp)
4359  c3ec a149          	cp	a,#73
4360  c3ee 2619          	jrne	L1732
4361                     ; 1279     if (IO_16to9 & mask) IO_16to9_sent |= mask;
4363  c3f0 c6016e        	ld	a,_IO_16to9
4364  c3f3 1506          	bcp	a,(OFST+6,sp)
4365  c3f5 2707          	jreq	L3732
4368  c3f7 c60168        	ld	a,_IO_16to9_sent
4369  c3fa 1a06          	or	a,(OFST+6,sp)
4371  c3fc 2006          	jp	LC005
4372  c3fe               L3732:
4373                     ; 1280     else IO_16to9_sent &= (uint8_t)~mask;
4375  c3fe 7b06          	ld	a,(OFST+6,sp)
4376  c400 43            	cpl	a
4377  c401 c40168        	and	a,_IO_16to9_sent
4378  c404               LC005:
4379  c404 c70168        	ld	_IO_16to9_sent,a
4380  c407 2017          	jra	L7732
4381  c409               L1732:
4382                     ; 1284     if (IO_8to1 & mask) IO_8to1_sent |= mask;
4384  c409 c6016d        	ld	a,_IO_8to1
4385  c40c 1506          	bcp	a,(OFST+6,sp)
4386  c40e 2707          	jreq	L1042
4389  c410 c60167        	ld	a,_IO_8to1_sent
4390  c413 1a06          	or	a,(OFST+6,sp)
4392  c415 2006          	jp	LC004
4393  c417               L1042:
4394                     ; 1285     else IO_8to1_sent &= (uint8_t)~mask;
4396  c417 7b06          	ld	a,(OFST+6,sp)
4397  c419 43            	cpl	a
4398  c41a c40167        	and	a,_IO_8to1_sent
4399  c41d               LC004:
4400  c41d c70167        	ld	_IO_8to1_sent,a
4401  c420               L7732:
4402                     ; 1287 }
4405  c420 85            	popw	x
4406  c421 81            	ret	
4455                     ; 1290 void publish_pinstate_all(void)
4455                     ; 1291 {
4456                     .text:	section	.text,new
4457  c422               _publish_pinstate_all:
4459  c422 89            	pushw	x
4460       00000002      OFST:	set	2
4463                     ; 1297   j = IO_16to9;
4465  c423 c6016e        	ld	a,_IO_16to9
4466  c426 6b02          	ld	(OFST+0,sp),a
4468                     ; 1298   k = IO_8to1;
4470  c428 c6016d        	ld	a,_IO_8to1
4471  c42b 6b01          	ld	(OFST-1,sp),a
4473                     ; 1301   if (invert_input == 0xff) j = (uint8_t)(~j);
4475  c42d c60165        	ld	a,_invert_input
4476  c430 4c            	inc	a
4477  c431 2602          	jrne	L3242
4480  c433 0302          	cpl	(OFST+0,sp)
4482  c435               L3242:
4483                     ; 1303   application_message[0] = j;
4485  c435 7b02          	ld	a,(OFST+0,sp)
4486  c437 c700f3        	ld	_application_message,a
4487                     ; 1304   application_message[1] = k;
4489  c43a 7b01          	ld	a,(OFST-1,sp)
4490  c43c c700f4        	ld	_application_message+1,a
4491                     ; 1305   application_message[2] = '\0';
4493  c43f 725f00f5      	clr	_application_message+2
4494                     ; 1307   topic_base[topic_base_len] = '\0';
4496  c443 5f            	clrw	x
4497  c444 c60073        	ld	a,_topic_base_len
4498  c447 97            	ld	xl,a
4499  c448 724f0074      	clr	(_topic_base,x)
4500                     ; 1308   strcat(topic_base, "/state");
4502  c44c ae9e7b        	ldw	x,#L5242
4503  c44f 89            	pushw	x
4504  c450 ae0074        	ldw	x,#_topic_base
4505  c453 cdf6c9        	call	_strcat
4507  c456 85            	popw	x
4508                     ; 1311   mqtt_publish(&mqttclient,
4508                     ; 1312                topic_base,
4508                     ; 1313 	       application_message,
4508                     ; 1314 	       2,
4508                     ; 1315 	       MQTT_PUBLISH_QOS_0);
4510  c457 4b00          	push	#0
4511  c459 ae0002        	ldw	x,#2
4512  c45c 89            	pushw	x
4513  c45d ae00f3        	ldw	x,#_application_message
4514  c460 89            	pushw	x
4515  c461 ae0074        	ldw	x,#_topic_base
4516  c464 89            	pushw	x
4517  c465 ae00c5        	ldw	x,#_mqttclient
4518  c468 cdd167        	call	_mqtt_publish
4520                     ; 1316 }
4523  c46b 5b09          	addw	sp,#9
4524  c46d 81            	ret	
4549                     ; 1321 void unlock_eeprom(void)
4549                     ; 1322 {
4550                     .text:	section	.text,new
4551  c46e               _unlock_eeprom:
4555  c46e 2008          	jra	L1442
4556  c470               L7342:
4557                     ; 1334     FLASH_DUKR = 0xAE; // MASS key 1
4559  c470 35ae5064      	mov	_FLASH_DUKR,#174
4560                     ; 1335     FLASH_DUKR = 0x56; // MASS key 2
4562  c474 35565064      	mov	_FLASH_DUKR,#86
4563  c478               L1442:
4564                     ; 1333   while (!(FLASH_IAPSR & 0x08)) {  // Check DUL bit, 0=Protected
4566  c478 7207505ff3    	btjf	_FLASH_IAPSR,#3,L7342
4567                     ; 1363 }
4570  c47d 81            	ret	
4655                     ; 1366 void check_eeprom_settings(void)
4655                     ; 1367 {
4656                     .text:	section	.text,new
4657  c47e               _check_eeprom_settings:
4659  c47e 88            	push	a
4660       00000001      OFST:	set	1
4663                     ; 1379   if ((magic4 == 0x55) && 
4663                     ; 1380       (magic3 == 0xee) && 
4663                     ; 1381       (magic2 == 0x0f) && 
4663                     ; 1382       (magic1 == 0xf0)) {
4665  c47f c6402e        	ld	a,_magic4
4666  c482 a155          	cp	a,#85
4667  c484 2703ccc62d    	jrne	L1652
4669  c489 c6402d        	ld	a,_magic3
4670  c48c a1ee          	cp	a,#238
4671  c48e 26f6          	jrne	L1652
4673  c490 c6402c        	ld	a,_magic2
4674  c493 a10f          	cp	a,#15
4675  c495 26ef          	jrne	L1652
4677  c497 c6402b        	ld	a,_magic1
4678  c49a a1f0          	cp	a,#240
4679  c49c 26e8          	jrne	L1652
4680                     ; 1387     uip_ipaddr(IpAddr, stored_hostaddr[3], stored_hostaddr[2], stored_hostaddr[1], stored_hostaddr[0]);
4682  c49e c6402a        	ld	a,_stored_hostaddr+3
4683  c4a1 97            	ld	xl,a
4684  c4a2 c64029        	ld	a,_stored_hostaddr+2
4685  c4a5 02            	rlwa	x,a
4686  c4a6 cf00ff        	ldw	_IpAddr,x
4689  c4a9 c64028        	ld	a,_stored_hostaddr+1
4690  c4ac 97            	ld	xl,a
4691  c4ad c64027        	ld	a,_stored_hostaddr
4692  c4b0 02            	rlwa	x,a
4693  c4b1 cf0101        	ldw	_IpAddr+2,x
4694                     ; 1388     uip_sethostaddr(IpAddr);
4696  c4b4 ce00ff        	ldw	x,_IpAddr
4697  c4b7 cf02c4        	ldw	_uip_hostaddr,x
4700  c4ba ce0101        	ldw	x,_IpAddr+2
4701  c4bd cf02c6        	ldw	_uip_hostaddr+2,x
4702                     ; 1391     uip_ipaddr(IpAddr,
4704  c4c0 c64026        	ld	a,_stored_draddr+3
4705  c4c3 97            	ld	xl,a
4706  c4c4 c64025        	ld	a,_stored_draddr+2
4707  c4c7 02            	rlwa	x,a
4708  c4c8 cf00ff        	ldw	_IpAddr,x
4711  c4cb c64024        	ld	a,_stored_draddr+1
4712  c4ce 97            	ld	xl,a
4713  c4cf c64023        	ld	a,_stored_draddr
4714  c4d2 02            	rlwa	x,a
4715  c4d3 cf0101        	ldw	_IpAddr+2,x
4716                     ; 1396     uip_setdraddr(IpAddr);
4718  c4d6 ce00ff        	ldw	x,_IpAddr
4719  c4d9 cf02bc        	ldw	_uip_draddr,x
4722  c4dc ce0101        	ldw	x,_IpAddr+2
4723  c4df cf02be        	ldw	_uip_draddr+2,x
4724                     ; 1399     uip_ipaddr(IpAddr,
4726  c4e2 c64022        	ld	a,_stored_netmask+3
4727  c4e5 97            	ld	xl,a
4728  c4e6 c64021        	ld	a,_stored_netmask+2
4729  c4e9 02            	rlwa	x,a
4730  c4ea cf00ff        	ldw	_IpAddr,x
4733  c4ed c64020        	ld	a,_stored_netmask+1
4734  c4f0 97            	ld	xl,a
4735  c4f1 c6401f        	ld	a,_stored_netmask
4736  c4f4 02            	rlwa	x,a
4737  c4f5 cf0101        	ldw	_IpAddr+2,x
4738                     ; 1404     uip_setnetmask(IpAddr);
4740  c4f8 ce00ff        	ldw	x,_IpAddr
4741  c4fb cf02c0        	ldw	_uip_netmask,x
4744  c4fe ce0101        	ldw	x,_IpAddr+2
4745  c501 cf02c2        	ldw	_uip_netmask+2,x
4746                     ; 1408     uip_ipaddr(IpAddr,
4748  c504 c64034        	ld	a,_stored_mqttserveraddr+3
4749  c507 97            	ld	xl,a
4750  c508 c64033        	ld	a,_stored_mqttserveraddr+2
4751  c50b 02            	rlwa	x,a
4752  c50c cf00ff        	ldw	_IpAddr,x
4755  c50f c64032        	ld	a,_stored_mqttserveraddr+1
4756  c512 97            	ld	xl,a
4757  c513 c64031        	ld	a,_stored_mqttserveraddr
4758  c516 02            	rlwa	x,a
4759  c517 cf0101        	ldw	_IpAddr+2,x
4760                     ; 1413     uip_setmqttserveraddr(IpAddr);
4762  c51a ce00ff        	ldw	x,_IpAddr
4763  c51d cf02b8        	ldw	_uip_mqttserveraddr,x
4766  c520 ce0101        	ldw	x,_IpAddr+2
4767  c523 cf02ba        	ldw	_uip_mqttserveraddr+2,x
4768                     ; 1415     Port_Mqttd = stored_mqttport;
4770  c526 ce402f        	ldw	x,_stored_mqttport
4771  c529 cf00f6        	ldw	_Port_Mqttd,x
4772                     ; 1419     Port_Httpd = stored_port;
4774  c52c ce401d        	ldw	x,_stored_port
4775  c52f cf0103        	ldw	_Port_Httpd,x
4776                     ; 1424     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
4778  c532 55401c000a    	mov	_uip_ethaddr,_stored_uip_ethaddr_oct+5
4779                     ; 1425     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
4781  c537 55401b000b    	mov	_uip_ethaddr+1,_stored_uip_ethaddr_oct+4
4782                     ; 1426     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
4784  c53c 55401a000c    	mov	_uip_ethaddr+2,_stored_uip_ethaddr_oct+3
4785                     ; 1427     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
4787  c541 554019000d    	mov	_uip_ethaddr+3,_stored_uip_ethaddr_oct+2
4788                     ; 1428     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
4790  c546 554018000e    	mov	_uip_ethaddr+4,_stored_uip_ethaddr_oct+1
4791                     ; 1429     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
4793  c54b 554017000f    	mov	_uip_ethaddr+5,_stored_uip_ethaddr_oct
4794                     ; 1433     if (stored_config_settings[0] != '0' && stored_config_settings[0] != '1') {
4796  c550 c6404c        	ld	a,_stored_config_settings
4797  c553 a130          	cp	a,#48
4798  c555 270c          	jreq	L3252
4800  c557 a131          	cp	a,#49
4801  c559 2708          	jreq	L3252
4802                     ; 1434       stored_config_settings[0] = '0';
4804  c55b a630          	ld	a,#48
4805  c55d ae404c        	ldw	x,#_stored_config_settings
4806  c560 cdf70d        	call	c_eewrc
4808  c563               L3252:
4809                     ; 1436     if (stored_config_settings[1] != '0' && stored_config_settings[1] != '1') {
4811  c563 c6404d        	ld	a,_stored_config_settings+1
4812  c566 a130          	cp	a,#48
4813  c568 270c          	jreq	L5252
4815  c56a a131          	cp	a,#49
4816  c56c 2708          	jreq	L5252
4817                     ; 1437       stored_config_settings[1] = '0';
4819  c56e a630          	ld	a,#48
4820  c570 ae404d        	ldw	x,#_stored_config_settings+1
4821  c573 cdf70d        	call	c_eewrc
4823  c576               L5252:
4824                     ; 1439     if (stored_config_settings[2] != '0' && stored_config_settings[2] != '1' && stored_config_settings[2] != '2') {
4826  c576 c6404e        	ld	a,_stored_config_settings+2
4827  c579 a130          	cp	a,#48
4828  c57b 2710          	jreq	L7252
4830  c57d a131          	cp	a,#49
4831  c57f 270c          	jreq	L7252
4833  c581 a132          	cp	a,#50
4834  c583 2708          	jreq	L7252
4835                     ; 1440       stored_config_settings[2] = '2';
4837  c585 a632          	ld	a,#50
4838  c587 ae404e        	ldw	x,#_stored_config_settings+2
4839  c58a cdf70d        	call	c_eewrc
4841  c58d               L7252:
4842                     ; 1442     if (stored_config_settings[3] != '0' && stored_config_settings[3] != '1') {
4844  c58d c6404f        	ld	a,_stored_config_settings+3
4845  c590 a130          	cp	a,#48
4846  c592 270c          	jreq	L1352
4848  c594 a131          	cp	a,#49
4849  c596 2708          	jreq	L1352
4850                     ; 1443       stored_config_settings[3] = '0';
4852  c598 a630          	ld	a,#48
4853  c59a ae404f        	ldw	x,#_stored_config_settings+3
4854  c59d cdf70d        	call	c_eewrc
4856  c5a0               L1352:
4857                     ; 1445     if (stored_config_settings[4] != '0') {
4859  c5a0 c64050        	ld	a,_stored_config_settings+4
4860  c5a3 a130          	cp	a,#48
4861  c5a5 2708          	jreq	L3352
4862                     ; 1446       stored_config_settings[4] = '0';
4864  c5a7 a630          	ld	a,#48
4865  c5a9 ae4050        	ldw	x,#_stored_config_settings+4
4866  c5ac cdf70d        	call	c_eewrc
4868  c5af               L3352:
4869                     ; 1448     if (stored_config_settings[5] != '0') {
4871  c5af c64051        	ld	a,_stored_config_settings+5
4872  c5b2 a130          	cp	a,#48
4873  c5b4 2708          	jreq	L5352
4874                     ; 1449       stored_config_settings[5] = '0';
4876  c5b6 a630          	ld	a,#48
4877  c5b8 ae4051        	ldw	x,#_stored_config_settings+5
4878  c5bb cdf70d        	call	c_eewrc
4880  c5be               L5352:
4881                     ; 1453     if (stored_config_settings[0] == '0') invert_output = 0x00;
4883  c5be c6404c        	ld	a,_stored_config_settings
4884  c5c1 a130          	cp	a,#48
4885  c5c3 2606          	jrne	L7352
4888  c5c5 725f0166      	clr	_invert_output
4890  c5c9 2004          	jra	L1452
4891  c5cb               L7352:
4892                     ; 1454     else invert_output = 0xff;
4894  c5cb 35ff0166      	mov	_invert_output,#255
4895  c5cf               L1452:
4896                     ; 1457     if (stored_config_settings[1] == '0') invert_input = 0x00;
4898  c5cf c6404d        	ld	a,_stored_config_settings+1
4899  c5d2 a130          	cp	a,#48
4900  c5d4 2606          	jrne	L3452
4903  c5d6 725f0165      	clr	_invert_input
4905  c5da 2004          	jra	L5452
4906  c5dc               L3452:
4907                     ; 1458     else invert_input = 0xff;
4909  c5dc 35ff0165      	mov	_invert_input,#255
4910  c5e0               L5452:
4911                     ; 1463     if (stored_config_settings[2] == '0') {
4913  c5e0 c6404e        	ld	a,_stored_config_settings+2
4914  c5e3 a130          	cp	a,#48
4915  c5e5 260a          	jrne	L7452
4916                     ; 1465       IO_16to9 = 0x00;
4918  c5e7 725f016e      	clr	_IO_16to9
4919                     ; 1466       IO_8to1 = 0x00;
4921  c5eb 725f016d      	clr	_IO_8to1
4923  c5ef 2036          	jra	L1552
4924  c5f1               L7452:
4925                     ; 1468     else if (stored_config_settings[2] == '1') {
4927  c5f1 a131          	cp	a,#49
4928  c5f3 260a          	jrne	L3552
4929                     ; 1470       IO_16to9 = 0xff;
4931  c5f5 35ff016e      	mov	_IO_16to9,#255
4932                     ; 1471       IO_8to1 = 0xff;
4934  c5f9 35ff016d      	mov	_IO_8to1,#255
4936  c5fd 2028          	jra	L1552
4937  c5ff               L3552:
4938                     ; 1475       IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9;
4940  c5ff 55404b0168    	mov	_IO_16to9_sent,_stored_IO_16to9
4941  c604 550168016a    	mov	_IO_16to9_new2,_IO_16to9_sent
4942  c609 55016a016c    	mov	_IO_16to9_new1,_IO_16to9_new2
4943  c60e 55016c016e    	mov	_IO_16to9,_IO_16to9_new1
4944                     ; 1476       IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1;
4946  c613 5540140167    	mov	_IO_8to1_sent,_stored_IO_8to1
4947  c618 5501670169    	mov	_IO_8to1_new2,_IO_8to1_sent
4948  c61d 550169016b    	mov	_IO_8to1_new1,_IO_8to1_new2
4949  c622 55016b016d    	mov	_IO_8to1,_IO_8to1_new1
4950  c627               L1552:
4951                     ; 1480     write_output_registers();
4953  c627 cdcea3        	call	_write_output_registers
4956  c62a ccc88c        	jra	L7552
4957  c62d               L1652:
4958                     ; 1489     uip_ipaddr(IpAddr, 192,168,1,4);
4960  c62d aec0a8        	ldw	x,#49320
4961  c630 cf00ff        	ldw	_IpAddr,x
4964  c633 ae0104        	ldw	x,#260
4965  c636 cf0101        	ldw	_IpAddr+2,x
4966                     ; 1490     uip_sethostaddr(IpAddr);
4968  c639 ce00ff        	ldw	x,_IpAddr
4969  c63c cf02c4        	ldw	_uip_hostaddr,x
4972  c63f ce0101        	ldw	x,_IpAddr+2
4973  c642 cf02c6        	ldw	_uip_hostaddr+2,x
4974                     ; 1492     stored_hostaddr[3] = 192;	// MSB
4976  c645 a6c0          	ld	a,#192
4977  c647 ae402a        	ldw	x,#_stored_hostaddr+3
4978  c64a cdf70d        	call	c_eewrc
4980                     ; 1493     stored_hostaddr[2] = 168;	//
4982  c64d a6a8          	ld	a,#168
4983  c64f ae4029        	ldw	x,#_stored_hostaddr+2
4984  c652 cdf70d        	call	c_eewrc
4986                     ; 1494     stored_hostaddr[1] = 1;	//
4988  c655 a601          	ld	a,#1
4989  c657 ae4028        	ldw	x,#_stored_hostaddr+1
4990  c65a cdf70d        	call	c_eewrc
4992                     ; 1495     stored_hostaddr[0] = 4;	// LSB
4994  c65d a604          	ld	a,#4
4995  c65f ae4027        	ldw	x,#_stored_hostaddr
4996  c662 cdf70d        	call	c_eewrc
4998                     ; 1498     uip_ipaddr(IpAddr, 192,168,1,1);
5000  c665 aec0a8        	ldw	x,#49320
5001  c668 cf00ff        	ldw	_IpAddr,x
5004  c66b ae0101        	ldw	x,#257
5005  c66e cf0101        	ldw	_IpAddr+2,x
5006                     ; 1499     uip_setdraddr(IpAddr);
5008  c671 ce00ff        	ldw	x,_IpAddr
5009  c674 cf02bc        	ldw	_uip_draddr,x
5012  c677 ce0101        	ldw	x,_IpAddr+2
5013  c67a cf02be        	ldw	_uip_draddr+2,x
5014                     ; 1501     stored_draddr[3] = 192;	// MSB
5016  c67d a6c0          	ld	a,#192
5017  c67f ae4026        	ldw	x,#_stored_draddr+3
5018  c682 cdf70d        	call	c_eewrc
5020                     ; 1502     stored_draddr[2] = 168;	//
5022  c685 a6a8          	ld	a,#168
5023  c687 ae4025        	ldw	x,#_stored_draddr+2
5024  c68a cdf70d        	call	c_eewrc
5026                     ; 1503     stored_draddr[1] = 1;		//
5028  c68d a601          	ld	a,#1
5029  c68f ae4024        	ldw	x,#_stored_draddr+1
5030  c692 cdf70d        	call	c_eewrc
5032                     ; 1504     stored_draddr[0] = 1;		// LSB
5034  c695 a601          	ld	a,#1
5035  c697 ae4023        	ldw	x,#_stored_draddr
5036  c69a cdf70d        	call	c_eewrc
5038                     ; 1507     uip_ipaddr(IpAddr, 255,255,255,0);
5040  c69d aeffff        	ldw	x,#65535
5041  c6a0 cf00ff        	ldw	_IpAddr,x
5044  c6a3 aeff00        	ldw	x,#65280
5045  c6a6 cf0101        	ldw	_IpAddr+2,x
5046                     ; 1508     uip_setnetmask(IpAddr);
5048  c6a9 ce00ff        	ldw	x,_IpAddr
5049  c6ac cf02c0        	ldw	_uip_netmask,x
5052  c6af ce0101        	ldw	x,_IpAddr+2
5053  c6b2 cf02c2        	ldw	_uip_netmask+2,x
5054                     ; 1510     stored_netmask[3] = 255;	// MSB
5056  c6b5 a6ff          	ld	a,#255
5057  c6b7 ae4022        	ldw	x,#_stored_netmask+3
5058  c6ba cdf70d        	call	c_eewrc
5060                     ; 1511     stored_netmask[2] = 255;	//
5062  c6bd a6ff          	ld	a,#255
5063  c6bf ae4021        	ldw	x,#_stored_netmask+2
5064  c6c2 cdf70d        	call	c_eewrc
5066                     ; 1512     stored_netmask[1] = 255;	//
5068  c6c5 a6ff          	ld	a,#255
5069  c6c7 ae4020        	ldw	x,#_stored_netmask+1
5070  c6ca cdf70d        	call	c_eewrc
5072                     ; 1513     stored_netmask[0] = 0;	// LSB
5074  c6cd 4f            	clr	a
5075  c6ce ae401f        	ldw	x,#_stored_netmask
5076  c6d1 cdf70d        	call	c_eewrc
5078                     ; 1517     uip_ipaddr(IpAddr, 0,0,0,0);
5080  c6d4 5f            	clrw	x
5081  c6d5 cf00ff        	ldw	_IpAddr,x
5084  c6d8 cf0101        	ldw	_IpAddr+2,x
5085                     ; 1518     uip_setmqttserveraddr(IpAddr);
5087  c6db cf02b8        	ldw	_uip_mqttserveraddr,x
5090  c6de cf02ba        	ldw	_uip_mqttserveraddr+2,x
5091                     ; 1521     stored_mqttserveraddr[3] = 0;	// MSB
5093  c6e1 4f            	clr	a
5094  c6e2 ae4034        	ldw	x,#_stored_mqttserveraddr+3
5095  c6e5 cdf70d        	call	c_eewrc
5097                     ; 1522     stored_mqttserveraddr[2] = 0;	//
5099  c6e8 4f            	clr	a
5100  c6e9 ae4033        	ldw	x,#_stored_mqttserveraddr+2
5101  c6ec cdf70d        	call	c_eewrc
5103                     ; 1523     stored_mqttserveraddr[1] = 0;	//
5105  c6ef 4f            	clr	a
5106  c6f0 ae4032        	ldw	x,#_stored_mqttserveraddr+1
5107  c6f3 cdf70d        	call	c_eewrc
5109                     ; 1524     stored_mqttserveraddr[0] = 0;	// LSB
5111  c6f6 4f            	clr	a
5112  c6f7 ae4031        	ldw	x,#_stored_mqttserveraddr
5113  c6fa cdf70d        	call	c_eewrc
5115                     ; 1527     stored_mqttport = 1883;		// Port
5117  c6fd ae075b        	ldw	x,#1883
5118  c700 89            	pushw	x
5119  c701 ae402f        	ldw	x,#_stored_mqttport
5120  c704 cdf6f7        	call	c_eewrw
5122  c707 85            	popw	x
5123                     ; 1529     Port_Mqttd = 1883;
5125  c708 ae075b        	ldw	x,#1883
5126  c70b cf00f6        	ldw	_Port_Mqttd,x
5127                     ; 1532     for(i=0; i<11; i++) { stored_mqtt_username[i] = '\0'; }
5129  c70e 4f            	clr	a
5130  c70f 6b01          	ld	(OFST+0,sp),a
5132  c711               L1262:
5135  c711 5f            	clrw	x
5136  c712 97            	ld	xl,a
5137  c713 4f            	clr	a
5138  c714 1c4035        	addw	x,#_stored_mqtt_username
5139  c717 cdf70d        	call	c_eewrc
5143  c71a 0c01          	inc	(OFST+0,sp)
5147  c71c 7b01          	ld	a,(OFST+0,sp)
5148  c71e a10b          	cp	a,#11
5149  c720 25ef          	jrult	L1262
5150                     ; 1533     for(i=0; i<11; i++) { stored_mqtt_password[i] = '\0'; }
5152  c722 4f            	clr	a
5153  c723 6b01          	ld	(OFST+0,sp),a
5155  c725               L7262:
5158  c725 5f            	clrw	x
5159  c726 97            	ld	xl,a
5160  c727 4f            	clr	a
5161  c728 1c4040        	addw	x,#_stored_mqtt_password
5162  c72b cdf70d        	call	c_eewrc
5166  c72e 0c01          	inc	(OFST+0,sp)
5170  c730 7b01          	ld	a,(OFST+0,sp)
5171  c732 a10b          	cp	a,#11
5172  c734 25ef          	jrult	L7262
5173                     ; 1538     stored_port = 8080;
5175  c736 ae1f90        	ldw	x,#8080
5176  c739 89            	pushw	x
5177  c73a ae401d        	ldw	x,#_stored_port
5178  c73d cdf6f7        	call	c_eewrw
5180  c740 85            	popw	x
5181                     ; 1540     Port_Httpd = 8080;
5183  c741 ae1f90        	ldw	x,#8080
5184  c744 cf0103        	ldw	_Port_Httpd,x
5185                     ; 1556     stored_uip_ethaddr_oct[5] = 0xc2;	//MAC MSB
5187  c747 a6c2          	ld	a,#194
5188  c749 ae401c        	ldw	x,#_stored_uip_ethaddr_oct+5
5189  c74c cdf70d        	call	c_eewrc
5191                     ; 1557     stored_uip_ethaddr_oct[4] = 0x4d;
5193  c74f a64d          	ld	a,#77
5194  c751 ae401b        	ldw	x,#_stored_uip_ethaddr_oct+4
5195  c754 cdf70d        	call	c_eewrc
5197                     ; 1558     stored_uip_ethaddr_oct[3] = 0x69;
5199  c757 a669          	ld	a,#105
5200  c759 ae401a        	ldw	x,#_stored_uip_ethaddr_oct+3
5201  c75c cdf70d        	call	c_eewrc
5203                     ; 1559     stored_uip_ethaddr_oct[2] = 0x6b;
5205  c75f a66b          	ld	a,#107
5206  c761 ae4019        	ldw	x,#_stored_uip_ethaddr_oct+2
5207  c764 cdf70d        	call	c_eewrc
5209                     ; 1560     stored_uip_ethaddr_oct[1] = 0x65;
5211  c767 a665          	ld	a,#101
5212  c769 ae4018        	ldw	x,#_stored_uip_ethaddr_oct+1
5213  c76c cdf70d        	call	c_eewrc
5215                     ; 1561     stored_uip_ethaddr_oct[0] = 0x00;	//MAC LSB
5217  c76f 4f            	clr	a
5218  c770 ae4017        	ldw	x,#_stored_uip_ethaddr_oct
5219  c773 cdf70d        	call	c_eewrc
5221                     ; 1563     uip_ethaddr.addr[0] = stored_uip_ethaddr_oct[5]; // MSB
5223  c776 35c2000a      	mov	_uip_ethaddr,#194
5224                     ; 1564     uip_ethaddr.addr[1] = stored_uip_ethaddr_oct[4];
5226  c77a 354d000b      	mov	_uip_ethaddr+1,#77
5227                     ; 1565     uip_ethaddr.addr[2] = stored_uip_ethaddr_oct[3];
5229  c77e 3569000c      	mov	_uip_ethaddr+2,#105
5230                     ; 1566     uip_ethaddr.addr[3] = stored_uip_ethaddr_oct[2];
5232  c782 356b000d      	mov	_uip_ethaddr+3,#107
5233                     ; 1567     uip_ethaddr.addr[4] = stored_uip_ethaddr_oct[1];
5235  c786 3565000e      	mov	_uip_ethaddr+4,#101
5236                     ; 1568     uip_ethaddr.addr[5] = stored_uip_ethaddr_oct[0]; // LSB
5238  c78a 725f000f      	clr	_uip_ethaddr+5
5239                     ; 1571     stored_devicename[0] =  'N';
5241  c78e a64e          	ld	a,#78
5242  c790 ae4000        	ldw	x,#_stored_devicename
5243  c793 cdf70d        	call	c_eewrc
5245                     ; 1572     stored_devicename[1] =  'e';
5247  c796 a665          	ld	a,#101
5248  c798 ae4001        	ldw	x,#_stored_devicename+1
5249  c79b cdf70d        	call	c_eewrc
5251                     ; 1573     stored_devicename[2] =  'w';
5253  c79e a677          	ld	a,#119
5254  c7a0 ae4002        	ldw	x,#_stored_devicename+2
5255  c7a3 cdf70d        	call	c_eewrc
5257                     ; 1574     stored_devicename[3] =  'D';
5259  c7a6 a644          	ld	a,#68
5260  c7a8 ae4003        	ldw	x,#_stored_devicename+3
5261  c7ab cdf70d        	call	c_eewrc
5263                     ; 1575     stored_devicename[4] =  'e';
5265  c7ae a665          	ld	a,#101
5266  c7b0 ae4004        	ldw	x,#_stored_devicename+4
5267  c7b3 cdf70d        	call	c_eewrc
5269                     ; 1576     stored_devicename[5] =  'v';
5271  c7b6 a676          	ld	a,#118
5272  c7b8 ae4005        	ldw	x,#_stored_devicename+5
5273  c7bb cdf70d        	call	c_eewrc
5275                     ; 1577     stored_devicename[6] =  'i';
5277  c7be a669          	ld	a,#105
5278  c7c0 ae4006        	ldw	x,#_stored_devicename+6
5279  c7c3 cdf70d        	call	c_eewrc
5281                     ; 1578     stored_devicename[7] =  'c';
5283  c7c6 a663          	ld	a,#99
5284  c7c8 ae4007        	ldw	x,#_stored_devicename+7
5285  c7cb cdf70d        	call	c_eewrc
5287                     ; 1579     stored_devicename[8] =  'e';
5289  c7ce a665          	ld	a,#101
5290  c7d0 ae4008        	ldw	x,#_stored_devicename+8
5291  c7d3 cdf70d        	call	c_eewrc
5293                     ; 1580     stored_devicename[9] =  '0';
5295  c7d6 a630          	ld	a,#48
5296  c7d8 ae4009        	ldw	x,#_stored_devicename+9
5297  c7db cdf70d        	call	c_eewrc
5299                     ; 1581     stored_devicename[10] = '0';
5301  c7de a630          	ld	a,#48
5302  c7e0 ae400a        	ldw	x,#_stored_devicename+10
5303  c7e3 cdf70d        	call	c_eewrc
5305                     ; 1582     stored_devicename[11] = '0';
5307  c7e6 a630          	ld	a,#48
5308  c7e8 ae400b        	ldw	x,#_stored_devicename+11
5309  c7eb cdf70d        	call	c_eewrc
5311                     ; 1583     for (i=12; i<20; i++) stored_devicename[i] = '\0';
5313  c7ee a60c          	ld	a,#12
5314  c7f0 6b01          	ld	(OFST+0,sp),a
5316  c7f2               L5362:
5319  c7f2 5f            	clrw	x
5320  c7f3 97            	ld	xl,a
5321  c7f4 4f            	clr	a
5322  c7f5 1c4000        	addw	x,#_stored_devicename
5323  c7f8 cdf70d        	call	c_eewrc
5327  c7fb 0c01          	inc	(OFST+0,sp)
5331  c7fd 7b01          	ld	a,(OFST+0,sp)
5332  c7ff a114          	cp	a,#20
5333  c801 25ef          	jrult	L5362
5334                     ; 1588     stored_config_settings[0] = '0'; // Set to Invert Output OFF
5336  c803 a630          	ld	a,#48
5337  c805 ae404c        	ldw	x,#_stored_config_settings
5338  c808 cdf70d        	call	c_eewrc
5340                     ; 1589     stored_config_settings[1] = '0'; // Set to Invert Input Off
5342  c80b a630          	ld	a,#48
5343  c80d ae404d        	ldw	x,#_stored_config_settings+1
5344  c810 cdf70d        	call	c_eewrc
5346                     ; 1590     stored_config_settings[2] = '2'; // Set to Retain pin states
5348  c813 a632          	ld	a,#50
5349  c815 ae404e        	ldw	x,#_stored_config_settings+2
5350  c818 cdf70d        	call	c_eewrc
5352                     ; 1591     stored_config_settings[3] = '0'; // Set to Half Duplex
5354  c81b a630          	ld	a,#48
5355  c81d ae404f        	ldw	x,#_stored_config_settings+3
5356  c820 cdf70d        	call	c_eewrc
5358                     ; 1592     stored_config_settings[4] = '0'; // undefined
5360  c823 a630          	ld	a,#48
5361  c825 ae4050        	ldw	x,#_stored_config_settings+4
5362  c828 cdf70d        	call	c_eewrc
5364                     ; 1593     stored_config_settings[5] = '0'; // undefined
5366  c82b a630          	ld	a,#48
5367  c82d ae4051        	ldw	x,#_stored_config_settings+5
5368  c830 cdf70d        	call	c_eewrc
5370                     ; 1594     invert_output = 0x00;			// Turn off output invert bit
5372  c833 725f0166      	clr	_invert_output
5373                     ; 1595     invert_input = 0x00;			// Turn off output invert bit
5375  c837 725f0165      	clr	_invert_input
5376                     ; 1596     IO_16to9 = IO_16to9_new1 = IO_16to9_new2 = IO_16to9_sent = stored_IO_16to9 = 0x00;
5378  c83b 4f            	clr	a
5379  c83c ae404b        	ldw	x,#_stored_IO_16to9
5380  c83f cdf70d        	call	c_eewrc
5382  c842 725f0168      	clr	_IO_16to9_sent
5383  c846 725f016a      	clr	_IO_16to9_new2
5384  c84a 725f016c      	clr	_IO_16to9_new1
5385  c84e 725f016e      	clr	_IO_16to9
5386                     ; 1597     IO_8to1  = IO_8to1_new1  = IO_8to1_new2  = IO_8to1_sent  = stored_IO_8to1  = 0x00;
5388  c852 4f            	clr	a
5389  c853 ae4014        	ldw	x,#_stored_IO_8to1
5390  c856 cdf70d        	call	c_eewrc
5392  c859 725f0167      	clr	_IO_8to1_sent
5393  c85d 725f0169      	clr	_IO_8to1_new2
5394  c861 725f016b      	clr	_IO_8to1_new1
5395  c865 725f016d      	clr	_IO_8to1
5396                     ; 1598     write_output_registers();          // Set Relay Control outputs
5398  c869 cdcea3        	call	_write_output_registers
5400                     ; 1601     magic4 = 0x55;		// MSB
5402  c86c a655          	ld	a,#85
5403  c86e ae402e        	ldw	x,#_magic4
5404  c871 cdf70d        	call	c_eewrc
5406                     ; 1602     magic3 = 0xee;		//
5408  c874 a6ee          	ld	a,#238
5409  c876 ae402d        	ldw	x,#_magic3
5410  c879 cdf70d        	call	c_eewrc
5412                     ; 1603     magic2 = 0x0f;		//
5414  c87c a60f          	ld	a,#15
5415  c87e ae402c        	ldw	x,#_magic2
5416  c881 cdf70d        	call	c_eewrc
5418                     ; 1604     magic1 = 0xf0;		// LSB
5420  c884 a6f0          	ld	a,#240
5421  c886 ae402b        	ldw	x,#_magic1
5422  c889 cdf70d        	call	c_eewrc
5424  c88c               L7552:
5425                     ; 1609   for (i=0; i<4; i++) {
5427  c88c 4f            	clr	a
5428  c88d 6b01          	ld	(OFST+0,sp),a
5430  c88f               L3462:
5431                     ; 1610     Pending_hostaddr[i] = stored_hostaddr[i];
5433  c88f 5f            	clrw	x
5434  c890 97            	ld	xl,a
5435  c891 d64027        	ld	a,(_stored_hostaddr,x)
5436  c894 d70143        	ld	(_Pending_hostaddr,x),a
5437                     ; 1611     Pending_draddr[i] = stored_draddr[i];
5439  c897 5f            	clrw	x
5440  c898 7b01          	ld	a,(OFST+0,sp)
5441  c89a 97            	ld	xl,a
5442  c89b d64023        	ld	a,(_stored_draddr,x)
5443  c89e d7013f        	ld	(_Pending_draddr,x),a
5444                     ; 1612     Pending_netmask[i] = stored_netmask[i];
5446  c8a1 5f            	clrw	x
5447  c8a2 7b01          	ld	a,(OFST+0,sp)
5448  c8a4 97            	ld	xl,a
5449  c8a5 d6401f        	ld	a,(_stored_netmask,x)
5450  c8a8 d7013b        	ld	(_Pending_netmask,x),a
5451                     ; 1609   for (i=0; i<4; i++) {
5453  c8ab 0c01          	inc	(OFST+0,sp)
5457  c8ad 7b01          	ld	a,(OFST+0,sp)
5458  c8af a104          	cp	a,#4
5459  c8b1 25dc          	jrult	L3462
5460                     ; 1615   Pending_port = stored_port;
5462  c8b3 ce401d        	ldw	x,_stored_port
5463  c8b6 cf0139        	ldw	_Pending_port,x
5464                     ; 1617   for (i=0; i<20; i++) {
5466  c8b9 4f            	clr	a
5467  c8ba 6b01          	ld	(OFST+0,sp),a
5469  c8bc               L1562:
5470                     ; 1618     Pending_devicename[i] = stored_devicename[i];
5472  c8bc 5f            	clrw	x
5473  c8bd 97            	ld	xl,a
5474  c8be d64000        	ld	a,(_stored_devicename,x)
5475  c8c1 d70125        	ld	(_Pending_devicename,x),a
5476                     ; 1617   for (i=0; i<20; i++) {
5478  c8c4 0c01          	inc	(OFST+0,sp)
5482  c8c6 7b01          	ld	a,(OFST+0,sp)
5483  c8c8 a114          	cp	a,#20
5484  c8ca 25f0          	jrult	L1562
5485                     ; 1621   for (i=0; i<6; i++) {
5487  c8cc 4f            	clr	a
5488  c8cd 6b01          	ld	(OFST+0,sp),a
5490  c8cf               L7562:
5491                     ; 1622     Pending_config_settings[i] = stored_config_settings[i];
5493  c8cf 5f            	clrw	x
5494  c8d0 97            	ld	xl,a
5495  c8d1 d6404c        	ld	a,(_stored_config_settings,x)
5496  c8d4 d7011f        	ld	(_Pending_config_settings,x),a
5497                     ; 1623     Pending_uip_ethaddr_oct[i] = stored_uip_ethaddr_oct[i];
5499  c8d7 5f            	clrw	x
5500  c8d8 7b01          	ld	a,(OFST+0,sp)
5501  c8da 97            	ld	xl,a
5502  c8db d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5503  c8de d70119        	ld	(_Pending_uip_ethaddr_oct,x),a
5504                     ; 1621   for (i=0; i<6; i++) {
5506  c8e1 0c01          	inc	(OFST+0,sp)
5510  c8e3 7b01          	ld	a,(OFST+0,sp)
5511  c8e5 a106          	cp	a,#6
5512  c8e7 25e6          	jrult	L7562
5513                     ; 1627   for (i=0; i<4; i++) {
5515  c8e9 4f            	clr	a
5516  c8ea 6b01          	ld	(OFST+0,sp),a
5518  c8ec               L5662:
5519                     ; 1628     Pending_mqttserveraddr[i] = stored_mqttserveraddr[i];
5521  c8ec 5f            	clrw	x
5522  c8ed 97            	ld	xl,a
5523  c8ee d64031        	ld	a,(_stored_mqttserveraddr,x)
5524  c8f1 d7015f        	ld	(_Pending_mqttserveraddr,x),a
5525                     ; 1627   for (i=0; i<4; i++) {
5527  c8f4 0c01          	inc	(OFST+0,sp)
5531  c8f6 7b01          	ld	a,(OFST+0,sp)
5532  c8f8 a104          	cp	a,#4
5533  c8fa 25f0          	jrult	L5662
5534                     ; 1630   Pending_mqttport = stored_mqttport;
5536  c8fc ce402f        	ldw	x,_stored_mqttport
5537  c8ff cf015d        	ldw	_Pending_mqttport,x
5538                     ; 1631   for (i=0; i<11; i++) {
5540  c902 4f            	clr	a
5541  c903 6b01          	ld	(OFST+0,sp),a
5543  c905               L3762:
5544                     ; 1632     Pending_mqtt_username[i] = stored_mqtt_username[i];
5546  c905 5f            	clrw	x
5547  c906 97            	ld	xl,a
5548  c907 d64035        	ld	a,(_stored_mqtt_username,x)
5549  c90a d70152        	ld	(_Pending_mqtt_username,x),a
5550                     ; 1633     Pending_mqtt_password[i] = stored_mqtt_password[i];
5552  c90d 5f            	clrw	x
5553  c90e 7b01          	ld	a,(OFST+0,sp)
5554  c910 97            	ld	xl,a
5555  c911 d64040        	ld	a,(_stored_mqtt_password,x)
5556  c914 d70147        	ld	(_Pending_mqtt_password,x),a
5557                     ; 1631   for (i=0; i<11; i++) {
5559  c917 0c01          	inc	(OFST+0,sp)
5563  c919 7b01          	ld	a,(OFST+0,sp)
5564  c91b a10b          	cp	a,#11
5565  c91d 25e6          	jrult	L3762
5566                     ; 1636   strcat(topic_base, stored_devicename);
5568  c91f ae4000        	ldw	x,#_stored_devicename
5569  c922 89            	pushw	x
5570  c923 ae0074        	ldw	x,#_topic_base
5571  c926 cdf6c9        	call	_strcat
5573  c929 85            	popw	x
5574                     ; 1639   topic_base_len = (uint8_t)strlen(topic_base);
5576  c92a ae0074        	ldw	x,#_topic_base
5577  c92d cdf6dd        	call	_strlen
5579  c930 9f            	ld	a,xl
5580  c931 c70073        	ld	_topic_base_len,a
5581                     ; 1643   update_mac_string();
5583  c934 cdc939        	call	_update_mac_string
5585                     ; 1645 }
5588  c937 84            	pop	a
5589  c938 81            	ret	
5632                     ; 1648 void update_mac_string(void) {
5633                     .text:	section	.text,new
5634  c939               _update_mac_string:
5636  c939 89            	pushw	x
5637       00000002      OFST:	set	2
5640                     ; 1654   i = 5;
5642  c93a a605          	ld	a,#5
5643  c93c 6b01          	ld	(OFST-1,sp),a
5645                     ; 1655   j = 0;
5647  c93e 0f02          	clr	(OFST+0,sp)
5649  c940               L7172:
5650                     ; 1657     emb_itoa(stored_uip_ethaddr_oct[i], OctetArray, 16, 2);
5652  c940 4b02          	push	#2
5653  c942 4b10          	push	#16
5654  c944 ae005c        	ldw	x,#_OctetArray
5655  c947 89            	pushw	x
5656  c948 7b05          	ld	a,(OFST+3,sp)
5657  c94a 5f            	clrw	x
5658  c94b 97            	ld	xl,a
5659  c94c d64017        	ld	a,(_stored_uip_ethaddr_oct,x)
5660  c94f b703          	ld	c_lreg+3,a
5661  c951 3f02          	clr	c_lreg+2
5662  c953 3f01          	clr	c_lreg+1
5663  c955 3f00          	clr	c_lreg
5664  c957 be02          	ldw	x,c_lreg+2
5665  c959 89            	pushw	x
5666  c95a be00          	ldw	x,c_lreg
5667  c95c 89            	pushw	x
5668  c95d cda4e3        	call	_emb_itoa
5670  c960 5b08          	addw	sp,#8
5671                     ; 1658     mac_string[j++] = OctetArray[0];
5673  c962 7b02          	ld	a,(OFST+0,sp)
5674  c964 0c02          	inc	(OFST+0,sp)
5676  c966 5f            	clrw	x
5677  c967 97            	ld	xl,a
5678  c968 c6005c        	ld	a,_OctetArray
5679  c96b d7010c        	ld	(_mac_string,x),a
5680                     ; 1659     mac_string[j++] = OctetArray[1];
5682  c96e 7b02          	ld	a,(OFST+0,sp)
5683  c970 0c02          	inc	(OFST+0,sp)
5685  c972 5f            	clrw	x
5686  c973 97            	ld	xl,a
5687  c974 c6005d        	ld	a,_OctetArray+1
5688  c977 d7010c        	ld	(_mac_string,x),a
5689                     ; 1660     i--;
5691  c97a 0a01          	dec	(OFST-1,sp)
5693                     ; 1656   while (j<12) {
5695  c97c 7b02          	ld	a,(OFST+0,sp)
5696  c97e a10c          	cp	a,#12
5697  c980 25be          	jrult	L7172
5698                     ; 1662   mac_string[12] = '\0';
5700  c982 725f0118      	clr	_mac_string+12
5701                     ; 1663 }
5704  c986 85            	popw	x
5705  c987 81            	ret	
5783                     ; 1666 void check_runtime_changes(void)
5783                     ; 1667 {
5784                     .text:	section	.text,new
5785  c988               _check_runtime_changes:
5787  c988 88            	push	a
5788       00000001      OFST:	set	1
5791                     ; 1680   read_input_registers();
5793  c989 cdce0b        	call	_read_input_registers
5795                     ; 1682   if (parse_complete == 1 || mqtt_parse_complete == 1) {
5797  c98c c60106        	ld	a,_parse_complete
5798  c98f 4a            	dec	a
5799  c990 2706          	jreq	L3472
5801  c992 c60105        	ld	a,_mqtt_parse_complete
5802  c995 4a            	dec	a
5803  c996 2624          	jrne	L1472
5804  c998               L3472:
5805                     ; 1706     if (stored_IO_8to1 != IO_8to1) {
5807  c998 c64014        	ld	a,_stored_IO_8to1
5808  c99b c1016d        	cp	a,_IO_8to1
5809  c99e 2710          	jreq	L5472
5810                     ; 1710       if (stored_config_settings[2] == '2') {
5812  c9a0 c6404e        	ld	a,_stored_config_settings+2
5813  c9a3 a132          	cp	a,#50
5814  c9a5 2609          	jrne	L5472
5815                     ; 1711         stored_IO_8to1 = IO_8to1;
5817  c9a7 c6016d        	ld	a,_IO_8to1
5818  c9aa ae4014        	ldw	x,#_stored_IO_8to1
5819  c9ad cdf70d        	call	c_eewrc
5821  c9b0               L5472:
5822                     ; 1715     write_output_registers();
5824  c9b0 cdcea3        	call	_write_output_registers
5826                     ; 1721     if (mqtt_parse_complete == 1) {
5828  c9b3 c60105        	ld	a,_mqtt_parse_complete
5829  c9b6 4a            	dec	a
5830  c9b7 2603          	jrne	L1472
5831                     ; 1723       mqtt_parse_complete = 0;
5833  c9b9 c70105        	ld	_mqtt_parse_complete,a
5834  c9bc               L1472:
5835                     ; 1728   if (parse_complete == 1) {
5837  c9bc c60106        	ld	a,_parse_complete
5838  c9bf 4a            	dec	a
5839  c9c0 2703cccc4d    	jrne	L3572
5840                     ; 1769     if ((Pending_config_settings[0] != stored_config_settings[0])
5840                     ; 1770      || (stored_IO_8to1 != IO_8to1)) {
5842  c9c5 c6404c        	ld	a,_stored_config_settings
5843  c9c8 c1011f        	cp	a,_Pending_config_settings
5844  c9cb 2608          	jrne	L7572
5846  c9cd c64014        	ld	a,_stored_IO_8to1
5847  c9d0 c1016d        	cp	a,_IO_8to1
5848  c9d3 272d          	jreq	L5572
5849  c9d5               L7572:
5850                     ; 1773       stored_config_settings[0] = Pending_config_settings[0];
5852  c9d5 c6011f        	ld	a,_Pending_config_settings
5853  c9d8 ae404c        	ldw	x,#_stored_config_settings
5854  c9db cdf70d        	call	c_eewrc
5856                     ; 1776       if (stored_config_settings[0] == '0') invert_output = 0x00;
5858  c9de c6404c        	ld	a,_stored_config_settings
5859  c9e1 a130          	cp	a,#48
5860  c9e3 2606          	jrne	L1672
5863  c9e5 725f0166      	clr	_invert_output
5865  c9e9 2004          	jra	L3672
5866  c9eb               L1672:
5867                     ; 1777       else invert_output = 0xff;
5869  c9eb 35ff0166      	mov	_invert_output,#255
5870  c9ef               L3672:
5871                     ; 1781       if (stored_config_settings[2] == '2') {
5873  c9ef c6404e        	ld	a,_stored_config_settings+2
5874  c9f2 a132          	cp	a,#50
5875  c9f4 2609          	jrne	L5672
5876                     ; 1782         stored_IO_8to1 = IO_8to1;
5878  c9f6 c6016d        	ld	a,_IO_8to1
5879  c9f9 ae4014        	ldw	x,#_stored_IO_8to1
5880  c9fc cdf70d        	call	c_eewrc
5882  c9ff               L5672:
5883                     ; 1786       write_output_registers();
5885  c9ff cdcea3        	call	_write_output_registers
5887  ca02               L5572:
5888                     ; 1790     if (Pending_config_settings[1] != stored_config_settings[1]) {
5890  ca02 c6404d        	ld	a,_stored_config_settings+1
5891  ca05 c10120        	cp	a,_Pending_config_settings+1
5892  ca08 271e          	jreq	L7672
5893                     ; 1792       stored_config_settings[1] = Pending_config_settings[1];
5895  ca0a c60120        	ld	a,_Pending_config_settings+1
5896  ca0d ae404d        	ldw	x,#_stored_config_settings+1
5897  ca10 cdf70d        	call	c_eewrc
5899                     ; 1795       if (stored_config_settings[1] == '0') invert_input = 0x00;
5901  ca13 c6404d        	ld	a,_stored_config_settings+1
5902  ca16 a130          	cp	a,#48
5903  ca18 2606          	jrne	L1772
5906  ca1a 725f0165      	clr	_invert_input
5908  ca1e 2004          	jra	L3772
5909  ca20               L1772:
5910                     ; 1796       else invert_input = 0xff;
5912  ca20 35ff0165      	mov	_invert_input,#255
5913  ca24               L3772:
5914                     ; 1800       restart_request = 1;
5916  ca24 35010109      	mov	_restart_request,#1
5917  ca28               L7672:
5918                     ; 1834     if (Pending_config_settings[2] != stored_config_settings[2]) {
5920  ca28 c6404e        	ld	a,_stored_config_settings+2
5921  ca2b c10121        	cp	a,_Pending_config_settings+2
5922  ca2e 2709          	jreq	L5772
5923                     ; 1836       stored_config_settings[2] = Pending_config_settings[2];
5925  ca30 c60121        	ld	a,_Pending_config_settings+2
5926  ca33 ae404e        	ldw	x,#_stored_config_settings+2
5927  ca36 cdf70d        	call	c_eewrc
5929  ca39               L5772:
5930                     ; 1840     if (Pending_config_settings[3] != stored_config_settings[3]) {
5932  ca39 c6404f        	ld	a,_stored_config_settings+3
5933  ca3c c10122        	cp	a,_Pending_config_settings+3
5934  ca3f 270d          	jreq	L7772
5935                     ; 1843       stored_config_settings[3] = Pending_config_settings[3];
5937  ca41 c60122        	ld	a,_Pending_config_settings+3
5938  ca44 ae404f        	ldw	x,#_stored_config_settings+3
5939  ca47 cdf70d        	call	c_eewrc
5941                     ; 1845       user_reboot_request = 1;
5943  ca4a 3501010a      	mov	_user_reboot_request,#1
5944  ca4e               L7772:
5945                     ; 1848     stored_config_settings[4] = Pending_config_settings[4];
5947  ca4e c60123        	ld	a,_Pending_config_settings+4
5948  ca51 ae4050        	ldw	x,#_stored_config_settings+4
5949  ca54 cdf70d        	call	c_eewrc
5951                     ; 1849     stored_config_settings[5] = Pending_config_settings[5];
5953  ca57 c60124        	ld	a,_Pending_config_settings+5
5954  ca5a ae4051        	ldw	x,#_stored_config_settings+5
5955  ca5d cdf70d        	call	c_eewrc
5957                     ; 1852     if (stored_hostaddr[3] != Pending_hostaddr[3] ||
5957                     ; 1853         stored_hostaddr[2] != Pending_hostaddr[2] ||
5957                     ; 1854         stored_hostaddr[1] != Pending_hostaddr[1] ||
5957                     ; 1855         stored_hostaddr[0] != Pending_hostaddr[0]) {
5959  ca60 c6402a        	ld	a,_stored_hostaddr+3
5960  ca63 c10146        	cp	a,_Pending_hostaddr+3
5961  ca66 2618          	jrne	L3003
5963  ca68 c64029        	ld	a,_stored_hostaddr+2
5964  ca6b c10145        	cp	a,_Pending_hostaddr+2
5965  ca6e 2610          	jrne	L3003
5967  ca70 c64028        	ld	a,_stored_hostaddr+1
5968  ca73 c10144        	cp	a,_Pending_hostaddr+1
5969  ca76 2608          	jrne	L3003
5971  ca78 c64027        	ld	a,_stored_hostaddr
5972  ca7b c10143        	cp	a,_Pending_hostaddr
5973  ca7e 2713          	jreq	L1003
5974  ca80               L3003:
5975                     ; 1857       for (i=0; i<4; i++) stored_hostaddr[i] = Pending_hostaddr[i];
5977  ca80 4f            	clr	a
5978  ca81 6b01          	ld	(OFST+0,sp),a
5980  ca83               L1103:
5983  ca83 5f            	clrw	x
5984  ca84 97            	ld	xl,a
5985  ca85 d60143        	ld	a,(_Pending_hostaddr,x)
5986  ca88 d74027        	ld	(_stored_hostaddr,x),a
5989  ca8b 0c01          	inc	(OFST+0,sp)
5993  ca8d 7b01          	ld	a,(OFST+0,sp)
5994  ca8f a104          	cp	a,#4
5995  ca91 25f0          	jrult	L1103
5996  ca93               L1003:
5997                     ; 1861     if (stored_draddr[3] != Pending_draddr[3] ||
5997                     ; 1862         stored_draddr[2] != Pending_draddr[2] ||
5997                     ; 1863         stored_draddr[1] != Pending_draddr[1] ||
5997                     ; 1864         stored_draddr[0] != Pending_draddr[0]) {
5999  ca93 c64026        	ld	a,_stored_draddr+3
6000  ca96 c10142        	cp	a,_Pending_draddr+3
6001  ca99 2618          	jrne	L1203
6003  ca9b c64025        	ld	a,_stored_draddr+2
6004  ca9e c10141        	cp	a,_Pending_draddr+2
6005  caa1 2610          	jrne	L1203
6007  caa3 c64024        	ld	a,_stored_draddr+1
6008  caa6 c10140        	cp	a,_Pending_draddr+1
6009  caa9 2608          	jrne	L1203
6011  caab c64023        	ld	a,_stored_draddr
6012  caae c1013f        	cp	a,_Pending_draddr
6013  cab1 2717          	jreq	L7103
6014  cab3               L1203:
6015                     ; 1866       for (i=0; i<4; i++) stored_draddr[i] = Pending_draddr[i];
6017  cab3 4f            	clr	a
6018  cab4 6b01          	ld	(OFST+0,sp),a
6020  cab6               L7203:
6023  cab6 5f            	clrw	x
6024  cab7 97            	ld	xl,a
6025  cab8 d6013f        	ld	a,(_Pending_draddr,x)
6026  cabb d74023        	ld	(_stored_draddr,x),a
6029  cabe 0c01          	inc	(OFST+0,sp)
6033  cac0 7b01          	ld	a,(OFST+0,sp)
6034  cac2 a104          	cp	a,#4
6035  cac4 25f0          	jrult	L7203
6036                     ; 1867       restart_request = 1;
6038  cac6 35010109      	mov	_restart_request,#1
6039  caca               L7103:
6040                     ; 1871     if (stored_netmask[3] != Pending_netmask[3] ||
6040                     ; 1872         stored_netmask[2] != Pending_netmask[2] ||
6040                     ; 1873         stored_netmask[1] != Pending_netmask[1] ||
6040                     ; 1874         stored_netmask[0] != Pending_netmask[0]) {
6042  caca c64022        	ld	a,_stored_netmask+3
6043  cacd c1013e        	cp	a,_Pending_netmask+3
6044  cad0 2618          	jrne	L7303
6046  cad2 c64021        	ld	a,_stored_netmask+2
6047  cad5 c1013d        	cp	a,_Pending_netmask+2
6048  cad8 2610          	jrne	L7303
6050  cada c64020        	ld	a,_stored_netmask+1
6051  cadd c1013c        	cp	a,_Pending_netmask+1
6052  cae0 2608          	jrne	L7303
6054  cae2 c6401f        	ld	a,_stored_netmask
6055  cae5 c1013b        	cp	a,_Pending_netmask
6056  cae8 2717          	jreq	L5303
6057  caea               L7303:
6058                     ; 1876       for (i=0; i<4; i++) stored_netmask[i] = Pending_netmask[i];
6060  caea 4f            	clr	a
6061  caeb 6b01          	ld	(OFST+0,sp),a
6063  caed               L5403:
6066  caed 5f            	clrw	x
6067  caee 97            	ld	xl,a
6068  caef d6013b        	ld	a,(_Pending_netmask,x)
6069  caf2 d7401f        	ld	(_stored_netmask,x),a
6072  caf5 0c01          	inc	(OFST+0,sp)
6076  caf7 7b01          	ld	a,(OFST+0,sp)
6077  caf9 a104          	cp	a,#4
6078  cafb 25f0          	jrult	L5403
6079                     ; 1877       restart_request = 1;
6081  cafd 35010109      	mov	_restart_request,#1
6082  cb01               L5303:
6083                     ; 1881     if (stored_port != Pending_port) {
6085  cb01 ce401d        	ldw	x,_stored_port
6086  cb04 c30139        	cpw	x,_Pending_port
6087  cb07 270f          	jreq	L3503
6088                     ; 1883       stored_port = Pending_port;
6090  cb09 ce0139        	ldw	x,_Pending_port
6091  cb0c 89            	pushw	x
6092  cb0d ae401d        	ldw	x,#_stored_port
6093  cb10 cdf6f7        	call	c_eewrw
6095  cb13 35010109      	mov	_restart_request,#1
6096  cb17 85            	popw	x
6097                     ; 1885       restart_request = 1;
6099  cb18               L3503:
6100                     ; 1889     for(i=0; i<20; i++) {
6102  cb18 4f            	clr	a
6103  cb19 6b01          	ld	(OFST+0,sp),a
6105  cb1b               L5503:
6106                     ; 1890       if (stored_devicename[i] != Pending_devicename[i]) {
6108  cb1b 5f            	clrw	x
6109  cb1c 97            	ld	xl,a
6110  cb1d 905f          	clrw	y
6111  cb1f 9097          	ld	yl,a
6112  cb21 90d64000      	ld	a,(_stored_devicename,y)
6113  cb25 d10125        	cp	a,(_Pending_devicename,x)
6114  cb28 270e          	jreq	L3603
6115                     ; 1891         stored_devicename[i] = Pending_devicename[i];
6117  cb2a 7b01          	ld	a,(OFST+0,sp)
6118  cb2c 5f            	clrw	x
6119  cb2d 97            	ld	xl,a
6120  cb2e d60125        	ld	a,(_Pending_devicename,x)
6121  cb31 d74000        	ld	(_stored_devicename,x),a
6122                     ; 1897         restart_request = 1;
6124  cb34 35010109      	mov	_restart_request,#1
6125  cb38               L3603:
6126                     ; 1889     for(i=0; i<20; i++) {
6128  cb38 0c01          	inc	(OFST+0,sp)
6132  cb3a 7b01          	ld	a,(OFST+0,sp)
6133  cb3c a114          	cp	a,#20
6134  cb3e 25db          	jrult	L5503
6135                     ; 1904     strcpy(topic_base, devicetype);
6137  cb40 ae0074        	ldw	x,#_topic_base
6138  cb43 90ae9e6c      	ldw	y,#L5261_devicetype
6139  cb47               L403:
6140  cb47 90f6          	ld	a,(y)
6141  cb49 905c          	incw	y
6142  cb4b f7            	ld	(x),a
6143  cb4c 5c            	incw	x
6144  cb4d 4d            	tnz	a
6145  cb4e 26f7          	jrne	L403
6146                     ; 1905     strcat(topic_base, stored_devicename);
6148  cb50 ae4000        	ldw	x,#_stored_devicename
6149  cb53 89            	pushw	x
6150  cb54 ae0074        	ldw	x,#_topic_base
6151  cb57 cdf6c9        	call	_strcat
6153  cb5a 85            	popw	x
6154                     ; 1906     topic_base_len = (uint8_t)strlen(topic_base);
6156  cb5b ae0074        	ldw	x,#_topic_base
6157  cb5e cdf6dd        	call	_strlen
6159  cb61 9f            	ld	a,xl
6160  cb62 c70073        	ld	_topic_base_len,a
6161                     ; 1909     if (stored_mqttserveraddr[3] != Pending_mqttserveraddr[3] ||
6161                     ; 1910         stored_mqttserveraddr[2] != Pending_mqttserveraddr[2] ||
6161                     ; 1911         stored_mqttserveraddr[1] != Pending_mqttserveraddr[1] ||
6161                     ; 1912         stored_mqttserveraddr[0] != Pending_mqttserveraddr[0]) {
6163  cb65 c64034        	ld	a,_stored_mqttserveraddr+3
6164  cb68 c10162        	cp	a,_Pending_mqttserveraddr+3
6165  cb6b 2618          	jrne	L7603
6167  cb6d c64033        	ld	a,_stored_mqttserveraddr+2
6168  cb70 c10161        	cp	a,_Pending_mqttserveraddr+2
6169  cb73 2610          	jrne	L7603
6171  cb75 c64032        	ld	a,_stored_mqttserveraddr+1
6172  cb78 c10160        	cp	a,_Pending_mqttserveraddr+1
6173  cb7b 2608          	jrne	L7603
6175  cb7d c64031        	ld	a,_stored_mqttserveraddr
6176  cb80 c1015f        	cp	a,_Pending_mqttserveraddr
6177  cb83 2717          	jreq	L5603
6178  cb85               L7603:
6179                     ; 1914       for (i=0; i<4; i++) stored_mqttserveraddr[i] = Pending_mqttserveraddr[i];
6181  cb85 4f            	clr	a
6182  cb86 6b01          	ld	(OFST+0,sp),a
6184  cb88               L5703:
6187  cb88 5f            	clrw	x
6188  cb89 97            	ld	xl,a
6189  cb8a d6015f        	ld	a,(_Pending_mqttserveraddr,x)
6190  cb8d d74031        	ld	(_stored_mqttserveraddr,x),a
6193  cb90 0c01          	inc	(OFST+0,sp)
6197  cb92 7b01          	ld	a,(OFST+0,sp)
6198  cb94 a104          	cp	a,#4
6199  cb96 25f0          	jrult	L5703
6200                     ; 1916       restart_request = 1;
6202  cb98 35010109      	mov	_restart_request,#1
6203  cb9c               L5603:
6204                     ; 1920     if (stored_mqttport != Pending_mqttport) {
6206  cb9c ce402f        	ldw	x,_stored_mqttport
6207  cb9f c3015d        	cpw	x,_Pending_mqttport
6208  cba2 270f          	jreq	L3013
6209                     ; 1922       stored_mqttport = Pending_mqttport;
6211  cba4 ce015d        	ldw	x,_Pending_mqttport
6212  cba7 89            	pushw	x
6213  cba8 ae402f        	ldw	x,#_stored_mqttport
6214  cbab cdf6f7        	call	c_eewrw
6216  cbae 35010109      	mov	_restart_request,#1
6217  cbb2 85            	popw	x
6218                     ; 1924       restart_request = 1;
6220  cbb3               L3013:
6221                     ; 1928     for(i=0; i<11; i++) {
6223  cbb3 4f            	clr	a
6224  cbb4 6b01          	ld	(OFST+0,sp),a
6226  cbb6               L5013:
6227                     ; 1929       if (stored_mqtt_username[i] != Pending_mqtt_username[i]) {
6229  cbb6 5f            	clrw	x
6230  cbb7 97            	ld	xl,a
6231  cbb8 905f          	clrw	y
6232  cbba 9097          	ld	yl,a
6233  cbbc 90d64035      	ld	a,(_stored_mqtt_username,y)
6234  cbc0 d10152        	cp	a,(_Pending_mqtt_username,x)
6235  cbc3 270e          	jreq	L3113
6236                     ; 1930         stored_mqtt_username[i] = Pending_mqtt_username[i];
6238  cbc5 7b01          	ld	a,(OFST+0,sp)
6239  cbc7 5f            	clrw	x
6240  cbc8 97            	ld	xl,a
6241  cbc9 d60152        	ld	a,(_Pending_mqtt_username,x)
6242  cbcc d74035        	ld	(_stored_mqtt_username,x),a
6243                     ; 1932         restart_request = 1;
6245  cbcf 35010109      	mov	_restart_request,#1
6246  cbd3               L3113:
6247                     ; 1928     for(i=0; i<11; i++) {
6249  cbd3 0c01          	inc	(OFST+0,sp)
6253  cbd5 7b01          	ld	a,(OFST+0,sp)
6254  cbd7 a10b          	cp	a,#11
6255  cbd9 25db          	jrult	L5013
6256                     ; 1937     for(i=0; i<11; i++) {
6258  cbdb 4f            	clr	a
6259  cbdc 6b01          	ld	(OFST+0,sp),a
6261  cbde               L5113:
6262                     ; 1938       if (stored_mqtt_password[i] != Pending_mqtt_password[i]) {
6264  cbde 5f            	clrw	x
6265  cbdf 97            	ld	xl,a
6266  cbe0 905f          	clrw	y
6267  cbe2 9097          	ld	yl,a
6268  cbe4 90d64040      	ld	a,(_stored_mqtt_password,y)
6269  cbe8 d10147        	cp	a,(_Pending_mqtt_password,x)
6270  cbeb 270e          	jreq	L3213
6271                     ; 1939         stored_mqtt_password[i] = Pending_mqtt_password[i];
6273  cbed 7b01          	ld	a,(OFST+0,sp)
6274  cbef 5f            	clrw	x
6275  cbf0 97            	ld	xl,a
6276  cbf1 d60147        	ld	a,(_Pending_mqtt_password,x)
6277  cbf4 d74040        	ld	(_stored_mqtt_password,x),a
6278                     ; 1941         restart_request = 1;
6280  cbf7 35010109      	mov	_restart_request,#1
6281  cbfb               L3213:
6282                     ; 1937     for(i=0; i<11; i++) {
6284  cbfb 0c01          	inc	(OFST+0,sp)
6288  cbfd 7b01          	ld	a,(OFST+0,sp)
6289  cbff a10b          	cp	a,#11
6290  cc01 25db          	jrult	L5113
6291                     ; 1947     if (stored_uip_ethaddr_oct[0] != Pending_uip_ethaddr_oct[0] ||
6291                     ; 1948       stored_uip_ethaddr_oct[1] != Pending_uip_ethaddr_oct[1] ||
6291                     ; 1949       stored_uip_ethaddr_oct[2] != Pending_uip_ethaddr_oct[2] ||
6291                     ; 1950       stored_uip_ethaddr_oct[3] != Pending_uip_ethaddr_oct[3] ||
6291                     ; 1951       stored_uip_ethaddr_oct[4] != Pending_uip_ethaddr_oct[4] ||
6291                     ; 1952       stored_uip_ethaddr_oct[5] != Pending_uip_ethaddr_oct[5]) {
6293  cc03 c64017        	ld	a,_stored_uip_ethaddr_oct
6294  cc06 c10119        	cp	a,_Pending_uip_ethaddr_oct
6295  cc09 2628          	jrne	L7213
6297  cc0b c64018        	ld	a,_stored_uip_ethaddr_oct+1
6298  cc0e c1011a        	cp	a,_Pending_uip_ethaddr_oct+1
6299  cc11 2620          	jrne	L7213
6301  cc13 c64019        	ld	a,_stored_uip_ethaddr_oct+2
6302  cc16 c1011b        	cp	a,_Pending_uip_ethaddr_oct+2
6303  cc19 2618          	jrne	L7213
6305  cc1b c6401a        	ld	a,_stored_uip_ethaddr_oct+3
6306  cc1e c1011c        	cp	a,_Pending_uip_ethaddr_oct+3
6307  cc21 2610          	jrne	L7213
6309  cc23 c6401b        	ld	a,_stored_uip_ethaddr_oct+4
6310  cc26 c1011d        	cp	a,_Pending_uip_ethaddr_oct+4
6311  cc29 2608          	jrne	L7213
6313  cc2b c6401c        	ld	a,_stored_uip_ethaddr_oct+5
6314  cc2e c1011e        	cp	a,_Pending_uip_ethaddr_oct+5
6315  cc31 271a          	jreq	L3572
6316  cc33               L7213:
6317                     ; 1954       for (i=0; i<6; i++) stored_uip_ethaddr_oct[i] = Pending_uip_ethaddr_oct[i];
6319  cc33 4f            	clr	a
6320  cc34 6b01          	ld	(OFST+0,sp),a
6322  cc36               L1413:
6325  cc36 5f            	clrw	x
6326  cc37 97            	ld	xl,a
6327  cc38 d60119        	ld	a,(_Pending_uip_ethaddr_oct,x)
6328  cc3b d74017        	ld	(_stored_uip_ethaddr_oct,x),a
6331  cc3e 0c01          	inc	(OFST+0,sp)
6335  cc40 7b01          	ld	a,(OFST+0,sp)
6336  cc42 a106          	cp	a,#6
6337  cc44 25f0          	jrult	L1413
6338                     ; 1956       update_mac_string();
6340  cc46 cdc939        	call	_update_mac_string
6342                     ; 1958       restart_request = 1;
6344  cc49 35010109      	mov	_restart_request,#1
6345  cc4d               L3572:
6346                     ; 1962   if (restart_request == 1) {
6348  cc4d c60109        	ld	a,_restart_request
6349  cc50 4a            	dec	a
6350  cc51 2609          	jrne	L7413
6351                     ; 1965     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6353  cc53 c60108        	ld	a,_restart_reboot_step
6354  cc56 2604          	jrne	L7413
6355                     ; 1966       restart_reboot_step = RESTART_REBOOT_ARM;
6357  cc58 35010108      	mov	_restart_reboot_step,#1
6358  cc5c               L7413:
6359                     ; 1970   if (user_reboot_request == 1) {
6361  cc5c c6010a        	ld	a,_user_reboot_request
6362  cc5f 4a            	dec	a
6363  cc60 2611          	jrne	L3513
6364                     ; 1973     if (restart_reboot_step == RESTART_REBOOT_IDLE) {
6366  cc62 725d0108      	tnz	_restart_reboot_step
6367  cc66 260b          	jrne	L3513
6368                     ; 1974       restart_reboot_step = RESTART_REBOOT_ARM;
6370  cc68 35010108      	mov	_restart_reboot_step,#1
6371                     ; 1975       user_reboot_request = 0;
6373  cc6c c7010a        	ld	_user_reboot_request,a
6374                     ; 1976       reboot_request = 1;
6376  cc6f 3501010b      	mov	_reboot_request,#1
6377  cc73               L3513:
6378                     ; 1985   parse_complete = 0; // Reset parse_complete for future changes
6380  cc73 725f0106      	clr	_parse_complete
6381                     ; 1988   if (stack_limit1 != 0xaa || stack_limit2 != 0x55) {
6383  cc77 c605ff        	ld	a,_stack_limit1
6384  cc7a a1aa          	cp	a,#170
6385  cc7c 2607          	jrne	L1613
6387  cc7e c605fe        	ld	a,_stack_limit2
6388  cc81 a155          	cp	a,#85
6389  cc83 270a          	jreq	L7513
6390  cc85               L1613:
6391                     ; 1989     stack_error = 1;
6393  cc85 35010163      	mov	_stack_error,#1
6394                     ; 1990     fastflash();
6396  cc89 cdcfb3        	call	_fastflash
6398                     ; 1991     fastflash();
6400  cc8c cdcfb3        	call	_fastflash
6402  cc8f               L7513:
6403                     ; 2004 }
6406  cc8f 84            	pop	a
6407  cc90 81            	ret	
6442                     ; 2007 void check_restart_reboot(void)
6442                     ; 2008 {
6443                     .text:	section	.text,new
6444  cc91               _check_restart_reboot:
6448                     ; 2014   if (restart_request == 1 || reboot_request == 1) {
6450  cc91 c60109        	ld	a,_restart_request
6451  cc94 4a            	dec	a
6452  cc95 2709          	jreq	L5713
6454  cc97 c6010b        	ld	a,_reboot_request
6455  cc9a 4a            	dec	a
6456  cc9b 2703cccd65    	jrne	L3713
6457  cca0               L5713:
6458                     ; 2025     if (restart_reboot_step == RESTART_REBOOT_ARM) {
6460  cca0 c60108        	ld	a,_restart_reboot_step
6461  cca3 a101          	cp	a,#1
6462  cca5 2611          	jrne	L7713
6463                     ; 2030       time_mark2 = second_counter;
6465  cca7 ce029e        	ldw	x,_second_counter+2
6466  ccaa cf00fd        	ldw	_time_mark2+2,x
6467  ccad ce029c        	ldw	x,_second_counter
6468  ccb0 cf00fb        	ldw	_time_mark2,x
6469                     ; 2031       restart_reboot_step = RESTART_REBOOT_ARM2;
6471  ccb3 35020108      	mov	_restart_reboot_step,#2
6474  ccb7 81            	ret	
6475  ccb8               L7713:
6476                     ; 2034     else if (restart_reboot_step == RESTART_REBOOT_ARM2) {
6478  ccb8 a102          	cp	a,#2
6479  ccba 2613          	jrne	L3023
6480                     ; 2040       if (second_counter > time_mark2 + 0 ) {
6482  ccbc ae029c        	ldw	x,#_second_counter
6483  ccbf cdf96a        	call	c_ltor
6485  ccc2 ae00fb        	ldw	x,#_time_mark2
6486  ccc5 cdf8ff        	call	c_lcmp
6488  ccc8 23d3          	jrule	L3713
6489                     ; 2041         restart_reboot_step = RESTART_REBOOT_DISCONNECT;
6491  ccca 35030108      	mov	_restart_reboot_step,#3
6493  ccce 81            	ret	
6494  cccf               L3023:
6495                     ; 2046     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECT) {
6497  cccf a103          	cp	a,#3
6498  ccd1 261e          	jrne	L1123
6499                     ; 2047       restart_reboot_step = RESTART_REBOOT_DISCONNECTWAIT;
6501  ccd3 35040108      	mov	_restart_reboot_step,#4
6502                     ; 2048       if (mqtt_start == MQTT_START_COMPLETE) {
6504  ccd7 c600a8        	ld	a,_mqtt_start
6505  ccda a114          	cp	a,#20
6506  ccdc 2606          	jrne	L3123
6507                     ; 2050         mqtt_disconnect(&mqttclient);
6509  ccde ae00c5        	ldw	x,#_mqttclient
6510  cce1 cdd4b8        	call	_mqtt_disconnect
6512  cce4               L3123:
6513                     ; 2053       time_mark2 = second_counter;
6515  cce4 ce029e        	ldw	x,_second_counter+2
6516  cce7 cf00fd        	ldw	_time_mark2+2,x
6517  ccea ce029c        	ldw	x,_second_counter
6518  cced cf00fb        	ldw	_time_mark2,x
6521  ccf0 81            	ret	
6522  ccf1               L1123:
6523                     ; 2056     else if (restart_reboot_step == RESTART_REBOOT_DISCONNECTWAIT) {
6525  ccf1 a104          	cp	a,#4
6526  ccf3 2618          	jrne	L7123
6527                     ; 2057       if (second_counter > time_mark2 + 1 ) {
6529  ccf5 ae00fb        	ldw	x,#_time_mark2
6530  ccf8 cdf96a        	call	c_ltor
6532  ccfb a601          	ld	a,#1
6533  ccfd cdf8d6        	call	c_ladc
6535  cd00 ae029c        	ldw	x,#_second_counter
6536  cd03 cdf8ff        	call	c_lcmp
6538  cd06 245d          	jruge	L3713
6539                     ; 2060         restart_reboot_step = RESTART_REBOOT_TCPCLOSE;
6541  cd08 35050108      	mov	_restart_reboot_step,#5
6543  cd0c 81            	ret	
6544  cd0d               L7123:
6545                     ; 2064     else if (restart_reboot_step == RESTART_REBOOT_TCPCLOSE) {
6547  cd0d a105          	cp	a,#5
6548  cd0f 2615          	jrne	L5223
6549                     ; 2080       mqtt_close_tcp = 1;
6551  cd11 35010107      	mov	_mqtt_close_tcp,#1
6552                     ; 2082       time_mark2 = second_counter;
6554  cd15 ce029e        	ldw	x,_second_counter+2
6555  cd18 cf00fd        	ldw	_time_mark2+2,x
6556  cd1b ce029c        	ldw	x,_second_counter
6557  cd1e cf00fb        	ldw	_time_mark2,x
6558                     ; 2083       restart_reboot_step = RESTART_REBOOT_TCPWAIT;
6560  cd21 35060108      	mov	_restart_reboot_step,#6
6563  cd25 81            	ret	
6564  cd26               L5223:
6565                     ; 2085     else if (restart_reboot_step == RESTART_REBOOT_TCPWAIT) {
6567  cd26 a106          	cp	a,#6
6568  cd28 261c          	jrne	L1323
6569                     ; 2090       if (second_counter > time_mark2 + 1) {
6571  cd2a ae00fb        	ldw	x,#_time_mark2
6572  cd2d cdf96a        	call	c_ltor
6574  cd30 a601          	ld	a,#1
6575  cd32 cdf8d6        	call	c_ladc
6577  cd35 ae029c        	ldw	x,#_second_counter
6578  cd38 cdf8ff        	call	c_lcmp
6580  cd3b 2428          	jruge	L3713
6581                     ; 2091 	mqtt_close_tcp = 0;
6583  cd3d 725f0107      	clr	_mqtt_close_tcp
6584                     ; 2092         restart_reboot_step = RESTART_REBOOT_FINISH;
6586  cd41 35070108      	mov	_restart_reboot_step,#7
6588  cd45 81            	ret	
6589  cd46               L1323:
6590                     ; 2102     else if (restart_reboot_step == RESTART_REBOOT_FINISH) {
6592  cd46 a107          	cp	a,#7
6593  cd48 261b          	jrne	L3713
6594                     ; 2103       if (reboot_request == 1) {
6596  cd4a c6010b        	ld	a,_reboot_request
6597  cd4d 4a            	dec	a
6598  cd4e 2606          	jrne	L1423
6599                     ; 2104         restart_reboot_step = RESTART_REBOOT_IDLE;
6601  cd50 c70108        	ld	_restart_reboot_step,a
6602                     ; 2106         reboot();
6604  cd53 cdcde6        	call	_reboot
6606  cd56               L1423:
6607                     ; 2108       if (restart_request == 1) {
6609  cd56 c60109        	ld	a,_restart_request
6610  cd59 4a            	dec	a
6611  cd5a 2609          	jrne	L3713
6612                     ; 2109 	restart_request = 0;
6614  cd5c c70109        	ld	_restart_request,a
6615                     ; 2110         restart_reboot_step = RESTART_REBOOT_IDLE;
6617  cd5f c70108        	ld	_restart_reboot_step,a
6618                     ; 2112 	restart();
6620  cd62 cdcd66        	call	_restart
6622  cd65               L3713:
6623                     ; 2116 }
6626  cd65 81            	ret	
6679                     ; 2119 void restart(void)
6679                     ; 2120 {
6680                     .text:	section	.text,new
6681  cd66               _restart:
6685                     ; 2134   LEDcontrol(0); // Turn LED off
6687  cd66 4f            	clr	a
6688  cd67 cda468        	call	_LEDcontrol
6690                     ; 2136   parse_complete = 0;
6692  cd6a 725f0106      	clr	_parse_complete
6693                     ; 2137   reboot_request = 0;
6695  cd6e 725f010b      	clr	_reboot_request
6696                     ; 2138   restart_request = 0;
6698  cd72 725f0109      	clr	_restart_request
6699                     ; 2140   time_mark2 = 0;           // Time capture used in reboot
6701  cd76 5f            	clrw	x
6702  cd77 cf00fd        	ldw	_time_mark2+2,x
6703  cd7a cf00fb        	ldw	_time_mark2,x
6704                     ; 2143   mqtt_close_tcp = 0;
6706  cd7d 725f0107      	clr	_mqtt_close_tcp
6707                     ; 2145   mqtt_start = MQTT_START_TCP_CONNECT;
6709  cd81 350100a8      	mov	_mqtt_start,#1
6710                     ; 2146   mqtt_start_status = MQTT_START_NOT_STARTED;
6712  cd85 725f00a7      	clr	_mqtt_start_status
6713                     ; 2147   mqtt_start_ctr1 = 0;
6715  cd89 725f00a6      	clr	_mqtt_start_ctr1
6716                     ; 2148   mqtt_sanity_ctr = 0;
6718  cd8d 725f00a4      	clr	_mqtt_sanity_ctr
6719                     ; 2149   mqtt_start_retry = 0;
6721  cd91 725f00a3      	clr	_mqtt_start_retry
6722                     ; 2150   MQTT_error_status = 0;
6724  cd95 725f029b      	clr	_MQTT_error_status
6725                     ; 2151   mqtt_restart_step = MQTT_RESTART_IDLE;
6727  cd99 725f00a0      	clr	_mqtt_restart_step
6728                     ; 2152   strcpy(topic_base, devicetype);
6730  cd9d ae0074        	ldw	x,#_topic_base
6731  cda0 90ae9e6c      	ldw	y,#L5261_devicetype
6732  cda4               L433:
6733  cda4 90f6          	ld	a,(y)
6734  cda6 905c          	incw	y
6735  cda8 f7            	ld	(x),a
6736  cda9 5c            	incw	x
6737  cdaa 4d            	tnz	a
6738  cdab 26f7          	jrne	L433
6739                     ; 2153   state_request = STATE_REQUEST_IDLE;
6741  cdad c70164        	ld	_state_request,a
6742                     ; 2156   spi_init();              // Initialize the SPI bit bang interface to the
6744  cdb0 cde4bd        	call	_spi_init
6746                     ; 2158   unlock_eeprom();         // unlock the EEPROM so writes can be performed
6748  cdb3 cdc46e        	call	_unlock_eeprom
6750                     ; 2159   check_eeprom_settings(); // Verify EEPROM up to date
6752  cdb6 cdc47e        	call	_check_eeprom_settings
6754                     ; 2160   Enc28j60Init();          // Initialize the ENC28J60 ethernet interface
6756  cdb9 cda028        	call	_Enc28j60Init
6758                     ; 2161   uip_arp_init();          // Initialize the ARP module
6760  cdbc cdf226        	call	_uip_arp_init
6762                     ; 2162   uip_init();              // Initialize uIP
6764  cdbf cde7c3        	call	_uip_init
6766                     ; 2163   HttpDInit();             // Initialize httpd; sets up listening ports
6768  cdc2 cdac96        	call	_HttpDInit
6770                     ; 2167   mqtt_init(&mqttclient,
6770                     ; 2168             mqtt_sendbuf,
6770                     ; 2169 	    sizeof(mqtt_sendbuf),
6770                     ; 2170 	    &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN],
6770                     ; 2171 	    UIP_APPDATA_SIZE,
6770                     ; 2172 	    publish_callback);
6772  cdc5 aec1d6        	ldw	x,#_publish_callback
6773  cdc8 89            	pushw	x
6774  cdc9 ae01be        	ldw	x,#446
6775  cdcc 89            	pushw	x
6776  cdcd ae03ad        	ldw	x,#_uip_buf+54
6777  cdd0 89            	pushw	x
6778  cdd1 ae00c8        	ldw	x,#200
6779  cdd4 89            	pushw	x
6780  cdd5 ae016f        	ldw	x,#_mqtt_sendbuf
6781  cdd8 89            	pushw	x
6782  cdd9 ae00c5        	ldw	x,#_mqttclient
6783  cddc cdd065        	call	_mqtt_init
6785  cddf 5b0a          	addw	sp,#10
6786                     ; 2175   LEDcontrol(1); // Turn LED on
6788  cde1 a601          	ld	a,#1
6790                     ; 2178 }
6793  cde3 cca468        	jp	_LEDcontrol
6821                     ; 2181 void reboot(void)
6821                     ; 2182 {
6822                     .text:	section	.text,new
6823  cde6               _reboot:
6827                     ; 2185   fastflash(); // A useful signal that a deliberate reboot is occurring.
6829  cde6 cdcfb3        	call	_fastflash
6831                     ; 2187   LEDcontrol(0);  // turn LED off
6833  cde9 4f            	clr	a
6834  cdea cda468        	call	_LEDcontrol
6836                     ; 2189   WWDG_WR = (uint8_t)0x7f;     // Window register reset
6838  cded 357f50d2      	mov	_WWDG_WR,#127
6839                     ; 2190   WWDG_CR = (uint8_t)0xff;     // Set watchdog to timeout in 49ms
6841  cdf1 35ff50d1      	mov	_WWDG_CR,#255
6842                     ; 2191   WWDG_WR = (uint8_t)0x60;     // Window register value - doesn't matter
6844  cdf5 356050d2      	mov	_WWDG_WR,#96
6845                     ; 2194   wait_timer((uint16_t)50000); // Wait for watchdog to generate reset
6847  cdf9 aec350        	ldw	x,#50000
6848  cdfc cde690        	call	_wait_timer
6850                     ; 2195   wait_timer((uint16_t)50000);
6852  cdff aec350        	ldw	x,#50000
6853  ce02 cde690        	call	_wait_timer
6855                     ; 2196   wait_timer((uint16_t)50000);
6857  ce05 aec350        	ldw	x,#50000
6859                     ; 2197 }
6862  ce08 cce690        	jp	_wait_timer
6903                     ; 2200 void read_input_registers(void)
6903                     ; 2201 {
6904                     .text:	section	.text,new
6905  ce0b               _read_input_registers:
6907  ce0b 89            	pushw	x
6908       00000002      OFST:	set	2
6911                     ; 2218   if (PC_IDR & (uint8_t)0x40) IO_16to9_new1 |= 0x80; // PC bit 6 = 1, Input 8 = 1
6913  ce0c 720d500b06    	btjf	_PC_IDR,#6,L1033
6916  ce11 721e016c      	bset	_IO_16to9_new1,#7
6918  ce15 2004          	jra	L3033
6919  ce17               L1033:
6920                     ; 2219   else IO_16to9_new1 &= (uint8_t)(~0x80);
6922  ce17 721f016c      	bres	_IO_16to9_new1,#7
6923  ce1b               L3033:
6924                     ; 2220   if (PG_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x40; // PG bit 0 = 1, Input 7 = 1
6926  ce1b 7201501f06    	btjf	_PG_IDR,#0,L5033
6929  ce20 721c016c      	bset	_IO_16to9_new1,#6
6931  ce24 2004          	jra	L7033
6932  ce26               L5033:
6933                     ; 2221   else IO_16to9_new1 &= (uint8_t)(~0x40);
6935  ce26 721d016c      	bres	_IO_16to9_new1,#6
6936  ce2a               L7033:
6937                     ; 2222   if (PE_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x20; // PE bit 3 = 1, Input 6 = 1
6939  ce2a 7207501506    	btjf	_PE_IDR,#3,L1133
6942  ce2f 721a016c      	bset	_IO_16to9_new1,#5
6944  ce33 2004          	jra	L3133
6945  ce35               L1133:
6946                     ; 2223   else IO_16to9_new1 &= (uint8_t)(~0x20);
6948  ce35 721b016c      	bres	_IO_16to9_new1,#5
6949  ce39               L3133:
6950                     ; 2224   if (PD_IDR & (uint8_t)0x01) IO_16to9_new1 |= 0x10; // PD bit 0 = 1, Input 5 = 1
6952  ce39 7201501006    	btjf	_PD_IDR,#0,L5133
6955  ce3e 7218016c      	bset	_IO_16to9_new1,#4
6957  ce42 2004          	jra	L7133
6958  ce44               L5133:
6959                     ; 2225   else IO_16to9_new1 &= (uint8_t)(~0x10);
6961  ce44 7219016c      	bres	_IO_16to9_new1,#4
6962  ce48               L7133:
6963                     ; 2226   if (PD_IDR & (uint8_t)0x08) IO_16to9_new1 |= 0x08; // PD bit 3 = 1, Input 4 = 1
6965  ce48 7207501006    	btjf	_PD_IDR,#3,L1233
6968  ce4d 7216016c      	bset	_IO_16to9_new1,#3
6970  ce51 2004          	jra	L3233
6971  ce53               L1233:
6972                     ; 2227   else IO_16to9_new1 &= (uint8_t)(~0x08);
6974  ce53 7217016c      	bres	_IO_16to9_new1,#3
6975  ce57               L3233:
6976                     ; 2228   if (PD_IDR & (uint8_t)0x20) IO_16to9_new1 |= 0x04; // PD bit 5 = 1, Input 3 = 1
6978  ce57 720b501006    	btjf	_PD_IDR,#5,L5233
6981  ce5c 7214016c      	bset	_IO_16to9_new1,#2
6983  ce60 2004          	jra	L7233
6984  ce62               L5233:
6985                     ; 2229   else IO_16to9_new1 &= (uint8_t)(~0x04);
6987  ce62 7215016c      	bres	_IO_16to9_new1,#2
6988  ce66               L7233:
6989                     ; 2230   if (PD_IDR & (uint8_t)0x80) IO_16to9_new1 |= 0x02; // PD bit 7 = 1, Input 2 = 1
6991  ce66 720f501006    	btjf	_PD_IDR,#7,L1333
6994  ce6b 7212016c      	bset	_IO_16to9_new1,#1
6996  ce6f 2004          	jra	L3333
6997  ce71               L1333:
6998                     ; 2231   else IO_16to9_new1 &= (uint8_t)(~0x02);
7000  ce71 7213016c      	bres	_IO_16to9_new1,#1
7001  ce75               L3333:
7002                     ; 2232   if (PA_IDR & (uint8_t)0x10) IO_16to9_new1 |= 0x01; // PA bit 4 = 1, Input 1 = 1
7004  ce75 7209500106    	btjf	_PA_IDR,#4,L5333
7007  ce7a 7210016c      	bset	_IO_16to9_new1,#0
7009  ce7e 2004          	jra	L7333
7010  ce80               L5333:
7011                     ; 2233   else IO_16to9_new1 &= (uint8_t)(~0x01);
7013  ce80 7211016c      	bres	_IO_16to9_new1,#0
7014  ce84               L7333:
7015                     ; 2238   xor_tmp = (uint8_t)((IO_16to9 ^ IO_16to9_new1) & (IO_16to9 ^ IO_16to9_new2));
7017  ce84 c6016e        	ld	a,_IO_16to9
7018  ce87 c8016a        	xor	a,_IO_16to9_new2
7019  ce8a 6b01          	ld	(OFST-1,sp),a
7021  ce8c c6016e        	ld	a,_IO_16to9
7022  ce8f c8016c        	xor	a,_IO_16to9_new1
7023  ce92 1401          	and	a,(OFST-1,sp)
7024  ce94 6b02          	ld	(OFST+0,sp),a
7026                     ; 2239   IO_16to9 = (uint8_t)(IO_16to9 ^ xor_tmp);
7028  ce96 c8016e        	xor	a,_IO_16to9
7029  ce99 c7016e        	ld	_IO_16to9,a
7030                     ; 2241   IO_16to9_new2 = IO_16to9_new1;
7032                     ; 2295 }
7035  ce9c 85            	popw	x
7036  ce9d 55016c016a    	mov	_IO_16to9_new2,_IO_16to9_new1
7037  cea2 81            	ret	
7077                     ; 2298 void write_output_registers(void)
7077                     ; 2299 {
7078                     .text:	section	.text,new
7079  cea3               _write_output_registers:
7081  cea3 88            	push	a
7082       00000001      OFST:	set	1
7085                     ; 2353   xor_tmp = (uint8_t)(invert_output ^ IO_8to1);
7087  cea4 c60166        	ld	a,_invert_output
7088  cea7 c8016d        	xor	a,_IO_8to1
7089  ceaa 6b01          	ld	(OFST+0,sp),a
7091                     ; 2354   if (xor_tmp & 0x80) PC_ODR |= (uint8_t)0x80; // Relay 8 off
7093  ceac 2a06          	jrpl	L5533
7096  ceae 721e500a      	bset	_PC_ODR,#7
7098  ceb2 2004          	jra	L7533
7099  ceb4               L5533:
7100                     ; 2355   else PC_ODR &= (uint8_t)~0x80; // Relay 8 on
7102  ceb4 721f500a      	bres	_PC_ODR,#7
7103  ceb8               L7533:
7104                     ; 2356   if (xor_tmp & 0x40) PG_ODR |= (uint8_t)0x02; // Relay 7 off
7106  ceb8 a540          	bcp	a,#64
7107  ceba 2706          	jreq	L1633
7110  cebc 7212501e      	bset	_PG_ODR,#1
7112  cec0 2004          	jra	L3633
7113  cec2               L1633:
7114                     ; 2357   else PG_ODR &= (uint8_t)~0x02; // Relay 7 on
7116  cec2 7213501e      	bres	_PG_ODR,#1
7117  cec6               L3633:
7118                     ; 2358   if (xor_tmp & 0x20) PE_ODR |= (uint8_t)0x01; // Relay 6 off
7120  cec6 7b01          	ld	a,(OFST+0,sp)
7121  cec8 a520          	bcp	a,#32
7122  ceca 2706          	jreq	L5633
7125  cecc 72105014      	bset	_PE_ODR,#0
7127  ced0 2004          	jra	L7633
7128  ced2               L5633:
7129                     ; 2359   else PE_ODR &= (uint8_t)~0x01; // Relay 6 on
7131  ced2 72115014      	bres	_PE_ODR,#0
7132  ced6               L7633:
7133                     ; 2360   if (xor_tmp & 0x10) PD_ODR |= (uint8_t)0x04; // Relay 5 off
7135  ced6 a510          	bcp	a,#16
7136  ced8 2706          	jreq	L1733
7139  ceda 7214500f      	bset	_PD_ODR,#2
7141  cede 2004          	jra	L3733
7142  cee0               L1733:
7143                     ; 2361   else PD_ODR &= (uint8_t)~0x04; // Relay 5 on
7145  cee0 7215500f      	bres	_PD_ODR,#2
7146  cee4               L3733:
7147                     ; 2362   if (xor_tmp & 0x08) PD_ODR |= (uint8_t)0x10; // Relay 4 off
7149  cee4 7b01          	ld	a,(OFST+0,sp)
7150  cee6 a508          	bcp	a,#8
7151  cee8 2706          	jreq	L5733
7154  ceea 7218500f      	bset	_PD_ODR,#4
7156  ceee 2004          	jra	L7733
7157  cef0               L5733:
7158                     ; 2363   else PD_ODR &= (uint8_t)~0x10; // Relay 4 on
7160  cef0 7219500f      	bres	_PD_ODR,#4
7161  cef4               L7733:
7162                     ; 2364   if (xor_tmp & 0x04) PD_ODR |= (uint8_t)0x40; // Relay 3 off
7164  cef4 a504          	bcp	a,#4
7165  cef6 2706          	jreq	L1043
7168  cef8 721c500f      	bset	_PD_ODR,#6
7170  cefc 2004          	jra	L3043
7171  cefe               L1043:
7172                     ; 2365   else PD_ODR &= (uint8_t)~0x40; // Relay 3 on
7174  cefe 721d500f      	bres	_PD_ODR,#6
7175  cf02               L3043:
7176                     ; 2366   if (xor_tmp & 0x02) PA_ODR |= (uint8_t)0x20; // Relay 2 off
7178  cf02 7b01          	ld	a,(OFST+0,sp)
7179  cf04 a502          	bcp	a,#2
7180  cf06 2706          	jreq	L5043
7183  cf08 721a5000      	bset	_PA_ODR,#5
7185  cf0c 2004          	jra	L7043
7186  cf0e               L5043:
7187                     ; 2367   else PA_ODR &= (uint8_t)~0x20; // Relay 2 on
7189  cf0e 721b5000      	bres	_PA_ODR,#5
7190  cf12               L7043:
7191                     ; 2368   if (xor_tmp & 0x01) PA_ODR |= (uint8_t)0x08; // Relay 1 off
7193  cf12 a501          	bcp	a,#1
7194  cf14 2706          	jreq	L1143
7197  cf16 72165000      	bset	_PA_ODR,#3
7199  cf1a 2004          	jra	L3143
7200  cf1c               L1143:
7201                     ; 2369   else PA_ODR &= (uint8_t)~0x08; // Relay 1 on
7203  cf1c 72175000      	bres	_PA_ODR,#3
7204  cf20               L3143:
7205                     ; 2375 }
7208  cf20 84            	pop	a
7209  cf21 81            	ret	
7250                     ; 2378 void check_reset_button(void)
7250                     ; 2379 {
7251                     .text:	section	.text,new
7252  cf22               _check_reset_button:
7254  cf22 88            	push	a
7255       00000001      OFST:	set	1
7258                     ; 2384   if ((PA_IDR & 0x02) == 0) {
7260  cf23 720250015d    	btjt	_PA_IDR,#1,L1343
7261                     ; 2386     for (i=0; i<100; i++) {
7263  cf28 0f01          	clr	(OFST+0,sp)
7265  cf2a               L3343:
7266                     ; 2387       wait_timer(50000); // wait 50ms
7268  cf2a aec350        	ldw	x,#50000
7269  cf2d cde690        	call	_wait_timer
7271                     ; 2388       if ((PA_IDR & 0x02) == 1) { // check Reset Button again. If released
7273  cf30 c65001        	ld	a,_PA_IDR
7274  cf33 a402          	and	a,#2
7275  cf35 4a            	dec	a
7276  cf36 2602          	jrne	L1443
7277                     ; 2390         return;
7280  cf38 84            	pop	a
7281  cf39 81            	ret	
7282  cf3a               L1443:
7283                     ; 2386     for (i=0; i<100; i++) {
7285  cf3a 0c01          	inc	(OFST+0,sp)
7289  cf3c 7b01          	ld	a,(OFST+0,sp)
7290  cf3e a164          	cp	a,#100
7291  cf40 25e8          	jrult	L3343
7292                     ; 2395     LEDcontrol(0);  // turn LED off
7294  cf42 4f            	clr	a
7295  cf43 cda468        	call	_LEDcontrol
7298  cf46               L5443:
7299                     ; 2396     while((PA_IDR & 0x02) == 0) {  // Wait for button release
7301  cf46 72035001fb    	btjf	_PA_IDR,#1,L5443
7302                     ; 2399     magic4 = 0x00;
7304  cf4b 4f            	clr	a
7305  cf4c ae402e        	ldw	x,#_magic4
7306  cf4f cdf70d        	call	c_eewrc
7308                     ; 2400     magic3 = 0x00;
7310  cf52 4f            	clr	a
7311  cf53 ae402d        	ldw	x,#_magic3
7312  cf56 cdf70d        	call	c_eewrc
7314                     ; 2401     magic2 = 0x00;
7316  cf59 4f            	clr	a
7317  cf5a ae402c        	ldw	x,#_magic2
7318  cf5d cdf70d        	call	c_eewrc
7320                     ; 2402     magic1 = 0x00;
7322  cf60 4f            	clr	a
7323  cf61 ae402b        	ldw	x,#_magic1
7324  cf64 cdf70d        	call	c_eewrc
7326                     ; 2404     WWDG_WR = (uint8_t)0x7f;       // Window register reset
7328  cf67 357f50d2      	mov	_WWDG_WR,#127
7329                     ; 2405     WWDG_CR = (uint8_t)0xff;       // Set watchdog to timeout in 49ms
7331  cf6b 35ff50d1      	mov	_WWDG_CR,#255
7332                     ; 2406     WWDG_WR = (uint8_t)0x60;       // Window register value - doesn't matter
7334  cf6f 356050d2      	mov	_WWDG_WR,#96
7335                     ; 2409     wait_timer((uint16_t)50000);   // Wait for watchdog to generate reset
7337  cf73 aec350        	ldw	x,#50000
7338  cf76 cde690        	call	_wait_timer
7340                     ; 2410     wait_timer((uint16_t)50000);
7342  cf79 aec350        	ldw	x,#50000
7343  cf7c cde690        	call	_wait_timer
7345                     ; 2411     wait_timer((uint16_t)50000);
7347  cf7f aec350        	ldw	x,#50000
7348  cf82 cde690        	call	_wait_timer
7350  cf85               L1343:
7351                     ; 2413 }
7354  cf85 84            	pop	a
7355  cf86 81            	ret	
7389                     ; 2416 void debugflash(void)
7389                     ; 2417 {
7390                     .text:	section	.text,new
7391  cf87               _debugflash:
7393  cf87 88            	push	a
7394       00000001      OFST:	set	1
7397                     ; 2432   LEDcontrol(0);     // turn LED off
7399  cf88 4f            	clr	a
7400  cf89 cda468        	call	_LEDcontrol
7402                     ; 2433   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7404  cf8c 0f01          	clr	(OFST+0,sp)
7406  cf8e               L5643:
7409  cf8e aec350        	ldw	x,#50000
7410  cf91 cde690        	call	_wait_timer
7414  cf94 0c01          	inc	(OFST+0,sp)
7418  cf96 7b01          	ld	a,(OFST+0,sp)
7419  cf98 a10a          	cp	a,#10
7420  cf9a 25f2          	jrult	L5643
7421                     ; 2435   LEDcontrol(1);     // turn LED on
7423  cf9c a601          	ld	a,#1
7424  cf9e cda468        	call	_LEDcontrol
7426                     ; 2436   for(i=0; i<10; i++) wait_timer((uint16_t)50000); // wait 500ms
7428  cfa1 0f01          	clr	(OFST+0,sp)
7430  cfa3               L3743:
7433  cfa3 aec350        	ldw	x,#50000
7434  cfa6 cde690        	call	_wait_timer
7438  cfa9 0c01          	inc	(OFST+0,sp)
7442  cfab 7b01          	ld	a,(OFST+0,sp)
7443  cfad a10a          	cp	a,#10
7444  cfaf 25f2          	jrult	L3743
7445                     ; 2437 }
7448  cfb1 84            	pop	a
7449  cfb2 81            	ret	
7483                     ; 2440 void fastflash(void)
7483                     ; 2441 {
7484                     .text:	section	.text,new
7485  cfb3               _fastflash:
7487  cfb3 88            	push	a
7488       00000001      OFST:	set	1
7491                     ; 2456   for (i=0; i<10; i++) {
7493  cfb4 0f01          	clr	(OFST+0,sp)
7495  cfb6               L5153:
7496                     ; 2457     LEDcontrol(0);     // turn LED off
7498  cfb6 4f            	clr	a
7499  cfb7 cda468        	call	_LEDcontrol
7501                     ; 2458     wait_timer((uint16_t)50000); // wait 50ms
7503  cfba aec350        	ldw	x,#50000
7504  cfbd cde690        	call	_wait_timer
7506                     ; 2460     LEDcontrol(1);     // turn LED on
7508  cfc0 a601          	ld	a,#1
7509  cfc2 cda468        	call	_LEDcontrol
7511                     ; 2461     wait_timer((uint16_t)50000); // wait 50ms
7513  cfc5 aec350        	ldw	x,#50000
7514  cfc8 cde690        	call	_wait_timer
7516                     ; 2456   for (i=0; i<10; i++) {
7518  cfcb 0c01          	inc	(OFST+0,sp)
7522  cfcd 7b01          	ld	a,(OFST+0,sp)
7523  cfcf a10a          	cp	a,#10
7524  cfd1 25e3          	jrult	L5153
7525                     ; 2463 }
7528  cfd3 84            	pop	a
7529  cfd4 81            	ret	
7554                     ; 2466 void oneflash(void)
7554                     ; 2467 {
7555                     .text:	section	.text,new
7556                     _oneflash:
7560                     ; 2482   LEDcontrol(0);     // turn LED off
7562                     	clr	a
7563                     	call	_LEDcontrol
7565                     ; 2483   wait_timer((uint16_t)25000); // wait 25ms
7567                     	ldw	x,#25000
7568                     	call	_wait_timer
7570                     ; 2485   LEDcontrol(1);     // turn LED on
7572                     	ld	a,#1
7574                     ; 2486 }
7577                     	jp	_LEDcontrol
8905                     	switch	.bss
8906  0067               _TRANSMIT_counter:
8907  0067 00000000      	ds.b	4
8908                     	xdef	_TRANSMIT_counter
8909  006b               _TXERIF_counter:
8910  006b 00000000      	ds.b	4
8911                     	xdef	_TXERIF_counter
8912  006f               _RXERIF_counter:
8913  006f 00000000      	ds.b	4
8914                     	xdef	_RXERIF_counter
8915  0073               _topic_base_len:
8916  0073 00            	ds.b	1
8917                     	xdef	_topic_base_len
8918  0074               _topic_base:
8919  0074 000000000000  	ds.b	44
8920                     	xdef	_topic_base
8921  00a0               _mqtt_restart_step:
8922  00a0 00            	ds.b	1
8923                     	xdef	_mqtt_restart_step
8924                     	xref	_MQTT_error_status
8925  00a1               _mqtt_conn:
8926  00a1 0000          	ds.b	2
8927                     	xdef	_mqtt_conn
8928                     	xref	_mqtt_sendbuf
8929  00a3               _mqtt_start_retry:
8930  00a3 00            	ds.b	1
8931                     	xdef	_mqtt_start_retry
8932  00a4               _mqtt_sanity_ctr:
8933  00a4 00            	ds.b	1
8934                     	xdef	_mqtt_sanity_ctr
8935  00a5               _mqtt_start_ctr2:
8936  00a5 00            	ds.b	1
8937                     	xdef	_mqtt_start_ctr2
8938  00a6               _mqtt_start_ctr1:
8939  00a6 00            	ds.b	1
8940                     	xdef	_mqtt_start_ctr1
8941  00a7               _mqtt_start_status:
8942  00a7 00            	ds.b	1
8943                     	xdef	_mqtt_start_status
8944  00a8               _mqtt_start:
8945  00a8 00            	ds.b	1
8946                     	xdef	_mqtt_start
8947  00a9               _client_id_text:
8948  00a9 000000000000  	ds.b	26
8949                     	xdef	_client_id_text
8950  00c3               _client_id:
8951  00c3 0000          	ds.b	2
8952                     	xdef	_client_id
8953  00c5               _mqttclient:
8954  00c5 000000000000  	ds.b	44
8955                     	xdef	_mqttclient
8956  00f1               _mqtt_keep_alive:
8957  00f1 0000          	ds.b	2
8958                     	xdef	_mqtt_keep_alive
8959  00f3               _application_message:
8960  00f3 000000        	ds.b	3
8961                     	xdef	_application_message
8962  00f6               _Port_Mqttd:
8963  00f6 0000          	ds.b	2
8964                     	xdef	_Port_Mqttd
8965  00f8               _mqttport:
8966  00f8 0000          	ds.b	2
8967                     	xdef	_mqttport
8968  00fa               _connect_flags:
8969  00fa 00            	ds.b	1
8970                     	xdef	_connect_flags
8971                     	xref	_OctetArray
8972                     	xref	_second_counter
8973  00fb               _time_mark2:
8974  00fb 00000000      	ds.b	4
8975                     	xdef	_time_mark2
8976  00ff               _IpAddr:
8977  00ff 00000000      	ds.b	4
8978                     	xdef	_IpAddr
8979  0103               _Port_Httpd:
8980  0103 0000          	ds.b	2
8981                     	xdef	_Port_Httpd
8982  0105               _mqtt_parse_complete:
8983  0105 00            	ds.b	1
8984                     	xdef	_mqtt_parse_complete
8985  0106               _parse_complete:
8986  0106 00            	ds.b	1
8987                     	xdef	_parse_complete
8988  0107               _mqtt_close_tcp:
8989  0107 00            	ds.b	1
8990                     	xdef	_mqtt_close_tcp
8991  0108               _restart_reboot_step:
8992  0108 00            	ds.b	1
8993                     	xdef	_restart_reboot_step
8994  0109               _restart_request:
8995  0109 00            	ds.b	1
8996                     	xdef	_restart_request
8997  010a               _user_reboot_request:
8998  010a 00            	ds.b	1
8999                     	xdef	_user_reboot_request
9000  010b               _reboot_request:
9001  010b 00            	ds.b	1
9002                     	xdef	_reboot_request
9003  010c               _mac_string:
9004  010c 000000000000  	ds.b	13
9005                     	xdef	_mac_string
9006  0119               _Pending_uip_ethaddr_oct:
9007  0119 000000000000  	ds.b	6
9008                     	xdef	_Pending_uip_ethaddr_oct
9009  011f               _Pending_config_settings:
9010  011f 000000000000  	ds.b	6
9011                     	xdef	_Pending_config_settings
9012  0125               _Pending_devicename:
9013  0125 000000000000  	ds.b	20
9014                     	xdef	_Pending_devicename
9015  0139               _Pending_port:
9016  0139 0000          	ds.b	2
9017                     	xdef	_Pending_port
9018  013b               _Pending_netmask:
9019  013b 00000000      	ds.b	4
9020                     	xdef	_Pending_netmask
9021  013f               _Pending_draddr:
9022  013f 00000000      	ds.b	4
9023                     	xdef	_Pending_draddr
9024  0143               _Pending_hostaddr:
9025  0143 00000000      	ds.b	4
9026                     	xdef	_Pending_hostaddr
9027  0147               _Pending_mqtt_password:
9028  0147 000000000000  	ds.b	11
9029                     	xdef	_Pending_mqtt_password
9030  0152               _Pending_mqtt_username:
9031  0152 000000000000  	ds.b	11
9032                     	xdef	_Pending_mqtt_username
9033  015d               _Pending_mqttport:
9034  015d 0000          	ds.b	2
9035                     	xdef	_Pending_mqttport
9036  015f               _Pending_mqttserveraddr:
9037  015f 00000000      	ds.b	4
9038                     	xdef	_Pending_mqttserveraddr
9039  0163               _stack_error:
9040  0163 00            	ds.b	1
9041                     	xdef	_stack_error
9042  0164               _state_request:
9043  0164 00            	ds.b	1
9044                     	xdef	_state_request
9045  0165               _invert_input:
9046  0165 00            	ds.b	1
9047                     	xdef	_invert_input
9048  0166               _invert_output:
9049  0166 00            	ds.b	1
9050                     	xdef	_invert_output
9051  0167               _IO_8to1_sent:
9052  0167 00            	ds.b	1
9053                     	xdef	_IO_8to1_sent
9054  0168               _IO_16to9_sent:
9055  0168 00            	ds.b	1
9056                     	xdef	_IO_16to9_sent
9057  0169               _IO_8to1_new2:
9058  0169 00            	ds.b	1
9059                     	xdef	_IO_8to1_new2
9060  016a               _IO_16to9_new2:
9061  016a 00            	ds.b	1
9062                     	xdef	_IO_16to9_new2
9063  016b               _IO_8to1_new1:
9064  016b 00            	ds.b	1
9065                     	xdef	_IO_8to1_new1
9066  016c               _IO_16to9_new1:
9067  016c 00            	ds.b	1
9068                     	xdef	_IO_16to9_new1
9069  016d               _IO_8to1:
9070  016d 00            	ds.b	1
9071                     	xdef	_IO_8to1
9072  016e               _IO_16to9:
9073  016e 00            	ds.b	1
9074                     	xdef	_IO_16to9
9075                     .eeprom:	section	.data
9076  4000               _stored_devicename:
9077  4000 000000000000  	ds.b	20
9078                     	xdef	_stored_devicename
9079  4014               _stored_IO_8to1:
9080  4014 00            	ds.b	1
9081                     	xdef	_stored_IO_8to1
9082  4015               _stored_unused1:
9083  4015 00            	ds.b	1
9084                     	xdef	_stored_unused1
9085  4016               _stored_unused2:
9086  4016 00            	ds.b	1
9087                     	xdef	_stored_unused2
9088  4017               _stored_uip_ethaddr_oct:
9089  4017 000000000000  	ds.b	6
9090                     	xdef	_stored_uip_ethaddr_oct
9091  401d               _stored_port:
9092  401d 0000          	ds.b	2
9093                     	xdef	_stored_port
9094  401f               _stored_netmask:
9095  401f 00000000      	ds.b	4
9096                     	xdef	_stored_netmask
9097  4023               _stored_draddr:
9098  4023 00000000      	ds.b	4
9099                     	xdef	_stored_draddr
9100  4027               _stored_hostaddr:
9101  4027 00000000      	ds.b	4
9102                     	xdef	_stored_hostaddr
9103  402b               _magic1:
9104  402b 00            	ds.b	1
9105                     	xdef	_magic1
9106  402c               _magic2:
9107  402c 00            	ds.b	1
9108                     	xdef	_magic2
9109  402d               _magic3:
9110  402d 00            	ds.b	1
9111                     	xdef	_magic3
9112  402e               _magic4:
9113  402e 00            	ds.b	1
9114                     	xdef	_magic4
9115  402f               _stored_mqttport:
9116  402f 0000          	ds.b	2
9117                     	xdef	_stored_mqttport
9118  4031               _stored_mqttserveraddr:
9119  4031 00000000      	ds.b	4
9120                     	xdef	_stored_mqttserveraddr
9121  4035               _stored_mqtt_username:
9122  4035 000000000000  	ds.b	11
9123                     	xdef	_stored_mqtt_username
9124  4040               _stored_mqtt_password:
9125  4040 000000000000  	ds.b	11
9126                     	xdef	_stored_mqtt_password
9127  404b               _stored_IO_16to9:
9128  404b 00            	ds.b	1
9129                     	xdef	_stored_IO_16to9
9130  404c               _stored_config_settings:
9131  404c 000000000000  	ds.b	6
9132                     	xdef	_stored_config_settings
9133                     	xdef	_stack_limit2
9134                     	xdef	_stack_limit1
9135                     	xref	_mqtt_disconnect
9136                     	xref	_mqtt_subscribe
9137                     	xref	_mqtt_publish
9138                     	xref	_mqtt_connect
9139                     	xref	_mqtt_init
9140                     	xref	_strlen
9141                     	xref	_strcat
9142                     	xref	_wait_timer
9143                     	xref	_arp_timer_expired
9144                     	xref	_periodic_timer_expired
9145                     	xref	_clock_init
9146                     	xref	_LEDcontrol
9147                     	xref	_gpio_init
9148                     	xref	_check_mqtt_server_arp_entry
9149                     	xref	_uip_arp_timer
9150                     	xref	_uip_arp_out
9151                     	xref	_uip_arp_arpin
9152                     	xref	_uip_arp_init
9153                     	xref	_uip_ethaddr
9154                     	xref	_uip_mqttserveraddr
9155                     	xref	_uip_draddr
9156                     	xref	_uip_netmask
9157                     	xref	_uip_hostaddr
9158                     	xref	_uip_process
9159                     	xref	_uip_conns
9160                     	xref	_uip_conn
9161                     	xref	_uip_len
9162                     	xref	_uip_appdata
9163                     	xref	_htons
9164                     	xref	_uip_connect
9165                     	xref	_uip_buf
9166                     	xref	_uip_init
9167                     	xref	_GpioSetPin
9168                     	xref	_HttpDInit
9169                     	xref	_emb_itoa
9170                     	xref	_Enc28j60Send
9171                     	xref	_Enc28j60Receive
9172                     	xref	_Enc28j60Init
9173                     	xref	_spi_init
9174                     	xdef	_publish_pinstate_all
9175                     	xdef	_publish_pinstate
9176                     	xdef	_publish_outbound
9177                     	xdef	_publish_callback
9178                     	xdef	_mqtt_sanity_check
9179                     	xdef	_mqtt_startup
9180                     	xdef	_debugflash
9181                     	xdef	_fastflash
9182                     	xdef	_oneflash
9183                     	xdef	_reboot
9184                     	xdef	_restart
9185                     	xdef	_check_restart_reboot
9186                     	xdef	_check_reset_button
9187                     	xdef	_write_output_registers
9188                     	xdef	_read_input_registers
9189                     	xdef	_check_runtime_changes
9190                     	xdef	_update_mac_string
9191                     	xdef	_check_eeprom_settings
9192                     	xdef	_unlock_eeprom
9193                     	xdef	_main
9194                     	switch	.const
9195  9e7b               L5242:
9196  9e7b 2f7374617465  	dc.b	"/state",0
9197  9e82               L7632:
9198  9e82 2f6f75745f6f  	dc.b	"/out_off",0
9199  9e8b               L3632:
9200  9e8b 2f6f75745f6f  	dc.b	"/out_on",0
9201  9e93               L5532:
9202  9e93 2f696e5f6f66  	dc.b	"/in_off",0
9203  9e9b               L1532:
9204  9e9b 2f696e5f6f6e  	dc.b	"/in_on",0
9205  9ea2               L5302:
9206  9ea2 6f6e6c696e65  	dc.b	"online",0
9207  9ea9               L5202:
9208  9ea9 2f7374617465  	dc.b	"/state-req",0
9209  9eb4               L5102:
9210  9eb4 2f6f666600    	dc.b	"/off",0
9211  9eb9               L5002:
9212  9eb9 2f6f6e00      	dc.b	"/on",0
9213  9ebd               L1771:
9214  9ebd 6f66666c696e  	dc.b	"offline",0
9215  9ec5               L7671:
9216  9ec5 2f7374617475  	dc.b	"/status",0
9217                     	xref.b	c_lreg
9237                     	xref	c_ladc
9238                     	xref	c_lcmp
9239                     	xref	c_ltor
9240                     	xref	c_eewrw
9241                     	xref	c_eewrc
9242                     	end
