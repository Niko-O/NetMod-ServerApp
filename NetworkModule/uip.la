   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     	switch	.data
  19  000a               _uip_ethaddr:
  20  000a 01            	dc.b	1
  21  000b 02            	dc.b	2
  22  000c 03            	dc.b	3
  23  000d 04            	dc.b	4
  24  000e 05            	dc.b	5
  25  000f 06            	dc.b	6
  64                     ; 176 void uip_setipid(uint16_t id)
  64                     ; 177 {
  66                     .text:	section	.text,new
  67                     _uip_setipid:
  71                     ; 178   ipid = id;
  73                     	ldw	L11_ipid,x
  74                     ; 179 }
  77                     	ret	
 120                     ; 230 void uip_add32(uint8_t *op32, uint16_t op16)
 120                     ; 231 {
 121                     .text:	section	.text,new
 122  e348               _uip_add32:
 124  e348 89            	pushw	x
 125  e349 89            	pushw	x
 126       00000002      OFST:	set	2
 129                     ; 232   uip_acc32[3] = (uint8_t)(op32[3] + (op16 & 0xff));
 131  e34a 7b08          	ld	a,(OFST+6,sp)
 132  e34c eb03          	add	a,(3,x)
 133  e34e c702bc        	ld	_uip_acc32+3,a
 134                     ; 233   uip_acc32[2] = (uint8_t)(op32[2] + (op16 >> 8));
 136  e351 e602          	ld	a,(2,x)
 137  e353 1b07          	add	a,(OFST+5,sp)
 138  e355 c702bb        	ld	_uip_acc32+2,a
 139                     ; 234   uip_acc32[1] = op32[1];
 141  e358 e601          	ld	a,(1,x)
 142  e35a c702ba        	ld	_uip_acc32+1,a
 143                     ; 235   uip_acc32[0] = op32[0];
 145  e35d f6            	ld	a,(x)
 146  e35e c702b9        	ld	_uip_acc32,a
 147                     ; 237   if (uip_acc32[2] < (op16 >> 8)) {
 149  e361 4f            	clr	a
 150  e362 1e07          	ldw	x,(OFST+5,sp)
 151  e364 01            	rrwa	x,a
 152  e365 c602bb        	ld	a,_uip_acc32+2
 153  e368 905f          	clrw	y
 154  e36a 9097          	ld	yl,a
 155  e36c 90bf07        	ldw	c_y,y
 156  e36f b307          	cpw	x,c_y
 157  e371 230a          	jrule	L56
 158                     ; 238     ++uip_acc32[1];
 160  e373 725c02ba      	inc	_uip_acc32+1
 161                     ; 239     if (uip_acc32[1] == 0) {
 163  e377 2604          	jrne	L56
 164                     ; 240       ++uip_acc32[0];
 166  e379 725c02b9      	inc	_uip_acc32
 167  e37d               L56:
 168                     ; 244   if (uip_acc32[3] < (op16 & 0xff)) {
 170  e37d c602bc        	ld	a,_uip_acc32+3
 171  e380 5f            	clrw	x
 172  e381 97            	ld	xl,a
 173  e382 1f01          	ldw	(OFST-1,sp),x
 175  e384 5f            	clrw	x
 176  e385 7b08          	ld	a,(OFST+6,sp)
 177  e387 02            	rlwa	x,a
 178  e388 1301          	cpw	x,(OFST-1,sp)
 179  e38a 2310          	jrule	L17
 180                     ; 245     ++uip_acc32[2];
 182  e38c 725c02bb      	inc	_uip_acc32+2
 183                     ; 246     if (uip_acc32[2] == 0) {
 185  e390 260a          	jrne	L17
 186                     ; 247       ++uip_acc32[1];
 188  e392 725c02ba      	inc	_uip_acc32+1
 189                     ; 248       if (uip_acc32[1] == 0) {
 191  e396 2604          	jrne	L17
 192                     ; 249         ++uip_acc32[0];
 194  e398 725c02b9      	inc	_uip_acc32
 195  e39c               L17:
 196                     ; 253 }
 199  e39c 5b04          	addw	sp,#4
 200  e39e 81            	ret	
 276                     ; 260 static uint16_t chksum(uint16_t sum, const uint8_t *data, uint16_t len)
 276                     ; 261 {
 277                     .text:	section	.text,new
 278  e39f               L77_chksum:
 280  e39f 89            	pushw	x
 281  e3a0 5206          	subw	sp,#6
 282       00000006      OFST:	set	6
 285                     ; 266   dataptr = data;
 287  e3a2 1e0b          	ldw	x,(OFST+5,sp)
 288  e3a4 1f05          	ldw	(OFST-1,sp),x
 290                     ; 267   last_byte = data + len - 1;
 292  e3a6 72fb0d        	addw	x,(OFST+7,sp)
 293  e3a9 5a            	decw	x
 294  e3aa 1f01          	ldw	(OFST-5,sp),x
 297  e3ac 1e05          	ldw	x,(OFST-1,sp)
 298  e3ae 2020          	jra	L141
 299  e3b0               L531:
 300                     ; 270     t = (dataptr[0] << 8) + dataptr[1];
 302  e3b0 f6            	ld	a,(x)
 303  e3b1 5f            	clrw	x
 304  e3b2 97            	ld	xl,a
 305  e3b3 1605          	ldw	y,(OFST-1,sp)
 306  e3b5 4f            	clr	a
 307  e3b6 90eb01        	add	a,(1,y)
 308  e3b9 2401          	jrnc	L21
 309  e3bb 5c            	incw	x
 310  e3bc               L21:
 311  e3bc 02            	rlwa	x,a
 312  e3bd 1f03          	ldw	(OFST-3,sp),x
 314                     ; 271     sum += t;
 316  e3bf 72fb07        	addw	x,(OFST+1,sp)
 317                     ; 272     if (sum < t) sum++; /* carry */
 319  e3c2 1303          	cpw	x,(OFST-3,sp)
 320  e3c4 2401          	jruge	L541
 323  e3c6 5c            	incw	x
 324  e3c7               L541:
 325  e3c7 1f07          	ldw	(OFST+1,sp),x
 326                     ; 273     dataptr += 2;
 328  e3c9 1e05          	ldw	x,(OFST-1,sp)
 329  e3cb 1c0002        	addw	x,#2
 330  e3ce 1f05          	ldw	(OFST-1,sp),x
 332  e3d0               L141:
 333                     ; 269   while (dataptr < last_byte) { /* At least two more bytes */
 335  e3d0 1301          	cpw	x,(OFST-5,sp)
 336  e3d2 25dc          	jrult	L531
 337                     ; 276   if (dataptr == last_byte) {
 339  e3d4 2612          	jrne	L741
 340                     ; 277     t = (dataptr[0] << 8) + 0;
 342  e3d6 f6            	ld	a,(x)
 343  e3d7 97            	ld	xl,a
 344  e3d8 4f            	clr	a
 345  e3d9 02            	rlwa	x,a
 346  e3da 1f03          	ldw	(OFST-3,sp),x
 348                     ; 278     sum += t;
 350  e3dc 72fb07        	addw	x,(OFST+1,sp)
 351  e3df 1f07          	ldw	(OFST+1,sp),x
 352                     ; 279     if (sum < t) sum++; /* carry */
 354  e3e1 1303          	cpw	x,(OFST-3,sp)
 355  e3e3 2403          	jruge	L741
 358  e3e5 5c            	incw	x
 359  e3e6 1f07          	ldw	(OFST+1,sp),x
 360  e3e8               L741:
 361                     ; 282   return sum;
 363  e3e8 1e07          	ldw	x,(OFST+1,sp)
 366  e3ea 5b08          	addw	sp,#8
 367  e3ec 81            	ret	
 411                     ; 287 uint16_t uip_chksum(uint16_t *data, uint16_t len)
 411                     ; 288 {
 412                     .text:	section	.text,new
 413                     _uip_chksum:
 415                     	pushw	x
 416       00000000      OFST:	set	0
 419                     ; 289   return htons(chksum(0, (uint8_t *)data, len));
 421                     	ldw	x,(OFST+5,sp)
 422                     	pushw	x
 423                     	ldw	x,(OFST+3,sp)
 424                     	pushw	x
 425                     	clrw	x
 426                     	call	L77_chksum
 428                     	addw	sp,#4
 429                     	call	_htons
 433                     	addw	sp,#2
 434                     	ret	
 469                     ; 295 uint16_t uip_ipchksum(void)
 469                     ; 296 {
 470                     .text:	section	.text,new
 471  e3ed               _uip_ipchksum:
 473  e3ed 89            	pushw	x
 474       00000002      OFST:	set	2
 477                     ; 299   sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 479  e3ee ae0014        	ldw	x,#20
 480  e3f1 89            	pushw	x
 481  e3f2 ae0375        	ldw	x,#_uip_buf+14
 482  e3f5 89            	pushw	x
 483  e3f6 5f            	clrw	x
 484  e3f7 cde39f        	call	L77_chksum
 486  e3fa 5b04          	addw	sp,#4
 487  e3fc 1f01          	ldw	(OFST-1,sp),x
 489                     ; 301   return (sum == 0) ? 0xffff : htons(sum);
 491  e3fe 2603          	jrne	L62
 492  e400 5a            	decw	x
 493  e401 2003          	jra	L03
 494  e403               L62:
 495  e403 cdee95        	call	_htons
 497  e406               L03:
 500  e406 5b02          	addw	sp,#2
 501  e408 81            	ret	
 550                     ; 307 static uint16_t upper_layer_chksum(uint8_t proto)
 550                     ; 308 {
 551                     .text:	section	.text,new
 552  e409               L702_upper_layer_chksum:
 554  e409 88            	push	a
 555  e40a 5204          	subw	sp,#4
 556       00000004      OFST:	set	4
 559                     ; 312   upper_layer_len = (((uint16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 561  e40c c60377        	ld	a,_uip_buf+16
 562  e40f 5f            	clrw	x
 563  e410 97            	ld	xl,a
 564  e411 4f            	clr	a
 565  e412 cb0378        	add	a,_uip_buf+17
 566  e415 2401          	jrnc	L63
 567  e417 5c            	incw	x
 568  e418               L63:
 569  e418 02            	rlwa	x,a
 570  e419 1d0014        	subw	x,#20
 571  e41c 1f01          	ldw	(OFST-3,sp),x
 573                     ; 317   sum = upper_layer_len + proto;
 575  e41e 5f            	clrw	x
 576  e41f 7b05          	ld	a,(OFST+1,sp)
 577  e421 97            	ld	xl,a
 578  e422 72fb01        	addw	x,(OFST-3,sp)
 579  e425 1f03          	ldw	(OFST-1,sp),x
 581                     ; 319   sum = chksum(sum, (uint8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 583  e427 ae0008        	ldw	x,#8
 584  e42a 89            	pushw	x
 585  e42b ae0381        	ldw	x,#_uip_buf+26
 586  e42e 89            	pushw	x
 587  e42f 1e07          	ldw	x,(OFST+3,sp)
 588  e431 cde39f        	call	L77_chksum
 590  e434 5b04          	addw	sp,#4
 591  e436 1f03          	ldw	(OFST-1,sp),x
 593                     ; 322   sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN], upper_layer_len);
 595  e438 1e01          	ldw	x,(OFST-3,sp)
 596  e43a 89            	pushw	x
 597  e43b ae0389        	ldw	x,#_uip_buf+34
 598  e43e 89            	pushw	x
 599  e43f 1e07          	ldw	x,(OFST+3,sp)
 600  e441 cde39f        	call	L77_chksum
 602  e444 5b04          	addw	sp,#4
 603  e446 1f03          	ldw	(OFST-1,sp),x
 605                     ; 324   return (sum == 0) ? 0xffff : htons(sum);
 607  e448 2603          	jrne	L44
 608  e44a 5a            	decw	x
 609  e44b 2003          	jra	L64
 610  e44d               L44:
 611  e44d cdee95        	call	_htons
 613  e450               L64:
 616  e450 5b05          	addw	sp,#5
 617  e452 81            	ret	
 641                     ; 329 uint16_t uip_tcpchksum(void)
 641                     ; 330 {
 642                     .text:	section	.text,new
 643  e453               _uip_tcpchksum:
 647                     ; 331   return upper_layer_chksum(UIP_PROTO_TCP);
 649  e453 a606          	ld	a,#6
 653  e455 cce409        	jp	L702_upper_layer_chksum
 679                     ; 337 void uip_init(void)
 679                     ; 338 {
 680                     .text:	section	.text,new
 681  e458               _uip_init:
 685                     ; 339   for (c = 0; c < UIP_LISTENPORTS; ++c) uip_listenports[c] = 0;
 687  e458 4f            	clr	a
 688  e459 c70299        	ld	L73_c,a
 689  e45c               L152:
 692  e45c 5f            	clrw	x
 693  e45d 97            	ld	xl,a
 694  e45e 58            	sllw	x
 695  e45f 905f          	clrw	y
 696  e461 df02a0        	ldw	(_uip_listenports,x),y
 699  e464 725c0299      	inc	L73_c
 702  e468 c60299        	ld	a,L73_c
 703  e46b a102          	cp	a,#2
 704  e46d 25ed          	jrult	L152
 705                     ; 340   for (c = 0; c < UIP_CONNS; ++c) uip_conns[c].tcpstateflags = UIP_CLOSED;
 707  e46f 4f            	clr	a
 708  e470 c70299        	ld	L73_c,a
 709  e473               L752:
 712  e473 97            	ld	xl,a
 713  e474 a629          	ld	a,#41
 714  e476 42            	mul	x,a
 715  e477 724f02d6      	clr	(_uip_conns+25,x)
 718  e47b 725c0299      	inc	L73_c
 721  e47f c60299        	ld	a,L73_c
 722  e482 a104          	cp	a,#4
 723  e484 25ed          	jrult	L752
 724                     ; 347 }
 727  e486 81            	ret	
1028                     ; 357 struct uip_conn *
1028                     ; 358 uip_connect(uip_ipaddr_t *ripaddr, uint16_t rport, uint16_t lport)
1028                     ; 359 {
1029                     .text:	section	.text,new
1030  e487               _uip_connect:
1032  e487 89            	pushw	x
1033  e488 5204          	subw	sp,#4
1034       00000004      OFST:	set	4
1037                     ; 363   conn = 0;
1039  e48a 5f            	clrw	x
1040  e48b 1f03          	ldw	(OFST-1,sp),x
1042                     ; 364   for(c = 0; c < UIP_CONNS; ++c) {
1044  e48d 4f            	clr	a
1045  e48e c70299        	ld	L73_c,a
1046  e491               L144:
1047                     ; 365     cconn = &uip_conns[c];
1049  e491 97            	ld	xl,a
1050  e492 a629          	ld	a,#41
1051  e494 42            	mul	x,a
1052  e495 1c02bd        	addw	x,#_uip_conns
1053  e498 1f01          	ldw	(OFST-3,sp),x
1055                     ; 366     if(cconn->tcpstateflags == UIP_CLOSED) {
1057  e49a e619          	ld	a,(25,x)
1058  e49c 2604          	jrne	L744
1059                     ; 367       conn = cconn;
1061  e49e 1f03          	ldw	(OFST-1,sp),x
1063                     ; 368       break;
1065  e4a0 2021          	jra	L544
1066  e4a2               L744:
1067                     ; 370     if(cconn->tcpstateflags == UIP_TIME_WAIT) {
1069  e4a2 a107          	cp	a,#7
1070  e4a4 2612          	jrne	L154
1071                     ; 371       if(conn == 0 ||
1071                     ; 372 	 cconn->timer > conn->timer) {
1073  e4a6 1e03          	ldw	x,(OFST-1,sp)
1074  e4a8 270a          	jreq	L554
1076  e4aa 1e01          	ldw	x,(OFST-3,sp)
1077  e4ac e61a          	ld	a,(26,x)
1078  e4ae 1e03          	ldw	x,(OFST-1,sp)
1079  e4b0 e11a          	cp	a,(26,x)
1080  e4b2 2304          	jrule	L154
1081  e4b4               L554:
1082                     ; 373 	conn = cconn;
1084  e4b4 1e01          	ldw	x,(OFST-3,sp)
1085  e4b6 1f03          	ldw	(OFST-1,sp),x
1087  e4b8               L154:
1088                     ; 364   for(c = 0; c < UIP_CONNS; ++c) {
1090  e4b8 725c0299      	inc	L73_c
1093  e4bc c60299        	ld	a,L73_c
1094  e4bf a104          	cp	a,#4
1095  e4c1 25ce          	jrult	L144
1096  e4c3               L544:
1097                     ; 378   if(conn == 0) return 0;
1099  e4c3 1e03          	ldw	x,(OFST-1,sp)
1100  e4c5 2603          	jrne	L754
1103  e4c7 5f            	clrw	x
1105  e4c8 2053          	jra	L26
1106  e4ca               L754:
1107                     ; 380   conn->tcpstateflags = UIP_SYN_SENT;
1109  e4ca a602          	ld	a,#2
1110  e4cc e719          	ld	(25,x),a
1111                     ; 382   conn->snd_nxt[0] = iss[0];
1113  e4ce c6029a        	ld	a,L53_iss
1114  e4d1 e70c          	ld	(12,x),a
1115                     ; 383   conn->snd_nxt[1] = iss[1];
1117  e4d3 c6029b        	ld	a,L53_iss+1
1118  e4d6 e70d          	ld	(13,x),a
1119                     ; 384   conn->snd_nxt[2] = iss[2];
1121  e4d8 c6029c        	ld	a,L53_iss+2
1122  e4db e70e          	ld	(14,x),a
1123                     ; 385   conn->snd_nxt[3] = iss[3];
1125  e4dd c6029d        	ld	a,L53_iss+3
1126  e4e0 e70f          	ld	(15,x),a
1127                     ; 387   conn->initialmss = conn->mss = UIP_TCP_MSS;
1129  e4e2 90ae01b8      	ldw	y,#440
1130  e4e6 ef12          	ldw	(18,x),y
1131  e4e8 1603          	ldw	y,(OFST-1,sp)
1132  e4ea ee12          	ldw	x,(18,x)
1133  e4ec 90ef14        	ldw	(20,y),x
1134                     ; 389   conn->len = 1;   /* TCP length of the SYN is one. */
1136  e4ef 93            	ldw	x,y
1137  e4f0 90ae0001      	ldw	y,#1
1138  e4f4 ef10          	ldw	(16,x),y
1139                     ; 390   conn->nrtx = 0;
1141  e4f6 6f1b          	clr	(27,x)
1142                     ; 391   conn->timer = 1; /* Send the SYN next time around. */
1144  e4f8 a601          	ld	a,#1
1145  e4fa e71a          	ld	(26,x),a
1146                     ; 392   conn->rto = UIP_RTO;
1148  e4fc a603          	ld	a,#3
1149  e4fe e718          	ld	(24,x),a
1150                     ; 393   conn->sa = 0;
1152  e500 6f16          	clr	(22,x)
1153                     ; 394   conn->sv = 16;   /* Initial value of the RTT variance. */
1155  e502 a610          	ld	a,#16
1156  e504 e717          	ld	(23,x),a
1157                     ; 395   conn->lport = lport;
1159  e506 160b          	ldw	y,(OFST+7,sp)
1160  e508 ef04          	ldw	(4,x),y
1161                     ; 396   conn->rport = rport;
1163  e50a 1609          	ldw	y,(OFST+5,sp)
1164  e50c ef06          	ldw	(6,x),y
1165                     ; 397   uip_ipaddr_copy(&conn->ripaddr, ripaddr);
1167  e50e 1e05          	ldw	x,(OFST+1,sp)
1168  e510 1603          	ldw	y,(OFST-1,sp)
1169  e512 fe            	ldw	x,(x)
1170  e513 90ff          	ldw	(y),x
1173  e515 1e05          	ldw	x,(OFST+1,sp)
1174  e517 ee02          	ldw	x,(2,x)
1175  e519 90ef02        	ldw	(2,y),x
1176                     ; 398   return conn;
1178  e51c 93            	ldw	x,y
1180  e51d               L26:
1182  e51d 5b06          	addw	sp,#6
1183  e51f 81            	ret	
1206                     ; 404 void uip_init_stats(void)
1206                     ; 405 {
1207                     .text:	section	.text,new
1208                     _uip_init_stats:
1212                     ; 431 }
1215                     	ret	
1249                     ; 435 void uip_unlisten(uint16_t port)
1249                     ; 436 {
1250                     .text:	section	.text,new
1251                     _uip_unlisten:
1253                     	pushw	x
1254       00000000      OFST:	set	0
1257                     ; 437   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1259                     	clr	a
1260                     	ld	L73_c,a
1261                     L115:
1262                     ; 438     if (uip_listenports[c] == port) {
1264                     	clrw	x
1265                     	ld	xl,a
1266                     	sllw	x
1267                     	ldw	x,(_uip_listenports,x)
1268                     	cpw	x,(OFST+1,sp)
1269                     	jrne	L715
1270                     ; 439       uip_listenports[c] = 0;
1272                     	clrw	x
1273                     	ld	xl,a
1274                     	sllw	x
1275                     	clrw	y
1276                     	ldw	(_uip_listenports,x),y
1277                     ; 440       return;
1279                     	jra	L07
1280                     L715:
1281                     ; 437   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1283                     	inc	L73_c
1286                     	ld	a,L73_c
1287                     	cp	a,#2
1288                     	jrult	L115
1289                     ; 443 }
1290                     L07:
1293                     	popw	x
1294                     	ret	
1328                     ; 447 void uip_listen(uint16_t port)
1328                     ; 448 {
1329                     .text:	section	.text,new
1330  e520               _uip_listen:
1332  e520 89            	pushw	x
1333       00000000      OFST:	set	0
1336                     ; 449   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1338  e521 4f            	clr	a
1339  e522 c70299        	ld	L73_c,a
1340  e525               L535:
1341                     ; 450     if (uip_listenports[c] == 0) {
1343  e525 5f            	clrw	x
1344  e526 97            	ld	xl,a
1345  e527 58            	sllw	x
1346  e528 d602a1        	ld	a,(_uip_listenports+1,x)
1347  e52b da02a0        	or	a,(_uip_listenports,x)
1348  e52e 2607          	jrne	L345
1349                     ; 451       uip_listenports[c] = port;
1351  e530 1601          	ldw	y,(OFST+1,sp)
1352  e532 df02a0        	ldw	(_uip_listenports,x),y
1353                     ; 452       return;
1355  e535 200b          	jra	L47
1356  e537               L345:
1357                     ; 449   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1359  e537 725c0299      	inc	L73_c
1362  e53b c60299        	ld	a,L73_c
1363  e53e a102          	cp	a,#2
1364  e540 25e3          	jrult	L535
1365                     ; 455 }
1366  e542               L47:
1369  e542 85            	popw	x
1370  e543 81            	ret	
1405                     ; 459 static void uip_add_rcv_nxt(uint16_t n)
1405                     ; 460 {
1406                     .text:	section	.text,new
1407  e544               L545_uip_add_rcv_nxt:
1411                     ; 461   uip_add32(uip_conn->rcv_nxt, n);
1413  e544 89            	pushw	x
1414  e545 ce0361        	ldw	x,_uip_conn
1415  e548 1c0008        	addw	x,#8
1416  e54b cde348        	call	_uip_add32
1418  e54e 85            	popw	x
1419                     ; 462   uip_conn->rcv_nxt[0] = uip_acc32[0];
1421  e54f ce0361        	ldw	x,_uip_conn
1422  e552 c602b9        	ld	a,_uip_acc32
1423  e555 e708          	ld	(8,x),a
1424                     ; 463   uip_conn->rcv_nxt[1] = uip_acc32[1];
1426  e557 c602ba        	ld	a,_uip_acc32+1
1427  e55a e709          	ld	(9,x),a
1428                     ; 464   uip_conn->rcv_nxt[2] = uip_acc32[2];
1430  e55c c602bb        	ld	a,_uip_acc32+2
1431  e55f e70a          	ld	(10,x),a
1432                     ; 465   uip_conn->rcv_nxt[3] = uip_acc32[3];
1434  e561 c602bc        	ld	a,_uip_acc32+3
1435  e564 e70b          	ld	(11,x),a
1436                     ; 466 }
1439  e566 81            	ret	
1511                     ; 470 void uip_process(uint8_t flag)
1511                     ; 471 {
1512                     .text:	section	.text,new
1513  e567               _uip_process:
1515  e567 88            	push	a
1516  e568 5205          	subw	sp,#5
1517       00000005      OFST:	set	5
1520                     ; 472   register struct uip_conn *uip_connr = uip_conn;
1522  e56a ce0361        	ldw	x,_uip_conn
1523  e56d 1f04          	ldw	(OFST-1,sp),x
1525                     ; 486   uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
1527  e56f ae039d        	ldw	x,#_uip_buf+54
1528  e572 cf0365        	ldw	_uip_appdata,x
1529  e575 cf02a6        	ldw	_uip_sappdata,x
1530                     ; 491   if (flag == UIP_POLL_REQUEST) {
1532  e578 a103          	cp	a,#3
1533  e57a 2614          	jrne	L107
1534                     ; 492     if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED && !uip_outstanding(uip_connr)) {
1536  e57c 1e04          	ldw	x,(OFST-1,sp)
1537  e57e e619          	ld	a,(25,x)
1538  e580 a40f          	and	a,#15
1539  e582 a103          	cp	a,#3
1540  e584 2703ccee8a    	jrne	L356
1542  e589 e611          	ld	a,(17,x)
1543  e58b ea10          	or	a,(16,x)
1544                     ; 493       uip_flags = UIP_POLL;
1545                     ; 494       UIP_APPCALL(); // Check for any data to be sent
1547                     ; 495       goto appsend;
1549  e58d cce659        	jp	LC001
1550  e590               L107:
1551                     ; 503   else if (flag == UIP_TIMER) {
1553  e590 7b06          	ld	a,(OFST+1,sp)
1554  e592 a102          	cp	a,#2
1555  e594 2703cce679    	jrne	L507
1556                     ; 505     if (++iss[3] == 0) {
1558  e599 725c029d      	inc	L53_iss+3
1559  e59d 2610          	jrne	L117
1560                     ; 506       if (++iss[2] == 0) {
1562  e59f 725c029c      	inc	L53_iss+2
1563  e5a3 260a          	jrne	L117
1564                     ; 507         if (++iss[1] == 0) {
1566  e5a5 725c029b      	inc	L53_iss+1
1567  e5a9 2604          	jrne	L117
1568                     ; 508           ++iss[0];
1570  e5ab 725c029a      	inc	L53_iss
1571  e5af               L117:
1572                     ; 514     uip_len = 0;
1574  e5af 5f            	clrw	x
1575  e5b0 cf0363        	ldw	_uip_len,x
1576                     ; 515     uip_slen = 0;
1578  e5b3 cf02a4        	ldw	_uip_slen,x
1579                     ; 520     if (uip_connr->tcpstateflags == UIP_TIME_WAIT || uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
1581  e5b6 1e04          	ldw	x,(OFST-1,sp)
1582  e5b8 e619          	ld	a,(25,x)
1583  e5ba a107          	cp	a,#7
1584  e5bc 2704          	jreq	L127
1586  e5be a105          	cp	a,#5
1587  e5c0 260d          	jrne	L717
1588  e5c2               L127:
1589                     ; 521       ++(uip_connr->timer);
1591  e5c2 6c1a          	inc	(26,x)
1592                     ; 522       if (uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
1594  e5c4 e61a          	ld	a,(26,x)
1595  e5c6 a178          	cp	a,#120
1596  e5c8 26bc          	jrne	L356
1597                     ; 523         uip_connr->tcpstateflags = UIP_CLOSED;
1599  e5ca 6f19          	clr	(25,x)
1600  e5cc ccee8a        	jra	L356
1601  e5cf               L717:
1602                     ; 526     else if (uip_connr->tcpstateflags != UIP_CLOSED) {
1604  e5cf e619          	ld	a,(25,x)
1605  e5d1 27f9          	jreq	L356
1606                     ; 530       if (uip_outstanding(uip_connr)) {
1608  e5d3 e611          	ld	a,(17,x)
1609  e5d5 ea10          	or	a,(16,x)
1610  e5d7 277a          	jreq	L137
1611                     ; 531         if (uip_connr->timer-- == 0) {
1613  e5d9 e61a          	ld	a,(26,x)
1614  e5db 6a1a          	dec	(26,x)
1615  e5dd 4d            	tnz	a
1616  e5de 26ec          	jrne	L356
1617                     ; 532           if (uip_connr->nrtx == UIP_MAXRTX
1617                     ; 533 	    || ((uip_connr->tcpstateflags == UIP_SYN_SENT
1617                     ; 534             || uip_connr->tcpstateflags == UIP_SYN_RCVD)
1617                     ; 535             && uip_connr->nrtx == UIP_MAXSYNRTX)) {
1619  e5e0 e61b          	ld	a,(27,x)
1620  e5e2 a108          	cp	a,#8
1621  e5e4 270f          	jreq	L737
1623  e5e6 e619          	ld	a,(25,x)
1624  e5e8 a102          	cp	a,#2
1625  e5ea 2703          	jreq	L147
1627  e5ec 4a            	dec	a
1628  e5ed 2616          	jrne	L537
1629  e5ef               L147:
1631  e5ef e61b          	ld	a,(27,x)
1632  e5f1 a105          	cp	a,#5
1633  e5f3 2610          	jrne	L537
1634  e5f5               L737:
1635                     ; 536             uip_connr->tcpstateflags = UIP_CLOSED;
1637  e5f5 6f19          	clr	(25,x)
1638                     ; 539             uip_flags = UIP_TIMEDOUT;
1640  e5f7 358002b8      	mov	_uip_flags,#128
1641                     ; 540             UIP_APPCALL(); // Timeout call. uip_len was cleared above.
1643  e5fb cdf2bc        	call	_uip_TcpAppHubCall
1645                     ; 543             BUF->flags = TCP_RST | TCP_ACK;
1647  e5fe 35140396      	mov	_uip_buf+47,#20
1648                     ; 544             goto tcp_send_nodata;
1650  e602 ccecc1        	jra	L736
1651  e605               L537:
1652                     ; 548 	  if (uip_connr->nrtx > 4) uip_connr->nrtx = 4;
1654  e605 1e04          	ldw	x,(OFST-1,sp)
1655  e607 e61b          	ld	a,(27,x)
1656  e609 a105          	cp	a,#5
1657  e60b 2504          	jrult	L347
1660  e60d a604          	ld	a,#4
1661  e60f e71b          	ld	(27,x),a
1662  e611               L347:
1663                     ; 549 	  uip_connr->timer = (uint8_t)(UIP_RTO << uip_connr->nrtx);
1665  e611 5f            	clrw	x
1666  e612 97            	ld	xl,a
1667  e613 a603          	ld	a,#3
1668  e615 5d            	tnzw	x
1669  e616 2704          	jreq	L011
1670  e618               L211:
1671  e618 48            	sll	a
1672  e619 5a            	decw	x
1673  e61a 26fc          	jrne	L211
1674  e61c               L011:
1675  e61c 1e04          	ldw	x,(OFST-1,sp)
1676  e61e e71a          	ld	(26,x),a
1677                     ; 550 	  ++(uip_connr->nrtx);
1679  e620 6c1b          	inc	(27,x)
1680                     ; 559           switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
1683  e622 e619          	ld	a,(25,x)
1684  e624 a40f          	and	a,#15
1686                     ; 580             case UIP_FIN_WAIT_1:
1686                     ; 581             case UIP_CLOSING:
1686                     ; 582             case UIP_LAST_ACK:
1686                     ; 583               // In all these states we should retransmit a FINACK.
1686                     ; 584               goto tcp_send_finack;
1687  e626 4a            	dec	a
1688  e627 2603cce97d    	jreq	L106
1689  e62c 4a            	dec	a
1690  e62d 2714          	jreq	L565
1691  e62f 4a            	dec	a
1692  e630 2717          	jreq	L765
1693  e632 4a            	dec	a
1694  e633 2603ccecbd    	jreq	LC004
1695  e638 a002          	sub	a,#2
1696  e63a 27f9          	jreq	LC004
1697  e63c a002          	sub	a,#2
1698  e63e 27f5          	jreq	LC004
1699  e640 ccee8a        	jra	L356
1700  e643               L565:
1701                     ; 565 	    case UIP_SYN_SENT:
1701                     ; 566 	      // In the SYN_SENT state, we retransmit the SYN.
1701                     ; 567 	      BUF->flags = 0;
1703  e643 c70396        	ld	_uip_buf+47,a
1704                     ; 568 	      goto tcp_send_syn;
1706  e646 cce981        	jra	L306
1707  e649               L765:
1708                     ; 571             case UIP_ESTABLISHED:
1708                     ; 572               // In the ESTABLISHED state, we call upon the application to do
1708                     ; 573 	      // the actual retransmit after which we jump into the code for
1708                     ; 574 	      // sending out the packet (the apprexmit label).
1708                     ; 575               uip_flags = UIP_REXMIT;
1710  e649 350402b8      	mov	_uip_flags,#4
1711                     ; 576               UIP_APPCALL(); // Call to get old data for retransmit.  uip_len
1713  e64d cdf2bc        	call	_uip_TcpAppHubCall
1715                     ; 578               goto apprexmit;
1717  e650 cced04        	jra	L126
1718                     ; 580             case UIP_FIN_WAIT_1:
1718                     ; 581             case UIP_CLOSING:
1718                     ; 582             case UIP_LAST_ACK:
1718                     ; 583               // In all these states we should retransmit a FINACK.
1718                     ; 584               goto tcp_send_finack;
1720  e653               L137:
1721                     ; 589       else if ((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
1723  e653 e619          	ld	a,(25,x)
1724  e655 a40f          	and	a,#15
1725  e657 a103          	cp	a,#3
1726                     ; 592         uip_flags = UIP_POLL;
1728  e659               LC001:
1729  e659 26e5          	jrne	L356
1731  e65b 350802b8      	mov	_uip_flags,#8
1732                     ; 593         UIP_APPCALL(); // Check for new data to transmit. uip_len was cleared
1735                     ; 595         goto appsend;
1736  e65f               L716:
1741  e65f cdf2bc        	call	_uip_TcpAppHubCall
1742                     ; 1178         appsend:
1742                     ; 1179 
1742                     ; 1180         if (uip_flags & UIP_ABORT) {
1744  e662 720a02b803cc  	btjf	_uip_flags,#5,L3521
1745                     ; 1181           uip_slen = 0;
1747  e66a 5f            	clrw	x
1748  e66b cf02a4        	ldw	_uip_slen,x
1749                     ; 1182           uip_connr->tcpstateflags = UIP_CLOSED;
1751  e66e 1e04          	ldw	x,(OFST-1,sp)
1752                     ; 1183           BUF->flags = TCP_RST | TCP_ACK;
1754  e670 35140396      	mov	_uip_buf+47,#20
1755  e674 6f19          	clr	(25,x)
1756                     ; 1184           goto tcp_send_nodata;
1758  e676 ccecc1        	jra	L736
1759  e679               L507:
1760                     ; 609   if (BUF->vhl != 0x45) { // IP version and header length.
1763  e679 c60375        	ld	a,_uip_buf+14
1764  e67c a145          	cp	a,#69
1765  e67e 26c0          	jrne	L356
1766                     ; 612     goto drop;
1770                     ; 622   if ((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
1772  e680 c60377        	ld	a,_uip_buf+16
1773  e683 5f            	clrw	x
1774  e684 97            	ld	xl,a
1775  e685 4f            	clr	a
1776  e686 cb0378        	add	a,_uip_buf+17
1777  e689 2401          	jrnc	L021
1778  e68b 5c            	incw	x
1779  e68c               L021:
1780  e68c 02            	rlwa	x,a
1781  e68d c30363        	cpw	x,_uip_len
1782  e690 22ae          	jrugt	L356
1783                     ; 623     uip_len = (BUF->len[0] << 8) + BUF->len[1];
1785  e692 c60377        	ld	a,_uip_buf+16
1786  e695 5f            	clrw	x
1787  e696 97            	ld	xl,a
1788  e697 4f            	clr	a
1789  e698 cb0378        	add	a,_uip_buf+17
1790  e69b 2401          	jrnc	L221
1791  e69d 5c            	incw	x
1792  e69e               L221:
1793  e69e c70364        	ld	_uip_len+1,a
1794  e6a1 9f            	ld	a,xl
1795  e6a2 c70363        	ld	_uip_len,a
1797                     ; 628   if ((BUF->ipoffset[0] & 0x3f) != 0 || BUF->ipoffset[1] != 0) {
1799  e6a5 c6037b        	ld	a,_uip_buf+20
1800  e6a8 a53f          	bcp	a,#63
1801  e6aa 2694          	jrne	L356
1803  e6ac c6037c        	ld	a,_uip_buf+21
1804  e6af 268f          	jrne	L356
1805                     ; 635   if (!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
1807  e6b1 ce0385        	ldw	x,_uip_buf+30
1808  e6b4 c302b4        	cpw	x,_uip_hostaddr
1809  e6b7 2687          	jrne	L356
1811  e6b9 ce0387        	ldw	x,_uip_buf+32
1812  e6bc c302b6        	cpw	x,_uip_hostaddr+2
1813  e6bf 2703ccee8a    	jrne	L356
1814                     ; 640   if (uip_ipchksum() != 0xffff) { /* Compute and check the IP header checksum. */
1816  e6c4 cde3ed        	call	_uip_ipchksum
1818  e6c7 5c            	incw	x
1819  e6c8 26f7          	jrne	L356
1820                     ; 643     goto drop;
1824                     ; 646   if (BUF->proto == UIP_PROTO_TCP) {
1826  e6ca c6037e        	ld	a,_uip_buf+23
1827  e6cd a106          	cp	a,#6
1828  e6cf 2609          	jrne	L577
1829                     ; 649     goto tcp_input;
1830                     ; 697   if (uip_tcpchksum() != 0xffff) { /* Compute and check the TCP checksum. */
1833  e6d1 cde453        	call	_uip_tcpchksum
1835  e6d4 5c            	incw	x
1836  e6d5 273f          	jreq	L7101
1837                     ; 700     goto drop;
1841  e6d7 ccee8a        	jra	L356
1842  e6da               L577:
1843                     ; 654   if (BUF->proto != UIP_PROTO_ICMP) { // We only allow ICMP packets from here.
1845  e6da 4a            	dec	a
1846  e6db 26fa          	jrne	L356
1847                     ; 657     goto drop;
1851                     ; 665   if (ICMPBUF->type != ICMP_ECHO) {
1854  e6dd c60389        	ld	a,_uip_buf+34
1855  e6e0 a108          	cp	a,#8
1856  e6e2 26f3          	jrne	L356
1857                     ; 668     goto drop;
1861                     ; 671   ICMPBUF->type = ICMP_ECHO_REPLY;
1863  e6e4 725f0389      	clr	_uip_buf+34
1864                     ; 673   if (ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
1866  e6e8 ce038b        	ldw	x,_uip_buf+36
1867  e6eb a3f7ff        	cpw	x,#63487
1868  e6ee 2505          	jrult	L3001
1869                     ; 674     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
1871  e6f0 1c0801        	addw	x,#2049
1873  e6f3 2003          	jra	L7001
1874  e6f5               L3001:
1875                     ; 677     ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
1877  e6f5 1c0800        	addw	x,#2048
1878  e6f8               L7001:
1879  e6f8 cf038b        	ldw	_uip_buf+36,x
1880                     ; 681   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
1882  e6fb ce0381        	ldw	x,_uip_buf+26
1883  e6fe cf0385        	ldw	_uip_buf+30,x
1886  e701 ce0383        	ldw	x,_uip_buf+28
1887  e704 cf0387        	ldw	_uip_buf+32,x
1888                     ; 682   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
1890  e707 ce02b4        	ldw	x,_uip_hostaddr
1891  e70a cf0381        	ldw	_uip_buf+26,x
1894  e70d ce02b6        	ldw	x,_uip_hostaddr+2
1895  e710 cf0383        	ldw	_uip_buf+28,x
1896                     ; 685   goto send;
1897                     ; 1424   uip_flags = 0;
1899                     ; 1426   return;
1901  e713 ccee8e        	jra	L222
1902  e716               L7101:
1903                     ; 705   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1905  e716 ae02bd        	ldw	x,#_uip_conns
1907  e719 204d          	jra	L5201
1908  e71b               L1201:
1909                     ; 706     if (uip_connr->tcpstateflags != UIP_CLOSED
1909                     ; 707       && BUF->destport == uip_connr->lport
1909                     ; 708       && BUF->srcport == uip_connr->rport
1909                     ; 709       && uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
1911  e71b e619          	ld	a,(25,x)
1912  e71d 2746          	jreq	L1301
1914  e71f 9093          	ldw	y,x
1915  e721 90ee04        	ldw	y,(4,y)
1916  e724 90c3038b      	cpw	y,_uip_buf+36
1917  e728 263b          	jrne	L1301
1919  e72a 9093          	ldw	y,x
1920  e72c 90ee06        	ldw	y,(6,y)
1921  e72f 90c30389      	cpw	y,_uip_buf+34
1922  e733 2630          	jrne	L1301
1924  e735 9093          	ldw	y,x
1925  e737 90fe          	ldw	y,(y)
1926  e739 90c30381      	cpw	y,_uip_buf+26
1927  e73d 2626          	jrne	L1301
1929  e73f 9093          	ldw	y,x
1930  e741 90ee02        	ldw	y,(2,y)
1931  e744 90c30383      	cpw	y,_uip_buf+28
1932  e748 261b          	jrne	L1301
1933                     ; 710       goto found;
1934                     ; 903   found:
1934                     ; 904 
1934                     ; 905   // found will be jumped to if we found an active connection.
1934                     ; 906   uip_conn = uip_connr;
1936  e74a cf0361        	ldw	_uip_conn,x
1937                     ; 907   uip_flags = 0;
1939  e74d 725f02b8      	clr	_uip_flags
1940                     ; 911   if (BUF->flags & TCP_RST) {
1942  e751 7204039603cc  	btjf	_uip_buf+47,#2,L1411
1943                     ; 912     uip_connr->tcpstateflags = UIP_CLOSED;
1945  e759 6f19          	clr	(25,x)
1946                     ; 913     uip_flags = UIP_ABORT;
1948  e75b 352002b8      	mov	_uip_flags,#32
1949                     ; 919     UIP_APPCALL(); // ????
1951  e75f cdf2bc        	call	_uip_TcpAppHubCall
1953                     ; 920     goto drop;
1955  e762 ccee8a        	jra	L356
1956  e765               L1301:
1957                     ; 705   for (uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1]; ++uip_connr) {
1959  e765 1c0029        	addw	x,#41
1960  e768               L5201:
1961  e768 1f04          	ldw	(OFST-1,sp),x
1965  e76a a30338        	cpw	x,#_uip_conns+123
1966  e76d 23ac          	jrule	L1201
1967                     ; 718   if ((BUF->flags & TCP_CTL) != TCP_SYN) {
1969  e76f c60396        	ld	a,_uip_buf+47
1970  e772 a43f          	and	a,#63
1971  e774 a102          	cp	a,#2
1972  e776 2703ccebec    	jrne	L575
1973                     ; 719     goto reset;
1975                     ; 722   tmp16 = BUF->destport;
1977  e77b ce038b        	ldw	x,_uip_buf+36
1978  e77e cf0296        	ldw	L34_tmp16,x
1979                     ; 724   for (c = 0; c < UIP_LISTENPORTS; ++c) {
1981  e781 4f            	clr	a
1982  e782 c70299        	ld	L73_c,a
1983  e785               L5301:
1984                     ; 725     if (tmp16 == uip_listenports[c]) goto found_listen;
1986  e785 5f            	clrw	x
1987  e786 97            	ld	xl,a
1988  e787 58            	sllw	x
1989  e788 9093          	ldw	y,x
1990  e78a 90de02a0      	ldw	y,(_uip_listenports,y)
1991  e78e 90c30296      	cpw	y,L34_tmp16
1992  e792 261b          	jrne	L3401
1994                     ; 787   found_listen:
1994                     ; 788   // found_listen will be jumped to if we matched the incoming packet with a
1994                     ; 789   // connection in LISTEN. In that case we should create a new connection and
1994                     ; 790   // send a SYNACK in return.
1994                     ; 791   // First we check if there are any connections avaliable. Unused connections
1994                     ; 792   // are kept in the same table as used connections, but unused ones have the
1994                     ; 793   // tcpstate set to CLOSED. Also, connections in TIME_WAIT are kept track of
1994                     ; 794   // and we'll use the oldest one if no CLOSED connections are found. Thanks
1994                     ; 795   // to Eddie C. Dost for a very nice algorithm for the TIME_WAIT search.
1994                     ; 796   uip_connr = 0;
1996  e794 5f            	clrw	x
1997  e795 1f04          	ldw	(OFST-1,sp),x
1999                     ; 797   for (c = 0; c < UIP_CONNS; ++c) {
2001  e797 4f            	clr	a
2002  e798 c70299        	ld	L73_c,a
2003  e79b               L5601:
2004                     ; 798     if (uip_conns[c].tcpstateflags == UIP_CLOSED) {
2006  e79b 97            	ld	xl,a
2007  e79c a629          	ld	a,#41
2008  e79e 42            	mul	x,a
2009  e79f d602d6        	ld	a,(_uip_conns+25,x)
2010  e7a2 2703cce84a    	jrne	L3701
2011                     ; 799       uip_connr = &uip_conns[c];
2013  e7a7 1c02bd        	addw	x,#_uip_conns
2014  e7aa 1f04          	ldw	(OFST-1,sp),x
2016                     ; 800       break;
2018  e7ac cce87c        	jra	L1701
2019  e7af               L3401:
2020                     ; 724   for (c = 0; c < UIP_LISTENPORTS; ++c) {
2022  e7af 725c0299      	inc	L73_c
2025  e7b3 c60299        	ld	a,L73_c
2026  e7b6 a102          	cp	a,#2
2027  e7b8 25cb          	jrult	L5301
2029  e7ba ccebec        	jra	L575
2030  e7bd               L5401:
2031                     ; 740   BUF->flags = TCP_RST | TCP_ACK;
2034  e7bd 35140396      	mov	_uip_buf+47,#20
2035                     ; 741   uip_len = UIP_IPTCPH_LEN;
2037  e7c1 ae0028        	ldw	x,#40
2038  e7c4 cf0363        	ldw	_uip_len,x
2039                     ; 742   BUF->tcpoffset = 5 << 4;
2041  e7c7 35500395      	mov	_uip_buf+46,#80
2042                     ; 745   c = BUF->seqno[3];
2044  e7cb 5503900299    	mov	L73_c,_uip_buf+41
2045                     ; 746   BUF->seqno[3] = BUF->ackno[3];
2047  e7d0 5503940390    	mov	_uip_buf+41,_uip_buf+45
2048                     ; 747   BUF->ackno[3] = c;
2050  e7d5 5502990394    	mov	_uip_buf+45,L73_c
2051                     ; 749   c = BUF->seqno[2];
2053  e7da 55038f0299    	mov	L73_c,_uip_buf+40
2054                     ; 750   BUF->seqno[2] = BUF->ackno[2];
2056  e7df 550393038f    	mov	_uip_buf+40,_uip_buf+44
2057                     ; 751   BUF->ackno[2] = c;
2059  e7e4 5502990393    	mov	_uip_buf+44,L73_c
2060                     ; 753   c = BUF->seqno[1];
2062  e7e9 55038e0299    	mov	L73_c,_uip_buf+39
2063                     ; 754   BUF->seqno[1] = BUF->ackno[1];
2065  e7ee 550392038e    	mov	_uip_buf+39,_uip_buf+43
2066                     ; 755   BUF->ackno[1] = c;
2068  e7f3 5502990392    	mov	_uip_buf+43,L73_c
2069                     ; 757   c = BUF->seqno[0];
2071  e7f8 55038d0299    	mov	L73_c,_uip_buf+38
2072                     ; 758   BUF->seqno[0] = BUF->ackno[0];
2074  e7fd 550391038d    	mov	_uip_buf+38,_uip_buf+42
2075                     ; 759   BUF->ackno[0] = c;
2077  e802 5502990391    	mov	_uip_buf+42,L73_c
2078                     ; 764   if (++BUF->ackno[3] == 0) {
2080  e807 725c0394      	inc	_uip_buf+45
2081  e80b 2610          	jrne	L7401
2082                     ; 765     if (++BUF->ackno[2] == 0) {
2084  e80d 725c0393      	inc	_uip_buf+44
2085  e811 260a          	jrne	L7401
2086                     ; 766       if (++BUF->ackno[1] == 0) {
2088  e813 725c0392      	inc	_uip_buf+43
2089  e817 2604          	jrne	L7401
2090                     ; 767         ++BUF->ackno[0];
2092  e819 725c0391      	inc	_uip_buf+42
2093  e81d               L7401:
2094                     ; 773   tmp16 = BUF->srcport;
2096  e81d ce0389        	ldw	x,_uip_buf+34
2097  e820 cf0296        	ldw	L34_tmp16,x
2098                     ; 774   BUF->srcport = BUF->destport;
2100  e823 ce038b        	ldw	x,_uip_buf+36
2101  e826 cf0389        	ldw	_uip_buf+34,x
2102                     ; 775   BUF->destport = tmp16;
2104  e829 ce0296        	ldw	x,L34_tmp16
2105  e82c cf038b        	ldw	_uip_buf+36,x
2106                     ; 778   uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
2108  e82f ce0381        	ldw	x,_uip_buf+26
2109  e832 cf0385        	ldw	_uip_buf+30,x
2112  e835 ce0383        	ldw	x,_uip_buf+28
2113  e838 cf0387        	ldw	_uip_buf+32,x
2114                     ; 779   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
2116  e83b ce02b4        	ldw	x,_uip_hostaddr
2117  e83e cf0381        	ldw	_uip_buf+26,x
2120  e841 ce02b6        	ldw	x,_uip_hostaddr+2
2121  e844 cf0383        	ldw	_uip_buf+28,x
2122                     ; 782   goto tcp_send_noconn;
2124  e847 ccee3b        	jra	L546
2125  e84a               L3701:
2126                     ; 802     if (uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
2128  e84a a107          	cp	a,#7
2129  e84c 2620          	jrne	L5701
2130                     ; 803       if (uip_connr == 0 || uip_conns[c].timer > uip_connr->timer) {
2132  e84e 1e04          	ldw	x,(OFST-1,sp)
2133  e850 2710          	jreq	L1011
2135  e852 c60299        	ld	a,L73_c
2136  e855 97            	ld	xl,a
2137  e856 a629          	ld	a,#41
2138  e858 42            	mul	x,a
2139  e859 d602d7        	ld	a,(_uip_conns+26,x)
2140  e85c 1e04          	ldw	x,(OFST-1,sp)
2141  e85e e11a          	cp	a,(26,x)
2142  e860 230c          	jrule	L5701
2143  e862               L1011:
2144                     ; 804         uip_connr = &uip_conns[c];
2146  e862 c60299        	ld	a,L73_c
2147  e865 97            	ld	xl,a
2148  e866 a629          	ld	a,#41
2149  e868 42            	mul	x,a
2150  e869 1c02bd        	addw	x,#_uip_conns
2151  e86c 1f04          	ldw	(OFST-1,sp),x
2153  e86e               L5701:
2154                     ; 797   for (c = 0; c < UIP_CONNS; ++c) {
2156  e86e 725c0299      	inc	L73_c
2159  e872 c60299        	ld	a,L73_c
2160  e875 a104          	cp	a,#4
2161  e877 2403cce79b    	jrult	L5601
2162  e87c               L1701:
2163                     ; 809   if (uip_connr == 0) {
2165  e87c 1e04          	ldw	x,(OFST-1,sp)
2166  e87e 2603ccee8a    	jreq	L356
2167                     ; 814     goto drop;
2170                     ; 816   uip_conn = uip_connr;
2172  e883 cf0361        	ldw	_uip_conn,x
2173                     ; 819   uip_connr->rto = uip_connr->timer = UIP_RTO;
2175  e886 a603          	ld	a,#3
2176  e888 e71a          	ld	(26,x),a
2177  e88a e718          	ld	(24,x),a
2178                     ; 820   uip_connr->sa = 0;
2180  e88c 6f16          	clr	(22,x)
2181                     ; 821   uip_connr->sv = 4;
2183  e88e 4c            	inc	a
2184  e88f e717          	ld	(23,x),a
2185                     ; 822   uip_connr->nrtx = 0;
2187  e891 6f1b          	clr	(27,x)
2188                     ; 823   uip_connr->lport = BUF->destport;
2190  e893 90ce038b      	ldw	y,_uip_buf+36
2191  e897 ef04          	ldw	(4,x),y
2192                     ; 824   uip_connr->rport = BUF->srcport;
2194  e899 90ce0389      	ldw	y,_uip_buf+34
2195  e89d ef06          	ldw	(6,x),y
2196                     ; 825   uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
2198  e89f 90ce0381      	ldw	y,_uip_buf+26
2199  e8a3 ff            	ldw	(x),y
2202  e8a4 90ce0383      	ldw	y,_uip_buf+28
2203  e8a8 ef02          	ldw	(2,x),y
2204                     ; 826   uip_connr->tcpstateflags = UIP_SYN_RCVD;
2206  e8aa a601          	ld	a,#1
2207  e8ac e719          	ld	(25,x),a
2208                     ; 828   uip_connr->snd_nxt[0] = iss[0];
2210  e8ae c6029a        	ld	a,L53_iss
2211  e8b1 e70c          	ld	(12,x),a
2212                     ; 829   uip_connr->snd_nxt[1] = iss[1];
2214  e8b3 c6029b        	ld	a,L53_iss+1
2215  e8b6 e70d          	ld	(13,x),a
2216                     ; 830   uip_connr->snd_nxt[2] = iss[2];
2218  e8b8 c6029c        	ld	a,L53_iss+2
2219  e8bb e70e          	ld	(14,x),a
2220                     ; 831   uip_connr->snd_nxt[3] = iss[3];
2222  e8bd c6029d        	ld	a,L53_iss+3
2223  e8c0 e70f          	ld	(15,x),a
2224                     ; 832   uip_connr->len = 1;
2226  e8c2 90ae0001      	ldw	y,#1
2227  e8c6 ef10          	ldw	(16,x),y
2228                     ; 835   uip_connr->rcv_nxt[3] = BUF->seqno[3];
2230  e8c8 c60390        	ld	a,_uip_buf+41
2231  e8cb e70b          	ld	(11,x),a
2232                     ; 836   uip_connr->rcv_nxt[2] = BUF->seqno[2];
2234  e8cd c6038f        	ld	a,_uip_buf+40
2235  e8d0 e70a          	ld	(10,x),a
2236                     ; 837   uip_connr->rcv_nxt[1] = BUF->seqno[1];
2238  e8d2 c6038e        	ld	a,_uip_buf+39
2239  e8d5 e709          	ld	(9,x),a
2240                     ; 838   uip_connr->rcv_nxt[0] = BUF->seqno[0];
2242  e8d7 c6038d        	ld	a,_uip_buf+38
2243  e8da e708          	ld	(8,x),a
2244                     ; 839   uip_add_rcv_nxt(1);
2246  e8dc ae0001        	ldw	x,#1
2247  e8df cde544        	call	L545_uip_add_rcv_nxt
2249                     ; 842   if ((BUF->tcpoffset & 0xf0) > 0x50) {
2251  e8e2 c60395        	ld	a,_uip_buf+46
2252  e8e5 a4f0          	and	a,#240
2253  e8e7 a151          	cp	a,#81
2254  e8e9 2403cce97d    	jrult	L106
2255                     ; 843     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2257  e8ee 725f0299      	clr	L73_c
2259  e8f2 206b          	jra	L7111
2260  e8f4               L3111:
2261                     ; 844       opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
2263  e8f4 5f            	clrw	x
2264  e8f5 97            	ld	xl,a
2265  e8f6 d6039d        	ld	a,(_uip_buf+54,x)
2266  e8f9 c70298        	ld	L14_opt,a
2267                     ; 845       if (opt == TCP_OPT_END) {
2269  e8fc 277f          	jreq	L106
2270                     ; 847         break;
2272                     ; 849       else if (opt == TCP_OPT_NOOP) {
2274  e8fe a101          	cp	a,#1
2275  e900 2606          	jrne	L7211
2276                     ; 850         ++c;
2278  e902 725c0299      	inc	L73_c
2280  e906 2057          	jra	L7111
2281  e908               L7211:
2282                     ; 853       else if (opt == TCP_OPT_MSS
2282                     ; 854         && uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
2284  e908 a102          	cp	a,#2
2285  e90a 2640          	jrne	L3311
2287  e90c c60299        	ld	a,L73_c
2288  e90f 5f            	clrw	x
2289  e910 97            	ld	xl,a
2290  e911 d6039e        	ld	a,(_uip_buf+55,x)
2291  e914 a104          	cp	a,#4
2292  e916 2634          	jrne	L3311
2293                     ; 856         tmp16 = ((uint16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8)
2293                     ; 857 	        | (uint16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
2295  e918 c60299        	ld	a,L73_c
2296  e91b 5f            	clrw	x
2297  e91c 97            	ld	xl,a
2298  e91d d603a0        	ld	a,(_uip_buf+57,x)
2299  e920 5f            	clrw	x
2300  e921 97            	ld	xl,a
2301  e922 1f01          	ldw	(OFST-4,sp),x
2303  e924 5f            	clrw	x
2304  e925 c60299        	ld	a,L73_c
2305  e928 97            	ld	xl,a
2306  e929 d6039f        	ld	a,(_uip_buf+56,x)
2307  e92c 5f            	clrw	x
2308  e92d 97            	ld	xl,a
2309  e92e 7b02          	ld	a,(OFST-3,sp)
2310  e930 01            	rrwa	x,a
2311  e931 1a01          	or	a,(OFST-4,sp)
2312  e933 01            	rrwa	x,a
2313  e934 cf0296        	ldw	L34_tmp16,x
2314                     ; 858         uip_connr->initialmss = uip_connr->mss = tmp16 > UIP_TCP_MSS ? UIP_TCP_MSS : tmp16;
2316  e937 a301b9        	cpw	x,#441
2317  e93a 2503          	jrult	L231
2318  e93c ae01b8        	ldw	x,#440
2319  e93f               L231:
2320  e93f 1604          	ldw	y,(OFST-1,sp)
2321  e941 90ef12        	ldw	(18,y),x
2322  e944 93            	ldw	x,y
2323  e945 90ee12        	ldw	y,(18,y)
2324  e948 ef14          	ldw	(20,x),y
2325                     ; 861         break;
2327  e94a 2031          	jra	L106
2328  e94c               L3311:
2329                     ; 866         if (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
2331  e94c c60299        	ld	a,L73_c
2332  e94f 5f            	clrw	x
2333  e950 97            	ld	xl,a
2334  e951 724d039e      	tnz	(_uip_buf+55,x)
2335  e955 2726          	jreq	L106
2336                     ; 869           break;
2338                     ; 871         c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
2340  e957 5f            	clrw	x
2341  e958 97            	ld	xl,a
2342  e959 db039e        	add	a,(_uip_buf+55,x)
2343  e95c c70299        	ld	L73_c,a
2344  e95f               L7111:
2345                     ; 843     for (c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2;) {
2347  e95f c60395        	ld	a,_uip_buf+46
2348  e962 4e            	swap	a
2349  e963 a40f          	and	a,#15
2350  e965 5f            	clrw	x
2351  e966 97            	ld	xl,a
2352  e967 58            	sllw	x
2353  e968 58            	sllw	x
2354  e969 1d0014        	subw	x,#20
2355  e96c c60299        	ld	a,L73_c
2356  e96f 905f          	clrw	y
2357  e971 9097          	ld	yl,a
2358  e973 90bf07        	ldw	c_y,y
2359  e976 b307          	cpw	x,c_y
2360  e978 2d03cce8f4    	jrsgt	L3111
2361  e97d               L106:
2362                     ; 879   tcp_send_synack:
2362                     ; 880   BUF->flags = TCP_ACK;
2364  e97d 35100396      	mov	_uip_buf+47,#16
2365  e981               L306:
2366                     ; 882   tcp_send_syn:
2366                     ; 883   BUF->flags |= TCP_SYN;
2368  e981 72120396      	bset	_uip_buf+47,#1
2369                     ; 892   BUF->optdata[0] = TCP_OPT_MSS;
2371  e985 3502039d      	mov	_uip_buf+54,#2
2372                     ; 893   BUF->optdata[1] = TCP_OPT_MSS_LEN;
2374  e989 3504039e      	mov	_uip_buf+55,#4
2375                     ; 894   BUF->optdata[2] = (UIP_TCP_MSS) / 256;
2377  e98d 3501039f      	mov	_uip_buf+56,#1
2378                     ; 895   BUF->optdata[3] = (UIP_TCP_MSS) & 255;
2380  e991 35b803a0      	mov	_uip_buf+57,#184
2381                     ; 896   uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
2383  e995 ae002c        	ldw	x,#44
2384  e998 cf0363        	ldw	_uip_len,x
2385                     ; 897   BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
2387  e99b 35600395      	mov	_uip_buf+46,#96
2388                     ; 898   goto tcp_send;
2390  e99f cced3b        	jra	L346
2391  e9a2               L1411:
2392                     ; 934   c = (uint8_t)((BUF->tcpoffset >> 4) << 2);
2394  e9a2 c60395        	ld	a,_uip_buf+46
2395  e9a5 4e            	swap	a
2396  e9a6 a40f          	and	a,#15
2397  e9a8 48            	sll	a
2398  e9a9 48            	sll	a
2399  e9aa c70299        	ld	L73_c,a
2400                     ; 938   uip_len = uip_len - c - UIP_IPH_LEN;
2402  e9ad c60363        	ld	a,_uip_len
2403  e9b0 97            	ld	xl,a
2404  e9b1 c60364        	ld	a,_uip_len+1
2405  e9b4 c00299        	sub	a,L73_c
2406  e9b7 2401          	jrnc	L041
2407  e9b9 5a            	decw	x
2408  e9ba               L041:
2409  e9ba 02            	rlwa	x,a
2410  e9bb 1d0014        	subw	x,#20
2411  e9be cf0363        	ldw	_uip_len,x
2412                     ; 942   if (!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT)
2412                     ; 943     && ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
2414  e9c1 1e04          	ldw	x,(OFST-1,sp)
2415  e9c3 e619          	ld	a,(25,x)
2416  e9c5 a40f          	and	a,#15
2417  e9c7 a102          	cp	a,#2
2418  e9c9 2609          	jrne	L5411
2420  e9cb c60396        	ld	a,_uip_buf+47
2421  e9ce a43f          	and	a,#63
2422  e9d0 a112          	cp	a,#18
2423  e9d2 272d          	jreq	L3411
2424  e9d4               L5411:
2425                     ; 945     if ((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0))
2425                     ; 946       && (BUF->seqno[0] != uip_connr->rcv_nxt[0]
2425                     ; 947       || BUF->seqno[1] != uip_connr->rcv_nxt[1]
2425                     ; 948       || BUF->seqno[2] != uip_connr->rcv_nxt[2]
2425                     ; 949       || BUF->seqno[3] != uip_connr->rcv_nxt[3])) {
2427  e9d4 ce0363        	ldw	x,_uip_len
2428  e9d7 2607          	jrne	L1511
2430  e9d9 c60396        	ld	a,_uip_buf+47
2431  e9dc a503          	bcp	a,#3
2432  e9de 2721          	jreq	L3411
2433  e9e0               L1511:
2435  e9e0 1e04          	ldw	x,(OFST-1,sp)
2436  e9e2 e608          	ld	a,(8,x)
2437  e9e4 c1038d        	cp	a,_uip_buf+38
2438  e9e7 2703ccee2c    	jrne	L536
2440  e9ec e609          	ld	a,(9,x)
2441  e9ee c1038e        	cp	a,_uip_buf+39
2442  e9f1 26f6          	jrne	L536
2444  e9f3 e60a          	ld	a,(10,x)
2445  e9f5 c1038f        	cp	a,_uip_buf+40
2446  e9f8 26ef          	jrne	L536
2448  e9fa e60b          	ld	a,(11,x)
2449  e9fc c10390        	cp	a,_uip_buf+41
2450  e9ff 26e8          	jrne	L536
2451  ea01               L3411:
2452                     ; 957   if ((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
2454  ea01 7208039603cc  	btjf	_uip_buf+47,#4,L1611
2456  ea09 1e04          	ldw	x,(OFST-1,sp)
2457  ea0b e611          	ld	a,(17,x)
2458  ea0d ea10          	or	a,(16,x)
2459  ea0f 27f5          	jreq	L1611
2460                     ; 958     uip_add32(uip_connr->snd_nxt, uip_connr->len);
2462  ea11 ee10          	ldw	x,(16,x)
2463  ea13 89            	pushw	x
2464  ea14 1e06          	ldw	x,(OFST+1,sp)
2465  ea16 1c000c        	addw	x,#12
2466  ea19 cde348        	call	_uip_add32
2468  ea1c c60391        	ld	a,_uip_buf+42
2469  ea1f c102b9        	cp	a,_uip_acc32
2470  ea22 85            	popw	x
2471                     ; 959     if (BUF->ackno[0] == uip_acc32[0]
2471                     ; 960       && BUF->ackno[1] == uip_acc32[1]
2471                     ; 961       && BUF->ackno[2] == uip_acc32[2]
2471                     ; 962       && BUF->ackno[3] == uip_acc32[3]) {
2473  ea23 26e1          	jrne	L1611
2475  ea25 c60392        	ld	a,_uip_buf+43
2476  ea28 c102ba        	cp	a,_uip_acc32+1
2477  ea2b 26d9          	jrne	L1611
2479  ea2d c60393        	ld	a,_uip_buf+44
2480  ea30 c102bb        	cp	a,_uip_acc32+2
2481  ea33 26d1          	jrne	L1611
2483  ea35 c60394        	ld	a,_uip_buf+45
2484  ea38 c102bc        	cp	a,_uip_acc32+3
2485  ea3b 2679          	jrne	L1611
2486                     ; 964       uip_connr->snd_nxt[0] = uip_acc32[0];
2488  ea3d 1e04          	ldw	x,(OFST-1,sp)
2489  ea3f c602b9        	ld	a,_uip_acc32
2490  ea42 e70c          	ld	(12,x),a
2491                     ; 965       uip_connr->snd_nxt[1] = uip_acc32[1];
2493  ea44 c602ba        	ld	a,_uip_acc32+1
2494  ea47 e70d          	ld	(13,x),a
2495                     ; 966       uip_connr->snd_nxt[2] = uip_acc32[2];
2497  ea49 c602bb        	ld	a,_uip_acc32+2
2498  ea4c e70e          	ld	(14,x),a
2499                     ; 967       uip_connr->snd_nxt[3] = uip_acc32[3];
2501  ea4e c602bc        	ld	a,_uip_acc32+3
2502  ea51 e70f          	ld	(15,x),a
2503                     ; 970       if (uip_connr->nrtx == 0) {
2505  ea53 e61b          	ld	a,(27,x)
2506  ea55 2653          	jrne	L5611
2507                     ; 972         m = (int8_t)(uip_connr->rto - uip_connr->timer);
2509  ea57 e61a          	ld	a,(26,x)
2510  ea59 e018          	sub	a,(24,x)
2511  ea5b 40            	neg	a
2512  ea5c 6b03          	ld	(OFST-2,sp),a
2514                     ; 974         m = (int8_t)(m - (uip_connr->sa >> 3));
2516  ea5e e616          	ld	a,(22,x)
2517  ea60 44            	srl	a
2518  ea61 44            	srl	a
2519  ea62 44            	srl	a
2520  ea63 5f            	clrw	x
2521  ea64 97            	ld	xl,a
2522  ea65 1f01          	ldw	(OFST-4,sp),x
2524  ea67 5f            	clrw	x
2525  ea68 7b03          	ld	a,(OFST-2,sp)
2526  ea6a 4d            	tnz	a
2527  ea6b 2a01          	jrpl	L441
2528  ea6d 53            	cplw	x
2529  ea6e               L441:
2530  ea6e 97            	ld	xl,a
2531  ea6f 72f001        	subw	x,(OFST-4,sp)
2532  ea72 01            	rrwa	x,a
2533  ea73 6b03          	ld	(OFST-2,sp),a
2535                     ; 975         uip_connr->sa += m;
2537  ea75 1e04          	ldw	x,(OFST-1,sp)
2538  ea77 e616          	ld	a,(22,x)
2539  ea79 1b03          	add	a,(OFST-2,sp)
2540  ea7b e716          	ld	(22,x),a
2541                     ; 976         if (m < 0) m = (int8_t)(-m);
2543  ea7d 7b03          	ld	a,(OFST-2,sp)
2544  ea7f 2a02          	jrpl	L7611
2547  ea81 0003          	neg	(OFST-2,sp)
2549  ea83               L7611:
2550                     ; 977         m = (int8_t)(m - (uip_connr->sv >> 2));
2552  ea83 e617          	ld	a,(23,x)
2553  ea85 44            	srl	a
2554  ea86 44            	srl	a
2555  ea87 5f            	clrw	x
2556  ea88 97            	ld	xl,a
2557  ea89 1f01          	ldw	(OFST-4,sp),x
2559  ea8b 5f            	clrw	x
2560  ea8c 7b03          	ld	a,(OFST-2,sp)
2561  ea8e 4d            	tnz	a
2562  ea8f 2a01          	jrpl	L641
2563  ea91 53            	cplw	x
2564  ea92               L641:
2565  ea92 97            	ld	xl,a
2566  ea93 72f001        	subw	x,(OFST-4,sp)
2567  ea96 01            	rrwa	x,a
2568  ea97 6b03          	ld	(OFST-2,sp),a
2570                     ; 978         uip_connr->sv += m;
2572  ea99 1e04          	ldw	x,(OFST-1,sp)
2573  ea9b e617          	ld	a,(23,x)
2574  ea9d 1b03          	add	a,(OFST-2,sp)
2575  ea9f e717          	ld	(23,x),a
2576                     ; 979         uip_connr->rto = (uint8_t)((uip_connr->sa >> 3) + uip_connr->sv);
2578  eaa1 e616          	ld	a,(22,x)
2579  eaa3 44            	srl	a
2580  eaa4 44            	srl	a
2581  eaa5 44            	srl	a
2582  eaa6 eb17          	add	a,(23,x)
2583  eaa8 e718          	ld	(24,x),a
2584  eaaa               L5611:
2585                     ; 982       uip_flags = UIP_ACKDATA;
2587  eaaa 350102b8      	mov	_uip_flags,#1
2588                     ; 984       uip_connr->timer = uip_connr->rto;
2590  eaae e618          	ld	a,(24,x)
2591  eab0 e71a          	ld	(26,x),a
2592                     ; 987       uip_connr->len = 0;
2594  eab2 905f          	clrw	y
2595  eab4 ef10          	ldw	(16,x),y
2596  eab6               L1611:
2597                     ; 992   switch (uip_connr->tcpstateflags & UIP_TS_MASK) {
2599  eab6 1e04          	ldw	x,(OFST-1,sp)
2600  eab8 e619          	ld	a,(25,x)
2601  eaba a40f          	and	a,#15
2603                     ; 1328 	uip_connr->timer = 0;
2604  eabc 4a            	dec	a
2605  eabd 272a          	jreq	L706
2606  eabf 4a            	dec	a
2607  eac0 2748          	jreq	L116
2608  eac2 4a            	dec	a
2609  eac3 2603ccebf7    	jreq	L316
2610  eac8 4a            	dec	a
2611  eac9 2603ccedb5    	jreq	L526
2612  eace 4a            	dec	a
2613  eacf 2603ccedf4    	jreq	L726
2614  ead4 4a            	dec	a
2615  ead5 2603ccee1f    	jreq	L336
2616  eada 4a            	dec	a
2617  eadb 2603ccee2c    	jreq	L536
2618  eae0 4a            	dec	a
2619  eae1 2603cceda4    	jreq	L326
2620  eae6 ccee8a        	jra	L356
2621  eae9               L706:
2622                     ; 996     case UIP_SYN_RCVD:
2622                     ; 997       // In SYN_RCVD we have sent out a SYNACK in response to a SYN, and we
2622                     ; 998       // are waiting for an ACK that acknowledges the data we sent out the
2622                     ; 999       // last time. Therefore, we want to have the UIP_ACKDATA flag set. If
2622                     ; 1000       // so, we enter the ESTABLISHED state.
2622                     ; 1001       if (uip_flags & UIP_ACKDATA) {
2624  eae9 720102b8f8    	btjf	_uip_flags,#0,L356
2625                     ; 1002         uip_connr->tcpstateflags = UIP_ESTABLISHED;
2627  eaee a603          	ld	a,#3
2628  eaf0 e719          	ld	(25,x),a
2629                     ; 1003         uip_flags = UIP_CONNECTED;
2631  eaf2 354002b8      	mov	_uip_flags,#64
2632                     ; 1004         uip_connr->len = 0;
2634  eaf6 905f          	clrw	y
2635  eaf8 ef10          	ldw	(16,x),y
2636                     ; 1005         if (uip_len > 0) {
2638  eafa ce0363        	ldw	x,_uip_len
2639  eafd 2707          	jreq	L7711
2640                     ; 1006           uip_flags |= UIP_NEWDATA;
2642  eaff 721202b8      	bset	_uip_flags,#1
2643                     ; 1007           uip_add_rcv_nxt(uip_len);
2645  eb03 cde544        	call	L545_uip_add_rcv_nxt
2647  eb06               L7711:
2648                     ; 1009         uip_slen = 0;
2651  eb06 5f            	clrw	x
2652                     ; 1010         UIP_APPCALL(); // We may have received data with the SYN
2654                     ; 1011         goto appsend;
2656  eb07 ccebda        	jp	LC002
2657  eb0a               L116:
2658                     ; 1017     case UIP_SYN_SENT:
2658                     ; 1018       // In SYN_SENT, we wait for a SYNACK that is sent in response to our
2658                     ; 1019       // SYN. The rcv_nxt is set to sequence number in the SYNACK plus one,
2658                     ; 1020       // and we send an ACK. We move into the ESTABLISHED state.
2658                     ; 1021       if((uip_flags & UIP_ACKDATA) &&
2658                     ; 1022         (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {
2660  eb0a 720002b803cc  	btjf	_uip_flags,#0,L1021
2662  eb12 c60396        	ld	a,_uip_buf+47
2663  eb15 a43f          	and	a,#63
2664  eb17 a112          	cp	a,#18
2665  eb19 26f4          	jrne	L1021
2666                     ; 1024         if((BUF->tcpoffset & 0xf0) > 0x50) {
2668  eb1b c60395        	ld	a,_uip_buf+46
2669  eb1e a4f0          	and	a,#240
2670  eb20 a151          	cp	a,#81
2671  eb22 2403ccebac    	jrult	L3021
2672                     ; 1025 	  for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
2674  eb27 725f0299      	clr	L73_c
2676  eb2b 2064          	jra	L1121
2677  eb2d               L5021:
2678                     ; 1026 	    opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
2680  eb2d 5f            	clrw	x
2681  eb2e 97            	ld	xl,a
2682  eb2f d6039d        	ld	a,(_uip_buf+54,x)
2683  eb32 c70298        	ld	L14_opt,a
2684                     ; 1027 	    if(opt == TCP_OPT_END) {
2686  eb35 2775          	jreq	L3021
2687                     ; 1029 	      break;
2689                     ; 1031 	    else if(opt == TCP_OPT_NOOP) {
2691  eb37 a101          	cp	a,#1
2692  eb39 2606          	jrne	L1221
2693                     ; 1032 	      ++c;
2695  eb3b 725c0299      	inc	L73_c
2697  eb3f 2050          	jra	L1121
2698  eb41               L1221:
2699                     ; 1035 	    else if(opt == TCP_OPT_MSS &&
2699                     ; 1036 	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
2701  eb41 a102          	cp	a,#2
2702  eb43 2639          	jrne	L5221
2704  eb45 c60299        	ld	a,L73_c
2705  eb48 5f            	clrw	x
2706  eb49 97            	ld	xl,a
2707  eb4a d6039e        	ld	a,(_uip_buf+55,x)
2708  eb4d a104          	cp	a,#4
2709  eb4f 262d          	jrne	L5221
2710                     ; 1038 	      tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
2710                     ; 1039 	        uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
2712  eb51 c60299        	ld	a,L73_c
2713  eb54 5f            	clrw	x
2714  eb55 97            	ld	xl,a
2715  eb56 d6039f        	ld	a,(_uip_buf+56,x)
2716  eb59 97            	ld	xl,a
2717  eb5a c60299        	ld	a,L73_c
2718  eb5d 905f          	clrw	y
2719  eb5f 9097          	ld	yl,a
2720  eb61 90d603a0      	ld	a,(_uip_buf+57,y)
2721  eb65 02            	rlwa	x,a
2722  eb66 cf0296        	ldw	L34_tmp16,x
2723                     ; 1040 	      uip_connr->initialmss =
2723                     ; 1041 	        uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
2725  eb69 a301b9        	cpw	x,#441
2726  eb6c 2503          	jrult	L451
2727  eb6e ae01b8        	ldw	x,#440
2728  eb71               L451:
2729  eb71 1604          	ldw	y,(OFST-1,sp)
2730  eb73 90ef12        	ldw	(18,y),x
2731  eb76 93            	ldw	x,y
2732  eb77 90ee12        	ldw	y,(18,y)
2733  eb7a ef14          	ldw	(20,x),y
2734                     ; 1044 	      break;
2736  eb7c 202e          	jra	L3021
2737  eb7e               L5221:
2738                     ; 1049 	      if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
2740  eb7e c60299        	ld	a,L73_c
2741  eb81 5f            	clrw	x
2742  eb82 97            	ld	xl,a
2743  eb83 724d039e      	tnz	(_uip_buf+55,x)
2744  eb87 2723          	jreq	L3021
2745                     ; 1052 	        break;
2747                     ; 1054 	      c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
2749  eb89 5f            	clrw	x
2750  eb8a 97            	ld	xl,a
2751  eb8b db039e        	add	a,(_uip_buf+55,x)
2752  eb8e c70299        	ld	L73_c,a
2753  eb91               L1121:
2754                     ; 1025 	  for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
2756  eb91 c60395        	ld	a,_uip_buf+46
2757  eb94 4e            	swap	a
2758  eb95 a40f          	and	a,#15
2759  eb97 5f            	clrw	x
2760  eb98 97            	ld	xl,a
2761  eb99 58            	sllw	x
2762  eb9a 58            	sllw	x
2763  eb9b 1d0014        	subw	x,#20
2764  eb9e c60299        	ld	a,L73_c
2765  eba1 905f          	clrw	y
2766  eba3 9097          	ld	yl,a
2767  eba5 90bf07        	ldw	c_y,y
2768  eba8 b307          	cpw	x,c_y
2769  ebaa 2c81          	jrsgt	L5021
2770  ebac               L3021:
2771                     ; 1058         uip_connr->tcpstateflags = UIP_ESTABLISHED;
2773  ebac 1e04          	ldw	x,(OFST-1,sp)
2774  ebae a603          	ld	a,#3
2775  ebb0 e719          	ld	(25,x),a
2776                     ; 1059         uip_connr->rcv_nxt[0] = BUF->seqno[0];
2778  ebb2 c6038d        	ld	a,_uip_buf+38
2779  ebb5 e708          	ld	(8,x),a
2780                     ; 1060         uip_connr->rcv_nxt[1] = BUF->seqno[1];
2782  ebb7 c6038e        	ld	a,_uip_buf+39
2783  ebba e709          	ld	(9,x),a
2784                     ; 1061         uip_connr->rcv_nxt[2] = BUF->seqno[2];
2786  ebbc c6038f        	ld	a,_uip_buf+40
2787  ebbf e70a          	ld	(10,x),a
2788                     ; 1062         uip_connr->rcv_nxt[3] = BUF->seqno[3];
2790  ebc1 c60390        	ld	a,_uip_buf+41
2791  ebc4 e70b          	ld	(11,x),a
2792                     ; 1063         uip_add_rcv_nxt(1);
2794  ebc6 ae0001        	ldw	x,#1
2795  ebc9 cde544        	call	L545_uip_add_rcv_nxt
2797                     ; 1068         uip_flags = UIP_CONNECTED | UIP_NEWDATA;
2799  ebcc 354202b8      	mov	_uip_flags,#66
2800                     ; 1069         uip_connr->len = 0;
2802  ebd0 1e04          	ldw	x,(OFST-1,sp)
2803  ebd2 905f          	clrw	y
2804  ebd4 ef10          	ldw	(16,x),y
2805                     ; 1070         uip_len = 0;
2807  ebd6 5f            	clrw	x
2808  ebd7 cf0363        	ldw	_uip_len,x
2809                     ; 1071         uip_slen = 0;
2811  ebda               LC002:
2812  ebda cf02a4        	ldw	_uip_slen,x
2813                     ; 1072         UIP_APPCALL(); // This checks to see if there is any data to send with
2815                     ; 1075         goto appsend;
2817  ebdd cce65f        	jra	L716
2818  ebe0               L1021:
2819                     ; 1078       uip_flags = UIP_ABORT;
2821  ebe0 352002b8      	mov	_uip_flags,#32
2822                     ; 1082       UIP_APPCALL(); // ???
2824  ebe4 cdf2bc        	call	_uip_TcpAppHubCall
2826                     ; 1084       uip_conn->tcpstateflags = UIP_CLOSED;
2828  ebe7 ce0361        	ldw	x,_uip_conn
2829  ebea 6f19          	clr	(25,x)
2830                     ; 1085       goto reset;
2831  ebec               L575:
2832                     ; 734   reset:
2832                     ; 735   // We do not send resets in response to resets.
2832                     ; 736   if (BUF->flags & TCP_RST) goto drop;
2834  ebec 7204039603cc  	btjf	_uip_buf+47,#2,L5401
2837  ebf4 ccee8a        	jra	L356
2838  ebf7               L316:
2839                     ; 1089     case UIP_ESTABLISHED:
2839                     ; 1090       // In the ESTABLISHED state, we call upon the application to feed data
2839                     ; 1091       // into the uip_buf. If the UIP_ACKDATA flag is set, the application
2839                     ; 1092       // should put new data into the buffer, otherwise we are retransmitting
2839                     ; 1093       // an old segment, and the application should put that data into the
2839                     ; 1094       // buffer.
2839                     ; 1095       //
2839                     ; 1096       // If the incoming packet is a FIN, we should close the connection on
2839                     ; 1097       // this side as well, and we send out a FIN and enter the LAST_ACK
2839                     ; 1098       // state. We require that there is no outstanding data; otherwise the
2839                     ; 1099       // sequence numbers will be screwed up.
2839                     ; 1100       if (BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2841  ebf7 7201039630    	btjf	_uip_buf+47,#0,L3321
2843  ebfc e619          	ld	a,(25,x)
2844  ebfe a510          	bcp	a,#16
2845  ec00 262a          	jrne	L3321
2846                     ; 1101         if (uip_outstanding(uip_connr)) {
2848  ec02 e611          	ld	a,(17,x)
2849  ec04 ea10          	or	a,(16,x)
2850  ec06 26ec          	jrne	L356
2851                     ; 1102           goto drop;
2853                     ; 1104         uip_add_rcv_nxt(1 + uip_len);
2855  ec08 ce0363        	ldw	x,_uip_len
2856  ec0b 5c            	incw	x
2857  ec0c cde544        	call	L545_uip_add_rcv_nxt
2859                     ; 1105         uip_flags |= UIP_CLOSE;
2861  ec0f 721802b8      	bset	_uip_flags,#4
2862                     ; 1106         if (uip_len > 0) {
2864  ec13 ce0363        	ldw	x,_uip_len
2865  ec16 2704          	jreq	L7321
2866                     ; 1107           uip_flags |= UIP_NEWDATA;
2868  ec18 721202b8      	bset	_uip_flags,#1
2869  ec1c               L7321:
2870                     ; 1109         UIP_APPCALL(); // This processes any receive data and sets up any
2872  ec1c cdf2bc        	call	_uip_TcpAppHubCall
2874                     ; 1111 	uip_connr->len = 1;
2876  ec1f 1e04          	ldw	x,(OFST-1,sp)
2877  ec21 90ae0001      	ldw	y,#1
2878  ec25 ef10          	ldw	(16,x),y
2879                     ; 1112         uip_connr->tcpstateflags = UIP_LAST_ACK;
2881  ec27 a608          	ld	a,#8
2882                     ; 1113         uip_connr->nrtx = 0;
2883                     ; 1115         tcp_send_finack:
2883                     ; 1116 	BUF->flags = TCP_FIN | TCP_ACK;
2884                     ; 1117         goto tcp_send_nodata;
2886  ec29 ccecb9        	jp	LC006
2887  ec2c               L3321:
2888                     ; 1122       if ((BUF->flags & TCP_URG) != 0) {
2890  ec2c 720b03961f    	btjf	_uip_buf+47,#5,L1421
2891                     ; 1123         uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
2893  ec31 c6039b        	ld	a,_uip_buf+52
2894  ec34 97            	ld	xl,a
2895  ec35 c6039c        	ld	a,_uip_buf+53
2896  ec38 02            	rlwa	x,a
2897  ec39 72bb0365      	addw	x,_uip_appdata
2898  ec3d cf0365        	ldw	_uip_appdata,x
2899                     ; 1124         uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
2901  ec40 c6039b        	ld	a,_uip_buf+52
2902  ec43 97            	ld	xl,a
2903  ec44 c6039c        	ld	a,_uip_buf+53
2904  ec47 02            	rlwa	x,a
2905  ec48 72b00363      	subw	x,_uip_len
2906  ec4c 50            	negw	x
2907  ec4d cf0363        	ldw	_uip_len,x
2908  ec50               L1421:
2909                     ; 1132       if (uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
2911  ec50 ce0363        	ldw	x,_uip_len
2912  ec53 2712          	jreq	L3421
2914  ec55 1e04          	ldw	x,(OFST-1,sp)
2915  ec57 e619          	ld	a,(25,x)
2916  ec59 a510          	bcp	a,#16
2917  ec5b 260a          	jrne	L3421
2918                     ; 1133         uip_flags |= UIP_NEWDATA;
2920  ec5d 721202b8      	bset	_uip_flags,#1
2921                     ; 1134         uip_add_rcv_nxt(uip_len);
2923  ec61 ce0363        	ldw	x,_uip_len
2924  ec64 cde544        	call	L545_uip_add_rcv_nxt
2926  ec67               L3421:
2927                     ; 1147       tmp16 = ((uint16_t)BUF->wnd[0] << 8) + (uint16_t)BUF->wnd[1];
2929  ec67 c60398        	ld	a,_uip_buf+49
2930  ec6a 5f            	clrw	x
2931  ec6b 97            	ld	xl,a
2932  ec6c 1f01          	ldw	(OFST-4,sp),x
2934  ec6e c60397        	ld	a,_uip_buf+48
2935  ec71 97            	ld	xl,a
2936  ec72 4f            	clr	a
2937  ec73 02            	rlwa	x,a
2938  ec74 72fb01        	addw	x,(OFST-4,sp)
2939  ec77 cf0296        	ldw	L34_tmp16,x
2940                     ; 1148       if (tmp16 > uip_connr->initialmss || tmp16 == 0) {
2942  ec7a 1604          	ldw	y,(OFST-1,sp)
2943  ec7c 90ee14        	ldw	y,(20,y)
2944  ec7f 90c30296      	cpw	y,L34_tmp16
2945  ec83 2505          	jrult	L7421
2947  ec85 ce0296        	ldw	x,L34_tmp16
2948  ec88 2607          	jrne	L5421
2949  ec8a               L7421:
2950                     ; 1149         tmp16 = uip_connr->initialmss;
2952  ec8a 1e04          	ldw	x,(OFST-1,sp)
2953  ec8c ee14          	ldw	x,(20,x)
2954  ec8e cf0296        	ldw	L34_tmp16,x
2955  ec91               L5421:
2956                     ; 1151       uip_connr->mss = tmp16;
2958  ec91 1e04          	ldw	x,(OFST-1,sp)
2959  ec93 90ce0296      	ldw	y,L34_tmp16
2960  ec97 ef12          	ldw	(18,x),y
2961                     ; 1168       if (uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
2963  ec99 c602b8        	ld	a,_uip_flags
2964  ec9c a503          	bcp	a,#3
2965  ec9e 2603ccee8a    	jreq	L356
2966                     ; 1169         uip_slen = 0;
2967                     ; 1170         UIP_APPCALL(); // Here is where the application will read data that
2969  eca3 cceb06        	jp	L7711
2970  eca6               L3521:
2971                     ; 1187         if (uip_flags & UIP_CLOSE) {
2973  eca6 720902b81e    	btjf	_uip_flags,#4,L5521
2974                     ; 1188           uip_slen = 0;
2976  ecab 5f            	clrw	x
2977  ecac cf02a4        	ldw	_uip_slen,x
2978                     ; 1189 	  uip_connr->len = 1;
2980  ecaf 1e04          	ldw	x,(OFST-1,sp)
2981  ecb1 90ae0001      	ldw	y,#1
2982  ecb5 ef10          	ldw	(16,x),y
2983                     ; 1190 	  uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
2985  ecb7 a604          	ld	a,#4
2986                     ; 1191 	  uip_connr->nrtx = 0;
2988  ecb9               LC006:
2989  ecb9 e719          	ld	(25,x),a
2991  ecbb 6f1b          	clr	(27,x)
2992                     ; 1192 	  BUF->flags = TCP_FIN | TCP_ACK;
2994  ecbd               LC004:
2996  ecbd 35110396      	mov	_uip_buf+47,#17
2997                     ; 1193 	  goto tcp_send_nodata;
2998  ecc1               L736:
2999                     ; 1342   tcp_send_nodata:
2999                     ; 1343   uip_len = UIP_IPTCPH_LEN;
3001  ecc1 ae0028        	ldw	x,#40
3002  ecc4 cf0363        	ldw	_uip_len,x
3003  ecc7 206e          	jra	L146
3004  ecc9               L5521:
3005                     ; 1197         if (uip_slen > 0) {
3007  ecc9 ce02a4        	ldw	x,_uip_slen
3008  eccc 2732          	jreq	L7521
3009                     ; 1200 	  if ((uip_flags & UIP_ACKDATA) != 0) {
3011  ecce 720102b806    	btjf	_uip_flags,#0,L1621
3012                     ; 1201 	    uip_connr->len = 0;
3014  ecd3 1e04          	ldw	x,(OFST-1,sp)
3015  ecd5 905f          	clrw	y
3016  ecd7 ef10          	ldw	(16,x),y
3017  ecd9               L1621:
3018                     ; 1206 	  if (uip_connr->len == 0) {
3020  ecd9 1e04          	ldw	x,(OFST-1,sp)
3021  ecdb e611          	ld	a,(17,x)
3022  ecdd ea10          	or	a,(16,x)
3023  ecdf 261a          	jrne	L3621
3024                     ; 1209 	    if (uip_slen > uip_connr->mss) {
3026  ece1 9093          	ldw	y,x
3027  ece3 90ee12        	ldw	y,(18,y)
3028  ece6 90c302a4      	cpw	y,_uip_slen
3029  ecea 2407          	jruge	L5621
3030                     ; 1210 	      uip_slen = uip_connr->mss;
3032  ecec ee12          	ldw	x,(18,x)
3033  ecee cf02a4        	ldw	_uip_slen,x
3034  ecf1 1e04          	ldw	x,(OFST-1,sp)
3035  ecf3               L5621:
3036                     ; 1215             uip_connr->len = uip_slen;
3038  ecf3 90ce02a4      	ldw	y,_uip_slen
3039  ecf7 ef10          	ldw	(16,x),y
3041  ecf9 2005          	jra	L7521
3042  ecfb               L3621:
3043                     ; 1221 	    uip_slen = uip_connr->len;
3045  ecfb ee10          	ldw	x,(16,x)
3046  ecfd cf02a4        	ldw	_uip_slen,x
3047  ed00               L7521:
3048                     ; 1224 	uip_connr->nrtx = 0;
3050  ed00 1e04          	ldw	x,(OFST-1,sp)
3051  ed02 6f1b          	clr	(27,x)
3052  ed04               L126:
3053                     ; 1229 	apprexmit:
3053                     ; 1230 	uip_appdata = uip_sappdata;
3055  ed04 ce02a6        	ldw	x,_uip_sappdata
3056  ed07 cf0365        	ldw	_uip_appdata,x
3057                     ; 1234 	if (uip_slen > 0 && uip_connr->len > 0) {
3059  ed0a ce02a4        	ldw	x,_uip_slen
3060  ed0d 2716          	jreq	L1721
3062  ed0f 1e04          	ldw	x,(OFST-1,sp)
3063  ed11 e611          	ld	a,(17,x)
3064  ed13 ea10          	or	a,(16,x)
3065  ed15 270e          	jreq	L1721
3066                     ; 1236 	  uip_len = uip_connr->len + UIP_TCPIP_HLEN;
3068  ed17 ee10          	ldw	x,(16,x)
3069  ed19 1c0028        	addw	x,#40
3070  ed1c cf0363        	ldw	_uip_len,x
3071                     ; 1238 	  BUF->flags = TCP_ACK | TCP_PSH;
3073  ed1f 35180396      	mov	_uip_buf+47,#24
3074                     ; 1240 	  goto tcp_send_noopts;
3076  ed23 2012          	jra	L146
3077  ed25               L1721:
3078                     ; 1244 	if (uip_flags & UIP_NEWDATA) {
3080  ed25 720202b803cc  	btjf	_uip_flags,#1,L356
3081                     ; 1245 	  uip_len = UIP_TCPIP_HLEN;
3083  ed2d ae0028        	ldw	x,#40
3084  ed30 cf0363        	ldw	_uip_len,x
3085                     ; 1246 	  BUF->flags = TCP_ACK;
3087  ed33 35100396      	mov	_uip_buf+47,#16
3088                     ; 1247 	  goto tcp_send_noopts;
3089  ed37               L146:
3090                     ; 1345   tcp_send_noopts:
3090                     ; 1346   BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
3092  ed37 35500395      	mov	_uip_buf+46,#80
3093  ed3b               L346:
3094                     ; 1351   tcp_send:
3094                     ; 1352   // We're done with the input processing. We are now ready to send a reply.
3094                     ; 1353   // Our job is to fill in all the fields of the TCP and IP headers before
3094                     ; 1354   // calculating the checksum and finally send the packet.
3094                     ; 1355   BUF->ackno[0] = uip_connr->rcv_nxt[0];
3096  ed3b 1e04          	ldw	x,(OFST-1,sp)
3097  ed3d e608          	ld	a,(8,x)
3098  ed3f c70391        	ld	_uip_buf+42,a
3099                     ; 1356   BUF->ackno[1] = uip_connr->rcv_nxt[1];
3101  ed42 e609          	ld	a,(9,x)
3102  ed44 c70392        	ld	_uip_buf+43,a
3103                     ; 1357   BUF->ackno[2] = uip_connr->rcv_nxt[2];
3105  ed47 e60a          	ld	a,(10,x)
3106  ed49 c70393        	ld	_uip_buf+44,a
3107                     ; 1358   BUF->ackno[3] = uip_connr->rcv_nxt[3];
3109  ed4c e60b          	ld	a,(11,x)
3110  ed4e c70394        	ld	_uip_buf+45,a
3111                     ; 1360   BUF->seqno[0] = uip_connr->snd_nxt[0];
3113  ed51 e60c          	ld	a,(12,x)
3114  ed53 c7038d        	ld	_uip_buf+38,a
3115                     ; 1361   BUF->seqno[1] = uip_connr->snd_nxt[1];
3117  ed56 e60d          	ld	a,(13,x)
3118  ed58 c7038e        	ld	_uip_buf+39,a
3119                     ; 1362   BUF->seqno[2] = uip_connr->snd_nxt[2];
3121  ed5b e60e          	ld	a,(14,x)
3122  ed5d c7038f        	ld	_uip_buf+40,a
3123                     ; 1363   BUF->seqno[3] = uip_connr->snd_nxt[3];
3125  ed60 e60f          	ld	a,(15,x)
3126  ed62 c70390        	ld	_uip_buf+41,a
3127                     ; 1365   BUF->proto = UIP_PROTO_TCP;
3129  ed65 3506037e      	mov	_uip_buf+23,#6
3130                     ; 1367   BUF->srcport = uip_connr->lport;
3132  ed69 ee04          	ldw	x,(4,x)
3133  ed6b cf0389        	ldw	_uip_buf+34,x
3134                     ; 1368   BUF->destport = uip_connr->rport;
3136  ed6e 1e04          	ldw	x,(OFST-1,sp)
3137  ed70 ee06          	ldw	x,(6,x)
3138  ed72 cf038b        	ldw	_uip_buf+36,x
3139                     ; 1370   uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
3141  ed75 ce02b4        	ldw	x,_uip_hostaddr
3142  ed78 cf0381        	ldw	_uip_buf+26,x
3145  ed7b ce02b6        	ldw	x,_uip_hostaddr+2
3146  ed7e cf0383        	ldw	_uip_buf+28,x
3147                     ; 1371   uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
3149  ed81 1e04          	ldw	x,(OFST-1,sp)
3150  ed83 fe            	ldw	x,(x)
3151  ed84 cf0385        	ldw	_uip_buf+30,x
3154  ed87 1e04          	ldw	x,(OFST-1,sp)
3155  ed89 ee02          	ldw	x,(2,x)
3156  ed8b cf0387        	ldw	_uip_buf+32,x
3157                     ; 1373   if (uip_connr->tcpstateflags & UIP_STOPPED) {
3159  ed8e 1e04          	ldw	x,(OFST-1,sp)
3160  ed90 e619          	ld	a,(25,x)
3161  ed92 a510          	bcp	a,#16
3162  ed94 2603ccee33    	jreq	L5331
3163                     ; 1376     BUF->wnd[0] = BUF->wnd[1] = 0;
3165  ed99 725f0398      	clr	_uip_buf+49
3166  ed9d 725f0397      	clr	_uip_buf+48
3168  eda1 ccee3b        	jra	L546
3169  eda4               L326:
3170                     ; 1252     case UIP_LAST_ACK:
3170                     ; 1253       // We can close this connection if the peer has acknowledged our FIN.
3170                     ; 1254       // This is indicated by the UIP_ACKDATA flag.
3170                     ; 1255       if (uip_flags & UIP_ACKDATA) {
3172  eda4 720102b881    	btjf	_uip_flags,#0,L356
3173                     ; 1256         uip_connr->tcpstateflags = UIP_CLOSED;
3175  eda9 e719          	ld	(25,x),a
3176                     ; 1257 	uip_flags = UIP_CLOSE;
3178  edab 351002b8      	mov	_uip_flags,#16
3179                     ; 1262 	UIP_APPCALL(); // ???
3181  edaf cdf2bc        	call	_uip_TcpAppHubCall
3183  edb2 ccee8a        	jra	L356
3184  edb5               L526:
3185                     ; 1266     case UIP_FIN_WAIT_1:
3185                     ; 1267       // The application has closed the connection, but the remote host hasn't
3185                     ; 1268       // closed its end yet. Thus we do nothing but wait for a FIN from the
3185                     ; 1269       // other side.
3185                     ; 1270       if (uip_len > 0) {
3187  edb5 ce0363        	ldw	x,_uip_len
3188  edb8 2703          	jreq	L7721
3189                     ; 1271         uip_add_rcv_nxt(uip_len);
3191  edba cde544        	call	L545_uip_add_rcv_nxt
3193  edbd               L7721:
3194                     ; 1273       if (BUF->flags & TCP_FIN) {
3196  edbd 7201039619    	btjf	_uip_buf+47,#0,L1031
3197                     ; 1274         if (uip_flags & UIP_ACKDATA) {
3199  edc2 1e04          	ldw	x,(OFST-1,sp)
3200  edc4 720102b80c    	btjf	_uip_flags,#0,L3031
3201                     ; 1275 	  uip_connr->tcpstateflags = UIP_TIME_WAIT;
3203  edc9 a607          	ld	a,#7
3204  edcb e719          	ld	(25,x),a
3205                     ; 1276 	  uip_connr->timer = 0;
3207  edcd 6f1a          	clr	(26,x)
3208                     ; 1277 	  uip_connr->len = 0;
3210  edcf 905f          	clrw	y
3211  edd1 ef10          	ldw	(16,x),y
3213  edd3 2034          	jra	LC005
3214  edd5               L3031:
3215                     ; 1280           uip_connr->tcpstateflags = UIP_CLOSING;
3217  edd5 a606          	ld	a,#6
3218  edd7 e719          	ld	(25,x),a
3219                     ; 1282         uip_add_rcv_nxt(1);
3221                     ; 1283         uip_flags = UIP_CLOSE;
3222                     ; 1288         UIP_APPCALL(); // ???
3224                     ; 1289         goto tcp_send_ack;
3226  edd9 202e          	jp	LC005
3227  eddb               L1031:
3228                     ; 1291       else if (uip_flags & UIP_ACKDATA) {
3230  eddb 720102b80d    	btjf	_uip_flags,#0,L7031
3231                     ; 1292         uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
3233  ede0 1e04          	ldw	x,(OFST-1,sp)
3234  ede2 a605          	ld	a,#5
3235  ede4 e719          	ld	(25,x),a
3236                     ; 1293         uip_connr->len = 0;
3238  ede6 905f          	clrw	y
3239  ede8 ef10          	ldw	(16,x),y
3240                     ; 1294         goto drop;
3242  edea ccee8a        	jra	L356
3243  eded               L7031:
3244                     ; 1296       if (uip_len > 0) {
3246  eded ce0363        	ldw	x,_uip_len
3247  edf0 27f8          	jreq	L356
3248                     ; 1297         goto tcp_send_ack;
3250  edf2 2038          	jra	L536
3251  edf4               L726:
3252                     ; 1301     case UIP_FIN_WAIT_2:
3252                     ; 1302       if (uip_len > 0) {
3254  edf4 ce0363        	ldw	x,_uip_len
3255  edf7 2703          	jreq	L5131
3256                     ; 1303 	uip_add_rcv_nxt(uip_len);
3258  edf9 cde544        	call	L545_uip_add_rcv_nxt
3260  edfc               L5131:
3261                     ; 1305       if (BUF->flags & TCP_FIN) {
3263  edfc 7201039617    	btjf	_uip_buf+47,#0,L7131
3264                     ; 1306 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3266  ee01 1e04          	ldw	x,(OFST-1,sp)
3267  ee03 a607          	ld	a,#7
3268  ee05 e719          	ld	(25,x),a
3269                     ; 1307 	uip_connr->timer = 0;
3271  ee07 6f1a          	clr	(26,x)
3272                     ; 1308 	uip_add_rcv_nxt(1);
3275                     ; 1309 	uip_flags = UIP_CLOSE;
3277                     ; 1314 	UIP_APPCALL(); // ???
3279  ee09               LC005:
3281  ee09 ae0001        	ldw	x,#1
3282  ee0c cde544        	call	L545_uip_add_rcv_nxt
3284  ee0f 351002b8      	mov	_uip_flags,#16
3286  ee13 cdf2bc        	call	_uip_TcpAppHubCall
3288                     ; 1315 	goto tcp_send_ack;
3290  ee16 2014          	jra	L536
3291  ee18               L7131:
3292                     ; 1317       if (uip_len > 0) {
3294  ee18 ce0363        	ldw	x,_uip_len
3295  ee1b 276d          	jreq	L356
3296                     ; 1318 	goto tcp_send_ack;
3298  ee1d 200d          	jra	L536
3299  ee1f               L336:
3300                     ; 1325     case UIP_CLOSING:
3300                     ; 1326       if (uip_flags & UIP_ACKDATA) {
3302  ee1f 720102b866    	btjf	_uip_flags,#0,L356
3303                     ; 1327 	uip_connr->tcpstateflags = UIP_TIME_WAIT;
3305  ee24 a607          	ld	a,#7
3306  ee26 e719          	ld	(25,x),a
3307                     ; 1328 	uip_connr->timer = 0;
3309  ee28 6f1a          	clr	(26,x)
3310  ee2a 205e          	jra	L356
3311                     ; 1331   goto drop;
3313  ee2c               L536:
3314                     ; 1337   tcp_send_ack:
3314                     ; 1338   // We jump here when we are ready to send the packet, and just want to set
3314                     ; 1339   // the appropriate TCP sequence numbers in the TCP header.
3314                     ; 1340   BUF->flags = TCP_ACK;
3316  ee2c 35100396      	mov	_uip_buf+47,#16
3317  ee30 ccecc1        	jra	L736
3318  ee33               L5331:
3319                     ; 1381     BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
3321  ee33 35010397      	mov	_uip_buf+48,#1
3322                     ; 1382     BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
3324  ee37 35b80398      	mov	_uip_buf+49,#184
3325  ee3b               L546:
3326                     ; 1389   tcp_send_noconn:
3326                     ; 1390   BUF->ttl = UIP_TTL;
3328  ee3b 3540037d      	mov	_uip_buf+22,#64
3329                     ; 1391   BUF->len[0] = (uint8_t)(uip_len >> 8);
3331  ee3f 5503630377    	mov	_uip_buf+16,_uip_len
3332                     ; 1392   BUF->len[1] = (uint8_t)(uip_len & 0xff);
3334  ee44 5503640378    	mov	_uip_buf+17,_uip_len+1
3335                     ; 1394   BUF->urgp[0] = BUF->urgp[1] = 0;
3337  ee49 725f039c      	clr	_uip_buf+53
3338  ee4d 725f039b      	clr	_uip_buf+52
3339                     ; 1397   BUF->tcpchksum = 0;
3341  ee51 5f            	clrw	x
3342  ee52 cf0399        	ldw	_uip_buf+50,x
3343                     ; 1398   BUF->tcpchksum = ~(uip_tcpchksum());
3345  ee55 cde453        	call	_uip_tcpchksum
3347  ee58 53            	cplw	x
3348  ee59 cf0399        	ldw	_uip_buf+50,x
3349                     ; 1403   ip_send_nolen:
3349                     ; 1404 
3349                     ; 1405   BUF->vhl = 0x45;
3351  ee5c 35450375      	mov	_uip_buf+14,#69
3352                     ; 1406   BUF->tos = 0;
3354  ee60 725f0376      	clr	_uip_buf+15
3355                     ; 1407   BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
3357  ee64 725f037c      	clr	_uip_buf+21
3358  ee68 725f037b      	clr	_uip_buf+20
3359                     ; 1408   ++ipid;
3361  ee6c ce029e        	ldw	x,L11_ipid
3362  ee6f 5c            	incw	x
3363  ee70 cf029e        	ldw	L11_ipid,x
3364                     ; 1409   BUF->ipid[0] = (uint8_t)(ipid >> 8);
3366  ee73 55029e0379    	mov	_uip_buf+18,L11_ipid
3367                     ; 1410   BUF->ipid[1] = (uint8_t)(ipid & 0xff);
3369  ee78 55029f037a    	mov	_uip_buf+19,L11_ipid+1
3370                     ; 1412   BUF->ipchksum = 0;
3372  ee7d 5f            	clrw	x
3373  ee7e cf037f        	ldw	_uip_buf+24,x
3374                     ; 1413   BUF->ipchksum = ~(uip_ipchksum());
3376  ee81 cde3ed        	call	_uip_ipchksum
3378  ee84 53            	cplw	x
3379  ee85 cf037f        	ldw	_uip_buf+24,x
3381  ee88 2004          	jra	L222
3382  ee8a               L356:
3383                     ; 1430   drop:
3383                     ; 1431   uip_len = 0;
3385  ee8a 5f            	clrw	x
3386  ee8b cf0363        	ldw	_uip_len,x
3387                     ; 1432   uip_flags = 0;
3389                     ; 1433   return;
3390  ee8e               L222:
3392  ee8e 725f02b8      	clr	_uip_flags
3395  ee92 5b06          	addw	sp,#6
3396  ee94 81            	ret	
3428                     ; 1438 uint16_t htons(uint16_t val)
3428                     ; 1439 {
3429                     .text:	section	.text,new
3430  ee95               _htons:
3434                     ; 1440   return HTONS(val);
3438  ee95 81            	ret	
3483                     ; 1446 void uip_send(const char *data, int len)
3483                     ; 1447 {
3484                     .text:	section	.text,new
3485  ee96               _uip_send:
3487  ee96 89            	pushw	x
3488       00000000      OFST:	set	0
3491                     ; 1448   if (len > 0) {
3493  ee97 9c            	rvf	
3494  ee98 1e05          	ldw	x,(OFST+5,sp)
3495  ee9a 2d1c          	jrsle	L032
3496                     ; 1449     uip_slen = len;
3498  ee9c cf02a4        	ldw	_uip_slen,x
3499                     ; 1450     if (data != uip_sappdata) {
3501  ee9f 1e01          	ldw	x,(OFST+1,sp)
3502  eea1 c302a6        	cpw	x,_uip_sappdata
3503  eea4 2712          	jreq	L032
3504                     ; 1451       memcpy(uip_sappdata, (data), uip_slen);
3506  eea6 bf04          	ldw	c_x,x
3507  eea8 ce02a4        	ldw	x,_uip_slen
3508  eeab 270b          	jreq	L032
3509  eead               L232:
3510  eead 5a            	decw	x
3511  eeae 92d604        	ld	a,([c_x.w],x)
3512  eeb1 72d702a6      	ld	([_uip_sappdata.w],x),a
3513  eeb5 5d            	tnzw	x
3514  eeb6 26f5          	jrne	L232
3515  eeb8               L032:
3516                     ; 1454 }
3519  eeb8 85            	popw	x
3520  eeb9 81            	ret	
3735                     	switch	.bss
3736  0296               L34_tmp16:
3737  0296 0000          	ds.b	2
3738  0298               L14_opt:
3739  0298 00            	ds.b	1
3740  0299               L73_c:
3741  0299 00            	ds.b	1
3742  029a               L53_iss:
3743  029a 00000000      	ds.b	4
3744  029e               L11_ipid:
3745  029e 0000          	ds.b	2
3746  02a0               _uip_listenports:
3747  02a0 00000000      	ds.b	4
3748                     	xdef	_uip_listenports
3749  02a4               _uip_slen:
3750  02a4 0000          	ds.b	2
3751                     	xdef	_uip_slen
3752  02a6               _uip_sappdata:
3753  02a6 0000          	ds.b	2
3754                     	xdef	_uip_sappdata
3755                     	xdef	_uip_ethaddr
3756                     	xdef	_uip_add32
3757                     	xdef	_uip_tcpchksum
3758                     	xdef	_uip_ipchksum
3759                     	xdef	_uip_chksum
3760  02a8               _uip_mqttserveraddr:
3761  02a8 00000000      	ds.b	4
3762                     	xdef	_uip_mqttserveraddr
3763  02ac               _uip_draddr:
3764  02ac 00000000      	ds.b	4
3765                     	xdef	_uip_draddr
3766  02b0               _uip_netmask:
3767  02b0 00000000      	ds.b	4
3768                     	xdef	_uip_netmask
3769  02b4               _uip_hostaddr:
3770  02b4 00000000      	ds.b	4
3771                     	xdef	_uip_hostaddr
3772                     	xdef	_uip_process
3773  02b8               _uip_flags:
3774  02b8 00            	ds.b	1
3775                     	xdef	_uip_flags
3776  02b9               _uip_acc32:
3777  02b9 00000000      	ds.b	4
3778                     	xdef	_uip_acc32
3779  02bd               _uip_conns:
3780  02bd 000000000000  	ds.b	164
3781                     	xdef	_uip_conns
3782  0361               _uip_conn:
3783  0361 0000          	ds.b	2
3784                     	xdef	_uip_conn
3785  0363               _uip_len:
3786  0363 0000          	ds.b	2
3787                     	xdef	_uip_len
3788  0365               _uip_appdata:
3789  0365 0000          	ds.b	2
3790                     	xdef	_uip_appdata
3791                     	xdef	_htons
3792                     	xdef	_uip_send
3793                     	xdef	_uip_connect
3794                     	xdef	_uip_unlisten
3795                     	xdef	_uip_listen
3796  0367               _uip_buf:
3797  0367 000000000000  	ds.b	502
3798                     	xdef	_uip_buf
3799                     	xdef	_uip_setipid
3800                     	xdef	_uip_init_stats
3801                     	xdef	_uip_init
3802                     	xref	_uip_TcpAppHubCall
3803                     	xref.b	c_x
3804                     	xref.b	c_y
3824                     	end
