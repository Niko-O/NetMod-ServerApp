   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  8080               L11_checked:
  20  8080 636865636b65  	dc.b	"checked",0
  21  8088               L31_g_HtmlPageIOControl:
  22  8088 257930342579  	dc.b	"%y04%y05%y06<title"
  23  809a 3e494f20436f  	dc.b	">IO Control</title"
  24  80ac 3e3c2f686561  	dc.b	"></head><body><h1>"
  25  80be 494f20436f6e  	dc.b	"IO Control</h1><fo"
  26  80d0 726d206d6574  	dc.b	"rm method='POST' a"
  27  80e2 6374696f6e3d  	dc.b	"ction='/'><table><"
  28  80f4 74723e3c7464  	dc.b	"tr><td class='t1'>"
  29  8106 4e616d653a3c  	dc.b	"Name:</td><td clas"
  30  8118 733d27743227  	dc.b	"s='t2'>%a00</td></"
  31  812a 74723e3c2f74  	dc.b	"tr></table><table>"
  32  813c 3c74723e3c74  	dc.b	"<tr><td class='t1'"
  33  814e 3e3c2f74643e  	dc.b	"></td><td class='t"
  34  8160 33273e3c2f74  	dc.b	"3'></td><td class="
  35  8172 277431273e53  	dc.b	"'t1'>SET</td></tr>"
  36  8184 3c7472        	dc.b	"<tr"
  37  8187 3e3c74642063  	dc.b	"><td class='t1'>Ou"
  38  8199 747075743031  	dc.b	"tput01</td><td cla"
  39  81ab 73733d277325  	dc.b	"ss='s%i00'></td><t"
  40  81bd 6420636c6173  	dc.b	"d class='t1'><inpu"
  41  81cf 742074797065  	dc.b	"t type='radio' id="
  42  81e1 2730316f6e27  	dc.b	"'01on' name='o00' "
  43  81f3 76616c75653d  	dc.b	"value='1' %o00><la"
  44  8205 62656c20666f  	dc.b	"bel for='01on'>ON<"
  45  8217 2f6c6162656c  	dc.b	"/label><input type"
  46  8229 3d2772616469  	dc.b	"='radio' id='01off"
  47  823b 27206e616d65  	dc.b	"' name='o00' value"
  48  824d 3d2730272025  	dc.b	"='0' %p00><label f"
  49  825f 6f723d273031  	dc.b	"or='01off'>OFF</la"
  50  8271 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
  51  8283 3c7464        	dc.b	"<td"
  52  8286 20636c617373  	dc.b	" class='t1'>Output"
  53  8298 30323c2f7464  	dc.b	"02</td><td class='"
  54  82aa 732569303127  	dc.b	"s%i01'></td><td cl"
  55  82bc 6173733d2774  	dc.b	"ass='t1'><input ty"
  56  82ce 70653d277261  	dc.b	"pe='radio' id='02o"
  57  82e0 6e27206e616d  	dc.b	"n' name='o01' valu"
  58  82f2 653d27312720  	dc.b	"e='1' %o01><label "
  59  8304 666f723d2730  	dc.b	"for='02on'>ON</lab"
  60  8316 656c3e3c696e  	dc.b	"el><input type='ra"
  61  8328 64696f272069  	dc.b	"dio' id='02off' na"
  62  833a 6d653d276f30  	dc.b	"me='o01' value='0'"
  63  834c 20257030313e  	dc.b	" %p01><label for='"
  64  835e 30326f666627  	dc.b	"02off'>OFF</label>"
  65  8370 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
  66  8382 636c61        	dc.b	"cla"
  67  8385 73733d277431  	dc.b	"ss='t1'>Output03</"
  68  8397 74643e3c7464  	dc.b	"td><td class='s%i0"
  69  83a9 32273e3c2f74  	dc.b	"2'></td><td class="
  70  83bb 277431273e3c  	dc.b	"'t1'><input type='"
  71  83cd 726164696f27  	dc.b	"radio' id='03on' n"
  72  83df 616d653d276f  	dc.b	"ame='o02' value='1"
  73  83f1 2720256f3032  	dc.b	"' %o02><label for="
  74  8403 2730336f6e27  	dc.b	"'03on'>ON</label><"
  75  8415 696e70757420  	dc.b	"input type='radio'"
  76  8427 2069643d2730  	dc.b	" id='03off' name='"
  77  8439 6f3032272076  	dc.b	"o02' value='0' %p0"
  78  844b 323e3c6c6162  	dc.b	"2><label for='03of"
  79  845d 66273e4f4646  	dc.b	"f'>OFF</label></td"
  80  846f 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
  81  8481 733d27        	dc.b	"s='"
  82  8484 7431273e4f75  	dc.b	"t1'>Output04</td><"
  83  8496 746420636c61  	dc.b	"td class='s%i03'><"
  84  84a8 2f74643e3c74  	dc.b	"/td><td class='t1'"
  85  84ba 3e3c696e7075  	dc.b	"><input type='radi"
  86  84cc 6f272069643d  	dc.b	"o' id='04on' name="
  87  84de 276f30332720  	dc.b	"'o03' value='1' %o"
  88  84f0 30333e3c6c61  	dc.b	"03><label for='04o"
  89  8502 6e273e4f4e3c  	dc.b	"n'>ON</label><inpu"
  90  8514 742074797065  	dc.b	"t type='radio' id="
  91  8526 2730346f6666  	dc.b	"'04off' name='o03'"
  92  8538 2076616c7565  	dc.b	" value='0' %p03><l"
  93  854a 6162656c2066  	dc.b	"abel for='04off'>O"
  94  855c 46463c2f6c61  	dc.b	"FF</label></td></t"
  95  856e 723e3c74723e  	dc.b	"r><tr><td class='t"
  96  8580 31273e        	dc.b	"1'>"
  97  8583 4f7574707574  	dc.b	"Output05</td><td c"
  98  8595 6c6173733d27  	dc.b	"lass='s%i04'></td>"
  99  85a7 3c746420636c  	dc.b	"<td class='t1'><in"
 100  85b9 707574207479  	dc.b	"put type='radio' i"
 101  85cb 643d2730356f  	dc.b	"d='05on' name='o04"
 102  85dd 272076616c75  	dc.b	"' value='1' %o04><"
 103  85ef 6c6162656c20  	dc.b	"label for='05on'>O"
 104  8601 4e3c2f6c6162  	dc.b	"N</label><input ty"
 105  8613 70653d277261  	dc.b	"pe='radio' id='05o"
 106  8625 666627206e61  	dc.b	"ff' name='o04' val"
 107  8637 75653d273027  	dc.b	"ue='0' %p04><label"
 108  8649 20666f723d27  	dc.b	" for='05off'>OFF</"
 109  865b 6c6162656c3e  	dc.b	"label></td></tr><t"
 110  866d 723e3c746420  	dc.b	"r><td class='t1'>O"
 111  867f 757470        	dc.b	"utp"
 112  8682 757430363c2f  	dc.b	"ut06</td><td class"
 113  8694 3d2773256930  	dc.b	"='s%i05'></td><td "
 114  86a6 636c6173733d  	dc.b	"class='t1'><input "
 115  86b8 747970653d27  	dc.b	"type='radio' id='0"
 116  86ca 366f6e27206e  	dc.b	"6on' name='o05' va"
 117  86dc 6c75653d2731  	dc.b	"lue='1' %o05><labe"
 118  86ee 6c20666f723d  	dc.b	"l for='06on'>ON</l"
 119  8700 6162656c3e3c  	dc.b	"abel><input type='"
 120  8712 726164696f27  	dc.b	"radio' id='06off' "
 121  8724 6e616d653d27  	dc.b	"name='o05' value='"
 122  8736 302720257030  	dc.b	"0' %p05><label for"
 123  8748 3d2730366f66  	dc.b	"='06off'>OFF</labe"
 124  875a 6c3e3c2f7464  	dc.b	"l></td></tr><tr><t"
 125  876c 6420636c6173  	dc.b	"d class='t1'>Outpu"
 126  877e 743037        	dc.b	"t07"
 127  8781 3c2f74643e3c  	dc.b	"</td><td class='s%"
 128  8793 693036273e3c  	dc.b	"i06'></td><td clas"
 129  87a5 733d27743127  	dc.b	"s='t1'><input type"
 130  87b7 3d2772616469  	dc.b	"='radio' id='07on'"
 131  87c9 206e616d653d  	dc.b	" name='o06' value="
 132  87db 27312720256f  	dc.b	"'1' %o06><label fo"
 133  87ed 723d2730376f  	dc.b	"r='07on'>ON</label"
 134  87ff 3e3c696e7075  	dc.b	"><input type='radi"
 135  8811 6f272069643d  	dc.b	"o' id='07off' name"
 136  8823 3d276f303627  	dc.b	"='o06' value='0' %"
 137  8835 7030363e3c6c  	dc.b	"p06><label for='07"
 138  8847 6f6666273e4f  	dc.b	"off'>OFF</label></"
 139  8859 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 140  886b 6173733d2774  	dc.b	"ass='t1'>Output08<"
 141  887d 2f7464        	dc.b	"/td"
 142  8880 3e3c74642063  	dc.b	"><td class='s%i07'"
 143  8892 3e3c2f74643e  	dc.b	"></td><td class='t"
 144  88a4 31273e3c696e  	dc.b	"1'><input type='ra"
 145  88b6 64696f272069  	dc.b	"dio' id='08on' nam"
 146  88c8 653d276f3037  	dc.b	"e='o07' value='1' "
 147  88da 256f30373e3c  	dc.b	"%o07><label for='0"
 148  88ec 386f6e273e4f  	dc.b	"8on'>ON</label><in"
 149  88fe 707574207479  	dc.b	"put type='radio' i"
 150  8910 643d2730386f  	dc.b	"d='08off' name='o0"
 151  8922 37272076616c  	dc.b	"7' value='0' %p07>"
 152  8934 3c6c6162656c  	dc.b	"<label for='08off'"
 153  8946 3e4f46463c2f  	dc.b	">OFF</label></td><"
 154  8958 2f74723e3c2f  	dc.b	"/tr></table><table"
 155  896a 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 156  897c 273e49        	dc.b	"'>I"
 157  897f 6e7075743031  	dc.b	"nput01</td><td cla"
 158  8991 73733d277325  	dc.b	"ss='s%i08'></td></"
 159  89a3 74723e3c7472  	dc.b	"tr><tr><td class='"
 160  89b5 7431273e496e  	dc.b	"t1'>Input02</td><t"
 161  89c7 6420636c6173  	dc.b	"d class='s%i09'></"
 162  89d9 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 163  89eb 6173733d2774  	dc.b	"ass='t1'>Input03</"
 164  89fd 74643e3c7464  	dc.b	"td><td class='s%i1"
 165  8a0f 30273e3c2f74  	dc.b	"0'></td></tr><tr><"
 166  8a21 746420636c61  	dc.b	"td class='t1'>Inpu"
 167  8a33 7430343c2f74  	dc.b	"t04</td><td class="
 168  8a45 277325693131  	dc.b	"'s%i11'></td></tr>"
 169  8a57 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 170  8a69 3e496e707574  	dc.b	">Input05</td><td c"
 171  8a7b 6c6173        	dc.b	"las"
 172  8a7e 733d27732569  	dc.b	"s='s%i12'></td></t"
 173  8a90 723e3c74723e  	dc.b	"r><tr><td class='t"
 174  8aa2 31273e496e70  	dc.b	"1'>Input06</td><td"
 175  8ab4 20636c617373  	dc.b	" class='s%i13'></t"
 176  8ac6 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 177  8ad8 73733d277431  	dc.b	"ss='t1'>Input07</t"
 178  8aea 643e3c746420  	dc.b	"d><td class='s%i14"
 179  8afc 273e3c2f7464  	dc.b	"'></td></tr><tr><t"
 180  8b0e 6420636c6173  	dc.b	"d class='t1'>Input"
 181  8b20 30383c2f7464  	dc.b	"08</td><td class='"
 182  8b32 732569313527  	dc.b	"s%i15'></td></tr><"
 183  8b44 2f7461626c65  	dc.b	"/table><input type"
 184  8b56 3d2768696464  	dc.b	"='hidden' name='z0"
 185  8b68 30272076616c  	dc.b	"0' value='0'><butt"
 186  8b7a 6f6e20        	dc.b	"on "
 187  8b7d 747970653d27  	dc.b	"type='submit' titl"
 188  8b8f 653d27536176  	dc.b	"e='Saves your chan"
 189  8ba1 676573207468  	dc.b	"ges then restarts "
 190  8bb3 746865204e65  	dc.b	"the Network Module"
 191  8bc5 273e53617665  	dc.b	"'>Save</button><bu"
 192  8bd7 74746f6e2074  	dc.b	"tton type='reset' "
 193  8be9 7469746c653d  	dc.b	"title='Un-does any"
 194  8bfb 206368616e67  	dc.b	" changes that have"
 195  8c0d 206e6f742062  	dc.b	" not been saved'>U"
 196  8c1f 6e646f20416c  	dc.b	"ndo All</button></"
 197  8c31 666f726d3e25  	dc.b	"form>%y03/60%y02Re"
 198  8c43 66726573683c  	dc.b	"fresh</button></fo"
 199  8c55 726d3e257930  	dc.b	"rm>%y03/61%y02Conf"
 200  8c67 696775726174  	dc.b	"iguration</button>"
 201  8c79 3c2f66        	dc.b	"</f"
 202  8c7c 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 203  8c8f               L51_g_HtmlPageConfiguration:
 204  8c8f 257930342579  	dc.b	"%y04%y05%y06<title"
 205  8ca1 3e436f6e6669  	dc.b	">Configuration</ti"
 206  8cb3 746c653e3c2f  	dc.b	"tle></head><body><"
 207  8cc5 68313e436f6e  	dc.b	"h1>Configuration</"
 208  8cd7 68313e3c666f  	dc.b	"h1><form method='P"
 209  8ce9 4f5354272061  	dc.b	"OST' action='/'><t"
 210  8cfb 61626c653e3c  	dc.b	"able><tr><td class"
 211  8d0d 3d277431273e  	dc.b	"='t1'>Name:</td><t"
 212  8d1f 643e3c696e70  	dc.b	"d><input name='a00"
 213  8d31 2720636c6173  	dc.b	"' class='t2' value"
 214  8d43 3d2725613030  	dc.b	"='%a00' pattern='["
 215  8d55 302d39612d7a  	dc.b	"0-9a-zA-Z-_*.]{1,1"
 216  8d67 397d27207265  	dc.b	"9}' required title"
 217  8d79 3d273120746f  	dc.b	"='1 to 19 letters,"
 218  8d8b 206e75        	dc.b	" nu"
 219  8d8e 6d626572732c  	dc.b	"mbers, and -_*. no"
 220  8da0 207370616365  	dc.b	" spaces' maxlength"
 221  8db2 3d273139273e  	dc.b	"='19'></td></tr></"
 222  8dc4 7461626c653e  	dc.b	"table><table><tr><"
 223  8dd6 746420636c61  	dc.b	"td class='t1'>Conf"
 224  8de8 69673c2f7464  	dc.b	"ig</td><td><input "
 225  8dfa 6e616d653d27  	dc.b	"name='g00' class='"
 226  8e0c 743527207661  	dc.b	"t5' value='%g00' p"
 227  8e1e 61747465726e  	dc.b	"attern='[0-9a-zA-Z"
 228  8e30 5d7b367d2720  	dc.b	"]{6}' title='6 cha"
 229  8e42 726163746572  	dc.b	"racters required. "
 230  8e54 53656520446f  	dc.b	"See Documentation'"
 231  8e66 206d61786c65  	dc.b	" maxlength='6'></t"
 232  8e78 643e3c2f7472  	dc.b	"d></tr></table><p>"
 233  8e8a 3c2f70        	dc.b	"</p"
 234  8e8d 3e3c7461626c  	dc.b	"><table><tr><td cl"
 235  8e9f 6173733d2774  	dc.b	"ass='t1'>IP Addres"
 236  8eb1 733c2f74643e  	dc.b	"s</td><td><input n"
 237  8ec3 616d653d2762  	dc.b	"ame='b00' class='t"
 238  8ed5 36272076616c  	dc.b	"6' value='%b00' %y"
 239  8ee7 30303c74643e  	dc.b	"00<td><input name="
 240  8ef9 276230312720  	dc.b	"'b01' class='t6' v"
 241  8f0b 616c75653d27  	dc.b	"alue='%b01' %y00<t"
 242  8f1d 643e3c696e70  	dc.b	"d><input name='b02"
 243  8f2f 2720636c6173  	dc.b	"' class='t6' value"
 244  8f41 3d2725623032  	dc.b	"='%b02' %y00<td><i"
 245  8f53 6e707574206e  	dc.b	"nput name='b03' cl"
 246  8f65 6173733d2774  	dc.b	"ass='t6' value='%b"
 247  8f77 303327202579  	dc.b	"03' %y00</tr><tr><"
 248  8f89 746420        	dc.b	"td "
 249  8f8c 636c6173733d  	dc.b	"class='t1'>Gateway"
 250  8f9e 3c2f74643e3c  	dc.b	"</td><td><input na"
 251  8fb0 6d653d276230  	dc.b	"me='b04' class='t6"
 252  8fc2 272076616c75  	dc.b	"' value='%b04' %y0"
 253  8fd4 303c74643e3c  	dc.b	"0<td><input name='"
 254  8fe6 623035272063  	dc.b	"b05' class='t6' va"
 255  8ff8 6c75653d2725  	dc.b	"lue='%b05' %y00<td"
 256  900a 3e3c696e7075  	dc.b	"><input name='b06'"
 257  901c 20636c617373  	dc.b	" class='t6' value="
 258  902e 272562303627  	dc.b	"'%b06' %y00<td><in"
 259  9040 707574206e61  	dc.b	"put name='b07' cla"
 260  9052 73733d277436  	dc.b	"ss='t6' value='%b0"
 261  9064 372720257930  	dc.b	"7' %y00</tr><tr><t"
 262  9076 6420636c6173  	dc.b	"d class='t1'>Netma"
 263  9088 736b3c        	dc.b	"sk<"
 264  908b 2f74643e3c74  	dc.b	"/td><td><input nam"
 265  909d 653d27623038  	dc.b	"e='b08' class='t6'"
 266  90af 2076616c7565  	dc.b	" value='%b08' %y00"
 267  90c1 3c74643e3c69  	dc.b	"<td><input name='b"
 268  90d3 30392720636c  	dc.b	"09' class='t6' val"
 269  90e5 75653d272562  	dc.b	"ue='%b09' %y00<td>"
 270  90f7 3c696e707574  	dc.b	"<input name='b10' "
 271  9109 636c6173733d  	dc.b	"class='t6' value='"
 272  911b 256231302720  	dc.b	"%b10' %y00<td><inp"
 273  912d 7574206e616d  	dc.b	"ut name='b11' clas"
 274  913f 733d27743627  	dc.b	"s='t6' value='%b11"
 275  9151 272025793030  	dc.b	"' %y00</tr></table"
 276  9163 3e3c7461626c  	dc.b	"><table><tr><td cl"
 277  9175 6173733d2774  	dc.b	"ass='t1'>Port</td>"
 278  9187 3c7464        	dc.b	"<td"
 279  918a 3e3c696e7075  	dc.b	"><input name='c00'"
 280  919c 20636c617373  	dc.b	" class='t8' value="
 281  91ae 272563303027  	dc.b	"'%c00' pattern='[0"
 282  91c0 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 283  91d2 657220303030  	dc.b	"er 00010 to 65535'"
 284  91e4 206d61786c65  	dc.b	" maxlength='5'></t"
 285  91f6 643e3c2f7472  	dc.b	"d></tr></table><ta"
 286  9208 626c653e3c74  	dc.b	"ble><tr><td class="
 287  921a 277431273e4d  	dc.b	"'t1'>MAC Address</"
 288  922c 74643e3c7464  	dc.b	"td><td><input name"
 289  923e 3d2764303027  	dc.b	"='d00' class='t7' "
 290  9250 76616c75653d  	dc.b	"value='%d00' %y01<"
 291  9262 74643e3c696e  	dc.b	"td><input name='d0"
 292  9274 312720636c61  	dc.b	"1' class='t7' valu"
 293  9286 653d27        	dc.b	"e='"
 294  9289 256430312720  	dc.b	"%d01' %y01<td><inp"
 295  929b 7574206e616d  	dc.b	"ut name='d02' clas"
 296  92ad 733d27743727  	dc.b	"s='t7' value='%d02"
 297  92bf 272025793031  	dc.b	"' %y01<td><input n"
 298  92d1 616d653d2764  	dc.b	"ame='d03' class='t"
 299  92e3 37272076616c  	dc.b	"7' value='%d03' %y"
 300  92f5 30313c74643e  	dc.b	"01<td><input name="
 301  9307 276430342720  	dc.b	"'d04' class='t7' v"
 302  9319 616c75653d27  	dc.b	"alue='%d04' %y01<t"
 303  932b 643e3c696e70  	dc.b	"d><input name='d05"
 304  933d 2720636c6173  	dc.b	"' class='t7' value"
 305  934f 3d2725643035  	dc.b	"='%d05' %y01</tr><"
 306  9361 2f7461626c65  	dc.b	"/table><p></p><tab"
 307  9373 6c653e3c7472  	dc.b	"le><tr><td class='"
 308  9385 743127        	dc.b	"t1'"
 309  9388 3e4d51545420  	dc.b	">MQTT Server</td><"
 310  939a 74643e3c696e  	dc.b	"td><input name='b1"
 311  93ac 322720636c61  	dc.b	"2' class='t6' valu"
 312  93be 653d27256231  	dc.b	"e='%b12' %y00<td><"
 313  93d0 696e70757420  	dc.b	"input name='b13' c"
 314  93e2 6c6173733d27  	dc.b	"lass='t6' value='%"
 315  93f4 623133272025  	dc.b	"b13' %y00<td><inpu"
 316  9406 74206e616d65  	dc.b	"t name='b14' class"
 317  9418 3d2774362720  	dc.b	"='t6' value='%b14'"
 318  942a 20257930303c  	dc.b	" %y00<td><input na"
 319  943c 6d653d276231  	dc.b	"me='b15' class='t6"
 320  944e 272076616c75  	dc.b	"' value='%b15' %y0"
 321  9460 303c2f74723e  	dc.b	"0</tr></table><tab"
 322  9472 6c653e3c7472  	dc.b	"le><tr><td class='"
 323  9484 743127        	dc.b	"t1'"
 324  9487 3e4d51545420  	dc.b	">MQTT Port</td><td"
 325  9499 3e3c696e7075  	dc.b	"><input name='c01'"
 326  94ab 20636c617373  	dc.b	" class='t8' value="
 327  94bd 272563303127  	dc.b	"'%c01' pattern='[0"
 328  94cf 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 329  94e1 657220303030  	dc.b	"er 00010 to 65535'"
 330  94f3 206d61786c65  	dc.b	" maxlength='5'></t"
 331  9505 643e3c2f7472  	dc.b	"d></tr></table><ta"
 332  9517 626c653e3c74  	dc.b	"ble><tr><td class="
 333  9529 277431273e4d  	dc.b	"'t1'>MQTT Username"
 334  953b 3c2f74643e3c  	dc.b	"</td><td><input na"
 335  954d 6d653d276c30  	dc.b	"me='l00' class='t1"
 336  955f 272076616c75  	dc.b	"' value='%l00' pat"
 337  9571 7465726e3d27  	dc.b	"tern='[0-9a-zA-Z-_"
 338  9583 2a2e5d        	dc.b	"*.]"
 339  9586 7b302c31307d  	dc.b	"{0,10}' title='0 t"
 340  9598 6f203130206c  	dc.b	"o 10 letters, numb"
 341  95aa 6572732c2061  	dc.b	"ers, and -_*. no s"
 342  95bc 70616365732e  	dc.b	"paces. Use none fo"
 343  95ce 72206e6f2065  	dc.b	"r no entry.' maxle"
 344  95e0 6e6774683d27  	dc.b	"ngth='10'></td></t"
 345  95f2 723e3c74723e  	dc.b	"r><tr><td class='t"
 346  9604 31273e4d5154  	dc.b	"1'>MQTT Password</"
 347  9616 74643e3c7464  	dc.b	"td><td><input name"
 348  9628 3d276d303027  	dc.b	"='m00' class='t1' "
 349  963a 76616c75653d  	dc.b	"value='%m00' patte"
 350  964c 726e3d275b30  	dc.b	"rn='[0-9a-zA-Z-_*."
 351  965e 5d7b302c3130  	dc.b	"]{0,10}' title='0 "
 352  9670 746f20313020  	dc.b	"to 10 letters, num"
 353  9682 626572        	dc.b	"ber"
 354  9685 732c20616e64  	dc.b	"s, and -_*. no spa"
 355  9697 6365732e2055  	dc.b	"ces. Use none for "
 356  96a9 6e6f20656e74  	dc.b	"no entry.' maxleng"
 357  96bb 74683d273130  	dc.b	"th='10'></td></tr>"
 358  96cd 3c2f7461626c  	dc.b	"</table><table><tr"
 359  96df 3e3c74642063  	dc.b	"><td class='t1'>MQ"
 360  96f1 545420537461  	dc.b	"TT Status  </td><t"
 361  9703 6420636c6173  	dc.b	"d class='s%n00'></"
 362  9715 74643e3c7464  	dc.b	"td><td class='s%n0"
 363  9727 31273e3c2f74  	dc.b	"1'></td><td class="
 364  9739 2773256e3032  	dc.b	"'s%n02'></td><td c"
 365  974b 6c6173733d27  	dc.b	"lass='s%n03'></td>"
 366  975d 3c746420636c  	dc.b	"<td class='s%n04'>"
 367  976f 3c2f74643e3c  	dc.b	"</td></tr></table>"
 368  9781 3c703e        	dc.b	"<p>"
 369  9784 3c2f703e3c69  	dc.b	"</p><input type='h"
 370  9796 696464656e27  	dc.b	"idden' name='z00' "
 371  97a8 76616c75653d  	dc.b	"value='1'><button "
 372  97ba 747970653d27  	dc.b	"type='submit'>Save"
 373  97cc 3c2f62757474  	dc.b	"</button><button t"
 374  97de 7970653d2772  	dc.b	"ype='reset'>Undo A"
 375  97f0 6c6c3c2f6275  	dc.b	"ll</button></form>"
 376  9802 3c703e536565  	dc.b	"<p>See Documentati"
 377  9814 6f6e20666f72  	dc.b	"on for help<br>Cod"
 378  9826 652052657669  	dc.b	"e Revision 2020120"
 379  9838 322031353437  	dc.b	"2 1547</p>%y03/91%"
 380  984a 793032526562  	dc.b	"y02Reboot</button>"
 381  985c 3c2f666f726d  	dc.b	"</form><br><br>%y0"
 382  986e 332f36312579  	dc.b	"3/61%y02Refresh</b"
 383  9880 757474        	dc.b	"utt"
 384  9883 6f6e3e3c2f66  	dc.b	"on></form>%y03/60%"
 385  9895 793032494f20  	dc.b	"y02IO Control</but"
 386  98a7 746f6e3e3c2f  	dc.b	"ton></form></body>"
 387  98b9 3c2f68746d6c  	dc.b	"</html>",0
 388  98c1               L71_g_HtmlPageRstate:
 389  98c1 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 390  98d3 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 391  98e5 6561643e3c74  	dc.b	"ead><title>Short F"
 392  98f7 6f726d3c2f74  	dc.b	"orm</title><link r"
 393  9909 656c3d276963  	dc.b	"el='icon' href='da"
 394  991b 74613a2c273e  	dc.b	"ta:,'></head><body"
 395  992d 3e3c703e2566  	dc.b	"><p>%f00</p></body"
 396  993f 3e3c2f68746d  	dc.b	"></html>",0
 397  9948               L12_g_HtmlPageSstate:
 398  9948 2566303000    	dc.b	"%f00",0
 399  994d               L32_page_string00:
 400  994d 706174746572  	dc.b	"pattern='[0-9]{3}'"
 401  995f 207469746c65  	dc.b	" title='Enter 000 "
 402  9971 746f20323535  	dc.b	"to 255' maxlength="
 403  9983 2733273e3c2f  	dc.b	"'3'></td>",0
 404  998d               L52_page_string00_len:
 405  998d 3f            	dc.b	63
 406  998e               L72_page_string00_len_less4:
 407  998e 3b            	dc.b	59
 408  998f               L13_page_string01:
 409  998f 706174746572  	dc.b	"pattern='[0-9a-f]{"
 410  99a1 327d27207469  	dc.b	"2}' title='Enter 0"
 411  99b3 3020746f2066  	dc.b	"0 to ff' maxlength"
 412  99c5 3d2732273e3c  	dc.b	"='2'></td>",0
 413  99d0               L33_page_string01_len:
 414  99d0 40            	dc.b	64
 415  99d1               L53_page_string01_len_less4:
 416  99d1 3c            	dc.b	60
 417  99d2               L73_page_string02:
 418  99d2 27206d657468  	dc.b	"' method='GET'><bu"
 419  99e4 74746f6e2074  	dc.b	"tton title='Save f"
 420  99f6 697273742120  	dc.b	"irst! This button "
 421  9a08 77696c6c206e  	dc.b	"will not save your"
 422  9a1a 206368616e67  	dc.b	" changes'>",0
 423  9a25               L14_page_string02_len:
 424  9a25 52            	dc.b	82
 425  9a26               L34_page_string02_len_less4:
 426  9a26 4e            	dc.b	78
 427  9a27               L54_page_string03:
 428  9a27 3c666f726d20  	dc.b	"<form style='displ"
 429  9a39 61793a20696e  	dc.b	"ay: inline' action"
 430  9a4b 3d2700        	dc.b	"='",0
 431  9a4e               L74_page_string03_len:
 432  9a4e 26            	dc.b	38
 433  9a4f               L15_page_string03_len_less4:
 434  9a4f 22            	dc.b	34
 435  9a50               L35_page_string04:
 436  9a50 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 437  9a62 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 438  9a74 6561643e3c6c  	dc.b	"ead><link rel='ico"
 439  9a86 6e2720687265  	dc.b	"n' href='data:,'>",0
 440  9a98               L55_page_string04_len:
 441  9a98 47            	dc.b	71
 442  9a99               L75_page_string04_len_less4:
 443  9a99 43            	dc.b	67
 444  9a9a               L16_page_string05:
 445  9a9a 3c7374796c65  	dc.b	"<style>.s0 { backg"
 446  9aac 726f756e642d  	dc.b	"round-color: red; "
 447  9abe 77696474683a  	dc.b	"width: 30px; }.s1 "
 448  9ad0 7b206261636b  	dc.b	"{ background-color"
 449  9ae2 3a2067726565  	dc.b	": green; width: 30"
 450  9af4 70783b207d2e  	dc.b	"px; }.t1 { width: "
 451  9b06 31323070783b  	dc.b	"120px; }.t2 { widt"
 452  9b18 683a20313438  	dc.b	"h: 148px; }.t3 { w"
 453  9b2a 696474683a20  	dc.b	"idth: 30px; }.t5 {"
 454  9b3c 207769647468  	dc.b	" width: 60px; }.t6"
 455  9b4e 207b20776964  	dc.b	" { width: 25px; }."
 456  9b60 7437207b2077  	dc.b	"t7 { width: 18px; "
 457  9b72 7d2e7438207b  	dc.b	"}.t8 { width: 40px"
 458  9b84 3b207d00      	dc.b	"; }",0
 459  9b88               L36_page_string05_len:
 460  9b88 ed            	dc.b	237
 461  9b89               L56_page_string05_len_less4:
 462  9b89 e9            	dc.b	233
 463  9b8a               L76_page_string06:
 464  9b8a 7464207b2074  	dc.b	"td { text-align: c"
 465  9b9c 656e7465723b  	dc.b	"enter; border: 1px"
 466  9bae 20626c61636b  	dc.b	" black solid; }</s"
 467  9bc0 74796c653e00  	dc.b	"tyle>",0
 468  9bc6               L17_page_string06_len:
 469  9bc6 3b            	dc.b	59
 470  9bc7               L37_page_string06_len_less4:
 471  9bc7 37            	dc.b	55
 526                     ; 1221 uint16_t adjust_template_size()
 526                     ; 1222 {
 528                     .text:	section	.text,new
 529  a2b3               _adjust_template_size:
 531  a2b3 89            	pushw	x
 532       00000002      OFST:	set	2
 535                     ; 1240   size = 0;
 537  a2b4 5f            	clrw	x
 538  a2b5 1f01          	ldw	(OFST-1,sp),x
 540                     ; 1245   if (current_webpage == WEBPAGE_IOCONTROL) {
 542  a2b7 c6001a        	ld	a,_current_webpage
 543  a2ba 2613          	jrne	L711
 544                     ; 1246     size = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
 546                     ; 1249     size = size + page_string04_len_less4
 546                     ; 1250                 + page_string05_len_less4
 546                     ; 1251 		+ page_string06_len_less4;
 548  a2bc ae0d69        	ldw	x,#3433
 549  a2bf 1f01          	ldw	(OFST-1,sp),x
 551                     ; 1256     size = size + strlen(stored_devicename) - 4 ;
 553  a2c1 ae4000        	ldw	x,#_stored_devicename
 554  a2c4 cdf456        	call	_strlen
 556  a2c7 72fb01        	addw	x,(OFST-1,sp)
 557  a2ca 1c00a4        	addw	x,#164
 559                     ; 1263     size = size - 48;
 562                     ; 1279     size = size - 8;
 565                     ; 1293     size = size + (2 * page_string03_len_less4);
 568                     ; 1322     size = size + (2 * (page_string02_len_less4));
 572  a2cd 2046          	jra	L121
 573  a2cf               L711:
 574                     ; 1341   else if (current_webpage == WEBPAGE_CONFIGURATION) {
 576  a2cf a101          	cp	a,#1
 577  a2d1 2632          	jrne	L321
 578                     ; 1342     size = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
 580                     ; 1345     size = size + page_string04_len_less4
 580                     ; 1346                 + page_string05_len_less4
 580                     ; 1347 		+ page_string06_len_less4;
 582  a2d3 ae0d94        	ldw	x,#3476
 583  a2d6 1f01          	ldw	(OFST-1,sp),x
 585                     ; 1352     size = size + strlen(stored_devicename) - 4 ;
 587  a2d8 ae4000        	ldw	x,#_stored_devicename
 588  a2db cdf456        	call	_strlen
 590  a2de 72fb01        	addw	x,(OFST-1,sp)
 591  a2e1 1d001c        	subw	x,#28
 593                     ; 1359     size = size - 12;
 596                     ; 1366     size = size + 1;
 599                     ; 1373     size = size - 12;
 602                     ; 1381     size = size + 2;
 605                     ; 1389     size = size - 4;
 608                     ; 1396     size = size + 1;
 610  a2e4 1f01          	ldw	(OFST-1,sp),x
 612                     ; 1401     size = size + (strlen(stored_mqtt_username) - 4);
 614  a2e6 ae4035        	ldw	x,#_stored_mqtt_username
 615  a2e9 cdf456        	call	_strlen
 617  a2ec 1d0004        	subw	x,#4
 618  a2ef 72fb01        	addw	x,(OFST-1,sp)
 619  a2f2 1f01          	ldw	(OFST-1,sp),x
 621                     ; 1406     size = size + (strlen(stored_mqtt_password) - 4);
 623  a2f4 ae4040        	ldw	x,#_stored_mqtt_password
 624  a2f7 cdf456        	call	_strlen
 626  a2fa 1d0004        	subw	x,#4
 627  a2fd 72fb01        	addw	x,(OFST-1,sp)
 629                     ; 1413     size = size - 15;
 631  a300 1c0659        	addw	x,#1625
 633                     ; 1427     size = size + (3 * page_string03_len_less4);
 636                     ; 1456     size = size + (12 * (page_string00_len_less4));
 639                     ; 1465     size = size + (4 * (page_string00_len_less4));
 642                     ; 1475     size = size + (6 * (page_string01_len_less4));
 645                     ; 1484     size = size + (3 * (page_string02_len_less4));
 649  a303 2010          	jra	L121
 650  a305               L321:
 651                     ; 1598   else if (current_webpage == WEBPAGE_RSTATE) {
 653  a305 a106          	cp	a,#6
 654  a307 2605          	jrne	L721
 655                     ; 1599     size = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
 657                     ; 1604     size = size + 12;
 659  a309 ae0092        	ldw	x,#146
 662  a30c 2007          	jra	L121
 663  a30e               L721:
 664                     ; 1611   else if (current_webpage == WEBPAGE_SSTATE) {
 666  a30e a107          	cp	a,#7
 667  a310 2603          	jrne	L121
 668                     ; 1612     size = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
 670                     ; 1617     size = size + 12;
 672  a312 ae0010        	ldw	x,#16
 674  a315               L121:
 675                     ; 1620   return size;
 679  a315 5b02          	addw	sp,#2
 680  a317 81            	ret	
 771                     ; 1624 void emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
 771                     ; 1625 {
 772                     .text:	section	.text,new
 773  a318               _emb_itoa:
 775  a318 5207          	subw	sp,#7
 776       00000007      OFST:	set	7
 779                     ; 1643   for (i=0; i < pad; i++) str[i] = '0';
 781  a31a 0f07          	clr	(OFST+0,sp)
 784  a31c 200a          	jra	L771
 785  a31e               L371:
 788  a31e 5f            	clrw	x
 789  a31f 97            	ld	xl,a
 790  a320 72fb0e        	addw	x,(OFST+7,sp)
 791  a323 a630          	ld	a,#48
 792  a325 f7            	ld	(x),a
 795  a326 0c07          	inc	(OFST+0,sp)
 797  a328               L771:
 800  a328 7b07          	ld	a,(OFST+0,sp)
 801  a32a 1111          	cp	a,(OFST+10,sp)
 802  a32c 25f0          	jrult	L371
 803                     ; 1644   str[pad] = '\0';
 805  a32e 7b11          	ld	a,(OFST+10,sp)
 806  a330 5f            	clrw	x
 807  a331 97            	ld	xl,a
 808  a332 72fb0e        	addw	x,(OFST+7,sp)
 809  a335 7f            	clr	(x)
 810                     ; 1645   if (num == 0) return;
 812  a336 96            	ldw	x,sp
 813  a337 1c000a        	addw	x,#OFST+3
 814  a33a cdf836        	call	c_lzmp
 816  a33d 2603cca3e7    	jreq	L02
 819                     ; 1648   i = 0;
 821  a342 0f07          	clr	(OFST+0,sp)
 824  a344 2060          	jra	L112
 825  a346               L502:
 826                     ; 1650     rem = (uint8_t)(num % base);
 828  a346 7b10          	ld	a,(OFST+9,sp)
 829  a348 b703          	ld	c_lreg+3,a
 830  a34a 3f02          	clr	c_lreg+2
 831  a34c 3f01          	clr	c_lreg+1
 832  a34e 3f00          	clr	c_lreg
 833  a350 96            	ldw	x,sp
 834  a351 5c            	incw	x
 835  a352 cdf849        	call	c_rtol
 838  a355 96            	ldw	x,sp
 839  a356 1c000a        	addw	x,#OFST+3
 840  a359 cdf6e3        	call	c_ltor
 842  a35c 96            	ldw	x,sp
 843  a35d 5c            	incw	x
 844  a35e cdf81c        	call	c_lumd
 846  a361 b603          	ld	a,c_lreg+3
 847  a363 6b06          	ld	(OFST-1,sp),a
 849                     ; 1651     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
 851  a365 a10a          	cp	a,#10
 852  a367 7b07          	ld	a,(OFST+0,sp)
 853  a369 250d          	jrult	L512
 856  a36b 0c07          	inc	(OFST+0,sp)
 858  a36d 5f            	clrw	x
 859  a36e 97            	ld	xl,a
 860  a36f 72fb0e        	addw	x,(OFST+7,sp)
 861  a372 7b06          	ld	a,(OFST-1,sp)
 862  a374 ab57          	add	a,#87
 864  a376 200b          	jra	L712
 865  a378               L512:
 866                     ; 1652     else str[i++] = (uint8_t)(rem + '0');
 868  a378 0c07          	inc	(OFST+0,sp)
 870  a37a 5f            	clrw	x
 871  a37b 97            	ld	xl,a
 872  a37c 72fb0e        	addw	x,(OFST+7,sp)
 873  a37f 7b06          	ld	a,(OFST-1,sp)
 874  a381 ab30          	add	a,#48
 875  a383               L712:
 876  a383 f7            	ld	(x),a
 877                     ; 1653     num = num/base;
 879  a384 7b10          	ld	a,(OFST+9,sp)
 880  a386 b703          	ld	c_lreg+3,a
 881  a388 3f02          	clr	c_lreg+2
 882  a38a 3f01          	clr	c_lreg+1
 883  a38c 3f00          	clr	c_lreg
 884  a38e 96            	ldw	x,sp
 885  a38f 5c            	incw	x
 886  a390 cdf849        	call	c_rtol
 889  a393 96            	ldw	x,sp
 890  a394 1c000a        	addw	x,#OFST+3
 891  a397 cdf6e3        	call	c_ltor
 893  a39a 96            	ldw	x,sp
 894  a39b 5c            	incw	x
 895  a39c cdf6f5        	call	c_ludv
 897  a39f 96            	ldw	x,sp
 898  a3a0 1c000a        	addw	x,#OFST+3
 899  a3a3 cdf849        	call	c_rtol
 901  a3a6               L112:
 902                     ; 1649   while (num != 0) {
 904  a3a6 96            	ldw	x,sp
 905  a3a7 1c000a        	addw	x,#OFST+3
 906  a3aa cdf836        	call	c_lzmp
 908  a3ad 2697          	jrne	L502
 909                     ; 1662     start = 0;
 911  a3af 0f06          	clr	(OFST-1,sp)
 913                     ; 1663     end = (uint8_t)(pad - 1);
 915  a3b1 7b11          	ld	a,(OFST+10,sp)
 916  a3b3 4a            	dec	a
 917  a3b4 6b07          	ld	(OFST+0,sp),a
 920  a3b6 2029          	jra	L522
 921  a3b8               L122:
 922                     ; 1666       temp = str[start];
 924  a3b8 5f            	clrw	x
 925  a3b9 97            	ld	xl,a
 926  a3ba 72fb0e        	addw	x,(OFST+7,sp)
 927  a3bd f6            	ld	a,(x)
 928  a3be 6b05          	ld	(OFST-2,sp),a
 930                     ; 1667       str[start] = str[end];
 932  a3c0 5f            	clrw	x
 933  a3c1 7b06          	ld	a,(OFST-1,sp)
 934  a3c3 97            	ld	xl,a
 935  a3c4 72fb0e        	addw	x,(OFST+7,sp)
 936  a3c7 7b07          	ld	a,(OFST+0,sp)
 937  a3c9 905f          	clrw	y
 938  a3cb 9097          	ld	yl,a
 939  a3cd 72f90e        	addw	y,(OFST+7,sp)
 940  a3d0 90f6          	ld	a,(y)
 941  a3d2 f7            	ld	(x),a
 942                     ; 1668       str[end] = temp;
 944  a3d3 5f            	clrw	x
 945  a3d4 7b07          	ld	a,(OFST+0,sp)
 946  a3d6 97            	ld	xl,a
 947  a3d7 72fb0e        	addw	x,(OFST+7,sp)
 948  a3da 7b05          	ld	a,(OFST-2,sp)
 949  a3dc f7            	ld	(x),a
 950                     ; 1669       start++;
 952  a3dd 0c06          	inc	(OFST-1,sp)
 954                     ; 1670       end--;
 956  a3df 0a07          	dec	(OFST+0,sp)
 958  a3e1               L522:
 959                     ; 1665     while (start < end) {
 959                     ; 1666       temp = str[start];
 959                     ; 1667       str[start] = str[end];
 959                     ; 1668       str[end] = temp;
 959                     ; 1669       start++;
 959                     ; 1670       end--;
 961  a3e1 7b06          	ld	a,(OFST-1,sp)
 962  a3e3 1107          	cp	a,(OFST+0,sp)
 963  a3e5 25d1          	jrult	L122
 964                     ; 1673 }
 965  a3e7               L02:
 968  a3e7 5b07          	addw	sp,#7
 969  a3e9 81            	ret	
1029                     ; 1676 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1029                     ; 1677 {
1030                     .text:	section	.text,new
1031  a3ea               L3_CopyStringP:
1033  a3ea 89            	pushw	x
1034  a3eb 5203          	subw	sp,#3
1035       00000003      OFST:	set	3
1038                     ; 1682   nBytes = 0;
1040  a3ed 5f            	clrw	x
1042  a3ee 2014          	jra	L362
1043  a3f0               L752:
1044                     ; 1684     **ppBuffer = Character;
1046  a3f0 1e04          	ldw	x,(OFST+1,sp)
1047  a3f2 fe            	ldw	x,(x)
1048  a3f3 f7            	ld	(x),a
1049                     ; 1685     *ppBuffer = *ppBuffer + 1;
1051  a3f4 1e04          	ldw	x,(OFST+1,sp)
1052  a3f6 9093          	ldw	y,x
1053  a3f8 fe            	ldw	x,(x)
1054  a3f9 5c            	incw	x
1055  a3fa 90ff          	ldw	(y),x
1056                     ; 1686     pString = pString + 1;
1058  a3fc 1e08          	ldw	x,(OFST+5,sp)
1059  a3fe 5c            	incw	x
1060  a3ff 1f08          	ldw	(OFST+5,sp),x
1061                     ; 1687     nBytes++;
1063  a401 1e01          	ldw	x,(OFST-2,sp)
1064  a403 5c            	incw	x
1065  a404               L362:
1066  a404 1f01          	ldw	(OFST-2,sp),x
1068                     ; 1683   while ((Character = pString[0]) != '\0') {
1068                     ; 1684     **ppBuffer = Character;
1068                     ; 1685     *ppBuffer = *ppBuffer + 1;
1068                     ; 1686     pString = pString + 1;
1068                     ; 1687     nBytes++;
1070  a406 1e08          	ldw	x,(OFST+5,sp)
1071  a408 f6            	ld	a,(x)
1072  a409 6b03          	ld	(OFST+0,sp),a
1074  a40b 26e3          	jrne	L752
1075                     ; 1689   return nBytes;
1077  a40d 1e01          	ldw	x,(OFST-2,sp)
1080  a40f 5b05          	addw	sp,#5
1081  a411 81            	ret	
1140                     ; 1693 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint16_t nDataLen)
1140                     ; 1694 {
1141                     .text:	section	.text,new
1142  a412               L5_CopyHttpHeader:
1144  a412 89            	pushw	x
1145  a413 5203          	subw	sp,#3
1146       00000003      OFST:	set	3
1149                     ; 1698   nBytes = 0;
1151  a415 5f            	clrw	x
1152  a416 1f02          	ldw	(OFST-1,sp),x
1154                     ; 1700   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1156  a418 ae9cbb        	ldw	x,#L313
1157  a41b 89            	pushw	x
1158  a41c 96            	ldw	x,sp
1159  a41d 1c0006        	addw	x,#OFST+3
1160  a420 cda3ea        	call	L3_CopyStringP
1162  a423 5b02          	addw	sp,#2
1163  a425 72fb02        	addw	x,(OFST-1,sp)
1164  a428 1f02          	ldw	(OFST-1,sp),x
1166                     ; 1701   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1168  a42a ae9cb8        	ldw	x,#L513
1169  a42d 89            	pushw	x
1170  a42e 96            	ldw	x,sp
1171  a42f 1c0006        	addw	x,#OFST+3
1172  a432 cda3ea        	call	L3_CopyStringP
1174  a435 5b02          	addw	sp,#2
1175  a437 72fb02        	addw	x,(OFST-1,sp)
1176  a43a 1f02          	ldw	(OFST-1,sp),x
1178                     ; 1703   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1180  a43c ae9ca8        	ldw	x,#L713
1181  a43f 89            	pushw	x
1182  a440 96            	ldw	x,sp
1183  a441 1c0006        	addw	x,#OFST+3
1184  a444 cda3ea        	call	L3_CopyStringP
1186  a447 5b02          	addw	sp,#2
1187  a449 72fb02        	addw	x,(OFST-1,sp)
1188  a44c 1f02          	ldw	(OFST-1,sp),x
1190                     ; 1707   emb_itoa(nDataLen, OctetArray, 10, 5);
1192  a44e 4b05          	push	#5
1193  a450 4b0a          	push	#10
1194  a452 ae005c        	ldw	x,#_OctetArray
1195  a455 89            	pushw	x
1196  a456 1e0c          	ldw	x,(OFST+9,sp)
1197  a458 cdf8aa        	call	c_uitolx
1199  a45b be02          	ldw	x,c_lreg+2
1200  a45d 89            	pushw	x
1201  a45e be00          	ldw	x,c_lreg
1202  a460 89            	pushw	x
1203  a461 cda318        	call	_emb_itoa
1205  a464 5b08          	addw	sp,#8
1206                     ; 1708   for (i=0; i<5; i++) {
1208  a466 4f            	clr	a
1209  a467 6b01          	ld	(OFST-2,sp),a
1211  a469               L123:
1212                     ; 1709     *pBuffer = (uint8_t)OctetArray[i];
1214  a469 5f            	clrw	x
1215  a46a 97            	ld	xl,a
1216  a46b d6005c        	ld	a,(_OctetArray,x)
1217  a46e 1e04          	ldw	x,(OFST+1,sp)
1218  a470 f7            	ld	(x),a
1219                     ; 1710     pBuffer = pBuffer + 1;
1221  a471 5c            	incw	x
1222  a472 1f04          	ldw	(OFST+1,sp),x
1223                     ; 1708   for (i=0; i<5; i++) {
1225  a474 0c01          	inc	(OFST-2,sp)
1229  a476 7b01          	ld	a,(OFST-2,sp)
1230  a478 a105          	cp	a,#5
1231  a47a 25ed          	jrult	L123
1232                     ; 1712   nBytes += 5;
1234  a47c 1e02          	ldw	x,(OFST-1,sp)
1235  a47e 1c0005        	addw	x,#5
1236  a481 1f02          	ldw	(OFST-1,sp),x
1238                     ; 1714   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1240  a483 ae9cb8        	ldw	x,#L513
1241  a486 89            	pushw	x
1242  a487 96            	ldw	x,sp
1243  a488 1c0006        	addw	x,#OFST+3
1244  a48b cda3ea        	call	L3_CopyStringP
1246  a48e 5b02          	addw	sp,#2
1247  a490 72fb02        	addw	x,(OFST-1,sp)
1248  a493 1f02          	ldw	(OFST-1,sp),x
1250                     ; 1717   nBytes += CopyStringP(&pBuffer, (const char *)("Cache-Control: no-cache, no-store\r\n"));
1252  a495 ae9c84        	ldw	x,#L723
1253  a498 89            	pushw	x
1254  a499 96            	ldw	x,sp
1255  a49a 1c0006        	addw	x,#OFST+3
1256  a49d cda3ea        	call	L3_CopyStringP
1258  a4a0 5b02          	addw	sp,#2
1259  a4a2 72fb02        	addw	x,(OFST-1,sp)
1260  a4a5 1f02          	ldw	(OFST-1,sp),x
1262                     ; 1719   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type: text/html; charset=utf-8\r\n"));
1264  a4a7 ae9c5b        	ldw	x,#L133
1265  a4aa 89            	pushw	x
1266  a4ab 96            	ldw	x,sp
1267  a4ac 1c0006        	addw	x,#OFST+3
1268  a4af cda3ea        	call	L3_CopyStringP
1270  a4b2 5b02          	addw	sp,#2
1271  a4b4 72fb02        	addw	x,(OFST-1,sp)
1272  a4b7 1f02          	ldw	(OFST-1,sp),x
1274                     ; 1721   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
1276  a4b9 ae9c48        	ldw	x,#L333
1277  a4bc 89            	pushw	x
1278  a4bd 96            	ldw	x,sp
1279  a4be 1c0006        	addw	x,#OFST+3
1280  a4c1 cda3ea        	call	L3_CopyStringP
1282  a4c4 5b02          	addw	sp,#2
1283  a4c6 72fb02        	addw	x,(OFST-1,sp)
1284  a4c9 1f02          	ldw	(OFST-1,sp),x
1286                     ; 1722   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1288  a4cb ae9cb8        	ldw	x,#L513
1289  a4ce 89            	pushw	x
1290  a4cf 96            	ldw	x,sp
1291  a4d0 1c0006        	addw	x,#OFST+3
1292  a4d3 cda3ea        	call	L3_CopyStringP
1294  a4d6 5b02          	addw	sp,#2
1295  a4d8 72fb02        	addw	x,(OFST-1,sp)
1297                     ; 1724   return nBytes;
1301  a4db 5b05          	addw	sp,#5
1302  a4dd 81            	ret	
1455                     	switch	.const
1456  9bc8               L431:
1457  9bc8 a690          	dc.w	L533
1458  9bca a69e          	dc.w	L733
1459  9bcc a6ac          	dc.w	L143
1460  9bce a6ba          	dc.w	L343
1461  9bd0 a6c8          	dc.w	L543
1462  9bd2 a6d6          	dc.w	L743
1463  9bd4 a6e4          	dc.w	L153
1464  9bd6 a6f1          	dc.w	L353
1465  9bd8 a6fe          	dc.w	L553
1466  9bda a70b          	dc.w	L753
1467  9bdc a718          	dc.w	L163
1468  9bde a725          	dc.w	L363
1469  9be0 a732          	dc.w	L563
1470  9be2 a73f          	dc.w	L763
1471  9be4 a74c          	dc.w	L173
1472  9be6 a759          	dc.w	L373
1473                     ; 1728 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
1473                     ; 1729 {
1474                     .text:	section	.text,new
1475  a4de               L7_CopyHttpData:
1477  a4de 89            	pushw	x
1478  a4df 5208          	subw	sp,#8
1479       00000008      OFST:	set	8
1482                     ; 1748   nBytes = 0;
1484  a4e1 5f            	clrw	x
1485  a4e2 1f05          	ldw	(OFST-3,sp),x
1487                     ; 1749   nParsedNum = 0;
1489  a4e4 0f07          	clr	(OFST-1,sp)
1491                     ; 1750   nParsedMode = 0;
1493  a4e6 0f04          	clr	(OFST-4,sp)
1495                     ; 1805   nMaxBytes = UIP_TCP_MSS - 25;
1497  a4e8 ae019f        	ldw	x,#415
1498  a4eb 1f11          	ldw	(OFST+9,sp),x
1500  a4ed ccaa48        	jra	L505
1501  a4f0               L305:
1502                     ; 1839     if (*pDataLeft > 0) {
1504  a4f0 1e0f          	ldw	x,(OFST+7,sp)
1505  a4f2 e601          	ld	a,(1,x)
1506  a4f4 fa            	or	a,(x)
1507  a4f5 2603ccaa51    	jreq	L705
1508                     ; 1846       if (insertion_flag[0] != 0) {
1510  a4fa c60017        	ld	a,_insertion_flag
1511  a4fd 2711          	jreq	L315
1512                     ; 1855         nParsedMode = insertion_flag[1];
1514  a4ff c60018        	ld	a,_insertion_flag+1
1515  a502 6b04          	ld	(OFST-4,sp),a
1517                     ; 1856         nParsedNum = insertion_flag[2];
1519  a504 c60019        	ld	a,_insertion_flag+2
1520  a507 6b07          	ld	(OFST-1,sp),a
1522                     ; 1857 	nByte = '0'; // Need to set nByte to something other than '%' so we
1524  a509 a630          	ld	a,#48
1525  a50b 6b02          	ld	(OFST-6,sp),a
1528  a50d cca5cf        	jra	L515
1529  a510               L315:
1530                     ; 1870         memcpy(&nByte, *ppData, 1);
1532  a510 96            	ldw	x,sp
1533  a511 1c0002        	addw	x,#OFST-6
1534  a514 bf04          	ldw	c_x,x
1535  a516 160d          	ldw	y,(OFST+5,sp)
1536  a518 90fe          	ldw	y,(y)
1537  a51a 90bf07        	ldw	c_y,y
1538  a51d ae0001        	ldw	x,#1
1539  a520               L25:
1540  a520 5a            	decw	x
1541  a521 92d607        	ld	a,([c_y.w],x)
1542  a524 92d704        	ld	([c_x.w],x),a
1543  a527 5d            	tnzw	x
1544  a528 26f6          	jrne	L25
1545                     ; 1913         if (nByte == '%') {
1547  a52a 7b02          	ld	a,(OFST-6,sp)
1548  a52c a125          	cp	a,#37
1549  a52e 26dd          	jrne	L515
1550                     ; 1914           *ppData = *ppData + 1;
1552  a530 1e0d          	ldw	x,(OFST+5,sp)
1553  a532 9093          	ldw	y,x
1554  a534 fe            	ldw	x,(x)
1555  a535 5c            	incw	x
1556  a536 90ff          	ldw	(y),x
1557                     ; 1915           *pDataLeft = *pDataLeft - 1;
1559  a538 1e0f          	ldw	x,(OFST+7,sp)
1560  a53a 9093          	ldw	y,x
1561  a53c fe            	ldw	x,(x)
1562  a53d 5a            	decw	x
1563  a53e 90ff          	ldw	(y),x
1564                     ; 1920           memcpy(&nParsedMode, *ppData, 1);
1566  a540 96            	ldw	x,sp
1567  a541 1c0004        	addw	x,#OFST-4
1568  a544 bf04          	ldw	c_x,x
1569  a546 160d          	ldw	y,(OFST+5,sp)
1570  a548 90fe          	ldw	y,(y)
1571  a54a 90bf07        	ldw	c_y,y
1572  a54d ae0001        	ldw	x,#1
1573  a550               L45:
1574  a550 5a            	decw	x
1575  a551 92d607        	ld	a,([c_y.w],x)
1576  a554 92d704        	ld	([c_x.w],x),a
1577  a557 5d            	tnzw	x
1578  a558 26f6          	jrne	L45
1579                     ; 1921           *ppData = *ppData + 1;
1581  a55a 1e0d          	ldw	x,(OFST+5,sp)
1582  a55c 9093          	ldw	y,x
1583  a55e fe            	ldw	x,(x)
1584  a55f 5c            	incw	x
1585  a560 90ff          	ldw	(y),x
1586                     ; 1922           *pDataLeft = *pDataLeft - 1;
1588  a562 1e0f          	ldw	x,(OFST+7,sp)
1589  a564 9093          	ldw	y,x
1590  a566 fe            	ldw	x,(x)
1591  a567 5a            	decw	x
1592  a568 90ff          	ldw	(y),x
1593                     ; 1927           memcpy(&temp, *ppData, 1);
1595  a56a 96            	ldw	x,sp
1596  a56b 5c            	incw	x
1597  a56c bf04          	ldw	c_x,x
1598  a56e 160d          	ldw	y,(OFST+5,sp)
1599  a570 90fe          	ldw	y,(y)
1600  a572 90bf07        	ldw	c_y,y
1601  a575 ae0001        	ldw	x,#1
1602  a578               L65:
1603  a578 5a            	decw	x
1604  a579 92d607        	ld	a,([c_y.w],x)
1605  a57c 92d704        	ld	([c_x.w],x),a
1606  a57f 5d            	tnzw	x
1607  a580 26f6          	jrne	L65
1608                     ; 1928           nParsedNum = (uint8_t)((temp - '0') * 10);
1610  a582 7b01          	ld	a,(OFST-7,sp)
1611  a584 97            	ld	xl,a
1612  a585 a60a          	ld	a,#10
1613  a587 42            	mul	x,a
1614  a588 9f            	ld	a,xl
1615  a589 a0e0          	sub	a,#224
1616  a58b 6b07          	ld	(OFST-1,sp),a
1618                     ; 1929           *ppData = *ppData + 1;
1620  a58d 1e0d          	ldw	x,(OFST+5,sp)
1621  a58f 9093          	ldw	y,x
1622  a591 fe            	ldw	x,(x)
1623  a592 5c            	incw	x
1624  a593 90ff          	ldw	(y),x
1625                     ; 1930           *pDataLeft = *pDataLeft - 1;
1627  a595 1e0f          	ldw	x,(OFST+7,sp)
1628  a597 9093          	ldw	y,x
1629  a599 fe            	ldw	x,(x)
1630  a59a 5a            	decw	x
1631  a59b 90ff          	ldw	(y),x
1632                     ; 1935           memcpy(&temp, *ppData, 1);
1634  a59d 96            	ldw	x,sp
1635  a59e 5c            	incw	x
1636  a59f bf04          	ldw	c_x,x
1637  a5a1 160d          	ldw	y,(OFST+5,sp)
1638  a5a3 90fe          	ldw	y,(y)
1639  a5a5 90bf07        	ldw	c_y,y
1640  a5a8 ae0001        	ldw	x,#1
1641  a5ab               L06:
1642  a5ab 5a            	decw	x
1643  a5ac 92d607        	ld	a,([c_y.w],x)
1644  a5af 92d704        	ld	([c_x.w],x),a
1645  a5b2 5d            	tnzw	x
1646  a5b3 26f6          	jrne	L06
1647                     ; 1936           nParsedNum = (uint8_t)(nParsedNum + temp - '0');
1649  a5b5 7b07          	ld	a,(OFST-1,sp)
1650  a5b7 1b01          	add	a,(OFST-7,sp)
1651  a5b9 a030          	sub	a,#48
1652  a5bb 6b07          	ld	(OFST-1,sp),a
1654                     ; 1937           *ppData = *ppData + 1;
1656  a5bd 1e0d          	ldw	x,(OFST+5,sp)
1657  a5bf 9093          	ldw	y,x
1658  a5c1 fe            	ldw	x,(x)
1659  a5c2 5c            	incw	x
1660  a5c3 90ff          	ldw	(y),x
1661                     ; 1938           *pDataLeft = *pDataLeft - 1;
1663  a5c5 1e0f          	ldw	x,(OFST+7,sp)
1664  a5c7 9093          	ldw	y,x
1665  a5c9 fe            	ldw	x,(x)
1666  a5ca 5a            	decw	x
1667  a5cb 90ff          	ldw	(y),x
1668  a5cd 7b02          	ld	a,(OFST-6,sp)
1669  a5cf               L515:
1670                     ; 1942       if ((nByte == '%') || (insertion_flag[0] != 0)) {
1672  a5cf a125          	cp	a,#37
1673  a5d1 2709          	jreq	L325
1675  a5d3 725d0017      	tnz	_insertion_flag
1676  a5d7 2603ccaa2b    	jreq	L125
1677  a5dc               L325:
1678                     ; 1952         if (nParsedMode == 'i') {
1680  a5dc 7b04          	ld	a,(OFST-4,sp)
1681  a5de a169          	cp	a,#105
1682  a5e0 2630          	jrne	L525
1683                     ; 1966           if (nParsedNum > 7) {
1685  a5e2 7b07          	ld	a,(OFST-1,sp)
1686  a5e4 a108          	cp	a,#8
1687  a5e6 2520          	jrult	L725
1688                     ; 1968 	    i = GpioGetPin(nParsedNum);
1690  a5e8 cdb97f        	call	_GpioGetPin
1692  a5eb 6b08          	ld	(OFST+0,sp),a
1694                     ; 1969 	    if (invert_input == 0x00) *pBuffer = (uint8_t)(i + '0');
1696  a5ed 725d0165      	tnz	_invert_input
1697  a5f1 2607          	jrne	L135
1700  a5f3 ab30          	add	a,#48
1701  a5f5 1e09          	ldw	x,(OFST+1,sp)
1703  a5f7 cca84c        	jra	LC008
1704  a5fa               L135:
1705                     ; 1971 	      if (i == 0) *pBuffer = (uint8_t)('1');
1707  a5fa 7b08          	ld	a,(OFST+0,sp)
1710  a5fc 2603cca957    	jreq	LC009
1711                     ; 1972 	      else *pBuffer = (uint8_t)('0');
1713  a601 1e09          	ldw	x,(OFST+1,sp)
1714  a603 a630          	ld	a,#48
1715                     ; 1974             pBuffer++;
1716                     ; 1975             nBytes++;
1718  a605 cca84c        	jp	LC008
1719  a608               L725:
1720                     ; 1979 	    *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
1722  a608 cdb97f        	call	_GpioGetPin
1724  a60b ab30          	add	a,#48
1725  a60d 1e09          	ldw	x,(OFST+1,sp)
1726                     ; 1980             pBuffer++;
1727                     ; 1981             nBytes++;
1728  a60f cca84c        	jp	LC008
1729  a612               L525:
1730                     ; 1999         else if ((nParsedMode == 'o' && ((uint8_t)(GpioGetPin(nParsedNum) == 1)))
1730                     ; 2000 	      || (nParsedMode == 'p' && ((uint8_t)(GpioGetPin(nParsedNum) == 0)))) { 
1732  a612 a16f          	cp	a,#111
1733  a614 260a          	jrne	L155
1735  a616 7b07          	ld	a,(OFST-1,sp)
1736  a618 cdb97f        	call	_GpioGetPin
1738  a61b 4a            	dec	a
1739  a61c 270e          	jreq	L745
1740  a61e 7b04          	ld	a,(OFST-4,sp)
1741  a620               L155:
1743  a620 a170          	cp	a,#112
1744  a622 2626          	jrne	L545
1746  a624 7b07          	ld	a,(OFST-1,sp)
1747  a626 cdb97f        	call	_GpioGetPin
1749  a629 4d            	tnz	a
1750  a62a 261e          	jrne	L545
1751  a62c               L745:
1752                     ; 2005           for(i=0; i<7; i++) {
1754  a62c 4f            	clr	a
1755  a62d 6b08          	ld	(OFST+0,sp),a
1757  a62f               L355:
1758                     ; 2006             *pBuffer = checked[i];
1760  a62f 5f            	clrw	x
1761  a630 97            	ld	xl,a
1762  a631 d68080        	ld	a,(L11_checked,x)
1763  a634 1e09          	ldw	x,(OFST+1,sp)
1764  a636 f7            	ld	(x),a
1765                     ; 2007             pBuffer++;
1767  a637 5c            	incw	x
1768  a638 1f09          	ldw	(OFST+1,sp),x
1769                     ; 2005           for(i=0; i<7; i++) {
1771  a63a 0c08          	inc	(OFST+0,sp)
1775  a63c 7b08          	ld	a,(OFST+0,sp)
1776  a63e a107          	cp	a,#7
1777  a640 25ed          	jrult	L355
1778                     ; 2009 	  nBytes += 7;
1780  a642 1e05          	ldw	x,(OFST-3,sp)
1781  a644 1c0007        	addw	x,#7
1783  a647 ccaa46        	jp	LC005
1784  a64a               L545:
1785                     ; 2012         else if (nParsedMode == 'a') {
1787  a64a 7b04          	ld	a,(OFST-4,sp)
1788  a64c a161          	cp	a,#97
1789  a64e 2629          	jrne	L365
1790                     ; 2014 	  for(i=0; i<19; i++) {
1792  a650 4f            	clr	a
1793  a651 6b08          	ld	(OFST+0,sp),a
1795  a653               L565:
1796                     ; 2015 	    if (stored_devicename[i] != '\0') {
1798  a653 5f            	clrw	x
1799  a654 97            	ld	xl,a
1800  a655 724d4000      	tnz	(_stored_devicename,x)
1801  a659 2603ccaa48    	jreq	L505
1802                     ; 2016               *pBuffer = (uint8_t)(stored_devicename[i]);
1804  a65e 5f            	clrw	x
1805  a65f 97            	ld	xl,a
1806  a660 d64000        	ld	a,(_stored_devicename,x)
1807  a663 1e09          	ldw	x,(OFST+1,sp)
1808  a665 f7            	ld	(x),a
1809                     ; 2017               pBuffer++;
1811  a666 5c            	incw	x
1812  a667 1f09          	ldw	(OFST+1,sp),x
1813                     ; 2018               nBytes++;
1815  a669 1e05          	ldw	x,(OFST-3,sp)
1816  a66b 5c            	incw	x
1817  a66c 1f05          	ldw	(OFST-3,sp),x
1820                     ; 2014 	  for(i=0; i<19; i++) {
1822  a66e 0c08          	inc	(OFST+0,sp)
1826  a670 7b08          	ld	a,(OFST+0,sp)
1827  a672 a113          	cp	a,#19
1828  a674 25dd          	jrult	L565
1829  a676 ccaa48        	jra	L505
1830  a679               L365:
1831                     ; 2024         else if (nParsedMode == 'b') {
1833  a679 a162          	cp	a,#98
1834  a67b 2703cca795    	jrne	L106
1835                     ; 2029           switch (nParsedNum)
1837  a680 7b07          	ld	a,(OFST-1,sp)
1839                     ; 2050 	    default: break;
1840  a682 a110          	cp	a,#16
1841  a684 2503cca777    	jruge	L506
1842  a689 5f            	clrw	x
1843  a68a 97            	ld	xl,a
1844  a68b 58            	sllw	x
1845  a68c de9bc8        	ldw	x,(L431,x)
1846  a68f fc            	jp	(x)
1847  a690               L533:
1848                     ; 2032 	    case 0:  emb_itoa(stored_hostaddr[3], OctetArray, 10, 3); break;
1850  a690 4b03          	push	#3
1851  a692 4b0a          	push	#10
1852  a694 ae005c        	ldw	x,#_OctetArray
1853  a697 89            	pushw	x
1854  a698 c6402a        	ld	a,_stored_hostaddr+3
1858  a69b cca764        	jp	LC001
1859  a69e               L733:
1860                     ; 2033 	    case 1:  emb_itoa(stored_hostaddr[2], OctetArray, 10, 3); break;
1862  a69e 4b03          	push	#3
1863  a6a0 4b0a          	push	#10
1864  a6a2 ae005c        	ldw	x,#_OctetArray
1865  a6a5 89            	pushw	x
1866  a6a6 c64029        	ld	a,_stored_hostaddr+2
1870  a6a9 cca764        	jp	LC001
1871  a6ac               L143:
1872                     ; 2034 	    case 2:  emb_itoa(stored_hostaddr[1], OctetArray, 10, 3); break;
1874  a6ac 4b03          	push	#3
1875  a6ae 4b0a          	push	#10
1876  a6b0 ae005c        	ldw	x,#_OctetArray
1877  a6b3 89            	pushw	x
1878  a6b4 c64028        	ld	a,_stored_hostaddr+1
1882  a6b7 cca764        	jp	LC001
1883  a6ba               L343:
1884                     ; 2035 	    case 3:  emb_itoa(stored_hostaddr[0], OctetArray, 10, 3); break;
1886  a6ba 4b03          	push	#3
1887  a6bc 4b0a          	push	#10
1888  a6be ae005c        	ldw	x,#_OctetArray
1889  a6c1 89            	pushw	x
1890  a6c2 c64027        	ld	a,_stored_hostaddr
1894  a6c5 cca764        	jp	LC001
1895  a6c8               L543:
1896                     ; 2036 	    case 4:  emb_itoa(stored_draddr[3],   OctetArray, 10, 3); break;
1898  a6c8 4b03          	push	#3
1899  a6ca 4b0a          	push	#10
1900  a6cc ae005c        	ldw	x,#_OctetArray
1901  a6cf 89            	pushw	x
1902  a6d0 c64026        	ld	a,_stored_draddr+3
1906  a6d3 cca764        	jp	LC001
1907  a6d6               L743:
1908                     ; 2037 	    case 5:  emb_itoa(stored_draddr[2],   OctetArray, 10, 3); break;
1910  a6d6 4b03          	push	#3
1911  a6d8 4b0a          	push	#10
1912  a6da ae005c        	ldw	x,#_OctetArray
1913  a6dd 89            	pushw	x
1914  a6de c64025        	ld	a,_stored_draddr+2
1918  a6e1 cca764        	jp	LC001
1919  a6e4               L153:
1920                     ; 2038 	    case 6:  emb_itoa(stored_draddr[1],   OctetArray, 10, 3); break;
1922  a6e4 4b03          	push	#3
1923  a6e6 4b0a          	push	#10
1924  a6e8 ae005c        	ldw	x,#_OctetArray
1925  a6eb 89            	pushw	x
1926  a6ec c64024        	ld	a,_stored_draddr+1
1930  a6ef 2073          	jp	LC001
1931  a6f1               L353:
1932                     ; 2039 	    case 7:  emb_itoa(stored_draddr[0],   OctetArray, 10, 3); break;
1934  a6f1 4b03          	push	#3
1935  a6f3 4b0a          	push	#10
1936  a6f5 ae005c        	ldw	x,#_OctetArray
1937  a6f8 89            	pushw	x
1938  a6f9 c64023        	ld	a,_stored_draddr
1942  a6fc 2066          	jp	LC001
1943  a6fe               L553:
1944                     ; 2040 	    case 8:  emb_itoa(stored_netmask[3],  OctetArray, 10, 3); break;
1946  a6fe 4b03          	push	#3
1947  a700 4b0a          	push	#10
1948  a702 ae005c        	ldw	x,#_OctetArray
1949  a705 89            	pushw	x
1950  a706 c64022        	ld	a,_stored_netmask+3
1954  a709 2059          	jp	LC001
1955  a70b               L753:
1956                     ; 2041 	    case 9:  emb_itoa(stored_netmask[2],  OctetArray, 10, 3); break;
1958  a70b 4b03          	push	#3
1959  a70d 4b0a          	push	#10
1960  a70f ae005c        	ldw	x,#_OctetArray
1961  a712 89            	pushw	x
1962  a713 c64021        	ld	a,_stored_netmask+2
1966  a716 204c          	jp	LC001
1967  a718               L163:
1968                     ; 2042 	    case 10: emb_itoa(stored_netmask[1],  OctetArray, 10, 3); break;
1970  a718 4b03          	push	#3
1971  a71a 4b0a          	push	#10
1972  a71c ae005c        	ldw	x,#_OctetArray
1973  a71f 89            	pushw	x
1974  a720 c64020        	ld	a,_stored_netmask+1
1978  a723 203f          	jp	LC001
1979  a725               L363:
1980                     ; 2043 	    case 11: emb_itoa(stored_netmask[0],  OctetArray, 10, 3); break;
1982  a725 4b03          	push	#3
1983  a727 4b0a          	push	#10
1984  a729 ae005c        	ldw	x,#_OctetArray
1985  a72c 89            	pushw	x
1986  a72d c6401f        	ld	a,_stored_netmask
1990  a730 2032          	jp	LC001
1991  a732               L563:
1992                     ; 2045 	    case 12: emb_itoa(stored_mqttserveraddr[3], OctetArray, 10, 3); break;
1994  a732 4b03          	push	#3
1995  a734 4b0a          	push	#10
1996  a736 ae005c        	ldw	x,#_OctetArray
1997  a739 89            	pushw	x
1998  a73a c64034        	ld	a,_stored_mqttserveraddr+3
2002  a73d 2025          	jp	LC001
2003  a73f               L763:
2004                     ; 2046 	    case 13: emb_itoa(stored_mqttserveraddr[2], OctetArray, 10, 3); break;
2006  a73f 4b03          	push	#3
2007  a741 4b0a          	push	#10
2008  a743 ae005c        	ldw	x,#_OctetArray
2009  a746 89            	pushw	x
2010  a747 c64033        	ld	a,_stored_mqttserveraddr+2
2014  a74a 2018          	jp	LC001
2015  a74c               L173:
2016                     ; 2047 	    case 14: emb_itoa(stored_mqttserveraddr[1], OctetArray, 10, 3); break;
2018  a74c 4b03          	push	#3
2019  a74e 4b0a          	push	#10
2020  a750 ae005c        	ldw	x,#_OctetArray
2021  a753 89            	pushw	x
2022  a754 c64032        	ld	a,_stored_mqttserveraddr+1
2026  a757 200b          	jp	LC001
2027  a759               L373:
2028                     ; 2048 	    case 15: emb_itoa(stored_mqttserveraddr[0], OctetArray, 10, 3); break;
2030  a759 4b03          	push	#3
2031  a75b 4b0a          	push	#10
2032  a75d ae005c        	ldw	x,#_OctetArray
2033  a760 89            	pushw	x
2034  a761 c64031        	ld	a,_stored_mqttserveraddr
2036  a764               LC001:
2037  a764 b703          	ld	c_lreg+3,a
2038  a766 3f02          	clr	c_lreg+2
2039  a768 3f01          	clr	c_lreg+1
2040  a76a 3f00          	clr	c_lreg
2041  a76c be02          	ldw	x,c_lreg+2
2042  a76e 89            	pushw	x
2043  a76f be00          	ldw	x,c_lreg
2044  a771 89            	pushw	x
2045  a772 cda318        	call	_emb_itoa
2046  a775 5b08          	addw	sp,#8
2049                     ; 2050 	    default: break;
2051  a777               L506:
2052                     ; 2054 	  for(i=0; i<3; i++) {
2054  a777 4f            	clr	a
2055  a778 6b08          	ld	(OFST+0,sp),a
2057  a77a               L706:
2058                     ; 2055 	    *pBuffer = (uint8_t)OctetArray[i];
2060  a77a 5f            	clrw	x
2061  a77b 97            	ld	xl,a
2062  a77c d6005c        	ld	a,(_OctetArray,x)
2063  a77f 1e09          	ldw	x,(OFST+1,sp)
2064  a781 f7            	ld	(x),a
2065                     ; 2056             pBuffer++;
2067  a782 5c            	incw	x
2068  a783 1f09          	ldw	(OFST+1,sp),x
2069                     ; 2054 	  for(i=0; i<3; i++) {
2071  a785 0c08          	inc	(OFST+0,sp)
2075  a787 7b08          	ld	a,(OFST+0,sp)
2076  a789 a103          	cp	a,#3
2077  a78b 25ed          	jrult	L706
2078                     ; 2058 	  nBytes += 3;
2080  a78d 1e05          	ldw	x,(OFST-3,sp)
2081  a78f 1c0003        	addw	x,#3
2083  a792 ccaa46        	jp	LC005
2084  a795               L106:
2085                     ; 2061         else if (nParsedMode == 'c') {
2087  a795 a163          	cp	a,#99
2088  a797 2648          	jrne	L716
2089                     ; 2070 	  if (nParsedNum == 0) emb_itoa(stored_port, OctetArray, 10, 5);
2091  a799 7b07          	ld	a,(OFST-1,sp)
2092  a79b 260d          	jrne	L126
2095  a79d 4b05          	push	#5
2096  a79f 4b0a          	push	#10
2097  a7a1 ae005c        	ldw	x,#_OctetArray
2098  a7a4 89            	pushw	x
2099  a7a5 ce401d        	ldw	x,_stored_port
2103  a7a8 200b          	jra	L326
2104  a7aa               L126:
2105                     ; 2072 	  else emb_itoa(stored_mqttport, OctetArray, 10, 5);
2107  a7aa 4b05          	push	#5
2108  a7ac 4b0a          	push	#10
2109  a7ae ae005c        	ldw	x,#_OctetArray
2110  a7b1 89            	pushw	x
2111  a7b2 ce402f        	ldw	x,_stored_mqttport
2114  a7b5               L326:
2115  a7b5 cdf8aa        	call	c_uitolx
2116  a7b8 be02          	ldw	x,c_lreg+2
2117  a7ba 89            	pushw	x
2118  a7bb be00          	ldw	x,c_lreg
2119  a7bd 89            	pushw	x
2120  a7be cda318        	call	_emb_itoa
2121  a7c1 5b08          	addw	sp,#8
2122                     ; 2076 	  for(i=0; i<5; i++) {
2124  a7c3 4f            	clr	a
2125  a7c4 6b08          	ld	(OFST+0,sp),a
2127  a7c6               L526:
2128                     ; 2077             *pBuffer = (uint8_t)OctetArray[i];
2130  a7c6 5f            	clrw	x
2131  a7c7 97            	ld	xl,a
2132  a7c8 d6005c        	ld	a,(_OctetArray,x)
2133  a7cb 1e09          	ldw	x,(OFST+1,sp)
2134  a7cd f7            	ld	(x),a
2135                     ; 2078             pBuffer++;
2137  a7ce 5c            	incw	x
2138  a7cf 1f09          	ldw	(OFST+1,sp),x
2139                     ; 2076 	  for(i=0; i<5; i++) {
2141  a7d1 0c08          	inc	(OFST+0,sp)
2145  a7d3 7b08          	ld	a,(OFST+0,sp)
2146  a7d5 a105          	cp	a,#5
2147  a7d7 25ed          	jrult	L526
2148                     ; 2080 	  nBytes += 5;
2150  a7d9 1e05          	ldw	x,(OFST-3,sp)
2151  a7db 1c0005        	addw	x,#5
2153  a7de ccaa46        	jp	LC005
2154  a7e1               L716:
2155                     ; 2083         else if (nParsedMode == 'd') {
2157  a7e1 a164          	cp	a,#100
2158  a7e3 266b          	jrne	L536
2159                     ; 2088 	  if (nParsedNum == 0) { OctetArray[0] = mac_string[0]; OctetArray[1] = mac_string[1]; }
2161  a7e5 7b07          	ld	a,(OFST-1,sp)
2162  a7e7 260a          	jrne	L736
2165  a7e9 55010c005c    	mov	_OctetArray,_mac_string
2168  a7ee 55010d005d    	mov	_OctetArray+1,_mac_string+1
2169  a7f3               L736:
2170                     ; 2089 	  if (nParsedNum == 1) { OctetArray[0] = mac_string[2]; OctetArray[1] = mac_string[3]; }
2172  a7f3 a101          	cp	a,#1
2173  a7f5 260a          	jrne	L146
2176  a7f7 55010e005c    	mov	_OctetArray,_mac_string+2
2179  a7fc 55010f005d    	mov	_OctetArray+1,_mac_string+3
2180  a801               L146:
2181                     ; 2090 	  if (nParsedNum == 2) { OctetArray[0] = mac_string[4]; OctetArray[1] = mac_string[5]; }
2183  a801 a102          	cp	a,#2
2184  a803 260a          	jrne	L346
2187  a805 550110005c    	mov	_OctetArray,_mac_string+4
2190  a80a 550111005d    	mov	_OctetArray+1,_mac_string+5
2191  a80f               L346:
2192                     ; 2091 	  if (nParsedNum == 3) { OctetArray[0] = mac_string[6]; OctetArray[1] = mac_string[7]; }
2194  a80f a103          	cp	a,#3
2195  a811 260a          	jrne	L546
2198  a813 550112005c    	mov	_OctetArray,_mac_string+6
2201  a818 550113005d    	mov	_OctetArray+1,_mac_string+7
2202  a81d               L546:
2203                     ; 2092 	  if (nParsedNum == 4) { OctetArray[0] = mac_string[8]; OctetArray[1] = mac_string[9]; }
2205  a81d a104          	cp	a,#4
2206  a81f 260a          	jrne	L746
2209  a821 550114005c    	mov	_OctetArray,_mac_string+8
2212  a826 550115005d    	mov	_OctetArray+1,_mac_string+9
2213  a82b               L746:
2214                     ; 2093 	  if (nParsedNum == 5) { OctetArray[0] = mac_string[10]; OctetArray[1] = mac_string[11]; }
2216  a82b a105          	cp	a,#5
2217  a82d 260a          	jrne	L156
2220  a82f 550116005c    	mov	_OctetArray,_mac_string+10
2223  a834 550117005d    	mov	_OctetArray+1,_mac_string+11
2224  a839               L156:
2225                     ; 2095           *pBuffer = OctetArray[0];
2227  a839 1e09          	ldw	x,(OFST+1,sp)
2228  a83b c6005c        	ld	a,_OctetArray
2229  a83e f7            	ld	(x),a
2230                     ; 2096           pBuffer++;
2232  a83f 5c            	incw	x
2233  a840 1f09          	ldw	(OFST+1,sp),x
2234                     ; 2097           nBytes++;
2236  a842 1e05          	ldw	x,(OFST-3,sp)
2237  a844 5c            	incw	x
2238  a845 1f05          	ldw	(OFST-3,sp),x
2240                     ; 2099           *pBuffer = OctetArray[1];
2242  a847 c6005d        	ld	a,_OctetArray+1
2243  a84a 1e09          	ldw	x,(OFST+1,sp)
2244  a84c               LC008:
2245  a84c f7            	ld	(x),a
2246                     ; 2100           pBuffer++;
2247                     ; 2101           nBytes++;
2249  a84d ccaa40        	jp	LC006
2250  a850               L536:
2251                     ; 2187         else if (nParsedMode == 'f') {
2253  a850 a166          	cp	a,#102
2254  a852 263d          	jrne	L556
2255                     ; 2202 	  for(i=0; i<16; i++) {
2257  a854 4f            	clr	a
2258  a855 6b08          	ld	(OFST+0,sp),a
2260  a857               L756:
2261                     ; 2203             if (i > 7) {
2263  a857 a108          	cp	a,#8
2264  a859 251b          	jrult	L566
2265                     ; 2205               j = GpioGetPin(i);
2267  a85b cdb97f        	call	_GpioGetPin
2269  a85e 6b03          	ld	(OFST-5,sp),a
2271                     ; 2206               if (invert_input == 0x00) *pBuffer = (uint8_t)(j + '0');
2273  a860 725d0165      	tnz	_invert_input
2276  a864 2713          	jreq	LC010
2277                     ; 2208                 if (j == 0) *pBuffer = (uint8_t)('1'); 
2279  a866 7b03          	ld	a,(OFST-5,sp)
2280  a868 2606          	jrne	L376
2283  a86a 1e09          	ldw	x,(OFST+1,sp)
2284  a86c a631          	ld	a,#49
2286  a86e 200d          	jra	L776
2287  a870               L376:
2288                     ; 2209                 else *pBuffer = (uint8_t)('0');
2290  a870 1e09          	ldw	x,(OFST+1,sp)
2291  a872 a630          	ld	a,#48
2292                     ; 2211               pBuffer++;
2294  a874 2007          	jra	L776
2295  a876               L566:
2296                     ; 2215               *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
2298  a876 cdb97f        	call	_GpioGetPin
2300  a879               LC010:
2302  a879 ab30          	add	a,#48
2303  a87b 1e09          	ldw	x,(OFST+1,sp)
2304                     ; 2216               pBuffer++;
2306  a87d               L776:
2307  a87d f7            	ld	(x),a
2309  a87e 5c            	incw	x
2310  a87f 1f09          	ldw	(OFST+1,sp),x
2311                     ; 2202 	  for(i=0; i<16; i++) {
2313  a881 0c08          	inc	(OFST+0,sp)
2317  a883 7b08          	ld	a,(OFST+0,sp)
2318  a885 a110          	cp	a,#16
2319  a887 25ce          	jrult	L756
2320                     ; 2219 	  nBytes += 16;
2322  a889 1e05          	ldw	x,(OFST-3,sp)
2323  a88b 1c0010        	addw	x,#16
2325  a88e ccaa46        	jp	LC005
2326  a891               L556:
2327                     ; 2238 else if (nParsedMode == 'g') {
2329  a891 a167          	cp	a,#103
2330  a893 261e          	jrne	L307
2331                     ; 2251 	  for(i = 0; i < 6; i++) {
2333  a895 4f            	clr	a
2334  a896 6b08          	ld	(OFST+0,sp),a
2336  a898               L507:
2337                     ; 2252             *pBuffer = stored_config_settings[i];
2339  a898 5f            	clrw	x
2340  a899 97            	ld	xl,a
2341  a89a d6404c        	ld	a,(_stored_config_settings,x)
2342  a89d 1e09          	ldw	x,(OFST+1,sp)
2343  a89f f7            	ld	(x),a
2344                     ; 2253             pBuffer++;
2346  a8a0 5c            	incw	x
2347  a8a1 1f09          	ldw	(OFST+1,sp),x
2348                     ; 2251 	  for(i = 0; i < 6; i++) {
2350  a8a3 0c08          	inc	(OFST+0,sp)
2354  a8a5 7b08          	ld	a,(OFST+0,sp)
2355  a8a7 a106          	cp	a,#6
2356  a8a9 25ed          	jrult	L507
2357                     ; 2255           nBytes += 6;
2359  a8ab 1e05          	ldw	x,(OFST-3,sp)
2360  a8ad 1c0006        	addw	x,#6
2362  a8b0 ccaa46        	jp	LC005
2363  a8b3               L307:
2364                     ; 2259         else if (nParsedMode == 'l') {
2366  a8b3 a16c          	cp	a,#108
2367  a8b5 2629          	jrne	L517
2368                     ; 2262           for(i=0; i<10; i++) {
2370  a8b7 4f            	clr	a
2371  a8b8 6b08          	ld	(OFST+0,sp),a
2373  a8ba               L717:
2374                     ; 2263 	    if (stored_mqtt_username[i] != '\0') {
2376  a8ba 5f            	clrw	x
2377  a8bb 97            	ld	xl,a
2378  a8bc 724d4035      	tnz	(_stored_mqtt_username,x)
2379  a8c0 2603ccaa48    	jreq	L505
2380                     ; 2264               *pBuffer = (uint8_t)(stored_mqtt_username[i]);
2382  a8c5 5f            	clrw	x
2383  a8c6 97            	ld	xl,a
2384  a8c7 d64035        	ld	a,(_stored_mqtt_username,x)
2385  a8ca 1e09          	ldw	x,(OFST+1,sp)
2386  a8cc f7            	ld	(x),a
2387                     ; 2265               pBuffer++;
2389  a8cd 5c            	incw	x
2390  a8ce 1f09          	ldw	(OFST+1,sp),x
2391                     ; 2266               nBytes++;
2393  a8d0 1e05          	ldw	x,(OFST-3,sp)
2394  a8d2 5c            	incw	x
2395  a8d3 1f05          	ldw	(OFST-3,sp),x
2398                     ; 2262           for(i=0; i<10; i++) {
2400  a8d5 0c08          	inc	(OFST+0,sp)
2404  a8d7 7b08          	ld	a,(OFST+0,sp)
2405  a8d9 a10a          	cp	a,#10
2406  a8db 25dd          	jrult	L717
2407  a8dd ccaa48        	jra	L505
2408  a8e0               L517:
2409                     ; 2272         else if (nParsedMode == 'm') {
2411  a8e0 a16d          	cp	a,#109
2412  a8e2 2626          	jrne	L337
2413                     ; 2275           for(i=0; i<10; i++) {
2415  a8e4 4f            	clr	a
2416  a8e5 6b08          	ld	(OFST+0,sp),a
2418  a8e7               L537:
2419                     ; 2276 	    if (stored_mqtt_password[i] != '\0') {
2421  a8e7 5f            	clrw	x
2422  a8e8 97            	ld	xl,a
2423  a8e9 724d4040      	tnz	(_stored_mqtt_password,x)
2424  a8ed 27ee          	jreq	L505
2425                     ; 2277               *pBuffer = (uint8_t)(stored_mqtt_password[i]);
2427  a8ef 5f            	clrw	x
2428  a8f0 97            	ld	xl,a
2429  a8f1 d64040        	ld	a,(_stored_mqtt_password,x)
2430  a8f4 1e09          	ldw	x,(OFST+1,sp)
2431  a8f6 f7            	ld	(x),a
2432                     ; 2278               pBuffer++;
2434  a8f7 5c            	incw	x
2435  a8f8 1f09          	ldw	(OFST+1,sp),x
2436                     ; 2279               nBytes++;
2438  a8fa 1e05          	ldw	x,(OFST-3,sp)
2439  a8fc 5c            	incw	x
2440  a8fd 1f05          	ldw	(OFST-3,sp),x
2443                     ; 2275           for(i=0; i<10; i++) {
2445  a8ff 0c08          	inc	(OFST+0,sp)
2449  a901 7b08          	ld	a,(OFST+0,sp)
2450  a903 a10a          	cp	a,#10
2451  a905 25e0          	jrult	L537
2452  a907 ccaa48        	jra	L505
2453  a90a               L337:
2454                     ; 2285         else if (nParsedMode == 'n') {
2456  a90a a16e          	cp	a,#110
2457  a90c 2657          	jrne	L157
2458                     ; 2289 	  no_err = 0;
2460  a90e 0f08          	clr	(OFST+0,sp)
2462                     ; 2290           switch (nParsedNum)
2464  a910 7b07          	ld	a,(OFST-1,sp)
2466                     ; 2312 	    default:
2466                     ; 2313 	      break;
2467  a912 270e          	jreq	L773
2468  a914 4a            	dec	a
2469  a915 2712          	jreq	L104
2470  a917 4a            	dec	a
2471  a918 2716          	jreq	L304
2472  a91a 4a            	dec	a
2473  a91b 271a          	jreq	L504
2474  a91d 4a            	dec	a
2475  a91e 271f          	jreq	L704
2476  a920 2030          	jra	L557
2477  a922               L773:
2478                     ; 2292 	    case 0:
2478                     ; 2293               // Connection request status
2478                     ; 2294 	      if (mqtt_start_status & MQTT_START_CONNECTIONS_GOOD) no_err = 1;
2480  a922 720900a72b    	btjf	_mqtt_start_status,#4,L557
2482  a927 2013          	jp	LC003
2483  a929               L104:
2484                     ; 2296 	    case 1:
2484                     ; 2297 	      // ARP request status
2484                     ; 2298 	      if (mqtt_start_status & MQTT_START_ARP_REQUEST_GOOD) no_err = 1;
2486  a929 720b00a724    	btjf	_mqtt_start_status,#5,L557
2488  a92e 200c          	jp	LC003
2489  a930               L304:
2490                     ; 2300 	    case 2:
2490                     ; 2301 	      // TCP connection status
2490                     ; 2302 	      if (mqtt_start_status & MQTT_START_TCP_CONNECT_GOOD) no_err = 1;
2492  a930 720d00a71d    	btjf	_mqtt_start_status,#6,L557
2494  a935 2005          	jp	LC003
2495  a937               L504:
2496                     ; 2304 	    case 3:
2496                     ; 2305 	      // MQTT Connection status 1
2496                     ; 2306 	      if (mqtt_start_status & MQTT_START_MQTT_CONNECT_GOOD) no_err = 1;
2498  a937 720f00a716    	btjf	_mqtt_start_status,#7,L557
2501  a93c               LC003:
2505  a93c 4c            	inc	a
2506  a93d 2011          	jp	LC002
2507  a93f               L704:
2508                     ; 2308 	    case 4:
2508                     ; 2309 	      // MQTT start complete with no errors
2508                     ; 2310 	      if ((MQTT_error_status == 1) && ((mqtt_start_status & 0xf0) == 0xf0) ) no_err = 1;
2510  a93f c6029b        	ld	a,_MQTT_error_status
2511  a942 4a            	dec	a
2512  a943 260d          	jrne	L557
2514  a945 c600a7        	ld	a,_mqtt_start_status
2515  a948 a4f0          	and	a,#240
2516  a94a a1f0          	cp	a,#240
2517  a94c 2604          	jrne	L557
2520  a94e a601          	ld	a,#1
2521  a950               LC002:
2522  a950 6b08          	ld	(OFST+0,sp),a
2524                     ; 2312 	    default:
2524                     ; 2313 	      break;
2526  a952               L557:
2527                     ; 2315 	  if (no_err == 1) *pBuffer = '1'; // Paint a green square
2529  a952 7b08          	ld	a,(OFST+0,sp)
2530  a954 4a            	dec	a
2531  a955 2607          	jrne	L177
2534  a957               LC009:
2536  a957 1e09          	ldw	x,(OFST+1,sp)
2537  a959 a631          	ld	a,#49
2539  a95b cca84c        	jra	LC008
2540  a95e               L177:
2541                     ; 2316 	  else *pBuffer = '0'; // Paint a red square
2543  a95e 1e09          	ldw	x,(OFST+1,sp)
2544  a960 a630          	ld	a,#48
2545                     ; 2317           pBuffer++;
2546                     ; 2318           nBytes++;
2548  a962 cca84c        	jp	LC008
2549  a965               L157:
2550                     ; 2322         else if (nParsedMode == 'y') {
2552  a965 a179          	cp	a,#121
2553  a967 269e          	jrne	L505
2554                     ; 2367 	  i = insertion_flag[0];
2556  a969 c60017        	ld	a,_insertion_flag
2557  a96c 6b08          	ld	(OFST+0,sp),a
2559                     ; 2368 	  insertion_flag[1] = nParsedMode;
2561  a96e 7b04          	ld	a,(OFST-4,sp)
2562  a970 c70018        	ld	_insertion_flag+1,a
2563                     ; 2369 	  insertion_flag[2] = nParsedNum;
2565  a973 7b07          	ld	a,(OFST-1,sp)
2566  a975 c70019        	ld	_insertion_flag+2,a
2567                     ; 2371           switch (nParsedNum)
2570                     ; 2419 	    default: break;
2571  a978 2718          	jreq	L314
2572  a97a 4a            	dec	a
2573  a97b 272a          	jreq	L514
2574  a97d 4a            	dec	a
2575  a97e 273c          	jreq	L714
2576  a980 4a            	dec	a
2577  a981 274e          	jreq	L124
2578  a983 4a            	dec	a
2579  a984 2760          	jreq	L324
2580  a986 4a            	dec	a
2581  a987 2772          	jreq	L524
2582  a989 4a            	dec	a
2583  a98a 2603ccaa10    	jreq	L724
2584  a98f ccaa3e        	jra	LC007
2585  a992               L314:
2586                     ; 2373 	    case 0:
2586                     ; 2374 	      // %y00 replaced with string 
2586                     ; 2375 	      // page_string00[] = "pattern='[0-9]{3}' title='Enter 000 to 255' maxlength='3'";
2586                     ; 2376               *pBuffer = (uint8_t)page_string00[i];
2588  a992 7b08          	ld	a,(OFST+0,sp)
2589  a994 5f            	clrw	x
2590  a995 97            	ld	xl,a
2591  a996 d6994d        	ld	a,(L32_page_string00,x)
2592  a999 1e09          	ldw	x,(OFST+1,sp)
2593  a99b f7            	ld	(x),a
2594                     ; 2377 	      insertion_flag[0]++;
2596  a99c 725c0017      	inc	_insertion_flag
2597                     ; 2378 	      if (insertion_flag[0] == page_string00_len) insertion_flag[0] = 0;
2599  a9a0 c60017        	ld	a,_insertion_flag
2600  a9a3 a13f          	cp	a,#63
2602  a9a5 207c          	jp	LC004
2603  a9a7               L514:
2604                     ; 2380 	    case 1:
2604                     ; 2381 	      // %y01 replaced with string 
2604                     ; 2382               // page_string01[] = "pattern='[0-9a-f]{2}' title='Enter 00 to ff' maxlength='2'";
2604                     ; 2383               *pBuffer = (uint8_t)page_string01[i];
2606  a9a7 7b08          	ld	a,(OFST+0,sp)
2607  a9a9 5f            	clrw	x
2608  a9aa 97            	ld	xl,a
2609  a9ab d6998f        	ld	a,(L13_page_string01,x)
2610  a9ae 1e09          	ldw	x,(OFST+1,sp)
2611  a9b0 f7            	ld	(x),a
2612                     ; 2384 	      insertion_flag[0]++;
2614  a9b1 725c0017      	inc	_insertion_flag
2615                     ; 2385 	      if (insertion_flag[0] == page_string01_len) insertion_flag[0] = 0;
2617  a9b5 c60017        	ld	a,_insertion_flag
2618  a9b8 a140          	cp	a,#64
2620  a9ba 2067          	jp	LC004
2621  a9bc               L714:
2622                     ; 2387 	    case 2:
2622                     ; 2388 	      // %y02 replaced with string 
2622                     ; 2389               // page_string02[] = "<button title='Save first! This button will not save your changes'>";
2622                     ; 2390               *pBuffer = (uint8_t)page_string02[i];
2624  a9bc 7b08          	ld	a,(OFST+0,sp)
2625  a9be 5f            	clrw	x
2626  a9bf 97            	ld	xl,a
2627  a9c0 d699d2        	ld	a,(L73_page_string02,x)
2628  a9c3 1e09          	ldw	x,(OFST+1,sp)
2629  a9c5 f7            	ld	(x),a
2630                     ; 2391 	      insertion_flag[0]++;
2632  a9c6 725c0017      	inc	_insertion_flag
2633                     ; 2392 	      if (insertion_flag[0] == page_string02_len) insertion_flag[0] = 0;
2635  a9ca c60017        	ld	a,_insertion_flag
2636  a9cd a152          	cp	a,#82
2638  a9cf 2052          	jp	LC004
2639  a9d1               L124:
2640                     ; 2394 	    case 3:
2640                     ; 2395 	      // %y03 replaced with string 
2640                     ; 2396               // page_string03[] = "<form style='display: inline' action='http://";
2640                     ; 2397               *pBuffer = (uint8_t)page_string03[i];
2642  a9d1 7b08          	ld	a,(OFST+0,sp)
2643  a9d3 5f            	clrw	x
2644  a9d4 97            	ld	xl,a
2645  a9d5 d69a27        	ld	a,(L54_page_string03,x)
2646  a9d8 1e09          	ldw	x,(OFST+1,sp)
2647  a9da f7            	ld	(x),a
2648                     ; 2398 	      insertion_flag[0]++;
2650  a9db 725c0017      	inc	_insertion_flag
2651                     ; 2399 	      if (insertion_flag[0] == page_string03_len) insertion_flag[0] = 0;
2653  a9df c60017        	ld	a,_insertion_flag
2654  a9e2 a126          	cp	a,#38
2656  a9e4 203d          	jp	LC004
2657  a9e6               L324:
2658                     ; 2401 	    case 4:
2658                     ; 2402 	      // %y04 replaced with first header string 
2658                     ; 2403               *pBuffer = (uint8_t)page_string04[i];
2660  a9e6 7b08          	ld	a,(OFST+0,sp)
2661  a9e8 5f            	clrw	x
2662  a9e9 97            	ld	xl,a
2663  a9ea d69a50        	ld	a,(L35_page_string04,x)
2664  a9ed 1e09          	ldw	x,(OFST+1,sp)
2665  a9ef f7            	ld	(x),a
2666                     ; 2404 	      insertion_flag[0]++;
2668  a9f0 725c0017      	inc	_insertion_flag
2669                     ; 2405 	      if (insertion_flag[0] == page_string04_len) insertion_flag[0] = 0;
2671  a9f4 c60017        	ld	a,_insertion_flag
2672  a9f7 a147          	cp	a,#71
2674  a9f9 2028          	jp	LC004
2675  a9fb               L524:
2676                     ; 2407 	    case 5:
2676                     ; 2408 	      // %y05 replaced with second header string 
2676                     ; 2409               *pBuffer = (uint8_t)page_string05[i];
2678  a9fb 7b08          	ld	a,(OFST+0,sp)
2679  a9fd 5f            	clrw	x
2680  a9fe 97            	ld	xl,a
2681  a9ff d69a9a        	ld	a,(L16_page_string05,x)
2682  aa02 1e09          	ldw	x,(OFST+1,sp)
2683  aa04 f7            	ld	(x),a
2684                     ; 2410 	      insertion_flag[0]++;
2686  aa05 725c0017      	inc	_insertion_flag
2687                     ; 2411 	      if (insertion_flag[0] == page_string05_len) insertion_flag[0] = 0;
2689  aa09 c60017        	ld	a,_insertion_flag
2690  aa0c a1ed          	cp	a,#237
2692  aa0e 2013          	jp	LC004
2693  aa10               L724:
2694                     ; 2413 	    case 6:
2694                     ; 2414 	      // %y06 replaced with third header string 
2694                     ; 2415               *pBuffer = (uint8_t)page_string06[i];
2696  aa10 7b08          	ld	a,(OFST+0,sp)
2697  aa12 5f            	clrw	x
2698  aa13 97            	ld	xl,a
2699  aa14 d69b8a        	ld	a,(L76_page_string06,x)
2700  aa17 1e09          	ldw	x,(OFST+1,sp)
2701  aa19 f7            	ld	(x),a
2702                     ; 2416 	      insertion_flag[0]++;
2704  aa1a 725c0017      	inc	_insertion_flag
2705                     ; 2417 	      if (insertion_flag[0] == page_string06_len) insertion_flag[0] = 0;
2707  aa1e c60017        	ld	a,_insertion_flag
2708  aa21 a13b          	cp	a,#59
2711  aa23               LC004:
2712  aa23 2619          	jrne	LC007
2719  aa25 725f0017      	clr	_insertion_flag
2720                     ; 2419 	    default: break;
2722                     ; 2421           pBuffer++;
2723                     ; 2422           nBytes++;
2724  aa29 2013          	jp	LC007
2725  aa2b               L125:
2726                     ; 2430         *pBuffer = nByte;
2728  aa2b 1e09          	ldw	x,(OFST+1,sp)
2729  aa2d f7            	ld	(x),a
2730                     ; 2431         *ppData = *ppData + 1;
2732  aa2e 1e0d          	ldw	x,(OFST+5,sp)
2733  aa30 9093          	ldw	y,x
2734  aa32 fe            	ldw	x,(x)
2735  aa33 5c            	incw	x
2736  aa34 90ff          	ldw	(y),x
2737                     ; 2432         *pDataLeft = *pDataLeft - 1;
2739  aa36 1e0f          	ldw	x,(OFST+7,sp)
2740  aa38 9093          	ldw	y,x
2741  aa3a fe            	ldw	x,(x)
2742  aa3b 5a            	decw	x
2743  aa3c 90ff          	ldw	(y),x
2744                     ; 2433         pBuffer++;
2746  aa3e               LC007:
2748  aa3e 1e09          	ldw	x,(OFST+1,sp)
2749                     ; 2434         nBytes++;
2751  aa40               LC006:
2756  aa40 5c            	incw	x
2757  aa41 1f09          	ldw	(OFST+1,sp),x
2763  aa43 1e05          	ldw	x,(OFST-3,sp)
2764  aa45 5c            	incw	x
2765  aa46               LC005:
2766  aa46 1f05          	ldw	(OFST-3,sp),x
2768  aa48               L505:
2769                     ; 1808   while (nBytes < nMaxBytes) {
2771  aa48 1e05          	ldw	x,(OFST-3,sp)
2772  aa4a 1311          	cpw	x,(OFST+9,sp)
2773  aa4c 2403cca4f0    	jrult	L305
2774  aa51               L705:
2775                     ; 2439   return nBytes;
2777  aa51 1e05          	ldw	x,(OFST-3,sp)
2780  aa53 5b0a          	addw	sp,#10
2781  aa55 81            	ret	
2813                     ; 2443 void HttpDInit()
2813                     ; 2444 {
2814                     .text:	section	.text,new
2815  aa56               _HttpDInit:
2819                     ; 2446   uip_listen(htons(Port_Httpd));
2821  aa56 ce0103        	ldw	x,_Port_Httpd
2822  aa59 cdef7a        	call	_htons
2824  aa5c cde605        	call	_uip_listen
2826                     ; 2447   current_webpage = WEBPAGE_IOCONTROL;
2828  aa5f 725f001a      	clr	_current_webpage
2829                     ; 2450   insertion_flag[0] = 0;
2831  aa63 725f0017      	clr	_insertion_flag
2832                     ; 2451   insertion_flag[1] = 0;
2834  aa67 725f0018      	clr	_insertion_flag+1
2835                     ; 2452   insertion_flag[2] = 0;
2837  aa6b 725f0019      	clr	_insertion_flag+2
2838                     ; 2455   saved_nstate = STATE_NULL;
2840  aa6f 357f005b      	mov	_saved_nstate,#127
2841                     ; 2456   saved_parsestate = PARSE_CMD;
2843  aa73 725f005a      	clr	_saved_parsestate
2844                     ; 2457   saved_nparseleft = 0;
2846  aa77 725f0059      	clr	_saved_nparseleft
2847                     ; 2458   clear_saved_postpartial_all();
2850                     ; 2459 }
2853  aa7b ccb558        	jp	_clear_saved_postpartial_all
3044                     	switch	.const
3045  9be8               L412:
3046  9be8 b32c          	dc.w	L3401
3047  9bea b337          	dc.w	L5401
3048  9bec b342          	dc.w	L7401
3049  9bee b34d          	dc.w	L1501
3050  9bf0 b358          	dc.w	L3501
3051  9bf2 b363          	dc.w	L5501
3052  9bf4 b36e          	dc.w	L7501
3053  9bf6 b379          	dc.w	L1601
3054  9bf8 b384          	dc.w	L3601
3055  9bfa b38f          	dc.w	L5601
3056  9bfc b39a          	dc.w	L7601
3057  9bfe b3a5          	dc.w	L1701
3058  9c00 b3b0          	dc.w	L3701
3059  9c02 b3bb          	dc.w	L5701
3060  9c04 b3c6          	dc.w	L7701
3061  9c06 b3d1          	dc.w	L1011
3062                     ; 2462 void HttpDCall(uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
3062                     ; 2463 {
3063                     .text:	section	.text,new
3064  aa7e               _HttpDCall:
3066  aa7e 89            	pushw	x
3067  aa7f 5204          	subw	sp,#4
3068       00000004      OFST:	set	4
3071                     ; 2467   i = 0;
3073  aa81 0f04          	clr	(OFST+0,sp)
3075                     ; 2469   if (uip_connected()) {
3077  aa83 720d02c855    	btjf	_uip_flags,#6,L5121
3078                     ; 2471     if (current_webpage == WEBPAGE_IOCONTROL) {
3080  aa88 c6001a        	ld	a,_current_webpage
3081  aa8b 260e          	jrne	L7121
3082                     ; 2472       pSocket->pData = g_HtmlPageIOControl;
3084  aa8d 1e0b          	ldw	x,(OFST+7,sp)
3085  aa8f 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
3086  aa93 ef01          	ldw	(1,x),y
3087                     ; 2473       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
3089  aa95 90ae0c06      	ldw	y,#3078
3091  aa99 2034          	jp	LC011
3092  aa9b               L7121:
3093                     ; 2477     else if (current_webpage == WEBPAGE_CONFIGURATION) {
3095  aa9b a101          	cp	a,#1
3096  aa9d 260e          	jrne	L3221
3097                     ; 2478       pSocket->pData = g_HtmlPageConfiguration;
3099  aa9f 1e0b          	ldw	x,(OFST+7,sp)
3100  aaa1 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
3101  aaa5 ef01          	ldw	(1,x),y
3102                     ; 2479       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
3104  aaa7 90ae0c31      	ldw	y,#3121
3106  aaab 2022          	jp	LC011
3107  aaad               L3221:
3108                     ; 2500     else if (current_webpage == WEBPAGE_RSTATE) {
3110  aaad a106          	cp	a,#6
3111  aaaf 260e          	jrne	L7221
3112                     ; 2501       pSocket->pData = g_HtmlPageRstate;
3114  aab1 1e0b          	ldw	x,(OFST+7,sp)
3115  aab3 90ae98c1      	ldw	y,#L71_g_HtmlPageRstate
3116  aab7 ef01          	ldw	(1,x),y
3117                     ; 2502       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
3119  aab9 90ae0086      	ldw	y,#134
3121  aabd 2010          	jp	LC011
3122  aabf               L7221:
3123                     ; 2505     else if (current_webpage == WEBPAGE_SSTATE) {
3125  aabf a107          	cp	a,#7
3126  aac1 260e          	jrne	L1221
3127                     ; 2506       pSocket->pData = g_HtmlPageSstate;
3129  aac3 1e0b          	ldw	x,(OFST+7,sp)
3130  aac5 90ae9948      	ldw	y,#L12_g_HtmlPageSstate
3131  aac9 ef01          	ldw	(1,x),y
3132                     ; 2507       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
3134  aacb 90ae0004      	ldw	y,#4
3135  aacf               LC011:
3136  aacf ef03          	ldw	(3,x),y
3137  aad1               L1221:
3138                     ; 2510     pSocket->nState = STATE_CONNECTED;
3140  aad1 1e0b          	ldw	x,(OFST+7,sp)
3141                     ; 2511     pSocket->nPrevBytes = 0xFFFF;
3143  aad3 90aeffff      	ldw	y,#65535
3144  aad7 7f            	clr	(x)
3145  aad8 ef0b          	ldw	(11,x),y
3147  aada ccabad        	jra	L242
3148  aadd               L5121:
3149                     ; 2520   else if (uip_newdata() || uip_acked()) {
3151  aadd 720202c808    	btjt	_uip_flags,#1,L1421
3153  aae2 720002c803cc  	btjf	_uip_flags,#0,L7321
3154  aaea               L1421:
3155                     ; 2521     if (uip_acked()) {
3157  aaea 720102c803cc  	btjt	_uip_flags,#0,L5211
3158                     ; 2524       goto senddata;
3160                     ; 2594     if (saved_nstate != STATE_NULL) {
3162  aaf2 c6005b        	ld	a,_saved_nstate
3163  aaf5 a17f          	cp	a,#127
3164  aaf7 2603ccab79    	jreq	L3721
3165                     ; 2600       pSocket->nState = saved_nstate;
3167  aafc 1e0b          	ldw	x,(OFST+7,sp)
3168  aafe f7            	ld	(x),a
3169                     ; 2607       pSocket->ParseState = saved_parsestate;
3171  aaff c6005a        	ld	a,_saved_parsestate
3172  ab02 e70a          	ld	(10,x),a
3173                     ; 2611       pSocket->nParseLeft = saved_nparseleft;
3175  ab04 c60059        	ld	a,_saved_nparseleft
3176  ab07 e706          	ld	(6,x),a
3177                     ; 2613       pSocket->nNewlines = saved_newlines;
3179  ab09 c60028        	ld	a,_saved_newlines
3180  ab0c e705          	ld	(5,x),a
3181                     ; 2625       for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i];
3183  ab0e 4f            	clr	a
3184  ab0f 6b04          	ld	(OFST+0,sp),a
3186  ab11               L7421:
3189  ab11 5f            	clrw	x
3190  ab12 97            	ld	xl,a
3191  ab13 d60041        	ld	a,(_saved_postpartial,x)
3192  ab16 d70029        	ld	(_saved_postpartial_previous,x),a
3195  ab19 0c04          	inc	(OFST+0,sp)
3199  ab1b 7b04          	ld	a,(OFST+0,sp)
3200  ab1d a118          	cp	a,#24
3201  ab1f 25f0          	jrult	L7421
3202                     ; 2630       if (saved_nstate == STATE_PARSEPOST) {
3204  ab21 c6005b        	ld	a,_saved_nstate
3205  ab24 a10a          	cp	a,#10
3206  ab26 2651          	jrne	L3721
3207                     ; 2631         if (saved_parsestate == PARSE_CMD) {
3209  ab28 c6005a        	ld	a,_saved_parsestate
3210  ab2b 274c          	jreq	L3721
3212                     ; 2634         else if (saved_parsestate == PARSE_NUM10) {
3214  ab2d a101          	cp	a,#1
3215  ab2f 2609          	jrne	L3621
3216                     ; 2636 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3218  ab31 1e0b          	ldw	x,(OFST+7,sp)
3219  ab33 c60029        	ld	a,_saved_postpartial_previous
3220  ab36 e708          	ld	(8,x),a
3222  ab38 203f          	jra	L3721
3223  ab3a               L3621:
3224                     ; 2638         else if (saved_parsestate == PARSE_NUM1) {
3226  ab3a a102          	cp	a,#2
3227  ab3c 2615          	jrne	L7621
3228                     ; 2640 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3230  ab3e 1e0b          	ldw	x,(OFST+7,sp)
3231  ab40 c60029        	ld	a,_saved_postpartial_previous
3232  ab43 e708          	ld	(8,x),a
3233                     ; 2641           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3235  ab45 c6002a        	ld	a,_saved_postpartial_previous+1
3236  ab48 97            	ld	xl,a
3237  ab49 a60a          	ld	a,#10
3238  ab4b 42            	mul	x,a
3239  ab4c 9f            	ld	a,xl
3240  ab4d a0e0          	sub	a,#224
3241  ab4f 1e0b          	ldw	x,(OFST+7,sp)
3243  ab51 2024          	jp	LC012
3244  ab53               L7621:
3245                     ; 2643         else if (saved_parsestate == PARSE_EQUAL || saved_parsestate == PARSE_VAL) {
3247  ab53 a103          	cp	a,#3
3248  ab55 2704          	jreq	L5721
3250  ab57 a104          	cp	a,#4
3251  ab59 261e          	jrne	L3721
3252  ab5b               L5721:
3253                     ; 2645 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3255  ab5b 1e0b          	ldw	x,(OFST+7,sp)
3256  ab5d c60029        	ld	a,_saved_postpartial_previous
3257  ab60 e708          	ld	(8,x),a
3258                     ; 2646           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3260  ab62 c6002a        	ld	a,_saved_postpartial_previous+1
3261  ab65 97            	ld	xl,a
3262  ab66 a60a          	ld	a,#10
3263  ab68 42            	mul	x,a
3264  ab69 9f            	ld	a,xl
3265  ab6a 1e0b          	ldw	x,(OFST+7,sp)
3266  ab6c a0e0          	sub	a,#224
3267  ab6e e709          	ld	(9,x),a
3268                     ; 2647           pSocket->ParseNum += (uint8_t)(saved_postpartial_previous[2] - '0');
3270  ab70 c6002b        	ld	a,_saved_postpartial_previous+2
3271  ab73 a030          	sub	a,#48
3272  ab75 eb09          	add	a,(9,x)
3273  ab77               LC012:
3274  ab77 e709          	ld	(9,x),a
3276  ab79               L3721:
3277                     ; 2649 	else if (saved_parsestate == PARSE_DELIM) {
3279                     ; 2669     if (pSocket->nState == STATE_CONNECTED) {
3281  ab79 1e0b          	ldw	x,(OFST+7,sp)
3282  ab7b f6            	ld	a,(x)
3283  ab7c 2627          	jrne	L3031
3284                     ; 2670       if (nBytes == 0) return;
3286  ab7e 1e09          	ldw	x,(OFST+5,sp)
3287  ab80 272b          	jreq	L242
3290                     ; 2671       if (*pBuffer == 'G') {
3292  ab82 1e05          	ldw	x,(OFST+1,sp)
3293  ab84 f6            	ld	a,(x)
3294  ab85 a147          	cp	a,#71
3295  ab87 2606          	jrne	L7031
3296                     ; 2672         pSocket->nState = STATE_GET_G;
3298  ab89 1e0b          	ldw	x,(OFST+7,sp)
3299  ab8b a601          	ld	a,#1
3301  ab8d 2008          	jp	LC013
3302  ab8f               L7031:
3303                     ; 2674       else if (*pBuffer == 'P') {
3305  ab8f a150          	cp	a,#80
3306  ab91 2605          	jrne	L1131
3307                     ; 2675         pSocket->nState = STATE_POST_P;
3309  ab93 1e0b          	ldw	x,(OFST+7,sp)
3310  ab95 a604          	ld	a,#4
3311  ab97               LC013:
3312  ab97 f7            	ld	(x),a
3313  ab98               L1131:
3314                     ; 2677       nBytes--;
3316  ab98 1e09          	ldw	x,(OFST+5,sp)
3317  ab9a 5a            	decw	x
3318  ab9b 1f09          	ldw	(OFST+5,sp),x
3319                     ; 2678       pBuffer++;
3321  ab9d 1e05          	ldw	x,(OFST+1,sp)
3322  ab9f 5c            	incw	x
3323  aba0 1f05          	ldw	(OFST+1,sp),x
3324  aba2 1e0b          	ldw	x,(OFST+7,sp)
3325  aba4 f6            	ld	a,(x)
3326  aba5               L3031:
3327                     ; 2681     if (pSocket->nState == STATE_GET_G) {
3329  aba5 a101          	cp	a,#1
3330  aba7 2620          	jrne	L5131
3331                     ; 2682       if (nBytes == 0) return;
3333  aba9 1e09          	ldw	x,(OFST+5,sp)
3334  abab 2603          	jrne	L7131
3336  abad               L242:
3339  abad 5b06          	addw	sp,#6
3340  abaf 81            	ret	
3341  abb0               L7131:
3342                     ; 2683       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
3344  abb0 1e05          	ldw	x,(OFST+1,sp)
3345  abb2 f6            	ld	a,(x)
3346  abb3 a145          	cp	a,#69
3347  abb5 2605          	jrne	L1231
3350  abb7 1e0b          	ldw	x,(OFST+7,sp)
3351  abb9 a602          	ld	a,#2
3352  abbb f7            	ld	(x),a
3353  abbc               L1231:
3354                     ; 2684       nBytes--;
3356  abbc 1e09          	ldw	x,(OFST+5,sp)
3357  abbe 5a            	decw	x
3358  abbf 1f09          	ldw	(OFST+5,sp),x
3359                     ; 2685       pBuffer++;
3361  abc1 1e05          	ldw	x,(OFST+1,sp)
3362  abc3 5c            	incw	x
3363  abc4 1f05          	ldw	(OFST+1,sp),x
3364  abc6 1e0b          	ldw	x,(OFST+7,sp)
3365  abc8 f6            	ld	a,(x)
3366  abc9               L5131:
3367                     ; 2688     if (pSocket->nState == STATE_GET_GE) {
3369  abc9 a102          	cp	a,#2
3370  abcb 261d          	jrne	L3231
3371                     ; 2689       if (nBytes == 0) return;
3373  abcd 1e09          	ldw	x,(OFST+5,sp)
3374  abcf 27dc          	jreq	L242
3377                     ; 2690       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
3379  abd1 1e05          	ldw	x,(OFST+1,sp)
3380  abd3 f6            	ld	a,(x)
3381  abd4 a154          	cp	a,#84
3382  abd6 2605          	jrne	L7231
3385  abd8 1e0b          	ldw	x,(OFST+7,sp)
3386  abda a603          	ld	a,#3
3387  abdc f7            	ld	(x),a
3388  abdd               L7231:
3389                     ; 2691       nBytes--;
3391  abdd 1e09          	ldw	x,(OFST+5,sp)
3392  abdf 5a            	decw	x
3393  abe0 1f09          	ldw	(OFST+5,sp),x
3394                     ; 2692       pBuffer++;
3396  abe2 1e05          	ldw	x,(OFST+1,sp)
3397  abe4 5c            	incw	x
3398  abe5 1f05          	ldw	(OFST+1,sp),x
3399  abe7 1e0b          	ldw	x,(OFST+7,sp)
3400  abe9 f6            	ld	a,(x)
3401  abea               L3231:
3402                     ; 2695     if (pSocket->nState == STATE_GET_GET) {
3404  abea a103          	cp	a,#3
3405  abec 261d          	jrne	L1331
3406                     ; 2696       if (nBytes == 0) return;
3408  abee 1e09          	ldw	x,(OFST+5,sp)
3409  abf0 27bb          	jreq	L242
3412                     ; 2697       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
3414  abf2 1e05          	ldw	x,(OFST+1,sp)
3415  abf4 f6            	ld	a,(x)
3416  abf5 a120          	cp	a,#32
3417  abf7 2605          	jrne	L5331
3420  abf9 1e0b          	ldw	x,(OFST+7,sp)
3421  abfb a608          	ld	a,#8
3422  abfd f7            	ld	(x),a
3423  abfe               L5331:
3424                     ; 2698       nBytes--;
3426  abfe 1e09          	ldw	x,(OFST+5,sp)
3427  ac00 5a            	decw	x
3428  ac01 1f09          	ldw	(OFST+5,sp),x
3429                     ; 2699       pBuffer++;
3431  ac03 1e05          	ldw	x,(OFST+1,sp)
3432  ac05 5c            	incw	x
3433  ac06 1f05          	ldw	(OFST+1,sp),x
3434  ac08 1e0b          	ldw	x,(OFST+7,sp)
3435  ac0a f6            	ld	a,(x)
3436  ac0b               L1331:
3437                     ; 2702     if (pSocket->nState == STATE_POST_P) {
3439  ac0b a104          	cp	a,#4
3440  ac0d 261d          	jrne	L7331
3441                     ; 2703       if (nBytes == 0) return;
3443  ac0f 1e09          	ldw	x,(OFST+5,sp)
3444  ac11 279a          	jreq	L242
3447                     ; 2704       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
3449  ac13 1e05          	ldw	x,(OFST+1,sp)
3450  ac15 f6            	ld	a,(x)
3451  ac16 a14f          	cp	a,#79
3452  ac18 2605          	jrne	L3431
3455  ac1a 1e0b          	ldw	x,(OFST+7,sp)
3456  ac1c a605          	ld	a,#5
3457  ac1e f7            	ld	(x),a
3458  ac1f               L3431:
3459                     ; 2705       nBytes--;
3461  ac1f 1e09          	ldw	x,(OFST+5,sp)
3462  ac21 5a            	decw	x
3463  ac22 1f09          	ldw	(OFST+5,sp),x
3464                     ; 2706       pBuffer++;
3466  ac24 1e05          	ldw	x,(OFST+1,sp)
3467  ac26 5c            	incw	x
3468  ac27 1f05          	ldw	(OFST+1,sp),x
3469  ac29 1e0b          	ldw	x,(OFST+7,sp)
3470  ac2b f6            	ld	a,(x)
3471  ac2c               L7331:
3472                     ; 2709     if (pSocket->nState == STATE_POST_PO) {
3474  ac2c a105          	cp	a,#5
3475  ac2e 2620          	jrne	L5431
3476                     ; 2710       if (nBytes == 0) return;
3478  ac30 1e09          	ldw	x,(OFST+5,sp)
3479  ac32 2603ccabad    	jreq	L242
3482                     ; 2711       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
3484  ac37 1e05          	ldw	x,(OFST+1,sp)
3485  ac39 f6            	ld	a,(x)
3486  ac3a a153          	cp	a,#83
3487  ac3c 2605          	jrne	L1531
3490  ac3e 1e0b          	ldw	x,(OFST+7,sp)
3491  ac40 a606          	ld	a,#6
3492  ac42 f7            	ld	(x),a
3493  ac43               L1531:
3494                     ; 2712       nBytes--;
3496  ac43 1e09          	ldw	x,(OFST+5,sp)
3497  ac45 5a            	decw	x
3498  ac46 1f09          	ldw	(OFST+5,sp),x
3499                     ; 2713       pBuffer++;
3501  ac48 1e05          	ldw	x,(OFST+1,sp)
3502  ac4a 5c            	incw	x
3503  ac4b 1f05          	ldw	(OFST+1,sp),x
3504  ac4d 1e0b          	ldw	x,(OFST+7,sp)
3505  ac4f f6            	ld	a,(x)
3506  ac50               L5431:
3507                     ; 2716     if (pSocket->nState == STATE_POST_POS) {
3509  ac50 a106          	cp	a,#6
3510  ac52 261d          	jrne	L3531
3511                     ; 2717       if (nBytes == 0) return;
3513  ac54 1e09          	ldw	x,(OFST+5,sp)
3514  ac56 27dc          	jreq	L242
3517                     ; 2718       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
3519  ac58 1e05          	ldw	x,(OFST+1,sp)
3520  ac5a f6            	ld	a,(x)
3521  ac5b a154          	cp	a,#84
3522  ac5d 2605          	jrne	L7531
3525  ac5f 1e0b          	ldw	x,(OFST+7,sp)
3526  ac61 a607          	ld	a,#7
3527  ac63 f7            	ld	(x),a
3528  ac64               L7531:
3529                     ; 2719       nBytes--;
3531  ac64 1e09          	ldw	x,(OFST+5,sp)
3532  ac66 5a            	decw	x
3533  ac67 1f09          	ldw	(OFST+5,sp),x
3534                     ; 2720       pBuffer++;
3536  ac69 1e05          	ldw	x,(OFST+1,sp)
3537  ac6b 5c            	incw	x
3538  ac6c 1f05          	ldw	(OFST+1,sp),x
3539  ac6e 1e0b          	ldw	x,(OFST+7,sp)
3540  ac70 f6            	ld	a,(x)
3541  ac71               L3531:
3542                     ; 2723     if (pSocket->nState == STATE_POST_POST) {
3544  ac71 a107          	cp	a,#7
3545  ac73 261d          	jrne	L1631
3546                     ; 2724       if (nBytes == 0) return;
3548  ac75 1e09          	ldw	x,(OFST+5,sp)
3549  ac77 27bb          	jreq	L242
3552                     ; 2725       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
3554  ac79 1e05          	ldw	x,(OFST+1,sp)
3555  ac7b f6            	ld	a,(x)
3556  ac7c a120          	cp	a,#32
3557  ac7e 2605          	jrne	L5631
3560  ac80 1e0b          	ldw	x,(OFST+7,sp)
3561  ac82 a609          	ld	a,#9
3562  ac84 f7            	ld	(x),a
3563  ac85               L5631:
3564                     ; 2726       nBytes--;
3566  ac85 1e09          	ldw	x,(OFST+5,sp)
3567  ac87 5a            	decw	x
3568  ac88 1f09          	ldw	(OFST+5,sp),x
3569                     ; 2727       pBuffer++;
3571  ac8a 1e05          	ldw	x,(OFST+1,sp)
3572  ac8c 5c            	incw	x
3573  ac8d 1f05          	ldw	(OFST+1,sp),x
3574  ac8f 1e0b          	ldw	x,(OFST+7,sp)
3575  ac91 f6            	ld	a,(x)
3576  ac92               L1631:
3577                     ; 2730     if (pSocket->nState == STATE_GOTPOST) {
3579  ac92 a109          	cp	a,#9
3580  ac94 2703ccad1b    	jrne	L7631
3581                     ; 2732       saved_nstate = STATE_GOTPOST;
3583  ac99 3509005b      	mov	_saved_nstate,#9
3584                     ; 2733       if (nBytes == 0) {
3586  ac9d 1e09          	ldw	x,(OFST+5,sp)
3587  ac9f 2676          	jrne	L5731
3588                     ; 2736 	saved_newlines = pSocket->nNewlines;
3590  aca1 1e0b          	ldw	x,(OFST+7,sp)
3591  aca3 e605          	ld	a,(5,x)
3592  aca5 c70028        	ld	_saved_newlines,a
3593                     ; 2737         return;
3595  aca8 ccabad        	jra	L242
3596  acab               L3731:
3597                     ; 2745 	if (saved_newlines == 2) {
3599  acab c60028        	ld	a,_saved_newlines
3600  acae a102          	cp	a,#2
3601  acb0 272b          	jreq	L3041
3603                     ; 2750           if (*pBuffer == '\n') pSocket->nNewlines++;
3605  acb2 1e05          	ldw	x,(OFST+1,sp)
3606  acb4 f6            	ld	a,(x)
3607  acb5 a10a          	cp	a,#10
3608  acb7 2606          	jrne	L5041
3611  acb9 1e0b          	ldw	x,(OFST+7,sp)
3612  acbb 6c05          	inc	(5,x)
3614  acbd 2008          	jra	L7041
3615  acbf               L5041:
3616                     ; 2751           else if (*pBuffer == '\r') { }
3618  acbf a10d          	cp	a,#13
3619  acc1 2704          	jreq	L7041
3621                     ; 2752           else pSocket->nNewlines = 0;
3623  acc3 1e0b          	ldw	x,(OFST+7,sp)
3624  acc5 6f05          	clr	(5,x)
3625  acc7               L7041:
3626                     ; 2753           pBuffer++;
3628  acc7 1e05          	ldw	x,(OFST+1,sp)
3629  acc9 5c            	incw	x
3630  acca 1f05          	ldw	(OFST+1,sp),x
3631                     ; 2754           nBytes--;
3633  accc 1e09          	ldw	x,(OFST+5,sp)
3634  acce 5a            	decw	x
3635  accf 1f09          	ldw	(OFST+5,sp),x
3636                     ; 2755           if (nBytes == 0) {
3638  acd1 260a          	jrne	L3041
3639                     ; 2758             saved_newlines = pSocket->nNewlines;
3641  acd3 1e0b          	ldw	x,(OFST+7,sp)
3642  acd5 e605          	ld	a,(5,x)
3643  acd7 c70028        	ld	_saved_newlines,a
3644                     ; 2759             return;
3646  acda ccabad        	jra	L242
3647  acdd               L3041:
3648                     ; 2767         if (pSocket->nNewlines == 2) {
3650  acdd 1e0b          	ldw	x,(OFST+7,sp)
3651  acdf e605          	ld	a,(5,x)
3652  ace1 a102          	cp	a,#2
3653  ace3 2632          	jrne	L5731
3654                     ; 2770           if (current_webpage == WEBPAGE_IOCONTROL) {
3656  ace5 c6001a        	ld	a,_current_webpage
3657  ace8 2609          	jrne	L1241
3658                     ; 2771 	    pSocket->nParseLeft = PARSEBYTES_IOCONTROL;
3660  acea a635          	ld	a,#53
3661  acec e706          	ld	(6,x),a
3662                     ; 2772 	    pSocket->nParseLeftAddl = PARSEBYTES_IOCONTROL_ADDL;
3664  acee 6f07          	clr	(7,x)
3665  acf0 c6001a        	ld	a,_current_webpage
3666  acf3               L1241:
3667                     ; 2774           if (current_webpage == WEBPAGE_CONFIGURATION) {
3669  acf3 4a            	dec	a
3670  acf4 2608          	jrne	L3241
3671                     ; 2775 	    pSocket->nParseLeft = PARSEBYTES_CONFIGURATION;
3673  acf6 a6ec          	ld	a,#236
3674  acf8 e706          	ld	(6,x),a
3675                     ; 2776 	    pSocket->nParseLeftAddl = PARSEBYTES_CONFIGURATION_ADDL;
3677  acfa a618          	ld	a,#24
3678  acfc e707          	ld	(7,x),a
3679  acfe               L3241:
3680                     ; 2778           pSocket->ParseState = saved_parsestate = PARSE_CMD;
3682  acfe 725f005a      	clr	_saved_parsestate
3683  ad02 6f0a          	clr	(10,x)
3684                     ; 2779 	  saved_nparseleft = pSocket->nParseLeft;
3686  ad04 e606          	ld	a,(6,x)
3687  ad06 c70059        	ld	_saved_nparseleft,a
3688                     ; 2781           pSocket->nState = STATE_PARSEPOST;
3690  ad09 a60a          	ld	a,#10
3691  ad0b f7            	ld	(x),a
3692                     ; 2782 	  saved_nstate = STATE_PARSEPOST;
3694  ad0c 350a005b      	mov	_saved_nstate,#10
3695                     ; 2783 	  if (nBytes == 0) {
3697  ad10 1e09          	ldw	x,(OFST+5,sp)
3698  ad12 2607          	jrne	L7631
3699                     ; 2786 	    return;
3701  ad14 ccabad        	jra	L242
3702  ad17               L5731:
3703                     ; 2740       while (nBytes != 0) {
3705  ad17 1e09          	ldw	x,(OFST+5,sp)
3706  ad19 2690          	jrne	L3731
3707  ad1b               L7631:
3708                     ; 2793     if (pSocket->nState == STATE_GOTGET) {
3710  ad1b 1e0b          	ldw	x,(OFST+7,sp)
3711  ad1d f6            	ld	a,(x)
3712  ad1e a108          	cp	a,#8
3713  ad20 2609          	jrne	L7241
3714                     ; 2797       pSocket->nParseLeft = 6;
3716  ad22 a606          	ld	a,#6
3717  ad24 e706          	ld	(6,x),a
3718                     ; 2798       pSocket->ParseState = PARSE_SLASH1;
3720  ad26 e70a          	ld	(10,x),a
3721                     ; 2800       pSocket->nState = STATE_PARSEGET;
3723  ad28 a60d          	ld	a,#13
3724  ad2a f7            	ld	(x),a
3725  ad2b               L7241:
3726                     ; 2803     if (pSocket->nState == STATE_PARSEPOST) {
3728  ad2b a10a          	cp	a,#10
3729  ad2d 2703ccb213    	jrne	L1341
3730  ad32               L3341:
3731                     ; 2817         if (pSocket->ParseState == PARSE_CMD) {
3733  ad32 1e0b          	ldw	x,(OFST+7,sp)
3734  ad34 e60a          	ld	a,(10,x)
3735  ad36 2664          	jrne	L7341
3736                     ; 2818           pSocket->ParseCmd = *pBuffer;
3738  ad38 1e05          	ldw	x,(OFST+1,sp)
3739  ad3a f6            	ld	a,(x)
3740  ad3b 1e0b          	ldw	x,(OFST+7,sp)
3741  ad3d e708          	ld	(8,x),a
3742                     ; 2819 	  saved_postpartial[0] = *pBuffer;
3744  ad3f 1e05          	ldw	x,(OFST+1,sp)
3745  ad41 f6            	ld	a,(x)
3746  ad42 c70041        	ld	_saved_postpartial,a
3747                     ; 2820           pSocket->ParseState = saved_parsestate = PARSE_NUM10;
3749  ad45 a601          	ld	a,#1
3750  ad47 c7005a        	ld	_saved_parsestate,a
3751  ad4a 1e0b          	ldw	x,(OFST+7,sp)
3752  ad4c e70a          	ld	(10,x),a
3753                     ; 2821 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3755  ad4e e606          	ld	a,(6,x)
3756  ad50 2704          	jreq	L1441
3757                     ; 2822 	    pSocket->nParseLeft--;
3759  ad52 6a06          	dec	(6,x)
3761  ad54 2004          	jra	L3441
3762  ad56               L1441:
3763                     ; 2826 	    pSocket->ParseState = PARSE_DELIM;
3765  ad56 a605          	ld	a,#5
3766  ad58 e70a          	ld	(10,x),a
3767  ad5a               L3441:
3768                     ; 2828 	  saved_nparseleft = pSocket->nParseLeft;
3770  ad5a e606          	ld	a,(6,x)
3771  ad5c c70059        	ld	_saved_nparseleft,a
3772                     ; 2829           pBuffer++;
3774  ad5f 1e05          	ldw	x,(OFST+1,sp)
3775  ad61 5c            	incw	x
3776  ad62 1f05          	ldw	(OFST+1,sp),x
3777                     ; 2830 	  nBytes --;
3779  ad64 1e09          	ldw	x,(OFST+5,sp)
3780  ad66 5a            	decw	x
3781  ad67 1f09          	ldw	(OFST+5,sp),x
3782                     ; 2832 	  if (pSocket->ParseCmd == 'o' ||
3782                     ; 2833 	      pSocket->ParseCmd == 'a' ||
3782                     ; 2834 	      pSocket->ParseCmd == 'b' ||
3782                     ; 2835 	      pSocket->ParseCmd == 'c' ||
3782                     ; 2836 	      pSocket->ParseCmd == 'd' ||
3782                     ; 2837 	      pSocket->ParseCmd == 'g' ||
3782                     ; 2838 	      pSocket->ParseCmd == 'l' ||
3782                     ; 2839 	      pSocket->ParseCmd == 'm' ||
3782                     ; 2840 	      pSocket->ParseCmd == 'z') { }
3784  ad69 1e0b          	ldw	x,(OFST+7,sp)
3785  ad6b e608          	ld	a,(8,x)
3786  ad6d a16f          	cp	a,#111
3787  ad6f 2724          	jreq	L7641
3789  ad71 a161          	cp	a,#97
3790  ad73 2720          	jreq	L7641
3792  ad75 a162          	cp	a,#98
3793  ad77 271c          	jreq	L7641
3795  ad79 a163          	cp	a,#99
3796  ad7b 2718          	jreq	L7641
3798  ad7d a164          	cp	a,#100
3799  ad7f 2714          	jreq	L7641
3801  ad81 a167          	cp	a,#103
3802  ad83 2710          	jreq	L7641
3804  ad85 a16c          	cp	a,#108
3805  ad87 270c          	jreq	L7641
3807  ad89 a16d          	cp	a,#109
3808  ad8b 2708          	jreq	L7641
3810  ad8d a17a          	cp	a,#122
3811  ad8f 2704          	jreq	L7641
3812                     ; 2843 	    pSocket->ParseState = PARSE_DELIM;
3814  ad91 a605          	ld	a,#5
3815  ad93 e70a          	ld	(10,x),a
3816  ad95               L7641:
3817                     ; 2845 	  if (nBytes == 0) { // Hit end of fragment. Break out of while()
3819  ad95 1e09          	ldw	x,(OFST+5,sp)
3820  ad97 2699          	jrne	L3341
3821                     ; 2847 	    break;
3823  ad99 ccb1bb        	jra	L5341
3824  ad9c               L7341:
3825                     ; 2851         else if (pSocket->ParseState == PARSE_NUM10) {
3827  ad9c a101          	cp	a,#1
3828  ad9e 2640          	jrne	L5741
3829                     ; 2852           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3831  ada0 1e05          	ldw	x,(OFST+1,sp)
3832  ada2 f6            	ld	a,(x)
3833  ada3 97            	ld	xl,a
3834  ada4 a60a          	ld	a,#10
3835  ada6 42            	mul	x,a
3836  ada7 9f            	ld	a,xl
3837  ada8 1e0b          	ldw	x,(OFST+7,sp)
3838  adaa a0e0          	sub	a,#224
3839  adac e709          	ld	(9,x),a
3840                     ; 2853 	  saved_postpartial[1] = *pBuffer;
3842  adae 1e05          	ldw	x,(OFST+1,sp)
3843  adb0 f6            	ld	a,(x)
3844  adb1 c70042        	ld	_saved_postpartial+1,a
3845                     ; 2854           pSocket->ParseState = saved_parsestate = PARSE_NUM1;
3847  adb4 a602          	ld	a,#2
3848  adb6 c7005a        	ld	_saved_parsestate,a
3849  adb9 1e0b          	ldw	x,(OFST+7,sp)
3850  adbb e70a          	ld	(10,x),a
3851                     ; 2855 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3853  adbd e606          	ld	a,(6,x)
3854  adbf 2704          	jreq	L7741
3855                     ; 2856 	    pSocket->nParseLeft--;
3857  adc1 6a06          	dec	(6,x)
3859  adc3 2004          	jra	L1051
3860  adc5               L7741:
3861                     ; 2860 	    pSocket->ParseState = PARSE_DELIM;
3863  adc5 a605          	ld	a,#5
3864  adc7 e70a          	ld	(10,x),a
3865  adc9               L1051:
3866                     ; 2862 	  saved_nparseleft = pSocket->nParseLeft;
3868  adc9 e606          	ld	a,(6,x)
3869  adcb c70059        	ld	_saved_nparseleft,a
3870                     ; 2863           pBuffer++;
3872  adce 1e05          	ldw	x,(OFST+1,sp)
3873  add0 5c            	incw	x
3874  add1 1f05          	ldw	(OFST+1,sp),x
3875                     ; 2864 	  nBytes--;
3877  add3 1e09          	ldw	x,(OFST+5,sp)
3878  add5 5a            	decw	x
3879  add6 1f09          	ldw	(OFST+5,sp),x
3880                     ; 2865 	  if (nBytes == 0) {
3882  add8 2703ccad32    	jrne	L3341
3883                     ; 2867 	    break;
3885  addd ccb1bb        	jra	L5341
3886  ade0               L5741:
3887                     ; 2871         else if (pSocket->ParseState == PARSE_NUM1) {
3889  ade0 a102          	cp	a,#2
3890  ade2 2638          	jrne	L7051
3891                     ; 2872           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
3893  ade4 1605          	ldw	y,(OFST+1,sp)
3894  ade6 90f6          	ld	a,(y)
3895  ade8 a030          	sub	a,#48
3896  adea eb09          	add	a,(9,x)
3897  adec e709          	ld	(9,x),a
3898                     ; 2873 	  saved_postpartial[2] = *pBuffer;
3900  adee 93            	ldw	x,y
3901  adef f6            	ld	a,(x)
3902  adf0 c70043        	ld	_saved_postpartial+2,a
3903                     ; 2874           pSocket->ParseState = saved_parsestate = PARSE_EQUAL;
3905  adf3 a603          	ld	a,#3
3906  adf5 c7005a        	ld	_saved_parsestate,a
3907  adf8 1e0b          	ldw	x,(OFST+7,sp)
3908  adfa e70a          	ld	(10,x),a
3909                     ; 2875 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3911  adfc e606          	ld	a,(6,x)
3912  adfe 2704          	jreq	L1151
3913                     ; 2876 	    pSocket->nParseLeft--;
3915  ae00 6a06          	dec	(6,x)
3917  ae02 2004          	jra	L3151
3918  ae04               L1151:
3919                     ; 2880 	    pSocket->ParseState = PARSE_DELIM;
3921  ae04 a605          	ld	a,#5
3922  ae06 e70a          	ld	(10,x),a
3923  ae08               L3151:
3924                     ; 2882 	  saved_nparseleft = pSocket->nParseLeft;
3926  ae08 e606          	ld	a,(6,x)
3927  ae0a c70059        	ld	_saved_nparseleft,a
3928                     ; 2883           pBuffer++;
3930  ae0d 1e05          	ldw	x,(OFST+1,sp)
3931  ae0f 5c            	incw	x
3932  ae10 1f05          	ldw	(OFST+1,sp),x
3933                     ; 2884 	  nBytes--;
3935  ae12 1e09          	ldw	x,(OFST+5,sp)
3936  ae14 5a            	decw	x
3937  ae15 1f09          	ldw	(OFST+5,sp),x
3938                     ; 2885 	  if (nBytes == 0) {
3940  ae17 26c1          	jrne	L3341
3941                     ; 2887 	    break;
3943  ae19 ccb1bb        	jra	L5341
3944  ae1c               L7051:
3945                     ; 2891         else if (pSocket->ParseState == PARSE_EQUAL) {
3947  ae1c a103          	cp	a,#3
3948  ae1e 262f          	jrne	L1251
3949                     ; 2892           pSocket->ParseState = saved_parsestate = PARSE_VAL;
3951  ae20 a604          	ld	a,#4
3952  ae22 c7005a        	ld	_saved_parsestate,a
3953  ae25 e70a          	ld	(10,x),a
3954                     ; 2893 	  saved_postpartial[3] = *pBuffer;
3956  ae27 1e05          	ldw	x,(OFST+1,sp)
3957  ae29 f6            	ld	a,(x)
3958  ae2a c70044        	ld	_saved_postpartial+3,a
3959                     ; 2894 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3961  ae2d 1e0b          	ldw	x,(OFST+7,sp)
3962  ae2f e606          	ld	a,(6,x)
3963  ae31 2704          	jreq	L3251
3964                     ; 2895 	    pSocket->nParseLeft--;
3966  ae33 6a06          	dec	(6,x)
3968  ae35 2004          	jra	L5251
3969  ae37               L3251:
3970                     ; 2899 	    pSocket->ParseState = PARSE_DELIM;
3972  ae37 a605          	ld	a,#5
3973  ae39 e70a          	ld	(10,x),a
3974  ae3b               L5251:
3975                     ; 2901 	  saved_nparseleft = pSocket->nParseLeft;
3977  ae3b e606          	ld	a,(6,x)
3978  ae3d c70059        	ld	_saved_nparseleft,a
3979                     ; 2902           pBuffer++;
3981  ae40 1e05          	ldw	x,(OFST+1,sp)
3982  ae42 5c            	incw	x
3983  ae43 1f05          	ldw	(OFST+1,sp),x
3984                     ; 2903 	  nBytes--;
3986  ae45 1e09          	ldw	x,(OFST+5,sp)
3987  ae47 5a            	decw	x
3988  ae48 1f09          	ldw	(OFST+5,sp),x
3989                     ; 2904 	  if (nBytes == 0) {
3991  ae4a 268e          	jrne	L3341
3992                     ; 2906 	    break;
3994  ae4c ccb1bb        	jra	L5341
3995  ae4f               L1251:
3996                     ; 2910         else if (pSocket->ParseState == PARSE_VAL) {
3998  ae4f a104          	cp	a,#4
3999  ae51 2703ccb18e    	jrne	L3351
4000                     ; 2923           if (pSocket->ParseCmd == 'o') {
4002  ae56 e608          	ld	a,(8,x)
4003  ae58 a16f          	cp	a,#111
4004  ae5a 2644          	jrne	L5351
4005                     ; 2939 	    current_webpage = WEBPAGE_IOCONTROL;
4007  ae5c 725f001a      	clr	_current_webpage
4008                     ; 2943               if ((uint8_t)(*pBuffer) == '1') pin_value = 1;
4010  ae60 1e05          	ldw	x,(OFST+1,sp)
4011  ae62 f6            	ld	a,(x)
4012  ae63 a131          	cp	a,#49
4013  ae65 2604          	jrne	L7351
4016  ae67 a601          	ld	a,#1
4018  ae69 2001          	jra	L1451
4019  ae6b               L7351:
4020                     ; 2944 	      else pin_value = 0;
4022  ae6b 4f            	clr	a
4023  ae6c               L1451:
4024  ae6c 6b01          	ld	(OFST-3,sp),a
4026                     ; 2945 	      GpioSetPin(pSocket->ParseNum, (uint8_t)pin_value);
4028  ae6e 160b          	ldw	y,(OFST+7,sp)
4029  ae70 97            	ld	xl,a
4030  ae71 90e609        	ld	a,(9,y)
4031  ae74 95            	ld	xh,a
4032  ae75 cdba0f        	call	_GpioSetPin
4034                     ; 2947 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent
4036  ae78 1e0b          	ldw	x,(OFST+7,sp)
4037  ae7a e606          	ld	a,(6,x)
4038  ae7c 2704          	jreq	L3451
4041  ae7e 6a06          	dec	(6,x)
4042  ae80 e606          	ld	a,(6,x)
4043  ae82               L3451:
4044                     ; 2949             saved_nparseleft = pSocket->nParseLeft;
4046  ae82 c70059        	ld	_saved_nparseleft,a
4047                     ; 2950             pBuffer++;
4049  ae85 1e05          	ldw	x,(OFST+1,sp)
4050  ae87 5c            	incw	x
4051  ae88 1f05          	ldw	(OFST+1,sp),x
4052                     ; 2951 	    nBytes--;
4054  ae8a 1e09          	ldw	x,(OFST+5,sp)
4055  ae8c 5a            	decw	x
4056  ae8d 1f09          	ldw	(OFST+5,sp),x
4057                     ; 2952 	    if (nBytes == 0) {
4059  ae8f 2703ccb16c    	jrne	L7451
4060                     ; 2955 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4062  ae94 a605          	ld	a,#5
4063  ae96 c7005a        	ld	_saved_parsestate,a
4064  ae99 1e0b          	ldw	x,(OFST+7,sp)
4065  ae9b e70a          	ld	(10,x),a
4066                     ; 2956 	      break;
4068  ae9d ccb1bb        	jra	L5341
4069  aea0               L5351:
4070                     ; 2963           else if (pSocket->ParseCmd == 'a'
4070                     ; 2964                 || pSocket->ParseCmd == 'l'
4070                     ; 2965                 || pSocket->ParseCmd == 'm' ) {
4072  aea0 a161          	cp	a,#97
4073  aea2 2708          	jreq	L3551
4075  aea4 a16c          	cp	a,#108
4076  aea6 2704          	jreq	L3551
4078  aea8 a16d          	cp	a,#109
4079  aeaa 265b          	jrne	L1551
4080  aeac               L3551:
4081                     ; 2974 	    current_webpage = WEBPAGE_CONFIGURATION;
4083  aeac 3501001a      	mov	_current_webpage,#1
4084                     ; 2976 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4086  aeb0 725f0021      	clr	_break_while
4087                     ; 2978             tmp_pBuffer = pBuffer;
4089  aeb4 1e05          	ldw	x,(OFST+1,sp)
4090  aeb6 cf0025        	ldw	_tmp_pBuffer,x
4091                     ; 2979             tmp_nBytes = nBytes;
4093  aeb9 1e09          	ldw	x,(OFST+5,sp)
4094  aebb cf0023        	ldw	_tmp_nBytes,x
4095                     ; 2980 	    tmp_nParseLeft = pSocket->nParseLeft;
4097  aebe 1e0b          	ldw	x,(OFST+7,sp)
4098  aec0 e606          	ld	a,(6,x)
4099  aec2 c70022        	ld	_tmp_nParseLeft,a
4100                     ; 2981             switch (pSocket->ParseCmd) {
4102  aec5 e608          	ld	a,(8,x)
4104                     ; 2984               case 'm': i = 10; break;
4105  aec7 a061          	sub	a,#97
4106  aec9 270b          	jreq	L7301
4107  aecb a00b          	sub	a,#11
4108  aecd 270b          	jreq	L1401
4109  aecf 4a            	dec	a
4110  aed0 2708          	jreq	L1401
4111  aed2 7b04          	ld	a,(OFST+0,sp)
4112  aed4 2008          	jra	L1651
4113  aed6               L7301:
4114                     ; 2982               case 'a': i = 19; break;
4116  aed6 a613          	ld	a,#19
4119  aed8 2002          	jp	LC016
4120  aeda               L1401:
4121                     ; 2983               case 'l':
4121                     ; 2984               case 'm': i = 10; break;
4123  aeda a60a          	ld	a,#10
4124  aedc               LC016:
4125  aedc 6b04          	ld	(OFST+0,sp),a
4129  aede               L1651:
4130                     ; 2986             parse_POST_string(pSocket->ParseCmd, i);
4132  aede 160b          	ldw	y,(OFST+7,sp)
4133  aee0 97            	ld	xl,a
4134  aee1 90e608        	ld	a,(8,y)
4135  aee4 95            	ld	xh,a
4136  aee5 cdb581        	call	_parse_POST_string
4138                     ; 2987             pBuffer = tmp_pBuffer;
4140  aee8 ce0025        	ldw	x,_tmp_pBuffer
4141  aeeb 1f05          	ldw	(OFST+1,sp),x
4142                     ; 2988             nBytes = tmp_nBytes;
4144  aeed ce0023        	ldw	x,_tmp_nBytes
4145  aef0 1f09          	ldw	(OFST+5,sp),x
4146                     ; 2989 	    pSocket->nParseLeft = tmp_nParseLeft;
4148  aef2 1e0b          	ldw	x,(OFST+7,sp)
4149  aef4 c60022        	ld	a,_tmp_nParseLeft
4150  aef7 e706          	ld	(6,x),a
4151                     ; 2990             if (break_while == 1) {
4153  aef9 c60021        	ld	a,_break_while
4154  aefc 4a            	dec	a
4155  aefd 2692          	jrne	L7451
4156                     ; 2994 	      pSocket->ParseState = saved_parsestate;
4158  aeff c6005a        	ld	a,_saved_parsestate
4159  af02 e70a          	ld	(10,x),a
4160                     ; 2995 	      break;
4162  af04 ccb1bb        	jra	L5341
4163  af07               L1551:
4164                     ; 3002           else if (pSocket->ParseCmd == 'b') {
4166  af07 a162          	cp	a,#98
4167  af09 2654          	jrne	L7651
4168                     ; 3010 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4170  af0b 725f0021      	clr	_break_while
4171                     ; 3012             tmp_pBuffer = pBuffer;
4173  af0f 1e05          	ldw	x,(OFST+1,sp)
4174  af11 cf0025        	ldw	_tmp_pBuffer,x
4175                     ; 3013             tmp_nBytes = nBytes;
4177  af14 1e09          	ldw	x,(OFST+5,sp)
4178  af16 cf0023        	ldw	_tmp_nBytes,x
4179                     ; 3014 	    tmp_nParseLeft = pSocket->nParseLeft;
4181  af19 1e0b          	ldw	x,(OFST+7,sp)
4182  af1b e606          	ld	a,(6,x)
4183  af1d c70022        	ld	_tmp_nParseLeft,a
4184                     ; 3015             parse_POST_address(pSocket->ParseCmd, pSocket->ParseNum);
4186  af20 e609          	ld	a,(9,x)
4187  af22 160b          	ldw	y,(OFST+7,sp)
4188  af24 97            	ld	xl,a
4189  af25 90e608        	ld	a,(8,y)
4190  af28 95            	ld	xh,a
4191  af29 cdb702        	call	_parse_POST_address
4193                     ; 3016             pBuffer = tmp_pBuffer;
4195  af2c ce0025        	ldw	x,_tmp_pBuffer
4196  af2f 1f05          	ldw	(OFST+1,sp),x
4197                     ; 3017             nBytes = tmp_nBytes;
4199  af31 ce0023        	ldw	x,_tmp_nBytes
4200  af34 1f09          	ldw	(OFST+5,sp),x
4201                     ; 3018 	    pSocket->nParseLeft = tmp_nParseLeft;
4203  af36 1e0b          	ldw	x,(OFST+7,sp)
4204  af38 c60022        	ld	a,_tmp_nParseLeft
4205  af3b e706          	ld	(6,x),a
4206                     ; 3019             if (break_while == 1) {
4208  af3d c60021        	ld	a,_break_while
4209  af40 a101          	cp	a,#1
4210  af42 260a          	jrne	L1751
4211                     ; 3023               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4213  af44 a604          	ld	a,#4
4214  af46 c7005a        	ld	_saved_parsestate,a
4215  af49 e70a          	ld	(10,x),a
4216                     ; 3024 	      break;
4218  af4b ccb1bb        	jra	L5341
4219  af4e               L1751:
4220                     ; 3026             if (break_while == 2) {
4222  af4e a102          	cp	a,#2
4223  af50 2703ccb16c    	jrne	L7451
4224                     ; 3029               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4226  af55 a605          	ld	a,#5
4227  af57 c7005a        	ld	_saved_parsestate,a
4228  af5a e70a          	ld	(10,x),a
4229                     ; 3030 	      break;
4231  af5c ccb1bb        	jra	L5341
4232  af5f               L7651:
4233                     ; 3037           else if (pSocket->ParseCmd == 'c') {
4235  af5f a163          	cp	a,#99
4236  af61 2651          	jrne	L7751
4237                     ; 3046 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4239  af63 725f0021      	clr	_break_while
4240                     ; 3048             tmp_pBuffer = pBuffer;
4242  af67 1e05          	ldw	x,(OFST+1,sp)
4243  af69 cf0025        	ldw	_tmp_pBuffer,x
4244                     ; 3049             tmp_nBytes = nBytes;
4246  af6c 1e09          	ldw	x,(OFST+5,sp)
4247  af6e cf0023        	ldw	_tmp_nBytes,x
4248                     ; 3050 	    tmp_nParseLeft = pSocket->nParseLeft;
4250  af71 1e0b          	ldw	x,(OFST+7,sp)
4251  af73 e606          	ld	a,(6,x)
4252  af75 c70022        	ld	_tmp_nParseLeft,a
4253                     ; 3051             parse_POST_port(pSocket->ParseCmd, pSocket->ParseNum);
4255  af78 e609          	ld	a,(9,x)
4256  af7a 160b          	ldw	y,(OFST+7,sp)
4257  af7c 97            	ld	xl,a
4258  af7d 90e608        	ld	a,(8,y)
4259  af80 95            	ld	xh,a
4260  af81 cdb85a        	call	_parse_POST_port
4262                     ; 3052             pBuffer = tmp_pBuffer;
4264  af84 ce0025        	ldw	x,_tmp_pBuffer
4265  af87 1f05          	ldw	(OFST+1,sp),x
4266                     ; 3053             nBytes = tmp_nBytes;
4268  af89 ce0023        	ldw	x,_tmp_nBytes
4269  af8c 1f09          	ldw	(OFST+5,sp),x
4270                     ; 3054 	    pSocket->nParseLeft = tmp_nParseLeft;
4272  af8e 1e0b          	ldw	x,(OFST+7,sp)
4273  af90 c60022        	ld	a,_tmp_nParseLeft
4274  af93 e706          	ld	(6,x),a
4275                     ; 3055             if (break_while == 1) {
4277  af95 c60021        	ld	a,_break_while
4278  af98 a101          	cp	a,#1
4279  af9a 260a          	jrne	L1061
4280                     ; 3058               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4282  af9c a604          	ld	a,#4
4283  af9e c7005a        	ld	_saved_parsestate,a
4284  afa1 e70a          	ld	(10,x),a
4285                     ; 3059 	      break;
4287  afa3 ccb1bb        	jra	L5341
4288  afa6               L1061:
4289                     ; 3061             if (break_while == 2) {
4291  afa6 a102          	cp	a,#2
4292  afa8 26a8          	jrne	L7451
4293                     ; 3064               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4295  afaa a605          	ld	a,#5
4296  afac c7005a        	ld	_saved_parsestate,a
4297  afaf e70a          	ld	(10,x),a
4298                     ; 3065 	      break;
4300  afb1 ccb1bb        	jra	L5341
4301  afb4               L7751:
4302                     ; 3072           else if (pSocket->ParseCmd == 'd') {
4304  afb4 a164          	cp	a,#100
4305  afb6 2703ccb056    	jrne	L7061
4306                     ; 3078 	    alpha[0] = '-';
4308  afbb 352d001b      	mov	_alpha,#45
4309                     ; 3079 	    alpha[1] = '-';
4311  afbf 352d001c      	mov	_alpha+1,#45
4312                     ; 3081 	    if (saved_postpartial_previous[0] == 'd') {
4314  afc3 c60029        	ld	a,_saved_postpartial_previous
4315  afc6 a164          	cp	a,#100
4316  afc8 261a          	jrne	L1161
4317                     ; 3085 	      saved_postpartial_previous[0] = '\0';
4319  afca 725f0029      	clr	_saved_postpartial_previous
4320                     ; 3091 	      if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
4322  afce c6002d        	ld	a,_saved_postpartial_previous+4
4323  afd1 2705          	jreq	L3161
4326  afd3 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
4327  afd8               L3161:
4328                     ; 3092 	      if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
4330  afd8 c6002e        	ld	a,_saved_postpartial_previous+5
4331  afdb 270a          	jreq	L7161
4334  afdd 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
4335  afe2 2003          	jra	L7161
4336  afe4               L1161:
4337                     ; 3099               clear_saved_postpartial_data(); // Clear [4] and higher
4339  afe4 cdb56c        	call	_clear_saved_postpartial_data
4341  afe7               L7161:
4342                     ; 3102             if (alpha[0] == '-') {
4344  afe7 c6001b        	ld	a,_alpha
4345  afea a12d          	cp	a,#45
4346  afec 261e          	jrne	L1261
4347                     ; 3103 	      alpha[0] = (uint8_t)(*pBuffer);
4349  afee 1e05          	ldw	x,(OFST+1,sp)
4350  aff0 f6            	ld	a,(x)
4351  aff1 c7001b        	ld	_alpha,a
4352                     ; 3104               saved_postpartial[4] = *pBuffer;
4354  aff4 c70045        	ld	_saved_postpartial+4,a
4355                     ; 3105               pSocket->nParseLeft--;
4357  aff7 1e0b          	ldw	x,(OFST+7,sp)
4358  aff9 6a06          	dec	(6,x)
4359                     ; 3106               saved_nparseleft = pSocket->nParseLeft;
4361  affb e606          	ld	a,(6,x)
4362  affd c70059        	ld	_saved_nparseleft,a
4363                     ; 3107               pBuffer++;
4365  b000 1e05          	ldw	x,(OFST+1,sp)
4366  b002 5c            	incw	x
4367  b003 1f05          	ldw	(OFST+1,sp),x
4368                     ; 3108 	      nBytes--;
4370  b005 1e09          	ldw	x,(OFST+5,sp)
4371  b007 5a            	decw	x
4372  b008 1f09          	ldw	(OFST+5,sp),x
4373                     ; 3109               if (nBytes == 0) break; // Hit end of fragment. Break out of
4375  b00a 27a5          	jreq	L5341
4378  b00c               L1261:
4379                     ; 3113             if (alpha[1] == '-') {
4381  b00c c6001c        	ld	a,_alpha+1
4382  b00f a12d          	cp	a,#45
4383  b011 261c          	jrne	L5261
4384                     ; 3114 	      alpha[1] = (uint8_t)(*pBuffer);
4386  b013 1e05          	ldw	x,(OFST+1,sp)
4387  b015 f6            	ld	a,(x)
4388  b016 c7001c        	ld	_alpha+1,a
4389                     ; 3115               saved_postpartial[5] = *pBuffer;
4391  b019 c70046        	ld	_saved_postpartial+5,a
4392                     ; 3116               pSocket->nParseLeft--;
4394  b01c 1e0b          	ldw	x,(OFST+7,sp)
4395  b01e 6a06          	dec	(6,x)
4396                     ; 3117               saved_nparseleft = pSocket->nParseLeft;
4398  b020 e606          	ld	a,(6,x)
4399  b022 c70059        	ld	_saved_nparseleft,a
4400                     ; 3118               pBuffer++;
4402  b025 1e05          	ldw	x,(OFST+1,sp)
4403  b027 5c            	incw	x
4404  b028 1f05          	ldw	(OFST+1,sp),x
4405                     ; 3119 	      nBytes--;
4407  b02a 1e09          	ldw	x,(OFST+5,sp)
4408  b02c 5a            	decw	x
4409  b02d 1f09          	ldw	(OFST+5,sp),x
4410  b02f               L5261:
4411                     ; 3125             clear_saved_postpartial_all();
4413  b02f cdb558        	call	_clear_saved_postpartial_all
4415                     ; 3127             SetMAC(pSocket->ParseNum, alpha[0], alpha[1]);
4417  b032 3b001c        	push	_alpha+1
4418  b035 c6001b        	ld	a,_alpha
4419  b038 160c          	ldw	y,(OFST+8,sp)
4420  b03a 97            	ld	xl,a
4421  b03b 90e609        	ld	a,(9,y)
4422  b03e 95            	ld	xh,a
4423  b03f cdba64        	call	_SetMAC
4425  b042 84            	pop	a
4426                     ; 3129             if (nBytes == 0) {
4428  b043 1e09          	ldw	x,(OFST+5,sp)
4429  b045 2703ccb16c    	jrne	L7451
4430                     ; 3132 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4432  b04a a605          	ld	a,#5
4433  b04c c7005a        	ld	_saved_parsestate,a
4434  b04f 1e0b          	ldw	x,(OFST+7,sp)
4435  b051 e70a          	ld	(10,x),a
4436                     ; 3133 	      break;
4438  b053 ccb1bb        	jra	L5341
4439  b056               L7061:
4440                     ; 3140 	  else if (pSocket->ParseCmd == 'g') {
4442  b056 a167          	cp	a,#103
4443  b058 2703ccb15f    	jrne	L3361
4444                     ; 3151             for (i=0; i<6; i++) alpha[i] = '-';
4446  b05d 4f            	clr	a
4447  b05e 6b04          	ld	(OFST+0,sp),a
4449  b060               L5361:
4452  b060 5f            	clrw	x
4453  b061 97            	ld	xl,a
4454  b062 a62d          	ld	a,#45
4455  b064 d7001b        	ld	(_alpha,x),a
4458  b067 0c04          	inc	(OFST+0,sp)
4462  b069 7b04          	ld	a,(OFST+0,sp)
4463  b06b a106          	cp	a,#6
4464  b06d 25f1          	jrult	L5361
4465                     ; 3153 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4467  b06f 725f0021      	clr	_break_while
4468                     ; 3156 	    if (saved_postpartial_previous[0] == 'g') {
4470  b073 c60029        	ld	a,_saved_postpartial_previous
4471  b076 a167          	cp	a,#103
4472  b078 2621          	jrne	L3461
4473                     ; 3160 	      saved_postpartial_previous[0] = '\0';
4475  b07a 725f0029      	clr	_saved_postpartial_previous
4476                     ; 3166               for (i=0; i<6; i++) {
4478  b07e 4f            	clr	a
4479  b07f 6b04          	ld	(OFST+0,sp),a
4481  b081               L5461:
4482                     ; 3167                 if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
4484  b081 5f            	clrw	x
4485  b082 97            	ld	xl,a
4486  b083 724d002d      	tnz	(_saved_postpartial_previous+4,x)
4487  b087 2708          	jreq	L3561
4490  b089 5f            	clrw	x
4491  b08a 97            	ld	xl,a
4492  b08b d6002d        	ld	a,(_saved_postpartial_previous+4,x)
4493  b08e d7001b        	ld	(_alpha,x),a
4494  b091               L3561:
4495                     ; 3166               for (i=0; i<6; i++) {
4497  b091 0c04          	inc	(OFST+0,sp)
4501  b093 7b04          	ld	a,(OFST+0,sp)
4502  b095 a106          	cp	a,#6
4503  b097 25e8          	jrult	L5461
4505  b099 2003          	jra	L5561
4506  b09b               L3461:
4507                     ; 3175               clear_saved_postpartial_data(); // Clear [4] and higher
4509  b09b cdb56c        	call	_clear_saved_postpartial_data
4511  b09e               L5561:
4512                     ; 3178             for (i=0; i<6; i++) {
4514  b09e 4f            	clr	a
4515  b09f 6b04          	ld	(OFST+0,sp),a
4517  b0a1               L7561:
4518                     ; 3184               if (alpha[i] == '-') {
4520  b0a1 5f            	clrw	x
4521  b0a2 97            	ld	xl,a
4522  b0a3 d6001b        	ld	a,(_alpha,x)
4523  b0a6 a12d          	cp	a,#45
4524  b0a8 2636          	jrne	L5661
4525                     ; 3185 	        alpha[i] = (uint8_t)(*pBuffer);
4527  b0aa 7b04          	ld	a,(OFST+0,sp)
4528  b0ac 5f            	clrw	x
4529  b0ad 1605          	ldw	y,(OFST+1,sp)
4530  b0af 97            	ld	xl,a
4531  b0b0 90f6          	ld	a,(y)
4532  b0b2 d7001b        	ld	(_alpha,x),a
4533                     ; 3186                 saved_postpartial[i+4] = *pBuffer;
4535  b0b5 5f            	clrw	x
4536  b0b6 7b04          	ld	a,(OFST+0,sp)
4537  b0b8 97            	ld	xl,a
4538  b0b9 90f6          	ld	a,(y)
4539  b0bb d70045        	ld	(_saved_postpartial+4,x),a
4540                     ; 3187                 pSocket->nParseLeft--;
4542  b0be 1e0b          	ldw	x,(OFST+7,sp)
4543  b0c0 6a06          	dec	(6,x)
4544                     ; 3188                 saved_nparseleft = pSocket->nParseLeft;
4546  b0c2 e606          	ld	a,(6,x)
4547  b0c4 c70059        	ld	_saved_nparseleft,a
4548                     ; 3189                 pBuffer++;
4550  b0c7 93            	ldw	x,y
4551  b0c8 5c            	incw	x
4552  b0c9 1f05          	ldw	(OFST+1,sp),x
4553                     ; 3190 	        nBytes--;
4555  b0cb 1e09          	ldw	x,(OFST+5,sp)
4556  b0cd 5a            	decw	x
4557  b0ce 1f09          	ldw	(OFST+5,sp),x
4558                     ; 3191                 if (i != 5 && nBytes == 0) {
4560  b0d0 7b04          	ld	a,(OFST+0,sp)
4561  b0d2 a105          	cp	a,#5
4562  b0d4 270a          	jreq	L5661
4564  b0d6 1e09          	ldw	x,(OFST+5,sp)
4565  b0d8 2606          	jrne	L5661
4566                     ; 3192 		  break_while = 1; // Hit end of fragment. Break out of
4568  b0da 35010021      	mov	_break_while,#1
4569                     ; 3194 		  break; // Break out of for() loop
4571  b0de 2008          	jra	L3661
4572  b0e0               L5661:
4573                     ; 3178             for (i=0; i<6; i++) {
4575  b0e0 0c04          	inc	(OFST+0,sp)
4579  b0e2 7b04          	ld	a,(OFST+0,sp)
4580  b0e4 a106          	cp	a,#6
4581  b0e6 25b9          	jrult	L7561
4582  b0e8               L3661:
4583                     ; 3198 	    if (break_while == 1) {
4585  b0e8 c60021        	ld	a,_break_while
4586  b0eb 4a            	dec	a
4587  b0ec 2603ccb1bb    	jreq	L5341
4588                     ; 3200 	      break;
4590                     ; 3206             clear_saved_postpartial_all();
4592  b0f1 cdb558        	call	_clear_saved_postpartial_all
4594                     ; 3209 	    if (alpha[0] != '0' && alpha[0] != '1') alpha[0] = '0';
4596  b0f4 c6001b        	ld	a,_alpha
4597  b0f7 a130          	cp	a,#48
4598  b0f9 2708          	jreq	L3761
4600  b0fb a131          	cp	a,#49
4601  b0fd 2704          	jreq	L3761
4604  b0ff 3530001b      	mov	_alpha,#48
4605  b103               L3761:
4606                     ; 3210 	    if (alpha[1] != '0' && alpha[1] != '1') alpha[1] = '0';
4608  b103 c6001c        	ld	a,_alpha+1
4609  b106 a130          	cp	a,#48
4610  b108 2708          	jreq	L5761
4612  b10a a131          	cp	a,#49
4613  b10c 2704          	jreq	L5761
4616  b10e 3530001c      	mov	_alpha+1,#48
4617  b112               L5761:
4618                     ; 3211 	    if (alpha[2] != '0' && alpha[2] != '1' && alpha[2] != '2') alpha[2] = '2';
4620  b112 c6001d        	ld	a,_alpha+2
4621  b115 a130          	cp	a,#48
4622  b117 270c          	jreq	L7761
4624  b119 a131          	cp	a,#49
4625  b11b 2708          	jreq	L7761
4627  b11d a132          	cp	a,#50
4628  b11f 2704          	jreq	L7761
4631  b121 3532001d      	mov	_alpha+2,#50
4632  b125               L7761:
4633                     ; 3212 	    if (alpha[3] != '0' && alpha[3] != '1') alpha[3] = '0';
4635  b125 c6001e        	ld	a,_alpha+3
4636  b128 a130          	cp	a,#48
4637  b12a 2708          	jreq	L1071
4639  b12c a131          	cp	a,#49
4640  b12e 2704          	jreq	L1071
4643  b130 3530001e      	mov	_alpha+3,#48
4644  b134               L1071:
4645                     ; 3214 	    Pending_config_settings[0] = (uint8_t)alpha[0];
4647  b134 55001b011f    	mov	_Pending_config_settings,_alpha
4648                     ; 3215             Pending_config_settings[1] = (uint8_t)alpha[1];
4650  b139 55001c0120    	mov	_Pending_config_settings+1,_alpha+1
4651                     ; 3216             Pending_config_settings[2] = (uint8_t)alpha[2];
4653  b13e 55001d0121    	mov	_Pending_config_settings+2,_alpha+2
4654                     ; 3217             Pending_config_settings[3] = (uint8_t)alpha[3];
4656  b143 55001e0122    	mov	_Pending_config_settings+3,_alpha+3
4657                     ; 3218             Pending_config_settings[4] = '0';
4659  b148 35300123      	mov	_Pending_config_settings+4,#48
4660                     ; 3219             Pending_config_settings[5] = '0';
4662  b14c 35300124      	mov	_Pending_config_settings+5,#48
4663                     ; 3221             if (nBytes == 0) {
4665  b150 1e09          	ldw	x,(OFST+5,sp)
4666  b152 2618          	jrne	L7451
4667                     ; 3224 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4669  b154 a605          	ld	a,#5
4670  b156 c7005a        	ld	_saved_parsestate,a
4671  b159 1e0b          	ldw	x,(OFST+7,sp)
4672  b15b e70a          	ld	(10,x),a
4673                     ; 3225 	      break;
4675  b15d 205c          	jra	L5341
4676  b15f               L3361:
4677                     ; 3232 	  else if (pSocket->ParseCmd == 'z') {
4679  b15f a17a          	cp	a,#122
4680  b161 2609          	jrne	L7451
4681                     ; 3257 	    nBytes = 0;
4683  b163 5f            	clrw	x
4684  b164 1f09          	ldw	(OFST+5,sp),x
4685                     ; 3258 	    pSocket->nParseLeft = 0;
4687  b166 1e0b          	ldw	x,(OFST+7,sp)
4688  b168 6f06          	clr	(6,x)
4689                     ; 3259             break; // Break out of the while loop. We're done with POST.
4691  b16a 204f          	jra	L5341
4692  b16c               L7451:
4693                     ; 3270           pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4695  b16c a605          	ld	a,#5
4696  b16e c7005a        	ld	_saved_parsestate,a
4697  b171 1e0b          	ldw	x,(OFST+7,sp)
4698  b173 e70a          	ld	(10,x),a
4699                     ; 3272           if (pSocket->nParseLeft < 30) {
4701  b175 e606          	ld	a,(6,x)
4702  b177 a11e          	cp	a,#30
4703  b179 2503ccad32    	jruge	L3341
4704                     ; 3287 	    if (pSocket->nParseLeftAddl > 0) {
4706  b17e 6d07          	tnz	(7,x)
4707  b180 27f9          	jreq	L3341
4708                     ; 3288 	      pSocket->nParseLeft += pSocket->nParseLeftAddl;
4710  b182 eb07          	add	a,(7,x)
4711  b184 e706          	ld	(6,x),a
4712                     ; 3289 	      pSocket->nParseLeftAddl = 0;
4714  b186 6f07          	clr	(7,x)
4715                     ; 3290 	      saved_nparseleft = pSocket->nParseLeft;
4717  b188 c70059        	ld	_saved_nparseleft,a
4718  b18b ccad32        	jra	L3341
4719  b18e               L3351:
4720                     ; 3295         else if (pSocket->ParseState == PARSE_DELIM) {
4722  b18e a105          	cp	a,#5
4723  b190 26f9          	jrne	L3341
4724                     ; 3296           if (pSocket->nParseLeft > 0) {
4726  b192 e606          	ld	a,(6,x)
4727  b194 2720          	jreq	L1271
4728                     ; 3299             pSocket->ParseState = saved_parsestate = PARSE_CMD;
4730  b196 725f005a      	clr	_saved_parsestate
4731  b19a 6f0a          	clr	(10,x)
4732                     ; 3300             pSocket->nParseLeft--;
4734  b19c 6a06          	dec	(6,x)
4735                     ; 3301             saved_nparseleft = pSocket->nParseLeft;
4737  b19e e606          	ld	a,(6,x)
4738  b1a0 c70059        	ld	_saved_nparseleft,a
4739                     ; 3302             pBuffer++;
4741  b1a3 1e05          	ldw	x,(OFST+1,sp)
4742  b1a5 5c            	incw	x
4743  b1a6 1f05          	ldw	(OFST+1,sp),x
4744                     ; 3303 	    nBytes--;
4746  b1a8 1e09          	ldw	x,(OFST+5,sp)
4747  b1aa 5a            	decw	x
4748  b1ab 1f09          	ldw	(OFST+5,sp),x
4749                     ; 3305 	    clear_saved_postpartial_all();
4751  b1ad cdb558        	call	_clear_saved_postpartial_all
4753                     ; 3309             if (nBytes == 0) {
4755  b1b0 1e09          	ldw	x,(OFST+5,sp)
4756  b1b2 26d7          	jrne	L3341
4757                     ; 3310 	      break; // Hit end of fragment but still have more to parse in
4759  b1b4 2005          	jra	L5341
4760  b1b6               L1271:
4761                     ; 3320             pSocket->nParseLeft = 0; // End the parsing
4763  b1b6 e706          	ld	(6,x),a
4764                     ; 3321 	    nBytes = 0;
4766  b1b8 5f            	clrw	x
4767  b1b9 1f09          	ldw	(OFST+5,sp),x
4768                     ; 3322 	    break; // Exit parsing
4769  b1bb               L5341:
4770                     ; 3349       if (pSocket->nParseLeft == 0) {
4772  b1bb 1e0b          	ldw	x,(OFST+7,sp)
4773  b1bd e606          	ld	a,(6,x)
4774  b1bf 264e          	jrne	L7271
4775                     ; 3352 	saved_nstate = STATE_NULL;
4777  b1c1 357f005b      	mov	_saved_nstate,#127
4778                     ; 3353 	saved_parsestate = PARSE_CMD;
4780  b1c5 c7005a        	ld	_saved_parsestate,a
4781                     ; 3354         saved_nparseleft = 0;
4783  b1c8 c70059        	ld	_saved_nparseleft,a
4784                     ; 3355         saved_newlines = 0;
4786  b1cb c70028        	ld	_saved_newlines,a
4787                     ; 3356 	for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i] = '\0';
4789  b1ce 6b04          	ld	(OFST+0,sp),a
4791  b1d0               L1371:
4794  b1d0 5f            	clrw	x
4795  b1d1 97            	ld	xl,a
4796  b1d2 724f0041      	clr	(_saved_postpartial,x)
4797  b1d6 5f            	clrw	x
4798  b1d7 97            	ld	xl,a
4799  b1d8 724f0029      	clr	(_saved_postpartial_previous,x)
4802  b1dc 0c04          	inc	(OFST+0,sp)
4806  b1de 7b04          	ld	a,(OFST+0,sp)
4807  b1e0 a118          	cp	a,#24
4808  b1e2 25ec          	jrult	L1371
4809                     ; 3362 	parse_complete = 1;
4811  b1e4 35010106      	mov	_parse_complete,#1
4812                     ; 3363 	pSocket->nState = STATE_SENDHEADER;
4814  b1e8 1e0b          	ldw	x,(OFST+7,sp)
4815  b1ea a60b          	ld	a,#11
4816  b1ec f7            	ld	(x),a
4817                     ; 3375         if (current_webpage == WEBPAGE_IOCONTROL) {
4819  b1ed c6001a        	ld	a,_current_webpage
4820  b1f0 260c          	jrne	L7371
4821                     ; 3376           pSocket->pData = g_HtmlPageIOControl;
4823  b1f2 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4824  b1f6 ef01          	ldw	(1,x),y
4825                     ; 3377           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4827  b1f8 90ae0c06      	ldw	y,#3078
4828  b1fc ef03          	ldw	(3,x),y
4829  b1fe               L7371:
4830                     ; 3379         if (current_webpage == WEBPAGE_CONFIGURATION) {
4832  b1fe 4a            	dec	a
4833  b1ff 2612          	jrne	L1341
4834                     ; 3380           pSocket->pData = g_HtmlPageConfiguration;
4836  b201 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
4837  b205 ef01          	ldw	(1,x),y
4838                     ; 3381           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
4840  b207 90ae0c31      	ldw	y,#3121
4841  b20b ef03          	ldw	(3,x),y
4842  b20d 2004          	jra	L1341
4843  b20f               L7271:
4844                     ; 3401 	uip_len = 0;
4846  b20f 5f            	clrw	x
4847  b210 cf0373        	ldw	_uip_len,x
4848  b213               L1341:
4849                     ; 3405     if (pSocket->nState == STATE_PARSEGET) {
4851  b213 1e0b          	ldw	x,(OFST+7,sp)
4852  b215 f6            	ld	a,(x)
4853  b216 a10d          	cp	a,#13
4854  b218 2703ccb46c    	jrne	L5471
4856  b21d ccb465        	jra	L1571
4857  b220               L7471:
4858                     ; 3434         if (pSocket->ParseState == PARSE_SLASH1) {
4860  b220 1e0b          	ldw	x,(OFST+7,sp)
4861  b222 e60a          	ld	a,(10,x)
4862  b224 a106          	cp	a,#6
4863  b226 263c          	jrne	L5571
4864                     ; 3437           pSocket->ParseCmd = *pBuffer;
4866  b228 1e05          	ldw	x,(OFST+1,sp)
4867  b22a f6            	ld	a,(x)
4868  b22b 1e0b          	ldw	x,(OFST+7,sp)
4869  b22d e708          	ld	(8,x),a
4870                     ; 3438           pSocket->nParseLeft--;
4872  b22f 6a06          	dec	(6,x)
4873                     ; 3439           pBuffer++;
4875  b231 1e05          	ldw	x,(OFST+1,sp)
4876  b233 5c            	incw	x
4877  b234 1f05          	ldw	(OFST+1,sp),x
4878                     ; 3440 	  nBytes--;
4880  b236 1e09          	ldw	x,(OFST+5,sp)
4881  b238 5a            	decw	x
4882  b239 1f09          	ldw	(OFST+5,sp),x
4883                     ; 3441 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
4885  b23b 1e0b          	ldw	x,(OFST+7,sp)
4886  b23d e608          	ld	a,(8,x)
4887  b23f a12f          	cp	a,#47
4888  b241 2605          	jrne	L7571
4889                     ; 3442 	    pSocket->ParseState = PARSE_NUM10;
4891  b243 a601          	ld	a,#1
4893  b245 ccb2de        	jp	LC019
4894  b248               L7571:
4895                     ; 3446 	    current_webpage = WEBPAGE_IOCONTROL;
4897  b248 725f001a      	clr	_current_webpage
4898                     ; 3447             pSocket->pData = g_HtmlPageIOControl;
4900  b24c 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4901  b250 ef01          	ldw	(1,x),y
4902                     ; 3448             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4904  b252 90ae0c06      	ldw	y,#3078
4905  b256 ef03          	ldw	(3,x),y
4906                     ; 3449             pSocket->nParseLeft = 0; // This will cause the while() to exit
4908  b258 6f06          	clr	(6,x)
4909                     ; 3451             pSocket->nState = STATE_CONNECTED;
4911  b25a 7f            	clr	(x)
4912                     ; 3452             pSocket->nPrevBytes = 0xFFFF;
4914  b25b 90aeffff      	ldw	y,#65535
4915  b25f ef0b          	ldw	(11,x),y
4916  b261 ccb454        	jra	L3671
4917  b264               L5571:
4918                     ; 3456         else if (pSocket->ParseState == PARSE_NUM10) {
4920  b264 a101          	cp	a,#1
4921  b266 2640          	jrne	L5671
4922                     ; 3461 	  if (*pBuffer == ' ') {
4924  b268 1e05          	ldw	x,(OFST+1,sp)
4925  b26a f6            	ld	a,(x)
4926  b26b a120          	cp	a,#32
4927  b26d 261e          	jrne	L7671
4928                     ; 3462 	    current_webpage = WEBPAGE_IOCONTROL;
4930  b26f 725f001a      	clr	_current_webpage
4931                     ; 3463             pSocket->pData = g_HtmlPageIOControl;
4933  b273 1e0b          	ldw	x,(OFST+7,sp)
4934  b275 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4935  b279 ef01          	ldw	(1,x),y
4936                     ; 3464             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4938  b27b 90ae0c06      	ldw	y,#3078
4939  b27f ef03          	ldw	(3,x),y
4940                     ; 3465             pSocket->nParseLeft = 0;
4942  b281 6f06          	clr	(6,x)
4943                     ; 3467             pSocket->nState = STATE_CONNECTED;
4945  b283 7f            	clr	(x)
4946                     ; 3468             pSocket->nPrevBytes = 0xFFFF;
4948  b284 90aeffff      	ldw	y,#65535
4949  b288 ef0b          	ldw	(11,x),y
4951  b28a ccb454        	jra	L3671
4952  b28d               L7671:
4953                     ; 3472 	  else if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
4955  b28d a130          	cp	a,#48
4956  b28f 2547          	jrult	L3002
4958  b291 a13a          	cp	a,#58
4959  b293 2443          	jruge	L3002
4960                     ; 3474             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
4962  b295 97            	ld	xl,a
4963  b296 a60a          	ld	a,#10
4964  b298 42            	mul	x,a
4965  b299 9f            	ld	a,xl
4966  b29a 1e0b          	ldw	x,(OFST+7,sp)
4967  b29c a0e0          	sub	a,#224
4968  b29e e709          	ld	(9,x),a
4969                     ; 3475 	    pSocket->ParseState = PARSE_NUM1;
4971  b2a0 a602          	ld	a,#2
4972  b2a2 e70a          	ld	(10,x),a
4973                     ; 3476             pSocket->nParseLeft--;
4975  b2a4 6a06          	dec	(6,x)
4976                     ; 3477             pBuffer++;
4977                     ; 3478 	    nBytes--;
4979  b2a6 2023          	jp	LC021
4980                     ; 3483             pSocket->nParseLeft = 0;
4981                     ; 3484             pSocket->ParseState = PARSE_FAIL;
4982  b2a8               L5671:
4983                     ; 3489         else if (pSocket->ParseState == PARSE_NUM1) {
4985  b2a8 a102          	cp	a,#2
4986  b2aa 2637          	jrne	L1002
4987                     ; 3490 	  if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
4989  b2ac 1e05          	ldw	x,(OFST+1,sp)
4990  b2ae f6            	ld	a,(x)
4991  b2af a130          	cp	a,#48
4992  b2b1 2525          	jrult	L3002
4994  b2b3 a13a          	cp	a,#58
4995  b2b5 2421          	jruge	L3002
4996                     ; 3492             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
4998  b2b7 1605          	ldw	y,(OFST+1,sp)
4999  b2b9 1e0b          	ldw	x,(OFST+7,sp)
5000  b2bb 90f6          	ld	a,(y)
5001  b2bd a030          	sub	a,#48
5002  b2bf eb09          	add	a,(9,x)
5003  b2c1 e709          	ld	(9,x),a
5004                     ; 3493             pSocket->ParseState = PARSE_VAL;
5006  b2c3 a604          	ld	a,#4
5007  b2c5 e70a          	ld	(10,x),a
5008                     ; 3494             pSocket->nParseLeft = 1; // Set to 1 so PARSE_VAL will be called
5010  b2c7 a601          	ld	a,#1
5011  b2c9 e706          	ld	(6,x),a
5012                     ; 3495             pBuffer++;
5014                     ; 3496 	    nBytes--;
5016  b2cb               LC021:
5018  b2cb 1e05          	ldw	x,(OFST+1,sp)
5019  b2cd 5c            	incw	x
5020  b2ce 1f05          	ldw	(OFST+1,sp),x
5022  b2d0 1e09          	ldw	x,(OFST+5,sp)
5023  b2d2 5a            	decw	x
5024  b2d3 1f09          	ldw	(OFST+5,sp),x
5026  b2d5 ccb454        	jra	L3671
5027  b2d8               L3002:
5028                     ; 3501             pSocket->nParseLeft = 0;
5030                     ; 3502             pSocket->ParseState = PARSE_FAIL;
5033  b2d8 1e0b          	ldw	x,(OFST+7,sp)
5035  b2da a607          	ld	a,#7
5036  b2dc 6f06          	clr	(6,x)
5037  b2de               LC019:
5038  b2de e70a          	ld	(10,x),a
5039  b2e0 ccb454        	jra	L3671
5040  b2e3               L1002:
5041                     ; 3506         else if (pSocket->ParseState == PARSE_VAL) {
5043  b2e3 a104          	cp	a,#4
5044  b2e5 26f9          	jrne	L3671
5045                     ; 3573           switch(pSocket->ParseNum)
5047  b2e7 e609          	ld	a,(9,x)
5049                     ; 3774 	      break;
5050  b2e9 a110          	cp	a,#16
5051  b2eb 2407          	jruge	L212
5052  b2ed 5f            	clrw	x
5053  b2ee 97            	ld	xl,a
5054  b2ef 58            	sllw	x
5055  b2f0 de9be8        	ldw	x,(L412,x)
5056  b2f3 fc            	jp	(x)
5057  b2f4               L212:
5058  b2f4 a037          	sub	a,#55
5059  b2f6 2603ccb3db    	jreq	L3011
5060  b2fb 4a            	dec	a
5061  b2fc 2603ccb3e5    	jreq	L5011
5062  b301 a004          	sub	a,#4
5063  b303 2603ccb3ee    	jreq	L7011
5064  b308 4a            	dec	a
5065  b309 2603ccb3fd    	jreq	L1111
5066  b30e a004          	sub	a,#4
5067  b310 2603ccb410    	jreq	L3111
5068  b315 a01a          	sub	a,#26
5069  b317 2603ccb41b    	jreq	L5111
5070  b31c a007          	sub	a,#7
5071  b31e 2603ccb421    	jreq	L7111
5072  b323 4a            	dec	a
5073  b324 2603ccb42d    	jreq	L1211
5074  b329 ccb439        	jra	L3211
5075  b32c               L3401:
5076                     ; 3623 	    case 0:  IO_8to1 &= (uint8_t)(~0x01);  parse_complete = 1; break; // Relay-01 OFF
5078  b32c 7211016d      	bres	_IO_8to1,#0
5081  b330 35010106      	mov	_parse_complete,#1
5084  b334 ccb450        	jra	L5102
5085  b337               L5401:
5086                     ; 3624 	    case 1:  IO_8to1 |= (uint8_t)0x01;     parse_complete = 1; break; // Relay-01 ON
5088  b337 7210016d      	bset	_IO_8to1,#0
5091  b33b 35010106      	mov	_parse_complete,#1
5094  b33f ccb450        	jra	L5102
5095  b342               L7401:
5096                     ; 3625 	    case 2:  IO_8to1 &= (uint8_t)(~0x02);  parse_complete = 1; break; // Relay-02 OFF
5098  b342 7213016d      	bres	_IO_8to1,#1
5101  b346 35010106      	mov	_parse_complete,#1
5104  b34a ccb450        	jra	L5102
5105  b34d               L1501:
5106                     ; 3626 	    case 3:  IO_8to1 |= (uint8_t)0x02;     parse_complete = 1; break; // Relay-02 ON
5108  b34d 7212016d      	bset	_IO_8to1,#1
5111  b351 35010106      	mov	_parse_complete,#1
5114  b355 ccb450        	jra	L5102
5115  b358               L3501:
5116                     ; 3627 	    case 4:  IO_8to1 &= (uint8_t)(~0x04);  parse_complete = 1; break; // Relay-03 OFF
5118  b358 7215016d      	bres	_IO_8to1,#2
5121  b35c 35010106      	mov	_parse_complete,#1
5124  b360 ccb450        	jra	L5102
5125  b363               L5501:
5126                     ; 3628 	    case 5:  IO_8to1 |= (uint8_t)0x04;     parse_complete = 1; break; // Relay-03 ON
5128  b363 7214016d      	bset	_IO_8to1,#2
5131  b367 35010106      	mov	_parse_complete,#1
5134  b36b ccb450        	jra	L5102
5135  b36e               L7501:
5136                     ; 3629 	    case 6:  IO_8to1 &= (uint8_t)(~0x08);  parse_complete = 1; break; // Relay-04 OFF
5138  b36e 7217016d      	bres	_IO_8to1,#3
5141  b372 35010106      	mov	_parse_complete,#1
5144  b376 ccb450        	jra	L5102
5145  b379               L1601:
5146                     ; 3630 	    case 7:  IO_8to1 |= (uint8_t)0x08;     parse_complete = 1; break; // Relay-04 ON
5148  b379 7216016d      	bset	_IO_8to1,#3
5151  b37d 35010106      	mov	_parse_complete,#1
5154  b381 ccb450        	jra	L5102
5155  b384               L3601:
5156                     ; 3631 	    case 8:  IO_8to1 &= (uint8_t)(~0x10);  parse_complete = 1; break; // Relay-05 OFF
5158  b384 7219016d      	bres	_IO_8to1,#4
5161  b388 35010106      	mov	_parse_complete,#1
5164  b38c ccb450        	jra	L5102
5165  b38f               L5601:
5166                     ; 3632 	    case 9:  IO_8to1 |= (uint8_t)0x10;     parse_complete = 1; break; // Relay-05 ON
5168  b38f 7218016d      	bset	_IO_8to1,#4
5171  b393 35010106      	mov	_parse_complete,#1
5174  b397 ccb450        	jra	L5102
5175  b39a               L7601:
5176                     ; 3633 	    case 10: IO_8to1 &= (uint8_t)(~0x20);  parse_complete = 1; break; // Relay-06 OFF
5178  b39a 721b016d      	bres	_IO_8to1,#5
5181  b39e 35010106      	mov	_parse_complete,#1
5184  b3a2 ccb450        	jra	L5102
5185  b3a5               L1701:
5186                     ; 3634 	    case 11: IO_8to1 |= (uint8_t)0x20;     parse_complete = 1; break; // Relay-06 ON
5188  b3a5 721a016d      	bset	_IO_8to1,#5
5191  b3a9 35010106      	mov	_parse_complete,#1
5194  b3ad ccb450        	jra	L5102
5195  b3b0               L3701:
5196                     ; 3635 	    case 12: IO_8to1 &= (uint8_t)(~0x40);  parse_complete = 1; break; // Relay-07 OFF
5198  b3b0 721d016d      	bres	_IO_8to1,#6
5201  b3b4 35010106      	mov	_parse_complete,#1
5204  b3b8 ccb450        	jra	L5102
5205  b3bb               L5701:
5206                     ; 3636 	    case 13: IO_8to1 |= (uint8_t)0x40;     parse_complete = 1; break; // Relay-07 ON
5208  b3bb 721c016d      	bset	_IO_8to1,#6
5211  b3bf 35010106      	mov	_parse_complete,#1
5214  b3c3 ccb450        	jra	L5102
5215  b3c6               L7701:
5216                     ; 3637 	    case 14: IO_8to1 &= (uint8_t)(~0x80);  parse_complete = 1; break; // Relay-08 OFF
5218  b3c6 721f016d      	bres	_IO_8to1,#7
5221  b3ca 35010106      	mov	_parse_complete,#1
5224  b3ce ccb450        	jra	L5102
5225  b3d1               L1011:
5226                     ; 3638 	    case 15: IO_8to1 |= (uint8_t)0x80;     parse_complete = 1; break; // Relay-08 ON
5228  b3d1 721e016d      	bset	_IO_8to1,#7
5231  b3d5 35010106      	mov	_parse_complete,#1
5234  b3d9 2075          	jra	L5102
5235  b3db               L3011:
5236                     ; 3640 	    case 55:
5236                     ; 3641   	      IO_8to1 = (uint8_t)0xff; // Relays 1-8 ON
5238  b3db 35ff016d      	mov	_IO_8to1,#255
5239                     ; 3642 	      parse_complete = 1; 
5241  b3df 35010106      	mov	_parse_complete,#1
5242                     ; 3643 	      break;
5244  b3e3 206b          	jra	L5102
5245  b3e5               L5011:
5246                     ; 3645 	    case 56:
5246                     ; 3646               IO_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
5248  b3e5 c7016d        	ld	_IO_8to1,a
5249                     ; 3647 	      parse_complete = 1; 
5251  b3e8 35010106      	mov	_parse_complete,#1
5252                     ; 3648 	      break;
5254  b3ec 2062          	jra	L5102
5255  b3ee               L7011:
5256                     ; 3655 	    case 60: // Show IO Control page
5256                     ; 3656 	      current_webpage = WEBPAGE_IOCONTROL;
5258  b3ee c7001a        	ld	_current_webpage,a
5259                     ; 3657               pSocket->pData = g_HtmlPageIOControl;
5261  b3f1 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5262  b3f5 ef01          	ldw	(1,x),y
5263                     ; 3658               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5265  b3f7 90ae0c06      	ldw	y,#3078
5266                     ; 3659               pSocket->nState = STATE_CONNECTED;
5267                     ; 3660               pSocket->nPrevBytes = 0xFFFF;
5268                     ; 3661 	      break;
5270  b3fb 200e          	jp	LC018
5271  b3fd               L1111:
5272                     ; 3663 	    case 61: // Show Configuration page
5272                     ; 3664 	      current_webpage = WEBPAGE_CONFIGURATION;
5274  b3fd 3501001a      	mov	_current_webpage,#1
5275                     ; 3665               pSocket->pData = g_HtmlPageConfiguration;
5277  b401 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5278  b405 ef01          	ldw	(1,x),y
5279                     ; 3666               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5281  b407 90ae0c31      	ldw	y,#3121
5282                     ; 3667               pSocket->nState = STATE_CONNECTED;
5284  b40b               LC018:
5285  b40b ef03          	ldw	(3,x),y
5289  b40d f7            	ld	(x),a
5290                     ; 3668               pSocket->nPrevBytes = 0xFFFF;
5291                     ; 3669 	      break;
5293  b40e 203a          	jp	LC017
5294  b410               L3111:
5295                     ; 3689 	    case 65: // Flash LED for diagnostics
5295                     ; 3690 	      // XXXXXXXXXXXXXXXXXXXXXX
5295                     ; 3691 	      // XXXXXXXXXXXXXXXXXXXXXX
5295                     ; 3692 	      // XXXXXXXXXXXXXXXXXXXXXX
5295                     ; 3693 	      debugflash();
5297  b410 cdcd01        	call	_debugflash
5299                     ; 3694 	      debugflash();
5301  b413 cdcd01        	call	_debugflash
5303                     ; 3695 	      debugflash();
5305  b416 cdcd01        	call	_debugflash
5307                     ; 3699 	      break;
5309  b419 2035          	jra	L5102
5310  b41b               L5111:
5311                     ; 3734 	    case 91: // Reboot
5311                     ; 3735 	      user_reboot_request = 1;
5313  b41b 3501010a      	mov	_user_reboot_request,#1
5314                     ; 3736 	      break;
5316  b41f 202f          	jra	L5102
5317  b421               L7111:
5318                     ; 3738             case 98: // Show Very Short Form IO state page
5318                     ; 3739 	      // Normally when a page is transmitted the "current_webpage" is
5318                     ; 3740 	      // updated to reflect the page just transmitted. This is not
5318                     ; 3741 	      // done for this case as the page is very short (only requires
5318                     ; 3742 	      // one packet to send) and not changing the current_webpage
5318                     ; 3743 	      // pointer prevents "page interference" between normal browser
5318                     ; 3744 	      // activity and the automated functions that normally use this
5318                     ; 3745 	      // page.
5318                     ; 3746 	      // current_webpage = WEBPAGE_SSTATE;
5318                     ; 3747               pSocket->pData = g_HtmlPageSstate;
5320  b421 90ae9948      	ldw	y,#L12_g_HtmlPageSstate
5321  b425 ef01          	ldw	(1,x),y
5322                     ; 3748               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
5324  b427 90ae0004      	ldw	y,#4
5325                     ; 3749               pSocket->nState = STATE_CONNECTED;
5326                     ; 3750               pSocket->nPrevBytes = 0xFFFF;
5327                     ; 3751 	      break;
5329  b42b 20de          	jp	LC018
5330  b42d               L1211:
5331                     ; 3753             case 99: // Show Short Form IO state page
5331                     ; 3754 	      // Normally when a page is transmitted the "current_webpage" is
5331                     ; 3755 	      // updated to reflect the page just transmitted. This is not
5331                     ; 3756 	      // done for this case as the page is very short (only requires
5331                     ; 3757 	      // one packet to send) and not changing the current_webpage
5331                     ; 3758 	      // pointer prevents "page interference" between normal browser
5331                     ; 3759 	      // activity and the automated functions that normally use this
5331                     ; 3760 	      // page.
5331                     ; 3761 	      // current_webpage = WEBPAGE_RSTATE;
5331                     ; 3762               pSocket->pData = g_HtmlPageRstate;
5333  b42d 90ae98c1      	ldw	y,#L71_g_HtmlPageRstate
5334  b431 ef01          	ldw	(1,x),y
5335                     ; 3763               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
5337  b433 90ae0086      	ldw	y,#134
5338                     ; 3764               pSocket->nState = STATE_CONNECTED;
5339                     ; 3765               pSocket->nPrevBytes = 0xFFFF;
5340                     ; 3766 	      break;
5342  b437 20d2          	jp	LC018
5343  b439               L3211:
5344                     ; 3768 	    default: // Show IO Control page
5344                     ; 3769 	      current_webpage = WEBPAGE_IOCONTROL;
5346  b439 725f001a      	clr	_current_webpage
5347                     ; 3770               pSocket->pData = g_HtmlPageIOControl;
5349  b43d 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5350  b441 ef01          	ldw	(1,x),y
5351                     ; 3771               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5353  b443 90ae0c06      	ldw	y,#3078
5354  b447 ef03          	ldw	(3,x),y
5355                     ; 3772               pSocket->nState = STATE_CONNECTED;
5357  b449 7f            	clr	(x)
5358                     ; 3773               pSocket->nPrevBytes = 0xFFFF;
5360  b44a               LC017:
5365  b44a 90aeffff      	ldw	y,#65535
5366  b44e ef0b          	ldw	(11,x),y
5367                     ; 3774 	      break;
5369  b450               L5102:
5370                     ; 3776           pSocket->nParseLeft = 0;
5372  b450 1e0b          	ldw	x,(OFST+7,sp)
5373  b452 6f06          	clr	(6,x)
5374  b454               L3671:
5375                     ; 3779         if (pSocket->ParseState == PARSE_FAIL) {
5377  b454 1e0b          	ldw	x,(OFST+7,sp)
5378  b456 e60a          	ld	a,(10,x)
5379  b458 a107          	cp	a,#7
5380                     ; 3784           pSocket->nState = STATE_SENDHEADER;
5381                     ; 3785 	  break;
5383  b45a 2704          	jreq	LC022
5384                     ; 3788         if (pSocket->nParseLeft == 0) {
5386  b45c e606          	ld	a,(6,x)
5387  b45e 2605          	jrne	L1571
5388                     ; 3791           pSocket->nState = STATE_SENDHEADER;
5390  b460               LC022:
5392  b460 a60b          	ld	a,#11
5393  b462 f7            	ld	(x),a
5394                     ; 3792           break;
5396  b463 2007          	jra	L5471
5397  b465               L1571:
5398                     ; 3433       while (nBytes != 0) {
5400  b465 1e09          	ldw	x,(OFST+5,sp)
5401  b467 2703ccb220    	jrne	L7471
5402  b46c               L5471:
5403                     ; 3797     if (pSocket->nState == STATE_SENDHEADER) {
5405  b46c 1e0b          	ldw	x,(OFST+7,sp)
5406  b46e f6            	ld	a,(x)
5407  b46f a10b          	cp	a,#11
5408  b471 261c          	jrne	L5211
5409                     ; 3803       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5411  b473 cda2b3        	call	_adjust_template_size
5413  b476 89            	pushw	x
5414  b477 ce0375        	ldw	x,_uip_appdata
5415  b47a cda412        	call	L5_CopyHttpHeader
5417  b47d 5b02          	addw	sp,#2
5418  b47f 89            	pushw	x
5419  b480 ce0375        	ldw	x,_uip_appdata
5420  b483 cdef7b        	call	_uip_send
5422  b486 85            	popw	x
5423                     ; 3804       pSocket->nState = STATE_SENDDATA;
5425  b487 1e0b          	ldw	x,(OFST+7,sp)
5426  b489 a60c          	ld	a,#12
5427  b48b f7            	ld	(x),a
5428                     ; 3805       return;
5430  b48c ccabad        	jra	L242
5431  b48f               L5211:
5432                     ; 3808     senddata:
5432                     ; 3809     if (pSocket->nState == STATE_SENDDATA) {
5434  b48f 1e0b          	ldw	x,(OFST+7,sp)
5435  b491 f6            	ld	a,(x)
5436  b492 a10c          	cp	a,#12
5437  b494 26f6          	jrne	L242
5438                     ; 3816       if (pSocket->nDataLeft == 0) {
5440  b496 e604          	ld	a,(4,x)
5441  b498 ea03          	or	a,(3,x)
5442  b49a 2605          	jrne	L7202
5443                     ; 3818         nBufSize = 0;
5445  b49c 5f            	clrw	x
5446  b49d 1f02          	ldw	(OFST-2,sp),x
5449  b49f 202f          	jra	L1302
5450  b4a1               L7202:
5451                     ; 3821         pSocket->nPrevBytes = pSocket->nDataLeft;
5453  b4a1 9093          	ldw	y,x
5454  b4a3 90ee03        	ldw	y,(3,y)
5455  b4a6 ef0b          	ldw	(11,x),y
5456                     ; 3822         nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5458  b4a8 ce0371        	ldw	x,_uip_conn
5459  b4ab ee12          	ldw	x,(18,x)
5460  b4ad 89            	pushw	x
5461  b4ae 1e0d          	ldw	x,(OFST+9,sp)
5462  b4b0 1c0003        	addw	x,#3
5463  b4b3 89            	pushw	x
5464  b4b4 1e0f          	ldw	x,(OFST+11,sp)
5465  b4b6 5c            	incw	x
5466  b4b7 89            	pushw	x
5467  b4b8 ce0375        	ldw	x,_uip_appdata
5468  b4bb cda4de        	call	L7_CopyHttpData
5470  b4be 5b06          	addw	sp,#6
5471  b4c0 1f02          	ldw	(OFST-2,sp),x
5473                     ; 3823         pSocket->nPrevBytes -= pSocket->nDataLeft;
5475  b4c2 1e0b          	ldw	x,(OFST+7,sp)
5476  b4c4 e60c          	ld	a,(12,x)
5477  b4c6 e004          	sub	a,(4,x)
5478  b4c8 e70c          	ld	(12,x),a
5479  b4ca e60b          	ld	a,(11,x)
5480  b4cc e203          	sbc	a,(3,x)
5481  b4ce e70b          	ld	(11,x),a
5482  b4d0               L1302:
5483                     ; 3826       if (nBufSize == 0) {
5485  b4d0 1e02          	ldw	x,(OFST-2,sp)
5486  b4d2 2621          	jrne	LC014
5487                     ; 3828         uip_close();
5489  b4d4               LC015:
5491  b4d4 351002c8      	mov	_uip_flags,#16
5493  b4d8 ccabad        	jra	L242
5494                     ; 3832         uip_send(uip_appdata, nBufSize);
5496                     ; 3834       return;
5498  b4db               L7321:
5499                     ; 3838   else if (uip_rexmit()) {
5501  b4db 720502c875    	btjf	_uip_flags,#2,L5321
5502                     ; 3839     if (pSocket->nPrevBytes == 0xFFFF) {
5504  b4e0 160b          	ldw	y,(OFST+7,sp)
5505  b4e2 90ee0b        	ldw	y,(11,y)
5506  b4e5 905c          	incw	y
5507  b4e7 2617          	jrne	L3402
5508                     ; 3841       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5510  b4e9 cda2b3        	call	_adjust_template_size
5512  b4ec 89            	pushw	x
5513  b4ed ce0375        	ldw	x,_uip_appdata
5514  b4f0 cda412        	call	L5_CopyHttpHeader
5516  b4f3 5b02          	addw	sp,#2
5518  b4f5               LC014:
5520  b4f5 89            	pushw	x
5521  b4f6 ce0375        	ldw	x,_uip_appdata
5522  b4f9 cdef7b        	call	_uip_send
5523  b4fc 85            	popw	x
5525  b4fd ccabad        	jra	L242
5526  b500               L3402:
5527                     ; 3844       pSocket->pData -= pSocket->nPrevBytes;
5529  b500 1e0b          	ldw	x,(OFST+7,sp)
5530  b502 e602          	ld	a,(2,x)
5531  b504 e00c          	sub	a,(12,x)
5532  b506 e702          	ld	(2,x),a
5533  b508 e601          	ld	a,(1,x)
5534  b50a e20b          	sbc	a,(11,x)
5535  b50c e701          	ld	(1,x),a
5536                     ; 3845       pSocket->nDataLeft += pSocket->nPrevBytes;
5538  b50e e604          	ld	a,(4,x)
5539  b510 eb0c          	add	a,(12,x)
5540  b512 e704          	ld	(4,x),a
5541  b514 e603          	ld	a,(3,x)
5542  b516 e90b          	adc	a,(11,x)
5543                     ; 3846       pSocket->nPrevBytes = pSocket->nDataLeft;
5545  b518 9093          	ldw	y,x
5546  b51a e703          	ld	(3,x),a
5547  b51c 90ee03        	ldw	y,(3,y)
5548  b51f ef0b          	ldw	(11,x),y
5549                     ; 3847       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5551  b521 ce0371        	ldw	x,_uip_conn
5552  b524 ee12          	ldw	x,(18,x)
5553  b526 89            	pushw	x
5554  b527 1e0d          	ldw	x,(OFST+9,sp)
5555  b529 1c0003        	addw	x,#3
5556  b52c 89            	pushw	x
5557  b52d 1e0f          	ldw	x,(OFST+11,sp)
5558  b52f 5c            	incw	x
5559  b530 89            	pushw	x
5560  b531 ce0375        	ldw	x,_uip_appdata
5561  b534 cda4de        	call	L7_CopyHttpData
5563  b537 5b06          	addw	sp,#6
5564  b539 1f02          	ldw	(OFST-2,sp),x
5566                     ; 3848       pSocket->nPrevBytes -= pSocket->nDataLeft;
5568  b53b 1e0b          	ldw	x,(OFST+7,sp)
5569  b53d e60c          	ld	a,(12,x)
5570  b53f e004          	sub	a,(4,x)
5571  b541 e70c          	ld	(12,x),a
5572  b543 e60b          	ld	a,(11,x)
5573  b545 e203          	sbc	a,(3,x)
5574  b547 e70b          	ld	(11,x),a
5575                     ; 3849       if (nBufSize == 0) {
5577  b549 1e02          	ldw	x,(OFST-2,sp)
5578                     ; 3851         uip_close();
5580  b54b 2787          	jreq	LC015
5581                     ; 3855         uip_send(uip_appdata, nBufSize);
5583  b54d 89            	pushw	x
5584  b54e ce0375        	ldw	x,_uip_appdata
5585  b551 cdef7b        	call	_uip_send
5587  b554 85            	popw	x
5588                     ; 3858     return;
5590  b555               L5321:
5591                     ; 3860 }
5593  b555 ccabad        	jra	L242
5627                     ; 3863 void clear_saved_postpartial_all(void)
5627                     ; 3864 {
5628                     .text:	section	.text,new
5629  b558               _clear_saved_postpartial_all:
5631  b558 88            	push	a
5632       00000001      OFST:	set	1
5635                     ; 3866   for (i=0; i<24; i++) saved_postpartial[i] = '\0';
5637  b559 4f            	clr	a
5638  b55a 6b01          	ld	(OFST+0,sp),a
5640  b55c               L7602:
5643  b55c 5f            	clrw	x
5644  b55d 97            	ld	xl,a
5645  b55e 724f0041      	clr	(_saved_postpartial,x)
5648  b562 0c01          	inc	(OFST+0,sp)
5652  b564 7b01          	ld	a,(OFST+0,sp)
5653  b566 a118          	cp	a,#24
5654  b568 25f2          	jrult	L7602
5655                     ; 3867 }
5658  b56a 84            	pop	a
5659  b56b 81            	ret	
5693                     ; 3870 void clear_saved_postpartial_data(void)
5693                     ; 3871 {
5694                     .text:	section	.text,new
5695  b56c               _clear_saved_postpartial_data:
5697  b56c 88            	push	a
5698       00000001      OFST:	set	1
5701                     ; 3873   for (i=4; i<24; i++) saved_postpartial[i] = '\0';
5703  b56d a604          	ld	a,#4
5704  b56f 6b01          	ld	(OFST+0,sp),a
5706  b571               L1112:
5709  b571 5f            	clrw	x
5710  b572 97            	ld	xl,a
5711  b573 724f0041      	clr	(_saved_postpartial,x)
5714  b577 0c01          	inc	(OFST+0,sp)
5718  b579 7b01          	ld	a,(OFST+0,sp)
5719  b57b a118          	cp	a,#24
5720  b57d 25f2          	jrult	L1112
5721                     ; 3874 }
5724  b57f 84            	pop	a
5725  b580 81            	ret	
5759                     ; 3877 void clear_saved_postpartial_previous(void)
5759                     ; 3878 {
5760                     .text:	section	.text,new
5761                     _clear_saved_postpartial_previous:
5763                     	push	a
5764       00000001      OFST:	set	1
5767                     ; 3880   for (i=0; i<24; i++) saved_postpartial_previous[i] = '\0';
5769                     	clr	a
5770                     	ld	(OFST+0,sp),a
5772                     L3312:
5775                     	clrw	x
5776                     	ld	xl,a
5777                     	clr	(_saved_postpartial_previous,x)
5780                     	inc	(OFST+0,sp)
5784                     	ld	a,(OFST+0,sp)
5785                     	cp	a,#24
5786                     	jrult	L3312
5787                     ; 3881 }
5790                     	pop	a
5791                     	ret	
5881                     ; 3884 void parse_POST_string(uint8_t curr_ParseCmd, uint8_t num_chars)
5881                     ; 3885 {
5882                     .text:	section	.text,new
5883  b581               _parse_POST_string:
5885  b581 89            	pushw	x
5886  b582 5217          	subw	sp,#23
5887       00000017      OFST:	set	23
5890                     ; 3908   amp_found = 0;
5892  b584 0f02          	clr	(OFST-21,sp)
5894                     ; 3909   for (i=0; i<20; i++) tmp_Pending[i] = '\0';
5896  b586 0f17          	clr	(OFST+0,sp)
5898  b588               L3712:
5901  b588 96            	ldw	x,sp
5902  b589 1c0003        	addw	x,#OFST-20
5903  b58c 9f            	ld	a,xl
5904  b58d 5e            	swapw	x
5905  b58e 1b17          	add	a,(OFST+0,sp)
5906  b590 2401          	jrnc	L452
5907  b592 5c            	incw	x
5908  b593               L452:
5909  b593 02            	rlwa	x,a
5910  b594 7f            	clr	(x)
5913  b595 0c17          	inc	(OFST+0,sp)
5917  b597 7b17          	ld	a,(OFST+0,sp)
5918  b599 a114          	cp	a,#20
5919  b59b 25eb          	jrult	L3712
5920                     ; 3911   if (saved_postpartial_previous[0] == curr_ParseCmd) {
5922  b59d c60029        	ld	a,_saved_postpartial_previous
5923  b5a0 1118          	cp	a,(OFST+1,sp)
5924  b5a2 260a          	jrne	L1022
5925                     ; 3914     saved_postpartial_previous[0] = '\0';
5927  b5a4 725f0029      	clr	_saved_postpartial_previous
5928                     ; 3920     frag_flag = 1; // frag_flag is used to manage the TCP Fragment restore
5930  b5a8 a601          	ld	a,#1
5931  b5aa 6b17          	ld	(OFST+0,sp),a
5934  b5ac 2005          	jra	L3022
5935  b5ae               L1022:
5936                     ; 3924     frag_flag = 0;
5938  b5ae 0f17          	clr	(OFST+0,sp)
5940                     ; 3928     clear_saved_postpartial_data(); // Clear [4] and higher
5942  b5b0 cdb56c        	call	_clear_saved_postpartial_data
5944  b5b3               L3022:
5945                     ; 3949   resume = 0;
5947  b5b3 0f01          	clr	(OFST-22,sp)
5949                     ; 3950   if (frag_flag == 1) {
5951  b5b5 7b17          	ld	a,(OFST+0,sp)
5952  b5b7 4a            	dec	a
5953  b5b8 263f          	jrne	L5022
5954                     ; 3952     for (i = 0; i < num_chars; i++) {
5956  b5ba 6b17          	ld	(OFST+0,sp),a
5959  b5bc 2033          	jra	L3122
5960  b5be               L7022:
5961                     ; 3961       if (saved_postpartial_previous[4+i] != '\0') {
5963  b5be 5f            	clrw	x
5964  b5bf 97            	ld	xl,a
5965  b5c0 724d002d      	tnz	(_saved_postpartial_previous+4,x)
5966  b5c4 271b          	jreq	L7122
5967                     ; 3962         tmp_Pending[i] = saved_postpartial_previous[4+i];
5969  b5c6 96            	ldw	x,sp
5970  b5c7 1c0003        	addw	x,#OFST-20
5971  b5ca 9f            	ld	a,xl
5972  b5cb 5e            	swapw	x
5973  b5cc 1b17          	add	a,(OFST+0,sp)
5974  b5ce 2401          	jrnc	L062
5975  b5d0 5c            	incw	x
5976  b5d1               L062:
5977  b5d1 02            	rlwa	x,a
5978  b5d2 7b17          	ld	a,(OFST+0,sp)
5979  b5d4 905f          	clrw	y
5980  b5d6 9097          	ld	yl,a
5981  b5d8 90d6002d      	ld	a,(_saved_postpartial_previous+4,y)
5982  b5dc f7            	ld	(x),a
5984                     ; 3952     for (i = 0; i < num_chars; i++) {
5986  b5dd 0c17          	inc	(OFST+0,sp)
5988  b5df 2010          	jra	L3122
5989  b5e1               L7122:
5990                     ; 3965         resume = i;
5992  b5e1 6b01          	ld	(OFST-22,sp),a
5994                     ; 3966         break;
5995  b5e3               L5122:
5996                     ; 3969     if (*tmp_pBuffer == '&') {
5998  b5e3 72c60025      	ld	a,[_tmp_pBuffer.w]
5999  b5e7 a126          	cp	a,#38
6000  b5e9 260e          	jrne	L5022
6001                     ; 3973       amp_found = 1;
6003  b5eb a601          	ld	a,#1
6004  b5ed 6b02          	ld	(OFST-21,sp),a
6006  b5ef 2008          	jra	L5022
6007  b5f1               L3122:
6008                     ; 3952     for (i = 0; i < num_chars; i++) {
6010  b5f1 7b17          	ld	a,(OFST+0,sp)
6011  b5f3 1119          	cp	a,(OFST+2,sp)
6012  b5f5 25c7          	jrult	L7022
6013  b5f7 20ea          	jra	L5122
6014  b5f9               L5022:
6015                     ; 3985   if (amp_found == 0) {
6017  b5f9 7b02          	ld	a,(OFST-21,sp)
6018  b5fb 2703ccb685    	jrne	L5222
6019                     ; 3986     for (i = resume; i < num_chars; i++) {
6021  b600 7b01          	ld	a,(OFST-22,sp)
6022  b602 6b17          	ld	(OFST+0,sp),a
6025  b604 207b          	jra	L3322
6026  b606               L7222:
6027                     ; 3989       if (amp_found == 0) {
6029  b606 7b02          	ld	a,(OFST-21,sp)
6030  b608 265d          	jrne	L7322
6031                     ; 3992         if (*tmp_pBuffer == '&') {
6033  b60a 72c60025      	ld	a,[_tmp_pBuffer.w]
6034  b60e a126          	cp	a,#38
6035  b610 2606          	jrne	L1422
6036                     ; 3995           amp_found = 1;
6038  b612 a601          	ld	a,#1
6039  b614 6b02          	ld	(OFST-21,sp),a
6042  b616 204f          	jra	L7322
6043  b618               L1422:
6044                     ; 3998           tmp_Pending[i] = *tmp_pBuffer;
6046  b618 96            	ldw	x,sp
6047  b619 1c0003        	addw	x,#OFST-20
6048  b61c 9f            	ld	a,xl
6049  b61d 5e            	swapw	x
6050  b61e 1b17          	add	a,(OFST+0,sp)
6051  b620 2401          	jrnc	L262
6052  b622 5c            	incw	x
6053  b623               L262:
6054  b623 90ce0025      	ldw	y,_tmp_pBuffer
6055  b627 02            	rlwa	x,a
6056  b628 90f6          	ld	a,(y)
6057  b62a f7            	ld	(x),a
6058                     ; 3999           saved_postpartial[4+i] = *tmp_pBuffer;
6060  b62b 5f            	clrw	x
6061  b62c 7b17          	ld	a,(OFST+0,sp)
6062  b62e 97            	ld	xl,a
6063  b62f 90f6          	ld	a,(y)
6064  b631 d70045        	ld	(_saved_postpartial+4,x),a
6065                     ; 4000           tmp_nParseLeft--;
6067  b634 725a0022      	dec	_tmp_nParseLeft
6068                     ; 4001           saved_nparseleft = tmp_nParseLeft;
6070                     ; 4002           tmp_pBuffer++;
6072  b638 93            	ldw	x,y
6073  b639 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6074  b63e 5c            	incw	x
6075  b63f cf0025        	ldw	_tmp_pBuffer,x
6076                     ; 4003           tmp_nBytes--;
6078  b642 ce0023        	ldw	x,_tmp_nBytes
6079  b645 5a            	decw	x
6080  b646 cf0023        	ldw	_tmp_nBytes,x
6081                     ; 4004           if (tmp_nBytes == 0) {
6083  b649 261c          	jrne	L7322
6084                     ; 4008             if (i == (num_chars - 1)) {
6086  b64b 7b19          	ld	a,(OFST+2,sp)
6087  b64d 5f            	clrw	x
6088  b64e 97            	ld	xl,a
6089  b64f 5a            	decw	x
6090  b650 7b17          	ld	a,(OFST+0,sp)
6091  b652 905f          	clrw	y
6092  b654 9097          	ld	yl,a
6093  b656 90bf07        	ldw	c_y,y
6094  b659 b307          	cpw	x,c_y
6095  b65b 2604          	jrne	L7422
6096                     ; 4013               saved_parsestate = PARSE_DELIM;
6098  b65d 3505005a      	mov	_saved_parsestate,#5
6099  b661               L7422:
6100                     ; 4015             break_while = 1;
6102  b661 35010021      	mov	_break_while,#1
6103                     ; 4016             break; // This will break the for() loop. But we need to break the
6105  b665 201e          	jra	L5222
6106  b667               L7322:
6107                     ; 4022       if (amp_found == 1) {
6109  b667 7b02          	ld	a,(OFST-21,sp)
6110  b669 4a            	dec	a
6111  b66a 2611          	jrne	L1522
6112                     ; 4025         tmp_Pending[i] = '\0';
6114  b66c 96            	ldw	x,sp
6115  b66d 1c0003        	addw	x,#OFST-20
6116  b670 9f            	ld	a,xl
6117  b671 5e            	swapw	x
6118  b672 1b17          	add	a,(OFST+0,sp)
6119  b674 2401          	jrnc	L462
6120  b676 5c            	incw	x
6121  b677               L462:
6122  b677 02            	rlwa	x,a
6123  b678 7f            	clr	(x)
6124                     ; 4034         tmp_nParseLeft--;
6126  b679 725a0022      	dec	_tmp_nParseLeft
6127  b67d               L1522:
6128                     ; 3986     for (i = resume; i < num_chars; i++) {
6130  b67d 0c17          	inc	(OFST+0,sp)
6132  b67f 7b17          	ld	a,(OFST+0,sp)
6133  b681               L3322:
6136  b681 1119          	cp	a,(OFST+2,sp)
6137  b683 2581          	jrult	L7222
6138  b685               L5222:
6139                     ; 4055   if (break_while == 0) clear_saved_postpartial_all();
6141  b685 c60021        	ld	a,_break_while
6142  b688 2603          	jrne	L3522
6145  b68a cdb558        	call	_clear_saved_postpartial_all
6147  b68d               L3522:
6148                     ; 4058   if (curr_ParseCmd == 'a') {
6150  b68d 7b18          	ld	a,(OFST+1,sp)
6151  b68f a161          	cp	a,#97
6152  b691 2622          	jrne	L5522
6153                     ; 4059     for (i=0; i<num_chars; i++) Pending_devicename[i] = tmp_Pending[i];
6155  b693 0f17          	clr	(OFST+0,sp)
6158  b695 2016          	jra	L3622
6159  b697               L7522:
6162  b697 5f            	clrw	x
6163  b698 97            	ld	xl,a
6164  b699 89            	pushw	x
6165  b69a 96            	ldw	x,sp
6166  b69b 1c0005        	addw	x,#OFST-18
6167  b69e 9f            	ld	a,xl
6168  b69f 5e            	swapw	x
6169  b6a0 1b19          	add	a,(OFST+2,sp)
6170  b6a2 2401          	jrnc	L072
6171  b6a4 5c            	incw	x
6172  b6a5               L072:
6173  b6a5 02            	rlwa	x,a
6174  b6a6 f6            	ld	a,(x)
6175  b6a7 85            	popw	x
6176  b6a8 d70125        	ld	(_Pending_devicename,x),a
6179  b6ab 0c17          	inc	(OFST+0,sp)
6181  b6ad               L3622:
6184  b6ad 7b17          	ld	a,(OFST+0,sp)
6185  b6af 1119          	cp	a,(OFST+2,sp)
6186  b6b1 25e4          	jrult	L7522
6188  b6b3 204a          	jra	L7622
6189  b6b5               L5522:
6190                     ; 4064   else if (curr_ParseCmd == 'l') {
6192  b6b5 a16c          	cp	a,#108
6193  b6b7 2622          	jrne	L1722
6194                     ; 4065     for (i=0; i<num_chars; i++) Pending_mqtt_username[i] = tmp_Pending[i];
6196  b6b9 0f17          	clr	(OFST+0,sp)
6199  b6bb 2016          	jra	L7722
6200  b6bd               L3722:
6203  b6bd 5f            	clrw	x
6204  b6be 97            	ld	xl,a
6205  b6bf 89            	pushw	x
6206  b6c0 96            	ldw	x,sp
6207  b6c1 1c0005        	addw	x,#OFST-18
6208  b6c4 9f            	ld	a,xl
6209  b6c5 5e            	swapw	x
6210  b6c6 1b19          	add	a,(OFST+2,sp)
6211  b6c8 2401          	jrnc	L272
6212  b6ca 5c            	incw	x
6213  b6cb               L272:
6214  b6cb 02            	rlwa	x,a
6215  b6cc f6            	ld	a,(x)
6216  b6cd 85            	popw	x
6217  b6ce d70152        	ld	(_Pending_mqtt_username,x),a
6220  b6d1 0c17          	inc	(OFST+0,sp)
6222  b6d3               L7722:
6225  b6d3 7b17          	ld	a,(OFST+0,sp)
6226  b6d5 1119          	cp	a,(OFST+2,sp)
6227  b6d7 25e4          	jrult	L3722
6229  b6d9 2024          	jra	L7622
6230  b6db               L1722:
6231                     ; 4069   else if (curr_ParseCmd == 'm') {
6233  b6db a16d          	cp	a,#109
6234  b6dd 2620          	jrne	L7622
6235                     ; 4070     for (i=0; i<num_chars; i++) Pending_mqtt_password[i] = tmp_Pending[i];
6237  b6df 0f17          	clr	(OFST+0,sp)
6240  b6e1 2016          	jra	L3132
6241  b6e3               L7032:
6244  b6e3 5f            	clrw	x
6245  b6e4 97            	ld	xl,a
6246  b6e5 89            	pushw	x
6247  b6e6 96            	ldw	x,sp
6248  b6e7 1c0005        	addw	x,#OFST-18
6249  b6ea 9f            	ld	a,xl
6250  b6eb 5e            	swapw	x
6251  b6ec 1b19          	add	a,(OFST+2,sp)
6252  b6ee 2401          	jrnc	L472
6253  b6f0 5c            	incw	x
6254  b6f1               L472:
6255  b6f1 02            	rlwa	x,a
6256  b6f2 f6            	ld	a,(x)
6257  b6f3 85            	popw	x
6258  b6f4 d70147        	ld	(_Pending_mqtt_password,x),a
6261  b6f7 0c17          	inc	(OFST+0,sp)
6263  b6f9               L3132:
6266  b6f9 7b17          	ld	a,(OFST+0,sp)
6267  b6fb 1119          	cp	a,(OFST+2,sp)
6268  b6fd 25e4          	jrult	L7032
6269  b6ff               L7622:
6270                     ; 4073 }
6273  b6ff 5b19          	addw	sp,#25
6274  b701 81            	ret	
6348                     	switch	.const
6349  9c08               L603:
6350  9c08 b7e0          	dc.w	L7132
6351  9c0a b7e7          	dc.w	L1232
6352  9c0c b7ee          	dc.w	L3232
6353  9c0e b7f5          	dc.w	L5232
6354  9c10 b7fc          	dc.w	L7232
6355  9c12 b803          	dc.w	L1332
6356  9c14 b80a          	dc.w	L3332
6357  9c16 b811          	dc.w	L5332
6358  9c18 b818          	dc.w	L7332
6359  9c1a b81f          	dc.w	L1432
6360  9c1c b826          	dc.w	L3432
6361  9c1e b82d          	dc.w	L5432
6362  9c20 b834          	dc.w	L7432
6363  9c22 b83b          	dc.w	L1532
6364  9c24 b842          	dc.w	L3532
6365  9c26 b849          	dc.w	L5532
6366                     ; 4076 void parse_POST_address(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6366                     ; 4077 {
6367                     .text:	section	.text,new
6368  b702               _parse_POST_address:
6370  b702 89            	pushw	x
6371  b703 89            	pushw	x
6372       00000002      OFST:	set	2
6375                     ; 4080   alpha[0] = '-';
6377  b704 352d001b      	mov	_alpha,#45
6378                     ; 4081   alpha[1] = '-';
6380  b708 352d001c      	mov	_alpha+1,#45
6381                     ; 4082   alpha[2] = '-';
6383  b70c 352d001d      	mov	_alpha+2,#45
6384                     ; 4085   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6386  b710 9e            	ld	a,xh
6387  b711 c10029        	cp	a,_saved_postpartial_previous
6388  b714 2624          	jrne	L5042
6389                     ; 4088     saved_postpartial_previous[0] = '\0';
6391  b716 725f0029      	clr	_saved_postpartial_previous
6392                     ; 4095     if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
6394  b71a c6002d        	ld	a,_saved_postpartial_previous+4
6395  b71d 2705          	jreq	L7042
6398  b71f 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
6399  b724               L7042:
6400                     ; 4096     if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
6402  b724 c6002e        	ld	a,_saved_postpartial_previous+5
6403  b727 2705          	jreq	L1142
6406  b729 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
6407  b72e               L1142:
6408                     ; 4097     if (saved_postpartial_previous[6] != '\0') alpha[2] = saved_postpartial_previous[6];
6410  b72e c6002f        	ld	a,_saved_postpartial_previous+6
6411  b731 270a          	jreq	L5142
6414  b733 55002f001d    	mov	_alpha+2,_saved_postpartial_previous+6
6415  b738 2003          	jra	L5142
6416  b73a               L5042:
6417                     ; 4103     clear_saved_postpartial_data(); // Clear [4] and higher
6419  b73a cdb56c        	call	_clear_saved_postpartial_data
6421  b73d               L5142:
6422                     ; 4106   for (i=0; i<3; i++) {
6424  b73d 4f            	clr	a
6425  b73e 6b02          	ld	(OFST+0,sp),a
6427  b740               L7142:
6428                     ; 4112     if (alpha[i] == '-') {
6430  b740 5f            	clrw	x
6431  b741 97            	ld	xl,a
6432  b742 d6001b        	ld	a,(_alpha,x)
6433  b745 a12d          	cp	a,#45
6434  b747 263c          	jrne	L5242
6435                     ; 4113       alpha[i] = (uint8_t)(*tmp_pBuffer);
6437  b749 7b02          	ld	a,(OFST+0,sp)
6438  b74b 5f            	clrw	x
6439  b74c 90ce0025      	ldw	y,_tmp_pBuffer
6440  b750 97            	ld	xl,a
6441  b751 90f6          	ld	a,(y)
6442  b753 d7001b        	ld	(_alpha,x),a
6443                     ; 4114       saved_postpartial[i+4] = (uint8_t)(*tmp_pBuffer);
6445  b756 5f            	clrw	x
6446  b757 7b02          	ld	a,(OFST+0,sp)
6447  b759 97            	ld	xl,a
6448  b75a 90f6          	ld	a,(y)
6449  b75c d70045        	ld	(_saved_postpartial+4,x),a
6450                     ; 4115       tmp_nParseLeft--;
6452  b75f 725a0022      	dec	_tmp_nParseLeft
6453                     ; 4116       saved_nparseleft = tmp_nParseLeft;
6455                     ; 4117       tmp_pBuffer++;
6457  b763 93            	ldw	x,y
6458  b764 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6459  b769 5c            	incw	x
6460  b76a cf0025        	ldw	_tmp_pBuffer,x
6461                     ; 4118       tmp_nBytes--;
6463  b76d ce0023        	ldw	x,_tmp_nBytes
6464  b770 5a            	decw	x
6465  b771 cf0023        	ldw	_tmp_nBytes,x
6466                     ; 4119       if (i != 2 && tmp_nBytes == 0) {
6468  b774 7b02          	ld	a,(OFST+0,sp)
6469  b776 a102          	cp	a,#2
6470  b778 270b          	jreq	L5242
6472  b77a ce0023        	ldw	x,_tmp_nBytes
6473  b77d 2606          	jrne	L5242
6474                     ; 4120         break_while = 1; // Hit end of fragment but still have characters to
6476  b77f 35010021      	mov	_break_while,#1
6477                     ; 4124         break; // Break out of for() loop.
6479  b783 2008          	jra	L3242
6480  b785               L5242:
6481                     ; 4106   for (i=0; i<3; i++) {
6483  b785 0c02          	inc	(OFST+0,sp)
6487  b787 7b02          	ld	a,(OFST+0,sp)
6488  b789 a103          	cp	a,#3
6489  b78b 25b3          	jrult	L7142
6490  b78d               L3242:
6491                     ; 4128   if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6493  b78d c60021        	ld	a,_break_while
6494  b790 4a            	dec	a
6495  b791 2603ccb857    	jreq	L013
6498                     ; 4132   clear_saved_postpartial_all();
6500  b796 cdb558        	call	_clear_saved_postpartial_all
6502                     ; 4145     invalid = 0;
6504  b799 0f01          	clr	(OFST-1,sp)
6506                     ; 4147     temp = (uint8_t)(       (alpha[2] - '0'));
6508  b79b c6001d        	ld	a,_alpha+2
6509  b79e a030          	sub	a,#48
6510  b7a0 6b02          	ld	(OFST+0,sp),a
6512                     ; 4148     temp = (uint8_t)(temp + (alpha[1] - '0') * 10);
6514  b7a2 c6001c        	ld	a,_alpha+1
6515  b7a5 97            	ld	xl,a
6516  b7a6 a60a          	ld	a,#10
6517  b7a8 42            	mul	x,a
6518  b7a9 9f            	ld	a,xl
6519  b7aa a0e0          	sub	a,#224
6520  b7ac 1b02          	add	a,(OFST+0,sp)
6521  b7ae 6b02          	ld	(OFST+0,sp),a
6523                     ; 4149     if (temp > 55 && alpha[0] > '1') invalid = 1;
6525  b7b0 a138          	cp	a,#56
6526  b7b2 250d          	jrult	L3342
6528  b7b4 c6001b        	ld	a,_alpha
6529  b7b7 a132          	cp	a,#50
6530  b7b9 2506          	jrult	L3342
6533  b7bb a601          	ld	a,#1
6534  b7bd 6b01          	ld	(OFST-1,sp),a
6537  b7bf 200e          	jra	L5342
6538  b7c1               L3342:
6539                     ; 4150     else temp = (uint8_t)(temp + (alpha[0] - '0') * 100);
6541  b7c1 c6001b        	ld	a,_alpha
6542  b7c4 97            	ld	xl,a
6543  b7c5 a664          	ld	a,#100
6544  b7c7 42            	mul	x,a
6545  b7c8 9f            	ld	a,xl
6546  b7c9 a0c0          	sub	a,#192
6547  b7cb 1b02          	add	a,(OFST+0,sp)
6548  b7cd 6b02          	ld	(OFST+0,sp),a
6550  b7cf               L5342:
6551                     ; 4151     if (invalid == 0) { // Make change only if valid entry
6553  b7cf 7b01          	ld	a,(OFST-1,sp)
6554  b7d1 267b          	jrne	L7342
6555                     ; 4152       switch(curr_ParseNum)
6557  b7d3 7b04          	ld	a,(OFST+2,sp)
6559                     ; 4175         default: break;
6560  b7d5 a110          	cp	a,#16
6561  b7d7 2475          	jruge	L7342
6562  b7d9 5f            	clrw	x
6563  b7da 97            	ld	xl,a
6564  b7db 58            	sllw	x
6565  b7dc de9c08        	ldw	x,(L603,x)
6566  b7df fc            	jp	(x)
6567  b7e0               L7132:
6568                     ; 4154         case 0:  Pending_hostaddr[3] = (uint8_t)temp; break;
6570  b7e0 7b02          	ld	a,(OFST+0,sp)
6571  b7e2 c70146        	ld	_Pending_hostaddr+3,a
6574  b7e5 2067          	jra	L7342
6575  b7e7               L1232:
6576                     ; 4155         case 1:  Pending_hostaddr[2] = (uint8_t)temp; break;
6578  b7e7 7b02          	ld	a,(OFST+0,sp)
6579  b7e9 c70145        	ld	_Pending_hostaddr+2,a
6582  b7ec 2060          	jra	L7342
6583  b7ee               L3232:
6584                     ; 4156         case 2:  Pending_hostaddr[1] = (uint8_t)temp; break;
6586  b7ee 7b02          	ld	a,(OFST+0,sp)
6587  b7f0 c70144        	ld	_Pending_hostaddr+1,a
6590  b7f3 2059          	jra	L7342
6591  b7f5               L5232:
6592                     ; 4157         case 3:  Pending_hostaddr[0] = (uint8_t)temp; break;
6594  b7f5 7b02          	ld	a,(OFST+0,sp)
6595  b7f7 c70143        	ld	_Pending_hostaddr,a
6598  b7fa 2052          	jra	L7342
6599  b7fc               L7232:
6600                     ; 4158         case 4:  Pending_draddr[3] = (uint8_t)temp; break;
6602  b7fc 7b02          	ld	a,(OFST+0,sp)
6603  b7fe c70142        	ld	_Pending_draddr+3,a
6606  b801 204b          	jra	L7342
6607  b803               L1332:
6608                     ; 4159         case 5:  Pending_draddr[2] = (uint8_t)temp; break;
6610  b803 7b02          	ld	a,(OFST+0,sp)
6611  b805 c70141        	ld	_Pending_draddr+2,a
6614  b808 2044          	jra	L7342
6615  b80a               L3332:
6616                     ; 4160         case 6:  Pending_draddr[1] = (uint8_t)temp; break;
6618  b80a 7b02          	ld	a,(OFST+0,sp)
6619  b80c c70140        	ld	_Pending_draddr+1,a
6622  b80f 203d          	jra	L7342
6623  b811               L5332:
6624                     ; 4161         case 7:  Pending_draddr[0] = (uint8_t)temp; break;
6626  b811 7b02          	ld	a,(OFST+0,sp)
6627  b813 c7013f        	ld	_Pending_draddr,a
6630  b816 2036          	jra	L7342
6631  b818               L7332:
6632                     ; 4162         case 8:  Pending_netmask[3] = (uint8_t)temp; break;
6634  b818 7b02          	ld	a,(OFST+0,sp)
6635  b81a c7013e        	ld	_Pending_netmask+3,a
6638  b81d 202f          	jra	L7342
6639  b81f               L1432:
6640                     ; 4163         case 9:  Pending_netmask[2] = (uint8_t)temp; break;
6642  b81f 7b02          	ld	a,(OFST+0,sp)
6643  b821 c7013d        	ld	_Pending_netmask+2,a
6646  b824 2028          	jra	L7342
6647  b826               L3432:
6648                     ; 4164         case 10: Pending_netmask[1] = (uint8_t)temp; break;
6650  b826 7b02          	ld	a,(OFST+0,sp)
6651  b828 c7013c        	ld	_Pending_netmask+1,a
6654  b82b 2021          	jra	L7342
6655  b82d               L5432:
6656                     ; 4165         case 11: Pending_netmask[0] = (uint8_t)temp; break;
6658  b82d 7b02          	ld	a,(OFST+0,sp)
6659  b82f c7013b        	ld	_Pending_netmask,a
6662  b832 201a          	jra	L7342
6663  b834               L7432:
6664                     ; 4168 	  Pending_mqttserveraddr[3] = (uint8_t)temp;
6666  b834 7b02          	ld	a,(OFST+0,sp)
6667  b836 c70162        	ld	_Pending_mqttserveraddr+3,a
6668                     ; 4169 	  break;
6670  b839 2013          	jra	L7342
6671  b83b               L1532:
6672                     ; 4171         case 13: Pending_mqttserveraddr[2] = (uint8_t)temp; break;
6674  b83b 7b02          	ld	a,(OFST+0,sp)
6675  b83d c70161        	ld	_Pending_mqttserveraddr+2,a
6678  b840 200c          	jra	L7342
6679  b842               L3532:
6680                     ; 4172         case 14: Pending_mqttserveraddr[1] = (uint8_t)temp; break;
6682  b842 7b02          	ld	a,(OFST+0,sp)
6683  b844 c70160        	ld	_Pending_mqttserveraddr+1,a
6686  b847 2005          	jra	L7342
6687  b849               L5532:
6688                     ; 4173         case 15: Pending_mqttserveraddr[0] = (uint8_t)temp; break;
6690  b849 7b02          	ld	a,(OFST+0,sp)
6691  b84b c7015f        	ld	_Pending_mqttserveraddr,a
6694                     ; 4175         default: break;
6696  b84e               L7342:
6697                     ; 4180   if (tmp_nBytes == 0) {
6699  b84e ce0023        	ldw	x,_tmp_nBytes
6700  b851 2604          	jrne	L013
6701                     ; 4183     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
6703  b853 35020021      	mov	_break_while,#2
6704                     ; 4186     return;
6705  b857               L013:
6708  b857 5b04          	addw	sp,#4
6709  b859 81            	ret	
6710                     ; 4188 }
6790                     ; 4191 void parse_POST_port(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6790                     ; 4192 {
6791                     .text:	section	.text,new
6792  b85a               _parse_POST_port:
6794  b85a 89            	pushw	x
6795  b85b 5203          	subw	sp,#3
6796       00000003      OFST:	set	3
6799                     ; 4195   for (i=0; i<5; i++) alpha[i] = '-';
6801  b85d 4f            	clr	a
6802  b85e 6b03          	ld	(OFST+0,sp),a
6804  b860               L5742:
6807  b860 5f            	clrw	x
6808  b861 97            	ld	xl,a
6809  b862 a62d          	ld	a,#45
6810  b864 d7001b        	ld	(_alpha,x),a
6813  b867 0c03          	inc	(OFST+0,sp)
6817  b869 7b03          	ld	a,(OFST+0,sp)
6818  b86b a105          	cp	a,#5
6819  b86d 25f1          	jrult	L5742
6820                     ; 4197   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6822  b86f c60029        	ld	a,_saved_postpartial_previous
6823  b872 1104          	cp	a,(OFST+1,sp)
6824  b874 2621          	jrne	L3052
6825                     ; 4200     saved_postpartial_previous[0] = '\0';
6827  b876 725f0029      	clr	_saved_postpartial_previous
6828                     ; 4207     for (i=0; i<5; i++) {
6830  b87a 4f            	clr	a
6831  b87b 6b03          	ld	(OFST+0,sp),a
6833  b87d               L5052:
6834                     ; 4208       if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
6836  b87d 5f            	clrw	x
6837  b87e 97            	ld	xl,a
6838  b87f 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6839  b883 2708          	jreq	L3152
6842  b885 5f            	clrw	x
6843  b886 97            	ld	xl,a
6844  b887 d6002d        	ld	a,(_saved_postpartial_previous+4,x)
6845  b88a d7001b        	ld	(_alpha,x),a
6846  b88d               L3152:
6847                     ; 4207     for (i=0; i<5; i++) {
6849  b88d 0c03          	inc	(OFST+0,sp)
6853  b88f 7b03          	ld	a,(OFST+0,sp)
6854  b891 a105          	cp	a,#5
6855  b893 25e8          	jrult	L5052
6857  b895 2003          	jra	L5152
6858  b897               L3052:
6859                     ; 4215     clear_saved_postpartial_data(); // Clear [4] and higher
6861  b897 cdb56c        	call	_clear_saved_postpartial_data
6863  b89a               L5152:
6864                     ; 4220     for (i=0; i<5; i++) {
6866  b89a 4f            	clr	a
6867  b89b 6b03          	ld	(OFST+0,sp),a
6869  b89d               L7152:
6870                     ; 4226       if (alpha[i] == '-') {
6872  b89d 5f            	clrw	x
6873  b89e 97            	ld	xl,a
6874  b89f d6001b        	ld	a,(_alpha,x)
6875  b8a2 a12d          	cp	a,#45
6876  b8a4 263c          	jrne	L5252
6877                     ; 4227         alpha[i] = (uint8_t)(*tmp_pBuffer);
6879  b8a6 7b03          	ld	a,(OFST+0,sp)
6880  b8a8 5f            	clrw	x
6881  b8a9 90ce0025      	ldw	y,_tmp_pBuffer
6882  b8ad 97            	ld	xl,a
6883  b8ae 90f6          	ld	a,(y)
6884  b8b0 d7001b        	ld	(_alpha,x),a
6885                     ; 4228         saved_postpartial[i+4] = *tmp_pBuffer;
6887  b8b3 5f            	clrw	x
6888  b8b4 7b03          	ld	a,(OFST+0,sp)
6889  b8b6 97            	ld	xl,a
6890  b8b7 90f6          	ld	a,(y)
6891  b8b9 d70045        	ld	(_saved_postpartial+4,x),a
6892                     ; 4229         tmp_nParseLeft--;
6894  b8bc 725a0022      	dec	_tmp_nParseLeft
6895                     ; 4230         saved_nparseleft = tmp_nParseLeft;
6897                     ; 4231         tmp_pBuffer++;
6899  b8c0 93            	ldw	x,y
6900  b8c1 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6901  b8c6 5c            	incw	x
6902  b8c7 cf0025        	ldw	_tmp_pBuffer,x
6903                     ; 4232         tmp_nBytes--;
6905  b8ca ce0023        	ldw	x,_tmp_nBytes
6906  b8cd 5a            	decw	x
6907  b8ce cf0023        	ldw	_tmp_nBytes,x
6908                     ; 4233         if (i != 4 && tmp_nBytes == 0) {
6910  b8d1 7b03          	ld	a,(OFST+0,sp)
6911  b8d3 a104          	cp	a,#4
6912  b8d5 270b          	jreq	L5252
6914  b8d7 ce0023        	ldw	x,_tmp_nBytes
6915  b8da 2606          	jrne	L5252
6916                     ; 4234           break_while = 1; // Hit end of fragment but still have characters to
6918  b8dc 35010021      	mov	_break_while,#1
6919                     ; 4238    	break; // Break out of for() loop.
6921  b8e0 2008          	jra	L3252
6922  b8e2               L5252:
6923                     ; 4220     for (i=0; i<5; i++) {
6925  b8e2 0c03          	inc	(OFST+0,sp)
6929  b8e4 7b03          	ld	a,(OFST+0,sp)
6930  b8e6 a105          	cp	a,#5
6931  b8e8 25b3          	jrult	L7152
6932  b8ea               L3252:
6933                     ; 4242     if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6935  b8ea c60021        	ld	a,_break_while
6936  b8ed 4a            	dec	a
6937  b8ee 2603ccb97c    	jreq	L023
6940                     ; 4247   clear_saved_postpartial_all();
6942  b8f3 cdb558        	call	_clear_saved_postpartial_all
6944                     ; 4256     invalid = 0;
6946  b8f6 0f03          	clr	(OFST+0,sp)
6948                     ; 4258     temp = (uint16_t)(       (alpha[4] - '0'));
6950  b8f8 5f            	clrw	x
6951  b8f9 c6001f        	ld	a,_alpha+4
6952  b8fc 97            	ld	xl,a
6953  b8fd 1d0030        	subw	x,#48
6954  b900 1f01          	ldw	(OFST-2,sp),x
6956                     ; 4259     temp = (uint16_t)(temp + (alpha[3] - '0') * 10);
6958  b902 c6001e        	ld	a,_alpha+3
6959  b905 97            	ld	xl,a
6960  b906 a60a          	ld	a,#10
6961  b908 42            	mul	x,a
6962  b909 1d01e0        	subw	x,#480
6963  b90c 72fb01        	addw	x,(OFST-2,sp)
6964  b90f 1f01          	ldw	(OFST-2,sp),x
6966                     ; 4260     temp = (uint16_t)(temp + (alpha[2] - '0') * 100);
6968  b911 c6001d        	ld	a,_alpha+2
6969  b914 97            	ld	xl,a
6970  b915 a664          	ld	a,#100
6971  b917 42            	mul	x,a
6972  b918 1d12c0        	subw	x,#4800
6973  b91b 72fb01        	addw	x,(OFST-2,sp)
6974  b91e 1f01          	ldw	(OFST-2,sp),x
6976                     ; 4261     temp = (uint16_t)(temp + (alpha[1] - '0') * 1000);
6978  b920 5f            	clrw	x
6979  b921 c6001c        	ld	a,_alpha+1
6980  b924 97            	ld	xl,a
6981  b925 90ae03e8      	ldw	y,#1000
6982  b929 cdf60d        	call	c_imul
6984  b92c 1dbb80        	subw	x,#48000
6985  b92f 72fb01        	addw	x,(OFST-2,sp)
6986  b932 1f01          	ldw	(OFST-2,sp),x
6988                     ; 4262     if (temp > 5535 && alpha[0] > '5') invalid = 1;
6990  b934 a315a0        	cpw	x,#5536
6991  b937 250d          	jrult	L3352
6993  b939 c6001b        	ld	a,_alpha
6994  b93c a136          	cp	a,#54
6995  b93e 2506          	jrult	L3352
6998  b940 a601          	ld	a,#1
6999  b942 6b03          	ld	(OFST+0,sp),a
7002  b944 2014          	jra	L5352
7003  b946               L3352:
7004                     ; 4263     else temp = (uint16_t)(temp + (alpha[0] - '0') * 10000);
7006  b946 c6001b        	ld	a,_alpha
7007  b949 5f            	clrw	x
7008  b94a 97            	ld	xl,a
7009  b94b 90ae2710      	ldw	y,#10000
7010  b94f cdf60d        	call	c_imul
7012  b952 1d5300        	subw	x,#21248
7013  b955 72fb01        	addw	x,(OFST-2,sp)
7014  b958 1f01          	ldw	(OFST-2,sp),x
7016  b95a               L5352:
7017                     ; 4264     if (temp < 10) invalid = 1;
7019  b95a a3000a        	cpw	x,#10
7020  b95d 2404          	jruge	L7352
7023  b95f a601          	ld	a,#1
7024  b961 6b03          	ld	(OFST+0,sp),a
7026  b963               L7352:
7027                     ; 4265     if (invalid == 0) {
7029  b963 7b03          	ld	a,(OFST+0,sp)
7030  b965 260c          	jrne	L1452
7031                     ; 4266       if (curr_ParseNum == 0) Pending_port = (uint16_t)temp;
7033  b967 7b05          	ld	a,(OFST+2,sp)
7034  b969 2605          	jrne	L3452
7037  b96b cf0139        	ldw	_Pending_port,x
7039  b96e 2003          	jra	L1452
7040  b970               L3452:
7041                     ; 4268       else Pending_mqttport = (uint16_t)temp;
7043  b970 cf015d        	ldw	_Pending_mqttport,x
7044  b973               L1452:
7045                     ; 4273   if (tmp_nBytes == 0) {
7047  b973 ce0023        	ldw	x,_tmp_nBytes
7048  b976 2604          	jrne	L023
7049                     ; 4276     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
7051  b978 35020021      	mov	_break_while,#2
7052                     ; 4279     return;
7053  b97c               L023:
7056  b97c 5b05          	addw	sp,#5
7057  b97e 81            	ret	
7058                     ; 4281 }
7093                     	switch	.const
7094  9c28               L623:
7095  9c28 b98d          	dc.w	L1552
7096  9c2a b995          	dc.w	L3552
7097  9c2c b99d          	dc.w	L5552
7098  9c2e b9a5          	dc.w	L7552
7099  9c30 b9ad          	dc.w	L1652
7100  9c32 b9b5          	dc.w	L3652
7101  9c34 b9bd          	dc.w	L5652
7102  9c36 b9c5          	dc.w	L7652
7103  9c38 b9cd          	dc.w	L1752
7104  9c3a b9d5          	dc.w	L3752
7105  9c3c b9dd          	dc.w	L5752
7106  9c3e b9e5          	dc.w	L7752
7107  9c40 b9ed          	dc.w	L1062
7108  9c42 b9f5          	dc.w	L3062
7109  9c44 b9fd          	dc.w	L5062
7110  9c46 ba05          	dc.w	L7062
7111                     ; 4284 uint8_t GpioGetPin(uint8_t nGpio)
7111                     ; 4285 {
7112                     .text:	section	.text,new
7113  b97f               _GpioGetPin:
7117                     ; 4290   switch (nGpio) {
7120                     ; 4306     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7121  b97f a110          	cp	a,#16
7122  b981 2503ccba0d    	jruge	L7262
7123  b986 5f            	clrw	x
7124  b987 97            	ld	xl,a
7125  b988 58            	sllw	x
7126  b989 de9c28        	ldw	x,(L623,x)
7127  b98c fc            	jp	(x)
7128  b98d               L1552:
7129                     ; 4291     case 0:  if (IO_8to1  & (uint8_t)(0x01)) return 1; break;
7131  b98d 7201016d7b    	btjf	_IO_8to1,#0,L7262
7134  b992 a601          	ld	a,#1
7137  b994 81            	ret	
7138  b995               L3552:
7139                     ; 4292     case 1:  if (IO_8to1  & (uint8_t)(0x02)) return 1; break;
7141  b995 7203016d73    	btjf	_IO_8to1,#1,L7262
7144  b99a a601          	ld	a,#1
7147  b99c 81            	ret	
7148  b99d               L5552:
7149                     ; 4293     case 2:  if (IO_8to1  & (uint8_t)(0x04)) return 1; break;
7151  b99d 7205016d6b    	btjf	_IO_8to1,#2,L7262
7154  b9a2 a601          	ld	a,#1
7157  b9a4 81            	ret	
7158  b9a5               L7552:
7159                     ; 4294     case 3:  if (IO_8to1  & (uint8_t)(0x08)) return 1; break;
7161  b9a5 7207016d63    	btjf	_IO_8to1,#3,L7262
7164  b9aa a601          	ld	a,#1
7167  b9ac 81            	ret	
7168  b9ad               L1652:
7169                     ; 4295     case 4:  if (IO_8to1  & (uint8_t)(0x10)) return 1; break;
7171  b9ad 7209016d5b    	btjf	_IO_8to1,#4,L7262
7174  b9b2 a601          	ld	a,#1
7177  b9b4 81            	ret	
7178  b9b5               L3652:
7179                     ; 4296     case 5:  if (IO_8to1  & (uint8_t)(0x20)) return 1; break;
7181  b9b5 720b016d53    	btjf	_IO_8to1,#5,L7262
7184  b9ba a601          	ld	a,#1
7187  b9bc 81            	ret	
7188  b9bd               L5652:
7189                     ; 4297     case 6:  if (IO_8to1  & (uint8_t)(0x40)) return 1; break;
7191  b9bd 720d016d4b    	btjf	_IO_8to1,#6,L7262
7194  b9c2 a601          	ld	a,#1
7197  b9c4 81            	ret	
7198  b9c5               L7652:
7199                     ; 4298     case 7:  if (IO_8to1  & (uint8_t)(0x80)) return 1; break;
7201  b9c5 720f016d43    	btjf	_IO_8to1,#7,L7262
7204  b9ca a601          	ld	a,#1
7207  b9cc 81            	ret	
7208  b9cd               L1752:
7209                     ; 4299     case 8:  if (IO_16to9 & (uint8_t)(0x01)) return 1; break;
7211  b9cd 7201016e3b    	btjf	_IO_16to9,#0,L7262
7214  b9d2 a601          	ld	a,#1
7217  b9d4 81            	ret	
7218  b9d5               L3752:
7219                     ; 4300     case 9:  if (IO_16to9 & (uint8_t)(0x02)) return 1; break;
7221  b9d5 7203016e33    	btjf	_IO_16to9,#1,L7262
7224  b9da a601          	ld	a,#1
7227  b9dc 81            	ret	
7228  b9dd               L5752:
7229                     ; 4301     case 10: if (IO_16to9 & (uint8_t)(0x04)) return 1; break;
7231  b9dd 7205016e2b    	btjf	_IO_16to9,#2,L7262
7234  b9e2 a601          	ld	a,#1
7237  b9e4 81            	ret	
7238  b9e5               L7752:
7239                     ; 4302     case 11: if (IO_16to9 & (uint8_t)(0x08)) return 1; break;
7241  b9e5 7207016e23    	btjf	_IO_16to9,#3,L7262
7244  b9ea a601          	ld	a,#1
7247  b9ec 81            	ret	
7248  b9ed               L1062:
7249                     ; 4303     case 12: if (IO_16to9 & (uint8_t)(0x10)) return 1; break;
7251  b9ed 7209016e1b    	btjf	_IO_16to9,#4,L7262
7254  b9f2 a601          	ld	a,#1
7257  b9f4 81            	ret	
7258  b9f5               L3062:
7259                     ; 4304     case 13: if (IO_16to9 & (uint8_t)(0x20)) return 1; break;
7261  b9f5 720b016e13    	btjf	_IO_16to9,#5,L7262
7264  b9fa a601          	ld	a,#1
7267  b9fc 81            	ret	
7268  b9fd               L5062:
7269                     ; 4305     case 14: if (IO_16to9 & (uint8_t)(0x40)) return 1; break;
7271  b9fd 720d016e0b    	btjf	_IO_16to9,#6,L7262
7274  ba02 a601          	ld	a,#1
7277  ba04 81            	ret	
7278  ba05               L7062:
7279                     ; 4306     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7281  ba05 720f016e03    	btjf	_IO_16to9,#7,L7262
7284  ba0a a601          	ld	a,#1
7287  ba0c 81            	ret	
7288  ba0d               L7262:
7289                     ; 4308   return 0;
7291  ba0d 4f            	clr	a
7294  ba0e 81            	ret	
7341                     ; 4357 void GpioSetPin(uint8_t nGpio, uint8_t nState)
7341                     ; 4358 {
7342                     .text:	section	.text,new
7343  ba0f               _GpioSetPin:
7345  ba0f 89            	pushw	x
7346  ba10 88            	push	a
7347       00000001      OFST:	set	1
7350                     ; 4365   mask = 0;
7352  ba11 0f01          	clr	(OFST+0,sp)
7354                     ; 4367   switch(nGpio) {
7356  ba13 9e            	ld	a,xh
7358                     ; 4376     default: break;
7359  ba14 4d            	tnz	a
7360  ba15 2717          	jreq	L1762
7361  ba17 4a            	dec	a
7362  ba18 2717          	jreq	L3762
7363  ba1a 4a            	dec	a
7364  ba1b 2718          	jreq	L5762
7365  ba1d 4a            	dec	a
7366  ba1e 2719          	jreq	L7762
7367  ba20 4a            	dec	a
7368  ba21 271a          	jreq	L1072
7369  ba23 4a            	dec	a
7370  ba24 271b          	jreq	L3072
7371  ba26 4a            	dec	a
7372  ba27 271c          	jreq	L5072
7373  ba29 4a            	dec	a
7374  ba2a 271d          	jreq	L7072
7375  ba2c 201f          	jra	L5372
7376  ba2e               L1762:
7377                     ; 4368     case 0: mask = 0x01; break;
7379  ba2e 4c            	inc	a
7382  ba2f 201a          	jp	LC023
7383  ba31               L3762:
7384                     ; 4369     case 1: mask = 0x02; break;
7386  ba31 a602          	ld	a,#2
7389  ba33 2016          	jp	LC023
7390  ba35               L5762:
7391                     ; 4370     case 2: mask = 0x04; break;
7393  ba35 a604          	ld	a,#4
7396  ba37 2012          	jp	LC023
7397  ba39               L7762:
7398                     ; 4371     case 3: mask = 0x08; break;
7400  ba39 a608          	ld	a,#8
7403  ba3b 200e          	jp	LC023
7404  ba3d               L1072:
7405                     ; 4372     case 4: mask = 0x10; break;
7407  ba3d a610          	ld	a,#16
7410  ba3f 200a          	jp	LC023
7411  ba41               L3072:
7412                     ; 4373     case 5: mask = 0x20; break;
7414  ba41 a620          	ld	a,#32
7417  ba43 2006          	jp	LC023
7418  ba45               L5072:
7419                     ; 4374     case 6: mask = 0x40; break;
7421  ba45 a640          	ld	a,#64
7424  ba47 2002          	jp	LC023
7425  ba49               L7072:
7426                     ; 4375     case 7: mask = 0x80; break;
7428  ba49 a680          	ld	a,#128
7429  ba4b               LC023:
7430  ba4b 6b01          	ld	(OFST+0,sp),a
7434                     ; 4376     default: break;
7436  ba4d               L5372:
7437                     ; 4379   if (nState) IO_8to1 |= mask;
7439  ba4d 7b03          	ld	a,(OFST+2,sp)
7440  ba4f 2707          	jreq	L7372
7443  ba51 c6016d        	ld	a,_IO_8to1
7444  ba54 1a01          	or	a,(OFST+0,sp)
7446  ba56 2006          	jra	L1472
7447  ba58               L7372:
7448                     ; 4380   else IO_8to1 &= (uint8_t)~mask;
7450  ba58 7b01          	ld	a,(OFST+0,sp)
7451  ba5a 43            	cpl	a
7452  ba5b c4016d        	and	a,_IO_8to1
7453  ba5e               L1472:
7454  ba5e c7016d        	ld	_IO_8to1,a
7455                     ; 4382 }
7458  ba61 5b03          	addw	sp,#3
7459  ba63 81            	ret	
7520                     ; 4394 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7520                     ; 4395 {
7521                     .text:	section	.text,new
7522  ba64               _SetMAC:
7524  ba64 89            	pushw	x
7525  ba65 5203          	subw	sp,#3
7526       00000003      OFST:	set	3
7529                     ; 4409   temp = 0;
7531                     ; 4410   invalid = 0;
7533  ba67 0f01          	clr	(OFST-2,sp)
7535                     ; 4413   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7537  ba69 9f            	ld	a,xl
7538  ba6a a130          	cp	a,#48
7539  ba6c 250b          	jrult	L5003
7541  ba6e 9f            	ld	a,xl
7542  ba6f a13a          	cp	a,#58
7543  ba71 2406          	jruge	L5003
7546  ba73 7b05          	ld	a,(OFST+2,sp)
7547  ba75 a030          	sub	a,#48
7549  ba77 200c          	jp	LC024
7550  ba79               L5003:
7551                     ; 4414   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7553  ba79 7b05          	ld	a,(OFST+2,sp)
7554  ba7b a161          	cp	a,#97
7555  ba7d 250a          	jrult	L1103
7557  ba7f a167          	cp	a,#103
7558  ba81 2406          	jruge	L1103
7561  ba83 a057          	sub	a,#87
7562  ba85               LC024:
7563  ba85 6b05          	ld	(OFST+2,sp),a
7565  ba87 2004          	jra	L7003
7566  ba89               L1103:
7567                     ; 4415   else invalid = 1; // If an invalid entry set indicator
7569  ba89 a601          	ld	a,#1
7570  ba8b 6b01          	ld	(OFST-2,sp),a
7572  ba8d               L7003:
7573                     ; 4417   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7575  ba8d 7b08          	ld	a,(OFST+5,sp)
7576  ba8f a130          	cp	a,#48
7577  ba91 2508          	jrult	L5103
7579  ba93 a13a          	cp	a,#58
7580  ba95 2404          	jruge	L5103
7583  ba97 a030          	sub	a,#48
7585  ba99 200a          	jp	LC025
7586  ba9b               L5103:
7587                     ; 4418   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7589  ba9b a161          	cp	a,#97
7590  ba9d 250a          	jrult	L1203
7592  ba9f a167          	cp	a,#103
7593  baa1 2406          	jruge	L1203
7596  baa3 a057          	sub	a,#87
7597  baa5               LC025:
7598  baa5 6b08          	ld	(OFST+5,sp),a
7600  baa7 2004          	jra	L7103
7601  baa9               L1203:
7602                     ; 4419   else invalid = 1; // If an invalid entry set indicator
7604  baa9 a601          	ld	a,#1
7605  baab 6b01          	ld	(OFST-2,sp),a
7607  baad               L7103:
7608                     ; 4421   if (invalid == 0) { // Change value only if valid entry
7610  baad 7b01          	ld	a,(OFST-2,sp)
7611  baaf 264a          	jrne	L5203
7612                     ; 4422     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7614  bab1 7b05          	ld	a,(OFST+2,sp)
7615  bab3 97            	ld	xl,a
7616  bab4 a610          	ld	a,#16
7617  bab6 42            	mul	x,a
7618  bab7 01            	rrwa	x,a
7619  bab8 1b08          	add	a,(OFST+5,sp)
7620  baba 5f            	clrw	x
7621  babb 97            	ld	xl,a
7622  babc 1f02          	ldw	(OFST-1,sp),x
7624                     ; 4423     switch(itemnum)
7626  babe 7b04          	ld	a,(OFST+1,sp)
7628                     ; 4431     default: break;
7629  bac0 2711          	jreq	L3472
7630  bac2 4a            	dec	a
7631  bac3 2715          	jreq	L5472
7632  bac5 4a            	dec	a
7633  bac6 2719          	jreq	L7472
7634  bac8 4a            	dec	a
7635  bac9 271d          	jreq	L1572
7636  bacb 4a            	dec	a
7637  bacc 2721          	jreq	L3572
7638  bace 4a            	dec	a
7639  bacf 2725          	jreq	L5572
7640  bad1 2028          	jra	L5203
7641  bad3               L3472:
7642                     ; 4425     case 0: Pending_uip_ethaddr_oct[5] = (uint8_t)temp; break;
7644  bad3 7b03          	ld	a,(OFST+0,sp)
7645  bad5 c7011e        	ld	_Pending_uip_ethaddr_oct+5,a
7648  bad8 2021          	jra	L5203
7649  bada               L5472:
7650                     ; 4426     case 1: Pending_uip_ethaddr_oct[4] = (uint8_t)temp; break;
7652  bada 7b03          	ld	a,(OFST+0,sp)
7653  badc c7011d        	ld	_Pending_uip_ethaddr_oct+4,a
7656  badf 201a          	jra	L5203
7657  bae1               L7472:
7658                     ; 4427     case 2: Pending_uip_ethaddr_oct[3] = (uint8_t)temp; break;
7660  bae1 7b03          	ld	a,(OFST+0,sp)
7661  bae3 c7011c        	ld	_Pending_uip_ethaddr_oct+3,a
7664  bae6 2013          	jra	L5203
7665  bae8               L1572:
7666                     ; 4428     case 3: Pending_uip_ethaddr_oct[2] = (uint8_t)temp; break;
7668  bae8 7b03          	ld	a,(OFST+0,sp)
7669  baea c7011b        	ld	_Pending_uip_ethaddr_oct+2,a
7672  baed 200c          	jra	L5203
7673  baef               L3572:
7674                     ; 4429     case 4: Pending_uip_ethaddr_oct[1] = (uint8_t)temp; break;
7676  baef 7b03          	ld	a,(OFST+0,sp)
7677  baf1 c7011a        	ld	_Pending_uip_ethaddr_oct+1,a
7680  baf4 2005          	jra	L5203
7681  baf6               L5572:
7682                     ; 4430     case 5: Pending_uip_ethaddr_oct[0] = (uint8_t)temp; break;
7684  baf6 7b03          	ld	a,(OFST+0,sp)
7685  baf8 c70119        	ld	_Pending_uip_ethaddr_oct,a
7688                     ; 4431     default: break;
7690  bafb               L5203:
7691                     ; 4434 }
7694  bafb 5b05          	addw	sp,#5
7695  bafd 81            	ret	
8089                     	switch	.bss
8090  0017               _insertion_flag:
8091  0017 000000        	ds.b	3
8092                     	xdef	_insertion_flag
8093                     	xref	_MQTT_error_status
8094                     	xref	_mqtt_start_status
8095                     	xref	_Pending_mqtt_password
8096                     	xref	_Pending_mqtt_username
8097                     	xref	_Pending_mqttport
8098                     	xref	_Pending_mqttserveraddr
8099                     	xref	_stored_mqtt_password
8100                     	xref	_stored_mqtt_username
8101                     	xref	_stored_mqttport
8102                     	xref	_stored_mqttserveraddr
8103  001a               _current_webpage:
8104  001a 00            	ds.b	1
8105                     	xdef	_current_webpage
8106  001b               _alpha:
8107  001b 000000000000  	ds.b	6
8108                     	xdef	_alpha
8109  0021               _break_while:
8110  0021 00            	ds.b	1
8111                     	xdef	_break_while
8112  0022               _tmp_nParseLeft:
8113  0022 00            	ds.b	1
8114                     	xdef	_tmp_nParseLeft
8115  0023               _tmp_nBytes:
8116  0023 0000          	ds.b	2
8117                     	xdef	_tmp_nBytes
8118  0025               _tmp_pBuffer:
8119  0025 0000          	ds.b	2
8120                     	xdef	_tmp_pBuffer
8121  0027               _z_diag:
8122  0027 00            	ds.b	1
8123                     	xdef	_z_diag
8124  0028               _saved_newlines:
8125  0028 00            	ds.b	1
8126                     	xdef	_saved_newlines
8127  0029               _saved_postpartial_previous:
8128  0029 000000000000  	ds.b	24
8129                     	xdef	_saved_postpartial_previous
8130  0041               _saved_postpartial:
8131  0041 000000000000  	ds.b	24
8132                     	xdef	_saved_postpartial
8133  0059               _saved_nparseleft:
8134  0059 00            	ds.b	1
8135                     	xdef	_saved_nparseleft
8136  005a               _saved_parsestate:
8137  005a 00            	ds.b	1
8138                     	xdef	_saved_parsestate
8139  005b               _saved_nstate:
8140  005b 00            	ds.b	1
8141                     	xdef	_saved_nstate
8142  005c               _OctetArray:
8143  005c 000000000000  	ds.b	11
8144                     	xdef	_OctetArray
8145                     	xref	_user_reboot_request
8146                     	xref	_parse_complete
8147                     	xref	_mac_string
8148                     	xref	_stored_config_settings
8149                     	xref	_stored_devicename
8150                     	xref	_stored_port
8151                     	xref	_stored_netmask
8152                     	xref	_stored_draddr
8153                     	xref	_stored_hostaddr
8154                     	xref	_Pending_uip_ethaddr_oct
8155                     	xref	_Pending_config_settings
8156                     	xref	_Pending_devicename
8157                     	xref	_Pending_port
8158                     	xref	_Pending_netmask
8159                     	xref	_Pending_draddr
8160                     	xref	_Pending_hostaddr
8161                     	xref	_invert_input
8162                     	xref	_IO_8to1
8163                     	xref	_IO_16to9
8164                     	xref	_Port_Httpd
8165                     	xref	_strlen
8166                     	xref	_debugflash
8167                     	xref	_uip_flags
8168                     	xref	_uip_conn
8169                     	xref	_uip_len
8170                     	xref	_uip_appdata
8171                     	xref	_htons
8172                     	xref	_uip_send
8173                     	xref	_uip_listen
8174                     	xdef	_SetMAC
8175                     	xdef	_clear_saved_postpartial_previous
8176                     	xdef	_clear_saved_postpartial_data
8177                     	xdef	_clear_saved_postpartial_all
8178                     	xdef	_GpioSetPin
8179                     	xdef	_GpioGetPin
8180                     	xdef	_parse_POST_port
8181                     	xdef	_parse_POST_address
8182                     	xdef	_parse_POST_string
8183                     	xdef	_HttpDCall
8184                     	xdef	_HttpDInit
8185                     	xdef	_emb_itoa
8186                     	xdef	_adjust_template_size
8187                     	switch	.const
8188  9c48               L333:
8189  9c48 436f6e6e6563  	dc.b	"Connection:close",13
8190  9c59 0a00          	dc.b	10,0
8191  9c5b               L133:
8192  9c5b 436f6e74656e  	dc.b	"Content-Type: text"
8193  9c6d 2f68746d6c3b  	dc.b	"/html; charset=utf"
8194  9c7f 2d380d        	dc.b	"-8",13
8195  9c82 0a00          	dc.b	10,0
8196  9c84               L723:
8197  9c84 43616368652d  	dc.b	"Cache-Control: no-"
8198  9c96 63616368652c  	dc.b	"cache, no-store",13
8199  9ca6 0a00          	dc.b	10,0
8200  9ca8               L713:
8201  9ca8 436f6e74656e  	dc.b	"Content-Length:",0
8202  9cb8               L513:
8203  9cb8 0d0a00        	dc.b	13,10,0
8204  9cbb               L313:
8205  9cbb 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8206                     	xref.b	c_lreg
8207                     	xref.b	c_x
8208                     	xref.b	c_y
8228                     	xref	c_imul
8229                     	xref	c_uitolx
8230                     	xref	c_ludv
8231                     	xref	c_lumd
8232                     	xref	c_rtol
8233                     	xref	c_ltor
8234                     	xref	c_lzmp
8235                     	end
