   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  8080               L11_checked:
  20  8080 636865636b65  	dc.b	"checked",0
  21  8088               L31_g_HtmlPageIOControl:
  22  8088 257930342579  	dc.b	"%y04%y05%y06<title"
  23  809a 3e494f20436f  	dc.b	">IO Control</title"
  24  80ac 3e3c2f686561  	dc.b	"></head><body><h1>"
  25  80be 494f20436f6e  	dc.b	"IO Control</h1><fo"
  26  80d0 726d206d6574  	dc.b	"rm method='POST' a"
  27  80e2 6374696f6e3d  	dc.b	"ction='/'><table><"
  28  80f4 74723e3c7464  	dc.b	"tr><td class='t1'>"
  29  8106 4e616d653a3c  	dc.b	"Name:</td><td clas"
  30  8118 733d27743227  	dc.b	"s='t2'>%a00</td></"
  31  812a 74723e3c2f74  	dc.b	"tr></table><table>"
  32  813c 3c74723e3c74  	dc.b	"<tr><td class='t1'"
  33  814e 3e3c2f74643e  	dc.b	"></td><td class='t"
  34  8160 33273e3c2f74  	dc.b	"3'></td><td class="
  35  8172 277431273e53  	dc.b	"'t1'>SET</td></tr>"
  36  8184 3c7472        	dc.b	"<tr"
  37  8187 3e3c74642063  	dc.b	"><td class='t1'>Ou"
  38  8199 747075743031  	dc.b	"tput01</td><td cla"
  39  81ab 73733d277325  	dc.b	"ss='s%i00'></td><t"
  40  81bd 6420636c6173  	dc.b	"d class='t1'><inpu"
  41  81cf 742074797065  	dc.b	"t type='radio' id="
  42  81e1 2730316f6e27  	dc.b	"'01on' name='o00' "
  43  81f3 76616c75653d  	dc.b	"value='1' %o00><la"
  44  8205 62656c20666f  	dc.b	"bel for='01on'>ON<"
  45  8217 2f6c6162656c  	dc.b	"/label><input type"
  46  8229 3d2772616469  	dc.b	"='radio' id='01off"
  47  823b 27206e616d65  	dc.b	"' name='o00' value"
  48  824d 3d2730272025  	dc.b	"='0' %p00><label f"
  49  825f 6f723d273031  	dc.b	"or='01off'>OFF</la"
  50  8271 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
  51  8283 3c7464        	dc.b	"<td"
  52  8286 20636c617373  	dc.b	" class='t1'>Output"
  53  8298 30323c2f7464  	dc.b	"02</td><td class='"
  54  82aa 732569303127  	dc.b	"s%i01'></td><td cl"
  55  82bc 6173733d2774  	dc.b	"ass='t1'><input ty"
  56  82ce 70653d277261  	dc.b	"pe='radio' id='02o"
  57  82e0 6e27206e616d  	dc.b	"n' name='o01' valu"
  58  82f2 653d27312720  	dc.b	"e='1' %o01><label "
  59  8304 666f723d2730  	dc.b	"for='02on'>ON</lab"
  60  8316 656c3e3c696e  	dc.b	"el><input type='ra"
  61  8328 64696f272069  	dc.b	"dio' id='02off' na"
  62  833a 6d653d276f30  	dc.b	"me='o01' value='0'"
  63  834c 20257030313e  	dc.b	" %p01><label for='"
  64  835e 30326f666627  	dc.b	"02off'>OFF</label>"
  65  8370 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
  66  8382 636c61        	dc.b	"cla"
  67  8385 73733d277431  	dc.b	"ss='t1'>Output03</"
  68  8397 74643e3c7464  	dc.b	"td><td class='s%i0"
  69  83a9 32273e3c2f74  	dc.b	"2'></td><td class="
  70  83bb 277431273e3c  	dc.b	"'t1'><input type='"
  71  83cd 726164696f27  	dc.b	"radio' id='03on' n"
  72  83df 616d653d276f  	dc.b	"ame='o02' value='1"
  73  83f1 2720256f3032  	dc.b	"' %o02><label for="
  74  8403 2730336f6e27  	dc.b	"'03on'>ON</label><"
  75  8415 696e70757420  	dc.b	"input type='radio'"
  76  8427 2069643d2730  	dc.b	" id='03off' name='"
  77  8439 6f3032272076  	dc.b	"o02' value='0' %p0"
  78  844b 323e3c6c6162  	dc.b	"2><label for='03of"
  79  845d 66273e4f4646  	dc.b	"f'>OFF</label></td"
  80  846f 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
  81  8481 733d27        	dc.b	"s='"
  82  8484 7431273e4f75  	dc.b	"t1'>Output04</td><"
  83  8496 746420636c61  	dc.b	"td class='s%i03'><"
  84  84a8 2f74643e3c74  	dc.b	"/td><td class='t1'"
  85  84ba 3e3c696e7075  	dc.b	"><input type='radi"
  86  84cc 6f272069643d  	dc.b	"o' id='04on' name="
  87  84de 276f30332720  	dc.b	"'o03' value='1' %o"
  88  84f0 30333e3c6c61  	dc.b	"03><label for='04o"
  89  8502 6e273e4f4e3c  	dc.b	"n'>ON</label><inpu"
  90  8514 742074797065  	dc.b	"t type='radio' id="
  91  8526 2730346f6666  	dc.b	"'04off' name='o03'"
  92  8538 2076616c7565  	dc.b	" value='0' %p03><l"
  93  854a 6162656c2066  	dc.b	"abel for='04off'>O"
  94  855c 46463c2f6c61  	dc.b	"FF</label></td></t"
  95  856e 723e3c74723e  	dc.b	"r><tr><td class='t"
  96  8580 31273e        	dc.b	"1'>"
  97  8583 4f7574707574  	dc.b	"Output05</td><td c"
  98  8595 6c6173733d27  	dc.b	"lass='s%i04'></td>"
  99  85a7 3c746420636c  	dc.b	"<td class='t1'><in"
 100  85b9 707574207479  	dc.b	"put type='radio' i"
 101  85cb 643d2730356f  	dc.b	"d='05on' name='o04"
 102  85dd 272076616c75  	dc.b	"' value='1' %o04><"
 103  85ef 6c6162656c20  	dc.b	"label for='05on'>O"
 104  8601 4e3c2f6c6162  	dc.b	"N</label><input ty"
 105  8613 70653d277261  	dc.b	"pe='radio' id='05o"
 106  8625 666627206e61  	dc.b	"ff' name='o04' val"
 107  8637 75653d273027  	dc.b	"ue='0' %p04><label"
 108  8649 20666f723d27  	dc.b	" for='05off'>OFF</"
 109  865b 6c6162656c3e  	dc.b	"label></td></tr><t"
 110  866d 723e3c746420  	dc.b	"r><td class='t1'>O"
 111  867f 757470        	dc.b	"utp"
 112  8682 757430363c2f  	dc.b	"ut06</td><td class"
 113  8694 3d2773256930  	dc.b	"='s%i05'></td><td "
 114  86a6 636c6173733d  	dc.b	"class='t1'><input "
 115  86b8 747970653d27  	dc.b	"type='radio' id='0"
 116  86ca 366f6e27206e  	dc.b	"6on' name='o05' va"
 117  86dc 6c75653d2731  	dc.b	"lue='1' %o05><labe"
 118  86ee 6c20666f723d  	dc.b	"l for='06on'>ON</l"
 119  8700 6162656c3e3c  	dc.b	"abel><input type='"
 120  8712 726164696f27  	dc.b	"radio' id='06off' "
 121  8724 6e616d653d27  	dc.b	"name='o05' value='"
 122  8736 302720257030  	dc.b	"0' %p05><label for"
 123  8748 3d2730366f66  	dc.b	"='06off'>OFF</labe"
 124  875a 6c3e3c2f7464  	dc.b	"l></td></tr><tr><t"
 125  876c 6420636c6173  	dc.b	"d class='t1'>Outpu"
 126  877e 743037        	dc.b	"t07"
 127  8781 3c2f74643e3c  	dc.b	"</td><td class='s%"
 128  8793 693036273e3c  	dc.b	"i06'></td><td clas"
 129  87a5 733d27743127  	dc.b	"s='t1'><input type"
 130  87b7 3d2772616469  	dc.b	"='radio' id='07on'"
 131  87c9 206e616d653d  	dc.b	" name='o06' value="
 132  87db 27312720256f  	dc.b	"'1' %o06><label fo"
 133  87ed 723d2730376f  	dc.b	"r='07on'>ON</label"
 134  87ff 3e3c696e7075  	dc.b	"><input type='radi"
 135  8811 6f272069643d  	dc.b	"o' id='07off' name"
 136  8823 3d276f303627  	dc.b	"='o06' value='0' %"
 137  8835 7030363e3c6c  	dc.b	"p06><label for='07"
 138  8847 6f6666273e4f  	dc.b	"off'>OFF</label></"
 139  8859 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 140  886b 6173733d2774  	dc.b	"ass='t1'>Output08<"
 141  887d 2f7464        	dc.b	"/td"
 142  8880 3e3c74642063  	dc.b	"><td class='s%i07'"
 143  8892 3e3c2f74643e  	dc.b	"></td><td class='t"
 144  88a4 31273e3c696e  	dc.b	"1'><input type='ra"
 145  88b6 64696f272069  	dc.b	"dio' id='08on' nam"
 146  88c8 653d276f3037  	dc.b	"e='o07' value='1' "
 147  88da 256f30373e3c  	dc.b	"%o07><label for='0"
 148  88ec 386f6e273e4f  	dc.b	"8on'>ON</label><in"
 149  88fe 707574207479  	dc.b	"put type='radio' i"
 150  8910 643d2730386f  	dc.b	"d='08off' name='o0"
 151  8922 37272076616c  	dc.b	"7' value='0' %p07>"
 152  8934 3c6c6162656c  	dc.b	"<label for='08off'"
 153  8946 3e4f46463c2f  	dc.b	">OFF</label></td><"
 154  8958 2f74723e3c2f  	dc.b	"/tr></table><table"
 155  896a 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 156  897c 273e49        	dc.b	"'>I"
 157  897f 6e7075743031  	dc.b	"nput01</td><td cla"
 158  8991 73733d277325  	dc.b	"ss='s%i08'></td></"
 159  89a3 74723e3c7472  	dc.b	"tr><tr><td class='"
 160  89b5 7431273e496e  	dc.b	"t1'>Input02</td><t"
 161  89c7 6420636c6173  	dc.b	"d class='s%i09'></"
 162  89d9 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 163  89eb 6173733d2774  	dc.b	"ass='t1'>Input03</"
 164  89fd 74643e3c7464  	dc.b	"td><td class='s%i1"
 165  8a0f 30273e3c2f74  	dc.b	"0'></td></tr><tr><"
 166  8a21 746420636c61  	dc.b	"td class='t1'>Inpu"
 167  8a33 7430343c2f74  	dc.b	"t04</td><td class="
 168  8a45 277325693131  	dc.b	"'s%i11'></td></tr>"
 169  8a57 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 170  8a69 3e496e707574  	dc.b	">Input05</td><td c"
 171  8a7b 6c6173        	dc.b	"las"
 172  8a7e 733d27732569  	dc.b	"s='s%i12'></td></t"
 173  8a90 723e3c74723e  	dc.b	"r><tr><td class='t"
 174  8aa2 31273e496e70  	dc.b	"1'>Input06</td><td"
 175  8ab4 20636c617373  	dc.b	" class='s%i13'></t"
 176  8ac6 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 177  8ad8 73733d277431  	dc.b	"ss='t1'>Input07</t"
 178  8aea 643e3c746420  	dc.b	"d><td class='s%i14"
 179  8afc 273e3c2f7464  	dc.b	"'></td></tr><tr><t"
 180  8b0e 6420636c6173  	dc.b	"d class='t1'>Input"
 181  8b20 30383c2f7464  	dc.b	"08</td><td class='"
 182  8b32 732569313527  	dc.b	"s%i15'></td></tr><"
 183  8b44 2f7461626c65  	dc.b	"/table><input type"
 184  8b56 3d2768696464  	dc.b	"='hidden' name='z0"
 185  8b68 30272076616c  	dc.b	"0' value='0'><butt"
 186  8b7a 6f6e20        	dc.b	"on "
 187  8b7d 747970653d27  	dc.b	"type='submit' titl"
 188  8b8f 653d27536176  	dc.b	"e='Saves your chan"
 189  8ba1 676573207468  	dc.b	"ges then restarts "
 190  8bb3 746865204e65  	dc.b	"the Network Module"
 191  8bc5 273e53617665  	dc.b	"'>Save</button><bu"
 192  8bd7 74746f6e2074  	dc.b	"tton type='reset' "
 193  8be9 7469746c653d  	dc.b	"title='Un-does any"
 194  8bfb 206368616e67  	dc.b	" changes that have"
 195  8c0d 206e6f742062  	dc.b	" not been saved'>U"
 196  8c1f 6e646f20416c  	dc.b	"ndo All</button></"
 197  8c31 666f726d3e25  	dc.b	"form>%y03/60%y02Re"
 198  8c43 66726573683c  	dc.b	"fresh</button></fo"
 199  8c55 726d3e257930  	dc.b	"rm>%y03/61%y02Conf"
 200  8c67 696775726174  	dc.b	"iguration</button>"
 201  8c79 3c2f66        	dc.b	"</f"
 202  8c7c 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 203  8c8f               L51_g_HtmlPageConfiguration:
 204  8c8f 257930342579  	dc.b	"%y04%y05%y06<title"
 205  8ca1 3e436f6e6669  	dc.b	">Configuration</ti"
 206  8cb3 746c653e3c2f  	dc.b	"tle></head><body><"
 207  8cc5 68313e436f6e  	dc.b	"h1>Configuration</"
 208  8cd7 68313e3c666f  	dc.b	"h1><form method='P"
 209  8ce9 4f5354272061  	dc.b	"OST' action='/'><t"
 210  8cfb 61626c653e3c  	dc.b	"able><tr><td class"
 211  8d0d 3d277431273e  	dc.b	"='t1'>Name:</td><t"
 212  8d1f 643e3c696e70  	dc.b	"d><input name='a00"
 213  8d31 2720636c6173  	dc.b	"' class='t2' value"
 214  8d43 3d2725613030  	dc.b	"='%a00' pattern='["
 215  8d55 302d39612d7a  	dc.b	"0-9a-zA-Z-_*.]{1,1"
 216  8d67 397d27207265  	dc.b	"9}' required title"
 217  8d79 3d273120746f  	dc.b	"='1 to 19 letters,"
 218  8d8b 206e75        	dc.b	" nu"
 219  8d8e 6d626572732c  	dc.b	"mbers, and -_*. no"
 220  8da0 207370616365  	dc.b	" spaces' maxlength"
 221  8db2 3d273139273e  	dc.b	"='19'></td></tr></"
 222  8dc4 7461626c653e  	dc.b	"table><table><tr><"
 223  8dd6 746420636c61  	dc.b	"td class='t1'>Conf"
 224  8de8 69673c2f7464  	dc.b	"ig</td><td><input "
 225  8dfa 6e616d653d27  	dc.b	"name='g00' class='"
 226  8e0c 743527207661  	dc.b	"t5' value='%g00' p"
 227  8e1e 61747465726e  	dc.b	"attern='[0-9a-zA-Z"
 228  8e30 5d7b367d2720  	dc.b	"]{6}' title='6 cha"
 229  8e42 726163746572  	dc.b	"racters required. "
 230  8e54 53656520446f  	dc.b	"See Documentation'"
 231  8e66 206d61786c65  	dc.b	" maxlength='6'></t"
 232  8e78 643e3c2f7472  	dc.b	"d></tr></table><p>"
 233  8e8a 3c2f70        	dc.b	"</p"
 234  8e8d 3e3c7461626c  	dc.b	"><table><tr><td cl"
 235  8e9f 6173733d2774  	dc.b	"ass='t1'>IP Addres"
 236  8eb1 733c2f74643e  	dc.b	"s</td><td><input n"
 237  8ec3 616d653d2762  	dc.b	"ame='b00' class='t"
 238  8ed5 36272076616c  	dc.b	"6' value='%b00' %y"
 239  8ee7 30303c74643e  	dc.b	"00<td><input name="
 240  8ef9 276230312720  	dc.b	"'b01' class='t6' v"
 241  8f0b 616c75653d27  	dc.b	"alue='%b01' %y00<t"
 242  8f1d 643e3c696e70  	dc.b	"d><input name='b02"
 243  8f2f 2720636c6173  	dc.b	"' class='t6' value"
 244  8f41 3d2725623032  	dc.b	"='%b02' %y00<td><i"
 245  8f53 6e707574206e  	dc.b	"nput name='b03' cl"
 246  8f65 6173733d2774  	dc.b	"ass='t6' value='%b"
 247  8f77 303327202579  	dc.b	"03' %y00</tr><tr><"
 248  8f89 746420        	dc.b	"td "
 249  8f8c 636c6173733d  	dc.b	"class='t1'>Gateway"
 250  8f9e 3c2f74643e3c  	dc.b	"</td><td><input na"
 251  8fb0 6d653d276230  	dc.b	"me='b04' class='t6"
 252  8fc2 272076616c75  	dc.b	"' value='%b04' %y0"
 253  8fd4 303c74643e3c  	dc.b	"0<td><input name='"
 254  8fe6 623035272063  	dc.b	"b05' class='t6' va"
 255  8ff8 6c75653d2725  	dc.b	"lue='%b05' %y00<td"
 256  900a 3e3c696e7075  	dc.b	"><input name='b06'"
 257  901c 20636c617373  	dc.b	" class='t6' value="
 258  902e 272562303627  	dc.b	"'%b06' %y00<td><in"
 259  9040 707574206e61  	dc.b	"put name='b07' cla"
 260  9052 73733d277436  	dc.b	"ss='t6' value='%b0"
 261  9064 372720257930  	dc.b	"7' %y00</tr><tr><t"
 262  9076 6420636c6173  	dc.b	"d class='t1'>Netma"
 263  9088 736b3c        	dc.b	"sk<"
 264  908b 2f74643e3c74  	dc.b	"/td><td><input nam"
 265  909d 653d27623038  	dc.b	"e='b08' class='t6'"
 266  90af 2076616c7565  	dc.b	" value='%b08' %y00"
 267  90c1 3c74643e3c69  	dc.b	"<td><input name='b"
 268  90d3 30392720636c  	dc.b	"09' class='t6' val"
 269  90e5 75653d272562  	dc.b	"ue='%b09' %y00<td>"
 270  90f7 3c696e707574  	dc.b	"<input name='b10' "
 271  9109 636c6173733d  	dc.b	"class='t6' value='"
 272  911b 256231302720  	dc.b	"%b10' %y00<td><inp"
 273  912d 7574206e616d  	dc.b	"ut name='b11' clas"
 274  913f 733d27743627  	dc.b	"s='t6' value='%b11"
 275  9151 272025793030  	dc.b	"' %y00</tr></table"
 276  9163 3e3c7461626c  	dc.b	"><table><tr><td cl"
 277  9175 6173733d2774  	dc.b	"ass='t1'>Port</td>"
 278  9187 3c7464        	dc.b	"<td"
 279  918a 3e3c696e7075  	dc.b	"><input name='c00'"
 280  919c 20636c617373  	dc.b	" class='t8' value="
 281  91ae 272563303027  	dc.b	"'%c00' pattern='[0"
 282  91c0 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 283  91d2 657220303030  	dc.b	"er 00010 to 65535'"
 284  91e4 206d61786c65  	dc.b	" maxlength='5'></t"
 285  91f6 643e3c2f7472  	dc.b	"d></tr></table><ta"
 286  9208 626c653e3c74  	dc.b	"ble><tr><td class="
 287  921a 277431273e4d  	dc.b	"'t1'>MAC Address</"
 288  922c 74643e3c7464  	dc.b	"td><td><input name"
 289  923e 3d2764303027  	dc.b	"='d00' class='t7' "
 290  9250 76616c75653d  	dc.b	"value='%d00' %y01<"
 291  9262 74643e3c696e  	dc.b	"td><input name='d0"
 292  9274 312720636c61  	dc.b	"1' class='t7' valu"
 293  9286 653d27        	dc.b	"e='"
 294  9289 256430312720  	dc.b	"%d01' %y01<td><inp"
 295  929b 7574206e616d  	dc.b	"ut name='d02' clas"
 296  92ad 733d27743727  	dc.b	"s='t7' value='%d02"
 297  92bf 272025793031  	dc.b	"' %y01<td><input n"
 298  92d1 616d653d2764  	dc.b	"ame='d03' class='t"
 299  92e3 37272076616c  	dc.b	"7' value='%d03' %y"
 300  92f5 30313c74643e  	dc.b	"01<td><input name="
 301  9307 276430342720  	dc.b	"'d04' class='t7' v"
 302  9319 616c75653d27  	dc.b	"alue='%d04' %y01<t"
 303  932b 643e3c696e70  	dc.b	"d><input name='d05"
 304  933d 2720636c6173  	dc.b	"' class='t7' value"
 305  934f 3d2725643035  	dc.b	"='%d05' %y01</tr><"
 306  9361 2f7461626c65  	dc.b	"/table><p></p><tab"
 307  9373 6c653e3c7472  	dc.b	"le><tr><td class='"
 308  9385 743127        	dc.b	"t1'"
 309  9388 3e4d51545420  	dc.b	">MQTT Server</td><"
 310  939a 74643e3c696e  	dc.b	"td><input name='b1"
 311  93ac 322720636c61  	dc.b	"2' class='t6' valu"
 312  93be 653d27256231  	dc.b	"e='%b12' %y00<td><"
 313  93d0 696e70757420  	dc.b	"input name='b13' c"
 314  93e2 6c6173733d27  	dc.b	"lass='t6' value='%"
 315  93f4 623133272025  	dc.b	"b13' %y00<td><inpu"
 316  9406 74206e616d65  	dc.b	"t name='b14' class"
 317  9418 3d2774362720  	dc.b	"='t6' value='%b14'"
 318  942a 20257930303c  	dc.b	" %y00<td><input na"
 319  943c 6d653d276231  	dc.b	"me='b15' class='t6"
 320  944e 272076616c75  	dc.b	"' value='%b15' %y0"
 321  9460 303c2f74723e  	dc.b	"0</tr></table><tab"
 322  9472 6c653e3c7472  	dc.b	"le><tr><td class='"
 323  9484 743127        	dc.b	"t1'"
 324  9487 3e4d51545420  	dc.b	">MQTT Port</td><td"
 325  9499 3e3c696e7075  	dc.b	"><input name='c01'"
 326  94ab 20636c617373  	dc.b	" class='t8' value="
 327  94bd 272563303127  	dc.b	"'%c01' pattern='[0"
 328  94cf 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 329  94e1 657220303030  	dc.b	"er 00010 to 65535'"
 330  94f3 206d61786c65  	dc.b	" maxlength='5'></t"
 331  9505 643e3c2f7472  	dc.b	"d></tr></table><ta"
 332  9517 626c653e3c74  	dc.b	"ble><tr><td class="
 333  9529 277431273e4d  	dc.b	"'t1'>MQTT Username"
 334  953b 3c2f74643e3c  	dc.b	"</td><td><input na"
 335  954d 6d653d276c30  	dc.b	"me='l00' class='t1"
 336  955f 272076616c75  	dc.b	"' value='%l00' pat"
 337  9571 7465726e3d27  	dc.b	"tern='[0-9a-zA-Z-_"
 338  9583 2a2e5d        	dc.b	"*.]"
 339  9586 7b302c31307d  	dc.b	"{0,10}' title='0 t"
 340  9598 6f203130206c  	dc.b	"o 10 letters, numb"
 341  95aa 6572732c2061  	dc.b	"ers, and -_*. no s"
 342  95bc 70616365732e  	dc.b	"paces. Use none fo"
 343  95ce 72206e6f2065  	dc.b	"r no entry.' maxle"
 344  95e0 6e6774683d27  	dc.b	"ngth='10'></td></t"
 345  95f2 723e3c74723e  	dc.b	"r><tr><td class='t"
 346  9604 31273e4d5154  	dc.b	"1'>MQTT Password</"
 347  9616 74643e3c7464  	dc.b	"td><td><input name"
 348  9628 3d276d303027  	dc.b	"='m00' class='t1' "
 349  963a 76616c75653d  	dc.b	"value='%m00' patte"
 350  964c 726e3d275b30  	dc.b	"rn='[0-9a-zA-Z-_*."
 351  965e 5d7b302c3130  	dc.b	"]{0,10}' title='0 "
 352  9670 746f20313020  	dc.b	"to 10 letters, num"
 353  9682 626572        	dc.b	"ber"
 354  9685 732c20616e64  	dc.b	"s, and -_*. no spa"
 355  9697 6365732e2055  	dc.b	"ces. Use none for "
 356  96a9 6e6f20656e74  	dc.b	"no entry.' maxleng"
 357  96bb 74683d273130  	dc.b	"th='10'></td></tr>"
 358  96cd 3c2f7461626c  	dc.b	"</table><table><tr"
 359  96df 3e3c74642063  	dc.b	"><td class='t1'>MQ"
 360  96f1 545420537461  	dc.b	"TT Status  </td><t"
 361  9703 6420636c6173  	dc.b	"d class='s%n00'></"
 362  9715 74643e3c7464  	dc.b	"td><td class='s%n0"
 363  9727 31273e3c2f74  	dc.b	"1'></td><td class="
 364  9739 2773256e3032  	dc.b	"'s%n02'></td><td c"
 365  974b 6c6173733d27  	dc.b	"lass='s%n03'></td>"
 366  975d 3c746420636c  	dc.b	"<td class='s%n04'>"
 367  976f 3c2f74643e3c  	dc.b	"</td></tr></table>"
 368  9781 3c703e        	dc.b	"<p>"
 369  9784 3c2f703e3c69  	dc.b	"</p><input type='h"
 370  9796 696464656e27  	dc.b	"idden' name='z00' "
 371  97a8 76616c75653d  	dc.b	"value='0'><button "
 372  97ba 747970653d27  	dc.b	"type='submit'>Save"
 373  97cc 3c2f62757474  	dc.b	"</button><button t"
 374  97de 7970653d2772  	dc.b	"ype='reset'>Undo A"
 375  97f0 6c6c3c2f6275  	dc.b	"ll</button></form>"
 376  9802 3c703e536565  	dc.b	"<p>See Documentati"
 377  9814 6f6e20666f72  	dc.b	"on for help<br>Cod"
 378  9826 652052657669  	dc.b	"e Revision 2020112"
 379  9838 362031353237  	dc.b	"6 1527</p>%y03/91%"
 380  984a 793032526562  	dc.b	"y02Reboot</button>"
 381  985c 3c2f666f726d  	dc.b	"</form><br><br>%y0"
 382  986e 332f36312579  	dc.b	"3/61%y02Refresh</b"
 383  9880 757474        	dc.b	"utt"
 384  9883 6f6e3e3c2f66  	dc.b	"on></form>%y03/60%"
 385  9895 793032494f20  	dc.b	"y02IO Control</but"
 386  98a7 746f6e3e3c2f  	dc.b	"ton></form>%y03/66"
 387  98b9 257930324572  	dc.b	"%y02Error Statisti"
 388  98cb 63733c2f6275  	dc.b	"cs</button></form>"
 389  98dd 3c2f626f6479  	dc.b	"</body></html>",0
 390  98ec               L71_g_HtmlPageStats:
 391  98ec 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 392  98fe 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 393  9910 6561643e3c6c  	dc.b	"ead><link rel='ico"
 394  9922 6e2720687265  	dc.b	"n' href='data:,'><"
 395  9934 2f686561643e  	dc.b	"/head><body><table"
 396  9946 3e3c74723e3c  	dc.b	"><tr><td>Seconds s"
 397  9958 696e63652062  	dc.b	"ince boot %e26</td"
 398  996a 3e3c2f74723e  	dc.b	"></tr><tr><td>RXER"
 399  997c 494620636f75  	dc.b	"IF count %e27</td>"
 400  998e 3c2f74723e3c  	dc.b	"</tr><tr><td>TXERI"
 401  99a0 4620636f756e  	dc.b	"F count %e28</td><"
 402  99b2 2f74723e3c74  	dc.b	"/tr><tr><td>TRANSM"
 403  99c4 495420636f75  	dc.b	"IT count %e29</td>"
 404  99d6 3c2f74723e3c  	dc.b	"</tr></table>%y03/"
 405  99e8 363127        	dc.b	"61'"
 406  99eb 206d6574686f  	dc.b	" method='GET'><but"
 407  99fd 746f6e3e436f  	dc.b	"ton>Configuration<"
 408  9a0f 2f627574746f  	dc.b	"/button></form>%y0"
 409  9a21 332f36362720  	dc.b	"3/66' method='GET'"
 410  9a33 3e3c62757474  	dc.b	"><button>Refresh</"
 411  9a45 627574746f6e  	dc.b	"button></form></bo"
 412  9a57 64793e3c2f68  	dc.b	"dy></html>",0
 413  9a62               L12_g_HtmlPageRstate:
 414  9a62 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 415  9a74 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 416  9a86 6561643e3c74  	dc.b	"ead><title>Help Pa"
 417  9a98 676520323c2f  	dc.b	"ge 2</title><link "
 418  9aaa 72656c3d2769  	dc.b	"rel='icon' href='d"
 419  9abc 6174613a2c27  	dc.b	"ata:,'></head><bod"
 420  9ace 793e3c703e25  	dc.b	"y><p>%f00</p></bod"
 421  9ae0 793e3c2f6874  	dc.b	"y></html>",0
 422  9aea               L32_page_string00:
 423  9aea 706174746572  	dc.b	"pattern='[0-9]{3}'"
 424  9afc 207469746c65  	dc.b	" title='Enter 000 "
 425  9b0e 746f20323535  	dc.b	"to 255' maxlength="
 426  9b20 2733273e3c2f  	dc.b	"'3'></td>",0
 427  9b2a               L52_page_string00_len:
 428  9b2a 3f            	dc.b	63
 429  9b2b               L72_page_string00_len_less4:
 430  9b2b 3b            	dc.b	59
 431  9b2c               L13_page_string01:
 432  9b2c 706174746572  	dc.b	"pattern='[0-9a-f]{"
 433  9b3e 327d27207469  	dc.b	"2}' title='Enter 0"
 434  9b50 3020746f2066  	dc.b	"0 to ff' maxlength"
 435  9b62 3d2732273e3c  	dc.b	"='2'></td>",0
 436  9b6d               L33_page_string01_len:
 437  9b6d 40            	dc.b	64
 438  9b6e               L53_page_string01_len_less4:
 439  9b6e 3c            	dc.b	60
 440  9b6f               L73_page_string02:
 441  9b6f 27206d657468  	dc.b	"' method='GET'><bu"
 442  9b81 74746f6e2074  	dc.b	"tton title='Save f"
 443  9b93 697273742120  	dc.b	"irst! This button "
 444  9ba5 77696c6c206e  	dc.b	"will not save your"
 445  9bb7 206368616e67  	dc.b	" changes'>",0
 446  9bc2               L14_page_string02_len:
 447  9bc2 52            	dc.b	82
 448  9bc3               L34_page_string02_len_less4:
 449  9bc3 4e            	dc.b	78
 450  9bc4               L54_page_string03:
 451  9bc4 3c666f726d20  	dc.b	"<form style='displ"
 452  9bd6 61793a20696e  	dc.b	"ay: inline' action"
 453  9be8 3d2700        	dc.b	"='",0
 454  9beb               L74_page_string03_len:
 455  9beb 26            	dc.b	38
 456  9bec               L15_page_string03_len_less4:
 457  9bec 22            	dc.b	34
 458  9bed               L35_page_string04:
 459  9bed 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 460  9bff 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 461  9c11 6561643e3c6c  	dc.b	"ead><link rel='ico"
 462  9c23 6e2720687265  	dc.b	"n' href='data:,'>",0
 463  9c35               L55_page_string04_len:
 464  9c35 47            	dc.b	71
 465  9c36               L75_page_string04_len_less4:
 466  9c36 43            	dc.b	67
 467  9c37               L16_page_string05:
 468  9c37 3c7374796c65  	dc.b	"<style>.s0 { backg"
 469  9c49 726f756e642d  	dc.b	"round-color: red; "
 470  9c5b 77696474683a  	dc.b	"width: 30px; }.s1 "
 471  9c6d 7b206261636b  	dc.b	"{ background-color"
 472  9c7f 3a2067726565  	dc.b	": green; width: 30"
 473  9c91 70783b207d2e  	dc.b	"px; }.t1 { width: "
 474  9ca3 31323070783b  	dc.b	"120px; }.t2 { widt"
 475  9cb5 683a20313438  	dc.b	"h: 148px; }.t3 { w"
 476  9cc7 696474683a20  	dc.b	"idth: 30px; }.t5 {"
 477  9cd9 207769647468  	dc.b	" width: 60px; }.t6"
 478  9ceb 207b20776964  	dc.b	" { width: 25px; }."
 479  9cfd 7437207b2077  	dc.b	"t7 { width: 18px; "
 480  9d0f 7d2e7438207b  	dc.b	"}.t8 { width: 40px"
 481  9d21 3b207d00      	dc.b	"; }",0
 482  9d25               L36_page_string05_len:
 483  9d25 ed            	dc.b	237
 484  9d26               L56_page_string05_len_less4:
 485  9d26 e9            	dc.b	233
 486  9d27               L76_page_string06:
 487  9d27 7464207b2074  	dc.b	"td { text-align: c"
 488  9d39 656e7465723b  	dc.b	"enter; border: 1px"
 489  9d4b 20626c61636b  	dc.b	" black solid; }</s"
 490  9d5d 74796c653e00  	dc.b	"tyle>",0
 491  9d63               L17_page_string06_len:
 492  9d63 3b            	dc.b	59
 493  9d64               L37_page_string06_len_less4:
 494  9d64 37            	dc.b	55
 549                     ; 1206 uint16_t adjust_template_size()
 549                     ; 1207 {
 551                     .text:	section	.text,new
 552  a471               _adjust_template_size:
 554  a471 89            	pushw	x
 555       00000002      OFST:	set	2
 558                     ; 1225   size = 0;
 560  a472 5f            	clrw	x
 561  a473 1f01          	ldw	(OFST-1,sp),x
 563                     ; 1230   if (current_webpage == WEBPAGE_IOCONTROL) {
 565  a475 c6001a        	ld	a,_current_webpage
 566  a478 2613          	jrne	L711
 567                     ; 1231     size = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
 569                     ; 1234     size = size + page_string04_len_less4
 569                     ; 1235                 + page_string05_len_less4
 569                     ; 1236 		+ page_string06_len_less4;
 571  a47a ae0d69        	ldw	x,#3433
 572  a47d 1f01          	ldw	(OFST-1,sp),x
 574                     ; 1241     size = size + strlen(stored_devicename) - 4 ;
 576  a47f ae4000        	ldw	x,#_stored_devicename
 577  a482 cdf660        	call	_strlen
 579  a485 72fb01        	addw	x,(OFST-1,sp)
 580  a488 1c00a4        	addw	x,#164
 582                     ; 1248     size = size - 48;
 585                     ; 1264     size = size - 8;
 588                     ; 1278     size = size + (2 * page_string03_len_less4);
 591                     ; 1307     size = size + (2 * (page_string02_len_less4));
 595  a48b 2046          	jra	L121
 596  a48d               L711:
 597                     ; 1326   else if (current_webpage == WEBPAGE_CONFIGURATION) {
 599  a48d a101          	cp	a,#1
 600  a48f 2632          	jrne	L321
 601                     ; 1327     size = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
 603                     ; 1330     size = size + page_string04_len_less4
 603                     ; 1331                 + page_string05_len_less4
 603                     ; 1332 		+ page_string06_len_less4;
 605  a491 ae0dbf        	ldw	x,#3519
 606  a494 1f01          	ldw	(OFST-1,sp),x
 608                     ; 1337     size = size + strlen(stored_devicename) - 4 ;
 610  a496 ae4000        	ldw	x,#_stored_devicename
 611  a499 cdf660        	call	_strlen
 613  a49c 72fb01        	addw	x,(OFST-1,sp)
 614  a49f 1d001c        	subw	x,#28
 616                     ; 1344     size = size - 12;
 619                     ; 1351     size = size + 1;
 622                     ; 1358     size = size - 12;
 625                     ; 1366     size = size + 2;
 628                     ; 1374     size = size - 4;
 631                     ; 1381     size = size + 1;
 633  a4a2 1f01          	ldw	(OFST-1,sp),x
 635                     ; 1386     size = size + (strlen(stored_mqtt_username) - 4);
 637  a4a4 ae4035        	ldw	x,#_stored_mqtt_username
 638  a4a7 cdf660        	call	_strlen
 640  a4aa 1d0004        	subw	x,#4
 641  a4ad 72fb01        	addw	x,(OFST-1,sp)
 642  a4b0 1f01          	ldw	(OFST-1,sp),x
 644                     ; 1391     size = size + (strlen(stored_mqtt_password) - 4);
 646  a4b2 ae4040        	ldw	x,#_stored_mqtt_password
 647  a4b5 cdf660        	call	_strlen
 649  a4b8 1d0004        	subw	x,#4
 650  a4bb 72fb01        	addw	x,(OFST-1,sp)
 652                     ; 1398     size = size - 15;
 654  a4be 1c06c9        	addw	x,#1737
 656                     ; 1412     size = size + (3 * page_string03_len_less4);
 659                     ; 1418     size = size + page_string03_len_less4;
 662                     ; 1441     size = size + (12 * (page_string00_len_less4));
 665                     ; 1450     size = size + (4 * (page_string00_len_less4));
 668                     ; 1460     size = size + (6 * (page_string01_len_less4));
 671                     ; 1469     size = size + (3 * (page_string02_len_less4));
 674                     ; 1484     size = size + page_string02_len_less4;
 678  a4c1 2010          	jra	L121
 679  a4c3               L321:
 680                     ; 1558   else if (current_webpage == WEBPAGE_STATS) {
 682  a4c3 a105          	cp	a,#5
 683  a4c5 2605          	jrne	L721
 684                     ; 1559     size = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
 686                     ; 1566     size = size + 24;
 688                     ; 1575     size = size + (2 * page_string03_len_less4);
 690  a4c7 ae01d1        	ldw	x,#465
 693  a4ca 2007          	jra	L121
 694  a4cc               L721:
 695                     ; 1583   else if (current_webpage == WEBPAGE_RSTATE) {
 697  a4cc a106          	cp	a,#6
 698  a4ce 2603          	jrne	L121
 699                     ; 1584     size = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
 701                     ; 1589     size = size + 12;
 703  a4d0 ae0093        	ldw	x,#147
 705  a4d3               L121:
 706                     ; 1592   return size;
 710  a4d3 5b02          	addw	sp,#2
 711  a4d5 81            	ret	
 802                     ; 1596 void emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
 802                     ; 1597 {
 803                     .text:	section	.text,new
 804  a4d6               _emb_itoa:
 806  a4d6 5207          	subw	sp,#7
 807       00000007      OFST:	set	7
 810                     ; 1615   for (i=0; i < pad; i++) str[i] = '0';
 812  a4d8 0f07          	clr	(OFST+0,sp)
 815  a4da 200a          	jra	L771
 816  a4dc               L371:
 819  a4dc 5f            	clrw	x
 820  a4dd 97            	ld	xl,a
 821  a4de 72fb0e        	addw	x,(OFST+7,sp)
 822  a4e1 a630          	ld	a,#48
 823  a4e3 f7            	ld	(x),a
 826  a4e4 0c07          	inc	(OFST+0,sp)
 828  a4e6               L771:
 831  a4e6 7b07          	ld	a,(OFST+0,sp)
 832  a4e8 1111          	cp	a,(OFST+10,sp)
 833  a4ea 25f0          	jrult	L371
 834                     ; 1616   str[pad] = '\0';
 836  a4ec 7b11          	ld	a,(OFST+10,sp)
 837  a4ee 5f            	clrw	x
 838  a4ef 97            	ld	xl,a
 839  a4f0 72fb0e        	addw	x,(OFST+7,sp)
 840  a4f3 7f            	clr	(x)
 841                     ; 1617   if (num == 0) return;
 843  a4f4 96            	ldw	x,sp
 844  a4f5 1c000a        	addw	x,#OFST+3
 845  a4f8 cdfa40        	call	c_lzmp
 847  a4fb 2603cca5a5    	jreq	L02
 850                     ; 1620   i = 0;
 852  a500 0f07          	clr	(OFST+0,sp)
 855  a502 2060          	jra	L112
 856  a504               L502:
 857                     ; 1622     rem = (uint8_t)(num % base);
 859  a504 7b10          	ld	a,(OFST+9,sp)
 860  a506 b703          	ld	c_lreg+3,a
 861  a508 3f02          	clr	c_lreg+2
 862  a50a 3f01          	clr	c_lreg+1
 863  a50c 3f00          	clr	c_lreg
 864  a50e 96            	ldw	x,sp
 865  a50f 5c            	incw	x
 866  a510 cdfa53        	call	c_rtol
 869  a513 96            	ldw	x,sp
 870  a514 1c000a        	addw	x,#OFST+3
 871  a517 cdf8ed        	call	c_ltor
 873  a51a 96            	ldw	x,sp
 874  a51b 5c            	incw	x
 875  a51c cdfa26        	call	c_lumd
 877  a51f b603          	ld	a,c_lreg+3
 878  a521 6b06          	ld	(OFST-1,sp),a
 880                     ; 1623     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
 882  a523 a10a          	cp	a,#10
 883  a525 7b07          	ld	a,(OFST+0,sp)
 884  a527 250d          	jrult	L512
 887  a529 0c07          	inc	(OFST+0,sp)
 889  a52b 5f            	clrw	x
 890  a52c 97            	ld	xl,a
 891  a52d 72fb0e        	addw	x,(OFST+7,sp)
 892  a530 7b06          	ld	a,(OFST-1,sp)
 893  a532 ab57          	add	a,#87
 895  a534 200b          	jra	L712
 896  a536               L512:
 897                     ; 1624     else str[i++] = (uint8_t)(rem + '0');
 899  a536 0c07          	inc	(OFST+0,sp)
 901  a538 5f            	clrw	x
 902  a539 97            	ld	xl,a
 903  a53a 72fb0e        	addw	x,(OFST+7,sp)
 904  a53d 7b06          	ld	a,(OFST-1,sp)
 905  a53f ab30          	add	a,#48
 906  a541               L712:
 907  a541 f7            	ld	(x),a
 908                     ; 1625     num = num/base;
 910  a542 7b10          	ld	a,(OFST+9,sp)
 911  a544 b703          	ld	c_lreg+3,a
 912  a546 3f02          	clr	c_lreg+2
 913  a548 3f01          	clr	c_lreg+1
 914  a54a 3f00          	clr	c_lreg
 915  a54c 96            	ldw	x,sp
 916  a54d 5c            	incw	x
 917  a54e cdfa53        	call	c_rtol
 920  a551 96            	ldw	x,sp
 921  a552 1c000a        	addw	x,#OFST+3
 922  a555 cdf8ed        	call	c_ltor
 924  a558 96            	ldw	x,sp
 925  a559 5c            	incw	x
 926  a55a cdf8ff        	call	c_ludv
 928  a55d 96            	ldw	x,sp
 929  a55e 1c000a        	addw	x,#OFST+3
 930  a561 cdfa53        	call	c_rtol
 932  a564               L112:
 933                     ; 1621   while (num != 0) {
 935  a564 96            	ldw	x,sp
 936  a565 1c000a        	addw	x,#OFST+3
 937  a568 cdfa40        	call	c_lzmp
 939  a56b 2697          	jrne	L502
 940                     ; 1634     start = 0;
 942  a56d 0f06          	clr	(OFST-1,sp)
 944                     ; 1635     end = (uint8_t)(pad - 1);
 946  a56f 7b11          	ld	a,(OFST+10,sp)
 947  a571 4a            	dec	a
 948  a572 6b07          	ld	(OFST+0,sp),a
 951  a574 2029          	jra	L522
 952  a576               L122:
 953                     ; 1638       temp = str[start];
 955  a576 5f            	clrw	x
 956  a577 97            	ld	xl,a
 957  a578 72fb0e        	addw	x,(OFST+7,sp)
 958  a57b f6            	ld	a,(x)
 959  a57c 6b05          	ld	(OFST-2,sp),a
 961                     ; 1639       str[start] = str[end];
 963  a57e 5f            	clrw	x
 964  a57f 7b06          	ld	a,(OFST-1,sp)
 965  a581 97            	ld	xl,a
 966  a582 72fb0e        	addw	x,(OFST+7,sp)
 967  a585 7b07          	ld	a,(OFST+0,sp)
 968  a587 905f          	clrw	y
 969  a589 9097          	ld	yl,a
 970  a58b 72f90e        	addw	y,(OFST+7,sp)
 971  a58e 90f6          	ld	a,(y)
 972  a590 f7            	ld	(x),a
 973                     ; 1640       str[end] = temp;
 975  a591 5f            	clrw	x
 976  a592 7b07          	ld	a,(OFST+0,sp)
 977  a594 97            	ld	xl,a
 978  a595 72fb0e        	addw	x,(OFST+7,sp)
 979  a598 7b05          	ld	a,(OFST-2,sp)
 980  a59a f7            	ld	(x),a
 981                     ; 1641       start++;
 983  a59b 0c06          	inc	(OFST-1,sp)
 985                     ; 1642       end--;
 987  a59d 0a07          	dec	(OFST+0,sp)
 989  a59f               L522:
 990                     ; 1637     while (start < end) {
 990                     ; 1638       temp = str[start];
 990                     ; 1639       str[start] = str[end];
 990                     ; 1640       str[end] = temp;
 990                     ; 1641       start++;
 990                     ; 1642       end--;
 992  a59f 7b06          	ld	a,(OFST-1,sp)
 993  a5a1 1107          	cp	a,(OFST+0,sp)
 994  a5a3 25d1          	jrult	L122
 995                     ; 1645 }
 996  a5a5               L02:
 999  a5a5 5b07          	addw	sp,#7
1000  a5a7 81            	ret	
1060                     ; 1648 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1060                     ; 1649 {
1061                     .text:	section	.text,new
1062  a5a8               L3_CopyStringP:
1064  a5a8 89            	pushw	x
1065  a5a9 5203          	subw	sp,#3
1066       00000003      OFST:	set	3
1069                     ; 1654   nBytes = 0;
1071  a5ab 5f            	clrw	x
1073  a5ac 2014          	jra	L362
1074  a5ae               L752:
1075                     ; 1656     **ppBuffer = Character;
1077  a5ae 1e04          	ldw	x,(OFST+1,sp)
1078  a5b0 fe            	ldw	x,(x)
1079  a5b1 f7            	ld	(x),a
1080                     ; 1657     *ppBuffer = *ppBuffer + 1;
1082  a5b2 1e04          	ldw	x,(OFST+1,sp)
1083  a5b4 9093          	ldw	y,x
1084  a5b6 fe            	ldw	x,(x)
1085  a5b7 5c            	incw	x
1086  a5b8 90ff          	ldw	(y),x
1087                     ; 1658     pString = pString + 1;
1089  a5ba 1e08          	ldw	x,(OFST+5,sp)
1090  a5bc 5c            	incw	x
1091  a5bd 1f08          	ldw	(OFST+5,sp),x
1092                     ; 1659     nBytes++;
1094  a5bf 1e01          	ldw	x,(OFST-2,sp)
1095  a5c1 5c            	incw	x
1096  a5c2               L362:
1097  a5c2 1f01          	ldw	(OFST-2,sp),x
1099                     ; 1655   while ((Character = pString[0]) != '\0') {
1099                     ; 1656     **ppBuffer = Character;
1099                     ; 1657     *ppBuffer = *ppBuffer + 1;
1099                     ; 1658     pString = pString + 1;
1099                     ; 1659     nBytes++;
1101  a5c4 1e08          	ldw	x,(OFST+5,sp)
1102  a5c6 f6            	ld	a,(x)
1103  a5c7 6b03          	ld	(OFST+0,sp),a
1105  a5c9 26e3          	jrne	L752
1106                     ; 1661   return nBytes;
1108  a5cb 1e01          	ldw	x,(OFST-2,sp)
1111  a5cd 5b05          	addw	sp,#5
1112  a5cf 81            	ret	
1171                     ; 1665 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint16_t nDataLen)
1171                     ; 1666 {
1172                     .text:	section	.text,new
1173  a5d0               L5_CopyHttpHeader:
1175  a5d0 89            	pushw	x
1176  a5d1 5203          	subw	sp,#3
1177       00000003      OFST:	set	3
1180                     ; 1670   nBytes = 0;
1182  a5d3 5f            	clrw	x
1183  a5d4 1f02          	ldw	(OFST-1,sp),x
1185                     ; 1672   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1187  a5d6 ae9e58        	ldw	x,#L313
1188  a5d9 89            	pushw	x
1189  a5da 96            	ldw	x,sp
1190  a5db 1c0006        	addw	x,#OFST+3
1191  a5de cda5a8        	call	L3_CopyStringP
1193  a5e1 5b02          	addw	sp,#2
1194  a5e3 72fb02        	addw	x,(OFST-1,sp)
1195  a5e6 1f02          	ldw	(OFST-1,sp),x
1197                     ; 1673   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1199  a5e8 ae9e55        	ldw	x,#L513
1200  a5eb 89            	pushw	x
1201  a5ec 96            	ldw	x,sp
1202  a5ed 1c0006        	addw	x,#OFST+3
1203  a5f0 cda5a8        	call	L3_CopyStringP
1205  a5f3 5b02          	addw	sp,#2
1206  a5f5 72fb02        	addw	x,(OFST-1,sp)
1207  a5f8 1f02          	ldw	(OFST-1,sp),x
1209                     ; 1675   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1211  a5fa ae9e45        	ldw	x,#L713
1212  a5fd 89            	pushw	x
1213  a5fe 96            	ldw	x,sp
1214  a5ff 1c0006        	addw	x,#OFST+3
1215  a602 cda5a8        	call	L3_CopyStringP
1217  a605 5b02          	addw	sp,#2
1218  a607 72fb02        	addw	x,(OFST-1,sp)
1219  a60a 1f02          	ldw	(OFST-1,sp),x
1221                     ; 1679   emb_itoa(nDataLen, OctetArray, 10, 5);
1223  a60c 4b05          	push	#5
1224  a60e 4b0a          	push	#10
1225  a610 ae005c        	ldw	x,#_OctetArray
1226  a613 89            	pushw	x
1227  a614 1e0c          	ldw	x,(OFST+9,sp)
1228  a616 cdfab4        	call	c_uitolx
1230  a619 be02          	ldw	x,c_lreg+2
1231  a61b 89            	pushw	x
1232  a61c be00          	ldw	x,c_lreg
1233  a61e 89            	pushw	x
1234  a61f cda4d6        	call	_emb_itoa
1236  a622 5b08          	addw	sp,#8
1237                     ; 1680   for (i=0; i<5; i++) {
1239  a624 4f            	clr	a
1240  a625 6b01          	ld	(OFST-2,sp),a
1242  a627               L123:
1243                     ; 1681     *pBuffer = (uint8_t)OctetArray[i];
1245  a627 5f            	clrw	x
1246  a628 97            	ld	xl,a
1247  a629 d6005c        	ld	a,(_OctetArray,x)
1248  a62c 1e04          	ldw	x,(OFST+1,sp)
1249  a62e f7            	ld	(x),a
1250                     ; 1682     pBuffer = pBuffer + 1;
1252  a62f 5c            	incw	x
1253  a630 1f04          	ldw	(OFST+1,sp),x
1254                     ; 1680   for (i=0; i<5; i++) {
1256  a632 0c01          	inc	(OFST-2,sp)
1260  a634 7b01          	ld	a,(OFST-2,sp)
1261  a636 a105          	cp	a,#5
1262  a638 25ed          	jrult	L123
1263                     ; 1684   nBytes += 5;
1265  a63a 1e02          	ldw	x,(OFST-1,sp)
1266  a63c 1c0005        	addw	x,#5
1267  a63f 1f02          	ldw	(OFST-1,sp),x
1269                     ; 1686   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1271  a641 ae9e55        	ldw	x,#L513
1272  a644 89            	pushw	x
1273  a645 96            	ldw	x,sp
1274  a646 1c0006        	addw	x,#OFST+3
1275  a649 cda5a8        	call	L3_CopyStringP
1277  a64c 5b02          	addw	sp,#2
1278  a64e 72fb02        	addw	x,(OFST-1,sp)
1279  a651 1f02          	ldw	(OFST-1,sp),x
1281                     ; 1689   nBytes += CopyStringP(&pBuffer, (const char *)("Cache-Control: no-cache, no-store\r\n"));
1283  a653 ae9e21        	ldw	x,#L723
1284  a656 89            	pushw	x
1285  a657 96            	ldw	x,sp
1286  a658 1c0006        	addw	x,#OFST+3
1287  a65b cda5a8        	call	L3_CopyStringP
1289  a65e 5b02          	addw	sp,#2
1290  a660 72fb02        	addw	x,(OFST-1,sp)
1291  a663 1f02          	ldw	(OFST-1,sp),x
1293                     ; 1691   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type: text/html; charset=utf-8\r\n"));
1295  a665 ae9df8        	ldw	x,#L133
1296  a668 89            	pushw	x
1297  a669 96            	ldw	x,sp
1298  a66a 1c0006        	addw	x,#OFST+3
1299  a66d cda5a8        	call	L3_CopyStringP
1301  a670 5b02          	addw	sp,#2
1302  a672 72fb02        	addw	x,(OFST-1,sp)
1303  a675 1f02          	ldw	(OFST-1,sp),x
1305                     ; 1693   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
1307  a677 ae9de5        	ldw	x,#L333
1308  a67a 89            	pushw	x
1309  a67b 96            	ldw	x,sp
1310  a67c 1c0006        	addw	x,#OFST+3
1311  a67f cda5a8        	call	L3_CopyStringP
1313  a682 5b02          	addw	sp,#2
1314  a684 72fb02        	addw	x,(OFST-1,sp)
1315  a687 1f02          	ldw	(OFST-1,sp),x
1317                     ; 1694   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1319  a689 ae9e55        	ldw	x,#L513
1320  a68c 89            	pushw	x
1321  a68d 96            	ldw	x,sp
1322  a68e 1c0006        	addw	x,#OFST+3
1323  a691 cda5a8        	call	L3_CopyStringP
1325  a694 5b02          	addw	sp,#2
1326  a696 72fb02        	addw	x,(OFST-1,sp)
1328                     ; 1696   return nBytes;
1332  a699 5b05          	addw	sp,#5
1333  a69b 81            	ret	
1490                     	switch	.const
1491  9d65               L431:
1492  9d65 a849          	dc.w	L533
1493  9d67 a857          	dc.w	L733
1494  9d69 a865          	dc.w	L143
1495  9d6b a873          	dc.w	L343
1496  9d6d a881          	dc.w	L543
1497  9d6f a88f          	dc.w	L743
1498  9d71 a89d          	dc.w	L153
1499  9d73 a8aa          	dc.w	L353
1500  9d75 a8b7          	dc.w	L553
1501  9d77 a8c4          	dc.w	L753
1502  9d79 a8d1          	dc.w	L163
1503  9d7b a8de          	dc.w	L363
1504  9d7d a8eb          	dc.w	L563
1505  9d7f a8f8          	dc.w	L763
1506  9d81 a905          	dc.w	L173
1507  9d83 a912          	dc.w	L373
1508                     ; 1700 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
1508                     ; 1701 {
1509                     .text:	section	.text,new
1510  a69c               L7_CopyHttpData:
1512  a69c 89            	pushw	x
1513  a69d 5208          	subw	sp,#8
1514       00000008      OFST:	set	8
1517                     ; 1720   nBytes = 0;
1519  a69f 5f            	clrw	x
1520  a6a0 1f05          	ldw	(OFST-3,sp),x
1522                     ; 1721   nParsedNum = 0;
1524  a6a2 0f07          	clr	(OFST-1,sp)
1526                     ; 1722   nParsedMode = 0;
1528  a6a4 0f04          	clr	(OFST-4,sp)
1530                     ; 1777   nMaxBytes = UIP_TCP_MSS - 25;
1532  a6a6 ae019f        	ldw	x,#415
1533  a6a9 1f11          	ldw	(OFST+9,sp),x
1535  a6ab ccac7b        	jra	L515
1536  a6ae               L315:
1537                     ; 1811     if (*pDataLeft > 0) {
1539  a6ae 1e0f          	ldw	x,(OFST+7,sp)
1540  a6b0 e601          	ld	a,(1,x)
1541  a6b2 fa            	or	a,(x)
1542  a6b3 2603ccac84    	jreq	L715
1543                     ; 1818       if (insertion_flag[0] != 0) {
1545  a6b8 c60017        	ld	a,_insertion_flag
1546  a6bb 2711          	jreq	L325
1547                     ; 1827         nParsedMode = insertion_flag[1];
1549  a6bd c60018        	ld	a,_insertion_flag+1
1550  a6c0 6b04          	ld	(OFST-4,sp),a
1552                     ; 1828         nParsedNum = insertion_flag[2];
1554  a6c2 c60019        	ld	a,_insertion_flag+2
1555  a6c5 6b07          	ld	(OFST-1,sp),a
1557                     ; 1829 	nByte = '0'; // Need to set nByte to something other than '%' so we
1559  a6c7 a630          	ld	a,#48
1560  a6c9 6b02          	ld	(OFST-6,sp),a
1563  a6cb cca78d        	jra	L525
1564  a6ce               L325:
1565                     ; 1842         memcpy(&nByte, *ppData, 1);
1567  a6ce 96            	ldw	x,sp
1568  a6cf 1c0002        	addw	x,#OFST-6
1569  a6d2 bf04          	ldw	c_x,x
1570  a6d4 160d          	ldw	y,(OFST+5,sp)
1571  a6d6 90fe          	ldw	y,(y)
1572  a6d8 90bf07        	ldw	c_y,y
1573  a6db ae0001        	ldw	x,#1
1574  a6de               L25:
1575  a6de 5a            	decw	x
1576  a6df 92d607        	ld	a,([c_y.w],x)
1577  a6e2 92d704        	ld	([c_x.w],x),a
1578  a6e5 5d            	tnzw	x
1579  a6e6 26f6          	jrne	L25
1580                     ; 1885         if (nByte == '%') {
1582  a6e8 7b02          	ld	a,(OFST-6,sp)
1583  a6ea a125          	cp	a,#37
1584  a6ec 26dd          	jrne	L525
1585                     ; 1886           *ppData = *ppData + 1;
1587  a6ee 1e0d          	ldw	x,(OFST+5,sp)
1588  a6f0 9093          	ldw	y,x
1589  a6f2 fe            	ldw	x,(x)
1590  a6f3 5c            	incw	x
1591  a6f4 90ff          	ldw	(y),x
1592                     ; 1887           *pDataLeft = *pDataLeft - 1;
1594  a6f6 1e0f          	ldw	x,(OFST+7,sp)
1595  a6f8 9093          	ldw	y,x
1596  a6fa fe            	ldw	x,(x)
1597  a6fb 5a            	decw	x
1598  a6fc 90ff          	ldw	(y),x
1599                     ; 1892           memcpy(&nParsedMode, *ppData, 1);
1601  a6fe 96            	ldw	x,sp
1602  a6ff 1c0004        	addw	x,#OFST-4
1603  a702 bf04          	ldw	c_x,x
1604  a704 160d          	ldw	y,(OFST+5,sp)
1605  a706 90fe          	ldw	y,(y)
1606  a708 90bf07        	ldw	c_y,y
1607  a70b ae0001        	ldw	x,#1
1608  a70e               L45:
1609  a70e 5a            	decw	x
1610  a70f 92d607        	ld	a,([c_y.w],x)
1611  a712 92d704        	ld	([c_x.w],x),a
1612  a715 5d            	tnzw	x
1613  a716 26f6          	jrne	L45
1614                     ; 1893           *ppData = *ppData + 1;
1616  a718 1e0d          	ldw	x,(OFST+5,sp)
1617  a71a 9093          	ldw	y,x
1618  a71c fe            	ldw	x,(x)
1619  a71d 5c            	incw	x
1620  a71e 90ff          	ldw	(y),x
1621                     ; 1894           *pDataLeft = *pDataLeft - 1;
1623  a720 1e0f          	ldw	x,(OFST+7,sp)
1624  a722 9093          	ldw	y,x
1625  a724 fe            	ldw	x,(x)
1626  a725 5a            	decw	x
1627  a726 90ff          	ldw	(y),x
1628                     ; 1899           memcpy(&temp, *ppData, 1);
1630  a728 96            	ldw	x,sp
1631  a729 5c            	incw	x
1632  a72a bf04          	ldw	c_x,x
1633  a72c 160d          	ldw	y,(OFST+5,sp)
1634  a72e 90fe          	ldw	y,(y)
1635  a730 90bf07        	ldw	c_y,y
1636  a733 ae0001        	ldw	x,#1
1637  a736               L65:
1638  a736 5a            	decw	x
1639  a737 92d607        	ld	a,([c_y.w],x)
1640  a73a 92d704        	ld	([c_x.w],x),a
1641  a73d 5d            	tnzw	x
1642  a73e 26f6          	jrne	L65
1643                     ; 1900           nParsedNum = (uint8_t)((temp - '0') * 10);
1645  a740 7b01          	ld	a,(OFST-7,sp)
1646  a742 97            	ld	xl,a
1647  a743 a60a          	ld	a,#10
1648  a745 42            	mul	x,a
1649  a746 9f            	ld	a,xl
1650  a747 a0e0          	sub	a,#224
1651  a749 6b07          	ld	(OFST-1,sp),a
1653                     ; 1901           *ppData = *ppData + 1;
1655  a74b 1e0d          	ldw	x,(OFST+5,sp)
1656  a74d 9093          	ldw	y,x
1657  a74f fe            	ldw	x,(x)
1658  a750 5c            	incw	x
1659  a751 90ff          	ldw	(y),x
1660                     ; 1902           *pDataLeft = *pDataLeft - 1;
1662  a753 1e0f          	ldw	x,(OFST+7,sp)
1663  a755 9093          	ldw	y,x
1664  a757 fe            	ldw	x,(x)
1665  a758 5a            	decw	x
1666  a759 90ff          	ldw	(y),x
1667                     ; 1907           memcpy(&temp, *ppData, 1);
1669  a75b 96            	ldw	x,sp
1670  a75c 5c            	incw	x
1671  a75d bf04          	ldw	c_x,x
1672  a75f 160d          	ldw	y,(OFST+5,sp)
1673  a761 90fe          	ldw	y,(y)
1674  a763 90bf07        	ldw	c_y,y
1675  a766 ae0001        	ldw	x,#1
1676  a769               L06:
1677  a769 5a            	decw	x
1678  a76a 92d607        	ld	a,([c_y.w],x)
1679  a76d 92d704        	ld	([c_x.w],x),a
1680  a770 5d            	tnzw	x
1681  a771 26f6          	jrne	L06
1682                     ; 1908           nParsedNum = (uint8_t)(nParsedNum + temp - '0');
1684  a773 7b07          	ld	a,(OFST-1,sp)
1685  a775 1b01          	add	a,(OFST-7,sp)
1686  a777 a030          	sub	a,#48
1687  a779 6b07          	ld	(OFST-1,sp),a
1689                     ; 1909           *ppData = *ppData + 1;
1691  a77b 1e0d          	ldw	x,(OFST+5,sp)
1692  a77d 9093          	ldw	y,x
1693  a77f fe            	ldw	x,(x)
1694  a780 5c            	incw	x
1695  a781 90ff          	ldw	(y),x
1696                     ; 1910           *pDataLeft = *pDataLeft - 1;
1698  a783 1e0f          	ldw	x,(OFST+7,sp)
1699  a785 9093          	ldw	y,x
1700  a787 fe            	ldw	x,(x)
1701  a788 5a            	decw	x
1702  a789 90ff          	ldw	(y),x
1703  a78b 7b02          	ld	a,(OFST-6,sp)
1704  a78d               L525:
1705                     ; 1914       if ((nByte == '%') || (insertion_flag[0] != 0)) {
1707  a78d a125          	cp	a,#37
1708  a78f 2709          	jreq	L335
1710  a791 725d0017      	tnz	_insertion_flag
1711  a795 2603ccac5e    	jreq	L135
1712  a79a               L335:
1713                     ; 1924         if (nParsedMode == 'i') {
1715  a79a 7b04          	ld	a,(OFST-4,sp)
1716  a79c a169          	cp	a,#105
1717  a79e 262b          	jrne	L535
1718                     ; 1938           if (nParsedNum > 7) {
1720  a7a0 7b07          	ld	a,(OFST-1,sp)
1721  a7a2 a108          	cp	a,#8
1722  a7a4 2520          	jrult	L735
1723                     ; 1940 	    i = GpioGetPin(nParsedNum);
1725  a7a6 cdbb88        	call	_GpioGetPin
1727  a7a9 6b08          	ld	(OFST+0,sp),a
1729                     ; 1941 	    if (invert_input == 0x00) *pBuffer = (uint8_t)(i + '0');
1731  a7ab 725d0165      	tnz	_invert_input
1732  a7af 2607          	jrne	L145
1735  a7b1               LC012:
1736  a7b1 ab30          	add	a,#48
1737  a7b3 1e09          	ldw	x,(OFST+1,sp)
1739  a7b5 ccab94        	jra	L1201
1740  a7b8               L145:
1741                     ; 1943 	      if (i == 0) *pBuffer = (uint8_t)('1');
1743  a7b8 7b08          	ld	a,(OFST+0,sp)
1744  a7ba 2703ccab90    	jrne	L7101
1747  a7bf 1e09          	ldw	x,(OFST+1,sp)
1748  a7c1 a631          	ld	a,#49
1750  a7c3 ccab94        	jra	L1201
1751                     ; 1944 	      else *pBuffer = (uint8_t)('0');
1752                     ; 1946             pBuffer++;
1753                     ; 1947             nBytes++;
1755  a7c6               L735:
1756                     ; 1951 	    *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
1758  a7c6 cdbb88        	call	_GpioGetPin
1760                     ; 1952             pBuffer++;
1761                     ; 1953             nBytes++;
1762  a7c9 20e6          	jp	LC012
1763  a7cb               L535:
1764                     ; 1971         else if ((nParsedMode == 'o' && ((uint8_t)(GpioGetPin(nParsedNum) == 1)))
1764                     ; 1972 	      || (nParsedMode == 'p' && ((uint8_t)(GpioGetPin(nParsedNum) == 0)))) { 
1766  a7cb a16f          	cp	a,#111
1767  a7cd 260a          	jrne	L165
1769  a7cf 7b07          	ld	a,(OFST-1,sp)
1770  a7d1 cdbb88        	call	_GpioGetPin
1772  a7d4 4a            	dec	a
1773  a7d5 270e          	jreq	L755
1774  a7d7 7b04          	ld	a,(OFST-4,sp)
1775  a7d9               L165:
1777  a7d9 a170          	cp	a,#112
1778  a7db 2626          	jrne	L555
1780  a7dd 7b07          	ld	a,(OFST-1,sp)
1781  a7df cdbb88        	call	_GpioGetPin
1783  a7e2 4d            	tnz	a
1784  a7e3 261e          	jrne	L555
1785  a7e5               L755:
1786                     ; 1977           for(i=0; i<7; i++) {
1788  a7e5 4f            	clr	a
1789  a7e6 6b08          	ld	(OFST+0,sp),a
1791  a7e8               L365:
1792                     ; 1978             *pBuffer = checked[i];
1794  a7e8 5f            	clrw	x
1795  a7e9 97            	ld	xl,a
1796  a7ea d68080        	ld	a,(L11_checked,x)
1797  a7ed 1e09          	ldw	x,(OFST+1,sp)
1798  a7ef f7            	ld	(x),a
1799                     ; 1979             pBuffer++;
1801  a7f0 5c            	incw	x
1802  a7f1 1f09          	ldw	(OFST+1,sp),x
1803                     ; 1977           for(i=0; i<7; i++) {
1805  a7f3 0c08          	inc	(OFST+0,sp)
1809  a7f5 7b08          	ld	a,(OFST+0,sp)
1810  a7f7 a107          	cp	a,#7
1811  a7f9 25ed          	jrult	L365
1812                     ; 1981 	  nBytes += 7;
1814  a7fb 1e05          	ldw	x,(OFST-3,sp)
1815  a7fd 1c0007        	addw	x,#7
1817  a800 ccac79        	jp	LC006
1818  a803               L555:
1819                     ; 1984         else if (nParsedMode == 'a') {
1821  a803 7b04          	ld	a,(OFST-4,sp)
1822  a805 a161          	cp	a,#97
1823  a807 2629          	jrne	L375
1824                     ; 1986 	  for(i=0; i<19; i++) {
1826  a809 4f            	clr	a
1827  a80a 6b08          	ld	(OFST+0,sp),a
1829  a80c               L575:
1830                     ; 1987 	    if (stored_devicename[i] != '\0') {
1832  a80c 5f            	clrw	x
1833  a80d 97            	ld	xl,a
1834  a80e 724d4000      	tnz	(_stored_devicename,x)
1835  a812 2603ccac7b    	jreq	L515
1836                     ; 1988               *pBuffer = (uint8_t)(stored_devicename[i]);
1838  a817 5f            	clrw	x
1839  a818 97            	ld	xl,a
1840  a819 d64000        	ld	a,(_stored_devicename,x)
1841  a81c 1e09          	ldw	x,(OFST+1,sp)
1842  a81e f7            	ld	(x),a
1843                     ; 1989               pBuffer++;
1845  a81f 5c            	incw	x
1846  a820 1f09          	ldw	(OFST+1,sp),x
1847                     ; 1990               nBytes++;
1849  a822 1e05          	ldw	x,(OFST-3,sp)
1850  a824 5c            	incw	x
1851  a825 1f05          	ldw	(OFST-3,sp),x
1854                     ; 1986 	  for(i=0; i<19; i++) {
1856  a827 0c08          	inc	(OFST+0,sp)
1860  a829 7b08          	ld	a,(OFST+0,sp)
1861  a82b a113          	cp	a,#19
1862  a82d 25dd          	jrult	L575
1863  a82f ccac7b        	jra	L515
1864  a832               L375:
1865                     ; 1996         else if (nParsedMode == 'b') {
1867  a832 a162          	cp	a,#98
1868  a834 2703cca94e    	jrne	L116
1869                     ; 2001           switch (nParsedNum)
1871  a839 7b07          	ld	a,(OFST-1,sp)
1873                     ; 2022 	    default: break;
1874  a83b a110          	cp	a,#16
1875  a83d 2503cca930    	jruge	L516
1876  a842 5f            	clrw	x
1877  a843 97            	ld	xl,a
1878  a844 58            	sllw	x
1879  a845 de9d65        	ldw	x,(L431,x)
1880  a848 fc            	jp	(x)
1881  a849               L533:
1882                     ; 2004 	    case 0:  emb_itoa(stored_hostaddr[3], OctetArray, 10, 3); break;
1884  a849 4b03          	push	#3
1885  a84b 4b0a          	push	#10
1886  a84d ae005c        	ldw	x,#_OctetArray
1887  a850 89            	pushw	x
1888  a851 c6402a        	ld	a,_stored_hostaddr+3
1892  a854 cca91d        	jp	LC001
1893  a857               L733:
1894                     ; 2005 	    case 1:  emb_itoa(stored_hostaddr[2], OctetArray, 10, 3); break;
1896  a857 4b03          	push	#3
1897  a859 4b0a          	push	#10
1898  a85b ae005c        	ldw	x,#_OctetArray
1899  a85e 89            	pushw	x
1900  a85f c64029        	ld	a,_stored_hostaddr+2
1904  a862 cca91d        	jp	LC001
1905  a865               L143:
1906                     ; 2006 	    case 2:  emb_itoa(stored_hostaddr[1], OctetArray, 10, 3); break;
1908  a865 4b03          	push	#3
1909  a867 4b0a          	push	#10
1910  a869 ae005c        	ldw	x,#_OctetArray
1911  a86c 89            	pushw	x
1912  a86d c64028        	ld	a,_stored_hostaddr+1
1916  a870 cca91d        	jp	LC001
1917  a873               L343:
1918                     ; 2007 	    case 3:  emb_itoa(stored_hostaddr[0], OctetArray, 10, 3); break;
1920  a873 4b03          	push	#3
1921  a875 4b0a          	push	#10
1922  a877 ae005c        	ldw	x,#_OctetArray
1923  a87a 89            	pushw	x
1924  a87b c64027        	ld	a,_stored_hostaddr
1928  a87e cca91d        	jp	LC001
1929  a881               L543:
1930                     ; 2008 	    case 4:  emb_itoa(stored_draddr[3],   OctetArray, 10, 3); break;
1932  a881 4b03          	push	#3
1933  a883 4b0a          	push	#10
1934  a885 ae005c        	ldw	x,#_OctetArray
1935  a888 89            	pushw	x
1936  a889 c64026        	ld	a,_stored_draddr+3
1940  a88c cca91d        	jp	LC001
1941  a88f               L743:
1942                     ; 2009 	    case 5:  emb_itoa(stored_draddr[2],   OctetArray, 10, 3); break;
1944  a88f 4b03          	push	#3
1945  a891 4b0a          	push	#10
1946  a893 ae005c        	ldw	x,#_OctetArray
1947  a896 89            	pushw	x
1948  a897 c64025        	ld	a,_stored_draddr+2
1952  a89a cca91d        	jp	LC001
1953  a89d               L153:
1954                     ; 2010 	    case 6:  emb_itoa(stored_draddr[1],   OctetArray, 10, 3); break;
1956  a89d 4b03          	push	#3
1957  a89f 4b0a          	push	#10
1958  a8a1 ae005c        	ldw	x,#_OctetArray
1959  a8a4 89            	pushw	x
1960  a8a5 c64024        	ld	a,_stored_draddr+1
1964  a8a8 2073          	jp	LC001
1965  a8aa               L353:
1966                     ; 2011 	    case 7:  emb_itoa(stored_draddr[0],   OctetArray, 10, 3); break;
1968  a8aa 4b03          	push	#3
1969  a8ac 4b0a          	push	#10
1970  a8ae ae005c        	ldw	x,#_OctetArray
1971  a8b1 89            	pushw	x
1972  a8b2 c64023        	ld	a,_stored_draddr
1976  a8b5 2066          	jp	LC001
1977  a8b7               L553:
1978                     ; 2012 	    case 8:  emb_itoa(stored_netmask[3],  OctetArray, 10, 3); break;
1980  a8b7 4b03          	push	#3
1981  a8b9 4b0a          	push	#10
1982  a8bb ae005c        	ldw	x,#_OctetArray
1983  a8be 89            	pushw	x
1984  a8bf c64022        	ld	a,_stored_netmask+3
1988  a8c2 2059          	jp	LC001
1989  a8c4               L753:
1990                     ; 2013 	    case 9:  emb_itoa(stored_netmask[2],  OctetArray, 10, 3); break;
1992  a8c4 4b03          	push	#3
1993  a8c6 4b0a          	push	#10
1994  a8c8 ae005c        	ldw	x,#_OctetArray
1995  a8cb 89            	pushw	x
1996  a8cc c64021        	ld	a,_stored_netmask+2
2000  a8cf 204c          	jp	LC001
2001  a8d1               L163:
2002                     ; 2014 	    case 10: emb_itoa(stored_netmask[1],  OctetArray, 10, 3); break;
2004  a8d1 4b03          	push	#3
2005  a8d3 4b0a          	push	#10
2006  a8d5 ae005c        	ldw	x,#_OctetArray
2007  a8d8 89            	pushw	x
2008  a8d9 c64020        	ld	a,_stored_netmask+1
2012  a8dc 203f          	jp	LC001
2013  a8de               L363:
2014                     ; 2015 	    case 11: emb_itoa(stored_netmask[0],  OctetArray, 10, 3); break;
2016  a8de 4b03          	push	#3
2017  a8e0 4b0a          	push	#10
2018  a8e2 ae005c        	ldw	x,#_OctetArray
2019  a8e5 89            	pushw	x
2020  a8e6 c6401f        	ld	a,_stored_netmask
2024  a8e9 2032          	jp	LC001
2025  a8eb               L563:
2026                     ; 2017 	    case 12: emb_itoa(stored_mqttserveraddr[3], OctetArray, 10, 3); break;
2028  a8eb 4b03          	push	#3
2029  a8ed 4b0a          	push	#10
2030  a8ef ae005c        	ldw	x,#_OctetArray
2031  a8f2 89            	pushw	x
2032  a8f3 c64034        	ld	a,_stored_mqttserveraddr+3
2036  a8f6 2025          	jp	LC001
2037  a8f8               L763:
2038                     ; 2018 	    case 13: emb_itoa(stored_mqttserveraddr[2], OctetArray, 10, 3); break;
2040  a8f8 4b03          	push	#3
2041  a8fa 4b0a          	push	#10
2042  a8fc ae005c        	ldw	x,#_OctetArray
2043  a8ff 89            	pushw	x
2044  a900 c64033        	ld	a,_stored_mqttserveraddr+2
2048  a903 2018          	jp	LC001
2049  a905               L173:
2050                     ; 2019 	    case 14: emb_itoa(stored_mqttserveraddr[1], OctetArray, 10, 3); break;
2052  a905 4b03          	push	#3
2053  a907 4b0a          	push	#10
2054  a909 ae005c        	ldw	x,#_OctetArray
2055  a90c 89            	pushw	x
2056  a90d c64032        	ld	a,_stored_mqttserveraddr+1
2060  a910 200b          	jp	LC001
2061  a912               L373:
2062                     ; 2020 	    case 15: emb_itoa(stored_mqttserveraddr[0], OctetArray, 10, 3); break;
2064  a912 4b03          	push	#3
2065  a914 4b0a          	push	#10
2066  a916 ae005c        	ldw	x,#_OctetArray
2067  a919 89            	pushw	x
2068  a91a c64031        	ld	a,_stored_mqttserveraddr
2070  a91d               LC001:
2071  a91d b703          	ld	c_lreg+3,a
2072  a91f 3f02          	clr	c_lreg+2
2073  a921 3f01          	clr	c_lreg+1
2074  a923 3f00          	clr	c_lreg
2075  a925 be02          	ldw	x,c_lreg+2
2076  a927 89            	pushw	x
2077  a928 be00          	ldw	x,c_lreg
2078  a92a 89            	pushw	x
2079  a92b cda4d6        	call	_emb_itoa
2080  a92e 5b08          	addw	sp,#8
2083                     ; 2022 	    default: break;
2085  a930               L516:
2086                     ; 2026 	  for(i=0; i<3; i++) {
2088  a930 4f            	clr	a
2089  a931 6b08          	ld	(OFST+0,sp),a
2091  a933               L716:
2092                     ; 2027 	    *pBuffer = (uint8_t)OctetArray[i];
2094  a933 5f            	clrw	x
2095  a934 97            	ld	xl,a
2096  a935 d6005c        	ld	a,(_OctetArray,x)
2097  a938 1e09          	ldw	x,(OFST+1,sp)
2098  a93a f7            	ld	(x),a
2099                     ; 2028             pBuffer++;
2101  a93b 5c            	incw	x
2102  a93c 1f09          	ldw	(OFST+1,sp),x
2103                     ; 2026 	  for(i=0; i<3; i++) {
2105  a93e 0c08          	inc	(OFST+0,sp)
2109  a940 7b08          	ld	a,(OFST+0,sp)
2110  a942 a103          	cp	a,#3
2111  a944 25ed          	jrult	L716
2112                     ; 2030 	  nBytes += 3;
2114  a946 1e05          	ldw	x,(OFST-3,sp)
2115  a948 1c0003        	addw	x,#3
2117  a94b ccac79        	jp	LC006
2118  a94e               L116:
2119                     ; 2033         else if (nParsedMode == 'c') {
2121  a94e a163          	cp	a,#99
2122  a950 2648          	jrne	L726
2123                     ; 2042 	  if (nParsedNum == 0) emb_itoa(stored_port, OctetArray, 10, 5);
2125  a952 7b07          	ld	a,(OFST-1,sp)
2126  a954 260d          	jrne	L136
2129  a956 4b05          	push	#5
2130  a958 4b0a          	push	#10
2131  a95a ae005c        	ldw	x,#_OctetArray
2132  a95d 89            	pushw	x
2133  a95e ce401d        	ldw	x,_stored_port
2137  a961 200b          	jra	L336
2138  a963               L136:
2139                     ; 2044 	  else emb_itoa(stored_mqttport, OctetArray, 10, 5);
2141  a963 4b05          	push	#5
2142  a965 4b0a          	push	#10
2143  a967 ae005c        	ldw	x,#_OctetArray
2144  a96a 89            	pushw	x
2145  a96b ce402f        	ldw	x,_stored_mqttport
2148  a96e               L336:
2149  a96e cdfab4        	call	c_uitolx
2150  a971 be02          	ldw	x,c_lreg+2
2151  a973 89            	pushw	x
2152  a974 be00          	ldw	x,c_lreg
2153  a976 89            	pushw	x
2154  a977 cda4d6        	call	_emb_itoa
2155  a97a 5b08          	addw	sp,#8
2156                     ; 2048 	  for(i=0; i<5; i++) {
2158  a97c 4f            	clr	a
2159  a97d 6b08          	ld	(OFST+0,sp),a
2161  a97f               L536:
2162                     ; 2049             *pBuffer = (uint8_t)OctetArray[i];
2164  a97f 5f            	clrw	x
2165  a980 97            	ld	xl,a
2166  a981 d6005c        	ld	a,(_OctetArray,x)
2167  a984 1e09          	ldw	x,(OFST+1,sp)
2168  a986 f7            	ld	(x),a
2169                     ; 2050             pBuffer++;
2171  a987 5c            	incw	x
2172  a988 1f09          	ldw	(OFST+1,sp),x
2173                     ; 2048 	  for(i=0; i<5; i++) {
2175  a98a 0c08          	inc	(OFST+0,sp)
2179  a98c 7b08          	ld	a,(OFST+0,sp)
2180  a98e a105          	cp	a,#5
2181  a990 25ed          	jrult	L536
2182                     ; 2052 	  nBytes += 5;
2184  a992 1e05          	ldw	x,(OFST-3,sp)
2185  a994 1c0005        	addw	x,#5
2187  a997 ccac79        	jp	LC006
2188  a99a               L726:
2189                     ; 2055         else if (nParsedMode == 'd') {
2191  a99a a164          	cp	a,#100
2192  a99c 266a          	jrne	L546
2193                     ; 2060 	  if (nParsedNum == 0) { OctetArray[0] = mac_string[0]; OctetArray[1] = mac_string[1]; }
2195  a99e 7b07          	ld	a,(OFST-1,sp)
2196  a9a0 260a          	jrne	L746
2199  a9a2 55010c005c    	mov	_OctetArray,_mac_string
2202  a9a7 55010d005d    	mov	_OctetArray+1,_mac_string+1
2203  a9ac               L746:
2204                     ; 2061 	  if (nParsedNum == 1) { OctetArray[0] = mac_string[2]; OctetArray[1] = mac_string[3]; }
2206  a9ac a101          	cp	a,#1
2207  a9ae 260a          	jrne	L156
2210  a9b0 55010e005c    	mov	_OctetArray,_mac_string+2
2213  a9b5 55010f005d    	mov	_OctetArray+1,_mac_string+3
2214  a9ba               L156:
2215                     ; 2062 	  if (nParsedNum == 2) { OctetArray[0] = mac_string[4]; OctetArray[1] = mac_string[5]; }
2217  a9ba a102          	cp	a,#2
2218  a9bc 260a          	jrne	L356
2221  a9be 550110005c    	mov	_OctetArray,_mac_string+4
2224  a9c3 550111005d    	mov	_OctetArray+1,_mac_string+5
2225  a9c8               L356:
2226                     ; 2063 	  if (nParsedNum == 3) { OctetArray[0] = mac_string[6]; OctetArray[1] = mac_string[7]; }
2228  a9c8 a103          	cp	a,#3
2229  a9ca 260a          	jrne	L556
2232  a9cc 550112005c    	mov	_OctetArray,_mac_string+6
2235  a9d1 550113005d    	mov	_OctetArray+1,_mac_string+7
2236  a9d6               L556:
2237                     ; 2064 	  if (nParsedNum == 4) { OctetArray[0] = mac_string[8]; OctetArray[1] = mac_string[9]; }
2239  a9d6 a104          	cp	a,#4
2240  a9d8 260a          	jrne	L756
2243  a9da 550114005c    	mov	_OctetArray,_mac_string+8
2246  a9df 550115005d    	mov	_OctetArray+1,_mac_string+9
2247  a9e4               L756:
2248                     ; 2065 	  if (nParsedNum == 5) { OctetArray[0] = mac_string[10]; OctetArray[1] = mac_string[11]; }
2250  a9e4 a105          	cp	a,#5
2251  a9e6 260a          	jrne	L166
2254  a9e8 550116005c    	mov	_OctetArray,_mac_string+10
2257  a9ed 550117005d    	mov	_OctetArray+1,_mac_string+11
2258  a9f2               L166:
2259                     ; 2067           *pBuffer = OctetArray[0];
2261  a9f2 1e09          	ldw	x,(OFST+1,sp)
2262  a9f4 c6005c        	ld	a,_OctetArray
2263  a9f7 f7            	ld	(x),a
2264                     ; 2068           pBuffer++;
2266  a9f8 5c            	incw	x
2267  a9f9 1f09          	ldw	(OFST+1,sp),x
2268                     ; 2069           nBytes++;
2270  a9fb 1e05          	ldw	x,(OFST-3,sp)
2271  a9fd 5c            	incw	x
2272  a9fe 1f05          	ldw	(OFST-3,sp),x
2274                     ; 2071           *pBuffer = OctetArray[1];
2276  aa00 c6005d        	ld	a,_OctetArray+1
2277  aa03 1e09          	ldw	x,(OFST+1,sp)
2278                     ; 2072           pBuffer++;
2279                     ; 2073           nBytes++;
2281  aa05 ccab94        	jp	L1201
2282  aa08               L546:
2283                     ; 2141         else if (nParsedMode == 'e') {
2285  aa08 a165          	cp	a,#101
2286  aa0a 2677          	jrne	L566
2287                     ; 2142           switch (nParsedNum)
2289  aa0c 7b07          	ld	a,(OFST-1,sp)
2291                     ; 2149 	    case 29:  emb_itoa(TRANSMIT_counter, OctetArray, 10, 10); break;
2292  aa0e a01a          	sub	a,#26
2293  aa10 270b          	jreq	L773
2294  aa12 4a            	dec	a
2295  aa13 2719          	jreq	L104
2296  aa15 4a            	dec	a
2297  aa16 2727          	jreq	L304
2298  aa18 4a            	dec	a
2299  aa19 2735          	jreq	L504
2300  aa1b 2048          	jra	L176
2301  aa1d               L773:
2302                     ; 2146 	    case 26:  emb_itoa(second_counter, OctetArray, 10, 10); break;
2304  aa1d 4b0a          	push	#10
2305  aa1f 4b0a          	push	#10
2306  aa21 ae005c        	ldw	x,#_OctetArray
2307  aa24 89            	pushw	x
2308  aa25 ce029e        	ldw	x,_second_counter+2
2309  aa28 89            	pushw	x
2310  aa29 ce029c        	ldw	x,_second_counter
2314  aa2c 2031          	jp	LC002
2315  aa2e               L104:
2316                     ; 2147 	    case 27:  emb_itoa(RXERIF_counter, OctetArray, 10, 10); break;
2318  aa2e 4b0a          	push	#10
2319  aa30 4b0a          	push	#10
2320  aa32 ae005c        	ldw	x,#_OctetArray
2321  aa35 89            	pushw	x
2322  aa36 ce0071        	ldw	x,_RXERIF_counter+2
2323  aa39 89            	pushw	x
2324  aa3a ce006f        	ldw	x,_RXERIF_counter
2328  aa3d 2020          	jp	LC002
2329  aa3f               L304:
2330                     ; 2148 	    case 28:  emb_itoa(TXERIF_counter, OctetArray, 10, 10); break;
2332  aa3f 4b0a          	push	#10
2333  aa41 4b0a          	push	#10
2334  aa43 ae005c        	ldw	x,#_OctetArray
2335  aa46 89            	pushw	x
2336  aa47 ce006d        	ldw	x,_TXERIF_counter+2
2337  aa4a 89            	pushw	x
2338  aa4b ce006b        	ldw	x,_TXERIF_counter
2342  aa4e 200f          	jp	LC002
2343  aa50               L504:
2344                     ; 2149 	    case 29:  emb_itoa(TRANSMIT_counter, OctetArray, 10, 10); break;
2346  aa50 4b0a          	push	#10
2347  aa52 4b0a          	push	#10
2348  aa54 ae005c        	ldw	x,#_OctetArray
2349  aa57 89            	pushw	x
2350  aa58 ce0069        	ldw	x,_TRANSMIT_counter+2
2351  aa5b 89            	pushw	x
2352  aa5c ce0067        	ldw	x,_TRANSMIT_counter
2354  aa5f               LC002:
2355  aa5f 89            	pushw	x
2356  aa60 cda4d6        	call	_emb_itoa
2357  aa63 5b08          	addw	sp,#8
2360  aa65               L176:
2361                     ; 2151 	  for (i=0; i<10; i++) {
2363  aa65 4f            	clr	a
2364  aa66 6b08          	ld	(OFST+0,sp),a
2366  aa68               L376:
2367                     ; 2152             *pBuffer = OctetArray[i];
2369  aa68 5f            	clrw	x
2370  aa69 97            	ld	xl,a
2371  aa6a d6005c        	ld	a,(_OctetArray,x)
2372  aa6d 1e09          	ldw	x,(OFST+1,sp)
2373  aa6f f7            	ld	(x),a
2374                     ; 2153             pBuffer++;
2376  aa70 5c            	incw	x
2377  aa71 1f09          	ldw	(OFST+1,sp),x
2378                     ; 2151 	  for (i=0; i<10; i++) {
2380  aa73 0c08          	inc	(OFST+0,sp)
2384  aa75 7b08          	ld	a,(OFST+0,sp)
2385  aa77 a10a          	cp	a,#10
2386  aa79 25ed          	jrult	L376
2387                     ; 2155 	  nBytes += 10;
2389  aa7b 1e05          	ldw	x,(OFST-3,sp)
2390  aa7d 1c000a        	addw	x,#10
2392  aa80 ccac79        	jp	LC006
2393  aa83               L566:
2394                     ; 2159         else if (nParsedMode == 'f') {
2396  aa83 a166          	cp	a,#102
2397  aa85 263d          	jrne	L307
2398                     ; 2174 	  for(i=0; i<16; i++) {
2400  aa87 4f            	clr	a
2401  aa88 6b08          	ld	(OFST+0,sp),a
2403  aa8a               L507:
2404                     ; 2175             if (i > 7) {
2406  aa8a a108          	cp	a,#8
2407  aa8c 251b          	jrult	L317
2408                     ; 2177               j = GpioGetPin(i);
2410  aa8e cdbb88        	call	_GpioGetPin
2412  aa91 6b03          	ld	(OFST-5,sp),a
2414                     ; 2178               if (invert_input == 0x00) *pBuffer = (uint8_t)(j + '0');
2416  aa93 725d0165      	tnz	_invert_input
2419  aa97 2713          	jreq	LC010
2420                     ; 2180                 if (j == 0) *pBuffer = (uint8_t)('1'); 
2422  aa99 7b03          	ld	a,(OFST-5,sp)
2423  aa9b 2606          	jrne	L127
2426  aa9d 1e09          	ldw	x,(OFST+1,sp)
2427  aa9f a631          	ld	a,#49
2429  aaa1 200d          	jra	L527
2430  aaa3               L127:
2431                     ; 2181                 else *pBuffer = (uint8_t)('0');
2433  aaa3 1e09          	ldw	x,(OFST+1,sp)
2434  aaa5 a630          	ld	a,#48
2435                     ; 2183               pBuffer++;
2437  aaa7 2007          	jra	L527
2438  aaa9               L317:
2439                     ; 2187               *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
2441  aaa9 cdbb88        	call	_GpioGetPin
2443  aaac               LC010:
2445  aaac ab30          	add	a,#48
2446  aaae 1e09          	ldw	x,(OFST+1,sp)
2447                     ; 2188               pBuffer++;
2449  aab0               L527:
2450  aab0 f7            	ld	(x),a
2452  aab1 5c            	incw	x
2453  aab2 1f09          	ldw	(OFST+1,sp),x
2454                     ; 2174 	  for(i=0; i<16; i++) {
2456  aab4 0c08          	inc	(OFST+0,sp)
2460  aab6 7b08          	ld	a,(OFST+0,sp)
2461  aab8 a110          	cp	a,#16
2462  aaba 25ce          	jrult	L507
2463                     ; 2191 	  nBytes += 16;
2465  aabc 1e05          	ldw	x,(OFST-3,sp)
2466  aabe 1c0010        	addw	x,#16
2468  aac1 ccac79        	jp	LC006
2469  aac4               L307:
2470                     ; 2210 else if (nParsedMode == 'g') {
2472  aac4 a167          	cp	a,#103
2473  aac6 261e          	jrne	L137
2474                     ; 2223 	  for(i = 0; i < 6; i++) {
2476  aac8 4f            	clr	a
2477  aac9 6b08          	ld	(OFST+0,sp),a
2479  aacb               L337:
2480                     ; 2224             *pBuffer = stored_config_settings[i];
2482  aacb 5f            	clrw	x
2483  aacc 97            	ld	xl,a
2484  aacd d6404c        	ld	a,(_stored_config_settings,x)
2485  aad0 1e09          	ldw	x,(OFST+1,sp)
2486  aad2 f7            	ld	(x),a
2487                     ; 2225             pBuffer++;
2489  aad3 5c            	incw	x
2490  aad4 1f09          	ldw	(OFST+1,sp),x
2491                     ; 2223 	  for(i = 0; i < 6; i++) {
2493  aad6 0c08          	inc	(OFST+0,sp)
2497  aad8 7b08          	ld	a,(OFST+0,sp)
2498  aada a106          	cp	a,#6
2499  aadc 25ed          	jrult	L337
2500                     ; 2227           nBytes += 6;
2502  aade 1e05          	ldw	x,(OFST-3,sp)
2503  aae0 1c0006        	addw	x,#6
2505  aae3 ccac79        	jp	LC006
2506  aae6               L137:
2507                     ; 2231         else if (nParsedMode == 'l') {
2509  aae6 a16c          	cp	a,#108
2510  aae8 2629          	jrne	L347
2511                     ; 2234           for(i=0; i<10; i++) {
2513  aaea 4f            	clr	a
2514  aaeb 6b08          	ld	(OFST+0,sp),a
2516  aaed               L547:
2517                     ; 2235 	    if (stored_mqtt_username[i] != '\0') {
2519  aaed 5f            	clrw	x
2520  aaee 97            	ld	xl,a
2521  aaef 724d4035      	tnz	(_stored_mqtt_username,x)
2522  aaf3 2603ccac7b    	jreq	L515
2523                     ; 2236               *pBuffer = (uint8_t)(stored_mqtt_username[i]);
2525  aaf8 5f            	clrw	x
2526  aaf9 97            	ld	xl,a
2527  aafa d64035        	ld	a,(_stored_mqtt_username,x)
2528  aafd 1e09          	ldw	x,(OFST+1,sp)
2529  aaff f7            	ld	(x),a
2530                     ; 2237               pBuffer++;
2532  ab00 5c            	incw	x
2533  ab01 1f09          	ldw	(OFST+1,sp),x
2534                     ; 2238               nBytes++;
2536  ab03 1e05          	ldw	x,(OFST-3,sp)
2537  ab05 5c            	incw	x
2538  ab06 1f05          	ldw	(OFST-3,sp),x
2541                     ; 2234           for(i=0; i<10; i++) {
2543  ab08 0c08          	inc	(OFST+0,sp)
2547  ab0a 7b08          	ld	a,(OFST+0,sp)
2548  ab0c a10a          	cp	a,#10
2549  ab0e 25dd          	jrult	L547
2550  ab10 ccac7b        	jra	L515
2551  ab13               L347:
2552                     ; 2244         else if (nParsedMode == 'm') {
2554  ab13 a16d          	cp	a,#109
2555  ab15 2626          	jrne	L167
2556                     ; 2247           for(i=0; i<10; i++) {
2558  ab17 4f            	clr	a
2559  ab18 6b08          	ld	(OFST+0,sp),a
2561  ab1a               L367:
2562                     ; 2248 	    if (stored_mqtt_password[i] != '\0') {
2564  ab1a 5f            	clrw	x
2565  ab1b 97            	ld	xl,a
2566  ab1c 724d4040      	tnz	(_stored_mqtt_password,x)
2567  ab20 27ee          	jreq	L515
2568                     ; 2249               *pBuffer = (uint8_t)(stored_mqtt_password[i]);
2570  ab22 5f            	clrw	x
2571  ab23 97            	ld	xl,a
2572  ab24 d64040        	ld	a,(_stored_mqtt_password,x)
2573  ab27 1e09          	ldw	x,(OFST+1,sp)
2574  ab29 f7            	ld	(x),a
2575                     ; 2250               pBuffer++;
2577  ab2a 5c            	incw	x
2578  ab2b 1f09          	ldw	(OFST+1,sp),x
2579                     ; 2251               nBytes++;
2581  ab2d 1e05          	ldw	x,(OFST-3,sp)
2582  ab2f 5c            	incw	x
2583  ab30 1f05          	ldw	(OFST-3,sp),x
2586                     ; 2247           for(i=0; i<10; i++) {
2588  ab32 0c08          	inc	(OFST+0,sp)
2592  ab34 7b08          	ld	a,(OFST+0,sp)
2593  ab36 a10a          	cp	a,#10
2594  ab38 25e0          	jrult	L367
2595  ab3a ccac7b        	jra	L515
2596  ab3d               L167:
2597                     ; 2257         else if (nParsedMode == 'n') {
2599  ab3d a16e          	cp	a,#110
2600  ab3f 2657          	jrne	L777
2601                     ; 2261 	  no_err = 0;
2603  ab41 0f08          	clr	(OFST+0,sp)
2605                     ; 2262           switch (nParsedNum)
2607  ab43 7b07          	ld	a,(OFST-1,sp)
2609                     ; 2284 	    default:
2609                     ; 2285 	      break;
2610  ab45 270e          	jreq	L704
2611  ab47 4a            	dec	a
2612  ab48 2712          	jreq	L114
2613  ab4a 4a            	dec	a
2614  ab4b 2716          	jreq	L314
2615  ab4d 4a            	dec	a
2616  ab4e 271a          	jreq	L514
2617  ab50 4a            	dec	a
2618  ab51 271f          	jreq	L714
2619  ab53 2030          	jra	L3001
2620  ab55               L704:
2621                     ; 2264 	    case 0:
2621                     ; 2265               // Connection request status
2621                     ; 2266 	      if (mqtt_start_status & MQTT_START_CONNECTIONS_GOOD) no_err = 1;
2623  ab55 720900a72b    	btjf	_mqtt_start_status,#4,L3001
2625  ab5a 2013          	jp	LC004
2626  ab5c               L114:
2627                     ; 2268 	    case 1:
2627                     ; 2269 	      // ARP request status
2627                     ; 2270 	      if (mqtt_start_status & MQTT_START_ARP_REQUEST_GOOD) no_err = 1;
2629  ab5c 720b00a724    	btjf	_mqtt_start_status,#5,L3001
2631  ab61 200c          	jp	LC004
2632  ab63               L314:
2633                     ; 2272 	    case 2:
2633                     ; 2273 	      // TCP connection status
2633                     ; 2274 	      if (mqtt_start_status & MQTT_START_TCP_CONNECT_GOOD) no_err = 1;
2635  ab63 720d00a71d    	btjf	_mqtt_start_status,#6,L3001
2637  ab68 2005          	jp	LC004
2638  ab6a               L514:
2639                     ; 2276 	    case 3:
2639                     ; 2277 	      // MQTT Connection status 1
2639                     ; 2278 	      if (mqtt_start_status & MQTT_START_MQTT_CONNECT_GOOD) no_err = 1;
2641  ab6a 720f00a716    	btjf	_mqtt_start_status,#7,L3001
2644  ab6f               LC004:
2648  ab6f 4c            	inc	a
2649  ab70 2011          	jp	LC003
2650  ab72               L714:
2651                     ; 2280 	    case 4:
2651                     ; 2281 	      // MQTT start complete with no errors
2651                     ; 2282 	      if ((MQTT_error_status == 1) && ((mqtt_start_status & 0xf0) == 0xf0) ) no_err = 1;
2653  ab72 c6029b        	ld	a,_MQTT_error_status
2654  ab75 4a            	dec	a
2655  ab76 260d          	jrne	L3001
2657  ab78 c600a7        	ld	a,_mqtt_start_status
2658  ab7b a4f0          	and	a,#240
2659  ab7d a1f0          	cp	a,#240
2660  ab7f 2604          	jrne	L3001
2663  ab81 a601          	ld	a,#1
2664  ab83               LC003:
2665  ab83 6b08          	ld	(OFST+0,sp),a
2667                     ; 2284 	    default:
2667                     ; 2285 	      break;
2669  ab85               L3001:
2670                     ; 2287 	  if (no_err == 1) *pBuffer = '1'; // Paint a green square
2672  ab85 7b08          	ld	a,(OFST+0,sp)
2673  ab87 4a            	dec	a
2674  ab88 2606          	jrne	L7101
2677  ab8a 1e09          	ldw	x,(OFST+1,sp)
2678  ab8c a631          	ld	a,#49
2680  ab8e 2004          	jra	L1201
2681  ab90               L7101:
2682                     ; 2288 	  else *pBuffer = '0'; // Paint a red square
2685  ab90 1e09          	ldw	x,(OFST+1,sp)
2686  ab92 a630          	ld	a,#48
2687  ab94               L1201:
2688  ab94 f7            	ld	(x),a
2689                     ; 2289           pBuffer++;
2690                     ; 2290           nBytes++;
2692  ab95 ccac73        	jp	LC007
2693  ab98               L777:
2694                     ; 2294         else if (nParsedMode == 'y') {
2696  ab98 a179          	cp	a,#121
2697  ab9a 269e          	jrne	L515
2698                     ; 2339 	  i = insertion_flag[0];
2700  ab9c c60017        	ld	a,_insertion_flag
2701  ab9f 6b08          	ld	(OFST+0,sp),a
2703                     ; 2340 	  insertion_flag[1] = nParsedMode;
2705  aba1 7b04          	ld	a,(OFST-4,sp)
2706  aba3 c70018        	ld	_insertion_flag+1,a
2707                     ; 2341 	  insertion_flag[2] = nParsedNum;
2709  aba6 7b07          	ld	a,(OFST-1,sp)
2710  aba8 c70019        	ld	_insertion_flag+2,a
2711                     ; 2343           switch (nParsedNum)
2714                     ; 2391 	    default: break;
2715  abab 2718          	jreq	L324
2716  abad 4a            	dec	a
2717  abae 272a          	jreq	L524
2718  abb0 4a            	dec	a
2719  abb1 273c          	jreq	L724
2720  abb3 4a            	dec	a
2721  abb4 274e          	jreq	L134
2722  abb6 4a            	dec	a
2723  abb7 2760          	jreq	L334
2724  abb9 4a            	dec	a
2725  abba 2772          	jreq	L534
2726  abbc 4a            	dec	a
2727  abbd 2603ccac43    	jreq	L734
2728  abc2 ccac71        	jra	LC008
2729  abc5               L324:
2730                     ; 2345 	    case 0:
2730                     ; 2346 	      // %y00 replaced with string 
2730                     ; 2347 	      // page_string00[] = "pattern='[0-9]{3}' title='Enter 000 to 255' maxlength='3'";
2730                     ; 2348               *pBuffer = (uint8_t)page_string00[i];
2732  abc5 7b08          	ld	a,(OFST+0,sp)
2733  abc7 5f            	clrw	x
2734  abc8 97            	ld	xl,a
2735  abc9 d69aea        	ld	a,(L32_page_string00,x)
2736  abcc 1e09          	ldw	x,(OFST+1,sp)
2737  abce f7            	ld	(x),a
2738                     ; 2349 	      insertion_flag[0]++;
2740  abcf 725c0017      	inc	_insertion_flag
2741                     ; 2350 	      if (insertion_flag[0] == page_string00_len) insertion_flag[0] = 0;
2743  abd3 c60017        	ld	a,_insertion_flag
2744  abd6 a13f          	cp	a,#63
2746  abd8 207c          	jp	LC005
2747  abda               L524:
2748                     ; 2352 	    case 1:
2748                     ; 2353 	      // %y01 replaced with string 
2748                     ; 2354               // page_string01[] = "pattern='[0-9a-f]{2}' title='Enter 00 to ff' maxlength='2'";
2748                     ; 2355               *pBuffer = (uint8_t)page_string01[i];
2750  abda 7b08          	ld	a,(OFST+0,sp)
2751  abdc 5f            	clrw	x
2752  abdd 97            	ld	xl,a
2753  abde d69b2c        	ld	a,(L13_page_string01,x)
2754  abe1 1e09          	ldw	x,(OFST+1,sp)
2755  abe3 f7            	ld	(x),a
2756                     ; 2356 	      insertion_flag[0]++;
2758  abe4 725c0017      	inc	_insertion_flag
2759                     ; 2357 	      if (insertion_flag[0] == page_string01_len) insertion_flag[0] = 0;
2761  abe8 c60017        	ld	a,_insertion_flag
2762  abeb a140          	cp	a,#64
2764  abed 2067          	jp	LC005
2765  abef               L724:
2766                     ; 2359 	    case 2:
2766                     ; 2360 	      // %y02 replaced with string 
2766                     ; 2361               // page_string02[] = "<button title='Save first! This button will not save your changes'>";
2766                     ; 2362               *pBuffer = (uint8_t)page_string02[i];
2768  abef 7b08          	ld	a,(OFST+0,sp)
2769  abf1 5f            	clrw	x
2770  abf2 97            	ld	xl,a
2771  abf3 d69b6f        	ld	a,(L73_page_string02,x)
2772  abf6 1e09          	ldw	x,(OFST+1,sp)
2773  abf8 f7            	ld	(x),a
2774                     ; 2363 	      insertion_flag[0]++;
2776  abf9 725c0017      	inc	_insertion_flag
2777                     ; 2364 	      if (insertion_flag[0] == page_string02_len) insertion_flag[0] = 0;
2779  abfd c60017        	ld	a,_insertion_flag
2780  ac00 a152          	cp	a,#82
2782  ac02 2052          	jp	LC005
2783  ac04               L134:
2784                     ; 2366 	    case 3:
2784                     ; 2367 	      // %y03 replaced with string 
2784                     ; 2368               // page_string03[] = "<form style='display: inline' action='http://";
2784                     ; 2369               *pBuffer = (uint8_t)page_string03[i];
2786  ac04 7b08          	ld	a,(OFST+0,sp)
2787  ac06 5f            	clrw	x
2788  ac07 97            	ld	xl,a
2789  ac08 d69bc4        	ld	a,(L54_page_string03,x)
2790  ac0b 1e09          	ldw	x,(OFST+1,sp)
2791  ac0d f7            	ld	(x),a
2792                     ; 2370 	      insertion_flag[0]++;
2794  ac0e 725c0017      	inc	_insertion_flag
2795                     ; 2371 	      if (insertion_flag[0] == page_string03_len) insertion_flag[0] = 0;
2797  ac12 c60017        	ld	a,_insertion_flag
2798  ac15 a126          	cp	a,#38
2800  ac17 203d          	jp	LC005
2801  ac19               L334:
2802                     ; 2373 	    case 4:
2802                     ; 2374 	      // %y04 replaced with first header string 
2802                     ; 2375               *pBuffer = (uint8_t)page_string04[i];
2804  ac19 7b08          	ld	a,(OFST+0,sp)
2805  ac1b 5f            	clrw	x
2806  ac1c 97            	ld	xl,a
2807  ac1d d69bed        	ld	a,(L35_page_string04,x)
2808  ac20 1e09          	ldw	x,(OFST+1,sp)
2809  ac22 f7            	ld	(x),a
2810                     ; 2376 	      insertion_flag[0]++;
2812  ac23 725c0017      	inc	_insertion_flag
2813                     ; 2377 	      if (insertion_flag[0] == page_string04_len) insertion_flag[0] = 0;
2815  ac27 c60017        	ld	a,_insertion_flag
2816  ac2a a147          	cp	a,#71
2818  ac2c 2028          	jp	LC005
2819  ac2e               L534:
2820                     ; 2379 	    case 5:
2820                     ; 2380 	      // %y05 replaced with second header string 
2820                     ; 2381               *pBuffer = (uint8_t)page_string05[i];
2822  ac2e 7b08          	ld	a,(OFST+0,sp)
2823  ac30 5f            	clrw	x
2824  ac31 97            	ld	xl,a
2825  ac32 d69c37        	ld	a,(L16_page_string05,x)
2826  ac35 1e09          	ldw	x,(OFST+1,sp)
2827  ac37 f7            	ld	(x),a
2828                     ; 2382 	      insertion_flag[0]++;
2830  ac38 725c0017      	inc	_insertion_flag
2831                     ; 2383 	      if (insertion_flag[0] == page_string05_len) insertion_flag[0] = 0;
2833  ac3c c60017        	ld	a,_insertion_flag
2834  ac3f a1ed          	cp	a,#237
2836  ac41 2013          	jp	LC005
2837  ac43               L734:
2838                     ; 2385 	    case 6:
2838                     ; 2386 	      // %y06 replaced with third header string 
2838                     ; 2387               *pBuffer = (uint8_t)page_string06[i];
2840  ac43 7b08          	ld	a,(OFST+0,sp)
2841  ac45 5f            	clrw	x
2842  ac46 97            	ld	xl,a
2843  ac47 d69d27        	ld	a,(L76_page_string06,x)
2844  ac4a 1e09          	ldw	x,(OFST+1,sp)
2845  ac4c f7            	ld	(x),a
2846                     ; 2388 	      insertion_flag[0]++;
2848  ac4d 725c0017      	inc	_insertion_flag
2849                     ; 2389 	      if (insertion_flag[0] == page_string06_len) insertion_flag[0] = 0;
2851  ac51 c60017        	ld	a,_insertion_flag
2852  ac54 a13b          	cp	a,#59
2855  ac56               LC005:
2856  ac56 2619          	jrne	LC008
2863  ac58 725f0017      	clr	_insertion_flag
2864                     ; 2391 	    default: break;
2866                     ; 2393           pBuffer++;
2867                     ; 2394           nBytes++;
2868  ac5c 2013          	jp	LC008
2869  ac5e               L135:
2870                     ; 2402         *pBuffer = nByte;
2872  ac5e 1e09          	ldw	x,(OFST+1,sp)
2873  ac60 f7            	ld	(x),a
2874                     ; 2403         *ppData = *ppData + 1;
2876  ac61 1e0d          	ldw	x,(OFST+5,sp)
2877  ac63 9093          	ldw	y,x
2878  ac65 fe            	ldw	x,(x)
2879  ac66 5c            	incw	x
2880  ac67 90ff          	ldw	(y),x
2881                     ; 2404         *pDataLeft = *pDataLeft - 1;
2883  ac69 1e0f          	ldw	x,(OFST+7,sp)
2884  ac6b 9093          	ldw	y,x
2885  ac6d fe            	ldw	x,(x)
2886  ac6e 5a            	decw	x
2887  ac6f 90ff          	ldw	(y),x
2888                     ; 2405         pBuffer++;
2890  ac71               LC008:
2892  ac71 1e09          	ldw	x,(OFST+1,sp)
2893                     ; 2406         nBytes++;
2895  ac73               LC007:
2900  ac73 5c            	incw	x
2901  ac74 1f09          	ldw	(OFST+1,sp),x
2907  ac76 1e05          	ldw	x,(OFST-3,sp)
2908  ac78 5c            	incw	x
2909  ac79               LC006:
2910  ac79 1f05          	ldw	(OFST-3,sp),x
2912  ac7b               L515:
2913                     ; 1780   while (nBytes < nMaxBytes) {
2915  ac7b 1e05          	ldw	x,(OFST-3,sp)
2916  ac7d 1311          	cpw	x,(OFST+9,sp)
2917  ac7f 2403cca6ae    	jrult	L315
2918  ac84               L715:
2919                     ; 2411   return nBytes;
2921  ac84 1e05          	ldw	x,(OFST-3,sp)
2924  ac86 5b0a          	addw	sp,#10
2925  ac88 81            	ret	
2957                     ; 2415 void HttpDInit()
2957                     ; 2416 {
2958                     .text:	section	.text,new
2959  ac89               _HttpDInit:
2963                     ; 2418   uip_listen(htons(Port_Httpd));
2965  ac89 ce0103        	ldw	x,_Port_Httpd
2966  ac8c cdf184        	call	_htons
2968  ac8f cde80f        	call	_uip_listen
2970                     ; 2419   current_webpage = WEBPAGE_IOCONTROL;
2972  ac92 725f001a      	clr	_current_webpage
2973                     ; 2422   insertion_flag[0] = 0;
2975  ac96 725f0017      	clr	_insertion_flag
2976                     ; 2423   insertion_flag[1] = 0;
2978  ac9a 725f0018      	clr	_insertion_flag+1
2979                     ; 2424   insertion_flag[2] = 0;
2981  ac9e 725f0019      	clr	_insertion_flag+2
2982                     ; 2427   saved_nstate = STATE_NULL;
2984  aca2 357f005b      	mov	_saved_nstate,#127
2985                     ; 2428   saved_parsestate = PARSE_CMD;
2987  aca6 725f005a      	clr	_saved_parsestate
2988                     ; 2429   saved_nparseleft = 0;
2990  acaa 725f0059      	clr	_saved_nparseleft
2991                     ; 2430   clear_saved_postpartial_all();
2994                     ; 2431 }
2997  acae ccb761        	jp	_clear_saved_postpartial_all
3189                     	switch	.const
3190  9d85               L622:
3191  9d85 b55d          	dc.w	L1701
3192  9d87 b564          	dc.w	L3701
3193  9d89 b56b          	dc.w	L5701
3194  9d8b b572          	dc.w	L7701
3195  9d8d b579          	dc.w	L1011
3196  9d8f b580          	dc.w	L3011
3197  9d91 b587          	dc.w	L5011
3198  9d93 b58e          	dc.w	L7011
3199  9d95 b595          	dc.w	L1111
3200  9d97 b59c          	dc.w	L3111
3201  9d99 b5a3          	dc.w	L5111
3202  9d9b b5aa          	dc.w	L7111
3203  9d9d b5b1          	dc.w	L1211
3204  9d9f b5b8          	dc.w	L3211
3205  9da1 b5bf          	dc.w	L5211
3206  9da3 b5c6          	dc.w	L7211
3207                     ; 2434 void HttpDCall(uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
3207                     ; 2435 {
3208                     .text:	section	.text,new
3209  acb1               _HttpDCall:
3211  acb1 89            	pushw	x
3212  acb2 5204          	subw	sp,#4
3213       00000004      OFST:	set	4
3216                     ; 2439   i = 0;
3218  acb4 0f04          	clr	(OFST+0,sp)
3220                     ; 2441   if (uip_connected()) {
3222  acb6 720d02c455    	btjf	_uip_flags,#6,L5421
3223                     ; 2443     if (current_webpage == WEBPAGE_IOCONTROL) {
3225  acbb c6001a        	ld	a,_current_webpage
3226  acbe 260e          	jrne	L7421
3227                     ; 2444       pSocket->pData = g_HtmlPageIOControl;
3229  acc0 1e0b          	ldw	x,(OFST+7,sp)
3230  acc2 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
3231  acc6 ef01          	ldw	(1,x),y
3232                     ; 2445       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
3234  acc8 90ae0c06      	ldw	y,#3078
3236  accc 2034          	jp	LC013
3237  acce               L7421:
3238                     ; 2449     else if (current_webpage == WEBPAGE_CONFIGURATION) {
3240  acce a101          	cp	a,#1
3241  acd0 260e          	jrne	L3521
3242                     ; 2450       pSocket->pData = g_HtmlPageConfiguration;
3244  acd2 1e0b          	ldw	x,(OFST+7,sp)
3245  acd4 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
3246  acd8 ef01          	ldw	(1,x),y
3247                     ; 2451       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
3249  acda 90ae0c5c      	ldw	y,#3164
3251  acde 2022          	jp	LC013
3252  ace0               L3521:
3253                     ; 2466     else if (current_webpage == WEBPAGE_STATS) {
3255  ace0 a105          	cp	a,#5
3256  ace2 260e          	jrne	L7521
3257                     ; 2467       pSocket->pData = g_HtmlPageStats;
3259  ace4 1e0b          	ldw	x,(OFST+7,sp)
3260  ace6 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
3261  acea ef01          	ldw	(1,x),y
3262                     ; 2468       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
3264  acec 90ae0175      	ldw	y,#373
3266  acf0 2010          	jp	LC013
3267  acf2               L7521:
3268                     ; 2472     else if (current_webpage == WEBPAGE_RSTATE) {
3270  acf2 a106          	cp	a,#6
3271  acf4 260e          	jrne	L1521
3272                     ; 2473       pSocket->pData = g_HtmlPageRstate;
3274  acf6 1e0b          	ldw	x,(OFST+7,sp)
3275  acf8 90ae9a62      	ldw	y,#L12_g_HtmlPageRstate
3276  acfc ef01          	ldw	(1,x),y
3277                     ; 2474       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
3279  acfe 90ae0087      	ldw	y,#135
3280  ad02               LC013:
3281  ad02 ef03          	ldw	(3,x),y
3282  ad04               L1521:
3283                     ; 2477     pSocket->nState = STATE_CONNECTED;
3285  ad04 1e0b          	ldw	x,(OFST+7,sp)
3286                     ; 2478     pSocket->nPrevBytes = 0xFFFF;
3288  ad06 90aeffff      	ldw	y,#65535
3289  ad0a 7f            	clr	(x)
3290  ad0b ef0b          	ldw	(11,x),y
3292  ad0d ccade0        	jra	L452
3293  ad10               L5421:
3294                     ; 2487   else if (uip_newdata() || uip_acked()) {
3296  ad10 720202c408    	btjt	_uip_flags,#1,L1721
3298  ad15 720002c403cc  	btjf	_uip_flags,#0,L7621
3299  ad1d               L1721:
3300                     ; 2488     if (uip_acked()) {
3302  ad1d 720102c403cc  	btjt	_uip_flags,#0,L5511
3303                     ; 2491       goto senddata;
3305                     ; 2561     if (saved_nstate != STATE_NULL) {
3307  ad25 c6005b        	ld	a,_saved_nstate
3308  ad28 a17f          	cp	a,#127
3309  ad2a 2603ccadac    	jreq	L3231
3310                     ; 2567       pSocket->nState = saved_nstate;
3312  ad2f 1e0b          	ldw	x,(OFST+7,sp)
3313  ad31 f7            	ld	(x),a
3314                     ; 2574       pSocket->ParseState = saved_parsestate;
3316  ad32 c6005a        	ld	a,_saved_parsestate
3317  ad35 e70a          	ld	(10,x),a
3318                     ; 2578       pSocket->nParseLeft = saved_nparseleft;
3320  ad37 c60059        	ld	a,_saved_nparseleft
3321  ad3a e706          	ld	(6,x),a
3322                     ; 2580       pSocket->nNewlines = saved_newlines;
3324  ad3c c60028        	ld	a,_saved_newlines
3325  ad3f e705          	ld	(5,x),a
3326                     ; 2592       for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i];
3328  ad41 4f            	clr	a
3329  ad42 6b04          	ld	(OFST+0,sp),a
3331  ad44               L7721:
3334  ad44 5f            	clrw	x
3335  ad45 97            	ld	xl,a
3336  ad46 d60041        	ld	a,(_saved_postpartial,x)
3337  ad49 d70029        	ld	(_saved_postpartial_previous,x),a
3340  ad4c 0c04          	inc	(OFST+0,sp)
3344  ad4e 7b04          	ld	a,(OFST+0,sp)
3345  ad50 a118          	cp	a,#24
3346  ad52 25f0          	jrult	L7721
3347                     ; 2597       if (saved_nstate == STATE_PARSEPOST) {
3349  ad54 c6005b        	ld	a,_saved_nstate
3350  ad57 a10a          	cp	a,#10
3351  ad59 2651          	jrne	L3231
3352                     ; 2598         if (saved_parsestate == PARSE_CMD) {
3354  ad5b c6005a        	ld	a,_saved_parsestate
3355  ad5e 274c          	jreq	L3231
3357                     ; 2601         else if (saved_parsestate == PARSE_NUM10) {
3359  ad60 a101          	cp	a,#1
3360  ad62 2609          	jrne	L3131
3361                     ; 2603 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3363  ad64 1e0b          	ldw	x,(OFST+7,sp)
3364  ad66 c60029        	ld	a,_saved_postpartial_previous
3365  ad69 e708          	ld	(8,x),a
3367  ad6b 203f          	jra	L3231
3368  ad6d               L3131:
3369                     ; 2605         else if (saved_parsestate == PARSE_NUM1) {
3371  ad6d a102          	cp	a,#2
3372  ad6f 2615          	jrne	L7131
3373                     ; 2607 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3375  ad71 1e0b          	ldw	x,(OFST+7,sp)
3376  ad73 c60029        	ld	a,_saved_postpartial_previous
3377  ad76 e708          	ld	(8,x),a
3378                     ; 2608           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3380  ad78 c6002a        	ld	a,_saved_postpartial_previous+1
3381  ad7b 97            	ld	xl,a
3382  ad7c a60a          	ld	a,#10
3383  ad7e 42            	mul	x,a
3384  ad7f 9f            	ld	a,xl
3385  ad80 a0e0          	sub	a,#224
3386  ad82 1e0b          	ldw	x,(OFST+7,sp)
3388  ad84 2024          	jp	LC014
3389  ad86               L7131:
3390                     ; 2610         else if (saved_parsestate == PARSE_EQUAL || saved_parsestate == PARSE_VAL) {
3392  ad86 a103          	cp	a,#3
3393  ad88 2704          	jreq	L5231
3395  ad8a a104          	cp	a,#4
3396  ad8c 261e          	jrne	L3231
3397  ad8e               L5231:
3398                     ; 2612 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3400  ad8e 1e0b          	ldw	x,(OFST+7,sp)
3401  ad90 c60029        	ld	a,_saved_postpartial_previous
3402  ad93 e708          	ld	(8,x),a
3403                     ; 2613           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3405  ad95 c6002a        	ld	a,_saved_postpartial_previous+1
3406  ad98 97            	ld	xl,a
3407  ad99 a60a          	ld	a,#10
3408  ad9b 42            	mul	x,a
3409  ad9c 9f            	ld	a,xl
3410  ad9d 1e0b          	ldw	x,(OFST+7,sp)
3411  ad9f a0e0          	sub	a,#224
3412  ada1 e709          	ld	(9,x),a
3413                     ; 2614           pSocket->ParseNum += (uint8_t)(saved_postpartial_previous[2] - '0');
3415  ada3 c6002b        	ld	a,_saved_postpartial_previous+2
3416  ada6 a030          	sub	a,#48
3417  ada8 eb09          	add	a,(9,x)
3418  adaa               LC014:
3419  adaa e709          	ld	(9,x),a
3421  adac               L3231:
3422                     ; 2616 	else if (saved_parsestate == PARSE_DELIM) {
3424                     ; 2636     if (pSocket->nState == STATE_CONNECTED) {
3426  adac 1e0b          	ldw	x,(OFST+7,sp)
3427  adae f6            	ld	a,(x)
3428  adaf 2627          	jrne	L3331
3429                     ; 2637       if (nBytes == 0) return;
3431  adb1 1e09          	ldw	x,(OFST+5,sp)
3432  adb3 272b          	jreq	L452
3435                     ; 2638       if (*pBuffer == 'G') {
3437  adb5 1e05          	ldw	x,(OFST+1,sp)
3438  adb7 f6            	ld	a,(x)
3439  adb8 a147          	cp	a,#71
3440  adba 2606          	jrne	L7331
3441                     ; 2639         pSocket->nState = STATE_GET_G;
3443  adbc 1e0b          	ldw	x,(OFST+7,sp)
3444  adbe a601          	ld	a,#1
3446  adc0 2008          	jp	LC015
3447  adc2               L7331:
3448                     ; 2641       else if (*pBuffer == 'P') {
3450  adc2 a150          	cp	a,#80
3451  adc4 2605          	jrne	L1431
3452                     ; 2642         pSocket->nState = STATE_POST_P;
3454  adc6 1e0b          	ldw	x,(OFST+7,sp)
3455  adc8 a604          	ld	a,#4
3456  adca               LC015:
3457  adca f7            	ld	(x),a
3458  adcb               L1431:
3459                     ; 2644       nBytes--;
3461  adcb 1e09          	ldw	x,(OFST+5,sp)
3462  adcd 5a            	decw	x
3463  adce 1f09          	ldw	(OFST+5,sp),x
3464                     ; 2645       pBuffer++;
3466  add0 1e05          	ldw	x,(OFST+1,sp)
3467  add2 5c            	incw	x
3468  add3 1f05          	ldw	(OFST+1,sp),x
3469  add5 1e0b          	ldw	x,(OFST+7,sp)
3470  add7 f6            	ld	a,(x)
3471  add8               L3331:
3472                     ; 2648     if (pSocket->nState == STATE_GET_G) {
3474  add8 a101          	cp	a,#1
3475  adda 2620          	jrne	L5431
3476                     ; 2649       if (nBytes == 0) return;
3478  addc 1e09          	ldw	x,(OFST+5,sp)
3479  adde 2603          	jrne	L7431
3481  ade0               L452:
3484  ade0 5b06          	addw	sp,#6
3485  ade2 81            	ret	
3486  ade3               L7431:
3487                     ; 2650       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
3489  ade3 1e05          	ldw	x,(OFST+1,sp)
3490  ade5 f6            	ld	a,(x)
3491  ade6 a145          	cp	a,#69
3492  ade8 2605          	jrne	L1531
3495  adea 1e0b          	ldw	x,(OFST+7,sp)
3496  adec a602          	ld	a,#2
3497  adee f7            	ld	(x),a
3498  adef               L1531:
3499                     ; 2651       nBytes--;
3501  adef 1e09          	ldw	x,(OFST+5,sp)
3502  adf1 5a            	decw	x
3503  adf2 1f09          	ldw	(OFST+5,sp),x
3504                     ; 2652       pBuffer++;
3506  adf4 1e05          	ldw	x,(OFST+1,sp)
3507  adf6 5c            	incw	x
3508  adf7 1f05          	ldw	(OFST+1,sp),x
3509  adf9 1e0b          	ldw	x,(OFST+7,sp)
3510  adfb f6            	ld	a,(x)
3511  adfc               L5431:
3512                     ; 2655     if (pSocket->nState == STATE_GET_GE) {
3514  adfc a102          	cp	a,#2
3515  adfe 261d          	jrne	L3531
3516                     ; 2656       if (nBytes == 0) return;
3518  ae00 1e09          	ldw	x,(OFST+5,sp)
3519  ae02 27dc          	jreq	L452
3522                     ; 2657       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
3524  ae04 1e05          	ldw	x,(OFST+1,sp)
3525  ae06 f6            	ld	a,(x)
3526  ae07 a154          	cp	a,#84
3527  ae09 2605          	jrne	L7531
3530  ae0b 1e0b          	ldw	x,(OFST+7,sp)
3531  ae0d a603          	ld	a,#3
3532  ae0f f7            	ld	(x),a
3533  ae10               L7531:
3534                     ; 2658       nBytes--;
3536  ae10 1e09          	ldw	x,(OFST+5,sp)
3537  ae12 5a            	decw	x
3538  ae13 1f09          	ldw	(OFST+5,sp),x
3539                     ; 2659       pBuffer++;
3541  ae15 1e05          	ldw	x,(OFST+1,sp)
3542  ae17 5c            	incw	x
3543  ae18 1f05          	ldw	(OFST+1,sp),x
3544  ae1a 1e0b          	ldw	x,(OFST+7,sp)
3545  ae1c f6            	ld	a,(x)
3546  ae1d               L3531:
3547                     ; 2662     if (pSocket->nState == STATE_GET_GET) {
3549  ae1d a103          	cp	a,#3
3550  ae1f 261d          	jrne	L1631
3551                     ; 2663       if (nBytes == 0) return;
3553  ae21 1e09          	ldw	x,(OFST+5,sp)
3554  ae23 27bb          	jreq	L452
3557                     ; 2664       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
3559  ae25 1e05          	ldw	x,(OFST+1,sp)
3560  ae27 f6            	ld	a,(x)
3561  ae28 a120          	cp	a,#32
3562  ae2a 2605          	jrne	L5631
3565  ae2c 1e0b          	ldw	x,(OFST+7,sp)
3566  ae2e a608          	ld	a,#8
3567  ae30 f7            	ld	(x),a
3568  ae31               L5631:
3569                     ; 2665       nBytes--;
3571  ae31 1e09          	ldw	x,(OFST+5,sp)
3572  ae33 5a            	decw	x
3573  ae34 1f09          	ldw	(OFST+5,sp),x
3574                     ; 2666       pBuffer++;
3576  ae36 1e05          	ldw	x,(OFST+1,sp)
3577  ae38 5c            	incw	x
3578  ae39 1f05          	ldw	(OFST+1,sp),x
3579  ae3b 1e0b          	ldw	x,(OFST+7,sp)
3580  ae3d f6            	ld	a,(x)
3581  ae3e               L1631:
3582                     ; 2669     if (pSocket->nState == STATE_POST_P) {
3584  ae3e a104          	cp	a,#4
3585  ae40 261d          	jrne	L7631
3586                     ; 2670       if (nBytes == 0) return;
3588  ae42 1e09          	ldw	x,(OFST+5,sp)
3589  ae44 279a          	jreq	L452
3592                     ; 2671       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
3594  ae46 1e05          	ldw	x,(OFST+1,sp)
3595  ae48 f6            	ld	a,(x)
3596  ae49 a14f          	cp	a,#79
3597  ae4b 2605          	jrne	L3731
3600  ae4d 1e0b          	ldw	x,(OFST+7,sp)
3601  ae4f a605          	ld	a,#5
3602  ae51 f7            	ld	(x),a
3603  ae52               L3731:
3604                     ; 2672       nBytes--;
3606  ae52 1e09          	ldw	x,(OFST+5,sp)
3607  ae54 5a            	decw	x
3608  ae55 1f09          	ldw	(OFST+5,sp),x
3609                     ; 2673       pBuffer++;
3611  ae57 1e05          	ldw	x,(OFST+1,sp)
3612  ae59 5c            	incw	x
3613  ae5a 1f05          	ldw	(OFST+1,sp),x
3614  ae5c 1e0b          	ldw	x,(OFST+7,sp)
3615  ae5e f6            	ld	a,(x)
3616  ae5f               L7631:
3617                     ; 2676     if (pSocket->nState == STATE_POST_PO) {
3619  ae5f a105          	cp	a,#5
3620  ae61 2620          	jrne	L5731
3621                     ; 2677       if (nBytes == 0) return;
3623  ae63 1e09          	ldw	x,(OFST+5,sp)
3624  ae65 2603ccade0    	jreq	L452
3627                     ; 2678       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
3629  ae6a 1e05          	ldw	x,(OFST+1,sp)
3630  ae6c f6            	ld	a,(x)
3631  ae6d a153          	cp	a,#83
3632  ae6f 2605          	jrne	L1041
3635  ae71 1e0b          	ldw	x,(OFST+7,sp)
3636  ae73 a606          	ld	a,#6
3637  ae75 f7            	ld	(x),a
3638  ae76               L1041:
3639                     ; 2679       nBytes--;
3641  ae76 1e09          	ldw	x,(OFST+5,sp)
3642  ae78 5a            	decw	x
3643  ae79 1f09          	ldw	(OFST+5,sp),x
3644                     ; 2680       pBuffer++;
3646  ae7b 1e05          	ldw	x,(OFST+1,sp)
3647  ae7d 5c            	incw	x
3648  ae7e 1f05          	ldw	(OFST+1,sp),x
3649  ae80 1e0b          	ldw	x,(OFST+7,sp)
3650  ae82 f6            	ld	a,(x)
3651  ae83               L5731:
3652                     ; 2683     if (pSocket->nState == STATE_POST_POS) {
3654  ae83 a106          	cp	a,#6
3655  ae85 261d          	jrne	L3041
3656                     ; 2684       if (nBytes == 0) return;
3658  ae87 1e09          	ldw	x,(OFST+5,sp)
3659  ae89 27dc          	jreq	L452
3662                     ; 2685       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
3664  ae8b 1e05          	ldw	x,(OFST+1,sp)
3665  ae8d f6            	ld	a,(x)
3666  ae8e a154          	cp	a,#84
3667  ae90 2605          	jrne	L7041
3670  ae92 1e0b          	ldw	x,(OFST+7,sp)
3671  ae94 a607          	ld	a,#7
3672  ae96 f7            	ld	(x),a
3673  ae97               L7041:
3674                     ; 2686       nBytes--;
3676  ae97 1e09          	ldw	x,(OFST+5,sp)
3677  ae99 5a            	decw	x
3678  ae9a 1f09          	ldw	(OFST+5,sp),x
3679                     ; 2687       pBuffer++;
3681  ae9c 1e05          	ldw	x,(OFST+1,sp)
3682  ae9e 5c            	incw	x
3683  ae9f 1f05          	ldw	(OFST+1,sp),x
3684  aea1 1e0b          	ldw	x,(OFST+7,sp)
3685  aea3 f6            	ld	a,(x)
3686  aea4               L3041:
3687                     ; 2690     if (pSocket->nState == STATE_POST_POST) {
3689  aea4 a107          	cp	a,#7
3690  aea6 261d          	jrne	L1141
3691                     ; 2691       if (nBytes == 0) return;
3693  aea8 1e09          	ldw	x,(OFST+5,sp)
3694  aeaa 27bb          	jreq	L452
3697                     ; 2692       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
3699  aeac 1e05          	ldw	x,(OFST+1,sp)
3700  aeae f6            	ld	a,(x)
3701  aeaf a120          	cp	a,#32
3702  aeb1 2605          	jrne	L5141
3705  aeb3 1e0b          	ldw	x,(OFST+7,sp)
3706  aeb5 a609          	ld	a,#9
3707  aeb7 f7            	ld	(x),a
3708  aeb8               L5141:
3709                     ; 2693       nBytes--;
3711  aeb8 1e09          	ldw	x,(OFST+5,sp)
3712  aeba 5a            	decw	x
3713  aebb 1f09          	ldw	(OFST+5,sp),x
3714                     ; 2694       pBuffer++;
3716  aebd 1e05          	ldw	x,(OFST+1,sp)
3717  aebf 5c            	incw	x
3718  aec0 1f05          	ldw	(OFST+1,sp),x
3719  aec2 1e0b          	ldw	x,(OFST+7,sp)
3720  aec4 f6            	ld	a,(x)
3721  aec5               L1141:
3722                     ; 2697     if (pSocket->nState == STATE_GOTPOST) {
3724  aec5 a109          	cp	a,#9
3725  aec7 2703ccaf4e    	jrne	L7141
3726                     ; 2699       saved_nstate = STATE_GOTPOST;
3728  aecc 3509005b      	mov	_saved_nstate,#9
3729                     ; 2700       if (nBytes == 0) {
3731  aed0 1e09          	ldw	x,(OFST+5,sp)
3732  aed2 2676          	jrne	L5241
3733                     ; 2703 	saved_newlines = pSocket->nNewlines;
3735  aed4 1e0b          	ldw	x,(OFST+7,sp)
3736  aed6 e605          	ld	a,(5,x)
3737  aed8 c70028        	ld	_saved_newlines,a
3738                     ; 2704         return;
3740  aedb ccade0        	jra	L452
3741  aede               L3241:
3742                     ; 2712 	if (saved_newlines == 2) {
3744  aede c60028        	ld	a,_saved_newlines
3745  aee1 a102          	cp	a,#2
3746  aee3 272b          	jreq	L3341
3748                     ; 2717           if (*pBuffer == '\n') pSocket->nNewlines++;
3750  aee5 1e05          	ldw	x,(OFST+1,sp)
3751  aee7 f6            	ld	a,(x)
3752  aee8 a10a          	cp	a,#10
3753  aeea 2606          	jrne	L5341
3756  aeec 1e0b          	ldw	x,(OFST+7,sp)
3757  aeee 6c05          	inc	(5,x)
3759  aef0 2008          	jra	L7341
3760  aef2               L5341:
3761                     ; 2718           else if (*pBuffer == '\r') { }
3763  aef2 a10d          	cp	a,#13
3764  aef4 2704          	jreq	L7341
3766                     ; 2719           else pSocket->nNewlines = 0;
3768  aef6 1e0b          	ldw	x,(OFST+7,sp)
3769  aef8 6f05          	clr	(5,x)
3770  aefa               L7341:
3771                     ; 2720           pBuffer++;
3773  aefa 1e05          	ldw	x,(OFST+1,sp)
3774  aefc 5c            	incw	x
3775  aefd 1f05          	ldw	(OFST+1,sp),x
3776                     ; 2721           nBytes--;
3778  aeff 1e09          	ldw	x,(OFST+5,sp)
3779  af01 5a            	decw	x
3780  af02 1f09          	ldw	(OFST+5,sp),x
3781                     ; 2722           if (nBytes == 0) {
3783  af04 260a          	jrne	L3341
3784                     ; 2725             saved_newlines = pSocket->nNewlines;
3786  af06 1e0b          	ldw	x,(OFST+7,sp)
3787  af08 e605          	ld	a,(5,x)
3788  af0a c70028        	ld	_saved_newlines,a
3789                     ; 2726             return;
3791  af0d ccade0        	jra	L452
3792  af10               L3341:
3793                     ; 2734         if (pSocket->nNewlines == 2) {
3795  af10 1e0b          	ldw	x,(OFST+7,sp)
3796  af12 e605          	ld	a,(5,x)
3797  af14 a102          	cp	a,#2
3798  af16 2632          	jrne	L5241
3799                     ; 2737           if (current_webpage == WEBPAGE_IOCONTROL) {
3801  af18 c6001a        	ld	a,_current_webpage
3802  af1b 2609          	jrne	L1541
3803                     ; 2738 	    pSocket->nParseLeft = PARSEBYTES_IOCONTROL;
3805  af1d a635          	ld	a,#53
3806  af1f e706          	ld	(6,x),a
3807                     ; 2739 	    pSocket->nParseLeftAddl = PARSEBYTES_IOCONTROL_ADDL;
3809  af21 6f07          	clr	(7,x)
3810  af23 c6001a        	ld	a,_current_webpage
3811  af26               L1541:
3812                     ; 2741           if (current_webpage == WEBPAGE_CONFIGURATION) {
3814  af26 4a            	dec	a
3815  af27 2608          	jrne	L3541
3816                     ; 2742 	    pSocket->nParseLeft = PARSEBYTES_CONFIGURATION;
3818  af29 a6ec          	ld	a,#236
3819  af2b e706          	ld	(6,x),a
3820                     ; 2743 	    pSocket->nParseLeftAddl = PARSEBYTES_CONFIGURATION_ADDL;
3822  af2d a618          	ld	a,#24
3823  af2f e707          	ld	(7,x),a
3824  af31               L3541:
3825                     ; 2745           pSocket->ParseState = saved_parsestate = PARSE_CMD;
3827  af31 725f005a      	clr	_saved_parsestate
3828  af35 6f0a          	clr	(10,x)
3829                     ; 2746 	  saved_nparseleft = pSocket->nParseLeft;
3831  af37 e606          	ld	a,(6,x)
3832  af39 c70059        	ld	_saved_nparseleft,a
3833                     ; 2748           pSocket->nState = STATE_PARSEPOST;
3835  af3c a60a          	ld	a,#10
3836  af3e f7            	ld	(x),a
3837                     ; 2749 	  saved_nstate = STATE_PARSEPOST;
3839  af3f 350a005b      	mov	_saved_nstate,#10
3840                     ; 2750 	  if (nBytes == 0) {
3842  af43 1e09          	ldw	x,(OFST+5,sp)
3843  af45 2607          	jrne	L7141
3844                     ; 2753 	    return;
3846  af47 ccade0        	jra	L452
3847  af4a               L5241:
3848                     ; 2707       while (nBytes != 0) {
3850  af4a 1e09          	ldw	x,(OFST+5,sp)
3851  af4c 2690          	jrne	L3241
3852  af4e               L7141:
3853                     ; 2760     if (pSocket->nState == STATE_GOTGET) {
3855  af4e 1e0b          	ldw	x,(OFST+7,sp)
3856  af50 f6            	ld	a,(x)
3857  af51 a108          	cp	a,#8
3858  af53 2609          	jrne	L7541
3859                     ; 2764       pSocket->nParseLeft = 6;
3861  af55 a606          	ld	a,#6
3862  af57 e706          	ld	(6,x),a
3863                     ; 2765       pSocket->ParseState = PARSE_SLASH1;
3865  af59 e70a          	ld	(10,x),a
3866                     ; 2767       pSocket->nState = STATE_PARSEGET;
3868  af5b a60d          	ld	a,#13
3869  af5d f7            	ld	(x),a
3870  af5e               L7541:
3871                     ; 2770     if (pSocket->nState == STATE_PARSEPOST) {
3873  af5e a10a          	cp	a,#10
3874  af60 2703ccb43e    	jrne	L1641
3875  af65               L3641:
3876                     ; 2784         if (pSocket->ParseState == PARSE_CMD) {
3878  af65 1e0b          	ldw	x,(OFST+7,sp)
3879  af67 e60a          	ld	a,(10,x)
3880  af69 2664          	jrne	L7641
3881                     ; 2785           pSocket->ParseCmd = *pBuffer;
3883  af6b 1e05          	ldw	x,(OFST+1,sp)
3884  af6d f6            	ld	a,(x)
3885  af6e 1e0b          	ldw	x,(OFST+7,sp)
3886  af70 e708          	ld	(8,x),a
3887                     ; 2786 	  saved_postpartial[0] = *pBuffer;
3889  af72 1e05          	ldw	x,(OFST+1,sp)
3890  af74 f6            	ld	a,(x)
3891  af75 c70041        	ld	_saved_postpartial,a
3892                     ; 2787           pSocket->ParseState = saved_parsestate = PARSE_NUM10;
3894  af78 a601          	ld	a,#1
3895  af7a c7005a        	ld	_saved_parsestate,a
3896  af7d 1e0b          	ldw	x,(OFST+7,sp)
3897  af7f e70a          	ld	(10,x),a
3898                     ; 2788 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3900  af81 e606          	ld	a,(6,x)
3901  af83 2704          	jreq	L1741
3902                     ; 2789 	    pSocket->nParseLeft--;
3904  af85 6a06          	dec	(6,x)
3906  af87 2004          	jra	L3741
3907  af89               L1741:
3908                     ; 2793 	    pSocket->ParseState = PARSE_DELIM;
3910  af89 a605          	ld	a,#5
3911  af8b e70a          	ld	(10,x),a
3912  af8d               L3741:
3913                     ; 2795 	  saved_nparseleft = pSocket->nParseLeft;
3915  af8d e606          	ld	a,(6,x)
3916  af8f c70059        	ld	_saved_nparseleft,a
3917                     ; 2796           pBuffer++;
3919  af92 1e05          	ldw	x,(OFST+1,sp)
3920  af94 5c            	incw	x
3921  af95 1f05          	ldw	(OFST+1,sp),x
3922                     ; 2797 	  nBytes --;
3924  af97 1e09          	ldw	x,(OFST+5,sp)
3925  af99 5a            	decw	x
3926  af9a 1f09          	ldw	(OFST+5,sp),x
3927                     ; 2799 	  if (pSocket->ParseCmd == 'o' ||
3927                     ; 2800 	      pSocket->ParseCmd == 'a' ||
3927                     ; 2801 	      pSocket->ParseCmd == 'b' ||
3927                     ; 2802 	      pSocket->ParseCmd == 'c' ||
3927                     ; 2803 	      pSocket->ParseCmd == 'd' ||
3927                     ; 2804 	      pSocket->ParseCmd == 'g' ||
3927                     ; 2805 	      pSocket->ParseCmd == 'l' ||
3927                     ; 2806 	      pSocket->ParseCmd == 'm' ||
3927                     ; 2807 	      pSocket->ParseCmd == 'z') { }
3929  af9c 1e0b          	ldw	x,(OFST+7,sp)
3930  af9e e608          	ld	a,(8,x)
3931  afa0 a16f          	cp	a,#111
3932  afa2 2724          	jreq	L7151
3934  afa4 a161          	cp	a,#97
3935  afa6 2720          	jreq	L7151
3937  afa8 a162          	cp	a,#98
3938  afaa 271c          	jreq	L7151
3940  afac a163          	cp	a,#99
3941  afae 2718          	jreq	L7151
3943  afb0 a164          	cp	a,#100
3944  afb2 2714          	jreq	L7151
3946  afb4 a167          	cp	a,#103
3947  afb6 2710          	jreq	L7151
3949  afb8 a16c          	cp	a,#108
3950  afba 270c          	jreq	L7151
3952  afbc a16d          	cp	a,#109
3953  afbe 2708          	jreq	L7151
3955  afc0 a17a          	cp	a,#122
3956  afc2 2704          	jreq	L7151
3957                     ; 2810 	    pSocket->ParseState = PARSE_DELIM;
3959  afc4 a605          	ld	a,#5
3960  afc6 e70a          	ld	(10,x),a
3961  afc8               L7151:
3962                     ; 2812 	  if (nBytes == 0) { // Hit end of fragment. Break out of while()
3964  afc8 1e09          	ldw	x,(OFST+5,sp)
3965  afca 2699          	jrne	L3641
3966                     ; 2814 	    break;
3968  afcc ccb3e6        	jra	L5641
3969  afcf               L7641:
3970                     ; 2818         else if (pSocket->ParseState == PARSE_NUM10) {
3972  afcf a101          	cp	a,#1
3973  afd1 2640          	jrne	L5251
3974                     ; 2819           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3976  afd3 1e05          	ldw	x,(OFST+1,sp)
3977  afd5 f6            	ld	a,(x)
3978  afd6 97            	ld	xl,a
3979  afd7 a60a          	ld	a,#10
3980  afd9 42            	mul	x,a
3981  afda 9f            	ld	a,xl
3982  afdb 1e0b          	ldw	x,(OFST+7,sp)
3983  afdd a0e0          	sub	a,#224
3984  afdf e709          	ld	(9,x),a
3985                     ; 2820 	  saved_postpartial[1] = *pBuffer;
3987  afe1 1e05          	ldw	x,(OFST+1,sp)
3988  afe3 f6            	ld	a,(x)
3989  afe4 c70042        	ld	_saved_postpartial+1,a
3990                     ; 2821           pSocket->ParseState = saved_parsestate = PARSE_NUM1;
3992  afe7 a602          	ld	a,#2
3993  afe9 c7005a        	ld	_saved_parsestate,a
3994  afec 1e0b          	ldw	x,(OFST+7,sp)
3995  afee e70a          	ld	(10,x),a
3996                     ; 2822 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3998  aff0 e606          	ld	a,(6,x)
3999  aff2 2704          	jreq	L7251
4000                     ; 2823 	    pSocket->nParseLeft--;
4002  aff4 6a06          	dec	(6,x)
4004  aff6 2004          	jra	L1351
4005  aff8               L7251:
4006                     ; 2827 	    pSocket->ParseState = PARSE_DELIM;
4008  aff8 a605          	ld	a,#5
4009  affa e70a          	ld	(10,x),a
4010  affc               L1351:
4011                     ; 2829 	  saved_nparseleft = pSocket->nParseLeft;
4013  affc e606          	ld	a,(6,x)
4014  affe c70059        	ld	_saved_nparseleft,a
4015                     ; 2830           pBuffer++;
4017  b001 1e05          	ldw	x,(OFST+1,sp)
4018  b003 5c            	incw	x
4019  b004 1f05          	ldw	(OFST+1,sp),x
4020                     ; 2831 	  nBytes--;
4022  b006 1e09          	ldw	x,(OFST+5,sp)
4023  b008 5a            	decw	x
4024  b009 1f09          	ldw	(OFST+5,sp),x
4025                     ; 2832 	  if (nBytes == 0) {
4027  b00b 2703ccaf65    	jrne	L3641
4028                     ; 2834 	    break;
4030  b010 ccb3e6        	jra	L5641
4031  b013               L5251:
4032                     ; 2838         else if (pSocket->ParseState == PARSE_NUM1) {
4034  b013 a102          	cp	a,#2
4035  b015 2638          	jrne	L7351
4036                     ; 2839           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
4038  b017 1605          	ldw	y,(OFST+1,sp)
4039  b019 90f6          	ld	a,(y)
4040  b01b a030          	sub	a,#48
4041  b01d eb09          	add	a,(9,x)
4042  b01f e709          	ld	(9,x),a
4043                     ; 2840 	  saved_postpartial[2] = *pBuffer;
4045  b021 93            	ldw	x,y
4046  b022 f6            	ld	a,(x)
4047  b023 c70043        	ld	_saved_postpartial+2,a
4048                     ; 2841           pSocket->ParseState = saved_parsestate = PARSE_EQUAL;
4050  b026 a603          	ld	a,#3
4051  b028 c7005a        	ld	_saved_parsestate,a
4052  b02b 1e0b          	ldw	x,(OFST+7,sp)
4053  b02d e70a          	ld	(10,x),a
4054                     ; 2842 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4056  b02f e606          	ld	a,(6,x)
4057  b031 2704          	jreq	L1451
4058                     ; 2843 	    pSocket->nParseLeft--;
4060  b033 6a06          	dec	(6,x)
4062  b035 2004          	jra	L3451
4063  b037               L1451:
4064                     ; 2847 	    pSocket->ParseState = PARSE_DELIM;
4066  b037 a605          	ld	a,#5
4067  b039 e70a          	ld	(10,x),a
4068  b03b               L3451:
4069                     ; 2849 	  saved_nparseleft = pSocket->nParseLeft;
4071  b03b e606          	ld	a,(6,x)
4072  b03d c70059        	ld	_saved_nparseleft,a
4073                     ; 2850           pBuffer++;
4075  b040 1e05          	ldw	x,(OFST+1,sp)
4076  b042 5c            	incw	x
4077  b043 1f05          	ldw	(OFST+1,sp),x
4078                     ; 2851 	  nBytes--;
4080  b045 1e09          	ldw	x,(OFST+5,sp)
4081  b047 5a            	decw	x
4082  b048 1f09          	ldw	(OFST+5,sp),x
4083                     ; 2852 	  if (nBytes == 0) {
4085  b04a 26c1          	jrne	L3641
4086                     ; 2854 	    break;
4088  b04c ccb3e6        	jra	L5641
4089  b04f               L7351:
4090                     ; 2858         else if (pSocket->ParseState == PARSE_EQUAL) {
4092  b04f a103          	cp	a,#3
4093  b051 262f          	jrne	L1551
4094                     ; 2859           pSocket->ParseState = saved_parsestate = PARSE_VAL;
4096  b053 a604          	ld	a,#4
4097  b055 c7005a        	ld	_saved_parsestate,a
4098  b058 e70a          	ld	(10,x),a
4099                     ; 2860 	  saved_postpartial[3] = *pBuffer;
4101  b05a 1e05          	ldw	x,(OFST+1,sp)
4102  b05c f6            	ld	a,(x)
4103  b05d c70044        	ld	_saved_postpartial+3,a
4104                     ; 2861 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4106  b060 1e0b          	ldw	x,(OFST+7,sp)
4107  b062 e606          	ld	a,(6,x)
4108  b064 2704          	jreq	L3551
4109                     ; 2862 	    pSocket->nParseLeft--;
4111  b066 6a06          	dec	(6,x)
4113  b068 2004          	jra	L5551
4114  b06a               L3551:
4115                     ; 2866 	    pSocket->ParseState = PARSE_DELIM;
4117  b06a a605          	ld	a,#5
4118  b06c e70a          	ld	(10,x),a
4119  b06e               L5551:
4120                     ; 2868 	  saved_nparseleft = pSocket->nParseLeft;
4122  b06e e606          	ld	a,(6,x)
4123  b070 c70059        	ld	_saved_nparseleft,a
4124                     ; 2869           pBuffer++;
4126  b073 1e05          	ldw	x,(OFST+1,sp)
4127  b075 5c            	incw	x
4128  b076 1f05          	ldw	(OFST+1,sp),x
4129                     ; 2870 	  nBytes--;
4131  b078 1e09          	ldw	x,(OFST+5,sp)
4132  b07a 5a            	decw	x
4133  b07b 1f09          	ldw	(OFST+5,sp),x
4134                     ; 2871 	  if (nBytes == 0) {
4136  b07d 268e          	jrne	L3641
4137                     ; 2873 	    break;
4139  b07f ccb3e6        	jra	L5641
4140  b082               L1551:
4141                     ; 2877         else if (pSocket->ParseState == PARSE_VAL) {
4143  b082 a104          	cp	a,#4
4144  b084 2703ccb3b9    	jrne	L3651
4145                     ; 2890           if (pSocket->ParseCmd == 'o') {
4147  b089 e608          	ld	a,(8,x)
4148  b08b a16f          	cp	a,#111
4149  b08d 2640          	jrne	L5651
4150                     ; 2904               if ((uint8_t)(*pBuffer) == '1') pin_value = 1;
4152  b08f 1e05          	ldw	x,(OFST+1,sp)
4153  b091 f6            	ld	a,(x)
4154  b092 a131          	cp	a,#49
4155  b094 2604          	jrne	L7651
4158  b096 a601          	ld	a,#1
4160  b098 2001          	jra	L1751
4161  b09a               L7651:
4162                     ; 2905 	      else pin_value = 0;
4164  b09a 4f            	clr	a
4165  b09b               L1751:
4166  b09b 6b01          	ld	(OFST-3,sp),a
4168                     ; 2906 	      GpioSetPin(pSocket->ParseNum, (uint8_t)pin_value);
4170  b09d 160b          	ldw	y,(OFST+7,sp)
4171  b09f 97            	ld	xl,a
4172  b0a0 90e609        	ld	a,(9,y)
4173  b0a3 95            	ld	xh,a
4174  b0a4 cdbc18        	call	_GpioSetPin
4176                     ; 2908 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent
4178  b0a7 1e0b          	ldw	x,(OFST+7,sp)
4179  b0a9 e606          	ld	a,(6,x)
4180  b0ab 2704          	jreq	L3751
4183  b0ad 6a06          	dec	(6,x)
4184  b0af e606          	ld	a,(6,x)
4185  b0b1               L3751:
4186                     ; 2910             saved_nparseleft = pSocket->nParseLeft;
4188  b0b1 c70059        	ld	_saved_nparseleft,a
4189                     ; 2911             pBuffer++;
4191  b0b4 1e05          	ldw	x,(OFST+1,sp)
4192  b0b6 5c            	incw	x
4193  b0b7 1f05          	ldw	(OFST+1,sp),x
4194                     ; 2912 	    nBytes--;
4196  b0b9 1e09          	ldw	x,(OFST+5,sp)
4197  b0bb 5a            	decw	x
4198  b0bc 1f09          	ldw	(OFST+5,sp),x
4199                     ; 2913 	    if (nBytes == 0) {
4201  b0be 2703ccb397    	jrne	L7751
4202                     ; 2916 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4204  b0c3 a605          	ld	a,#5
4205  b0c5 c7005a        	ld	_saved_parsestate,a
4206  b0c8 1e0b          	ldw	x,(OFST+7,sp)
4207  b0ca e70a          	ld	(10,x),a
4208                     ; 2917 	      break;
4210  b0cc ccb3e6        	jra	L5641
4211  b0cf               L5651:
4212                     ; 2924           else if (pSocket->ParseCmd == 'a'
4212                     ; 2925                 || pSocket->ParseCmd == 'l'
4212                     ; 2926                 || pSocket->ParseCmd == 'm' ) {
4214  b0cf a161          	cp	a,#97
4215  b0d1 2708          	jreq	L3061
4217  b0d3 a16c          	cp	a,#108
4218  b0d5 2704          	jreq	L3061
4220  b0d7 a16d          	cp	a,#109
4221  b0d9 2657          	jrne	L1061
4222  b0db               L3061:
4223                     ; 2930 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4225  b0db 725f0021      	clr	_break_while
4226                     ; 2932             tmp_pBuffer = pBuffer;
4228  b0df 1e05          	ldw	x,(OFST+1,sp)
4229  b0e1 cf0025        	ldw	_tmp_pBuffer,x
4230                     ; 2933             tmp_nBytes = nBytes;
4232  b0e4 1e09          	ldw	x,(OFST+5,sp)
4233  b0e6 cf0023        	ldw	_tmp_nBytes,x
4234                     ; 2934 	    tmp_nParseLeft = pSocket->nParseLeft;
4236  b0e9 1e0b          	ldw	x,(OFST+7,sp)
4237  b0eb e606          	ld	a,(6,x)
4238  b0ed c70022        	ld	_tmp_nParseLeft,a
4239                     ; 2935             switch (pSocket->ParseCmd) {
4241  b0f0 e608          	ld	a,(8,x)
4243                     ; 2938               case 'm': i = 10; break;
4244  b0f2 a061          	sub	a,#97
4245  b0f4 270b          	jreq	L5601
4246  b0f6 a00b          	sub	a,#11
4247  b0f8 270b          	jreq	L7601
4248  b0fa 4a            	dec	a
4249  b0fb 2708          	jreq	L7601
4250  b0fd 7b04          	ld	a,(OFST+0,sp)
4251  b0ff 2008          	jra	L1161
4252  b101               L5601:
4253                     ; 2936               case 'a': i = 19; break;
4255  b101 a613          	ld	a,#19
4258  b103 2002          	jp	LC018
4259  b105               L7601:
4260                     ; 2937               case 'l':
4260                     ; 2938               case 'm': i = 10; break;
4262  b105 a60a          	ld	a,#10
4263  b107               LC018:
4264  b107 6b04          	ld	(OFST+0,sp),a
4268  b109               L1161:
4269                     ; 2940             parse_POST_string(pSocket->ParseCmd, i);
4271  b109 160b          	ldw	y,(OFST+7,sp)
4272  b10b 97            	ld	xl,a
4273  b10c 90e608        	ld	a,(8,y)
4274  b10f 95            	ld	xh,a
4275  b110 cdb78a        	call	_parse_POST_string
4277                     ; 2941             pBuffer = tmp_pBuffer;
4279  b113 ce0025        	ldw	x,_tmp_pBuffer
4280  b116 1f05          	ldw	(OFST+1,sp),x
4281                     ; 2942             nBytes = tmp_nBytes;
4283  b118 ce0023        	ldw	x,_tmp_nBytes
4284  b11b 1f09          	ldw	(OFST+5,sp),x
4285                     ; 2943 	    pSocket->nParseLeft = tmp_nParseLeft;
4287  b11d 1e0b          	ldw	x,(OFST+7,sp)
4288  b11f c60022        	ld	a,_tmp_nParseLeft
4289  b122 e706          	ld	(6,x),a
4290                     ; 2944             if (break_while == 1) {
4292  b124 c60021        	ld	a,_break_while
4293  b127 4a            	dec	a
4294  b128 2696          	jrne	L7751
4295                     ; 2948 	      pSocket->ParseState = saved_parsestate;
4297  b12a c6005a        	ld	a,_saved_parsestate
4298  b12d e70a          	ld	(10,x),a
4299                     ; 2949 	      break;
4301  b12f ccb3e6        	jra	L5641
4302  b132               L1061:
4303                     ; 2956           else if (pSocket->ParseCmd == 'b') {
4305  b132 a162          	cp	a,#98
4306  b134 2654          	jrne	L7161
4307                     ; 2964 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4309  b136 725f0021      	clr	_break_while
4310                     ; 2966             tmp_pBuffer = pBuffer;
4312  b13a 1e05          	ldw	x,(OFST+1,sp)
4313  b13c cf0025        	ldw	_tmp_pBuffer,x
4314                     ; 2967             tmp_nBytes = nBytes;
4316  b13f 1e09          	ldw	x,(OFST+5,sp)
4317  b141 cf0023        	ldw	_tmp_nBytes,x
4318                     ; 2968 	    tmp_nParseLeft = pSocket->nParseLeft;
4320  b144 1e0b          	ldw	x,(OFST+7,sp)
4321  b146 e606          	ld	a,(6,x)
4322  b148 c70022        	ld	_tmp_nParseLeft,a
4323                     ; 2969             parse_POST_address(pSocket->ParseCmd, pSocket->ParseNum);
4325  b14b e609          	ld	a,(9,x)
4326  b14d 160b          	ldw	y,(OFST+7,sp)
4327  b14f 97            	ld	xl,a
4328  b150 90e608        	ld	a,(8,y)
4329  b153 95            	ld	xh,a
4330  b154 cdb90b        	call	_parse_POST_address
4332                     ; 2970             pBuffer = tmp_pBuffer;
4334  b157 ce0025        	ldw	x,_tmp_pBuffer
4335  b15a 1f05          	ldw	(OFST+1,sp),x
4336                     ; 2971             nBytes = tmp_nBytes;
4338  b15c ce0023        	ldw	x,_tmp_nBytes
4339  b15f 1f09          	ldw	(OFST+5,sp),x
4340                     ; 2972 	    pSocket->nParseLeft = tmp_nParseLeft;
4342  b161 1e0b          	ldw	x,(OFST+7,sp)
4343  b163 c60022        	ld	a,_tmp_nParseLeft
4344  b166 e706          	ld	(6,x),a
4345                     ; 2973             if (break_while == 1) {
4347  b168 c60021        	ld	a,_break_while
4348  b16b a101          	cp	a,#1
4349  b16d 260a          	jrne	L1261
4350                     ; 2977               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4352  b16f a604          	ld	a,#4
4353  b171 c7005a        	ld	_saved_parsestate,a
4354  b174 e70a          	ld	(10,x),a
4355                     ; 2978 	      break;
4357  b176 ccb3e6        	jra	L5641
4358  b179               L1261:
4359                     ; 2980             if (break_while == 2) {
4361  b179 a102          	cp	a,#2
4362  b17b 2703ccb397    	jrne	L7751
4363                     ; 2983               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4365  b180 a605          	ld	a,#5
4366  b182 c7005a        	ld	_saved_parsestate,a
4367  b185 e70a          	ld	(10,x),a
4368                     ; 2984 	      break;
4370  b187 ccb3e6        	jra	L5641
4371  b18a               L7161:
4372                     ; 2991           else if (pSocket->ParseCmd == 'c') {
4374  b18a a163          	cp	a,#99
4375  b18c 2651          	jrne	L7261
4376                     ; 3000 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4378  b18e 725f0021      	clr	_break_while
4379                     ; 3002             tmp_pBuffer = pBuffer;
4381  b192 1e05          	ldw	x,(OFST+1,sp)
4382  b194 cf0025        	ldw	_tmp_pBuffer,x
4383                     ; 3003             tmp_nBytes = nBytes;
4385  b197 1e09          	ldw	x,(OFST+5,sp)
4386  b199 cf0023        	ldw	_tmp_nBytes,x
4387                     ; 3004 	    tmp_nParseLeft = pSocket->nParseLeft;
4389  b19c 1e0b          	ldw	x,(OFST+7,sp)
4390  b19e e606          	ld	a,(6,x)
4391  b1a0 c70022        	ld	_tmp_nParseLeft,a
4392                     ; 3005             parse_POST_port(pSocket->ParseCmd, pSocket->ParseNum);
4394  b1a3 e609          	ld	a,(9,x)
4395  b1a5 160b          	ldw	y,(OFST+7,sp)
4396  b1a7 97            	ld	xl,a
4397  b1a8 90e608        	ld	a,(8,y)
4398  b1ab 95            	ld	xh,a
4399  b1ac cdba63        	call	_parse_POST_port
4401                     ; 3006             pBuffer = tmp_pBuffer;
4403  b1af ce0025        	ldw	x,_tmp_pBuffer
4404  b1b2 1f05          	ldw	(OFST+1,sp),x
4405                     ; 3007             nBytes = tmp_nBytes;
4407  b1b4 ce0023        	ldw	x,_tmp_nBytes
4408  b1b7 1f09          	ldw	(OFST+5,sp),x
4409                     ; 3008 	    pSocket->nParseLeft = tmp_nParseLeft;
4411  b1b9 1e0b          	ldw	x,(OFST+7,sp)
4412  b1bb c60022        	ld	a,_tmp_nParseLeft
4413  b1be e706          	ld	(6,x),a
4414                     ; 3009             if (break_while == 1) {
4416  b1c0 c60021        	ld	a,_break_while
4417  b1c3 a101          	cp	a,#1
4418  b1c5 260a          	jrne	L1361
4419                     ; 3012               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4421  b1c7 a604          	ld	a,#4
4422  b1c9 c7005a        	ld	_saved_parsestate,a
4423  b1cc e70a          	ld	(10,x),a
4424                     ; 3013 	      break;
4426  b1ce ccb3e6        	jra	L5641
4427  b1d1               L1361:
4428                     ; 3015             if (break_while == 2) {
4430  b1d1 a102          	cp	a,#2
4431  b1d3 26a8          	jrne	L7751
4432                     ; 3018               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4434  b1d5 a605          	ld	a,#5
4435  b1d7 c7005a        	ld	_saved_parsestate,a
4436  b1da e70a          	ld	(10,x),a
4437                     ; 3019 	      break;
4439  b1dc ccb3e6        	jra	L5641
4440  b1df               L7261:
4441                     ; 3026           else if (pSocket->ParseCmd == 'd') {
4443  b1df a164          	cp	a,#100
4444  b1e1 2703ccb281    	jrne	L7361
4445                     ; 3032 	    alpha[0] = '-';
4447  b1e6 352d001b      	mov	_alpha,#45
4448                     ; 3033 	    alpha[1] = '-';
4450  b1ea 352d001c      	mov	_alpha+1,#45
4451                     ; 3035 	    if (saved_postpartial_previous[0] == 'd') {
4453  b1ee c60029        	ld	a,_saved_postpartial_previous
4454  b1f1 a164          	cp	a,#100
4455  b1f3 261a          	jrne	L1461
4456                     ; 3039 	      saved_postpartial_previous[0] = '\0';
4458  b1f5 725f0029      	clr	_saved_postpartial_previous
4459                     ; 3045 	      if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
4461  b1f9 c6002d        	ld	a,_saved_postpartial_previous+4
4462  b1fc 2705          	jreq	L3461
4465  b1fe 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
4466  b203               L3461:
4467                     ; 3046 	      if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
4469  b203 c6002e        	ld	a,_saved_postpartial_previous+5
4470  b206 270a          	jreq	L7461
4473  b208 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
4474  b20d 2003          	jra	L7461
4475  b20f               L1461:
4476                     ; 3053               clear_saved_postpartial_data(); // Clear [4] and higher
4478  b20f cdb775        	call	_clear_saved_postpartial_data
4480  b212               L7461:
4481                     ; 3056             if (alpha[0] == '-') {
4483  b212 c6001b        	ld	a,_alpha
4484  b215 a12d          	cp	a,#45
4485  b217 261e          	jrne	L1561
4486                     ; 3057 	      alpha[0] = (uint8_t)(*pBuffer);
4488  b219 1e05          	ldw	x,(OFST+1,sp)
4489  b21b f6            	ld	a,(x)
4490  b21c c7001b        	ld	_alpha,a
4491                     ; 3058               saved_postpartial[4] = *pBuffer;
4493  b21f c70045        	ld	_saved_postpartial+4,a
4494                     ; 3059               pSocket->nParseLeft--;
4496  b222 1e0b          	ldw	x,(OFST+7,sp)
4497  b224 6a06          	dec	(6,x)
4498                     ; 3060               saved_nparseleft = pSocket->nParseLeft;
4500  b226 e606          	ld	a,(6,x)
4501  b228 c70059        	ld	_saved_nparseleft,a
4502                     ; 3061               pBuffer++;
4504  b22b 1e05          	ldw	x,(OFST+1,sp)
4505  b22d 5c            	incw	x
4506  b22e 1f05          	ldw	(OFST+1,sp),x
4507                     ; 3062 	      nBytes--;
4509  b230 1e09          	ldw	x,(OFST+5,sp)
4510  b232 5a            	decw	x
4511  b233 1f09          	ldw	(OFST+5,sp),x
4512                     ; 3063               if (nBytes == 0) break; // Hit end of fragment. Break out of
4514  b235 27a5          	jreq	L5641
4517  b237               L1561:
4518                     ; 3067             if (alpha[1] == '-') {
4520  b237 c6001c        	ld	a,_alpha+1
4521  b23a a12d          	cp	a,#45
4522  b23c 261c          	jrne	L5561
4523                     ; 3068 	      alpha[1] = (uint8_t)(*pBuffer);
4525  b23e 1e05          	ldw	x,(OFST+1,sp)
4526  b240 f6            	ld	a,(x)
4527  b241 c7001c        	ld	_alpha+1,a
4528                     ; 3069               saved_postpartial[5] = *pBuffer;
4530  b244 c70046        	ld	_saved_postpartial+5,a
4531                     ; 3070               pSocket->nParseLeft--;
4533  b247 1e0b          	ldw	x,(OFST+7,sp)
4534  b249 6a06          	dec	(6,x)
4535                     ; 3071               saved_nparseleft = pSocket->nParseLeft;
4537  b24b e606          	ld	a,(6,x)
4538  b24d c70059        	ld	_saved_nparseleft,a
4539                     ; 3072               pBuffer++;
4541  b250 1e05          	ldw	x,(OFST+1,sp)
4542  b252 5c            	incw	x
4543  b253 1f05          	ldw	(OFST+1,sp),x
4544                     ; 3073 	      nBytes--;
4546  b255 1e09          	ldw	x,(OFST+5,sp)
4547  b257 5a            	decw	x
4548  b258 1f09          	ldw	(OFST+5,sp),x
4549  b25a               L5561:
4550                     ; 3079             clear_saved_postpartial_all();
4552  b25a cdb761        	call	_clear_saved_postpartial_all
4554                     ; 3081             SetMAC(pSocket->ParseNum, alpha[0], alpha[1]);
4556  b25d 3b001c        	push	_alpha+1
4557  b260 c6001b        	ld	a,_alpha
4558  b263 160c          	ldw	y,(OFST+8,sp)
4559  b265 97            	ld	xl,a
4560  b266 90e609        	ld	a,(9,y)
4561  b269 95            	ld	xh,a
4562  b26a cdbc6d        	call	_SetMAC
4564  b26d 84            	pop	a
4565                     ; 3083             if (nBytes == 0) {
4567  b26e 1e09          	ldw	x,(OFST+5,sp)
4568  b270 2703ccb397    	jrne	L7751
4569                     ; 3086 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4571  b275 a605          	ld	a,#5
4572  b277 c7005a        	ld	_saved_parsestate,a
4573  b27a 1e0b          	ldw	x,(OFST+7,sp)
4574  b27c e70a          	ld	(10,x),a
4575                     ; 3087 	      break;
4577  b27e ccb3e6        	jra	L5641
4578  b281               L7361:
4579                     ; 3094 	  else if (pSocket->ParseCmd == 'g') {
4581  b281 a167          	cp	a,#103
4582  b283 2703ccb38a    	jrne	L3661
4583                     ; 3105             for (i=0; i<6; i++) alpha[i] = '-';
4585  b288 4f            	clr	a
4586  b289 6b04          	ld	(OFST+0,sp),a
4588  b28b               L5661:
4591  b28b 5f            	clrw	x
4592  b28c 97            	ld	xl,a
4593  b28d a62d          	ld	a,#45
4594  b28f d7001b        	ld	(_alpha,x),a
4597  b292 0c04          	inc	(OFST+0,sp)
4601  b294 7b04          	ld	a,(OFST+0,sp)
4602  b296 a106          	cp	a,#6
4603  b298 25f1          	jrult	L5661
4604                     ; 3107 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4606  b29a 725f0021      	clr	_break_while
4607                     ; 3110 	    if (saved_postpartial_previous[0] == 'g') {
4609  b29e c60029        	ld	a,_saved_postpartial_previous
4610  b2a1 a167          	cp	a,#103
4611  b2a3 2621          	jrne	L3761
4612                     ; 3114 	      saved_postpartial_previous[0] = '\0';
4614  b2a5 725f0029      	clr	_saved_postpartial_previous
4615                     ; 3120               for (i=0; i<6; i++) {
4617  b2a9 4f            	clr	a
4618  b2aa 6b04          	ld	(OFST+0,sp),a
4620  b2ac               L5761:
4621                     ; 3121                 if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
4623  b2ac 5f            	clrw	x
4624  b2ad 97            	ld	xl,a
4625  b2ae 724d002d      	tnz	(_saved_postpartial_previous+4,x)
4626  b2b2 2708          	jreq	L3071
4629  b2b4 5f            	clrw	x
4630  b2b5 97            	ld	xl,a
4631  b2b6 d6002d        	ld	a,(_saved_postpartial_previous+4,x)
4632  b2b9 d7001b        	ld	(_alpha,x),a
4633  b2bc               L3071:
4634                     ; 3120               for (i=0; i<6; i++) {
4636  b2bc 0c04          	inc	(OFST+0,sp)
4640  b2be 7b04          	ld	a,(OFST+0,sp)
4641  b2c0 a106          	cp	a,#6
4642  b2c2 25e8          	jrult	L5761
4644  b2c4 2003          	jra	L5071
4645  b2c6               L3761:
4646                     ; 3129               clear_saved_postpartial_data(); // Clear [4] and higher
4648  b2c6 cdb775        	call	_clear_saved_postpartial_data
4650  b2c9               L5071:
4651                     ; 3132             for (i=0; i<6; i++) {
4653  b2c9 4f            	clr	a
4654  b2ca 6b04          	ld	(OFST+0,sp),a
4656  b2cc               L7071:
4657                     ; 3138               if (alpha[i] == '-') {
4659  b2cc 5f            	clrw	x
4660  b2cd 97            	ld	xl,a
4661  b2ce d6001b        	ld	a,(_alpha,x)
4662  b2d1 a12d          	cp	a,#45
4663  b2d3 2636          	jrne	L5171
4664                     ; 3139 	        alpha[i] = (uint8_t)(*pBuffer);
4666  b2d5 7b04          	ld	a,(OFST+0,sp)
4667  b2d7 5f            	clrw	x
4668  b2d8 1605          	ldw	y,(OFST+1,sp)
4669  b2da 97            	ld	xl,a
4670  b2db 90f6          	ld	a,(y)
4671  b2dd d7001b        	ld	(_alpha,x),a
4672                     ; 3140                 saved_postpartial[i+4] = *pBuffer;
4674  b2e0 5f            	clrw	x
4675  b2e1 7b04          	ld	a,(OFST+0,sp)
4676  b2e3 97            	ld	xl,a
4677  b2e4 90f6          	ld	a,(y)
4678  b2e6 d70045        	ld	(_saved_postpartial+4,x),a
4679                     ; 3141                 pSocket->nParseLeft--;
4681  b2e9 1e0b          	ldw	x,(OFST+7,sp)
4682  b2eb 6a06          	dec	(6,x)
4683                     ; 3142                 saved_nparseleft = pSocket->nParseLeft;
4685  b2ed e606          	ld	a,(6,x)
4686  b2ef c70059        	ld	_saved_nparseleft,a
4687                     ; 3143                 pBuffer++;
4689  b2f2 93            	ldw	x,y
4690  b2f3 5c            	incw	x
4691  b2f4 1f05          	ldw	(OFST+1,sp),x
4692                     ; 3144 	        nBytes--;
4694  b2f6 1e09          	ldw	x,(OFST+5,sp)
4695  b2f8 5a            	decw	x
4696  b2f9 1f09          	ldw	(OFST+5,sp),x
4697                     ; 3145                 if (i != 5 && nBytes == 0) {
4699  b2fb 7b04          	ld	a,(OFST+0,sp)
4700  b2fd a105          	cp	a,#5
4701  b2ff 270a          	jreq	L5171
4703  b301 1e09          	ldw	x,(OFST+5,sp)
4704  b303 2606          	jrne	L5171
4705                     ; 3146 		  break_while = 1; // Hit end of fragment. Break out of
4707  b305 35010021      	mov	_break_while,#1
4708                     ; 3148 		  break; // Break out of for() loop
4710  b309 2008          	jra	L3171
4711  b30b               L5171:
4712                     ; 3132             for (i=0; i<6; i++) {
4714  b30b 0c04          	inc	(OFST+0,sp)
4718  b30d 7b04          	ld	a,(OFST+0,sp)
4719  b30f a106          	cp	a,#6
4720  b311 25b9          	jrult	L7071
4721  b313               L3171:
4722                     ; 3152 	    if (break_while == 1) {
4724  b313 c60021        	ld	a,_break_while
4725  b316 4a            	dec	a
4726  b317 2603ccb3e6    	jreq	L5641
4727                     ; 3154 	      break;
4729                     ; 3160             clear_saved_postpartial_all();
4731  b31c cdb761        	call	_clear_saved_postpartial_all
4733                     ; 3163 	    if (alpha[0] != '0' && alpha[0] != '1') alpha[0] = '0';
4735  b31f c6001b        	ld	a,_alpha
4736  b322 a130          	cp	a,#48
4737  b324 2708          	jreq	L3271
4739  b326 a131          	cp	a,#49
4740  b328 2704          	jreq	L3271
4743  b32a 3530001b      	mov	_alpha,#48
4744  b32e               L3271:
4745                     ; 3164 	    if (alpha[1] != '0' && alpha[1] != '1') alpha[1] = '0';
4747  b32e c6001c        	ld	a,_alpha+1
4748  b331 a130          	cp	a,#48
4749  b333 2708          	jreq	L5271
4751  b335 a131          	cp	a,#49
4752  b337 2704          	jreq	L5271
4755  b339 3530001c      	mov	_alpha+1,#48
4756  b33d               L5271:
4757                     ; 3165 	    if (alpha[2] != '0' && alpha[2] != '1' && alpha[2] != '2') alpha[2] = '2';
4759  b33d c6001d        	ld	a,_alpha+2
4760  b340 a130          	cp	a,#48
4761  b342 270c          	jreq	L7271
4763  b344 a131          	cp	a,#49
4764  b346 2708          	jreq	L7271
4766  b348 a132          	cp	a,#50
4767  b34a 2704          	jreq	L7271
4770  b34c 3532001d      	mov	_alpha+2,#50
4771  b350               L7271:
4772                     ; 3166 	    if (alpha[3] != '0' && alpha[3] != '1') alpha[3] = '0';
4774  b350 c6001e        	ld	a,_alpha+3
4775  b353 a130          	cp	a,#48
4776  b355 2708          	jreq	L1371
4778  b357 a131          	cp	a,#49
4779  b359 2704          	jreq	L1371
4782  b35b 3530001e      	mov	_alpha+3,#48
4783  b35f               L1371:
4784                     ; 3168 	    Pending_config_settings[0] = (uint8_t)alpha[0];
4786  b35f 55001b011f    	mov	_Pending_config_settings,_alpha
4787                     ; 3169             Pending_config_settings[1] = (uint8_t)alpha[1];
4789  b364 55001c0120    	mov	_Pending_config_settings+1,_alpha+1
4790                     ; 3170             Pending_config_settings[2] = (uint8_t)alpha[2];
4792  b369 55001d0121    	mov	_Pending_config_settings+2,_alpha+2
4793                     ; 3171             Pending_config_settings[3] = (uint8_t)alpha[3];
4795  b36e 55001e0122    	mov	_Pending_config_settings+3,_alpha+3
4796                     ; 3172             Pending_config_settings[4] = '0';
4798  b373 35300123      	mov	_Pending_config_settings+4,#48
4799                     ; 3173             Pending_config_settings[5] = '0';
4801  b377 35300124      	mov	_Pending_config_settings+5,#48
4802                     ; 3175             if (nBytes == 0) {
4804  b37b 1e09          	ldw	x,(OFST+5,sp)
4805  b37d 2618          	jrne	L7751
4806                     ; 3178 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4808  b37f a605          	ld	a,#5
4809  b381 c7005a        	ld	_saved_parsestate,a
4810  b384 1e0b          	ldw	x,(OFST+7,sp)
4811  b386 e70a          	ld	(10,x),a
4812                     ; 3179 	      break;
4814  b388 205c          	jra	L5641
4815  b38a               L3661:
4816                     ; 3186 	  else if (pSocket->ParseCmd == 'z') {
4818  b38a a17a          	cp	a,#122
4819  b38c 2609          	jrne	L7751
4820                     ; 3211 	    nBytes = 0;
4822  b38e 5f            	clrw	x
4823  b38f 1f09          	ldw	(OFST+5,sp),x
4824                     ; 3212 	    pSocket->nParseLeft = 0;
4826  b391 1e0b          	ldw	x,(OFST+7,sp)
4827  b393 6f06          	clr	(6,x)
4828                     ; 3213             break; // Break out of the while loop. We're done with POST.
4830  b395 204f          	jra	L5641
4831  b397               L7751:
4832                     ; 3224           pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4834  b397 a605          	ld	a,#5
4835  b399 c7005a        	ld	_saved_parsestate,a
4836  b39c 1e0b          	ldw	x,(OFST+7,sp)
4837  b39e e70a          	ld	(10,x),a
4838                     ; 3226           if (pSocket->nParseLeft < 30) {
4840  b3a0 e606          	ld	a,(6,x)
4841  b3a2 a11e          	cp	a,#30
4842  b3a4 2503ccaf65    	jruge	L3641
4843                     ; 3241 	    if (pSocket->nParseLeftAddl > 0) {
4845  b3a9 6d07          	tnz	(7,x)
4846  b3ab 27f9          	jreq	L3641
4847                     ; 3242 	      pSocket->nParseLeft += pSocket->nParseLeftAddl;
4849  b3ad eb07          	add	a,(7,x)
4850  b3af e706          	ld	(6,x),a
4851                     ; 3243 	      pSocket->nParseLeftAddl = 0;
4853  b3b1 6f07          	clr	(7,x)
4854                     ; 3244 	      saved_nparseleft = pSocket->nParseLeft;
4856  b3b3 c70059        	ld	_saved_nparseleft,a
4857  b3b6 ccaf65        	jra	L3641
4858  b3b9               L3651:
4859                     ; 3249         else if (pSocket->ParseState == PARSE_DELIM) {
4861  b3b9 a105          	cp	a,#5
4862  b3bb 26f9          	jrne	L3641
4863                     ; 3250           if (pSocket->nParseLeft > 0) {
4865  b3bd e606          	ld	a,(6,x)
4866  b3bf 2720          	jreq	L1571
4867                     ; 3253             pSocket->ParseState = saved_parsestate = PARSE_CMD;
4869  b3c1 725f005a      	clr	_saved_parsestate
4870  b3c5 6f0a          	clr	(10,x)
4871                     ; 3254             pSocket->nParseLeft--;
4873  b3c7 6a06          	dec	(6,x)
4874                     ; 3255             saved_nparseleft = pSocket->nParseLeft;
4876  b3c9 e606          	ld	a,(6,x)
4877  b3cb c70059        	ld	_saved_nparseleft,a
4878                     ; 3256             pBuffer++;
4880  b3ce 1e05          	ldw	x,(OFST+1,sp)
4881  b3d0 5c            	incw	x
4882  b3d1 1f05          	ldw	(OFST+1,sp),x
4883                     ; 3257 	    nBytes--;
4885  b3d3 1e09          	ldw	x,(OFST+5,sp)
4886  b3d5 5a            	decw	x
4887  b3d6 1f09          	ldw	(OFST+5,sp),x
4888                     ; 3259 	    clear_saved_postpartial_all();
4890  b3d8 cdb761        	call	_clear_saved_postpartial_all
4892                     ; 3263             if (nBytes == 0) {
4894  b3db 1e09          	ldw	x,(OFST+5,sp)
4895  b3dd 26d7          	jrne	L3641
4896                     ; 3264 	      break; // Hit end of fragment but still have more to parse in
4898  b3df 2005          	jra	L5641
4899  b3e1               L1571:
4900                     ; 3274             pSocket->nParseLeft = 0; // End the parsing
4902  b3e1 e706          	ld	(6,x),a
4903                     ; 3275 	    nBytes = 0;
4905  b3e3 5f            	clrw	x
4906  b3e4 1f09          	ldw	(OFST+5,sp),x
4907                     ; 3276 	    break; // Exit parsing
4908  b3e6               L5641:
4909                     ; 3303       if (pSocket->nParseLeft == 0) {
4911  b3e6 1e0b          	ldw	x,(OFST+7,sp)
4912  b3e8 e606          	ld	a,(6,x)
4913  b3ea 264e          	jrne	L7571
4914                     ; 3306 	saved_nstate = STATE_NULL;
4916  b3ec 357f005b      	mov	_saved_nstate,#127
4917                     ; 3307 	saved_parsestate = PARSE_CMD;
4919  b3f0 c7005a        	ld	_saved_parsestate,a
4920                     ; 3308         saved_nparseleft = 0;
4922  b3f3 c70059        	ld	_saved_nparseleft,a
4923                     ; 3309         saved_newlines = 0;
4925  b3f6 c70028        	ld	_saved_newlines,a
4926                     ; 3310 	for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i] = '\0';
4928  b3f9 6b04          	ld	(OFST+0,sp),a
4930  b3fb               L1671:
4933  b3fb 5f            	clrw	x
4934  b3fc 97            	ld	xl,a
4935  b3fd 724f0041      	clr	(_saved_postpartial,x)
4936  b401 5f            	clrw	x
4937  b402 97            	ld	xl,a
4938  b403 724f0029      	clr	(_saved_postpartial_previous,x)
4941  b407 0c04          	inc	(OFST+0,sp)
4945  b409 7b04          	ld	a,(OFST+0,sp)
4946  b40b a118          	cp	a,#24
4947  b40d 25ec          	jrult	L1671
4948                     ; 3316 	parse_complete = 1;
4950  b40f 35010106      	mov	_parse_complete,#1
4951                     ; 3317 	pSocket->nState = STATE_SENDHEADER;
4953  b413 1e0b          	ldw	x,(OFST+7,sp)
4954  b415 a60b          	ld	a,#11
4955  b417 f7            	ld	(x),a
4956                     ; 3329         if (current_webpage == WEBPAGE_IOCONTROL) {
4958  b418 c6001a        	ld	a,_current_webpage
4959  b41b 260c          	jrne	L7671
4960                     ; 3330           pSocket->pData = g_HtmlPageIOControl;
4962  b41d 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4963  b421 ef01          	ldw	(1,x),y
4964                     ; 3331           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4966  b423 90ae0c06      	ldw	y,#3078
4967  b427 ef03          	ldw	(3,x),y
4968  b429               L7671:
4969                     ; 3333         if (current_webpage == WEBPAGE_CONFIGURATION) {
4971  b429 4a            	dec	a
4972  b42a 2612          	jrne	L1641
4973                     ; 3334           pSocket->pData = g_HtmlPageConfiguration;
4975  b42c 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
4976  b430 ef01          	ldw	(1,x),y
4977                     ; 3335           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
4979  b432 90ae0c5c      	ldw	y,#3164
4980  b436 ef03          	ldw	(3,x),y
4981  b438 2004          	jra	L1641
4982  b43a               L7571:
4983                     ; 3355 	uip_len = 0;
4985  b43a 5f            	clrw	x
4986  b43b cf036f        	ldw	_uip_len,x
4987  b43e               L1641:
4988                     ; 3359     if (pSocket->nState == STATE_PARSEGET) {
4990  b43e 1e0b          	ldw	x,(OFST+7,sp)
4991  b440 f6            	ld	a,(x)
4992  b441 a10d          	cp	a,#13
4993  b443 2703ccb675    	jrne	L5771
4995  b448 ccb66e        	jra	L1002
4996  b44b               L7771:
4997                     ; 3388         if (pSocket->ParseState == PARSE_SLASH1) {
4999  b44b 1e0b          	ldw	x,(OFST+7,sp)
5000  b44d e60a          	ld	a,(10,x)
5001  b44f a106          	cp	a,#6
5002  b451 263c          	jrne	L5002
5003                     ; 3391           pSocket->ParseCmd = *pBuffer;
5005  b453 1e05          	ldw	x,(OFST+1,sp)
5006  b455 f6            	ld	a,(x)
5007  b456 1e0b          	ldw	x,(OFST+7,sp)
5008  b458 e708          	ld	(8,x),a
5009                     ; 3392           pSocket->nParseLeft--;
5011  b45a 6a06          	dec	(6,x)
5012                     ; 3393           pBuffer++;
5014  b45c 1e05          	ldw	x,(OFST+1,sp)
5015  b45e 5c            	incw	x
5016  b45f 1f05          	ldw	(OFST+1,sp),x
5017                     ; 3394 	  nBytes--;
5019  b461 1e09          	ldw	x,(OFST+5,sp)
5020  b463 5a            	decw	x
5021  b464 1f09          	ldw	(OFST+5,sp),x
5022                     ; 3395 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5024  b466 1e0b          	ldw	x,(OFST+7,sp)
5025  b468 e608          	ld	a,(8,x)
5026  b46a a12f          	cp	a,#47
5027  b46c 2605          	jrne	L7002
5028                     ; 3396 	    pSocket->ParseState = PARSE_NUM10;
5030  b46e a601          	ld	a,#1
5032  b470 ccb509        	jp	LC022
5033  b473               L7002:
5034                     ; 3400 	    current_webpage = WEBPAGE_IOCONTROL;
5036  b473 725f001a      	clr	_current_webpage
5037                     ; 3401             pSocket->pData = g_HtmlPageIOControl;
5039  b477 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5040  b47b ef01          	ldw	(1,x),y
5041                     ; 3402             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5043  b47d 90ae0c06      	ldw	y,#3078
5044  b481 ef03          	ldw	(3,x),y
5045                     ; 3403             pSocket->nParseLeft = 0; // This will cause the while() to exit
5047  b483 6f06          	clr	(6,x)
5048                     ; 3405             pSocket->nState = STATE_CONNECTED;
5050  b485 7f            	clr	(x)
5051                     ; 3406             pSocket->nPrevBytes = 0xFFFF;
5053  b486 90aeffff      	ldw	y,#65535
5054  b48a ef0b          	ldw	(11,x),y
5055  b48c ccb65d        	jra	L3102
5056  b48f               L5002:
5057                     ; 3410         else if (pSocket->ParseState == PARSE_NUM10) {
5059  b48f a101          	cp	a,#1
5060  b491 2640          	jrne	L5102
5061                     ; 3415 	  if (*pBuffer == ' ') {
5063  b493 1e05          	ldw	x,(OFST+1,sp)
5064  b495 f6            	ld	a,(x)
5065  b496 a120          	cp	a,#32
5066  b498 261e          	jrne	L7102
5067                     ; 3416 	    current_webpage = WEBPAGE_IOCONTROL;
5069  b49a 725f001a      	clr	_current_webpage
5070                     ; 3417             pSocket->pData = g_HtmlPageIOControl;
5072  b49e 1e0b          	ldw	x,(OFST+7,sp)
5073  b4a0 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5074  b4a4 ef01          	ldw	(1,x),y
5075                     ; 3418             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5077  b4a6 90ae0c06      	ldw	y,#3078
5078  b4aa ef03          	ldw	(3,x),y
5079                     ; 3419             pSocket->nParseLeft = 0;
5081  b4ac 6f06          	clr	(6,x)
5082                     ; 3421             pSocket->nState = STATE_CONNECTED;
5084  b4ae 7f            	clr	(x)
5085                     ; 3422             pSocket->nPrevBytes = 0xFFFF;
5087  b4af 90aeffff      	ldw	y,#65535
5088  b4b3 ef0b          	ldw	(11,x),y
5090  b4b5 ccb65d        	jra	L3102
5091  b4b8               L7102:
5092                     ; 3426 	  else if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5094  b4b8 a130          	cp	a,#48
5095  b4ba 2547          	jrult	L3302
5097  b4bc a13a          	cp	a,#58
5098  b4be 2443          	jruge	L3302
5099                     ; 3428             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5101  b4c0 97            	ld	xl,a
5102  b4c1 a60a          	ld	a,#10
5103  b4c3 42            	mul	x,a
5104  b4c4 9f            	ld	a,xl
5105  b4c5 1e0b          	ldw	x,(OFST+7,sp)
5106  b4c7 a0e0          	sub	a,#224
5107  b4c9 e709          	ld	(9,x),a
5108                     ; 3429 	    pSocket->ParseState = PARSE_NUM1;
5110  b4cb a602          	ld	a,#2
5111  b4cd e70a          	ld	(10,x),a
5112                     ; 3430             pSocket->nParseLeft--;
5114  b4cf 6a06          	dec	(6,x)
5115                     ; 3431             pBuffer++;
5116                     ; 3432 	    nBytes--;
5118  b4d1 2023          	jp	LC024
5119                     ; 3437             pSocket->nParseLeft = 0;
5120                     ; 3438             pSocket->ParseState = PARSE_FAIL;
5121  b4d3               L5102:
5122                     ; 3443         else if (pSocket->ParseState == PARSE_NUM1) {
5124  b4d3 a102          	cp	a,#2
5125  b4d5 2637          	jrne	L1302
5126                     ; 3444 	  if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5128  b4d7 1e05          	ldw	x,(OFST+1,sp)
5129  b4d9 f6            	ld	a,(x)
5130  b4da a130          	cp	a,#48
5131  b4dc 2525          	jrult	L3302
5133  b4de a13a          	cp	a,#58
5134  b4e0 2421          	jruge	L3302
5135                     ; 3446             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5137  b4e2 1605          	ldw	y,(OFST+1,sp)
5138  b4e4 1e0b          	ldw	x,(OFST+7,sp)
5139  b4e6 90f6          	ld	a,(y)
5140  b4e8 a030          	sub	a,#48
5141  b4ea eb09          	add	a,(9,x)
5142  b4ec e709          	ld	(9,x),a
5143                     ; 3447             pSocket->ParseState = PARSE_VAL;
5145  b4ee a604          	ld	a,#4
5146  b4f0 e70a          	ld	(10,x),a
5147                     ; 3448             pSocket->nParseLeft = 1; // Set to 1 so PARSE_VAL will be called
5149  b4f2 a601          	ld	a,#1
5150  b4f4 e706          	ld	(6,x),a
5151                     ; 3449             pBuffer++;
5153                     ; 3450 	    nBytes--;
5155  b4f6               LC024:
5157  b4f6 1e05          	ldw	x,(OFST+1,sp)
5158  b4f8 5c            	incw	x
5159  b4f9 1f05          	ldw	(OFST+1,sp),x
5161  b4fb 1e09          	ldw	x,(OFST+5,sp)
5162  b4fd 5a            	decw	x
5163  b4fe 1f09          	ldw	(OFST+5,sp),x
5165  b500 ccb65d        	jra	L3102
5166  b503               L3302:
5167                     ; 3455             pSocket->nParseLeft = 0;
5169                     ; 3456             pSocket->ParseState = PARSE_FAIL;
5172  b503 1e0b          	ldw	x,(OFST+7,sp)
5174  b505 a607          	ld	a,#7
5175  b507 6f06          	clr	(6,x)
5176  b509               LC022:
5177  b509 e70a          	ld	(10,x),a
5178  b50b ccb65d        	jra	L3102
5179  b50e               L1302:
5180                     ; 3460         else if (pSocket->ParseState == PARSE_VAL) {
5182  b50e a104          	cp	a,#4
5183  b510 26f9          	jrne	L3102
5184                     ; 3526           switch(pSocket->ParseNum)
5186  b512 e609          	ld	a,(9,x)
5188                     ; 3701 	      break;
5189  b514 a110          	cp	a,#16
5190  b516 2407          	jruge	L422
5191  b518 5f            	clrw	x
5192  b519 97            	ld	xl,a
5193  b51a 58            	sllw	x
5194  b51b de9d85        	ldw	x,(L622,x)
5195  b51e fc            	jp	(x)
5196  b51f               L422:
5197  b51f a037          	sub	a,#55
5198  b521 2603ccb5cd    	jreq	L1311
5199  b526 4a            	dec	a
5200  b527 2603ccb5d4    	jreq	L3311
5201  b52c a004          	sub	a,#4
5202  b52e 2603ccb5da    	jreq	L5311
5203  b533 4a            	dec	a
5204  b534 2603ccb5e9    	jreq	L7311
5205  b539 a004          	sub	a,#4
5206  b53b 2603ccb5f9    	jreq	L1411
5207  b540 4a            	dec	a
5208  b541 2603ccb604    	jreq	L3411
5209  b546 4a            	dec	a
5210  b547 2603ccb617    	jreq	L5411
5211  b54c a018          	sub	a,#24
5212  b54e 2603ccb62c    	jreq	L7411
5213  b553 a008          	sub	a,#8
5214  b555 2603ccb632    	jreq	L1511
5215  b55a ccb642        	jra	L3511
5216  b55d               L1701:
5217                     ; 3574 	    case 0:  IO_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
5219  b55d 7211016d      	bres	_IO_8to1,#0
5222  b561 ccb659        	jra	L5402
5223  b564               L3701:
5224                     ; 3575 	    case 1:  IO_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
5226  b564 7210016d      	bset	_IO_8to1,#0
5229  b568 ccb659        	jra	L5402
5230  b56b               L5701:
5231                     ; 3576 	    case 2:  IO_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
5233  b56b 7213016d      	bres	_IO_8to1,#1
5236  b56f ccb659        	jra	L5402
5237  b572               L7701:
5238                     ; 3577 	    case 3:  IO_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
5240  b572 7212016d      	bset	_IO_8to1,#1
5243  b576 ccb659        	jra	L5402
5244  b579               L1011:
5245                     ; 3578 	    case 4:  IO_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
5247  b579 7215016d      	bres	_IO_8to1,#2
5250  b57d ccb659        	jra	L5402
5251  b580               L3011:
5252                     ; 3579 	    case 5:  IO_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
5254  b580 7214016d      	bset	_IO_8to1,#2
5257  b584 ccb659        	jra	L5402
5258  b587               L5011:
5259                     ; 3580 	    case 6:  IO_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
5261  b587 7217016d      	bres	_IO_8to1,#3
5264  b58b ccb659        	jra	L5402
5265  b58e               L7011:
5266                     ; 3581 	    case 7:  IO_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
5268  b58e 7216016d      	bset	_IO_8to1,#3
5271  b592 ccb659        	jra	L5402
5272  b595               L1111:
5273                     ; 3582 	    case 8:  IO_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
5275  b595 7219016d      	bres	_IO_8to1,#4
5278  b599 ccb659        	jra	L5402
5279  b59c               L3111:
5280                     ; 3583 	    case 9:  IO_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
5282  b59c 7218016d      	bset	_IO_8to1,#4
5285  b5a0 ccb659        	jra	L5402
5286  b5a3               L5111:
5287                     ; 3584 	    case 10: IO_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
5289  b5a3 721b016d      	bres	_IO_8to1,#5
5292  b5a7 ccb659        	jra	L5402
5293  b5aa               L7111:
5294                     ; 3585 	    case 11: IO_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
5296  b5aa 721a016d      	bset	_IO_8to1,#5
5299  b5ae ccb659        	jra	L5402
5300  b5b1               L1211:
5301                     ; 3586 	    case 12: IO_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
5303  b5b1 721d016d      	bres	_IO_8to1,#6
5306  b5b5 ccb659        	jra	L5402
5307  b5b8               L3211:
5308                     ; 3587 	    case 13: IO_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
5310  b5b8 721c016d      	bset	_IO_8to1,#6
5313  b5bc ccb659        	jra	L5402
5314  b5bf               L5211:
5315                     ; 3588 	    case 14: IO_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
5317  b5bf 721f016d      	bres	_IO_8to1,#7
5320  b5c3 ccb659        	jra	L5402
5321  b5c6               L7211:
5322                     ; 3589 	    case 15: IO_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
5324  b5c6 721e016d      	bset	_IO_8to1,#7
5327  b5ca ccb659        	jra	L5402
5328  b5cd               L1311:
5329                     ; 3591 	    case 55:
5329                     ; 3592   	      IO_8to1 = (uint8_t)0xff; // Relays 1-8 ON
5331  b5cd 35ff016d      	mov	_IO_8to1,#255
5332                     ; 3593 	      break;
5334  b5d1 ccb659        	jra	L5402
5335  b5d4               L3311:
5336                     ; 3595 	    case 56:
5336                     ; 3596               IO_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
5338  b5d4 c7016d        	ld	_IO_8to1,a
5339                     ; 3597 	      break;
5341  b5d7 ccb659        	jra	L5402
5342  b5da               L5311:
5343                     ; 3604 	    case 60: // Show IO Control page
5343                     ; 3605 	      current_webpage = WEBPAGE_IOCONTROL;
5345  b5da c7001a        	ld	_current_webpage,a
5346                     ; 3606               pSocket->pData = g_HtmlPageIOControl;
5348  b5dd 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5349  b5e1 ef01          	ldw	(1,x),y
5350                     ; 3607               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5352  b5e3 90ae0c06      	ldw	y,#3078
5353                     ; 3608               pSocket->nState = STATE_CONNECTED;
5354                     ; 3609               pSocket->nPrevBytes = 0xFFFF;
5355                     ; 3610 	      break;
5357  b5e7 2029          	jp	LC021
5358  b5e9               L7311:
5359                     ; 3612 	    case 61: // Show Configuration page
5359                     ; 3613 	      current_webpage = WEBPAGE_CONFIGURATION;
5361  b5e9 3501001a      	mov	_current_webpage,#1
5362                     ; 3614               pSocket->pData = g_HtmlPageConfiguration;
5364  b5ed 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5365  b5f1 ef01          	ldw	(1,x),y
5366                     ; 3615               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5368  b5f3 90ae0c5c      	ldw	y,#3164
5369                     ; 3616               pSocket->nState = STATE_CONNECTED;
5370                     ; 3617               pSocket->nPrevBytes = 0xFFFF;
5371                     ; 3618 	      break;
5373  b5f7 2019          	jp	LC021
5374  b5f9               L1411:
5375                     ; 3638 	    case 65: // Flash LED for diagnostics
5375                     ; 3639 	      // XXXXXXXXXXXXXXXXXXXXXX
5375                     ; 3640 	      // XXXXXXXXXXXXXXXXXXXXXX
5375                     ; 3641 	      // XXXXXXXXXXXXXXXXXXXXXX
5375                     ; 3642 	      debugflash();
5377  b5f9 cdcf0a        	call	_debugflash
5379                     ; 3643 	      debugflash();
5381  b5fc cdcf0a        	call	_debugflash
5383                     ; 3644 	      debugflash();
5385  b5ff cdcf0a        	call	_debugflash
5387                     ; 3648 	      break;
5389  b602 2055          	jra	L5402
5390  b604               L3411:
5391                     ; 3651             case 66: // Show statistics page
5391                     ; 3652 	      current_webpage = WEBPAGE_STATS;
5393  b604 3505001a      	mov	_current_webpage,#5
5394                     ; 3653               pSocket->pData = g_HtmlPageStats;
5396  b608 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5397  b60c ef01          	ldw	(1,x),y
5398                     ; 3654               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5400  b60e 90ae0175      	ldw	y,#373
5401                     ; 3655               pSocket->nState = STATE_CONNECTED;
5403  b612               LC021:
5404  b612 ef03          	ldw	(3,x),y
5408  b614 f7            	ld	(x),a
5409                     ; 3656               pSocket->nPrevBytes = 0xFFFF;
5410                     ; 3657 	      break;
5412  b615 203c          	jp	LC019
5413  b617               L5411:
5414                     ; 3659             case 67: // Clear statistics
5414                     ; 3660 	      uip_init_stats();
5416  b617 cde80e        	call	_uip_init_stats
5418                     ; 3675 	      current_webpage = WEBPAGE_STATS;
5420  b61a 3505001a      	mov	_current_webpage,#5
5421                     ; 3676               pSocket->pData = g_HtmlPageStats;
5423  b61e 1e0b          	ldw	x,(OFST+7,sp)
5424  b620 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5425  b624 ef01          	ldw	(1,x),y
5426                     ; 3677               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5428  b626 90ae0175      	ldw	y,#373
5429                     ; 3678               pSocket->nState = STATE_CONNECTED;
5430                     ; 3679               pSocket->nPrevBytes = 0xFFFF;
5431                     ; 3680 	      break;
5433  b62a 2024          	jp	LC020
5434  b62c               L7411:
5435                     ; 3683 	    case 91: // Reboot
5435                     ; 3684 	      user_reboot_request = 1;
5437  b62c 3501010a      	mov	_user_reboot_request,#1
5438                     ; 3685 	      break;
5440  b630 2027          	jra	L5402
5441  b632               L1511:
5442                     ; 3687             case 99: // Show simplified IO state page
5442                     ; 3688 	      current_webpage = WEBPAGE_RSTATE;
5444  b632 3506001a      	mov	_current_webpage,#6
5445                     ; 3689               pSocket->pData = g_HtmlPageRstate;
5447  b636 90ae9a62      	ldw	y,#L12_g_HtmlPageRstate
5448  b63a ef01          	ldw	(1,x),y
5449                     ; 3690               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
5451  b63c 90ae0087      	ldw	y,#135
5452                     ; 3691               pSocket->nState = STATE_CONNECTED;
5453                     ; 3692               pSocket->nPrevBytes = 0xFFFF;
5454                     ; 3693 	      break;
5456  b640 20d0          	jp	LC021
5457  b642               L3511:
5458                     ; 3695 	    default: // Show IO Control page
5458                     ; 3696 	      current_webpage = WEBPAGE_IOCONTROL;
5460  b642 725f001a      	clr	_current_webpage
5461                     ; 3697               pSocket->pData = g_HtmlPageIOControl;
5463  b646 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5464  b64a ef01          	ldw	(1,x),y
5465                     ; 3698               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5467  b64c 90ae0c06      	ldw	y,#3078
5468                     ; 3699               pSocket->nState = STATE_CONNECTED;
5470  b650               LC020:
5471  b650 ef03          	ldw	(3,x),y
5473  b652 7f            	clr	(x)
5474                     ; 3700               pSocket->nPrevBytes = 0xFFFF;
5476  b653               LC019:
5482  b653 90aeffff      	ldw	y,#65535
5483  b657 ef0b          	ldw	(11,x),y
5484                     ; 3701 	      break;
5486  b659               L5402:
5487                     ; 3703           pSocket->nParseLeft = 0;
5489  b659 1e0b          	ldw	x,(OFST+7,sp)
5490  b65b 6f06          	clr	(6,x)
5491  b65d               L3102:
5492                     ; 3706         if (pSocket->ParseState == PARSE_FAIL) {
5494  b65d 1e0b          	ldw	x,(OFST+7,sp)
5495  b65f e60a          	ld	a,(10,x)
5496  b661 a107          	cp	a,#7
5497                     ; 3711           pSocket->nState = STATE_SENDHEADER;
5498                     ; 3712 	  break;
5500  b663 2704          	jreq	LC025
5501                     ; 3715         if (pSocket->nParseLeft == 0) {
5503  b665 e606          	ld	a,(6,x)
5504  b667 2605          	jrne	L1002
5505                     ; 3718           pSocket->nState = STATE_SENDHEADER;
5507  b669               LC025:
5509  b669 a60b          	ld	a,#11
5510  b66b f7            	ld	(x),a
5511                     ; 3719           break;
5513  b66c 2007          	jra	L5771
5514  b66e               L1002:
5515                     ; 3387       while (nBytes != 0) {
5517  b66e 1e09          	ldw	x,(OFST+5,sp)
5518  b670 2703ccb44b    	jrne	L7771
5519  b675               L5771:
5520                     ; 3724     if (pSocket->nState == STATE_SENDHEADER) {
5522  b675 1e0b          	ldw	x,(OFST+7,sp)
5523  b677 f6            	ld	a,(x)
5524  b678 a10b          	cp	a,#11
5525  b67a 261c          	jrne	L5511
5526                     ; 3730       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5528  b67c cda471        	call	_adjust_template_size
5530  b67f 89            	pushw	x
5531  b680 ce0371        	ldw	x,_uip_appdata
5532  b683 cda5d0        	call	L5_CopyHttpHeader
5534  b686 5b02          	addw	sp,#2
5535  b688 89            	pushw	x
5536  b689 ce0371        	ldw	x,_uip_appdata
5537  b68c cdf185        	call	_uip_send
5539  b68f 85            	popw	x
5540                     ; 3731       pSocket->nState = STATE_SENDDATA;
5542  b690 1e0b          	ldw	x,(OFST+7,sp)
5543  b692 a60c          	ld	a,#12
5544  b694 f7            	ld	(x),a
5545                     ; 3732       return;
5547  b695 ccade0        	jra	L452
5548  b698               L5511:
5549                     ; 3735     senddata:
5549                     ; 3736     if (pSocket->nState == STATE_SENDDATA) {
5551  b698 1e0b          	ldw	x,(OFST+7,sp)
5552  b69a f6            	ld	a,(x)
5553  b69b a10c          	cp	a,#12
5554  b69d 26f6          	jrne	L452
5555                     ; 3743       if (pSocket->nDataLeft == 0) {
5557  b69f e604          	ld	a,(4,x)
5558  b6a1 ea03          	or	a,(3,x)
5559  b6a3 2605          	jrne	L7502
5560                     ; 3745         nBufSize = 0;
5562  b6a5 5f            	clrw	x
5563  b6a6 1f02          	ldw	(OFST-2,sp),x
5566  b6a8 202f          	jra	L1602
5567  b6aa               L7502:
5568                     ; 3748         pSocket->nPrevBytes = pSocket->nDataLeft;
5570  b6aa 9093          	ldw	y,x
5571  b6ac 90ee03        	ldw	y,(3,y)
5572  b6af ef0b          	ldw	(11,x),y
5573                     ; 3749         nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5575  b6b1 ce036d        	ldw	x,_uip_conn
5576  b6b4 ee12          	ldw	x,(18,x)
5577  b6b6 89            	pushw	x
5578  b6b7 1e0d          	ldw	x,(OFST+9,sp)
5579  b6b9 1c0003        	addw	x,#3
5580  b6bc 89            	pushw	x
5581  b6bd 1e0f          	ldw	x,(OFST+11,sp)
5582  b6bf 5c            	incw	x
5583  b6c0 89            	pushw	x
5584  b6c1 ce0371        	ldw	x,_uip_appdata
5585  b6c4 cda69c        	call	L7_CopyHttpData
5587  b6c7 5b06          	addw	sp,#6
5588  b6c9 1f02          	ldw	(OFST-2,sp),x
5590                     ; 3750         pSocket->nPrevBytes -= pSocket->nDataLeft;
5592  b6cb 1e0b          	ldw	x,(OFST+7,sp)
5593  b6cd e60c          	ld	a,(12,x)
5594  b6cf e004          	sub	a,(4,x)
5595  b6d1 e70c          	ld	(12,x),a
5596  b6d3 e60b          	ld	a,(11,x)
5597  b6d5 e203          	sbc	a,(3,x)
5598  b6d7 e70b          	ld	(11,x),a
5599  b6d9               L1602:
5600                     ; 3753       if (nBufSize == 0) {
5602  b6d9 1e02          	ldw	x,(OFST-2,sp)
5603  b6db 2621          	jrne	LC016
5604                     ; 3755         uip_close();
5606  b6dd               LC017:
5608  b6dd 351002c4      	mov	_uip_flags,#16
5610  b6e1 ccade0        	jra	L452
5611                     ; 3759         uip_send(uip_appdata, nBufSize);
5613                     ; 3761       return;
5615  b6e4               L7621:
5616                     ; 3765   else if (uip_rexmit()) {
5618  b6e4 720502c475    	btjf	_uip_flags,#2,L5621
5619                     ; 3766     if (pSocket->nPrevBytes == 0xFFFF) {
5621  b6e9 160b          	ldw	y,(OFST+7,sp)
5622  b6eb 90ee0b        	ldw	y,(11,y)
5623  b6ee 905c          	incw	y
5624  b6f0 2617          	jrne	L3702
5625                     ; 3768       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5627  b6f2 cda471        	call	_adjust_template_size
5629  b6f5 89            	pushw	x
5630  b6f6 ce0371        	ldw	x,_uip_appdata
5631  b6f9 cda5d0        	call	L5_CopyHttpHeader
5633  b6fc 5b02          	addw	sp,#2
5635  b6fe               LC016:
5637  b6fe 89            	pushw	x
5638  b6ff ce0371        	ldw	x,_uip_appdata
5639  b702 cdf185        	call	_uip_send
5640  b705 85            	popw	x
5642  b706 ccade0        	jra	L452
5643  b709               L3702:
5644                     ; 3771       pSocket->pData -= pSocket->nPrevBytes;
5646  b709 1e0b          	ldw	x,(OFST+7,sp)
5647  b70b e602          	ld	a,(2,x)
5648  b70d e00c          	sub	a,(12,x)
5649  b70f e702          	ld	(2,x),a
5650  b711 e601          	ld	a,(1,x)
5651  b713 e20b          	sbc	a,(11,x)
5652  b715 e701          	ld	(1,x),a
5653                     ; 3772       pSocket->nDataLeft += pSocket->nPrevBytes;
5655  b717 e604          	ld	a,(4,x)
5656  b719 eb0c          	add	a,(12,x)
5657  b71b e704          	ld	(4,x),a
5658  b71d e603          	ld	a,(3,x)
5659  b71f e90b          	adc	a,(11,x)
5660                     ; 3773       pSocket->nPrevBytes = pSocket->nDataLeft;
5662  b721 9093          	ldw	y,x
5663  b723 e703          	ld	(3,x),a
5664  b725 90ee03        	ldw	y,(3,y)
5665  b728 ef0b          	ldw	(11,x),y
5666                     ; 3774       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5668  b72a ce036d        	ldw	x,_uip_conn
5669  b72d ee12          	ldw	x,(18,x)
5670  b72f 89            	pushw	x
5671  b730 1e0d          	ldw	x,(OFST+9,sp)
5672  b732 1c0003        	addw	x,#3
5673  b735 89            	pushw	x
5674  b736 1e0f          	ldw	x,(OFST+11,sp)
5675  b738 5c            	incw	x
5676  b739 89            	pushw	x
5677  b73a ce0371        	ldw	x,_uip_appdata
5678  b73d cda69c        	call	L7_CopyHttpData
5680  b740 5b06          	addw	sp,#6
5681  b742 1f02          	ldw	(OFST-2,sp),x
5683                     ; 3775       pSocket->nPrevBytes -= pSocket->nDataLeft;
5685  b744 1e0b          	ldw	x,(OFST+7,sp)
5686  b746 e60c          	ld	a,(12,x)
5687  b748 e004          	sub	a,(4,x)
5688  b74a e70c          	ld	(12,x),a
5689  b74c e60b          	ld	a,(11,x)
5690  b74e e203          	sbc	a,(3,x)
5691  b750 e70b          	ld	(11,x),a
5692                     ; 3776       if (nBufSize == 0) {
5694  b752 1e02          	ldw	x,(OFST-2,sp)
5695                     ; 3778         uip_close();
5697  b754 2787          	jreq	LC017
5698                     ; 3782         uip_send(uip_appdata, nBufSize);
5700  b756 89            	pushw	x
5701  b757 ce0371        	ldw	x,_uip_appdata
5702  b75a cdf185        	call	_uip_send
5704  b75d 85            	popw	x
5705                     ; 3785     return;
5707  b75e               L5621:
5708                     ; 3787 }
5710  b75e ccade0        	jra	L452
5744                     ; 3790 void clear_saved_postpartial_all(void)
5744                     ; 3791 {
5745                     .text:	section	.text,new
5746  b761               _clear_saved_postpartial_all:
5748  b761 88            	push	a
5749       00000001      OFST:	set	1
5752                     ; 3793   for (i=0; i<24; i++) saved_postpartial[i] = '\0';
5754  b762 4f            	clr	a
5755  b763 6b01          	ld	(OFST+0,sp),a
5757  b765               L7112:
5760  b765 5f            	clrw	x
5761  b766 97            	ld	xl,a
5762  b767 724f0041      	clr	(_saved_postpartial,x)
5765  b76b 0c01          	inc	(OFST+0,sp)
5769  b76d 7b01          	ld	a,(OFST+0,sp)
5770  b76f a118          	cp	a,#24
5771  b771 25f2          	jrult	L7112
5772                     ; 3794 }
5775  b773 84            	pop	a
5776  b774 81            	ret	
5810                     ; 3797 void clear_saved_postpartial_data(void)
5810                     ; 3798 {
5811                     .text:	section	.text,new
5812  b775               _clear_saved_postpartial_data:
5814  b775 88            	push	a
5815       00000001      OFST:	set	1
5818                     ; 3800   for (i=4; i<24; i++) saved_postpartial[i] = '\0';
5820  b776 a604          	ld	a,#4
5821  b778 6b01          	ld	(OFST+0,sp),a
5823  b77a               L1412:
5826  b77a 5f            	clrw	x
5827  b77b 97            	ld	xl,a
5828  b77c 724f0041      	clr	(_saved_postpartial,x)
5831  b780 0c01          	inc	(OFST+0,sp)
5835  b782 7b01          	ld	a,(OFST+0,sp)
5836  b784 a118          	cp	a,#24
5837  b786 25f2          	jrult	L1412
5838                     ; 3801 }
5841  b788 84            	pop	a
5842  b789 81            	ret	
5876                     ; 3804 void clear_saved_postpartial_previous(void)
5876                     ; 3805 {
5877                     .text:	section	.text,new
5878                     _clear_saved_postpartial_previous:
5880                     	push	a
5881       00000001      OFST:	set	1
5884                     ; 3807   for (i=0; i<24; i++) saved_postpartial_previous[i] = '\0';
5886                     	clr	a
5887                     	ld	(OFST+0,sp),a
5889                     L3612:
5892                     	clrw	x
5893                     	ld	xl,a
5894                     	clr	(_saved_postpartial_previous,x)
5897                     	inc	(OFST+0,sp)
5901                     	ld	a,(OFST+0,sp)
5902                     	cp	a,#24
5903                     	jrult	L3612
5904                     ; 3808 }
5907                     	pop	a
5908                     	ret	
5998                     ; 3811 void parse_POST_string(uint8_t curr_ParseCmd, uint8_t num_chars)
5998                     ; 3812 {
5999                     .text:	section	.text,new
6000  b78a               _parse_POST_string:
6002  b78a 89            	pushw	x
6003  b78b 5217          	subw	sp,#23
6004       00000017      OFST:	set	23
6007                     ; 3835   amp_found = 0;
6009  b78d 0f02          	clr	(OFST-21,sp)
6011                     ; 3836   for (i=0; i<20; i++) tmp_Pending[i] = '\0';
6013  b78f 0f17          	clr	(OFST+0,sp)
6015  b791               L3222:
6018  b791 96            	ldw	x,sp
6019  b792 1c0003        	addw	x,#OFST-20
6020  b795 9f            	ld	a,xl
6021  b796 5e            	swapw	x
6022  b797 1b17          	add	a,(OFST+0,sp)
6023  b799 2401          	jrnc	L662
6024  b79b 5c            	incw	x
6025  b79c               L662:
6026  b79c 02            	rlwa	x,a
6027  b79d 7f            	clr	(x)
6030  b79e 0c17          	inc	(OFST+0,sp)
6034  b7a0 7b17          	ld	a,(OFST+0,sp)
6035  b7a2 a114          	cp	a,#20
6036  b7a4 25eb          	jrult	L3222
6037                     ; 3838   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6039  b7a6 c60029        	ld	a,_saved_postpartial_previous
6040  b7a9 1118          	cp	a,(OFST+1,sp)
6041  b7ab 260a          	jrne	L1322
6042                     ; 3841     saved_postpartial_previous[0] = '\0';
6044  b7ad 725f0029      	clr	_saved_postpartial_previous
6045                     ; 3847     frag_flag = 1; // frag_flag is used to manage the TCP Fragment restore
6047  b7b1 a601          	ld	a,#1
6048  b7b3 6b17          	ld	(OFST+0,sp),a
6051  b7b5 2005          	jra	L3322
6052  b7b7               L1322:
6053                     ; 3851     frag_flag = 0;
6055  b7b7 0f17          	clr	(OFST+0,sp)
6057                     ; 3855     clear_saved_postpartial_data(); // Clear [4] and higher
6059  b7b9 cdb775        	call	_clear_saved_postpartial_data
6061  b7bc               L3322:
6062                     ; 3876   resume = 0;
6064  b7bc 0f01          	clr	(OFST-22,sp)
6066                     ; 3877   if (frag_flag == 1) {
6068  b7be 7b17          	ld	a,(OFST+0,sp)
6069  b7c0 4a            	dec	a
6070  b7c1 263f          	jrne	L5322
6071                     ; 3879     for (i = 0; i < num_chars; i++) {
6073  b7c3 6b17          	ld	(OFST+0,sp),a
6076  b7c5 2033          	jra	L3422
6077  b7c7               L7322:
6078                     ; 3888       if (saved_postpartial_previous[4+i] != '\0') {
6080  b7c7 5f            	clrw	x
6081  b7c8 97            	ld	xl,a
6082  b7c9 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6083  b7cd 271b          	jreq	L7422
6084                     ; 3889         tmp_Pending[i] = saved_postpartial_previous[4+i];
6086  b7cf 96            	ldw	x,sp
6087  b7d0 1c0003        	addw	x,#OFST-20
6088  b7d3 9f            	ld	a,xl
6089  b7d4 5e            	swapw	x
6090  b7d5 1b17          	add	a,(OFST+0,sp)
6091  b7d7 2401          	jrnc	L272
6092  b7d9 5c            	incw	x
6093  b7da               L272:
6094  b7da 02            	rlwa	x,a
6095  b7db 7b17          	ld	a,(OFST+0,sp)
6096  b7dd 905f          	clrw	y
6097  b7df 9097          	ld	yl,a
6098  b7e1 90d6002d      	ld	a,(_saved_postpartial_previous+4,y)
6099  b7e5 f7            	ld	(x),a
6101                     ; 3879     for (i = 0; i < num_chars; i++) {
6103  b7e6 0c17          	inc	(OFST+0,sp)
6105  b7e8 2010          	jra	L3422
6106  b7ea               L7422:
6107                     ; 3892         resume = i;
6109  b7ea 6b01          	ld	(OFST-22,sp),a
6111                     ; 3893         break;
6112  b7ec               L5422:
6113                     ; 3896     if (*tmp_pBuffer == '&') {
6115  b7ec 72c60025      	ld	a,[_tmp_pBuffer.w]
6116  b7f0 a126          	cp	a,#38
6117  b7f2 260e          	jrne	L5322
6118                     ; 3900       amp_found = 1;
6120  b7f4 a601          	ld	a,#1
6121  b7f6 6b02          	ld	(OFST-21,sp),a
6123  b7f8 2008          	jra	L5322
6124  b7fa               L3422:
6125                     ; 3879     for (i = 0; i < num_chars; i++) {
6127  b7fa 7b17          	ld	a,(OFST+0,sp)
6128  b7fc 1119          	cp	a,(OFST+2,sp)
6129  b7fe 25c7          	jrult	L7322
6130  b800 20ea          	jra	L5422
6131  b802               L5322:
6132                     ; 3912   if (amp_found == 0) {
6134  b802 7b02          	ld	a,(OFST-21,sp)
6135  b804 2703ccb88e    	jrne	L5522
6136                     ; 3913     for (i = resume; i < num_chars; i++) {
6138  b809 7b01          	ld	a,(OFST-22,sp)
6139  b80b 6b17          	ld	(OFST+0,sp),a
6142  b80d 207b          	jra	L3622
6143  b80f               L7522:
6144                     ; 3916       if (amp_found == 0) {
6146  b80f 7b02          	ld	a,(OFST-21,sp)
6147  b811 265d          	jrne	L7622
6148                     ; 3919         if (*tmp_pBuffer == '&') {
6150  b813 72c60025      	ld	a,[_tmp_pBuffer.w]
6151  b817 a126          	cp	a,#38
6152  b819 2606          	jrne	L1722
6153                     ; 3922           amp_found = 1;
6155  b81b a601          	ld	a,#1
6156  b81d 6b02          	ld	(OFST-21,sp),a
6159  b81f 204f          	jra	L7622
6160  b821               L1722:
6161                     ; 3925           tmp_Pending[i] = *tmp_pBuffer;
6163  b821 96            	ldw	x,sp
6164  b822 1c0003        	addw	x,#OFST-20
6165  b825 9f            	ld	a,xl
6166  b826 5e            	swapw	x
6167  b827 1b17          	add	a,(OFST+0,sp)
6168  b829 2401          	jrnc	L472
6169  b82b 5c            	incw	x
6170  b82c               L472:
6171  b82c 90ce0025      	ldw	y,_tmp_pBuffer
6172  b830 02            	rlwa	x,a
6173  b831 90f6          	ld	a,(y)
6174  b833 f7            	ld	(x),a
6175                     ; 3926           saved_postpartial[4+i] = *tmp_pBuffer;
6177  b834 5f            	clrw	x
6178  b835 7b17          	ld	a,(OFST+0,sp)
6179  b837 97            	ld	xl,a
6180  b838 90f6          	ld	a,(y)
6181  b83a d70045        	ld	(_saved_postpartial+4,x),a
6182                     ; 3927           tmp_nParseLeft--;
6184  b83d 725a0022      	dec	_tmp_nParseLeft
6185                     ; 3928           saved_nparseleft = tmp_nParseLeft;
6187                     ; 3929           tmp_pBuffer++;
6189  b841 93            	ldw	x,y
6190  b842 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6191  b847 5c            	incw	x
6192  b848 cf0025        	ldw	_tmp_pBuffer,x
6193                     ; 3930           tmp_nBytes--;
6195  b84b ce0023        	ldw	x,_tmp_nBytes
6196  b84e 5a            	decw	x
6197  b84f cf0023        	ldw	_tmp_nBytes,x
6198                     ; 3931           if (tmp_nBytes == 0) {
6200  b852 261c          	jrne	L7622
6201                     ; 3935             if (i == (num_chars - 1)) {
6203  b854 7b19          	ld	a,(OFST+2,sp)
6204  b856 5f            	clrw	x
6205  b857 97            	ld	xl,a
6206  b858 5a            	decw	x
6207  b859 7b17          	ld	a,(OFST+0,sp)
6208  b85b 905f          	clrw	y
6209  b85d 9097          	ld	yl,a
6210  b85f 90bf07        	ldw	c_y,y
6211  b862 b307          	cpw	x,c_y
6212  b864 2604          	jrne	L7722
6213                     ; 3940               saved_parsestate = PARSE_DELIM;
6215  b866 3505005a      	mov	_saved_parsestate,#5
6216  b86a               L7722:
6217                     ; 3942             break_while = 1;
6219  b86a 35010021      	mov	_break_while,#1
6220                     ; 3943             break; // This will break the for() loop. But we need to break the
6222  b86e 201e          	jra	L5522
6223  b870               L7622:
6224                     ; 3949       if (amp_found == 1) {
6226  b870 7b02          	ld	a,(OFST-21,sp)
6227  b872 4a            	dec	a
6228  b873 2611          	jrne	L1032
6229                     ; 3952         tmp_Pending[i] = '\0';
6231  b875 96            	ldw	x,sp
6232  b876 1c0003        	addw	x,#OFST-20
6233  b879 9f            	ld	a,xl
6234  b87a 5e            	swapw	x
6235  b87b 1b17          	add	a,(OFST+0,sp)
6236  b87d 2401          	jrnc	L672
6237  b87f 5c            	incw	x
6238  b880               L672:
6239  b880 02            	rlwa	x,a
6240  b881 7f            	clr	(x)
6241                     ; 3961         tmp_nParseLeft--;
6243  b882 725a0022      	dec	_tmp_nParseLeft
6244  b886               L1032:
6245                     ; 3913     for (i = resume; i < num_chars; i++) {
6247  b886 0c17          	inc	(OFST+0,sp)
6249  b888 7b17          	ld	a,(OFST+0,sp)
6250  b88a               L3622:
6253  b88a 1119          	cp	a,(OFST+2,sp)
6254  b88c 2581          	jrult	L7522
6255  b88e               L5522:
6256                     ; 3982   if (break_while == 0) clear_saved_postpartial_all();
6258  b88e c60021        	ld	a,_break_while
6259  b891 2603          	jrne	L3032
6262  b893 cdb761        	call	_clear_saved_postpartial_all
6264  b896               L3032:
6265                     ; 3985   if (curr_ParseCmd == 'a') {
6267  b896 7b18          	ld	a,(OFST+1,sp)
6268  b898 a161          	cp	a,#97
6269  b89a 2622          	jrne	L5032
6270                     ; 3986     for (i=0; i<num_chars; i++) Pending_devicename[i] = tmp_Pending[i];
6272  b89c 0f17          	clr	(OFST+0,sp)
6275  b89e 2016          	jra	L3132
6276  b8a0               L7032:
6279  b8a0 5f            	clrw	x
6280  b8a1 97            	ld	xl,a
6281  b8a2 89            	pushw	x
6282  b8a3 96            	ldw	x,sp
6283  b8a4 1c0005        	addw	x,#OFST-18
6284  b8a7 9f            	ld	a,xl
6285  b8a8 5e            	swapw	x
6286  b8a9 1b19          	add	a,(OFST+2,sp)
6287  b8ab 2401          	jrnc	L203
6288  b8ad 5c            	incw	x
6289  b8ae               L203:
6290  b8ae 02            	rlwa	x,a
6291  b8af f6            	ld	a,(x)
6292  b8b0 85            	popw	x
6293  b8b1 d70125        	ld	(_Pending_devicename,x),a
6296  b8b4 0c17          	inc	(OFST+0,sp)
6298  b8b6               L3132:
6301  b8b6 7b17          	ld	a,(OFST+0,sp)
6302  b8b8 1119          	cp	a,(OFST+2,sp)
6303  b8ba 25e4          	jrult	L7032
6305  b8bc 204a          	jra	L7132
6306  b8be               L5032:
6307                     ; 3991   else if (curr_ParseCmd == 'l') {
6309  b8be a16c          	cp	a,#108
6310  b8c0 2622          	jrne	L1232
6311                     ; 3992     for (i=0; i<num_chars; i++) Pending_mqtt_username[i] = tmp_Pending[i];
6313  b8c2 0f17          	clr	(OFST+0,sp)
6316  b8c4 2016          	jra	L7232
6317  b8c6               L3232:
6320  b8c6 5f            	clrw	x
6321  b8c7 97            	ld	xl,a
6322  b8c8 89            	pushw	x
6323  b8c9 96            	ldw	x,sp
6324  b8ca 1c0005        	addw	x,#OFST-18
6325  b8cd 9f            	ld	a,xl
6326  b8ce 5e            	swapw	x
6327  b8cf 1b19          	add	a,(OFST+2,sp)
6328  b8d1 2401          	jrnc	L403
6329  b8d3 5c            	incw	x
6330  b8d4               L403:
6331  b8d4 02            	rlwa	x,a
6332  b8d5 f6            	ld	a,(x)
6333  b8d6 85            	popw	x
6334  b8d7 d70152        	ld	(_Pending_mqtt_username,x),a
6337  b8da 0c17          	inc	(OFST+0,sp)
6339  b8dc               L7232:
6342  b8dc 7b17          	ld	a,(OFST+0,sp)
6343  b8de 1119          	cp	a,(OFST+2,sp)
6344  b8e0 25e4          	jrult	L3232
6346  b8e2 2024          	jra	L7132
6347  b8e4               L1232:
6348                     ; 3996   else if (curr_ParseCmd == 'm') {
6350  b8e4 a16d          	cp	a,#109
6351  b8e6 2620          	jrne	L7132
6352                     ; 3997     for (i=0; i<num_chars; i++) Pending_mqtt_password[i] = tmp_Pending[i];
6354  b8e8 0f17          	clr	(OFST+0,sp)
6357  b8ea 2016          	jra	L3432
6358  b8ec               L7332:
6361  b8ec 5f            	clrw	x
6362  b8ed 97            	ld	xl,a
6363  b8ee 89            	pushw	x
6364  b8ef 96            	ldw	x,sp
6365  b8f0 1c0005        	addw	x,#OFST-18
6366  b8f3 9f            	ld	a,xl
6367  b8f4 5e            	swapw	x
6368  b8f5 1b19          	add	a,(OFST+2,sp)
6369  b8f7 2401          	jrnc	L603
6370  b8f9 5c            	incw	x
6371  b8fa               L603:
6372  b8fa 02            	rlwa	x,a
6373  b8fb f6            	ld	a,(x)
6374  b8fc 85            	popw	x
6375  b8fd d70147        	ld	(_Pending_mqtt_password,x),a
6378  b900 0c17          	inc	(OFST+0,sp)
6380  b902               L3432:
6383  b902 7b17          	ld	a,(OFST+0,sp)
6384  b904 1119          	cp	a,(OFST+2,sp)
6385  b906 25e4          	jrult	L7332
6386  b908               L7132:
6387                     ; 4000 }
6390  b908 5b19          	addw	sp,#25
6391  b90a 81            	ret	
6465                     	switch	.const
6466  9da5               L023:
6467  9da5 b9e9          	dc.w	L7432
6468  9da7 b9f0          	dc.w	L1532
6469  9da9 b9f7          	dc.w	L3532
6470  9dab b9fe          	dc.w	L5532
6471  9dad ba05          	dc.w	L7532
6472  9daf ba0c          	dc.w	L1632
6473  9db1 ba13          	dc.w	L3632
6474  9db3 ba1a          	dc.w	L5632
6475  9db5 ba21          	dc.w	L7632
6476  9db7 ba28          	dc.w	L1732
6477  9db9 ba2f          	dc.w	L3732
6478  9dbb ba36          	dc.w	L5732
6479  9dbd ba3d          	dc.w	L7732
6480  9dbf ba44          	dc.w	L1042
6481  9dc1 ba4b          	dc.w	L3042
6482  9dc3 ba52          	dc.w	L5042
6483                     ; 4003 void parse_POST_address(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6483                     ; 4004 {
6484                     .text:	section	.text,new
6485  b90b               _parse_POST_address:
6487  b90b 89            	pushw	x
6488  b90c 89            	pushw	x
6489       00000002      OFST:	set	2
6492                     ; 4007   alpha[0] = '-';
6494  b90d 352d001b      	mov	_alpha,#45
6495                     ; 4008   alpha[1] = '-';
6497  b911 352d001c      	mov	_alpha+1,#45
6498                     ; 4009   alpha[2] = '-';
6500  b915 352d001d      	mov	_alpha+2,#45
6501                     ; 4012   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6503  b919 9e            	ld	a,xh
6504  b91a c10029        	cp	a,_saved_postpartial_previous
6505  b91d 2624          	jrne	L5342
6506                     ; 4015     saved_postpartial_previous[0] = '\0';
6508  b91f 725f0029      	clr	_saved_postpartial_previous
6509                     ; 4022     if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
6511  b923 c6002d        	ld	a,_saved_postpartial_previous+4
6512  b926 2705          	jreq	L7342
6515  b928 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
6516  b92d               L7342:
6517                     ; 4023     if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
6519  b92d c6002e        	ld	a,_saved_postpartial_previous+5
6520  b930 2705          	jreq	L1442
6523  b932 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
6524  b937               L1442:
6525                     ; 4024     if (saved_postpartial_previous[6] != '\0') alpha[2] = saved_postpartial_previous[6];
6527  b937 c6002f        	ld	a,_saved_postpartial_previous+6
6528  b93a 270a          	jreq	L5442
6531  b93c 55002f001d    	mov	_alpha+2,_saved_postpartial_previous+6
6532  b941 2003          	jra	L5442
6533  b943               L5342:
6534                     ; 4030     clear_saved_postpartial_data(); // Clear [4] and higher
6536  b943 cdb775        	call	_clear_saved_postpartial_data
6538  b946               L5442:
6539                     ; 4033   for (i=0; i<3; i++) {
6541  b946 4f            	clr	a
6542  b947 6b02          	ld	(OFST+0,sp),a
6544  b949               L7442:
6545                     ; 4039     if (alpha[i] == '-') {
6547  b949 5f            	clrw	x
6548  b94a 97            	ld	xl,a
6549  b94b d6001b        	ld	a,(_alpha,x)
6550  b94e a12d          	cp	a,#45
6551  b950 263c          	jrne	L5542
6552                     ; 4040       alpha[i] = (uint8_t)(*tmp_pBuffer);
6554  b952 7b02          	ld	a,(OFST+0,sp)
6555  b954 5f            	clrw	x
6556  b955 90ce0025      	ldw	y,_tmp_pBuffer
6557  b959 97            	ld	xl,a
6558  b95a 90f6          	ld	a,(y)
6559  b95c d7001b        	ld	(_alpha,x),a
6560                     ; 4041       saved_postpartial[i+4] = (uint8_t)(*tmp_pBuffer);
6562  b95f 5f            	clrw	x
6563  b960 7b02          	ld	a,(OFST+0,sp)
6564  b962 97            	ld	xl,a
6565  b963 90f6          	ld	a,(y)
6566  b965 d70045        	ld	(_saved_postpartial+4,x),a
6567                     ; 4042       tmp_nParseLeft--;
6569  b968 725a0022      	dec	_tmp_nParseLeft
6570                     ; 4043       saved_nparseleft = tmp_nParseLeft;
6572                     ; 4044       tmp_pBuffer++;
6574  b96c 93            	ldw	x,y
6575  b96d 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6576  b972 5c            	incw	x
6577  b973 cf0025        	ldw	_tmp_pBuffer,x
6578                     ; 4045       tmp_nBytes--;
6580  b976 ce0023        	ldw	x,_tmp_nBytes
6581  b979 5a            	decw	x
6582  b97a cf0023        	ldw	_tmp_nBytes,x
6583                     ; 4046       if (i != 2 && tmp_nBytes == 0) {
6585  b97d 7b02          	ld	a,(OFST+0,sp)
6586  b97f a102          	cp	a,#2
6587  b981 270b          	jreq	L5542
6589  b983 ce0023        	ldw	x,_tmp_nBytes
6590  b986 2606          	jrne	L5542
6591                     ; 4047         break_while = 1; // Hit end of fragment but still have characters to
6593  b988 35010021      	mov	_break_while,#1
6594                     ; 4051         break; // Break out of for() loop.
6596  b98c 2008          	jra	L3542
6597  b98e               L5542:
6598                     ; 4033   for (i=0; i<3; i++) {
6600  b98e 0c02          	inc	(OFST+0,sp)
6604  b990 7b02          	ld	a,(OFST+0,sp)
6605  b992 a103          	cp	a,#3
6606  b994 25b3          	jrult	L7442
6607  b996               L3542:
6608                     ; 4055   if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6610  b996 c60021        	ld	a,_break_while
6611  b999 4a            	dec	a
6612  b99a 2603ccba60    	jreq	L223
6615                     ; 4059   clear_saved_postpartial_all();
6617  b99f cdb761        	call	_clear_saved_postpartial_all
6619                     ; 4072     invalid = 0;
6621  b9a2 0f01          	clr	(OFST-1,sp)
6623                     ; 4074     temp = (uint8_t)(       (alpha[2] - '0'));
6625  b9a4 c6001d        	ld	a,_alpha+2
6626  b9a7 a030          	sub	a,#48
6627  b9a9 6b02          	ld	(OFST+0,sp),a
6629                     ; 4075     temp = (uint8_t)(temp + (alpha[1] - '0') * 10);
6631  b9ab c6001c        	ld	a,_alpha+1
6632  b9ae 97            	ld	xl,a
6633  b9af a60a          	ld	a,#10
6634  b9b1 42            	mul	x,a
6635  b9b2 9f            	ld	a,xl
6636  b9b3 a0e0          	sub	a,#224
6637  b9b5 1b02          	add	a,(OFST+0,sp)
6638  b9b7 6b02          	ld	(OFST+0,sp),a
6640                     ; 4076     if (temp > 55 && alpha[0] > '1') invalid = 1;
6642  b9b9 a138          	cp	a,#56
6643  b9bb 250d          	jrult	L3642
6645  b9bd c6001b        	ld	a,_alpha
6646  b9c0 a132          	cp	a,#50
6647  b9c2 2506          	jrult	L3642
6650  b9c4 a601          	ld	a,#1
6651  b9c6 6b01          	ld	(OFST-1,sp),a
6654  b9c8 200e          	jra	L5642
6655  b9ca               L3642:
6656                     ; 4077     else temp = (uint8_t)(temp + (alpha[0] - '0') * 100);
6658  b9ca c6001b        	ld	a,_alpha
6659  b9cd 97            	ld	xl,a
6660  b9ce a664          	ld	a,#100
6661  b9d0 42            	mul	x,a
6662  b9d1 9f            	ld	a,xl
6663  b9d2 a0c0          	sub	a,#192
6664  b9d4 1b02          	add	a,(OFST+0,sp)
6665  b9d6 6b02          	ld	(OFST+0,sp),a
6667  b9d8               L5642:
6668                     ; 4078     if (invalid == 0) { // Make change only if valid entry
6670  b9d8 7b01          	ld	a,(OFST-1,sp)
6671  b9da 267b          	jrne	L7642
6672                     ; 4079       switch(curr_ParseNum)
6674  b9dc 7b04          	ld	a,(OFST+2,sp)
6676                     ; 4102         default: break;
6677  b9de a110          	cp	a,#16
6678  b9e0 2475          	jruge	L7642
6679  b9e2 5f            	clrw	x
6680  b9e3 97            	ld	xl,a
6681  b9e4 58            	sllw	x
6682  b9e5 de9da5        	ldw	x,(L023,x)
6683  b9e8 fc            	jp	(x)
6684  b9e9               L7432:
6685                     ; 4081         case 0:  Pending_hostaddr[3] = (uint8_t)temp; break;
6687  b9e9 7b02          	ld	a,(OFST+0,sp)
6688  b9eb c70146        	ld	_Pending_hostaddr+3,a
6691  b9ee 2067          	jra	L7642
6692  b9f0               L1532:
6693                     ; 4082         case 1:  Pending_hostaddr[2] = (uint8_t)temp; break;
6695  b9f0 7b02          	ld	a,(OFST+0,sp)
6696  b9f2 c70145        	ld	_Pending_hostaddr+2,a
6699  b9f5 2060          	jra	L7642
6700  b9f7               L3532:
6701                     ; 4083         case 2:  Pending_hostaddr[1] = (uint8_t)temp; break;
6703  b9f7 7b02          	ld	a,(OFST+0,sp)
6704  b9f9 c70144        	ld	_Pending_hostaddr+1,a
6707  b9fc 2059          	jra	L7642
6708  b9fe               L5532:
6709                     ; 4084         case 3:  Pending_hostaddr[0] = (uint8_t)temp; break;
6711  b9fe 7b02          	ld	a,(OFST+0,sp)
6712  ba00 c70143        	ld	_Pending_hostaddr,a
6715  ba03 2052          	jra	L7642
6716  ba05               L7532:
6717                     ; 4085         case 4:  Pending_draddr[3] = (uint8_t)temp; break;
6719  ba05 7b02          	ld	a,(OFST+0,sp)
6720  ba07 c70142        	ld	_Pending_draddr+3,a
6723  ba0a 204b          	jra	L7642
6724  ba0c               L1632:
6725                     ; 4086         case 5:  Pending_draddr[2] = (uint8_t)temp; break;
6727  ba0c 7b02          	ld	a,(OFST+0,sp)
6728  ba0e c70141        	ld	_Pending_draddr+2,a
6731  ba11 2044          	jra	L7642
6732  ba13               L3632:
6733                     ; 4087         case 6:  Pending_draddr[1] = (uint8_t)temp; break;
6735  ba13 7b02          	ld	a,(OFST+0,sp)
6736  ba15 c70140        	ld	_Pending_draddr+1,a
6739  ba18 203d          	jra	L7642
6740  ba1a               L5632:
6741                     ; 4088         case 7:  Pending_draddr[0] = (uint8_t)temp; break;
6743  ba1a 7b02          	ld	a,(OFST+0,sp)
6744  ba1c c7013f        	ld	_Pending_draddr,a
6747  ba1f 2036          	jra	L7642
6748  ba21               L7632:
6749                     ; 4089         case 8:  Pending_netmask[3] = (uint8_t)temp; break;
6751  ba21 7b02          	ld	a,(OFST+0,sp)
6752  ba23 c7013e        	ld	_Pending_netmask+3,a
6755  ba26 202f          	jra	L7642
6756  ba28               L1732:
6757                     ; 4090         case 9:  Pending_netmask[2] = (uint8_t)temp; break;
6759  ba28 7b02          	ld	a,(OFST+0,sp)
6760  ba2a c7013d        	ld	_Pending_netmask+2,a
6763  ba2d 2028          	jra	L7642
6764  ba2f               L3732:
6765                     ; 4091         case 10: Pending_netmask[1] = (uint8_t)temp; break;
6767  ba2f 7b02          	ld	a,(OFST+0,sp)
6768  ba31 c7013c        	ld	_Pending_netmask+1,a
6771  ba34 2021          	jra	L7642
6772  ba36               L5732:
6773                     ; 4092         case 11: Pending_netmask[0] = (uint8_t)temp; break;
6775  ba36 7b02          	ld	a,(OFST+0,sp)
6776  ba38 c7013b        	ld	_Pending_netmask,a
6779  ba3b 201a          	jra	L7642
6780  ba3d               L7732:
6781                     ; 4095 	  Pending_mqttserveraddr[3] = (uint8_t)temp;
6783  ba3d 7b02          	ld	a,(OFST+0,sp)
6784  ba3f c70162        	ld	_Pending_mqttserveraddr+3,a
6785                     ; 4096 	  break;
6787  ba42 2013          	jra	L7642
6788  ba44               L1042:
6789                     ; 4098         case 13: Pending_mqttserveraddr[2] = (uint8_t)temp; break;
6791  ba44 7b02          	ld	a,(OFST+0,sp)
6792  ba46 c70161        	ld	_Pending_mqttserveraddr+2,a
6795  ba49 200c          	jra	L7642
6796  ba4b               L3042:
6797                     ; 4099         case 14: Pending_mqttserveraddr[1] = (uint8_t)temp; break;
6799  ba4b 7b02          	ld	a,(OFST+0,sp)
6800  ba4d c70160        	ld	_Pending_mqttserveraddr+1,a
6803  ba50 2005          	jra	L7642
6804  ba52               L5042:
6805                     ; 4100         case 15: Pending_mqttserveraddr[0] = (uint8_t)temp; break;
6807  ba52 7b02          	ld	a,(OFST+0,sp)
6808  ba54 c7015f        	ld	_Pending_mqttserveraddr,a
6811                     ; 4102         default: break;
6813  ba57               L7642:
6814                     ; 4107   if (tmp_nBytes == 0) {
6816  ba57 ce0023        	ldw	x,_tmp_nBytes
6817  ba5a 2604          	jrne	L223
6818                     ; 4110     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
6820  ba5c 35020021      	mov	_break_while,#2
6821                     ; 4113     return;
6822  ba60               L223:
6825  ba60 5b04          	addw	sp,#4
6826  ba62 81            	ret	
6827                     ; 4115 }
6907                     ; 4118 void parse_POST_port(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6907                     ; 4119 {
6908                     .text:	section	.text,new
6909  ba63               _parse_POST_port:
6911  ba63 89            	pushw	x
6912  ba64 5203          	subw	sp,#3
6913       00000003      OFST:	set	3
6916                     ; 4122   for (i=0; i<5; i++) alpha[i] = '-';
6918  ba66 4f            	clr	a
6919  ba67 6b03          	ld	(OFST+0,sp),a
6921  ba69               L5252:
6924  ba69 5f            	clrw	x
6925  ba6a 97            	ld	xl,a
6926  ba6b a62d          	ld	a,#45
6927  ba6d d7001b        	ld	(_alpha,x),a
6930  ba70 0c03          	inc	(OFST+0,sp)
6934  ba72 7b03          	ld	a,(OFST+0,sp)
6935  ba74 a105          	cp	a,#5
6936  ba76 25f1          	jrult	L5252
6937                     ; 4124   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6939  ba78 c60029        	ld	a,_saved_postpartial_previous
6940  ba7b 1104          	cp	a,(OFST+1,sp)
6941  ba7d 2621          	jrne	L3352
6942                     ; 4127     saved_postpartial_previous[0] = '\0';
6944  ba7f 725f0029      	clr	_saved_postpartial_previous
6945                     ; 4134     for (i=0; i<5; i++) {
6947  ba83 4f            	clr	a
6948  ba84 6b03          	ld	(OFST+0,sp),a
6950  ba86               L5352:
6951                     ; 4135       if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
6953  ba86 5f            	clrw	x
6954  ba87 97            	ld	xl,a
6955  ba88 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6956  ba8c 2708          	jreq	L3452
6959  ba8e 5f            	clrw	x
6960  ba8f 97            	ld	xl,a
6961  ba90 d6002d        	ld	a,(_saved_postpartial_previous+4,x)
6962  ba93 d7001b        	ld	(_alpha,x),a
6963  ba96               L3452:
6964                     ; 4134     for (i=0; i<5; i++) {
6966  ba96 0c03          	inc	(OFST+0,sp)
6970  ba98 7b03          	ld	a,(OFST+0,sp)
6971  ba9a a105          	cp	a,#5
6972  ba9c 25e8          	jrult	L5352
6974  ba9e 2003          	jra	L5452
6975  baa0               L3352:
6976                     ; 4142     clear_saved_postpartial_data(); // Clear [4] and higher
6978  baa0 cdb775        	call	_clear_saved_postpartial_data
6980  baa3               L5452:
6981                     ; 4147     for (i=0; i<5; i++) {
6983  baa3 4f            	clr	a
6984  baa4 6b03          	ld	(OFST+0,sp),a
6986  baa6               L7452:
6987                     ; 4153       if (alpha[i] == '-') {
6989  baa6 5f            	clrw	x
6990  baa7 97            	ld	xl,a
6991  baa8 d6001b        	ld	a,(_alpha,x)
6992  baab a12d          	cp	a,#45
6993  baad 263c          	jrne	L5552
6994                     ; 4154         alpha[i] = (uint8_t)(*tmp_pBuffer);
6996  baaf 7b03          	ld	a,(OFST+0,sp)
6997  bab1 5f            	clrw	x
6998  bab2 90ce0025      	ldw	y,_tmp_pBuffer
6999  bab6 97            	ld	xl,a
7000  bab7 90f6          	ld	a,(y)
7001  bab9 d7001b        	ld	(_alpha,x),a
7002                     ; 4155         saved_postpartial[i+4] = *tmp_pBuffer;
7004  babc 5f            	clrw	x
7005  babd 7b03          	ld	a,(OFST+0,sp)
7006  babf 97            	ld	xl,a
7007  bac0 90f6          	ld	a,(y)
7008  bac2 d70045        	ld	(_saved_postpartial+4,x),a
7009                     ; 4156         tmp_nParseLeft--;
7011  bac5 725a0022      	dec	_tmp_nParseLeft
7012                     ; 4157         saved_nparseleft = tmp_nParseLeft;
7014                     ; 4158         tmp_pBuffer++;
7016  bac9 93            	ldw	x,y
7017  baca 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
7018  bacf 5c            	incw	x
7019  bad0 cf0025        	ldw	_tmp_pBuffer,x
7020                     ; 4159         tmp_nBytes--;
7022  bad3 ce0023        	ldw	x,_tmp_nBytes
7023  bad6 5a            	decw	x
7024  bad7 cf0023        	ldw	_tmp_nBytes,x
7025                     ; 4160         if (i != 4 && tmp_nBytes == 0) {
7027  bada 7b03          	ld	a,(OFST+0,sp)
7028  badc a104          	cp	a,#4
7029  bade 270b          	jreq	L5552
7031  bae0 ce0023        	ldw	x,_tmp_nBytes
7032  bae3 2606          	jrne	L5552
7033                     ; 4161           break_while = 1; // Hit end of fragment but still have characters to
7035  bae5 35010021      	mov	_break_while,#1
7036                     ; 4165    	break; // Break out of for() loop.
7038  bae9 2008          	jra	L3552
7039  baeb               L5552:
7040                     ; 4147     for (i=0; i<5; i++) {
7042  baeb 0c03          	inc	(OFST+0,sp)
7046  baed 7b03          	ld	a,(OFST+0,sp)
7047  baef a105          	cp	a,#5
7048  baf1 25b3          	jrult	L7452
7049  baf3               L3552:
7050                     ; 4169     if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
7052  baf3 c60021        	ld	a,_break_while
7053  baf6 4a            	dec	a
7054  baf7 2603ccbb85    	jreq	L233
7057                     ; 4174   clear_saved_postpartial_all();
7059  bafc cdb761        	call	_clear_saved_postpartial_all
7061                     ; 4183     invalid = 0;
7063  baff 0f03          	clr	(OFST+0,sp)
7065                     ; 4185     temp = (uint16_t)(       (alpha[4] - '0'));
7067  bb01 5f            	clrw	x
7068  bb02 c6001f        	ld	a,_alpha+4
7069  bb05 97            	ld	xl,a
7070  bb06 1d0030        	subw	x,#48
7071  bb09 1f01          	ldw	(OFST-2,sp),x
7073                     ; 4186     temp = (uint16_t)(temp + (alpha[3] - '0') * 10);
7075  bb0b c6001e        	ld	a,_alpha+3
7076  bb0e 97            	ld	xl,a
7077  bb0f a60a          	ld	a,#10
7078  bb11 42            	mul	x,a
7079  bb12 1d01e0        	subw	x,#480
7080  bb15 72fb01        	addw	x,(OFST-2,sp)
7081  bb18 1f01          	ldw	(OFST-2,sp),x
7083                     ; 4187     temp = (uint16_t)(temp + (alpha[2] - '0') * 100);
7085  bb1a c6001d        	ld	a,_alpha+2
7086  bb1d 97            	ld	xl,a
7087  bb1e a664          	ld	a,#100
7088  bb20 42            	mul	x,a
7089  bb21 1d12c0        	subw	x,#4800
7090  bb24 72fb01        	addw	x,(OFST-2,sp)
7091  bb27 1f01          	ldw	(OFST-2,sp),x
7093                     ; 4188     temp = (uint16_t)(temp + (alpha[1] - '0') * 1000);
7095  bb29 5f            	clrw	x
7096  bb2a c6001c        	ld	a,_alpha+1
7097  bb2d 97            	ld	xl,a
7098  bb2e 90ae03e8      	ldw	y,#1000
7099  bb32 cdf817        	call	c_imul
7101  bb35 1dbb80        	subw	x,#48000
7102  bb38 72fb01        	addw	x,(OFST-2,sp)
7103  bb3b 1f01          	ldw	(OFST-2,sp),x
7105                     ; 4189     if (temp > 5535 && alpha[0] > '5') invalid = 1;
7107  bb3d a315a0        	cpw	x,#5536
7108  bb40 250d          	jrult	L3652
7110  bb42 c6001b        	ld	a,_alpha
7111  bb45 a136          	cp	a,#54
7112  bb47 2506          	jrult	L3652
7115  bb49 a601          	ld	a,#1
7116  bb4b 6b03          	ld	(OFST+0,sp),a
7119  bb4d 2014          	jra	L5652
7120  bb4f               L3652:
7121                     ; 4190     else temp = (uint16_t)(temp + (alpha[0] - '0') * 10000);
7123  bb4f c6001b        	ld	a,_alpha
7124  bb52 5f            	clrw	x
7125  bb53 97            	ld	xl,a
7126  bb54 90ae2710      	ldw	y,#10000
7127  bb58 cdf817        	call	c_imul
7129  bb5b 1d5300        	subw	x,#21248
7130  bb5e 72fb01        	addw	x,(OFST-2,sp)
7131  bb61 1f01          	ldw	(OFST-2,sp),x
7133  bb63               L5652:
7134                     ; 4191     if (temp < 10) invalid = 1;
7136  bb63 a3000a        	cpw	x,#10
7137  bb66 2404          	jruge	L7652
7140  bb68 a601          	ld	a,#1
7141  bb6a 6b03          	ld	(OFST+0,sp),a
7143  bb6c               L7652:
7144                     ; 4192     if (invalid == 0) {
7146  bb6c 7b03          	ld	a,(OFST+0,sp)
7147  bb6e 260c          	jrne	L1752
7148                     ; 4193       if (curr_ParseNum == 0) Pending_port = (uint16_t)temp;
7150  bb70 7b05          	ld	a,(OFST+2,sp)
7151  bb72 2605          	jrne	L3752
7154  bb74 cf0139        	ldw	_Pending_port,x
7156  bb77 2003          	jra	L1752
7157  bb79               L3752:
7158                     ; 4195       else Pending_mqttport = (uint16_t)temp;
7160  bb79 cf015d        	ldw	_Pending_mqttport,x
7161  bb7c               L1752:
7162                     ; 4200   if (tmp_nBytes == 0) {
7164  bb7c ce0023        	ldw	x,_tmp_nBytes
7165  bb7f 2604          	jrne	L233
7166                     ; 4203     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
7168  bb81 35020021      	mov	_break_while,#2
7169                     ; 4206     return;
7170  bb85               L233:
7173  bb85 5b05          	addw	sp,#5
7174  bb87 81            	ret	
7175                     ; 4208 }
7210                     	switch	.const
7211  9dc5               L043:
7212  9dc5 bb96          	dc.w	L1062
7213  9dc7 bb9e          	dc.w	L3062
7214  9dc9 bba6          	dc.w	L5062
7215  9dcb bbae          	dc.w	L7062
7216  9dcd bbb6          	dc.w	L1162
7217  9dcf bbbe          	dc.w	L3162
7218  9dd1 bbc6          	dc.w	L5162
7219  9dd3 bbce          	dc.w	L7162
7220  9dd5 bbd6          	dc.w	L1262
7221  9dd7 bbde          	dc.w	L3262
7222  9dd9 bbe6          	dc.w	L5262
7223  9ddb bbee          	dc.w	L7262
7224  9ddd bbf6          	dc.w	L1362
7225  9ddf bbfe          	dc.w	L3362
7226  9de1 bc06          	dc.w	L5362
7227  9de3 bc0e          	dc.w	L7362
7228                     ; 4211 uint8_t GpioGetPin(uint8_t nGpio)
7228                     ; 4212 {
7229                     .text:	section	.text,new
7230  bb88               _GpioGetPin:
7234                     ; 4217   switch (nGpio) {
7237                     ; 4233     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7238  bb88 a110          	cp	a,#16
7239  bb8a 2503ccbc16    	jruge	L7562
7240  bb8f 5f            	clrw	x
7241  bb90 97            	ld	xl,a
7242  bb91 58            	sllw	x
7243  bb92 de9dc5        	ldw	x,(L043,x)
7244  bb95 fc            	jp	(x)
7245  bb96               L1062:
7246                     ; 4218     case 0:  if (IO_8to1  & (uint8_t)(0x01)) return 1; break;
7248  bb96 7201016d7b    	btjf	_IO_8to1,#0,L7562
7251  bb9b a601          	ld	a,#1
7254  bb9d 81            	ret	
7255  bb9e               L3062:
7256                     ; 4219     case 1:  if (IO_8to1  & (uint8_t)(0x02)) return 1; break;
7258  bb9e 7203016d73    	btjf	_IO_8to1,#1,L7562
7261  bba3 a601          	ld	a,#1
7264  bba5 81            	ret	
7265  bba6               L5062:
7266                     ; 4220     case 2:  if (IO_8to1  & (uint8_t)(0x04)) return 1; break;
7268  bba6 7205016d6b    	btjf	_IO_8to1,#2,L7562
7271  bbab a601          	ld	a,#1
7274  bbad 81            	ret	
7275  bbae               L7062:
7276                     ; 4221     case 3:  if (IO_8to1  & (uint8_t)(0x08)) return 1; break;
7278  bbae 7207016d63    	btjf	_IO_8to1,#3,L7562
7281  bbb3 a601          	ld	a,#1
7284  bbb5 81            	ret	
7285  bbb6               L1162:
7286                     ; 4222     case 4:  if (IO_8to1  & (uint8_t)(0x10)) return 1; break;
7288  bbb6 7209016d5b    	btjf	_IO_8to1,#4,L7562
7291  bbbb a601          	ld	a,#1
7294  bbbd 81            	ret	
7295  bbbe               L3162:
7296                     ; 4223     case 5:  if (IO_8to1  & (uint8_t)(0x20)) return 1; break;
7298  bbbe 720b016d53    	btjf	_IO_8to1,#5,L7562
7301  bbc3 a601          	ld	a,#1
7304  bbc5 81            	ret	
7305  bbc6               L5162:
7306                     ; 4224     case 6:  if (IO_8to1  & (uint8_t)(0x40)) return 1; break;
7308  bbc6 720d016d4b    	btjf	_IO_8to1,#6,L7562
7311  bbcb a601          	ld	a,#1
7314  bbcd 81            	ret	
7315  bbce               L7162:
7316                     ; 4225     case 7:  if (IO_8to1  & (uint8_t)(0x80)) return 1; break;
7318  bbce 720f016d43    	btjf	_IO_8to1,#7,L7562
7321  bbd3 a601          	ld	a,#1
7324  bbd5 81            	ret	
7325  bbd6               L1262:
7326                     ; 4226     case 8:  if (IO_16to9 & (uint8_t)(0x01)) return 1; break;
7328  bbd6 7201016e3b    	btjf	_IO_16to9,#0,L7562
7331  bbdb a601          	ld	a,#1
7334  bbdd 81            	ret	
7335  bbde               L3262:
7336                     ; 4227     case 9:  if (IO_16to9 & (uint8_t)(0x02)) return 1; break;
7338  bbde 7203016e33    	btjf	_IO_16to9,#1,L7562
7341  bbe3 a601          	ld	a,#1
7344  bbe5 81            	ret	
7345  bbe6               L5262:
7346                     ; 4228     case 10: if (IO_16to9 & (uint8_t)(0x04)) return 1; break;
7348  bbe6 7205016e2b    	btjf	_IO_16to9,#2,L7562
7351  bbeb a601          	ld	a,#1
7354  bbed 81            	ret	
7355  bbee               L7262:
7356                     ; 4229     case 11: if (IO_16to9 & (uint8_t)(0x08)) return 1; break;
7358  bbee 7207016e23    	btjf	_IO_16to9,#3,L7562
7361  bbf3 a601          	ld	a,#1
7364  bbf5 81            	ret	
7365  bbf6               L1362:
7366                     ; 4230     case 12: if (IO_16to9 & (uint8_t)(0x10)) return 1; break;
7368  bbf6 7209016e1b    	btjf	_IO_16to9,#4,L7562
7371  bbfb a601          	ld	a,#1
7374  bbfd 81            	ret	
7375  bbfe               L3362:
7376                     ; 4231     case 13: if (IO_16to9 & (uint8_t)(0x20)) return 1; break;
7378  bbfe 720b016e13    	btjf	_IO_16to9,#5,L7562
7381  bc03 a601          	ld	a,#1
7384  bc05 81            	ret	
7385  bc06               L5362:
7386                     ; 4232     case 14: if (IO_16to9 & (uint8_t)(0x40)) return 1; break;
7388  bc06 720d016e0b    	btjf	_IO_16to9,#6,L7562
7391  bc0b a601          	ld	a,#1
7394  bc0d 81            	ret	
7395  bc0e               L7362:
7396                     ; 4233     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7398  bc0e 720f016e03    	btjf	_IO_16to9,#7,L7562
7401  bc13 a601          	ld	a,#1
7404  bc15 81            	ret	
7405  bc16               L7562:
7406                     ; 4235   return 0;
7408  bc16 4f            	clr	a
7411  bc17 81            	ret	
7458                     ; 4284 void GpioSetPin(uint8_t nGpio, uint8_t nState)
7458                     ; 4285 {
7459                     .text:	section	.text,new
7460  bc18               _GpioSetPin:
7462  bc18 89            	pushw	x
7463  bc19 88            	push	a
7464       00000001      OFST:	set	1
7467                     ; 4292   mask = 0;
7469  bc1a 0f01          	clr	(OFST+0,sp)
7471                     ; 4294   switch(nGpio) {
7473  bc1c 9e            	ld	a,xh
7475                     ; 4303     default: break;
7476  bc1d 4d            	tnz	a
7477  bc1e 2717          	jreq	L1272
7478  bc20 4a            	dec	a
7479  bc21 2717          	jreq	L3272
7480  bc23 4a            	dec	a
7481  bc24 2718          	jreq	L5272
7482  bc26 4a            	dec	a
7483  bc27 2719          	jreq	L7272
7484  bc29 4a            	dec	a
7485  bc2a 271a          	jreq	L1372
7486  bc2c 4a            	dec	a
7487  bc2d 271b          	jreq	L3372
7488  bc2f 4a            	dec	a
7489  bc30 271c          	jreq	L5372
7490  bc32 4a            	dec	a
7491  bc33 271d          	jreq	L7372
7492  bc35 201f          	jra	L5672
7493  bc37               L1272:
7494                     ; 4295     case 0: mask = 0x01; break;
7496  bc37 4c            	inc	a
7499  bc38 201a          	jp	LC026
7500  bc3a               L3272:
7501                     ; 4296     case 1: mask = 0x02; break;
7503  bc3a a602          	ld	a,#2
7506  bc3c 2016          	jp	LC026
7507  bc3e               L5272:
7508                     ; 4297     case 2: mask = 0x04; break;
7510  bc3e a604          	ld	a,#4
7513  bc40 2012          	jp	LC026
7514  bc42               L7272:
7515                     ; 4298     case 3: mask = 0x08; break;
7517  bc42 a608          	ld	a,#8
7520  bc44 200e          	jp	LC026
7521  bc46               L1372:
7522                     ; 4299     case 4: mask = 0x10; break;
7524  bc46 a610          	ld	a,#16
7527  bc48 200a          	jp	LC026
7528  bc4a               L3372:
7529                     ; 4300     case 5: mask = 0x20; break;
7531  bc4a a620          	ld	a,#32
7534  bc4c 2006          	jp	LC026
7535  bc4e               L5372:
7536                     ; 4301     case 6: mask = 0x40; break;
7538  bc4e a640          	ld	a,#64
7541  bc50 2002          	jp	LC026
7542  bc52               L7372:
7543                     ; 4302     case 7: mask = 0x80; break;
7545  bc52 a680          	ld	a,#128
7546  bc54               LC026:
7547  bc54 6b01          	ld	(OFST+0,sp),a
7551                     ; 4303     default: break;
7553  bc56               L5672:
7554                     ; 4306   if (nState) IO_8to1 |= mask;
7556  bc56 7b03          	ld	a,(OFST+2,sp)
7557  bc58 2707          	jreq	L7672
7560  bc5a c6016d        	ld	a,_IO_8to1
7561  bc5d 1a01          	or	a,(OFST+0,sp)
7563  bc5f 2006          	jra	L1772
7564  bc61               L7672:
7565                     ; 4307   else IO_8to1 &= (uint8_t)~mask;
7567  bc61 7b01          	ld	a,(OFST+0,sp)
7568  bc63 43            	cpl	a
7569  bc64 c4016d        	and	a,_IO_8to1
7570  bc67               L1772:
7571  bc67 c7016d        	ld	_IO_8to1,a
7572                     ; 4309 }
7575  bc6a 5b03          	addw	sp,#3
7576  bc6c 81            	ret	
7637                     ; 4321 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7637                     ; 4322 {
7638                     .text:	section	.text,new
7639  bc6d               _SetMAC:
7641  bc6d 89            	pushw	x
7642  bc6e 5203          	subw	sp,#3
7643       00000003      OFST:	set	3
7646                     ; 4336   temp = 0;
7648                     ; 4337   invalid = 0;
7650  bc70 0f01          	clr	(OFST-2,sp)
7652                     ; 4340   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7654  bc72 9f            	ld	a,xl
7655  bc73 a130          	cp	a,#48
7656  bc75 250b          	jrult	L5303
7658  bc77 9f            	ld	a,xl
7659  bc78 a13a          	cp	a,#58
7660  bc7a 2406          	jruge	L5303
7663  bc7c 7b05          	ld	a,(OFST+2,sp)
7664  bc7e a030          	sub	a,#48
7666  bc80 200c          	jp	LC027
7667  bc82               L5303:
7668                     ; 4341   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7670  bc82 7b05          	ld	a,(OFST+2,sp)
7671  bc84 a161          	cp	a,#97
7672  bc86 250a          	jrult	L1403
7674  bc88 a167          	cp	a,#103
7675  bc8a 2406          	jruge	L1403
7678  bc8c a057          	sub	a,#87
7679  bc8e               LC027:
7680  bc8e 6b05          	ld	(OFST+2,sp),a
7682  bc90 2004          	jra	L7303
7683  bc92               L1403:
7684                     ; 4342   else invalid = 1; // If an invalid entry set indicator
7686  bc92 a601          	ld	a,#1
7687  bc94 6b01          	ld	(OFST-2,sp),a
7689  bc96               L7303:
7690                     ; 4344   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7692  bc96 7b08          	ld	a,(OFST+5,sp)
7693  bc98 a130          	cp	a,#48
7694  bc9a 2508          	jrult	L5403
7696  bc9c a13a          	cp	a,#58
7697  bc9e 2404          	jruge	L5403
7700  bca0 a030          	sub	a,#48
7702  bca2 200a          	jp	LC028
7703  bca4               L5403:
7704                     ; 4345   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7706  bca4 a161          	cp	a,#97
7707  bca6 250a          	jrult	L1503
7709  bca8 a167          	cp	a,#103
7710  bcaa 2406          	jruge	L1503
7713  bcac a057          	sub	a,#87
7714  bcae               LC028:
7715  bcae 6b08          	ld	(OFST+5,sp),a
7717  bcb0 2004          	jra	L7403
7718  bcb2               L1503:
7719                     ; 4346   else invalid = 1; // If an invalid entry set indicator
7721  bcb2 a601          	ld	a,#1
7722  bcb4 6b01          	ld	(OFST-2,sp),a
7724  bcb6               L7403:
7725                     ; 4348   if (invalid == 0) { // Change value only if valid entry
7727  bcb6 7b01          	ld	a,(OFST-2,sp)
7728  bcb8 264a          	jrne	L5503
7729                     ; 4349     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7731  bcba 7b05          	ld	a,(OFST+2,sp)
7732  bcbc 97            	ld	xl,a
7733  bcbd a610          	ld	a,#16
7734  bcbf 42            	mul	x,a
7735  bcc0 01            	rrwa	x,a
7736  bcc1 1b08          	add	a,(OFST+5,sp)
7737  bcc3 5f            	clrw	x
7738  bcc4 97            	ld	xl,a
7739  bcc5 1f02          	ldw	(OFST-1,sp),x
7741                     ; 4350     switch(itemnum)
7743  bcc7 7b04          	ld	a,(OFST+1,sp)
7745                     ; 4358     default: break;
7746  bcc9 2711          	jreq	L3772
7747  bccb 4a            	dec	a
7748  bccc 2715          	jreq	L5772
7749  bcce 4a            	dec	a
7750  bccf 2719          	jreq	L7772
7751  bcd1 4a            	dec	a
7752  bcd2 271d          	jreq	L1003
7753  bcd4 4a            	dec	a
7754  bcd5 2721          	jreq	L3003
7755  bcd7 4a            	dec	a
7756  bcd8 2725          	jreq	L5003
7757  bcda 2028          	jra	L5503
7758  bcdc               L3772:
7759                     ; 4352     case 0: Pending_uip_ethaddr_oct[5] = (uint8_t)temp; break;
7761  bcdc 7b03          	ld	a,(OFST+0,sp)
7762  bcde c7011e        	ld	_Pending_uip_ethaddr_oct+5,a
7765  bce1 2021          	jra	L5503
7766  bce3               L5772:
7767                     ; 4353     case 1: Pending_uip_ethaddr_oct[4] = (uint8_t)temp; break;
7769  bce3 7b03          	ld	a,(OFST+0,sp)
7770  bce5 c7011d        	ld	_Pending_uip_ethaddr_oct+4,a
7773  bce8 201a          	jra	L5503
7774  bcea               L7772:
7775                     ; 4354     case 2: Pending_uip_ethaddr_oct[3] = (uint8_t)temp; break;
7777  bcea 7b03          	ld	a,(OFST+0,sp)
7778  bcec c7011c        	ld	_Pending_uip_ethaddr_oct+3,a
7781  bcef 2013          	jra	L5503
7782  bcf1               L1003:
7783                     ; 4355     case 3: Pending_uip_ethaddr_oct[2] = (uint8_t)temp; break;
7785  bcf1 7b03          	ld	a,(OFST+0,sp)
7786  bcf3 c7011b        	ld	_Pending_uip_ethaddr_oct+2,a
7789  bcf6 200c          	jra	L5503
7790  bcf8               L3003:
7791                     ; 4356     case 4: Pending_uip_ethaddr_oct[1] = (uint8_t)temp; break;
7793  bcf8 7b03          	ld	a,(OFST+0,sp)
7794  bcfa c7011a        	ld	_Pending_uip_ethaddr_oct+1,a
7797  bcfd 2005          	jra	L5503
7798  bcff               L5003:
7799                     ; 4357     case 5: Pending_uip_ethaddr_oct[0] = (uint8_t)temp; break;
7801  bcff 7b03          	ld	a,(OFST+0,sp)
7802  bd01 c70119        	ld	_Pending_uip_ethaddr_oct,a
7805                     ; 4358     default: break;
7807  bd04               L5503:
7808                     ; 4361 }
7811  bd04 5b05          	addw	sp,#5
7812  bd06 81            	ret	
8206                     	switch	.bss
8207  0017               _insertion_flag:
8208  0017 000000        	ds.b	3
8209                     	xdef	_insertion_flag
8210                     	xref	_second_counter
8211                     	xref	_TRANSMIT_counter
8212                     	xref	_TXERIF_counter
8213                     	xref	_RXERIF_counter
8214                     	xref	_MQTT_error_status
8215                     	xref	_mqtt_start_status
8216                     	xref	_Pending_mqtt_password
8217                     	xref	_Pending_mqtt_username
8218                     	xref	_Pending_mqttport
8219                     	xref	_Pending_mqttserveraddr
8220                     	xref	_stored_mqtt_password
8221                     	xref	_stored_mqtt_username
8222                     	xref	_stored_mqttport
8223                     	xref	_stored_mqttserveraddr
8224  001a               _current_webpage:
8225  001a 00            	ds.b	1
8226                     	xdef	_current_webpage
8227  001b               _alpha:
8228  001b 000000000000  	ds.b	6
8229                     	xdef	_alpha
8230  0021               _break_while:
8231  0021 00            	ds.b	1
8232                     	xdef	_break_while
8233  0022               _tmp_nParseLeft:
8234  0022 00            	ds.b	1
8235                     	xdef	_tmp_nParseLeft
8236  0023               _tmp_nBytes:
8237  0023 0000          	ds.b	2
8238                     	xdef	_tmp_nBytes
8239  0025               _tmp_pBuffer:
8240  0025 0000          	ds.b	2
8241                     	xdef	_tmp_pBuffer
8242  0027               _z_diag:
8243  0027 00            	ds.b	1
8244                     	xdef	_z_diag
8245  0028               _saved_newlines:
8246  0028 00            	ds.b	1
8247                     	xdef	_saved_newlines
8248  0029               _saved_postpartial_previous:
8249  0029 000000000000  	ds.b	24
8250                     	xdef	_saved_postpartial_previous
8251  0041               _saved_postpartial:
8252  0041 000000000000  	ds.b	24
8253                     	xdef	_saved_postpartial
8254  0059               _saved_nparseleft:
8255  0059 00            	ds.b	1
8256                     	xdef	_saved_nparseleft
8257  005a               _saved_parsestate:
8258  005a 00            	ds.b	1
8259                     	xdef	_saved_parsestate
8260  005b               _saved_nstate:
8261  005b 00            	ds.b	1
8262                     	xdef	_saved_nstate
8263  005c               _OctetArray:
8264  005c 000000000000  	ds.b	11
8265                     	xdef	_OctetArray
8266                     	xref	_user_reboot_request
8267                     	xref	_parse_complete
8268                     	xref	_mac_string
8269                     	xref	_stored_config_settings
8270                     	xref	_stored_devicename
8271                     	xref	_stored_port
8272                     	xref	_stored_netmask
8273                     	xref	_stored_draddr
8274                     	xref	_stored_hostaddr
8275                     	xref	_Pending_uip_ethaddr_oct
8276                     	xref	_Pending_config_settings
8277                     	xref	_Pending_devicename
8278                     	xref	_Pending_port
8279                     	xref	_Pending_netmask
8280                     	xref	_Pending_draddr
8281                     	xref	_Pending_hostaddr
8282                     	xref	_invert_input
8283                     	xref	_IO_8to1
8284                     	xref	_IO_16to9
8285                     	xref	_Port_Httpd
8286                     	xref	_strlen
8287                     	xref	_debugflash
8288                     	xref	_uip_flags
8289                     	xref	_uip_conn
8290                     	xref	_uip_len
8291                     	xref	_uip_appdata
8292                     	xref	_htons
8293                     	xref	_uip_send
8294                     	xref	_uip_listen
8295                     	xref	_uip_init_stats
8296                     	xdef	_SetMAC
8297                     	xdef	_clear_saved_postpartial_previous
8298                     	xdef	_clear_saved_postpartial_data
8299                     	xdef	_clear_saved_postpartial_all
8300                     	xdef	_GpioSetPin
8301                     	xdef	_GpioGetPin
8302                     	xdef	_parse_POST_port
8303                     	xdef	_parse_POST_address
8304                     	xdef	_parse_POST_string
8305                     	xdef	_HttpDCall
8306                     	xdef	_HttpDInit
8307                     	xdef	_emb_itoa
8308                     	xdef	_adjust_template_size
8309                     	switch	.const
8310  9de5               L333:
8311  9de5 436f6e6e6563  	dc.b	"Connection:close",13
8312  9df6 0a00          	dc.b	10,0
8313  9df8               L133:
8314  9df8 436f6e74656e  	dc.b	"Content-Type: text"
8315  9e0a 2f68746d6c3b  	dc.b	"/html; charset=utf"
8316  9e1c 2d380d        	dc.b	"-8",13
8317  9e1f 0a00          	dc.b	10,0
8318  9e21               L723:
8319  9e21 43616368652d  	dc.b	"Cache-Control: no-"
8320  9e33 63616368652c  	dc.b	"cache, no-store",13
8321  9e43 0a00          	dc.b	10,0
8322  9e45               L713:
8323  9e45 436f6e74656e  	dc.b	"Content-Length:",0
8324  9e55               L513:
8325  9e55 0d0a00        	dc.b	13,10,0
8326  9e58               L313:
8327  9e58 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8328                     	xref.b	c_lreg
8329                     	xref.b	c_x
8330                     	xref.b	c_y
8350                     	xref	c_imul
8351                     	xref	c_uitolx
8352                     	xref	c_ludv
8353                     	xref	c_lumd
8354                     	xref	c_rtol
8355                     	xref	c_ltor
8356                     	xref	c_lzmp
8357                     	end
