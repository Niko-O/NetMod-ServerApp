   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  8080               L11_checked:
  20  8080 636865636b65  	dc.b	"checked",0
  21  8088               L31_g_HtmlPageIOControl:
  22  8088 257930342579  	dc.b	"%y04%y05%y06<title"
  23  809a 3e494f20436f  	dc.b	">IO Control</title"
  24  80ac 3e3c2f686561  	dc.b	"></head><body><h1>"
  25  80be 494f20436f6e  	dc.b	"IO Control</h1><fo"
  26  80d0 726d206d6574  	dc.b	"rm method='POST' a"
  27  80e2 6374696f6e3d  	dc.b	"ction='/'><table><"
  28  80f4 74723e3c7464  	dc.b	"tr><td class='t1'>"
  29  8106 4e616d653a3c  	dc.b	"Name:</td><td clas"
  30  8118 733d27743227  	dc.b	"s='t2'>%a00</td></"
  31  812a 74723e3c2f74  	dc.b	"tr></table><table>"
  32  813c 3c74723e3c74  	dc.b	"<tr><td class='t1'"
  33  814e 3e3c2f74643e  	dc.b	"></td><td class='t"
  34  8160 33273e3c2f74  	dc.b	"3'></td><td class="
  35  8172 277431273e53  	dc.b	"'t1'>SET</td></tr>"
  36  8184 3c7472        	dc.b	"<tr"
  37  8187 3e3c74642063  	dc.b	"><td class='t1'>Ou"
  38  8199 747075743031  	dc.b	"tput01</td><td cla"
  39  81ab 73733d277325  	dc.b	"ss='s%i00'></td><t"
  40  81bd 6420636c6173  	dc.b	"d class='t1'><inpu"
  41  81cf 742074797065  	dc.b	"t type='radio' id="
  42  81e1 2730316f6e27  	dc.b	"'01on' name='o00' "
  43  81f3 76616c75653d  	dc.b	"value='1' %o00><la"
  44  8205 62656c20666f  	dc.b	"bel for='01on'>ON<"
  45  8217 2f6c6162656c  	dc.b	"/label><input type"
  46  8229 3d2772616469  	dc.b	"='radio' id='01off"
  47  823b 27206e616d65  	dc.b	"' name='o00' value"
  48  824d 3d2730272025  	dc.b	"='0' %p00><label f"
  49  825f 6f723d273031  	dc.b	"or='01off'>OFF</la"
  50  8271 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
  51  8283 3c7464        	dc.b	"<td"
  52  8286 20636c617373  	dc.b	" class='t1'>Output"
  53  8298 30323c2f7464  	dc.b	"02</td><td class='"
  54  82aa 732569303127  	dc.b	"s%i01'></td><td cl"
  55  82bc 6173733d2774  	dc.b	"ass='t1'><input ty"
  56  82ce 70653d277261  	dc.b	"pe='radio' id='02o"
  57  82e0 6e27206e616d  	dc.b	"n' name='o01' valu"
  58  82f2 653d27312720  	dc.b	"e='1' %o01><label "
  59  8304 666f723d2730  	dc.b	"for='02on'>ON</lab"
  60  8316 656c3e3c696e  	dc.b	"el><input type='ra"
  61  8328 64696f272069  	dc.b	"dio' id='02off' na"
  62  833a 6d653d276f30  	dc.b	"me='o01' value='0'"
  63  834c 20257030313e  	dc.b	" %p01><label for='"
  64  835e 30326f666627  	dc.b	"02off'>OFF</label>"
  65  8370 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
  66  8382 636c61        	dc.b	"cla"
  67  8385 73733d277431  	dc.b	"ss='t1'>Output03</"
  68  8397 74643e3c7464  	dc.b	"td><td class='s%i0"
  69  83a9 32273e3c2f74  	dc.b	"2'></td><td class="
  70  83bb 277431273e3c  	dc.b	"'t1'><input type='"
  71  83cd 726164696f27  	dc.b	"radio' id='03on' n"
  72  83df 616d653d276f  	dc.b	"ame='o02' value='1"
  73  83f1 2720256f3032  	dc.b	"' %o02><label for="
  74  8403 2730336f6e27  	dc.b	"'03on'>ON</label><"
  75  8415 696e70757420  	dc.b	"input type='radio'"
  76  8427 2069643d2730  	dc.b	" id='03off' name='"
  77  8439 6f3032272076  	dc.b	"o02' value='0' %p0"
  78  844b 323e3c6c6162  	dc.b	"2><label for='03of"
  79  845d 66273e4f4646  	dc.b	"f'>OFF</label></td"
  80  846f 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
  81  8481 733d27        	dc.b	"s='"
  82  8484 7431273e4f75  	dc.b	"t1'>Output04</td><"
  83  8496 746420636c61  	dc.b	"td class='s%i03'><"
  84  84a8 2f74643e3c74  	dc.b	"/td><td class='t1'"
  85  84ba 3e3c696e7075  	dc.b	"><input type='radi"
  86  84cc 6f272069643d  	dc.b	"o' id='04on' name="
  87  84de 276f30332720  	dc.b	"'o03' value='1' %o"
  88  84f0 30333e3c6c61  	dc.b	"03><label for='04o"
  89  8502 6e273e4f4e3c  	dc.b	"n'>ON</label><inpu"
  90  8514 742074797065  	dc.b	"t type='radio' id="
  91  8526 2730346f6666  	dc.b	"'04off' name='o03'"
  92  8538 2076616c7565  	dc.b	" value='0' %p03><l"
  93  854a 6162656c2066  	dc.b	"abel for='04off'>O"
  94  855c 46463c2f6c61  	dc.b	"FF</label></td></t"
  95  856e 723e3c74723e  	dc.b	"r><tr><td class='t"
  96  8580 31273e        	dc.b	"1'>"
  97  8583 4f7574707574  	dc.b	"Output05</td><td c"
  98  8595 6c6173733d27  	dc.b	"lass='s%i04'></td>"
  99  85a7 3c746420636c  	dc.b	"<td class='t1'><in"
 100  85b9 707574207479  	dc.b	"put type='radio' i"
 101  85cb 643d2730356f  	dc.b	"d='05on' name='o04"
 102  85dd 272076616c75  	dc.b	"' value='1' %o04><"
 103  85ef 6c6162656c20  	dc.b	"label for='05on'>O"
 104  8601 4e3c2f6c6162  	dc.b	"N</label><input ty"
 105  8613 70653d277261  	dc.b	"pe='radio' id='05o"
 106  8625 666627206e61  	dc.b	"ff' name='o04' val"
 107  8637 75653d273027  	dc.b	"ue='0' %p04><label"
 108  8649 20666f723d27  	dc.b	" for='05off'>OFF</"
 109  865b 6c6162656c3e  	dc.b	"label></td></tr><t"
 110  866d 723e3c746420  	dc.b	"r><td class='t1'>O"
 111  867f 757470        	dc.b	"utp"
 112  8682 757430363c2f  	dc.b	"ut06</td><td class"
 113  8694 3d2773256930  	dc.b	"='s%i05'></td><td "
 114  86a6 636c6173733d  	dc.b	"class='t1'><input "
 115  86b8 747970653d27  	dc.b	"type='radio' id='0"
 116  86ca 366f6e27206e  	dc.b	"6on' name='o05' va"
 117  86dc 6c75653d2731  	dc.b	"lue='1' %o05><labe"
 118  86ee 6c20666f723d  	dc.b	"l for='06on'>ON</l"
 119  8700 6162656c3e3c  	dc.b	"abel><input type='"
 120  8712 726164696f27  	dc.b	"radio' id='06off' "
 121  8724 6e616d653d27  	dc.b	"name='o05' value='"
 122  8736 302720257030  	dc.b	"0' %p05><label for"
 123  8748 3d2730366f66  	dc.b	"='06off'>OFF</labe"
 124  875a 6c3e3c2f7464  	dc.b	"l></td></tr><tr><t"
 125  876c 6420636c6173  	dc.b	"d class='t1'>Outpu"
 126  877e 743037        	dc.b	"t07"
 127  8781 3c2f74643e3c  	dc.b	"</td><td class='s%"
 128  8793 693036273e3c  	dc.b	"i06'></td><td clas"
 129  87a5 733d27743127  	dc.b	"s='t1'><input type"
 130  87b7 3d2772616469  	dc.b	"='radio' id='07on'"
 131  87c9 206e616d653d  	dc.b	" name='o06' value="
 132  87db 27312720256f  	dc.b	"'1' %o06><label fo"
 133  87ed 723d2730376f  	dc.b	"r='07on'>ON</label"
 134  87ff 3e3c696e7075  	dc.b	"><input type='radi"
 135  8811 6f272069643d  	dc.b	"o' id='07off' name"
 136  8823 3d276f303627  	dc.b	"='o06' value='0' %"
 137  8835 7030363e3c6c  	dc.b	"p06><label for='07"
 138  8847 6f6666273e4f  	dc.b	"off'>OFF</label></"
 139  8859 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 140  886b 6173733d2774  	dc.b	"ass='t1'>Output08<"
 141  887d 2f7464        	dc.b	"/td"
 142  8880 3e3c74642063  	dc.b	"><td class='s%i07'"
 143  8892 3e3c2f74643e  	dc.b	"></td><td class='t"
 144  88a4 31273e3c696e  	dc.b	"1'><input type='ra"
 145  88b6 64696f272069  	dc.b	"dio' id='08on' nam"
 146  88c8 653d276f3037  	dc.b	"e='o07' value='1' "
 147  88da 256f30373e3c  	dc.b	"%o07><label for='0"
 148  88ec 386f6e273e4f  	dc.b	"8on'>ON</label><in"
 149  88fe 707574207479  	dc.b	"put type='radio' i"
 150  8910 643d2730386f  	dc.b	"d='08off' name='o0"
 151  8922 37272076616c  	dc.b	"7' value='0' %p07>"
 152  8934 3c6c6162656c  	dc.b	"<label for='08off'"
 153  8946 3e4f46463c2f  	dc.b	">OFF</label></td><"
 154  8958 2f74723e3c2f  	dc.b	"/tr></table><table"
 155  896a 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 156  897c 273e49        	dc.b	"'>I"
 157  897f 6e7075743031  	dc.b	"nput01</td><td cla"
 158  8991 73733d277325  	dc.b	"ss='s%i08'></td></"
 159  89a3 74723e3c7472  	dc.b	"tr><tr><td class='"
 160  89b5 7431273e496e  	dc.b	"t1'>Input02</td><t"
 161  89c7 6420636c6173  	dc.b	"d class='s%i09'></"
 162  89d9 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 163  89eb 6173733d2774  	dc.b	"ass='t1'>Input03</"
 164  89fd 74643e3c7464  	dc.b	"td><td class='s%i1"
 165  8a0f 30273e3c2f74  	dc.b	"0'></td></tr><tr><"
 166  8a21 746420636c61  	dc.b	"td class='t1'>Inpu"
 167  8a33 7430343c2f74  	dc.b	"t04</td><td class="
 168  8a45 277325693131  	dc.b	"'s%i11'></td></tr>"
 169  8a57 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 170  8a69 3e496e707574  	dc.b	">Input05</td><td c"
 171  8a7b 6c6173        	dc.b	"las"
 172  8a7e 733d27732569  	dc.b	"s='s%i12'></td></t"
 173  8a90 723e3c74723e  	dc.b	"r><tr><td class='t"
 174  8aa2 31273e496e70  	dc.b	"1'>Input06</td><td"
 175  8ab4 20636c617373  	dc.b	" class='s%i13'></t"
 176  8ac6 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 177  8ad8 73733d277431  	dc.b	"ss='t1'>Input07</t"
 178  8aea 643e3c746420  	dc.b	"d><td class='s%i14"
 179  8afc 273e3c2f7464  	dc.b	"'></td></tr><tr><t"
 180  8b0e 6420636c6173  	dc.b	"d class='t1'>Input"
 181  8b20 30383c2f7464  	dc.b	"08</td><td class='"
 182  8b32 732569313527  	dc.b	"s%i15'></td></tr><"
 183  8b44 2f7461626c65  	dc.b	"/table><input type"
 184  8b56 3d2768696464  	dc.b	"='hidden' name='z0"
 185  8b68 30272076616c  	dc.b	"0' value='0'><butt"
 186  8b7a 6f6e20        	dc.b	"on "
 187  8b7d 747970653d27  	dc.b	"type='submit' titl"
 188  8b8f 653d27536176  	dc.b	"e='Saves your chan"
 189  8ba1 676573207468  	dc.b	"ges then restarts "
 190  8bb3 746865204e65  	dc.b	"the Network Module"
 191  8bc5 273e53617665  	dc.b	"'>Save</button><bu"
 192  8bd7 74746f6e2074  	dc.b	"tton type='reset' "
 193  8be9 7469746c653d  	dc.b	"title='Un-does any"
 194  8bfb 206368616e67  	dc.b	" changes that have"
 195  8c0d 206e6f742062  	dc.b	" not been saved'>U"
 196  8c1f 6e646f20416c  	dc.b	"ndo All</button></"
 197  8c31 666f726d3e25  	dc.b	"form>%y03/60%y02Re"
 198  8c43 66726573683c  	dc.b	"fresh</button></fo"
 199  8c55 726d3e257930  	dc.b	"rm>%y03/61%y02Conf"
 200  8c67 696775726174  	dc.b	"iguration</button>"
 201  8c79 3c2f66        	dc.b	"</f"
 202  8c7c 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 203  8c8f               L51_g_HtmlPageConfiguration:
 204  8c8f 257930342579  	dc.b	"%y04%y05%y06<title"
 205  8ca1 3e436f6e6669  	dc.b	">Configuration</ti"
 206  8cb3 746c653e3c2f  	dc.b	"tle></head><body><"
 207  8cc5 68313e436f6e  	dc.b	"h1>Configuration</"
 208  8cd7 68313e3c666f  	dc.b	"h1><form method='P"
 209  8ce9 4f5354272061  	dc.b	"OST' action='/'><t"
 210  8cfb 61626c653e3c  	dc.b	"able><tr><td class"
 211  8d0d 3d277431273e  	dc.b	"='t1'>Name:</td><t"
 212  8d1f 643e3c696e70  	dc.b	"d><input name='a00"
 213  8d31 2720636c6173  	dc.b	"' class='t2' value"
 214  8d43 3d2725613030  	dc.b	"='%a00' pattern='["
 215  8d55 302d39612d7a  	dc.b	"0-9a-zA-Z-_*.]{1,1"
 216  8d67 397d27207265  	dc.b	"9}' required title"
 217  8d79 3d273120746f  	dc.b	"='1 to 19 letters,"
 218  8d8b 206e75        	dc.b	" nu"
 219  8d8e 6d626572732c  	dc.b	"mbers, and -_*. no"
 220  8da0 207370616365  	dc.b	" spaces' maxlength"
 221  8db2 3d273139273e  	dc.b	"='19'></td></tr></"
 222  8dc4 7461626c653e  	dc.b	"table><table><tr><"
 223  8dd6 746420636c61  	dc.b	"td class='t1'>Conf"
 224  8de8 69673c2f7464  	dc.b	"ig</td><td><input "
 225  8dfa 6e616d653d27  	dc.b	"name='g00' class='"
 226  8e0c 743527207661  	dc.b	"t5' value='%g00' p"
 227  8e1e 61747465726e  	dc.b	"attern='[0-9a-zA-Z"
 228  8e30 5d7b367d2720  	dc.b	"]{6}' title='6 cha"
 229  8e42 726163746572  	dc.b	"racters required. "
 230  8e54 53656520446f  	dc.b	"See Documentation'"
 231  8e66 206d61786c65  	dc.b	" maxlength='6'></t"
 232  8e78 643e3c2f7472  	dc.b	"d></tr></table><p>"
 233  8e8a 3c2f70        	dc.b	"</p"
 234  8e8d 3e3c7461626c  	dc.b	"><table><tr><td cl"
 235  8e9f 6173733d2774  	dc.b	"ass='t1'>IP Addres"
 236  8eb1 733c2f74643e  	dc.b	"s</td><td><input n"
 237  8ec3 616d653d2762  	dc.b	"ame='b00' class='t"
 238  8ed5 36272076616c  	dc.b	"6' value='%b00' %y"
 239  8ee7 30303c74643e  	dc.b	"00<td><input name="
 240  8ef9 276230312720  	dc.b	"'b01' class='t6' v"
 241  8f0b 616c75653d27  	dc.b	"alue='%b01' %y00<t"
 242  8f1d 643e3c696e70  	dc.b	"d><input name='b02"
 243  8f2f 2720636c6173  	dc.b	"' class='t6' value"
 244  8f41 3d2725623032  	dc.b	"='%b02' %y00<td><i"
 245  8f53 6e707574206e  	dc.b	"nput name='b03' cl"
 246  8f65 6173733d2774  	dc.b	"ass='t6' value='%b"
 247  8f77 303327202579  	dc.b	"03' %y00</tr><tr><"
 248  8f89 746420        	dc.b	"td "
 249  8f8c 636c6173733d  	dc.b	"class='t1'>Gateway"
 250  8f9e 3c2f74643e3c  	dc.b	"</td><td><input na"
 251  8fb0 6d653d276230  	dc.b	"me='b04' class='t6"
 252  8fc2 272076616c75  	dc.b	"' value='%b04' %y0"
 253  8fd4 303c74643e3c  	dc.b	"0<td><input name='"
 254  8fe6 623035272063  	dc.b	"b05' class='t6' va"
 255  8ff8 6c75653d2725  	dc.b	"lue='%b05' %y00<td"
 256  900a 3e3c696e7075  	dc.b	"><input name='b06'"
 257  901c 20636c617373  	dc.b	" class='t6' value="
 258  902e 272562303627  	dc.b	"'%b06' %y00<td><in"
 259  9040 707574206e61  	dc.b	"put name='b07' cla"
 260  9052 73733d277436  	dc.b	"ss='t6' value='%b0"
 261  9064 372720257930  	dc.b	"7' %y00</tr><tr><t"
 262  9076 6420636c6173  	dc.b	"d class='t1'>Netma"
 263  9088 736b3c        	dc.b	"sk<"
 264  908b 2f74643e3c74  	dc.b	"/td><td><input nam"
 265  909d 653d27623038  	dc.b	"e='b08' class='t6'"
 266  90af 2076616c7565  	dc.b	" value='%b08' %y00"
 267  90c1 3c74643e3c69  	dc.b	"<td><input name='b"
 268  90d3 30392720636c  	dc.b	"09' class='t6' val"
 269  90e5 75653d272562  	dc.b	"ue='%b09' %y00<td>"
 270  90f7 3c696e707574  	dc.b	"<input name='b10' "
 271  9109 636c6173733d  	dc.b	"class='t6' value='"
 272  911b 256231302720  	dc.b	"%b10' %y00<td><inp"
 273  912d 7574206e616d  	dc.b	"ut name='b11' clas"
 274  913f 733d27743627  	dc.b	"s='t6' value='%b11"
 275  9151 272025793030  	dc.b	"' %y00</tr></table"
 276  9163 3e3c7461626c  	dc.b	"><table><tr><td cl"
 277  9175 6173733d2774  	dc.b	"ass='t1'>Port</td>"
 278  9187 3c7464        	dc.b	"<td"
 279  918a 3e3c696e7075  	dc.b	"><input name='c00'"
 280  919c 20636c617373  	dc.b	" class='t8' value="
 281  91ae 272563303027  	dc.b	"'%c00' pattern='[0"
 282  91c0 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 283  91d2 657220303030  	dc.b	"er 00010 to 65535'"
 284  91e4 206d61786c65  	dc.b	" maxlength='5'></t"
 285  91f6 643e3c2f7472  	dc.b	"d></tr></table><ta"
 286  9208 626c653e3c74  	dc.b	"ble><tr><td class="
 287  921a 277431273e4d  	dc.b	"'t1'>MAC Address</"
 288  922c 74643e3c7464  	dc.b	"td><td><input name"
 289  923e 3d2764303027  	dc.b	"='d00' class='t7' "
 290  9250 76616c75653d  	dc.b	"value='%d00' %y01<"
 291  9262 74643e3c696e  	dc.b	"td><input name='d0"
 292  9274 312720636c61  	dc.b	"1' class='t7' valu"
 293  9286 653d27        	dc.b	"e='"
 294  9289 256430312720  	dc.b	"%d01' %y01<td><inp"
 295  929b 7574206e616d  	dc.b	"ut name='d02' clas"
 296  92ad 733d27743727  	dc.b	"s='t7' value='%d02"
 297  92bf 272025793031  	dc.b	"' %y01<td><input n"
 298  92d1 616d653d2764  	dc.b	"ame='d03' class='t"
 299  92e3 37272076616c  	dc.b	"7' value='%d03' %y"
 300  92f5 30313c74643e  	dc.b	"01<td><input name="
 301  9307 276430342720  	dc.b	"'d04' class='t7' v"
 302  9319 616c75653d27  	dc.b	"alue='%d04' %y01<t"
 303  932b 643e3c696e70  	dc.b	"d><input name='d05"
 304  933d 2720636c6173  	dc.b	"' class='t7' value"
 305  934f 3d2725643035  	dc.b	"='%d05' %y01</tr><"
 306  9361 2f7461626c65  	dc.b	"/table><p></p><tab"
 307  9373 6c653e3c7472  	dc.b	"le><tr><td class='"
 308  9385 743127        	dc.b	"t1'"
 309  9388 3e4d51545420  	dc.b	">MQTT Server</td><"
 310  939a 74643e3c696e  	dc.b	"td><input name='b1"
 311  93ac 322720636c61  	dc.b	"2' class='t6' valu"
 312  93be 653d27256231  	dc.b	"e='%b12' %y00<td><"
 313  93d0 696e70757420  	dc.b	"input name='b13' c"
 314  93e2 6c6173733d27  	dc.b	"lass='t6' value='%"
 315  93f4 623133272025  	dc.b	"b13' %y00<td><inpu"
 316  9406 74206e616d65  	dc.b	"t name='b14' class"
 317  9418 3d2774362720  	dc.b	"='t6' value='%b14'"
 318  942a 20257930303c  	dc.b	" %y00<td><input na"
 319  943c 6d653d276231  	dc.b	"me='b15' class='t6"
 320  944e 272076616c75  	dc.b	"' value='%b15' %y0"
 321  9460 303c2f74723e  	dc.b	"0</tr></table><tab"
 322  9472 6c653e3c7472  	dc.b	"le><tr><td class='"
 323  9484 743127        	dc.b	"t1'"
 324  9487 3e4d51545420  	dc.b	">MQTT Port</td><td"
 325  9499 3e3c696e7075  	dc.b	"><input name='c01'"
 326  94ab 20636c617373  	dc.b	" class='t8' value="
 327  94bd 272563303127  	dc.b	"'%c01' pattern='[0"
 328  94cf 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 329  94e1 657220303030  	dc.b	"er 00010 to 65535'"
 330  94f3 206d61786c65  	dc.b	" maxlength='5'></t"
 331  9505 643e3c2f7472  	dc.b	"d></tr></table><ta"
 332  9517 626c653e3c74  	dc.b	"ble><tr><td class="
 333  9529 277431273e4d  	dc.b	"'t1'>MQTT Username"
 334  953b 3c2f74643e3c  	dc.b	"</td><td><input na"
 335  954d 6d653d276c30  	dc.b	"me='l00' class='t1"
 336  955f 272076616c75  	dc.b	"' value='%l00' pat"
 337  9571 7465726e3d27  	dc.b	"tern='[0-9a-zA-Z-_"
 338  9583 2a2e5d        	dc.b	"*.]"
 339  9586 7b302c31307d  	dc.b	"{0,10}' title='0 t"
 340  9598 6f203130206c  	dc.b	"o 10 letters, numb"
 341  95aa 6572732c2061  	dc.b	"ers, and -_*. no s"
 342  95bc 70616365732e  	dc.b	"paces. Use none fo"
 343  95ce 72206e6f2065  	dc.b	"r no entry.' maxle"
 344  95e0 6e6774683d27  	dc.b	"ngth='10'></td></t"
 345  95f2 723e3c74723e  	dc.b	"r><tr><td class='t"
 346  9604 31273e4d5154  	dc.b	"1'>MQTT Password</"
 347  9616 74643e3c7464  	dc.b	"td><td><input name"
 348  9628 3d276d303027  	dc.b	"='m00' class='t1' "
 349  963a 76616c75653d  	dc.b	"value='%m00' patte"
 350  964c 726e3d275b30  	dc.b	"rn='[0-9a-zA-Z-_*."
 351  965e 5d7b302c3130  	dc.b	"]{0,10}' title='0 "
 352  9670 746f20313020  	dc.b	"to 10 letters, num"
 353  9682 626572        	dc.b	"ber"
 354  9685 732c20616e64  	dc.b	"s, and -_*. no spa"
 355  9697 6365732e2055  	dc.b	"ces. Use none for "
 356  96a9 6e6f20656e74  	dc.b	"no entry.' maxleng"
 357  96bb 74683d273130  	dc.b	"th='10'></td></tr>"
 358  96cd 3c2f7461626c  	dc.b	"</table><table><tr"
 359  96df 3e3c74642063  	dc.b	"><td class='t1'>MQ"
 360  96f1 545420537461  	dc.b	"TT Status  </td><t"
 361  9703 6420636c6173  	dc.b	"d class='s%n00'></"
 362  9715 74643e3c7464  	dc.b	"td><td class='s%n0"
 363  9727 31273e3c2f74  	dc.b	"1'></td><td class="
 364  9739 2773256e3032  	dc.b	"'s%n02'></td><td c"
 365  974b 6c6173733d27  	dc.b	"lass='s%n03'></td>"
 366  975d 3c746420636c  	dc.b	"<td class='s%n04'>"
 367  976f 3c2f74643e3c  	dc.b	"</td></tr></table>"
 368  9781 3c703e        	dc.b	"<p>"
 369  9784 3c2f703e3c69  	dc.b	"</p><input type='h"
 370  9796 696464656e27  	dc.b	"idden' name='z00' "
 371  97a8 76616c75653d  	dc.b	"value='1'><button "
 372  97ba 747970653d27  	dc.b	"type='submit'>Save"
 373  97cc 3c2f62757474  	dc.b	"</button><button t"
 374  97de 7970653d2772  	dc.b	"ype='reset'>Undo A"
 375  97f0 6c6c3c2f6275  	dc.b	"ll</button></form>"
 376  9802 3c703e536565  	dc.b	"<p>See Documentati"
 377  9814 6f6e20666f72  	dc.b	"on for help<br>Cod"
 378  9826 652052657669  	dc.b	"e Revision 2020120"
 379  9838 342031353036  	dc.b	"4 1506</p>%y03/91%"
 380  984a 793032526562  	dc.b	"y02Reboot</button>"
 381  985c 3c2f666f726d  	dc.b	"</form><br><br>%y0"
 382  986e 332f36312579  	dc.b	"3/61%y02Refresh</b"
 383  9880 757474        	dc.b	"utt"
 384  9883 6f6e3e3c2f66  	dc.b	"on></form>%y03/60%"
 385  9895 793032494f20  	dc.b	"y02IO Control</but"
 386  98a7 746f6e3e3c2f  	dc.b	"ton></form>%y03/66"
 387  98b9 257930324572  	dc.b	"%y02Error Statisti"
 388  98cb 63733c2f6275  	dc.b	"cs</button></form>"
 389  98dd 3c2f626f6479  	dc.b	"</body></html>",0
 390  98ec               L71_g_HtmlPageStats:
 391  98ec 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 392  98fe 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 393  9910 6561643e3c6c  	dc.b	"ead><link rel='ico"
 394  9922 6e2720687265  	dc.b	"n' href='data:,'><"
 395  9934 2f686561643e  	dc.b	"/head><body><table"
 396  9946 3e3c74723e3c  	dc.b	"><tr><td>Seconds s"
 397  9958 696e63652062  	dc.b	"ince boot %e26</td"
 398  996a 3e3c2f74723e  	dc.b	"></tr><tr><td>RXER"
 399  997c 494620636f75  	dc.b	"IF count %e27</td>"
 400  998e 3c2f74723e3c  	dc.b	"</tr><tr><td>TXERI"
 401  99a0 4620636f756e  	dc.b	"F count %e28</td><"
 402  99b2 2f74723e3c74  	dc.b	"/tr><tr><td>TRANSM"
 403  99c4 495420636f75  	dc.b	"IT count %e29</td>"
 404  99d6 3c2f74723e3c  	dc.b	"</tr></table>%y03/"
 405  99e8 363127        	dc.b	"61'"
 406  99eb 206d6574686f  	dc.b	" method='GET'><but"
 407  99fd 746f6e3e436f  	dc.b	"ton>Configuration<"
 408  9a0f 2f627574746f  	dc.b	"/button></form>%y0"
 409  9a21 332f36362720  	dc.b	"3/66' method='GET'"
 410  9a33 3e3c62757474  	dc.b	"><button>Refresh</"
 411  9a45 627574746f6e  	dc.b	"button></form></bo"
 412  9a57 64793e3c2f68  	dc.b	"dy></html>",0
 413  9a62               L12_g_HtmlPageRstate:
 414  9a62 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 415  9a74 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 416  9a86 6561643e3c74  	dc.b	"ead><title>Short F"
 417  9a98 6f726d3c2f74  	dc.b	"orm</title><link r"
 418  9aaa 656c3d276963  	dc.b	"el='icon' href='da"
 419  9abc 74613a2c273e  	dc.b	"ta:,'></head><body"
 420  9ace 3e3c703e2566  	dc.b	"><p>%f00</p></body"
 421  9ae0 3e3c2f68746d  	dc.b	"></html>",0
 422  9ae9               L32_g_HtmlPageSstate:
 423  9ae9 2566303000    	dc.b	"%f00",0
 424  9aee               L52_page_string00:
 425  9aee 706174746572  	dc.b	"pattern='[0-9]{3}'"
 426  9b00 207469746c65  	dc.b	" title='Enter 000 "
 427  9b12 746f20323535  	dc.b	"to 255' maxlength="
 428  9b24 2733273e3c2f  	dc.b	"'3'></td>",0
 429  9b2e               L72_page_string00_len:
 430  9b2e 3f            	dc.b	63
 431  9b2f               L13_page_string00_len_less4:
 432  9b2f 3b            	dc.b	59
 433  9b30               L33_page_string01:
 434  9b30 706174746572  	dc.b	"pattern='[0-9a-f]{"
 435  9b42 327d27207469  	dc.b	"2}' title='Enter 0"
 436  9b54 3020746f2066  	dc.b	"0 to ff' maxlength"
 437  9b66 3d2732273e3c  	dc.b	"='2'></td>",0
 438  9b71               L53_page_string01_len:
 439  9b71 40            	dc.b	64
 440  9b72               L73_page_string01_len_less4:
 441  9b72 3c            	dc.b	60
 442  9b73               L14_page_string02:
 443  9b73 27206d657468  	dc.b	"' method='GET'><bu"
 444  9b85 74746f6e2074  	dc.b	"tton title='Save f"
 445  9b97 697273742120  	dc.b	"irst! This button "
 446  9ba9 77696c6c206e  	dc.b	"will not save your"
 447  9bbb 206368616e67  	dc.b	" changes'>",0
 448  9bc6               L34_page_string02_len:
 449  9bc6 52            	dc.b	82
 450  9bc7               L54_page_string02_len_less4:
 451  9bc7 4e            	dc.b	78
 452  9bc8               L74_page_string03:
 453  9bc8 3c666f726d20  	dc.b	"<form style='displ"
 454  9bda 61793a20696e  	dc.b	"ay: inline' action"
 455  9bec 3d2700        	dc.b	"='",0
 456  9bef               L15_page_string03_len:
 457  9bef 26            	dc.b	38
 458  9bf0               L35_page_string03_len_less4:
 459  9bf0 22            	dc.b	34
 460  9bf1               L55_page_string04:
 461  9bf1 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 462  9c03 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 463  9c15 6561643e3c6c  	dc.b	"ead><link rel='ico"
 464  9c27 6e2720687265  	dc.b	"n' href='data:,'>",0
 465  9c39               L75_page_string04_len:
 466  9c39 47            	dc.b	71
 467  9c3a               L16_page_string04_len_less4:
 468  9c3a 43            	dc.b	67
 469  9c3b               L36_page_string05:
 470  9c3b 3c7374796c65  	dc.b	"<style>.s0 { backg"
 471  9c4d 726f756e642d  	dc.b	"round-color: red; "
 472  9c5f 77696474683a  	dc.b	"width: 30px; }.s1 "
 473  9c71 7b206261636b  	dc.b	"{ background-color"
 474  9c83 3a2067726565  	dc.b	": green; width: 30"
 475  9c95 70783b207d2e  	dc.b	"px; }.t1 { width: "
 476  9ca7 31323070783b  	dc.b	"120px; }.t2 { widt"
 477  9cb9 683a20313438  	dc.b	"h: 148px; }.t3 { w"
 478  9ccb 696474683a20  	dc.b	"idth: 30px; }.t5 {"
 479  9cdd 207769647468  	dc.b	" width: 60px; }.t6"
 480  9cef 207b20776964  	dc.b	" { width: 25px; }."
 481  9d01 7437207b2077  	dc.b	"t7 { width: 18px; "
 482  9d13 7d2e7438207b  	dc.b	"}.t8 { width: 40px"
 483  9d25 3b207d00      	dc.b	"; }",0
 484  9d29               L56_page_string05_len:
 485  9d29 ed            	dc.b	237
 486  9d2a               L76_page_string05_len_less4:
 487  9d2a e9            	dc.b	233
 488  9d2b               L17_page_string06:
 489  9d2b 7464207b2074  	dc.b	"td { text-align: c"
 490  9d3d 656e7465723b  	dc.b	"enter; border: 1px"
 491  9d4f 20626c61636b  	dc.b	" black solid; }</s"
 492  9d61 74796c653e00  	dc.b	"tyle>",0
 493  9d67               L37_page_string06_len:
 494  9d67 3b            	dc.b	59
 495  9d68               L57_page_string06_len_less4:
 496  9d68 37            	dc.b	55
 552                     ; 1221 uint16_t adjust_template_size()
 552                     ; 1222 {
 554                     .text:	section	.text,new
 555  a497               _adjust_template_size:
 557  a497 89            	pushw	x
 558       00000002      OFST:	set	2
 561                     ; 1240   size = 0;
 563  a498 5f            	clrw	x
 564  a499 1f01          	ldw	(OFST-1,sp),x
 566                     ; 1245   if (current_webpage == WEBPAGE_IOCONTROL) {
 568  a49b c6001a        	ld	a,_current_webpage
 569  a49e 2613          	jrne	L121
 570                     ; 1246     size = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
 572                     ; 1249     size = size + page_string04_len_less4
 572                     ; 1250                 + page_string05_len_less4
 572                     ; 1251 		+ page_string06_len_less4;
 574  a4a0 ae0d69        	ldw	x,#3433
 575  a4a3 1f01          	ldw	(OFST-1,sp),x
 577                     ; 1256     size = size + strlen(stored_devicename) - 4 ;
 579  a4a5 ae4000        	ldw	x,#_stored_devicename
 580  a4a8 cdf701        	call	_strlen
 582  a4ab 72fb01        	addw	x,(OFST-1,sp)
 583  a4ae 1c00a4        	addw	x,#164
 585                     ; 1263     size = size - 48;
 588                     ; 1279     size = size - 8;
 591                     ; 1293     size = size + (2 * page_string03_len_less4);
 594                     ; 1322     size = size + (2 * (page_string02_len_less4));
 598  a4b1 204f          	jra	L321
 599  a4b3               L121:
 600                     ; 1341   else if (current_webpage == WEBPAGE_CONFIGURATION) {
 602  a4b3 a101          	cp	a,#1
 603  a4b5 2632          	jrne	L521
 604                     ; 1342     size = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
 606                     ; 1345     size = size + page_string04_len_less4
 606                     ; 1346                 + page_string05_len_less4
 606                     ; 1347 		+ page_string06_len_less4;
 608  a4b7 ae0dbf        	ldw	x,#3519
 609  a4ba 1f01          	ldw	(OFST-1,sp),x
 611                     ; 1352     size = size + strlen(stored_devicename) - 4 ;
 613  a4bc ae4000        	ldw	x,#_stored_devicename
 614  a4bf cdf701        	call	_strlen
 616  a4c2 72fb01        	addw	x,(OFST-1,sp)
 617  a4c5 1d001c        	subw	x,#28
 619                     ; 1359     size = size - 12;
 622                     ; 1366     size = size + 1;
 625                     ; 1373     size = size - 12;
 628                     ; 1381     size = size + 2;
 631                     ; 1389     size = size - 4;
 634                     ; 1396     size = size + 1;
 636  a4c8 1f01          	ldw	(OFST-1,sp),x
 638                     ; 1401     size = size + (strlen(stored_mqtt_username) - 4);
 640  a4ca ae4035        	ldw	x,#_stored_mqtt_username
 641  a4cd cdf701        	call	_strlen
 643  a4d0 1d0004        	subw	x,#4
 644  a4d3 72fb01        	addw	x,(OFST-1,sp)
 645  a4d6 1f01          	ldw	(OFST-1,sp),x
 647                     ; 1406     size = size + (strlen(stored_mqtt_password) - 4);
 649  a4d8 ae4040        	ldw	x,#_stored_mqtt_password
 650  a4db cdf701        	call	_strlen
 652  a4de 1d0004        	subw	x,#4
 653  a4e1 72fb01        	addw	x,(OFST-1,sp)
 655                     ; 1413     size = size - 15;
 657  a4e4 1c06c9        	addw	x,#1737
 659                     ; 1427     size = size + (3 * page_string03_len_less4);
 662                     ; 1433     size = size + page_string03_len_less4;
 665                     ; 1456     size = size + (12 * (page_string00_len_less4));
 668                     ; 1465     size = size + (4 * (page_string00_len_less4));
 671                     ; 1475     size = size + (6 * (page_string01_len_less4));
 674                     ; 1484     size = size + (3 * (page_string02_len_less4));
 677                     ; 1499     size = size + page_string02_len_less4;
 681  a4e7 2019          	jra	L321
 682  a4e9               L521:
 683                     ; 1573   else if (current_webpage == WEBPAGE_STATS) {
 685  a4e9 a105          	cp	a,#5
 686  a4eb 2605          	jrne	L131
 687                     ; 1574     size = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
 689                     ; 1581     size = size + 24;
 691                     ; 1590     size = size + (2 * page_string03_len_less4);
 693  a4ed ae01d1        	ldw	x,#465
 696  a4f0 2010          	jra	L321
 697  a4f2               L131:
 698                     ; 1598   else if (current_webpage == WEBPAGE_RSTATE) {
 700  a4f2 a106          	cp	a,#6
 701  a4f4 2605          	jrne	L531
 702                     ; 1599     size = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
 704                     ; 1604     size = size + 12;
 706  a4f6 ae0092        	ldw	x,#146
 709  a4f9 2007          	jra	L321
 710  a4fb               L531:
 711                     ; 1611   else if (current_webpage == WEBPAGE_SSTATE) {
 713  a4fb a107          	cp	a,#7
 714  a4fd 2603          	jrne	L321
 715                     ; 1612     size = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
 717                     ; 1617     size = size + 12;
 719  a4ff ae0010        	ldw	x,#16
 721  a502               L321:
 722                     ; 1620   return size;
 726  a502 5b02          	addw	sp,#2
 727  a504 81            	ret	
 818                     ; 1624 void emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
 818                     ; 1625 {
 819                     .text:	section	.text,new
 820  a505               _emb_itoa:
 822  a505 5207          	subw	sp,#7
 823       00000007      OFST:	set	7
 826                     ; 1643   for (i=0; i < pad; i++) str[i] = '0';
 828  a507 0f07          	clr	(OFST+0,sp)
 831  a509 200a          	jra	L502
 832  a50b               L102:
 835  a50b 5f            	clrw	x
 836  a50c 97            	ld	xl,a
 837  a50d 72fb0e        	addw	x,(OFST+7,sp)
 838  a510 a630          	ld	a,#48
 839  a512 f7            	ld	(x),a
 842  a513 0c07          	inc	(OFST+0,sp)
 844  a515               L502:
 847  a515 7b07          	ld	a,(OFST+0,sp)
 848  a517 1111          	cp	a,(OFST+10,sp)
 849  a519 25f0          	jrult	L102
 850                     ; 1644   str[pad] = '\0';
 852  a51b 7b11          	ld	a,(OFST+10,sp)
 853  a51d 5f            	clrw	x
 854  a51e 97            	ld	xl,a
 855  a51f 72fb0e        	addw	x,(OFST+7,sp)
 856  a522 7f            	clr	(x)
 857                     ; 1645   if (num == 0) return;
 859  a523 96            	ldw	x,sp
 860  a524 1c000a        	addw	x,#OFST+3
 861  a527 cdfae1        	call	c_lzmp
 863  a52a 2603cca5d4    	jreq	L02
 866                     ; 1648   i = 0;
 868  a52f 0f07          	clr	(OFST+0,sp)
 871  a531 2060          	jra	L712
 872  a533               L312:
 873                     ; 1650     rem = (uint8_t)(num % base);
 875  a533 7b10          	ld	a,(OFST+9,sp)
 876  a535 b703          	ld	c_lreg+3,a
 877  a537 3f02          	clr	c_lreg+2
 878  a539 3f01          	clr	c_lreg+1
 879  a53b 3f00          	clr	c_lreg
 880  a53d 96            	ldw	x,sp
 881  a53e 5c            	incw	x
 882  a53f cdfaf4        	call	c_rtol
 885  a542 96            	ldw	x,sp
 886  a543 1c000a        	addw	x,#OFST+3
 887  a546 cdf98e        	call	c_ltor
 889  a549 96            	ldw	x,sp
 890  a54a 5c            	incw	x
 891  a54b cdfac7        	call	c_lumd
 893  a54e b603          	ld	a,c_lreg+3
 894  a550 6b06          	ld	(OFST-1,sp),a
 896                     ; 1651     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
 898  a552 a10a          	cp	a,#10
 899  a554 7b07          	ld	a,(OFST+0,sp)
 900  a556 250d          	jrult	L322
 903  a558 0c07          	inc	(OFST+0,sp)
 905  a55a 5f            	clrw	x
 906  a55b 97            	ld	xl,a
 907  a55c 72fb0e        	addw	x,(OFST+7,sp)
 908  a55f 7b06          	ld	a,(OFST-1,sp)
 909  a561 ab57          	add	a,#87
 911  a563 200b          	jra	L522
 912  a565               L322:
 913                     ; 1652     else str[i++] = (uint8_t)(rem + '0');
 915  a565 0c07          	inc	(OFST+0,sp)
 917  a567 5f            	clrw	x
 918  a568 97            	ld	xl,a
 919  a569 72fb0e        	addw	x,(OFST+7,sp)
 920  a56c 7b06          	ld	a,(OFST-1,sp)
 921  a56e ab30          	add	a,#48
 922  a570               L522:
 923  a570 f7            	ld	(x),a
 924                     ; 1653     num = num/base;
 926  a571 7b10          	ld	a,(OFST+9,sp)
 927  a573 b703          	ld	c_lreg+3,a
 928  a575 3f02          	clr	c_lreg+2
 929  a577 3f01          	clr	c_lreg+1
 930  a579 3f00          	clr	c_lreg
 931  a57b 96            	ldw	x,sp
 932  a57c 5c            	incw	x
 933  a57d cdfaf4        	call	c_rtol
 936  a580 96            	ldw	x,sp
 937  a581 1c000a        	addw	x,#OFST+3
 938  a584 cdf98e        	call	c_ltor
 940  a587 96            	ldw	x,sp
 941  a588 5c            	incw	x
 942  a589 cdf9a0        	call	c_ludv
 944  a58c 96            	ldw	x,sp
 945  a58d 1c000a        	addw	x,#OFST+3
 946  a590 cdfaf4        	call	c_rtol
 948  a593               L712:
 949                     ; 1649   while (num != 0) {
 951  a593 96            	ldw	x,sp
 952  a594 1c000a        	addw	x,#OFST+3
 953  a597 cdfae1        	call	c_lzmp
 955  a59a 2697          	jrne	L312
 956                     ; 1662     start = 0;
 958  a59c 0f06          	clr	(OFST-1,sp)
 960                     ; 1663     end = (uint8_t)(pad - 1);
 962  a59e 7b11          	ld	a,(OFST+10,sp)
 963  a5a0 4a            	dec	a
 964  a5a1 6b07          	ld	(OFST+0,sp),a
 967  a5a3 2029          	jra	L332
 968  a5a5               L722:
 969                     ; 1666       temp = str[start];
 971  a5a5 5f            	clrw	x
 972  a5a6 97            	ld	xl,a
 973  a5a7 72fb0e        	addw	x,(OFST+7,sp)
 974  a5aa f6            	ld	a,(x)
 975  a5ab 6b05          	ld	(OFST-2,sp),a
 977                     ; 1667       str[start] = str[end];
 979  a5ad 5f            	clrw	x
 980  a5ae 7b06          	ld	a,(OFST-1,sp)
 981  a5b0 97            	ld	xl,a
 982  a5b1 72fb0e        	addw	x,(OFST+7,sp)
 983  a5b4 7b07          	ld	a,(OFST+0,sp)
 984  a5b6 905f          	clrw	y
 985  a5b8 9097          	ld	yl,a
 986  a5ba 72f90e        	addw	y,(OFST+7,sp)
 987  a5bd 90f6          	ld	a,(y)
 988  a5bf f7            	ld	(x),a
 989                     ; 1668       str[end] = temp;
 991  a5c0 5f            	clrw	x
 992  a5c1 7b07          	ld	a,(OFST+0,sp)
 993  a5c3 97            	ld	xl,a
 994  a5c4 72fb0e        	addw	x,(OFST+7,sp)
 995  a5c7 7b05          	ld	a,(OFST-2,sp)
 996  a5c9 f7            	ld	(x),a
 997                     ; 1669       start++;
 999  a5ca 0c06          	inc	(OFST-1,sp)
1001                     ; 1670       end--;
1003  a5cc 0a07          	dec	(OFST+0,sp)
1005  a5ce               L332:
1006                     ; 1665     while (start < end) {
1006                     ; 1666       temp = str[start];
1006                     ; 1667       str[start] = str[end];
1006                     ; 1668       str[end] = temp;
1006                     ; 1669       start++;
1006                     ; 1670       end--;
1008  a5ce 7b06          	ld	a,(OFST-1,sp)
1009  a5d0 1107          	cp	a,(OFST+0,sp)
1010  a5d2 25d1          	jrult	L722
1011                     ; 1673 }
1012  a5d4               L02:
1015  a5d4 5b07          	addw	sp,#7
1016  a5d6 81            	ret	
1076                     ; 1676 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1076                     ; 1677 {
1077                     .text:	section	.text,new
1078  a5d7               L3_CopyStringP:
1080  a5d7 89            	pushw	x
1081  a5d8 5203          	subw	sp,#3
1082       00000003      OFST:	set	3
1085                     ; 1682   nBytes = 0;
1087  a5da 5f            	clrw	x
1089  a5db 2014          	jra	L172
1090  a5dd               L562:
1091                     ; 1684     **ppBuffer = Character;
1093  a5dd 1e04          	ldw	x,(OFST+1,sp)
1094  a5df fe            	ldw	x,(x)
1095  a5e0 f7            	ld	(x),a
1096                     ; 1685     *ppBuffer = *ppBuffer + 1;
1098  a5e1 1e04          	ldw	x,(OFST+1,sp)
1099  a5e3 9093          	ldw	y,x
1100  a5e5 fe            	ldw	x,(x)
1101  a5e6 5c            	incw	x
1102  a5e7 90ff          	ldw	(y),x
1103                     ; 1686     pString = pString + 1;
1105  a5e9 1e08          	ldw	x,(OFST+5,sp)
1106  a5eb 5c            	incw	x
1107  a5ec 1f08          	ldw	(OFST+5,sp),x
1108                     ; 1687     nBytes++;
1110  a5ee 1e01          	ldw	x,(OFST-2,sp)
1111  a5f0 5c            	incw	x
1112  a5f1               L172:
1113  a5f1 1f01          	ldw	(OFST-2,sp),x
1115                     ; 1683   while ((Character = pString[0]) != '\0') {
1115                     ; 1684     **ppBuffer = Character;
1115                     ; 1685     *ppBuffer = *ppBuffer + 1;
1115                     ; 1686     pString = pString + 1;
1115                     ; 1687     nBytes++;
1117  a5f3 1e08          	ldw	x,(OFST+5,sp)
1118  a5f5 f6            	ld	a,(x)
1119  a5f6 6b03          	ld	(OFST+0,sp),a
1121  a5f8 26e3          	jrne	L562
1122                     ; 1689   return nBytes;
1124  a5fa 1e01          	ldw	x,(OFST-2,sp)
1127  a5fc 5b05          	addw	sp,#5
1128  a5fe 81            	ret	
1187                     ; 1693 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint16_t nDataLen)
1187                     ; 1694 {
1188                     .text:	section	.text,new
1189  a5ff               L5_CopyHttpHeader:
1191  a5ff 89            	pushw	x
1192  a600 5203          	subw	sp,#3
1193       00000003      OFST:	set	3
1196                     ; 1698   nBytes = 0;
1198  a602 5f            	clrw	x
1199  a603 1f02          	ldw	(OFST-1,sp),x
1201                     ; 1700   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1203  a605 ae9e5c        	ldw	x,#L123
1204  a608 89            	pushw	x
1205  a609 96            	ldw	x,sp
1206  a60a 1c0006        	addw	x,#OFST+3
1207  a60d cda5d7        	call	L3_CopyStringP
1209  a610 5b02          	addw	sp,#2
1210  a612 72fb02        	addw	x,(OFST-1,sp)
1211  a615 1f02          	ldw	(OFST-1,sp),x
1213                     ; 1701   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1215  a617 ae9e59        	ldw	x,#L323
1216  a61a 89            	pushw	x
1217  a61b 96            	ldw	x,sp
1218  a61c 1c0006        	addw	x,#OFST+3
1219  a61f cda5d7        	call	L3_CopyStringP
1221  a622 5b02          	addw	sp,#2
1222  a624 72fb02        	addw	x,(OFST-1,sp)
1223  a627 1f02          	ldw	(OFST-1,sp),x
1225                     ; 1703   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1227  a629 ae9e49        	ldw	x,#L523
1228  a62c 89            	pushw	x
1229  a62d 96            	ldw	x,sp
1230  a62e 1c0006        	addw	x,#OFST+3
1231  a631 cda5d7        	call	L3_CopyStringP
1233  a634 5b02          	addw	sp,#2
1234  a636 72fb02        	addw	x,(OFST-1,sp)
1235  a639 1f02          	ldw	(OFST-1,sp),x
1237                     ; 1707   emb_itoa(nDataLen, OctetArray, 10, 5);
1239  a63b 4b05          	push	#5
1240  a63d 4b0a          	push	#10
1241  a63f ae005c        	ldw	x,#_OctetArray
1242  a642 89            	pushw	x
1243  a643 1e0c          	ldw	x,(OFST+9,sp)
1244  a645 cdfb55        	call	c_uitolx
1246  a648 be02          	ldw	x,c_lreg+2
1247  a64a 89            	pushw	x
1248  a64b be00          	ldw	x,c_lreg
1249  a64d 89            	pushw	x
1250  a64e cda505        	call	_emb_itoa
1252  a651 5b08          	addw	sp,#8
1253                     ; 1708   for (i=0; i<5; i++) {
1255  a653 4f            	clr	a
1256  a654 6b01          	ld	(OFST-2,sp),a
1258  a656               L723:
1259                     ; 1709     *pBuffer = (uint8_t)OctetArray[i];
1261  a656 5f            	clrw	x
1262  a657 97            	ld	xl,a
1263  a658 d6005c        	ld	a,(_OctetArray,x)
1264  a65b 1e04          	ldw	x,(OFST+1,sp)
1265  a65d f7            	ld	(x),a
1266                     ; 1710     pBuffer = pBuffer + 1;
1268  a65e 5c            	incw	x
1269  a65f 1f04          	ldw	(OFST+1,sp),x
1270                     ; 1708   for (i=0; i<5; i++) {
1272  a661 0c01          	inc	(OFST-2,sp)
1276  a663 7b01          	ld	a,(OFST-2,sp)
1277  a665 a105          	cp	a,#5
1278  a667 25ed          	jrult	L723
1279                     ; 1712   nBytes += 5;
1281  a669 1e02          	ldw	x,(OFST-1,sp)
1282  a66b 1c0005        	addw	x,#5
1283  a66e 1f02          	ldw	(OFST-1,sp),x
1285                     ; 1714   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1287  a670 ae9e59        	ldw	x,#L323
1288  a673 89            	pushw	x
1289  a674 96            	ldw	x,sp
1290  a675 1c0006        	addw	x,#OFST+3
1291  a678 cda5d7        	call	L3_CopyStringP
1293  a67b 5b02          	addw	sp,#2
1294  a67d 72fb02        	addw	x,(OFST-1,sp)
1295  a680 1f02          	ldw	(OFST-1,sp),x
1297                     ; 1717   nBytes += CopyStringP(&pBuffer, (const char *)("Cache-Control: no-cache, no-store\r\n"));
1299  a682 ae9e25        	ldw	x,#L533
1300  a685 89            	pushw	x
1301  a686 96            	ldw	x,sp
1302  a687 1c0006        	addw	x,#OFST+3
1303  a68a cda5d7        	call	L3_CopyStringP
1305  a68d 5b02          	addw	sp,#2
1306  a68f 72fb02        	addw	x,(OFST-1,sp)
1307  a692 1f02          	ldw	(OFST-1,sp),x
1309                     ; 1719   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type: text/html; charset=utf-8\r\n"));
1311  a694 ae9dfc        	ldw	x,#L733
1312  a697 89            	pushw	x
1313  a698 96            	ldw	x,sp
1314  a699 1c0006        	addw	x,#OFST+3
1315  a69c cda5d7        	call	L3_CopyStringP
1317  a69f 5b02          	addw	sp,#2
1318  a6a1 72fb02        	addw	x,(OFST-1,sp)
1319  a6a4 1f02          	ldw	(OFST-1,sp),x
1321                     ; 1721   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
1323  a6a6 ae9de9        	ldw	x,#L143
1324  a6a9 89            	pushw	x
1325  a6aa 96            	ldw	x,sp
1326  a6ab 1c0006        	addw	x,#OFST+3
1327  a6ae cda5d7        	call	L3_CopyStringP
1329  a6b1 5b02          	addw	sp,#2
1330  a6b3 72fb02        	addw	x,(OFST-1,sp)
1331  a6b6 1f02          	ldw	(OFST-1,sp),x
1333                     ; 1722   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1335  a6b8 ae9e59        	ldw	x,#L323
1336  a6bb 89            	pushw	x
1337  a6bc 96            	ldw	x,sp
1338  a6bd 1c0006        	addw	x,#OFST+3
1339  a6c0 cda5d7        	call	L3_CopyStringP
1341  a6c3 5b02          	addw	sp,#2
1342  a6c5 72fb02        	addw	x,(OFST-1,sp)
1344                     ; 1724   return nBytes;
1348  a6c8 5b05          	addw	sp,#5
1349  a6ca 81            	ret	
1506                     	switch	.const
1507  9d69               L431:
1508  9d69 a878          	dc.w	L343
1509  9d6b a886          	dc.w	L543
1510  9d6d a894          	dc.w	L743
1511  9d6f a8a2          	dc.w	L153
1512  9d71 a8b0          	dc.w	L353
1513  9d73 a8be          	dc.w	L553
1514  9d75 a8cc          	dc.w	L753
1515  9d77 a8d9          	dc.w	L163
1516  9d79 a8e6          	dc.w	L363
1517  9d7b a8f3          	dc.w	L563
1518  9d7d a900          	dc.w	L763
1519  9d7f a90d          	dc.w	L173
1520  9d81 a91a          	dc.w	L373
1521  9d83 a927          	dc.w	L573
1522  9d85 a934          	dc.w	L773
1523  9d87 a941          	dc.w	L104
1524                     ; 1728 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
1524                     ; 1729 {
1525                     .text:	section	.text,new
1526  a6cb               L7_CopyHttpData:
1528  a6cb 89            	pushw	x
1529  a6cc 5208          	subw	sp,#8
1530       00000008      OFST:	set	8
1533                     ; 1748   nBytes = 0;
1535  a6ce 5f            	clrw	x
1536  a6cf 1f05          	ldw	(OFST-3,sp),x
1538                     ; 1749   nParsedNum = 0;
1540  a6d1 0f07          	clr	(OFST-1,sp)
1542                     ; 1750   nParsedMode = 0;
1544  a6d3 0f04          	clr	(OFST-4,sp)
1546                     ; 1805   nMaxBytes = UIP_TCP_MSS - 25;
1548  a6d5 ae019f        	ldw	x,#415
1549  a6d8 1f11          	ldw	(OFST+9,sp),x
1551  a6da ccacaa        	jra	L325
1552  a6dd               L125:
1553                     ; 1839     if (*pDataLeft > 0) {
1555  a6dd 1e0f          	ldw	x,(OFST+7,sp)
1556  a6df e601          	ld	a,(1,x)
1557  a6e1 fa            	or	a,(x)
1558  a6e2 2603ccacb3    	jreq	L525
1559                     ; 1846       if (insertion_flag[0] != 0) {
1561  a6e7 c60017        	ld	a,_insertion_flag
1562  a6ea 2711          	jreq	L135
1563                     ; 1855         nParsedMode = insertion_flag[1];
1565  a6ec c60018        	ld	a,_insertion_flag+1
1566  a6ef 6b04          	ld	(OFST-4,sp),a
1568                     ; 1856         nParsedNum = insertion_flag[2];
1570  a6f1 c60019        	ld	a,_insertion_flag+2
1571  a6f4 6b07          	ld	(OFST-1,sp),a
1573                     ; 1857 	nByte = '0'; // Need to set nByte to something other than '%' so we
1575  a6f6 a630          	ld	a,#48
1576  a6f8 6b02          	ld	(OFST-6,sp),a
1579  a6fa cca7bc        	jra	L335
1580  a6fd               L135:
1581                     ; 1870         memcpy(&nByte, *ppData, 1);
1583  a6fd 96            	ldw	x,sp
1584  a6fe 1c0002        	addw	x,#OFST-6
1585  a701 bf04          	ldw	c_x,x
1586  a703 160d          	ldw	y,(OFST+5,sp)
1587  a705 90fe          	ldw	y,(y)
1588  a707 90bf07        	ldw	c_y,y
1589  a70a ae0001        	ldw	x,#1
1590  a70d               L25:
1591  a70d 5a            	decw	x
1592  a70e 92d607        	ld	a,([c_y.w],x)
1593  a711 92d704        	ld	([c_x.w],x),a
1594  a714 5d            	tnzw	x
1595  a715 26f6          	jrne	L25
1596                     ; 1913         if (nByte == '%') {
1598  a717 7b02          	ld	a,(OFST-6,sp)
1599  a719 a125          	cp	a,#37
1600  a71b 26dd          	jrne	L335
1601                     ; 1914           *ppData = *ppData + 1;
1603  a71d 1e0d          	ldw	x,(OFST+5,sp)
1604  a71f 9093          	ldw	y,x
1605  a721 fe            	ldw	x,(x)
1606  a722 5c            	incw	x
1607  a723 90ff          	ldw	(y),x
1608                     ; 1915           *pDataLeft = *pDataLeft - 1;
1610  a725 1e0f          	ldw	x,(OFST+7,sp)
1611  a727 9093          	ldw	y,x
1612  a729 fe            	ldw	x,(x)
1613  a72a 5a            	decw	x
1614  a72b 90ff          	ldw	(y),x
1615                     ; 1920           memcpy(&nParsedMode, *ppData, 1);
1617  a72d 96            	ldw	x,sp
1618  a72e 1c0004        	addw	x,#OFST-4
1619  a731 bf04          	ldw	c_x,x
1620  a733 160d          	ldw	y,(OFST+5,sp)
1621  a735 90fe          	ldw	y,(y)
1622  a737 90bf07        	ldw	c_y,y
1623  a73a ae0001        	ldw	x,#1
1624  a73d               L45:
1625  a73d 5a            	decw	x
1626  a73e 92d607        	ld	a,([c_y.w],x)
1627  a741 92d704        	ld	([c_x.w],x),a
1628  a744 5d            	tnzw	x
1629  a745 26f6          	jrne	L45
1630                     ; 1921           *ppData = *ppData + 1;
1632  a747 1e0d          	ldw	x,(OFST+5,sp)
1633  a749 9093          	ldw	y,x
1634  a74b fe            	ldw	x,(x)
1635  a74c 5c            	incw	x
1636  a74d 90ff          	ldw	(y),x
1637                     ; 1922           *pDataLeft = *pDataLeft - 1;
1639  a74f 1e0f          	ldw	x,(OFST+7,sp)
1640  a751 9093          	ldw	y,x
1641  a753 fe            	ldw	x,(x)
1642  a754 5a            	decw	x
1643  a755 90ff          	ldw	(y),x
1644                     ; 1927           memcpy(&temp, *ppData, 1);
1646  a757 96            	ldw	x,sp
1647  a758 5c            	incw	x
1648  a759 bf04          	ldw	c_x,x
1649  a75b 160d          	ldw	y,(OFST+5,sp)
1650  a75d 90fe          	ldw	y,(y)
1651  a75f 90bf07        	ldw	c_y,y
1652  a762 ae0001        	ldw	x,#1
1653  a765               L65:
1654  a765 5a            	decw	x
1655  a766 92d607        	ld	a,([c_y.w],x)
1656  a769 92d704        	ld	([c_x.w],x),a
1657  a76c 5d            	tnzw	x
1658  a76d 26f6          	jrne	L65
1659                     ; 1928           nParsedNum = (uint8_t)((temp - '0') * 10);
1661  a76f 7b01          	ld	a,(OFST-7,sp)
1662  a771 97            	ld	xl,a
1663  a772 a60a          	ld	a,#10
1664  a774 42            	mul	x,a
1665  a775 9f            	ld	a,xl
1666  a776 a0e0          	sub	a,#224
1667  a778 6b07          	ld	(OFST-1,sp),a
1669                     ; 1929           *ppData = *ppData + 1;
1671  a77a 1e0d          	ldw	x,(OFST+5,sp)
1672  a77c 9093          	ldw	y,x
1673  a77e fe            	ldw	x,(x)
1674  a77f 5c            	incw	x
1675  a780 90ff          	ldw	(y),x
1676                     ; 1930           *pDataLeft = *pDataLeft - 1;
1678  a782 1e0f          	ldw	x,(OFST+7,sp)
1679  a784 9093          	ldw	y,x
1680  a786 fe            	ldw	x,(x)
1681  a787 5a            	decw	x
1682  a788 90ff          	ldw	(y),x
1683                     ; 1935           memcpy(&temp, *ppData, 1);
1685  a78a 96            	ldw	x,sp
1686  a78b 5c            	incw	x
1687  a78c bf04          	ldw	c_x,x
1688  a78e 160d          	ldw	y,(OFST+5,sp)
1689  a790 90fe          	ldw	y,(y)
1690  a792 90bf07        	ldw	c_y,y
1691  a795 ae0001        	ldw	x,#1
1692  a798               L06:
1693  a798 5a            	decw	x
1694  a799 92d607        	ld	a,([c_y.w],x)
1695  a79c 92d704        	ld	([c_x.w],x),a
1696  a79f 5d            	tnzw	x
1697  a7a0 26f6          	jrne	L06
1698                     ; 1936           nParsedNum = (uint8_t)(nParsedNum + temp - '0');
1700  a7a2 7b07          	ld	a,(OFST-1,sp)
1701  a7a4 1b01          	add	a,(OFST-7,sp)
1702  a7a6 a030          	sub	a,#48
1703  a7a8 6b07          	ld	(OFST-1,sp),a
1705                     ; 1937           *ppData = *ppData + 1;
1707  a7aa 1e0d          	ldw	x,(OFST+5,sp)
1708  a7ac 9093          	ldw	y,x
1709  a7ae fe            	ldw	x,(x)
1710  a7af 5c            	incw	x
1711  a7b0 90ff          	ldw	(y),x
1712                     ; 1938           *pDataLeft = *pDataLeft - 1;
1714  a7b2 1e0f          	ldw	x,(OFST+7,sp)
1715  a7b4 9093          	ldw	y,x
1716  a7b6 fe            	ldw	x,(x)
1717  a7b7 5a            	decw	x
1718  a7b8 90ff          	ldw	(y),x
1719  a7ba 7b02          	ld	a,(OFST-6,sp)
1720  a7bc               L335:
1721                     ; 1942       if ((nByte == '%') || (insertion_flag[0] != 0)) {
1723  a7bc a125          	cp	a,#37
1724  a7be 2709          	jreq	L145
1726  a7c0 725d0017      	tnz	_insertion_flag
1727  a7c4 2603ccac8d    	jreq	L735
1728  a7c9               L145:
1729                     ; 1952         if (nParsedMode == 'i') {
1731  a7c9 7b04          	ld	a,(OFST-4,sp)
1732  a7cb a169          	cp	a,#105
1733  a7cd 262b          	jrne	L345
1734                     ; 1966           if (nParsedNum > 7) {
1736  a7cf 7b07          	ld	a,(OFST-1,sp)
1737  a7d1 a108          	cp	a,#8
1738  a7d3 2520          	jrult	L545
1739                     ; 1968 	    i = GpioGetPin(nParsedNum);
1741  a7d5 cdbc27        	call	_GpioGetPin
1743  a7d8 6b08          	ld	(OFST+0,sp),a
1745                     ; 1969 	    if (invert_input == 0x00) *pBuffer = (uint8_t)(i + '0');
1747  a7da 725d0165      	tnz	_invert_input
1748  a7de 2607          	jrne	L745
1751  a7e0               LC012:
1752  a7e0 ab30          	add	a,#48
1753  a7e2 1e09          	ldw	x,(OFST+1,sp)
1755  a7e4 ccabc3        	jra	L7201
1756  a7e7               L745:
1757                     ; 1971 	      if (i == 0) *pBuffer = (uint8_t)('1');
1759  a7e7 7b08          	ld	a,(OFST+0,sp)
1760  a7e9 2703ccabbf    	jrne	L5201
1763  a7ee 1e09          	ldw	x,(OFST+1,sp)
1764  a7f0 a631          	ld	a,#49
1766  a7f2 ccabc3        	jra	L7201
1767                     ; 1972 	      else *pBuffer = (uint8_t)('0');
1768                     ; 1974             pBuffer++;
1769                     ; 1975             nBytes++;
1771  a7f5               L545:
1772                     ; 1979 	    *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
1774  a7f5 cdbc27        	call	_GpioGetPin
1776                     ; 1980             pBuffer++;
1777                     ; 1981             nBytes++;
1778  a7f8 20e6          	jp	LC012
1779  a7fa               L345:
1780                     ; 1999         else if ((nParsedMode == 'o' && ((uint8_t)(GpioGetPin(nParsedNum) == 1)))
1780                     ; 2000 	      || (nParsedMode == 'p' && ((uint8_t)(GpioGetPin(nParsedNum) == 0)))) { 
1782  a7fa a16f          	cp	a,#111
1783  a7fc 260a          	jrne	L765
1785  a7fe 7b07          	ld	a,(OFST-1,sp)
1786  a800 cdbc27        	call	_GpioGetPin
1788  a803 4a            	dec	a
1789  a804 270e          	jreq	L565
1790  a806 7b04          	ld	a,(OFST-4,sp)
1791  a808               L765:
1793  a808 a170          	cp	a,#112
1794  a80a 2626          	jrne	L365
1796  a80c 7b07          	ld	a,(OFST-1,sp)
1797  a80e cdbc27        	call	_GpioGetPin
1799  a811 4d            	tnz	a
1800  a812 261e          	jrne	L365
1801  a814               L565:
1802                     ; 2005           for(i=0; i<7; i++) {
1804  a814 4f            	clr	a
1805  a815 6b08          	ld	(OFST+0,sp),a
1807  a817               L175:
1808                     ; 2006             *pBuffer = checked[i];
1810  a817 5f            	clrw	x
1811  a818 97            	ld	xl,a
1812  a819 d68080        	ld	a,(L11_checked,x)
1813  a81c 1e09          	ldw	x,(OFST+1,sp)
1814  a81e f7            	ld	(x),a
1815                     ; 2007             pBuffer++;
1817  a81f 5c            	incw	x
1818  a820 1f09          	ldw	(OFST+1,sp),x
1819                     ; 2005           for(i=0; i<7; i++) {
1821  a822 0c08          	inc	(OFST+0,sp)
1825  a824 7b08          	ld	a,(OFST+0,sp)
1826  a826 a107          	cp	a,#7
1827  a828 25ed          	jrult	L175
1828                     ; 2009 	  nBytes += 7;
1830  a82a 1e05          	ldw	x,(OFST-3,sp)
1831  a82c 1c0007        	addw	x,#7
1833  a82f ccaca8        	jp	LC006
1834  a832               L365:
1835                     ; 2012         else if (nParsedMode == 'a') {
1837  a832 7b04          	ld	a,(OFST-4,sp)
1838  a834 a161          	cp	a,#97
1839  a836 2629          	jrne	L106
1840                     ; 2014 	  for(i=0; i<19; i++) {
1842  a838 4f            	clr	a
1843  a839 6b08          	ld	(OFST+0,sp),a
1845  a83b               L306:
1846                     ; 2015 	    if (stored_devicename[i] != '\0') {
1848  a83b 5f            	clrw	x
1849  a83c 97            	ld	xl,a
1850  a83d 724d4000      	tnz	(_stored_devicename,x)
1851  a841 2603ccacaa    	jreq	L325
1852                     ; 2016               *pBuffer = (uint8_t)(stored_devicename[i]);
1854  a846 5f            	clrw	x
1855  a847 97            	ld	xl,a
1856  a848 d64000        	ld	a,(_stored_devicename,x)
1857  a84b 1e09          	ldw	x,(OFST+1,sp)
1858  a84d f7            	ld	(x),a
1859                     ; 2017               pBuffer++;
1861  a84e 5c            	incw	x
1862  a84f 1f09          	ldw	(OFST+1,sp),x
1863                     ; 2018               nBytes++;
1865  a851 1e05          	ldw	x,(OFST-3,sp)
1866  a853 5c            	incw	x
1867  a854 1f05          	ldw	(OFST-3,sp),x
1870                     ; 2014 	  for(i=0; i<19; i++) {
1872  a856 0c08          	inc	(OFST+0,sp)
1876  a858 7b08          	ld	a,(OFST+0,sp)
1877  a85a a113          	cp	a,#19
1878  a85c 25dd          	jrult	L306
1879  a85e ccacaa        	jra	L325
1880  a861               L106:
1881                     ; 2024         else if (nParsedMode == 'b') {
1883  a861 a162          	cp	a,#98
1884  a863 2703cca97d    	jrne	L716
1885                     ; 2029           switch (nParsedNum)
1887  a868 7b07          	ld	a,(OFST-1,sp)
1889                     ; 2050 	    default: break;
1890  a86a a110          	cp	a,#16
1891  a86c 2503cca95f    	jruge	L326
1892  a871 5f            	clrw	x
1893  a872 97            	ld	xl,a
1894  a873 58            	sllw	x
1895  a874 de9d69        	ldw	x,(L431,x)
1896  a877 fc            	jp	(x)
1897  a878               L343:
1898                     ; 2032 	    case 0:  emb_itoa(stored_hostaddr[3], OctetArray, 10, 3); break;
1900  a878 4b03          	push	#3
1901  a87a 4b0a          	push	#10
1902  a87c ae005c        	ldw	x,#_OctetArray
1903  a87f 89            	pushw	x
1904  a880 c6402a        	ld	a,_stored_hostaddr+3
1908  a883 cca94c        	jp	LC001
1909  a886               L543:
1910                     ; 2033 	    case 1:  emb_itoa(stored_hostaddr[2], OctetArray, 10, 3); break;
1912  a886 4b03          	push	#3
1913  a888 4b0a          	push	#10
1914  a88a ae005c        	ldw	x,#_OctetArray
1915  a88d 89            	pushw	x
1916  a88e c64029        	ld	a,_stored_hostaddr+2
1920  a891 cca94c        	jp	LC001
1921  a894               L743:
1922                     ; 2034 	    case 2:  emb_itoa(stored_hostaddr[1], OctetArray, 10, 3); break;
1924  a894 4b03          	push	#3
1925  a896 4b0a          	push	#10
1926  a898 ae005c        	ldw	x,#_OctetArray
1927  a89b 89            	pushw	x
1928  a89c c64028        	ld	a,_stored_hostaddr+1
1932  a89f cca94c        	jp	LC001
1933  a8a2               L153:
1934                     ; 2035 	    case 3:  emb_itoa(stored_hostaddr[0], OctetArray, 10, 3); break;
1936  a8a2 4b03          	push	#3
1937  a8a4 4b0a          	push	#10
1938  a8a6 ae005c        	ldw	x,#_OctetArray
1939  a8a9 89            	pushw	x
1940  a8aa c64027        	ld	a,_stored_hostaddr
1944  a8ad cca94c        	jp	LC001
1945  a8b0               L353:
1946                     ; 2036 	    case 4:  emb_itoa(stored_draddr[3],   OctetArray, 10, 3); break;
1948  a8b0 4b03          	push	#3
1949  a8b2 4b0a          	push	#10
1950  a8b4 ae005c        	ldw	x,#_OctetArray
1951  a8b7 89            	pushw	x
1952  a8b8 c64026        	ld	a,_stored_draddr+3
1956  a8bb cca94c        	jp	LC001
1957  a8be               L553:
1958                     ; 2037 	    case 5:  emb_itoa(stored_draddr[2],   OctetArray, 10, 3); break;
1960  a8be 4b03          	push	#3
1961  a8c0 4b0a          	push	#10
1962  a8c2 ae005c        	ldw	x,#_OctetArray
1963  a8c5 89            	pushw	x
1964  a8c6 c64025        	ld	a,_stored_draddr+2
1968  a8c9 cca94c        	jp	LC001
1969  a8cc               L753:
1970                     ; 2038 	    case 6:  emb_itoa(stored_draddr[1],   OctetArray, 10, 3); break;
1972  a8cc 4b03          	push	#3
1973  a8ce 4b0a          	push	#10
1974  a8d0 ae005c        	ldw	x,#_OctetArray
1975  a8d3 89            	pushw	x
1976  a8d4 c64024        	ld	a,_stored_draddr+1
1980  a8d7 2073          	jp	LC001
1981  a8d9               L163:
1982                     ; 2039 	    case 7:  emb_itoa(stored_draddr[0],   OctetArray, 10, 3); break;
1984  a8d9 4b03          	push	#3
1985  a8db 4b0a          	push	#10
1986  a8dd ae005c        	ldw	x,#_OctetArray
1987  a8e0 89            	pushw	x
1988  a8e1 c64023        	ld	a,_stored_draddr
1992  a8e4 2066          	jp	LC001
1993  a8e6               L363:
1994                     ; 2040 	    case 8:  emb_itoa(stored_netmask[3],  OctetArray, 10, 3); break;
1996  a8e6 4b03          	push	#3
1997  a8e8 4b0a          	push	#10
1998  a8ea ae005c        	ldw	x,#_OctetArray
1999  a8ed 89            	pushw	x
2000  a8ee c64022        	ld	a,_stored_netmask+3
2004  a8f1 2059          	jp	LC001
2005  a8f3               L563:
2006                     ; 2041 	    case 9:  emb_itoa(stored_netmask[2],  OctetArray, 10, 3); break;
2008  a8f3 4b03          	push	#3
2009  a8f5 4b0a          	push	#10
2010  a8f7 ae005c        	ldw	x,#_OctetArray
2011  a8fa 89            	pushw	x
2012  a8fb c64021        	ld	a,_stored_netmask+2
2016  a8fe 204c          	jp	LC001
2017  a900               L763:
2018                     ; 2042 	    case 10: emb_itoa(stored_netmask[1],  OctetArray, 10, 3); break;
2020  a900 4b03          	push	#3
2021  a902 4b0a          	push	#10
2022  a904 ae005c        	ldw	x,#_OctetArray
2023  a907 89            	pushw	x
2024  a908 c64020        	ld	a,_stored_netmask+1
2028  a90b 203f          	jp	LC001
2029  a90d               L173:
2030                     ; 2043 	    case 11: emb_itoa(stored_netmask[0],  OctetArray, 10, 3); break;
2032  a90d 4b03          	push	#3
2033  a90f 4b0a          	push	#10
2034  a911 ae005c        	ldw	x,#_OctetArray
2035  a914 89            	pushw	x
2036  a915 c6401f        	ld	a,_stored_netmask
2040  a918 2032          	jp	LC001
2041  a91a               L373:
2042                     ; 2045 	    case 12: emb_itoa(stored_mqttserveraddr[3], OctetArray, 10, 3); break;
2044  a91a 4b03          	push	#3
2045  a91c 4b0a          	push	#10
2046  a91e ae005c        	ldw	x,#_OctetArray
2047  a921 89            	pushw	x
2048  a922 c64034        	ld	a,_stored_mqttserveraddr+3
2052  a925 2025          	jp	LC001
2053  a927               L573:
2054                     ; 2046 	    case 13: emb_itoa(stored_mqttserveraddr[2], OctetArray, 10, 3); break;
2056  a927 4b03          	push	#3
2057  a929 4b0a          	push	#10
2058  a92b ae005c        	ldw	x,#_OctetArray
2059  a92e 89            	pushw	x
2060  a92f c64033        	ld	a,_stored_mqttserveraddr+2
2064  a932 2018          	jp	LC001
2065  a934               L773:
2066                     ; 2047 	    case 14: emb_itoa(stored_mqttserveraddr[1], OctetArray, 10, 3); break;
2068  a934 4b03          	push	#3
2069  a936 4b0a          	push	#10
2070  a938 ae005c        	ldw	x,#_OctetArray
2071  a93b 89            	pushw	x
2072  a93c c64032        	ld	a,_stored_mqttserveraddr+1
2076  a93f 200b          	jp	LC001
2077  a941               L104:
2078                     ; 2048 	    case 15: emb_itoa(stored_mqttserveraddr[0], OctetArray, 10, 3); break;
2080  a941 4b03          	push	#3
2081  a943 4b0a          	push	#10
2082  a945 ae005c        	ldw	x,#_OctetArray
2083  a948 89            	pushw	x
2084  a949 c64031        	ld	a,_stored_mqttserveraddr
2086  a94c               LC001:
2087  a94c b703          	ld	c_lreg+3,a
2088  a94e 3f02          	clr	c_lreg+2
2089  a950 3f01          	clr	c_lreg+1
2090  a952 3f00          	clr	c_lreg
2091  a954 be02          	ldw	x,c_lreg+2
2092  a956 89            	pushw	x
2093  a957 be00          	ldw	x,c_lreg
2094  a959 89            	pushw	x
2095  a95a cda505        	call	_emb_itoa
2096  a95d 5b08          	addw	sp,#8
2099                     ; 2050 	    default: break;
2101  a95f               L326:
2102                     ; 2054 	  for(i=0; i<3; i++) {
2104  a95f 4f            	clr	a
2105  a960 6b08          	ld	(OFST+0,sp),a
2107  a962               L526:
2108                     ; 2055 	    *pBuffer = (uint8_t)OctetArray[i];
2110  a962 5f            	clrw	x
2111  a963 97            	ld	xl,a
2112  a964 d6005c        	ld	a,(_OctetArray,x)
2113  a967 1e09          	ldw	x,(OFST+1,sp)
2114  a969 f7            	ld	(x),a
2115                     ; 2056             pBuffer++;
2117  a96a 5c            	incw	x
2118  a96b 1f09          	ldw	(OFST+1,sp),x
2119                     ; 2054 	  for(i=0; i<3; i++) {
2121  a96d 0c08          	inc	(OFST+0,sp)
2125  a96f 7b08          	ld	a,(OFST+0,sp)
2126  a971 a103          	cp	a,#3
2127  a973 25ed          	jrult	L526
2128                     ; 2058 	  nBytes += 3;
2130  a975 1e05          	ldw	x,(OFST-3,sp)
2131  a977 1c0003        	addw	x,#3
2133  a97a ccaca8        	jp	LC006
2134  a97d               L716:
2135                     ; 2061         else if (nParsedMode == 'c') {
2137  a97d a163          	cp	a,#99
2138  a97f 2648          	jrne	L536
2139                     ; 2070 	  if (nParsedNum == 0) emb_itoa(stored_port, OctetArray, 10, 5);
2141  a981 7b07          	ld	a,(OFST-1,sp)
2142  a983 260d          	jrne	L736
2145  a985 4b05          	push	#5
2146  a987 4b0a          	push	#10
2147  a989 ae005c        	ldw	x,#_OctetArray
2148  a98c 89            	pushw	x
2149  a98d ce401d        	ldw	x,_stored_port
2153  a990 200b          	jra	L146
2154  a992               L736:
2155                     ; 2072 	  else emb_itoa(stored_mqttport, OctetArray, 10, 5);
2157  a992 4b05          	push	#5
2158  a994 4b0a          	push	#10
2159  a996 ae005c        	ldw	x,#_OctetArray
2160  a999 89            	pushw	x
2161  a99a ce402f        	ldw	x,_stored_mqttport
2164  a99d               L146:
2165  a99d cdfb55        	call	c_uitolx
2166  a9a0 be02          	ldw	x,c_lreg+2
2167  a9a2 89            	pushw	x
2168  a9a3 be00          	ldw	x,c_lreg
2169  a9a5 89            	pushw	x
2170  a9a6 cda505        	call	_emb_itoa
2171  a9a9 5b08          	addw	sp,#8
2172                     ; 2076 	  for(i=0; i<5; i++) {
2174  a9ab 4f            	clr	a
2175  a9ac 6b08          	ld	(OFST+0,sp),a
2177  a9ae               L346:
2178                     ; 2077             *pBuffer = (uint8_t)OctetArray[i];
2180  a9ae 5f            	clrw	x
2181  a9af 97            	ld	xl,a
2182  a9b0 d6005c        	ld	a,(_OctetArray,x)
2183  a9b3 1e09          	ldw	x,(OFST+1,sp)
2184  a9b5 f7            	ld	(x),a
2185                     ; 2078             pBuffer++;
2187  a9b6 5c            	incw	x
2188  a9b7 1f09          	ldw	(OFST+1,sp),x
2189                     ; 2076 	  for(i=0; i<5; i++) {
2191  a9b9 0c08          	inc	(OFST+0,sp)
2195  a9bb 7b08          	ld	a,(OFST+0,sp)
2196  a9bd a105          	cp	a,#5
2197  a9bf 25ed          	jrult	L346
2198                     ; 2080 	  nBytes += 5;
2200  a9c1 1e05          	ldw	x,(OFST-3,sp)
2201  a9c3 1c0005        	addw	x,#5
2203  a9c6 ccaca8        	jp	LC006
2204  a9c9               L536:
2205                     ; 2083         else if (nParsedMode == 'd') {
2207  a9c9 a164          	cp	a,#100
2208  a9cb 266a          	jrne	L356
2209                     ; 2088 	  if (nParsedNum == 0) { OctetArray[0] = mac_string[0]; OctetArray[1] = mac_string[1]; }
2211  a9cd 7b07          	ld	a,(OFST-1,sp)
2212  a9cf 260a          	jrne	L556
2215  a9d1 55010c005c    	mov	_OctetArray,_mac_string
2218  a9d6 55010d005d    	mov	_OctetArray+1,_mac_string+1
2219  a9db               L556:
2220                     ; 2089 	  if (nParsedNum == 1) { OctetArray[0] = mac_string[2]; OctetArray[1] = mac_string[3]; }
2222  a9db a101          	cp	a,#1
2223  a9dd 260a          	jrne	L756
2226  a9df 55010e005c    	mov	_OctetArray,_mac_string+2
2229  a9e4 55010f005d    	mov	_OctetArray+1,_mac_string+3
2230  a9e9               L756:
2231                     ; 2090 	  if (nParsedNum == 2) { OctetArray[0] = mac_string[4]; OctetArray[1] = mac_string[5]; }
2233  a9e9 a102          	cp	a,#2
2234  a9eb 260a          	jrne	L166
2237  a9ed 550110005c    	mov	_OctetArray,_mac_string+4
2240  a9f2 550111005d    	mov	_OctetArray+1,_mac_string+5
2241  a9f7               L166:
2242                     ; 2091 	  if (nParsedNum == 3) { OctetArray[0] = mac_string[6]; OctetArray[1] = mac_string[7]; }
2244  a9f7 a103          	cp	a,#3
2245  a9f9 260a          	jrne	L366
2248  a9fb 550112005c    	mov	_OctetArray,_mac_string+6
2251  aa00 550113005d    	mov	_OctetArray+1,_mac_string+7
2252  aa05               L366:
2253                     ; 2092 	  if (nParsedNum == 4) { OctetArray[0] = mac_string[8]; OctetArray[1] = mac_string[9]; }
2255  aa05 a104          	cp	a,#4
2256  aa07 260a          	jrne	L566
2259  aa09 550114005c    	mov	_OctetArray,_mac_string+8
2262  aa0e 550115005d    	mov	_OctetArray+1,_mac_string+9
2263  aa13               L566:
2264                     ; 2093 	  if (nParsedNum == 5) { OctetArray[0] = mac_string[10]; OctetArray[1] = mac_string[11]; }
2266  aa13 a105          	cp	a,#5
2267  aa15 260a          	jrne	L766
2270  aa17 550116005c    	mov	_OctetArray,_mac_string+10
2273  aa1c 550117005d    	mov	_OctetArray+1,_mac_string+11
2274  aa21               L766:
2275                     ; 2095           *pBuffer = OctetArray[0];
2277  aa21 1e09          	ldw	x,(OFST+1,sp)
2278  aa23 c6005c        	ld	a,_OctetArray
2279  aa26 f7            	ld	(x),a
2280                     ; 2096           pBuffer++;
2282  aa27 5c            	incw	x
2283  aa28 1f09          	ldw	(OFST+1,sp),x
2284                     ; 2097           nBytes++;
2286  aa2a 1e05          	ldw	x,(OFST-3,sp)
2287  aa2c 5c            	incw	x
2288  aa2d 1f05          	ldw	(OFST-3,sp),x
2290                     ; 2099           *pBuffer = OctetArray[1];
2292  aa2f c6005d        	ld	a,_OctetArray+1
2293  aa32 1e09          	ldw	x,(OFST+1,sp)
2294                     ; 2100           pBuffer++;
2295                     ; 2101           nBytes++;
2297  aa34 ccabc3        	jp	L7201
2298  aa37               L356:
2299                     ; 2169         else if (nParsedMode == 'e') {
2301  aa37 a165          	cp	a,#101
2302  aa39 2677          	jrne	L376
2303                     ; 2170           switch (nParsedNum)
2305  aa3b 7b07          	ld	a,(OFST-1,sp)
2307                     ; 2177 	    case 29:  emb_itoa(TRANSMIT_counter, OctetArray, 10, 10); break;
2308  aa3d a01a          	sub	a,#26
2309  aa3f 270b          	jreq	L504
2310  aa41 4a            	dec	a
2311  aa42 2719          	jreq	L704
2312  aa44 4a            	dec	a
2313  aa45 2727          	jreq	L114
2314  aa47 4a            	dec	a
2315  aa48 2735          	jreq	L314
2316  aa4a 2048          	jra	L776
2317  aa4c               L504:
2318                     ; 2174 	    case 26:  emb_itoa(second_counter, OctetArray, 10, 10); break;
2320  aa4c 4b0a          	push	#10
2321  aa4e 4b0a          	push	#10
2322  aa50 ae005c        	ldw	x,#_OctetArray
2323  aa53 89            	pushw	x
2324  aa54 ce029e        	ldw	x,_second_counter+2
2325  aa57 89            	pushw	x
2326  aa58 ce029c        	ldw	x,_second_counter
2330  aa5b 2031          	jp	LC002
2331  aa5d               L704:
2332                     ; 2175 	    case 27:  emb_itoa(RXERIF_counter, OctetArray, 10, 10); break;
2334  aa5d 4b0a          	push	#10
2335  aa5f 4b0a          	push	#10
2336  aa61 ae005c        	ldw	x,#_OctetArray
2337  aa64 89            	pushw	x
2338  aa65 ce0071        	ldw	x,_RXERIF_counter+2
2339  aa68 89            	pushw	x
2340  aa69 ce006f        	ldw	x,_RXERIF_counter
2344  aa6c 2020          	jp	LC002
2345  aa6e               L114:
2346                     ; 2176 	    case 28:  emb_itoa(TXERIF_counter, OctetArray, 10, 10); break;
2348  aa6e 4b0a          	push	#10
2349  aa70 4b0a          	push	#10
2350  aa72 ae005c        	ldw	x,#_OctetArray
2351  aa75 89            	pushw	x
2352  aa76 ce006d        	ldw	x,_TXERIF_counter+2
2353  aa79 89            	pushw	x
2354  aa7a ce006b        	ldw	x,_TXERIF_counter
2358  aa7d 200f          	jp	LC002
2359  aa7f               L314:
2360                     ; 2177 	    case 29:  emb_itoa(TRANSMIT_counter, OctetArray, 10, 10); break;
2362  aa7f 4b0a          	push	#10
2363  aa81 4b0a          	push	#10
2364  aa83 ae005c        	ldw	x,#_OctetArray
2365  aa86 89            	pushw	x
2366  aa87 ce0069        	ldw	x,_TRANSMIT_counter+2
2367  aa8a 89            	pushw	x
2368  aa8b ce0067        	ldw	x,_TRANSMIT_counter
2370  aa8e               LC002:
2371  aa8e 89            	pushw	x
2372  aa8f cda505        	call	_emb_itoa
2373  aa92 5b08          	addw	sp,#8
2376  aa94               L776:
2377                     ; 2179 	  for (i=0; i<10; i++) {
2379  aa94 4f            	clr	a
2380  aa95 6b08          	ld	(OFST+0,sp),a
2382  aa97               L107:
2383                     ; 2180             *pBuffer = OctetArray[i];
2385  aa97 5f            	clrw	x
2386  aa98 97            	ld	xl,a
2387  aa99 d6005c        	ld	a,(_OctetArray,x)
2388  aa9c 1e09          	ldw	x,(OFST+1,sp)
2389  aa9e f7            	ld	(x),a
2390                     ; 2181             pBuffer++;
2392  aa9f 5c            	incw	x
2393  aaa0 1f09          	ldw	(OFST+1,sp),x
2394                     ; 2179 	  for (i=0; i<10; i++) {
2396  aaa2 0c08          	inc	(OFST+0,sp)
2400  aaa4 7b08          	ld	a,(OFST+0,sp)
2401  aaa6 a10a          	cp	a,#10
2402  aaa8 25ed          	jrult	L107
2403                     ; 2183 	  nBytes += 10;
2405  aaaa 1e05          	ldw	x,(OFST-3,sp)
2406  aaac 1c000a        	addw	x,#10
2408  aaaf ccaca8        	jp	LC006
2409  aab2               L376:
2410                     ; 2187         else if (nParsedMode == 'f') {
2412  aab2 a166          	cp	a,#102
2413  aab4 263d          	jrne	L117
2414                     ; 2202 	  for(i=0; i<16; i++) {
2416  aab6 4f            	clr	a
2417  aab7 6b08          	ld	(OFST+0,sp),a
2419  aab9               L317:
2420                     ; 2203             if (i > 7) {
2422  aab9 a108          	cp	a,#8
2423  aabb 251b          	jrult	L127
2424                     ; 2205               j = GpioGetPin(i);
2426  aabd cdbc27        	call	_GpioGetPin
2428  aac0 6b03          	ld	(OFST-5,sp),a
2430                     ; 2206               if (invert_input == 0x00) *pBuffer = (uint8_t)(j + '0');
2432  aac2 725d0165      	tnz	_invert_input
2435  aac6 2713          	jreq	LC010
2436                     ; 2208                 if (j == 0) *pBuffer = (uint8_t)('1'); 
2438  aac8 7b03          	ld	a,(OFST-5,sp)
2439  aaca 2606          	jrne	L727
2442  aacc 1e09          	ldw	x,(OFST+1,sp)
2443  aace a631          	ld	a,#49
2445  aad0 200d          	jra	L337
2446  aad2               L727:
2447                     ; 2209                 else *pBuffer = (uint8_t)('0');
2449  aad2 1e09          	ldw	x,(OFST+1,sp)
2450  aad4 a630          	ld	a,#48
2451                     ; 2211               pBuffer++;
2453  aad6 2007          	jra	L337
2454  aad8               L127:
2455                     ; 2215               *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
2457  aad8 cdbc27        	call	_GpioGetPin
2459  aadb               LC010:
2461  aadb ab30          	add	a,#48
2462  aadd 1e09          	ldw	x,(OFST+1,sp)
2463                     ; 2216               pBuffer++;
2465  aadf               L337:
2466  aadf f7            	ld	(x),a
2468  aae0 5c            	incw	x
2469  aae1 1f09          	ldw	(OFST+1,sp),x
2470                     ; 2202 	  for(i=0; i<16; i++) {
2472  aae3 0c08          	inc	(OFST+0,sp)
2476  aae5 7b08          	ld	a,(OFST+0,sp)
2477  aae7 a110          	cp	a,#16
2478  aae9 25ce          	jrult	L317
2479                     ; 2219 	  nBytes += 16;
2481  aaeb 1e05          	ldw	x,(OFST-3,sp)
2482  aaed 1c0010        	addw	x,#16
2484  aaf0 ccaca8        	jp	LC006
2485  aaf3               L117:
2486                     ; 2238 else if (nParsedMode == 'g') {
2488  aaf3 a167          	cp	a,#103
2489  aaf5 261e          	jrne	L737
2490                     ; 2251 	  for(i = 0; i < 6; i++) {
2492  aaf7 4f            	clr	a
2493  aaf8 6b08          	ld	(OFST+0,sp),a
2495  aafa               L147:
2496                     ; 2252             *pBuffer = stored_config_settings[i];
2498  aafa 5f            	clrw	x
2499  aafb 97            	ld	xl,a
2500  aafc d6404c        	ld	a,(_stored_config_settings,x)
2501  aaff 1e09          	ldw	x,(OFST+1,sp)
2502  ab01 f7            	ld	(x),a
2503                     ; 2253             pBuffer++;
2505  ab02 5c            	incw	x
2506  ab03 1f09          	ldw	(OFST+1,sp),x
2507                     ; 2251 	  for(i = 0; i < 6; i++) {
2509  ab05 0c08          	inc	(OFST+0,sp)
2513  ab07 7b08          	ld	a,(OFST+0,sp)
2514  ab09 a106          	cp	a,#6
2515  ab0b 25ed          	jrult	L147
2516                     ; 2255           nBytes += 6;
2518  ab0d 1e05          	ldw	x,(OFST-3,sp)
2519  ab0f 1c0006        	addw	x,#6
2521  ab12 ccaca8        	jp	LC006
2522  ab15               L737:
2523                     ; 2259         else if (nParsedMode == 'l') {
2525  ab15 a16c          	cp	a,#108
2526  ab17 2629          	jrne	L157
2527                     ; 2262           for(i=0; i<10; i++) {
2529  ab19 4f            	clr	a
2530  ab1a 6b08          	ld	(OFST+0,sp),a
2532  ab1c               L357:
2533                     ; 2263 	    if (stored_mqtt_username[i] != '\0') {
2535  ab1c 5f            	clrw	x
2536  ab1d 97            	ld	xl,a
2537  ab1e 724d4035      	tnz	(_stored_mqtt_username,x)
2538  ab22 2603ccacaa    	jreq	L325
2539                     ; 2264               *pBuffer = (uint8_t)(stored_mqtt_username[i]);
2541  ab27 5f            	clrw	x
2542  ab28 97            	ld	xl,a
2543  ab29 d64035        	ld	a,(_stored_mqtt_username,x)
2544  ab2c 1e09          	ldw	x,(OFST+1,sp)
2545  ab2e f7            	ld	(x),a
2546                     ; 2265               pBuffer++;
2548  ab2f 5c            	incw	x
2549  ab30 1f09          	ldw	(OFST+1,sp),x
2550                     ; 2266               nBytes++;
2552  ab32 1e05          	ldw	x,(OFST-3,sp)
2553  ab34 5c            	incw	x
2554  ab35 1f05          	ldw	(OFST-3,sp),x
2557                     ; 2262           for(i=0; i<10; i++) {
2559  ab37 0c08          	inc	(OFST+0,sp)
2563  ab39 7b08          	ld	a,(OFST+0,sp)
2564  ab3b a10a          	cp	a,#10
2565  ab3d 25dd          	jrult	L357
2566  ab3f ccacaa        	jra	L325
2567  ab42               L157:
2568                     ; 2272         else if (nParsedMode == 'm') {
2570  ab42 a16d          	cp	a,#109
2571  ab44 2626          	jrne	L767
2572                     ; 2275           for(i=0; i<10; i++) {
2574  ab46 4f            	clr	a
2575  ab47 6b08          	ld	(OFST+0,sp),a
2577  ab49               L177:
2578                     ; 2276 	    if (stored_mqtt_password[i] != '\0') {
2580  ab49 5f            	clrw	x
2581  ab4a 97            	ld	xl,a
2582  ab4b 724d4040      	tnz	(_stored_mqtt_password,x)
2583  ab4f 27ee          	jreq	L325
2584                     ; 2277               *pBuffer = (uint8_t)(stored_mqtt_password[i]);
2586  ab51 5f            	clrw	x
2587  ab52 97            	ld	xl,a
2588  ab53 d64040        	ld	a,(_stored_mqtt_password,x)
2589  ab56 1e09          	ldw	x,(OFST+1,sp)
2590  ab58 f7            	ld	(x),a
2591                     ; 2278               pBuffer++;
2593  ab59 5c            	incw	x
2594  ab5a 1f09          	ldw	(OFST+1,sp),x
2595                     ; 2279               nBytes++;
2597  ab5c 1e05          	ldw	x,(OFST-3,sp)
2598  ab5e 5c            	incw	x
2599  ab5f 1f05          	ldw	(OFST-3,sp),x
2602                     ; 2275           for(i=0; i<10; i++) {
2604  ab61 0c08          	inc	(OFST+0,sp)
2608  ab63 7b08          	ld	a,(OFST+0,sp)
2609  ab65 a10a          	cp	a,#10
2610  ab67 25e0          	jrult	L177
2611  ab69 ccacaa        	jra	L325
2612  ab6c               L767:
2613                     ; 2285         else if (nParsedMode == 'n') {
2615  ab6c a16e          	cp	a,#110
2616  ab6e 2657          	jrne	L5001
2617                     ; 2289 	  no_err = 0;
2619  ab70 0f08          	clr	(OFST+0,sp)
2621                     ; 2290           switch (nParsedNum)
2623  ab72 7b07          	ld	a,(OFST-1,sp)
2625                     ; 2312 	    default:
2625                     ; 2313 	      break;
2626  ab74 270e          	jreq	L514
2627  ab76 4a            	dec	a
2628  ab77 2712          	jreq	L714
2629  ab79 4a            	dec	a
2630  ab7a 2716          	jreq	L124
2631  ab7c 4a            	dec	a
2632  ab7d 271a          	jreq	L324
2633  ab7f 4a            	dec	a
2634  ab80 271f          	jreq	L524
2635  ab82 2030          	jra	L1101
2636  ab84               L514:
2637                     ; 2292 	    case 0:
2637                     ; 2293               // Connection request status
2637                     ; 2294 	      if (mqtt_start_status & MQTT_START_CONNECTIONS_GOOD) no_err = 1;
2639  ab84 720900a72b    	btjf	_mqtt_start_status,#4,L1101
2641  ab89 2013          	jp	LC004
2642  ab8b               L714:
2643                     ; 2296 	    case 1:
2643                     ; 2297 	      // ARP request status
2643                     ; 2298 	      if (mqtt_start_status & MQTT_START_ARP_REQUEST_GOOD) no_err = 1;
2645  ab8b 720b00a724    	btjf	_mqtt_start_status,#5,L1101
2647  ab90 200c          	jp	LC004
2648  ab92               L124:
2649                     ; 2300 	    case 2:
2649                     ; 2301 	      // TCP connection status
2649                     ; 2302 	      if (mqtt_start_status & MQTT_START_TCP_CONNECT_GOOD) no_err = 1;
2651  ab92 720d00a71d    	btjf	_mqtt_start_status,#6,L1101
2653  ab97 2005          	jp	LC004
2654  ab99               L324:
2655                     ; 2304 	    case 3:
2655                     ; 2305 	      // MQTT Connection status 1
2655                     ; 2306 	      if (mqtt_start_status & MQTT_START_MQTT_CONNECT_GOOD) no_err = 1;
2657  ab99 720f00a716    	btjf	_mqtt_start_status,#7,L1101
2660  ab9e               LC004:
2664  ab9e 4c            	inc	a
2665  ab9f 2011          	jp	LC003
2666  aba1               L524:
2667                     ; 2308 	    case 4:
2667                     ; 2309 	      // MQTT start complete with no errors
2667                     ; 2310 	      if ((MQTT_error_status == 1) && ((mqtt_start_status & 0xf0) == 0xf0) ) no_err = 1;
2669  aba1 c6029b        	ld	a,_MQTT_error_status
2670  aba4 4a            	dec	a
2671  aba5 260d          	jrne	L1101
2673  aba7 c600a7        	ld	a,_mqtt_start_status
2674  abaa a4f0          	and	a,#240
2675  abac a1f0          	cp	a,#240
2676  abae 2604          	jrne	L1101
2679  abb0 a601          	ld	a,#1
2680  abb2               LC003:
2681  abb2 6b08          	ld	(OFST+0,sp),a
2683                     ; 2312 	    default:
2683                     ; 2313 	      break;
2685  abb4               L1101:
2686                     ; 2315 	  if (no_err == 1) *pBuffer = '1'; // Paint a green square
2688  abb4 7b08          	ld	a,(OFST+0,sp)
2689  abb6 4a            	dec	a
2690  abb7 2606          	jrne	L5201
2693  abb9 1e09          	ldw	x,(OFST+1,sp)
2694  abbb a631          	ld	a,#49
2696  abbd 2004          	jra	L7201
2697  abbf               L5201:
2698                     ; 2316 	  else *pBuffer = '0'; // Paint a red square
2701  abbf 1e09          	ldw	x,(OFST+1,sp)
2702  abc1 a630          	ld	a,#48
2703  abc3               L7201:
2704  abc3 f7            	ld	(x),a
2705                     ; 2317           pBuffer++;
2706                     ; 2318           nBytes++;
2708  abc4 ccaca2        	jp	LC007
2709  abc7               L5001:
2710                     ; 2322         else if (nParsedMode == 'y') {
2712  abc7 a179          	cp	a,#121
2713  abc9 269e          	jrne	L325
2714                     ; 2367 	  i = insertion_flag[0];
2716  abcb c60017        	ld	a,_insertion_flag
2717  abce 6b08          	ld	(OFST+0,sp),a
2719                     ; 2368 	  insertion_flag[1] = nParsedMode;
2721  abd0 7b04          	ld	a,(OFST-4,sp)
2722  abd2 c70018        	ld	_insertion_flag+1,a
2723                     ; 2369 	  insertion_flag[2] = nParsedNum;
2725  abd5 7b07          	ld	a,(OFST-1,sp)
2726  abd7 c70019        	ld	_insertion_flag+2,a
2727                     ; 2371           switch (nParsedNum)
2730                     ; 2419 	    default: break;
2731  abda 2718          	jreq	L134
2732  abdc 4a            	dec	a
2733  abdd 272a          	jreq	L334
2734  abdf 4a            	dec	a
2735  abe0 273c          	jreq	L534
2736  abe2 4a            	dec	a
2737  abe3 274e          	jreq	L734
2738  abe5 4a            	dec	a
2739  abe6 2760          	jreq	L144
2740  abe8 4a            	dec	a
2741  abe9 2772          	jreq	L344
2742  abeb 4a            	dec	a
2743  abec 2603ccac72    	jreq	L544
2744  abf1 ccaca0        	jra	LC008
2745  abf4               L134:
2746                     ; 2373 	    case 0:
2746                     ; 2374 	      // %y00 replaced with string 
2746                     ; 2375 	      // page_string00[] = "pattern='[0-9]{3}' title='Enter 000 to 255' maxlength='3'";
2746                     ; 2376               *pBuffer = (uint8_t)page_string00[i];
2748  abf4 7b08          	ld	a,(OFST+0,sp)
2749  abf6 5f            	clrw	x
2750  abf7 97            	ld	xl,a
2751  abf8 d69aee        	ld	a,(L52_page_string00,x)
2752  abfb 1e09          	ldw	x,(OFST+1,sp)
2753  abfd f7            	ld	(x),a
2754                     ; 2377 	      insertion_flag[0]++;
2756  abfe 725c0017      	inc	_insertion_flag
2757                     ; 2378 	      if (insertion_flag[0] == page_string00_len) insertion_flag[0] = 0;
2759  ac02 c60017        	ld	a,_insertion_flag
2760  ac05 a13f          	cp	a,#63
2762  ac07 207c          	jp	LC005
2763  ac09               L334:
2764                     ; 2380 	    case 1:
2764                     ; 2381 	      // %y01 replaced with string 
2764                     ; 2382               // page_string01[] = "pattern='[0-9a-f]{2}' title='Enter 00 to ff' maxlength='2'";
2764                     ; 2383               *pBuffer = (uint8_t)page_string01[i];
2766  ac09 7b08          	ld	a,(OFST+0,sp)
2767  ac0b 5f            	clrw	x
2768  ac0c 97            	ld	xl,a
2769  ac0d d69b30        	ld	a,(L33_page_string01,x)
2770  ac10 1e09          	ldw	x,(OFST+1,sp)
2771  ac12 f7            	ld	(x),a
2772                     ; 2384 	      insertion_flag[0]++;
2774  ac13 725c0017      	inc	_insertion_flag
2775                     ; 2385 	      if (insertion_flag[0] == page_string01_len) insertion_flag[0] = 0;
2777  ac17 c60017        	ld	a,_insertion_flag
2778  ac1a a140          	cp	a,#64
2780  ac1c 2067          	jp	LC005
2781  ac1e               L534:
2782                     ; 2387 	    case 2:
2782                     ; 2388 	      // %y02 replaced with string 
2782                     ; 2389               // page_string02[] = "<button title='Save first! This button will not save your changes'>";
2782                     ; 2390               *pBuffer = (uint8_t)page_string02[i];
2784  ac1e 7b08          	ld	a,(OFST+0,sp)
2785  ac20 5f            	clrw	x
2786  ac21 97            	ld	xl,a
2787  ac22 d69b73        	ld	a,(L14_page_string02,x)
2788  ac25 1e09          	ldw	x,(OFST+1,sp)
2789  ac27 f7            	ld	(x),a
2790                     ; 2391 	      insertion_flag[0]++;
2792  ac28 725c0017      	inc	_insertion_flag
2793                     ; 2392 	      if (insertion_flag[0] == page_string02_len) insertion_flag[0] = 0;
2795  ac2c c60017        	ld	a,_insertion_flag
2796  ac2f a152          	cp	a,#82
2798  ac31 2052          	jp	LC005
2799  ac33               L734:
2800                     ; 2394 	    case 3:
2800                     ; 2395 	      // %y03 replaced with string 
2800                     ; 2396               // page_string03[] = "<form style='display: inline' action='http://";
2800                     ; 2397               *pBuffer = (uint8_t)page_string03[i];
2802  ac33 7b08          	ld	a,(OFST+0,sp)
2803  ac35 5f            	clrw	x
2804  ac36 97            	ld	xl,a
2805  ac37 d69bc8        	ld	a,(L74_page_string03,x)
2806  ac3a 1e09          	ldw	x,(OFST+1,sp)
2807  ac3c f7            	ld	(x),a
2808                     ; 2398 	      insertion_flag[0]++;
2810  ac3d 725c0017      	inc	_insertion_flag
2811                     ; 2399 	      if (insertion_flag[0] == page_string03_len) insertion_flag[0] = 0;
2813  ac41 c60017        	ld	a,_insertion_flag
2814  ac44 a126          	cp	a,#38
2816  ac46 203d          	jp	LC005
2817  ac48               L144:
2818                     ; 2401 	    case 4:
2818                     ; 2402 	      // %y04 replaced with first header string 
2818                     ; 2403               *pBuffer = (uint8_t)page_string04[i];
2820  ac48 7b08          	ld	a,(OFST+0,sp)
2821  ac4a 5f            	clrw	x
2822  ac4b 97            	ld	xl,a
2823  ac4c d69bf1        	ld	a,(L55_page_string04,x)
2824  ac4f 1e09          	ldw	x,(OFST+1,sp)
2825  ac51 f7            	ld	(x),a
2826                     ; 2404 	      insertion_flag[0]++;
2828  ac52 725c0017      	inc	_insertion_flag
2829                     ; 2405 	      if (insertion_flag[0] == page_string04_len) insertion_flag[0] = 0;
2831  ac56 c60017        	ld	a,_insertion_flag
2832  ac59 a147          	cp	a,#71
2834  ac5b 2028          	jp	LC005
2835  ac5d               L344:
2836                     ; 2407 	    case 5:
2836                     ; 2408 	      // %y05 replaced with second header string 
2836                     ; 2409               *pBuffer = (uint8_t)page_string05[i];
2838  ac5d 7b08          	ld	a,(OFST+0,sp)
2839  ac5f 5f            	clrw	x
2840  ac60 97            	ld	xl,a
2841  ac61 d69c3b        	ld	a,(L36_page_string05,x)
2842  ac64 1e09          	ldw	x,(OFST+1,sp)
2843  ac66 f7            	ld	(x),a
2844                     ; 2410 	      insertion_flag[0]++;
2846  ac67 725c0017      	inc	_insertion_flag
2847                     ; 2411 	      if (insertion_flag[0] == page_string05_len) insertion_flag[0] = 0;
2849  ac6b c60017        	ld	a,_insertion_flag
2850  ac6e a1ed          	cp	a,#237
2852  ac70 2013          	jp	LC005
2853  ac72               L544:
2854                     ; 2413 	    case 6:
2854                     ; 2414 	      // %y06 replaced with third header string 
2854                     ; 2415               *pBuffer = (uint8_t)page_string06[i];
2856  ac72 7b08          	ld	a,(OFST+0,sp)
2857  ac74 5f            	clrw	x
2858  ac75 97            	ld	xl,a
2859  ac76 d69d2b        	ld	a,(L17_page_string06,x)
2860  ac79 1e09          	ldw	x,(OFST+1,sp)
2861  ac7b f7            	ld	(x),a
2862                     ; 2416 	      insertion_flag[0]++;
2864  ac7c 725c0017      	inc	_insertion_flag
2865                     ; 2417 	      if (insertion_flag[0] == page_string06_len) insertion_flag[0] = 0;
2867  ac80 c60017        	ld	a,_insertion_flag
2868  ac83 a13b          	cp	a,#59
2871  ac85               LC005:
2872  ac85 2619          	jrne	LC008
2879  ac87 725f0017      	clr	_insertion_flag
2880                     ; 2419 	    default: break;
2882                     ; 2421           pBuffer++;
2883                     ; 2422           nBytes++;
2884  ac8b 2013          	jp	LC008
2885  ac8d               L735:
2886                     ; 2430         *pBuffer = nByte;
2888  ac8d 1e09          	ldw	x,(OFST+1,sp)
2889  ac8f f7            	ld	(x),a
2890                     ; 2431         *ppData = *ppData + 1;
2892  ac90 1e0d          	ldw	x,(OFST+5,sp)
2893  ac92 9093          	ldw	y,x
2894  ac94 fe            	ldw	x,(x)
2895  ac95 5c            	incw	x
2896  ac96 90ff          	ldw	(y),x
2897                     ; 2432         *pDataLeft = *pDataLeft - 1;
2899  ac98 1e0f          	ldw	x,(OFST+7,sp)
2900  ac9a 9093          	ldw	y,x
2901  ac9c fe            	ldw	x,(x)
2902  ac9d 5a            	decw	x
2903  ac9e 90ff          	ldw	(y),x
2904                     ; 2433         pBuffer++;
2906  aca0               LC008:
2908  aca0 1e09          	ldw	x,(OFST+1,sp)
2909                     ; 2434         nBytes++;
2911  aca2               LC007:
2916  aca2 5c            	incw	x
2917  aca3 1f09          	ldw	(OFST+1,sp),x
2923  aca5 1e05          	ldw	x,(OFST-3,sp)
2924  aca7 5c            	incw	x
2925  aca8               LC006:
2926  aca8 1f05          	ldw	(OFST-3,sp),x
2928  acaa               L325:
2929                     ; 1808   while (nBytes < nMaxBytes) {
2931  acaa 1e05          	ldw	x,(OFST-3,sp)
2932  acac 1311          	cpw	x,(OFST+9,sp)
2933  acae 2403cca6dd    	jrult	L125
2934  acb3               L525:
2935                     ; 2439   return nBytes;
2937  acb3 1e05          	ldw	x,(OFST-3,sp)
2940  acb5 5b0a          	addw	sp,#10
2941  acb7 81            	ret	
2973                     ; 2443 void HttpDInit()
2973                     ; 2444 {
2974                     .text:	section	.text,new
2975  acb8               _HttpDInit:
2979                     ; 2446   uip_listen(htons(Port_Httpd));
2981  acb8 ce0103        	ldw	x,_Port_Httpd
2982  acbb cdf225        	call	_htons
2984  acbe cde8b0        	call	_uip_listen
2986                     ; 2447   current_webpage = WEBPAGE_IOCONTROL;
2988  acc1 725f001a      	clr	_current_webpage
2989                     ; 2450   insertion_flag[0] = 0;
2991  acc5 725f0017      	clr	_insertion_flag
2992                     ; 2451   insertion_flag[1] = 0;
2994  acc9 725f0018      	clr	_insertion_flag+1
2995                     ; 2452   insertion_flag[2] = 0;
2997  accd 725f0019      	clr	_insertion_flag+2
2998                     ; 2455   saved_nstate = STATE_NULL;
3000  acd1 357f005b      	mov	_saved_nstate,#127
3001                     ; 2456   saved_parsestate = PARSE_CMD;
3003  acd5 725f005a      	clr	_saved_parsestate
3004                     ; 2457   saved_nparseleft = 0;
3006  acd9 725f0059      	clr	_saved_nparseleft
3007                     ; 2458   clear_saved_postpartial_all();
3010                     ; 2459 }
3013  acdd ccb800        	jp	_clear_saved_postpartial_all
3206                     	switch	.const
3207  9d89               L622:
3208  9d89 b5ac          	dc.w	L7701
3209  9d8b b5b7          	dc.w	L1011
3210  9d8d b5c2          	dc.w	L3011
3211  9d8f b5cd          	dc.w	L5011
3212  9d91 b5d8          	dc.w	L7011
3213  9d93 b5e3          	dc.w	L1111
3214  9d95 b5ee          	dc.w	L3111
3215  9d97 b5f9          	dc.w	L5111
3216  9d99 b604          	dc.w	L7111
3217  9d9b b60f          	dc.w	L1211
3218  9d9d b61a          	dc.w	L3211
3219  9d9f b625          	dc.w	L5211
3220  9da1 b630          	dc.w	L7211
3221  9da3 b63b          	dc.w	L1311
3222  9da5 b646          	dc.w	L3311
3223  9da7 b651          	dc.w	L5311
3224                     ; 2462 void HttpDCall(uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
3224                     ; 2463 {
3225                     .text:	section	.text,new
3226  ace0               _HttpDCall:
3228  ace0 89            	pushw	x
3229  ace1 5204          	subw	sp,#4
3230       00000004      OFST:	set	4
3233                     ; 2467   i = 0;
3235  ace3 0f04          	clr	(OFST+0,sp)
3237                     ; 2469   if (uip_connected()) {
3239  ace5 720d02c867    	btjf	_uip_flags,#6,L5521
3240                     ; 2471     if (current_webpage == WEBPAGE_IOCONTROL) {
3242  acea c6001a        	ld	a,_current_webpage
3243  aced 260e          	jrne	L7521
3244                     ; 2472       pSocket->pData = g_HtmlPageIOControl;
3246  acef 1e0b          	ldw	x,(OFST+7,sp)
3247  acf1 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
3248  acf5 ef01          	ldw	(1,x),y
3249                     ; 2473       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
3251  acf7 90ae0c06      	ldw	y,#3078
3253  acfb 2046          	jp	LC013
3254  acfd               L7521:
3255                     ; 2477     else if (current_webpage == WEBPAGE_CONFIGURATION) {
3257  acfd a101          	cp	a,#1
3258  acff 260e          	jrne	L3621
3259                     ; 2478       pSocket->pData = g_HtmlPageConfiguration;
3261  ad01 1e0b          	ldw	x,(OFST+7,sp)
3262  ad03 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
3263  ad07 ef01          	ldw	(1,x),y
3264                     ; 2479       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
3266  ad09 90ae0c5c      	ldw	y,#3164
3268  ad0d 2034          	jp	LC013
3269  ad0f               L3621:
3270                     ; 2494     else if (current_webpage == WEBPAGE_STATS) {
3272  ad0f a105          	cp	a,#5
3273  ad11 260e          	jrne	L7621
3274                     ; 2495       pSocket->pData = g_HtmlPageStats;
3276  ad13 1e0b          	ldw	x,(OFST+7,sp)
3277  ad15 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
3278  ad19 ef01          	ldw	(1,x),y
3279                     ; 2496       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
3281  ad1b 90ae0175      	ldw	y,#373
3283  ad1f 2022          	jp	LC013
3284  ad21               L7621:
3285                     ; 2500     else if (current_webpage == WEBPAGE_RSTATE) {
3287  ad21 a106          	cp	a,#6
3288  ad23 260e          	jrne	L3721
3289                     ; 2501       pSocket->pData = g_HtmlPageRstate;
3291  ad25 1e0b          	ldw	x,(OFST+7,sp)
3292  ad27 90ae9a62      	ldw	y,#L12_g_HtmlPageRstate
3293  ad2b ef01          	ldw	(1,x),y
3294                     ; 2502       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
3296  ad2d 90ae0086      	ldw	y,#134
3298  ad31 2010          	jp	LC013
3299  ad33               L3721:
3300                     ; 2505     else if (current_webpage == WEBPAGE_SSTATE) {
3302  ad33 a107          	cp	a,#7
3303  ad35 260e          	jrne	L1621
3304                     ; 2506       pSocket->pData = g_HtmlPageSstate;
3306  ad37 1e0b          	ldw	x,(OFST+7,sp)
3307  ad39 90ae9ae9      	ldw	y,#L32_g_HtmlPageSstate
3308  ad3d ef01          	ldw	(1,x),y
3309                     ; 2507       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
3311  ad3f 90ae0004      	ldw	y,#4
3312  ad43               LC013:
3313  ad43 ef03          	ldw	(3,x),y
3314  ad45               L1621:
3315                     ; 2510     pSocket->nState = STATE_CONNECTED;
3317  ad45 1e0b          	ldw	x,(OFST+7,sp)
3318                     ; 2511     pSocket->nPrevBytes = 0xFFFF;
3320  ad47 90aeffff      	ldw	y,#65535
3321  ad4b 7f            	clr	(x)
3322  ad4c ef0b          	ldw	(11,x),y
3324  ad4e ccae21        	jra	L452
3325  ad51               L5521:
3326                     ; 2520   else if (uip_newdata() || uip_acked()) {
3328  ad51 720202c808    	btjt	_uip_flags,#1,L5031
3330  ad56 720002c803cc  	btjf	_uip_flags,#0,L3031
3331  ad5e               L5031:
3332                     ; 2521     if (uip_acked()) {
3334  ad5e 720102c803cc  	btjt	_uip_flags,#0,L5611
3335                     ; 2524       goto senddata;
3337                     ; 2594     if (saved_nstate != STATE_NULL) {
3339  ad66 c6005b        	ld	a,_saved_nstate
3340  ad69 a17f          	cp	a,#127
3341  ad6b 2603ccaded    	jreq	L7331
3342                     ; 2600       pSocket->nState = saved_nstate;
3344  ad70 1e0b          	ldw	x,(OFST+7,sp)
3345  ad72 f7            	ld	(x),a
3346                     ; 2607       pSocket->ParseState = saved_parsestate;
3348  ad73 c6005a        	ld	a,_saved_parsestate
3349  ad76 e70a          	ld	(10,x),a
3350                     ; 2611       pSocket->nParseLeft = saved_nparseleft;
3352  ad78 c60059        	ld	a,_saved_nparseleft
3353  ad7b e706          	ld	(6,x),a
3354                     ; 2613       pSocket->nNewlines = saved_newlines;
3356  ad7d c60028        	ld	a,_saved_newlines
3357  ad80 e705          	ld	(5,x),a
3358                     ; 2625       for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i];
3360  ad82 4f            	clr	a
3361  ad83 6b04          	ld	(OFST+0,sp),a
3363  ad85               L3131:
3366  ad85 5f            	clrw	x
3367  ad86 97            	ld	xl,a
3368  ad87 d60041        	ld	a,(_saved_postpartial,x)
3369  ad8a d70029        	ld	(_saved_postpartial_previous,x),a
3372  ad8d 0c04          	inc	(OFST+0,sp)
3376  ad8f 7b04          	ld	a,(OFST+0,sp)
3377  ad91 a118          	cp	a,#24
3378  ad93 25f0          	jrult	L3131
3379                     ; 2630       if (saved_nstate == STATE_PARSEPOST) {
3381  ad95 c6005b        	ld	a,_saved_nstate
3382  ad98 a10a          	cp	a,#10
3383  ad9a 2651          	jrne	L7331
3384                     ; 2631         if (saved_parsestate == PARSE_CMD) {
3386  ad9c c6005a        	ld	a,_saved_parsestate
3387  ad9f 274c          	jreq	L7331
3389                     ; 2634         else if (saved_parsestate == PARSE_NUM10) {
3391  ada1 a101          	cp	a,#1
3392  ada3 2609          	jrne	L7231
3393                     ; 2636 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3395  ada5 1e0b          	ldw	x,(OFST+7,sp)
3396  ada7 c60029        	ld	a,_saved_postpartial_previous
3397  adaa e708          	ld	(8,x),a
3399  adac 203f          	jra	L7331
3400  adae               L7231:
3401                     ; 2638         else if (saved_parsestate == PARSE_NUM1) {
3403  adae a102          	cp	a,#2
3404  adb0 2615          	jrne	L3331
3405                     ; 2640 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3407  adb2 1e0b          	ldw	x,(OFST+7,sp)
3408  adb4 c60029        	ld	a,_saved_postpartial_previous
3409  adb7 e708          	ld	(8,x),a
3410                     ; 2641           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3412  adb9 c6002a        	ld	a,_saved_postpartial_previous+1
3413  adbc 97            	ld	xl,a
3414  adbd a60a          	ld	a,#10
3415  adbf 42            	mul	x,a
3416  adc0 9f            	ld	a,xl
3417  adc1 a0e0          	sub	a,#224
3418  adc3 1e0b          	ldw	x,(OFST+7,sp)
3420  adc5 2024          	jp	LC014
3421  adc7               L3331:
3422                     ; 2643         else if (saved_parsestate == PARSE_EQUAL || saved_parsestate == PARSE_VAL) {
3424  adc7 a103          	cp	a,#3
3425  adc9 2704          	jreq	L1431
3427  adcb a104          	cp	a,#4
3428  adcd 261e          	jrne	L7331
3429  adcf               L1431:
3430                     ; 2645 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3432  adcf 1e0b          	ldw	x,(OFST+7,sp)
3433  add1 c60029        	ld	a,_saved_postpartial_previous
3434  add4 e708          	ld	(8,x),a
3435                     ; 2646           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3437  add6 c6002a        	ld	a,_saved_postpartial_previous+1
3438  add9 97            	ld	xl,a
3439  adda a60a          	ld	a,#10
3440  addc 42            	mul	x,a
3441  addd 9f            	ld	a,xl
3442  adde 1e0b          	ldw	x,(OFST+7,sp)
3443  ade0 a0e0          	sub	a,#224
3444  ade2 e709          	ld	(9,x),a
3445                     ; 2647           pSocket->ParseNum += (uint8_t)(saved_postpartial_previous[2] - '0');
3447  ade4 c6002b        	ld	a,_saved_postpartial_previous+2
3448  ade7 a030          	sub	a,#48
3449  ade9 eb09          	add	a,(9,x)
3450  adeb               LC014:
3451  adeb e709          	ld	(9,x),a
3453  aded               L7331:
3454                     ; 2649 	else if (saved_parsestate == PARSE_DELIM) {
3456                     ; 2669     if (pSocket->nState == STATE_CONNECTED) {
3458  aded 1e0b          	ldw	x,(OFST+7,sp)
3459  adef f6            	ld	a,(x)
3460  adf0 2627          	jrne	L7431
3461                     ; 2670       if (nBytes == 0) return;
3463  adf2 1e09          	ldw	x,(OFST+5,sp)
3464  adf4 272b          	jreq	L452
3467                     ; 2671       if (*pBuffer == 'G') {
3469  adf6 1e05          	ldw	x,(OFST+1,sp)
3470  adf8 f6            	ld	a,(x)
3471  adf9 a147          	cp	a,#71
3472  adfb 2606          	jrne	L3531
3473                     ; 2672         pSocket->nState = STATE_GET_G;
3475  adfd 1e0b          	ldw	x,(OFST+7,sp)
3476  adff a601          	ld	a,#1
3478  ae01 2008          	jp	LC015
3479  ae03               L3531:
3480                     ; 2674       else if (*pBuffer == 'P') {
3482  ae03 a150          	cp	a,#80
3483  ae05 2605          	jrne	L5531
3484                     ; 2675         pSocket->nState = STATE_POST_P;
3486  ae07 1e0b          	ldw	x,(OFST+7,sp)
3487  ae09 a604          	ld	a,#4
3488  ae0b               LC015:
3489  ae0b f7            	ld	(x),a
3490  ae0c               L5531:
3491                     ; 2677       nBytes--;
3493  ae0c 1e09          	ldw	x,(OFST+5,sp)
3494  ae0e 5a            	decw	x
3495  ae0f 1f09          	ldw	(OFST+5,sp),x
3496                     ; 2678       pBuffer++;
3498  ae11 1e05          	ldw	x,(OFST+1,sp)
3499  ae13 5c            	incw	x
3500  ae14 1f05          	ldw	(OFST+1,sp),x
3501  ae16 1e0b          	ldw	x,(OFST+7,sp)
3502  ae18 f6            	ld	a,(x)
3503  ae19               L7431:
3504                     ; 2681     if (pSocket->nState == STATE_GET_G) {
3506  ae19 a101          	cp	a,#1
3507  ae1b 2620          	jrne	L1631
3508                     ; 2682       if (nBytes == 0) return;
3510  ae1d 1e09          	ldw	x,(OFST+5,sp)
3511  ae1f 2603          	jrne	L3631
3513  ae21               L452:
3516  ae21 5b06          	addw	sp,#6
3517  ae23 81            	ret	
3518  ae24               L3631:
3519                     ; 2683       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
3521  ae24 1e05          	ldw	x,(OFST+1,sp)
3522  ae26 f6            	ld	a,(x)
3523  ae27 a145          	cp	a,#69
3524  ae29 2605          	jrne	L5631
3527  ae2b 1e0b          	ldw	x,(OFST+7,sp)
3528  ae2d a602          	ld	a,#2
3529  ae2f f7            	ld	(x),a
3530  ae30               L5631:
3531                     ; 2684       nBytes--;
3533  ae30 1e09          	ldw	x,(OFST+5,sp)
3534  ae32 5a            	decw	x
3535  ae33 1f09          	ldw	(OFST+5,sp),x
3536                     ; 2685       pBuffer++;
3538  ae35 1e05          	ldw	x,(OFST+1,sp)
3539  ae37 5c            	incw	x
3540  ae38 1f05          	ldw	(OFST+1,sp),x
3541  ae3a 1e0b          	ldw	x,(OFST+7,sp)
3542  ae3c f6            	ld	a,(x)
3543  ae3d               L1631:
3544                     ; 2688     if (pSocket->nState == STATE_GET_GE) {
3546  ae3d a102          	cp	a,#2
3547  ae3f 261d          	jrne	L7631
3548                     ; 2689       if (nBytes == 0) return;
3550  ae41 1e09          	ldw	x,(OFST+5,sp)
3551  ae43 27dc          	jreq	L452
3554                     ; 2690       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
3556  ae45 1e05          	ldw	x,(OFST+1,sp)
3557  ae47 f6            	ld	a,(x)
3558  ae48 a154          	cp	a,#84
3559  ae4a 2605          	jrne	L3731
3562  ae4c 1e0b          	ldw	x,(OFST+7,sp)
3563  ae4e a603          	ld	a,#3
3564  ae50 f7            	ld	(x),a
3565  ae51               L3731:
3566                     ; 2691       nBytes--;
3568  ae51 1e09          	ldw	x,(OFST+5,sp)
3569  ae53 5a            	decw	x
3570  ae54 1f09          	ldw	(OFST+5,sp),x
3571                     ; 2692       pBuffer++;
3573  ae56 1e05          	ldw	x,(OFST+1,sp)
3574  ae58 5c            	incw	x
3575  ae59 1f05          	ldw	(OFST+1,sp),x
3576  ae5b 1e0b          	ldw	x,(OFST+7,sp)
3577  ae5d f6            	ld	a,(x)
3578  ae5e               L7631:
3579                     ; 2695     if (pSocket->nState == STATE_GET_GET) {
3581  ae5e a103          	cp	a,#3
3582  ae60 261d          	jrne	L5731
3583                     ; 2696       if (nBytes == 0) return;
3585  ae62 1e09          	ldw	x,(OFST+5,sp)
3586  ae64 27bb          	jreq	L452
3589                     ; 2697       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
3591  ae66 1e05          	ldw	x,(OFST+1,sp)
3592  ae68 f6            	ld	a,(x)
3593  ae69 a120          	cp	a,#32
3594  ae6b 2605          	jrne	L1041
3597  ae6d 1e0b          	ldw	x,(OFST+7,sp)
3598  ae6f a608          	ld	a,#8
3599  ae71 f7            	ld	(x),a
3600  ae72               L1041:
3601                     ; 2698       nBytes--;
3603  ae72 1e09          	ldw	x,(OFST+5,sp)
3604  ae74 5a            	decw	x
3605  ae75 1f09          	ldw	(OFST+5,sp),x
3606                     ; 2699       pBuffer++;
3608  ae77 1e05          	ldw	x,(OFST+1,sp)
3609  ae79 5c            	incw	x
3610  ae7a 1f05          	ldw	(OFST+1,sp),x
3611  ae7c 1e0b          	ldw	x,(OFST+7,sp)
3612  ae7e f6            	ld	a,(x)
3613  ae7f               L5731:
3614                     ; 2702     if (pSocket->nState == STATE_POST_P) {
3616  ae7f a104          	cp	a,#4
3617  ae81 261d          	jrne	L3041
3618                     ; 2703       if (nBytes == 0) return;
3620  ae83 1e09          	ldw	x,(OFST+5,sp)
3621  ae85 279a          	jreq	L452
3624                     ; 2704       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
3626  ae87 1e05          	ldw	x,(OFST+1,sp)
3627  ae89 f6            	ld	a,(x)
3628  ae8a a14f          	cp	a,#79
3629  ae8c 2605          	jrne	L7041
3632  ae8e 1e0b          	ldw	x,(OFST+7,sp)
3633  ae90 a605          	ld	a,#5
3634  ae92 f7            	ld	(x),a
3635  ae93               L7041:
3636                     ; 2705       nBytes--;
3638  ae93 1e09          	ldw	x,(OFST+5,sp)
3639  ae95 5a            	decw	x
3640  ae96 1f09          	ldw	(OFST+5,sp),x
3641                     ; 2706       pBuffer++;
3643  ae98 1e05          	ldw	x,(OFST+1,sp)
3644  ae9a 5c            	incw	x
3645  ae9b 1f05          	ldw	(OFST+1,sp),x
3646  ae9d 1e0b          	ldw	x,(OFST+7,sp)
3647  ae9f f6            	ld	a,(x)
3648  aea0               L3041:
3649                     ; 2709     if (pSocket->nState == STATE_POST_PO) {
3651  aea0 a105          	cp	a,#5
3652  aea2 2620          	jrne	L1141
3653                     ; 2710       if (nBytes == 0) return;
3655  aea4 1e09          	ldw	x,(OFST+5,sp)
3656  aea6 2603ccae21    	jreq	L452
3659                     ; 2711       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
3661  aeab 1e05          	ldw	x,(OFST+1,sp)
3662  aead f6            	ld	a,(x)
3663  aeae a153          	cp	a,#83
3664  aeb0 2605          	jrne	L5141
3667  aeb2 1e0b          	ldw	x,(OFST+7,sp)
3668  aeb4 a606          	ld	a,#6
3669  aeb6 f7            	ld	(x),a
3670  aeb7               L5141:
3671                     ; 2712       nBytes--;
3673  aeb7 1e09          	ldw	x,(OFST+5,sp)
3674  aeb9 5a            	decw	x
3675  aeba 1f09          	ldw	(OFST+5,sp),x
3676                     ; 2713       pBuffer++;
3678  aebc 1e05          	ldw	x,(OFST+1,sp)
3679  aebe 5c            	incw	x
3680  aebf 1f05          	ldw	(OFST+1,sp),x
3681  aec1 1e0b          	ldw	x,(OFST+7,sp)
3682  aec3 f6            	ld	a,(x)
3683  aec4               L1141:
3684                     ; 2716     if (pSocket->nState == STATE_POST_POS) {
3686  aec4 a106          	cp	a,#6
3687  aec6 261d          	jrne	L7141
3688                     ; 2717       if (nBytes == 0) return;
3690  aec8 1e09          	ldw	x,(OFST+5,sp)
3691  aeca 27dc          	jreq	L452
3694                     ; 2718       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
3696  aecc 1e05          	ldw	x,(OFST+1,sp)
3697  aece f6            	ld	a,(x)
3698  aecf a154          	cp	a,#84
3699  aed1 2605          	jrne	L3241
3702  aed3 1e0b          	ldw	x,(OFST+7,sp)
3703  aed5 a607          	ld	a,#7
3704  aed7 f7            	ld	(x),a
3705  aed8               L3241:
3706                     ; 2719       nBytes--;
3708  aed8 1e09          	ldw	x,(OFST+5,sp)
3709  aeda 5a            	decw	x
3710  aedb 1f09          	ldw	(OFST+5,sp),x
3711                     ; 2720       pBuffer++;
3713  aedd 1e05          	ldw	x,(OFST+1,sp)
3714  aedf 5c            	incw	x
3715  aee0 1f05          	ldw	(OFST+1,sp),x
3716  aee2 1e0b          	ldw	x,(OFST+7,sp)
3717  aee4 f6            	ld	a,(x)
3718  aee5               L7141:
3719                     ; 2723     if (pSocket->nState == STATE_POST_POST) {
3721  aee5 a107          	cp	a,#7
3722  aee7 261d          	jrne	L5241
3723                     ; 2724       if (nBytes == 0) return;
3725  aee9 1e09          	ldw	x,(OFST+5,sp)
3726  aeeb 27bb          	jreq	L452
3729                     ; 2725       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
3731  aeed 1e05          	ldw	x,(OFST+1,sp)
3732  aeef f6            	ld	a,(x)
3733  aef0 a120          	cp	a,#32
3734  aef2 2605          	jrne	L1341
3737  aef4 1e0b          	ldw	x,(OFST+7,sp)
3738  aef6 a609          	ld	a,#9
3739  aef8 f7            	ld	(x),a
3740  aef9               L1341:
3741                     ; 2726       nBytes--;
3743  aef9 1e09          	ldw	x,(OFST+5,sp)
3744  aefb 5a            	decw	x
3745  aefc 1f09          	ldw	(OFST+5,sp),x
3746                     ; 2727       pBuffer++;
3748  aefe 1e05          	ldw	x,(OFST+1,sp)
3749  af00 5c            	incw	x
3750  af01 1f05          	ldw	(OFST+1,sp),x
3751  af03 1e0b          	ldw	x,(OFST+7,sp)
3752  af05 f6            	ld	a,(x)
3753  af06               L5241:
3754                     ; 2730     if (pSocket->nState == STATE_GOTPOST) {
3756  af06 a109          	cp	a,#9
3757  af08 2703ccaf8f    	jrne	L3341
3758                     ; 2732       saved_nstate = STATE_GOTPOST;
3760  af0d 3509005b      	mov	_saved_nstate,#9
3761                     ; 2733       if (nBytes == 0) {
3763  af11 1e09          	ldw	x,(OFST+5,sp)
3764  af13 2676          	jrne	L1441
3765                     ; 2736 	saved_newlines = pSocket->nNewlines;
3767  af15 1e0b          	ldw	x,(OFST+7,sp)
3768  af17 e605          	ld	a,(5,x)
3769  af19 c70028        	ld	_saved_newlines,a
3770                     ; 2737         return;
3772  af1c ccae21        	jra	L452
3773  af1f               L7341:
3774                     ; 2745 	if (saved_newlines == 2) {
3776  af1f c60028        	ld	a,_saved_newlines
3777  af22 a102          	cp	a,#2
3778  af24 272b          	jreq	L7441
3780                     ; 2750           if (*pBuffer == '\n') pSocket->nNewlines++;
3782  af26 1e05          	ldw	x,(OFST+1,sp)
3783  af28 f6            	ld	a,(x)
3784  af29 a10a          	cp	a,#10
3785  af2b 2606          	jrne	L1541
3788  af2d 1e0b          	ldw	x,(OFST+7,sp)
3789  af2f 6c05          	inc	(5,x)
3791  af31 2008          	jra	L3541
3792  af33               L1541:
3793                     ; 2751           else if (*pBuffer == '\r') { }
3795  af33 a10d          	cp	a,#13
3796  af35 2704          	jreq	L3541
3798                     ; 2752           else pSocket->nNewlines = 0;
3800  af37 1e0b          	ldw	x,(OFST+7,sp)
3801  af39 6f05          	clr	(5,x)
3802  af3b               L3541:
3803                     ; 2753           pBuffer++;
3805  af3b 1e05          	ldw	x,(OFST+1,sp)
3806  af3d 5c            	incw	x
3807  af3e 1f05          	ldw	(OFST+1,sp),x
3808                     ; 2754           nBytes--;
3810  af40 1e09          	ldw	x,(OFST+5,sp)
3811  af42 5a            	decw	x
3812  af43 1f09          	ldw	(OFST+5,sp),x
3813                     ; 2755           if (nBytes == 0) {
3815  af45 260a          	jrne	L7441
3816                     ; 2758             saved_newlines = pSocket->nNewlines;
3818  af47 1e0b          	ldw	x,(OFST+7,sp)
3819  af49 e605          	ld	a,(5,x)
3820  af4b c70028        	ld	_saved_newlines,a
3821                     ; 2759             return;
3823  af4e ccae21        	jra	L452
3824  af51               L7441:
3825                     ; 2767         if (pSocket->nNewlines == 2) {
3827  af51 1e0b          	ldw	x,(OFST+7,sp)
3828  af53 e605          	ld	a,(5,x)
3829  af55 a102          	cp	a,#2
3830  af57 2632          	jrne	L1441
3831                     ; 2770           if (current_webpage == WEBPAGE_IOCONTROL) {
3833  af59 c6001a        	ld	a,_current_webpage
3834  af5c 2609          	jrne	L5641
3835                     ; 2771 	    pSocket->nParseLeft = PARSEBYTES_IOCONTROL;
3837  af5e a635          	ld	a,#53
3838  af60 e706          	ld	(6,x),a
3839                     ; 2772 	    pSocket->nParseLeftAddl = PARSEBYTES_IOCONTROL_ADDL;
3841  af62 6f07          	clr	(7,x)
3842  af64 c6001a        	ld	a,_current_webpage
3843  af67               L5641:
3844                     ; 2774           if (current_webpage == WEBPAGE_CONFIGURATION) {
3846  af67 4a            	dec	a
3847  af68 2608          	jrne	L7641
3848                     ; 2775 	    pSocket->nParseLeft = PARSEBYTES_CONFIGURATION;
3850  af6a a6ec          	ld	a,#236
3851  af6c e706          	ld	(6,x),a
3852                     ; 2776 	    pSocket->nParseLeftAddl = PARSEBYTES_CONFIGURATION_ADDL;
3854  af6e a618          	ld	a,#24
3855  af70 e707          	ld	(7,x),a
3856  af72               L7641:
3857                     ; 2778           pSocket->ParseState = saved_parsestate = PARSE_CMD;
3859  af72 725f005a      	clr	_saved_parsestate
3860  af76 6f0a          	clr	(10,x)
3861                     ; 2779 	  saved_nparseleft = pSocket->nParseLeft;
3863  af78 e606          	ld	a,(6,x)
3864  af7a c70059        	ld	_saved_nparseleft,a
3865                     ; 2781           pSocket->nState = STATE_PARSEPOST;
3867  af7d a60a          	ld	a,#10
3868  af7f f7            	ld	(x),a
3869                     ; 2782 	  saved_nstate = STATE_PARSEPOST;
3871  af80 350a005b      	mov	_saved_nstate,#10
3872                     ; 2783 	  if (nBytes == 0) {
3874  af84 1e09          	ldw	x,(OFST+5,sp)
3875  af86 2607          	jrne	L3341
3876                     ; 2786 	    return;
3878  af88 ccae21        	jra	L452
3879  af8b               L1441:
3880                     ; 2740       while (nBytes != 0) {
3882  af8b 1e09          	ldw	x,(OFST+5,sp)
3883  af8d 2690          	jrne	L7341
3884  af8f               L3341:
3885                     ; 2793     if (pSocket->nState == STATE_GOTGET) {
3887  af8f 1e0b          	ldw	x,(OFST+7,sp)
3888  af91 f6            	ld	a,(x)
3889  af92 a108          	cp	a,#8
3890  af94 2609          	jrne	L3741
3891                     ; 2797       pSocket->nParseLeft = 6;
3893  af96 a606          	ld	a,#6
3894  af98 e706          	ld	(6,x),a
3895                     ; 2798       pSocket->ParseState = PARSE_SLASH1;
3897  af9a e70a          	ld	(10,x),a
3898                     ; 2800       pSocket->nState = STATE_PARSEGET;
3900  af9c a60d          	ld	a,#13
3901  af9e f7            	ld	(x),a
3902  af9f               L3741:
3903                     ; 2803     if (pSocket->nState == STATE_PARSEPOST) {
3905  af9f a10a          	cp	a,#10
3906  afa1 2703ccb487    	jrne	L5741
3907  afa6               L7741:
3908                     ; 2817         if (pSocket->ParseState == PARSE_CMD) {
3910  afa6 1e0b          	ldw	x,(OFST+7,sp)
3911  afa8 e60a          	ld	a,(10,x)
3912  afaa 2664          	jrne	L3051
3913                     ; 2818           pSocket->ParseCmd = *pBuffer;
3915  afac 1e05          	ldw	x,(OFST+1,sp)
3916  afae f6            	ld	a,(x)
3917  afaf 1e0b          	ldw	x,(OFST+7,sp)
3918  afb1 e708          	ld	(8,x),a
3919                     ; 2819 	  saved_postpartial[0] = *pBuffer;
3921  afb3 1e05          	ldw	x,(OFST+1,sp)
3922  afb5 f6            	ld	a,(x)
3923  afb6 c70041        	ld	_saved_postpartial,a
3924                     ; 2820           pSocket->ParseState = saved_parsestate = PARSE_NUM10;
3926  afb9 a601          	ld	a,#1
3927  afbb c7005a        	ld	_saved_parsestate,a
3928  afbe 1e0b          	ldw	x,(OFST+7,sp)
3929  afc0 e70a          	ld	(10,x),a
3930                     ; 2821 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3932  afc2 e606          	ld	a,(6,x)
3933  afc4 2704          	jreq	L5051
3934                     ; 2822 	    pSocket->nParseLeft--;
3936  afc6 6a06          	dec	(6,x)
3938  afc8 2004          	jra	L7051
3939  afca               L5051:
3940                     ; 2826 	    pSocket->ParseState = PARSE_DELIM;
3942  afca a605          	ld	a,#5
3943  afcc e70a          	ld	(10,x),a
3944  afce               L7051:
3945                     ; 2828 	  saved_nparseleft = pSocket->nParseLeft;
3947  afce e606          	ld	a,(6,x)
3948  afd0 c70059        	ld	_saved_nparseleft,a
3949                     ; 2829           pBuffer++;
3951  afd3 1e05          	ldw	x,(OFST+1,sp)
3952  afd5 5c            	incw	x
3953  afd6 1f05          	ldw	(OFST+1,sp),x
3954                     ; 2830 	  nBytes --;
3956  afd8 1e09          	ldw	x,(OFST+5,sp)
3957  afda 5a            	decw	x
3958  afdb 1f09          	ldw	(OFST+5,sp),x
3959                     ; 2832 	  if (pSocket->ParseCmd == 'o' ||
3959                     ; 2833 	      pSocket->ParseCmd == 'a' ||
3959                     ; 2834 	      pSocket->ParseCmd == 'b' ||
3959                     ; 2835 	      pSocket->ParseCmd == 'c' ||
3959                     ; 2836 	      pSocket->ParseCmd == 'd' ||
3959                     ; 2837 	      pSocket->ParseCmd == 'g' ||
3959                     ; 2838 	      pSocket->ParseCmd == 'l' ||
3959                     ; 2839 	      pSocket->ParseCmd == 'm' ||
3959                     ; 2840 	      pSocket->ParseCmd == 'z') { }
3961  afdd 1e0b          	ldw	x,(OFST+7,sp)
3962  afdf e608          	ld	a,(8,x)
3963  afe1 a16f          	cp	a,#111
3964  afe3 2724          	jreq	L3351
3966  afe5 a161          	cp	a,#97
3967  afe7 2720          	jreq	L3351
3969  afe9 a162          	cp	a,#98
3970  afeb 271c          	jreq	L3351
3972  afed a163          	cp	a,#99
3973  afef 2718          	jreq	L3351
3975  aff1 a164          	cp	a,#100
3976  aff3 2714          	jreq	L3351
3978  aff5 a167          	cp	a,#103
3979  aff7 2710          	jreq	L3351
3981  aff9 a16c          	cp	a,#108
3982  affb 270c          	jreq	L3351
3984  affd a16d          	cp	a,#109
3985  afff 2708          	jreq	L3351
3987  b001 a17a          	cp	a,#122
3988  b003 2704          	jreq	L3351
3989                     ; 2843 	    pSocket->ParseState = PARSE_DELIM;
3991  b005 a605          	ld	a,#5
3992  b007 e70a          	ld	(10,x),a
3993  b009               L3351:
3994                     ; 2845 	  if (nBytes == 0) { // Hit end of fragment. Break out of while()
3996  b009 1e09          	ldw	x,(OFST+5,sp)
3997  b00b 2699          	jrne	L7741
3998                     ; 2847 	    break;
4000  b00d ccb42f        	jra	L1051
4001  b010               L3051:
4002                     ; 2851         else if (pSocket->ParseState == PARSE_NUM10) {
4004  b010 a101          	cp	a,#1
4005  b012 2640          	jrne	L1451
4006                     ; 2852           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
4008  b014 1e05          	ldw	x,(OFST+1,sp)
4009  b016 f6            	ld	a,(x)
4010  b017 97            	ld	xl,a
4011  b018 a60a          	ld	a,#10
4012  b01a 42            	mul	x,a
4013  b01b 9f            	ld	a,xl
4014  b01c 1e0b          	ldw	x,(OFST+7,sp)
4015  b01e a0e0          	sub	a,#224
4016  b020 e709          	ld	(9,x),a
4017                     ; 2853 	  saved_postpartial[1] = *pBuffer;
4019  b022 1e05          	ldw	x,(OFST+1,sp)
4020  b024 f6            	ld	a,(x)
4021  b025 c70042        	ld	_saved_postpartial+1,a
4022                     ; 2854           pSocket->ParseState = saved_parsestate = PARSE_NUM1;
4024  b028 a602          	ld	a,#2
4025  b02a c7005a        	ld	_saved_parsestate,a
4026  b02d 1e0b          	ldw	x,(OFST+7,sp)
4027  b02f e70a          	ld	(10,x),a
4028                     ; 2855 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4030  b031 e606          	ld	a,(6,x)
4031  b033 2704          	jreq	L3451
4032                     ; 2856 	    pSocket->nParseLeft--;
4034  b035 6a06          	dec	(6,x)
4036  b037 2004          	jra	L5451
4037  b039               L3451:
4038                     ; 2860 	    pSocket->ParseState = PARSE_DELIM;
4040  b039 a605          	ld	a,#5
4041  b03b e70a          	ld	(10,x),a
4042  b03d               L5451:
4043                     ; 2862 	  saved_nparseleft = pSocket->nParseLeft;
4045  b03d e606          	ld	a,(6,x)
4046  b03f c70059        	ld	_saved_nparseleft,a
4047                     ; 2863           pBuffer++;
4049  b042 1e05          	ldw	x,(OFST+1,sp)
4050  b044 5c            	incw	x
4051  b045 1f05          	ldw	(OFST+1,sp),x
4052                     ; 2864 	  nBytes--;
4054  b047 1e09          	ldw	x,(OFST+5,sp)
4055  b049 5a            	decw	x
4056  b04a 1f09          	ldw	(OFST+5,sp),x
4057                     ; 2865 	  if (nBytes == 0) {
4059  b04c 2703ccafa6    	jrne	L7741
4060                     ; 2867 	    break;
4062  b051 ccb42f        	jra	L1051
4063  b054               L1451:
4064                     ; 2871         else if (pSocket->ParseState == PARSE_NUM1) {
4066  b054 a102          	cp	a,#2
4067  b056 2638          	jrne	L3551
4068                     ; 2872           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
4070  b058 1605          	ldw	y,(OFST+1,sp)
4071  b05a 90f6          	ld	a,(y)
4072  b05c a030          	sub	a,#48
4073  b05e eb09          	add	a,(9,x)
4074  b060 e709          	ld	(9,x),a
4075                     ; 2873 	  saved_postpartial[2] = *pBuffer;
4077  b062 93            	ldw	x,y
4078  b063 f6            	ld	a,(x)
4079  b064 c70043        	ld	_saved_postpartial+2,a
4080                     ; 2874           pSocket->ParseState = saved_parsestate = PARSE_EQUAL;
4082  b067 a603          	ld	a,#3
4083  b069 c7005a        	ld	_saved_parsestate,a
4084  b06c 1e0b          	ldw	x,(OFST+7,sp)
4085  b06e e70a          	ld	(10,x),a
4086                     ; 2875 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4088  b070 e606          	ld	a,(6,x)
4089  b072 2704          	jreq	L5551
4090                     ; 2876 	    pSocket->nParseLeft--;
4092  b074 6a06          	dec	(6,x)
4094  b076 2004          	jra	L7551
4095  b078               L5551:
4096                     ; 2880 	    pSocket->ParseState = PARSE_DELIM;
4098  b078 a605          	ld	a,#5
4099  b07a e70a          	ld	(10,x),a
4100  b07c               L7551:
4101                     ; 2882 	  saved_nparseleft = pSocket->nParseLeft;
4103  b07c e606          	ld	a,(6,x)
4104  b07e c70059        	ld	_saved_nparseleft,a
4105                     ; 2883           pBuffer++;
4107  b081 1e05          	ldw	x,(OFST+1,sp)
4108  b083 5c            	incw	x
4109  b084 1f05          	ldw	(OFST+1,sp),x
4110                     ; 2884 	  nBytes--;
4112  b086 1e09          	ldw	x,(OFST+5,sp)
4113  b088 5a            	decw	x
4114  b089 1f09          	ldw	(OFST+5,sp),x
4115                     ; 2885 	  if (nBytes == 0) {
4117  b08b 26c1          	jrne	L7741
4118                     ; 2887 	    break;
4120  b08d ccb42f        	jra	L1051
4121  b090               L3551:
4122                     ; 2891         else if (pSocket->ParseState == PARSE_EQUAL) {
4124  b090 a103          	cp	a,#3
4125  b092 262f          	jrne	L5651
4126                     ; 2892           pSocket->ParseState = saved_parsestate = PARSE_VAL;
4128  b094 a604          	ld	a,#4
4129  b096 c7005a        	ld	_saved_parsestate,a
4130  b099 e70a          	ld	(10,x),a
4131                     ; 2893 	  saved_postpartial[3] = *pBuffer;
4133  b09b 1e05          	ldw	x,(OFST+1,sp)
4134  b09d f6            	ld	a,(x)
4135  b09e c70044        	ld	_saved_postpartial+3,a
4136                     ; 2894 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4138  b0a1 1e0b          	ldw	x,(OFST+7,sp)
4139  b0a3 e606          	ld	a,(6,x)
4140  b0a5 2704          	jreq	L7651
4141                     ; 2895 	    pSocket->nParseLeft--;
4143  b0a7 6a06          	dec	(6,x)
4145  b0a9 2004          	jra	L1751
4146  b0ab               L7651:
4147                     ; 2899 	    pSocket->ParseState = PARSE_DELIM;
4149  b0ab a605          	ld	a,#5
4150  b0ad e70a          	ld	(10,x),a
4151  b0af               L1751:
4152                     ; 2901 	  saved_nparseleft = pSocket->nParseLeft;
4154  b0af e606          	ld	a,(6,x)
4155  b0b1 c70059        	ld	_saved_nparseleft,a
4156                     ; 2902           pBuffer++;
4158  b0b4 1e05          	ldw	x,(OFST+1,sp)
4159  b0b6 5c            	incw	x
4160  b0b7 1f05          	ldw	(OFST+1,sp),x
4161                     ; 2903 	  nBytes--;
4163  b0b9 1e09          	ldw	x,(OFST+5,sp)
4164  b0bb 5a            	decw	x
4165  b0bc 1f09          	ldw	(OFST+5,sp),x
4166                     ; 2904 	  if (nBytes == 0) {
4168  b0be 268e          	jrne	L7741
4169                     ; 2906 	    break;
4171  b0c0 ccb42f        	jra	L1051
4172  b0c3               L5651:
4173                     ; 2910         else if (pSocket->ParseState == PARSE_VAL) {
4175  b0c3 a104          	cp	a,#4
4176  b0c5 2703ccb402    	jrne	L7751
4177                     ; 2923           if (pSocket->ParseCmd == 'o') {
4179  b0ca e608          	ld	a,(8,x)
4180  b0cc a16f          	cp	a,#111
4181  b0ce 2644          	jrne	L1061
4182                     ; 2939 	    current_webpage = WEBPAGE_IOCONTROL;
4184  b0d0 725f001a      	clr	_current_webpage
4185                     ; 2943               if ((uint8_t)(*pBuffer) == '1') pin_value = 1;
4187  b0d4 1e05          	ldw	x,(OFST+1,sp)
4188  b0d6 f6            	ld	a,(x)
4189  b0d7 a131          	cp	a,#49
4190  b0d9 2604          	jrne	L3061
4193  b0db a601          	ld	a,#1
4195  b0dd 2001          	jra	L5061
4196  b0df               L3061:
4197                     ; 2944 	      else pin_value = 0;
4199  b0df 4f            	clr	a
4200  b0e0               L5061:
4201  b0e0 6b01          	ld	(OFST-3,sp),a
4203                     ; 2945 	      GpioSetPin(pSocket->ParseNum, (uint8_t)pin_value);
4205  b0e2 160b          	ldw	y,(OFST+7,sp)
4206  b0e4 97            	ld	xl,a
4207  b0e5 90e609        	ld	a,(9,y)
4208  b0e8 95            	ld	xh,a
4209  b0e9 cdbcb7        	call	_GpioSetPin
4211                     ; 2947 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent
4213  b0ec 1e0b          	ldw	x,(OFST+7,sp)
4214  b0ee e606          	ld	a,(6,x)
4215  b0f0 2704          	jreq	L7061
4218  b0f2 6a06          	dec	(6,x)
4219  b0f4 e606          	ld	a,(6,x)
4220  b0f6               L7061:
4221                     ; 2949             saved_nparseleft = pSocket->nParseLeft;
4223  b0f6 c70059        	ld	_saved_nparseleft,a
4224                     ; 2950             pBuffer++;
4226  b0f9 1e05          	ldw	x,(OFST+1,sp)
4227  b0fb 5c            	incw	x
4228  b0fc 1f05          	ldw	(OFST+1,sp),x
4229                     ; 2951 	    nBytes--;
4231  b0fe 1e09          	ldw	x,(OFST+5,sp)
4232  b100 5a            	decw	x
4233  b101 1f09          	ldw	(OFST+5,sp),x
4234                     ; 2952 	    if (nBytes == 0) {
4236  b103 2703ccb3e0    	jrne	L3161
4237                     ; 2955 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4239  b108 a605          	ld	a,#5
4240  b10a c7005a        	ld	_saved_parsestate,a
4241  b10d 1e0b          	ldw	x,(OFST+7,sp)
4242  b10f e70a          	ld	(10,x),a
4243                     ; 2956 	      break;
4245  b111 ccb42f        	jra	L1051
4246  b114               L1061:
4247                     ; 2963           else if (pSocket->ParseCmd == 'a'
4247                     ; 2964                 || pSocket->ParseCmd == 'l'
4247                     ; 2965                 || pSocket->ParseCmd == 'm' ) {
4249  b114 a161          	cp	a,#97
4250  b116 2708          	jreq	L7161
4252  b118 a16c          	cp	a,#108
4253  b11a 2704          	jreq	L7161
4255  b11c a16d          	cp	a,#109
4256  b11e 265b          	jrne	L5161
4257  b120               L7161:
4258                     ; 2974 	    current_webpage = WEBPAGE_CONFIGURATION;
4260  b120 3501001a      	mov	_current_webpage,#1
4261                     ; 2976 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4263  b124 725f0021      	clr	_break_while
4264                     ; 2978             tmp_pBuffer = pBuffer;
4266  b128 1e05          	ldw	x,(OFST+1,sp)
4267  b12a cf0025        	ldw	_tmp_pBuffer,x
4268                     ; 2979             tmp_nBytes = nBytes;
4270  b12d 1e09          	ldw	x,(OFST+5,sp)
4271  b12f cf0023        	ldw	_tmp_nBytes,x
4272                     ; 2980 	    tmp_nParseLeft = pSocket->nParseLeft;
4274  b132 1e0b          	ldw	x,(OFST+7,sp)
4275  b134 e606          	ld	a,(6,x)
4276  b136 c70022        	ld	_tmp_nParseLeft,a
4277                     ; 2981             switch (pSocket->ParseCmd) {
4279  b139 e608          	ld	a,(8,x)
4281                     ; 2984               case 'm': i = 10; break;
4282  b13b a061          	sub	a,#97
4283  b13d 270b          	jreq	L3701
4284  b13f a00b          	sub	a,#11
4285  b141 270b          	jreq	L5701
4286  b143 4a            	dec	a
4287  b144 2708          	jreq	L5701
4288  b146 7b04          	ld	a,(OFST+0,sp)
4289  b148 2008          	jra	L5261
4290  b14a               L3701:
4291                     ; 2982               case 'a': i = 19; break;
4293  b14a a613          	ld	a,#19
4296  b14c 2002          	jp	LC018
4297  b14e               L5701:
4298                     ; 2983               case 'l':
4298                     ; 2984               case 'm': i = 10; break;
4300  b14e a60a          	ld	a,#10
4301  b150               LC018:
4302  b150 6b04          	ld	(OFST+0,sp),a
4306  b152               L5261:
4307                     ; 2986             parse_POST_string(pSocket->ParseCmd, i);
4309  b152 160b          	ldw	y,(OFST+7,sp)
4310  b154 97            	ld	xl,a
4311  b155 90e608        	ld	a,(8,y)
4312  b158 95            	ld	xh,a
4313  b159 cdb829        	call	_parse_POST_string
4315                     ; 2987             pBuffer = tmp_pBuffer;
4317  b15c ce0025        	ldw	x,_tmp_pBuffer
4318  b15f 1f05          	ldw	(OFST+1,sp),x
4319                     ; 2988             nBytes = tmp_nBytes;
4321  b161 ce0023        	ldw	x,_tmp_nBytes
4322  b164 1f09          	ldw	(OFST+5,sp),x
4323                     ; 2989 	    pSocket->nParseLeft = tmp_nParseLeft;
4325  b166 1e0b          	ldw	x,(OFST+7,sp)
4326  b168 c60022        	ld	a,_tmp_nParseLeft
4327  b16b e706          	ld	(6,x),a
4328                     ; 2990             if (break_while == 1) {
4330  b16d c60021        	ld	a,_break_while
4331  b170 4a            	dec	a
4332  b171 2692          	jrne	L3161
4333                     ; 2994 	      pSocket->ParseState = saved_parsestate;
4335  b173 c6005a        	ld	a,_saved_parsestate
4336  b176 e70a          	ld	(10,x),a
4337                     ; 2995 	      break;
4339  b178 ccb42f        	jra	L1051
4340  b17b               L5161:
4341                     ; 3002           else if (pSocket->ParseCmd == 'b') {
4343  b17b a162          	cp	a,#98
4344  b17d 2654          	jrne	L3361
4345                     ; 3010 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4347  b17f 725f0021      	clr	_break_while
4348                     ; 3012             tmp_pBuffer = pBuffer;
4350  b183 1e05          	ldw	x,(OFST+1,sp)
4351  b185 cf0025        	ldw	_tmp_pBuffer,x
4352                     ; 3013             tmp_nBytes = nBytes;
4354  b188 1e09          	ldw	x,(OFST+5,sp)
4355  b18a cf0023        	ldw	_tmp_nBytes,x
4356                     ; 3014 	    tmp_nParseLeft = pSocket->nParseLeft;
4358  b18d 1e0b          	ldw	x,(OFST+7,sp)
4359  b18f e606          	ld	a,(6,x)
4360  b191 c70022        	ld	_tmp_nParseLeft,a
4361                     ; 3015             parse_POST_address(pSocket->ParseCmd, pSocket->ParseNum);
4363  b194 e609          	ld	a,(9,x)
4364  b196 160b          	ldw	y,(OFST+7,sp)
4365  b198 97            	ld	xl,a
4366  b199 90e608        	ld	a,(8,y)
4367  b19c 95            	ld	xh,a
4368  b19d cdb9aa        	call	_parse_POST_address
4370                     ; 3016             pBuffer = tmp_pBuffer;
4372  b1a0 ce0025        	ldw	x,_tmp_pBuffer
4373  b1a3 1f05          	ldw	(OFST+1,sp),x
4374                     ; 3017             nBytes = tmp_nBytes;
4376  b1a5 ce0023        	ldw	x,_tmp_nBytes
4377  b1a8 1f09          	ldw	(OFST+5,sp),x
4378                     ; 3018 	    pSocket->nParseLeft = tmp_nParseLeft;
4380  b1aa 1e0b          	ldw	x,(OFST+7,sp)
4381  b1ac c60022        	ld	a,_tmp_nParseLeft
4382  b1af e706          	ld	(6,x),a
4383                     ; 3019             if (break_while == 1) {
4385  b1b1 c60021        	ld	a,_break_while
4386  b1b4 a101          	cp	a,#1
4387  b1b6 260a          	jrne	L5361
4388                     ; 3023               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4390  b1b8 a604          	ld	a,#4
4391  b1ba c7005a        	ld	_saved_parsestate,a
4392  b1bd e70a          	ld	(10,x),a
4393                     ; 3024 	      break;
4395  b1bf ccb42f        	jra	L1051
4396  b1c2               L5361:
4397                     ; 3026             if (break_while == 2) {
4399  b1c2 a102          	cp	a,#2
4400  b1c4 2703ccb3e0    	jrne	L3161
4401                     ; 3029               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4403  b1c9 a605          	ld	a,#5
4404  b1cb c7005a        	ld	_saved_parsestate,a
4405  b1ce e70a          	ld	(10,x),a
4406                     ; 3030 	      break;
4408  b1d0 ccb42f        	jra	L1051
4409  b1d3               L3361:
4410                     ; 3037           else if (pSocket->ParseCmd == 'c') {
4412  b1d3 a163          	cp	a,#99
4413  b1d5 2651          	jrne	L3461
4414                     ; 3046 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4416  b1d7 725f0021      	clr	_break_while
4417                     ; 3048             tmp_pBuffer = pBuffer;
4419  b1db 1e05          	ldw	x,(OFST+1,sp)
4420  b1dd cf0025        	ldw	_tmp_pBuffer,x
4421                     ; 3049             tmp_nBytes = nBytes;
4423  b1e0 1e09          	ldw	x,(OFST+5,sp)
4424  b1e2 cf0023        	ldw	_tmp_nBytes,x
4425                     ; 3050 	    tmp_nParseLeft = pSocket->nParseLeft;
4427  b1e5 1e0b          	ldw	x,(OFST+7,sp)
4428  b1e7 e606          	ld	a,(6,x)
4429  b1e9 c70022        	ld	_tmp_nParseLeft,a
4430                     ; 3051             parse_POST_port(pSocket->ParseCmd, pSocket->ParseNum);
4432  b1ec e609          	ld	a,(9,x)
4433  b1ee 160b          	ldw	y,(OFST+7,sp)
4434  b1f0 97            	ld	xl,a
4435  b1f1 90e608        	ld	a,(8,y)
4436  b1f4 95            	ld	xh,a
4437  b1f5 cdbb02        	call	_parse_POST_port
4439                     ; 3052             pBuffer = tmp_pBuffer;
4441  b1f8 ce0025        	ldw	x,_tmp_pBuffer
4442  b1fb 1f05          	ldw	(OFST+1,sp),x
4443                     ; 3053             nBytes = tmp_nBytes;
4445  b1fd ce0023        	ldw	x,_tmp_nBytes
4446  b200 1f09          	ldw	(OFST+5,sp),x
4447                     ; 3054 	    pSocket->nParseLeft = tmp_nParseLeft;
4449  b202 1e0b          	ldw	x,(OFST+7,sp)
4450  b204 c60022        	ld	a,_tmp_nParseLeft
4451  b207 e706          	ld	(6,x),a
4452                     ; 3055             if (break_while == 1) {
4454  b209 c60021        	ld	a,_break_while
4455  b20c a101          	cp	a,#1
4456  b20e 260a          	jrne	L5461
4457                     ; 3058               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4459  b210 a604          	ld	a,#4
4460  b212 c7005a        	ld	_saved_parsestate,a
4461  b215 e70a          	ld	(10,x),a
4462                     ; 3059 	      break;
4464  b217 ccb42f        	jra	L1051
4465  b21a               L5461:
4466                     ; 3061             if (break_while == 2) {
4468  b21a a102          	cp	a,#2
4469  b21c 26a8          	jrne	L3161
4470                     ; 3064               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4472  b21e a605          	ld	a,#5
4473  b220 c7005a        	ld	_saved_parsestate,a
4474  b223 e70a          	ld	(10,x),a
4475                     ; 3065 	      break;
4477  b225 ccb42f        	jra	L1051
4478  b228               L3461:
4479                     ; 3072           else if (pSocket->ParseCmd == 'd') {
4481  b228 a164          	cp	a,#100
4482  b22a 2703ccb2ca    	jrne	L3561
4483                     ; 3078 	    alpha[0] = '-';
4485  b22f 352d001b      	mov	_alpha,#45
4486                     ; 3079 	    alpha[1] = '-';
4488  b233 352d001c      	mov	_alpha+1,#45
4489                     ; 3081 	    if (saved_postpartial_previous[0] == 'd') {
4491  b237 c60029        	ld	a,_saved_postpartial_previous
4492  b23a a164          	cp	a,#100
4493  b23c 261a          	jrne	L5561
4494                     ; 3085 	      saved_postpartial_previous[0] = '\0';
4496  b23e 725f0029      	clr	_saved_postpartial_previous
4497                     ; 3091 	      if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
4499  b242 c6002d        	ld	a,_saved_postpartial_previous+4
4500  b245 2705          	jreq	L7561
4503  b247 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
4504  b24c               L7561:
4505                     ; 3092 	      if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
4507  b24c c6002e        	ld	a,_saved_postpartial_previous+5
4508  b24f 270a          	jreq	L3661
4511  b251 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
4512  b256 2003          	jra	L3661
4513  b258               L5561:
4514                     ; 3099               clear_saved_postpartial_data(); // Clear [4] and higher
4516  b258 cdb814        	call	_clear_saved_postpartial_data
4518  b25b               L3661:
4519                     ; 3102             if (alpha[0] == '-') {
4521  b25b c6001b        	ld	a,_alpha
4522  b25e a12d          	cp	a,#45
4523  b260 261e          	jrne	L5661
4524                     ; 3103 	      alpha[0] = (uint8_t)(*pBuffer);
4526  b262 1e05          	ldw	x,(OFST+1,sp)
4527  b264 f6            	ld	a,(x)
4528  b265 c7001b        	ld	_alpha,a
4529                     ; 3104               saved_postpartial[4] = *pBuffer;
4531  b268 c70045        	ld	_saved_postpartial+4,a
4532                     ; 3105               pSocket->nParseLeft--;
4534  b26b 1e0b          	ldw	x,(OFST+7,sp)
4535  b26d 6a06          	dec	(6,x)
4536                     ; 3106               saved_nparseleft = pSocket->nParseLeft;
4538  b26f e606          	ld	a,(6,x)
4539  b271 c70059        	ld	_saved_nparseleft,a
4540                     ; 3107               pBuffer++;
4542  b274 1e05          	ldw	x,(OFST+1,sp)
4543  b276 5c            	incw	x
4544  b277 1f05          	ldw	(OFST+1,sp),x
4545                     ; 3108 	      nBytes--;
4547  b279 1e09          	ldw	x,(OFST+5,sp)
4548  b27b 5a            	decw	x
4549  b27c 1f09          	ldw	(OFST+5,sp),x
4550                     ; 3109               if (nBytes == 0) break; // Hit end of fragment. Break out of
4552  b27e 27a5          	jreq	L1051
4555  b280               L5661:
4556                     ; 3113             if (alpha[1] == '-') {
4558  b280 c6001c        	ld	a,_alpha+1
4559  b283 a12d          	cp	a,#45
4560  b285 261c          	jrne	L1761
4561                     ; 3114 	      alpha[1] = (uint8_t)(*pBuffer);
4563  b287 1e05          	ldw	x,(OFST+1,sp)
4564  b289 f6            	ld	a,(x)
4565  b28a c7001c        	ld	_alpha+1,a
4566                     ; 3115               saved_postpartial[5] = *pBuffer;
4568  b28d c70046        	ld	_saved_postpartial+5,a
4569                     ; 3116               pSocket->nParseLeft--;
4571  b290 1e0b          	ldw	x,(OFST+7,sp)
4572  b292 6a06          	dec	(6,x)
4573                     ; 3117               saved_nparseleft = pSocket->nParseLeft;
4575  b294 e606          	ld	a,(6,x)
4576  b296 c70059        	ld	_saved_nparseleft,a
4577                     ; 3118               pBuffer++;
4579  b299 1e05          	ldw	x,(OFST+1,sp)
4580  b29b 5c            	incw	x
4581  b29c 1f05          	ldw	(OFST+1,sp),x
4582                     ; 3119 	      nBytes--;
4584  b29e 1e09          	ldw	x,(OFST+5,sp)
4585  b2a0 5a            	decw	x
4586  b2a1 1f09          	ldw	(OFST+5,sp),x
4587  b2a3               L1761:
4588                     ; 3125             clear_saved_postpartial_all();
4590  b2a3 cdb800        	call	_clear_saved_postpartial_all
4592                     ; 3127             SetMAC(pSocket->ParseNum, alpha[0], alpha[1]);
4594  b2a6 3b001c        	push	_alpha+1
4595  b2a9 c6001b        	ld	a,_alpha
4596  b2ac 160c          	ldw	y,(OFST+8,sp)
4597  b2ae 97            	ld	xl,a
4598  b2af 90e609        	ld	a,(9,y)
4599  b2b2 95            	ld	xh,a
4600  b2b3 cdbd0c        	call	_SetMAC
4602  b2b6 84            	pop	a
4603                     ; 3129             if (nBytes == 0) {
4605  b2b7 1e09          	ldw	x,(OFST+5,sp)
4606  b2b9 2703ccb3e0    	jrne	L3161
4607                     ; 3132 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4609  b2be a605          	ld	a,#5
4610  b2c0 c7005a        	ld	_saved_parsestate,a
4611  b2c3 1e0b          	ldw	x,(OFST+7,sp)
4612  b2c5 e70a          	ld	(10,x),a
4613                     ; 3133 	      break;
4615  b2c7 ccb42f        	jra	L1051
4616  b2ca               L3561:
4617                     ; 3140 	  else if (pSocket->ParseCmd == 'g') {
4619  b2ca a167          	cp	a,#103
4620  b2cc 2703ccb3d3    	jrne	L7761
4621                     ; 3151             for (i=0; i<6; i++) alpha[i] = '-';
4623  b2d1 4f            	clr	a
4624  b2d2 6b04          	ld	(OFST+0,sp),a
4626  b2d4               L1071:
4629  b2d4 5f            	clrw	x
4630  b2d5 97            	ld	xl,a
4631  b2d6 a62d          	ld	a,#45
4632  b2d8 d7001b        	ld	(_alpha,x),a
4635  b2db 0c04          	inc	(OFST+0,sp)
4639  b2dd 7b04          	ld	a,(OFST+0,sp)
4640  b2df a106          	cp	a,#6
4641  b2e1 25f1          	jrult	L1071
4642                     ; 3153 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4644  b2e3 725f0021      	clr	_break_while
4645                     ; 3156 	    if (saved_postpartial_previous[0] == 'g') {
4647  b2e7 c60029        	ld	a,_saved_postpartial_previous
4648  b2ea a167          	cp	a,#103
4649  b2ec 2621          	jrne	L7071
4650                     ; 3160 	      saved_postpartial_previous[0] = '\0';
4652  b2ee 725f0029      	clr	_saved_postpartial_previous
4653                     ; 3166               for (i=0; i<6; i++) {
4655  b2f2 4f            	clr	a
4656  b2f3 6b04          	ld	(OFST+0,sp),a
4658  b2f5               L1171:
4659                     ; 3167                 if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
4661  b2f5 5f            	clrw	x
4662  b2f6 97            	ld	xl,a
4663  b2f7 724d002d      	tnz	(_saved_postpartial_previous+4,x)
4664  b2fb 2708          	jreq	L7171
4667  b2fd 5f            	clrw	x
4668  b2fe 97            	ld	xl,a
4669  b2ff d6002d        	ld	a,(_saved_postpartial_previous+4,x)
4670  b302 d7001b        	ld	(_alpha,x),a
4671  b305               L7171:
4672                     ; 3166               for (i=0; i<6; i++) {
4674  b305 0c04          	inc	(OFST+0,sp)
4678  b307 7b04          	ld	a,(OFST+0,sp)
4679  b309 a106          	cp	a,#6
4680  b30b 25e8          	jrult	L1171
4682  b30d 2003          	jra	L1271
4683  b30f               L7071:
4684                     ; 3175               clear_saved_postpartial_data(); // Clear [4] and higher
4686  b30f cdb814        	call	_clear_saved_postpartial_data
4688  b312               L1271:
4689                     ; 3178             for (i=0; i<6; i++) {
4691  b312 4f            	clr	a
4692  b313 6b04          	ld	(OFST+0,sp),a
4694  b315               L3271:
4695                     ; 3184               if (alpha[i] == '-') {
4697  b315 5f            	clrw	x
4698  b316 97            	ld	xl,a
4699  b317 d6001b        	ld	a,(_alpha,x)
4700  b31a a12d          	cp	a,#45
4701  b31c 2636          	jrne	L1371
4702                     ; 3185 	        alpha[i] = (uint8_t)(*pBuffer);
4704  b31e 7b04          	ld	a,(OFST+0,sp)
4705  b320 5f            	clrw	x
4706  b321 1605          	ldw	y,(OFST+1,sp)
4707  b323 97            	ld	xl,a
4708  b324 90f6          	ld	a,(y)
4709  b326 d7001b        	ld	(_alpha,x),a
4710                     ; 3186                 saved_postpartial[i+4] = *pBuffer;
4712  b329 5f            	clrw	x
4713  b32a 7b04          	ld	a,(OFST+0,sp)
4714  b32c 97            	ld	xl,a
4715  b32d 90f6          	ld	a,(y)
4716  b32f d70045        	ld	(_saved_postpartial+4,x),a
4717                     ; 3187                 pSocket->nParseLeft--;
4719  b332 1e0b          	ldw	x,(OFST+7,sp)
4720  b334 6a06          	dec	(6,x)
4721                     ; 3188                 saved_nparseleft = pSocket->nParseLeft;
4723  b336 e606          	ld	a,(6,x)
4724  b338 c70059        	ld	_saved_nparseleft,a
4725                     ; 3189                 pBuffer++;
4727  b33b 93            	ldw	x,y
4728  b33c 5c            	incw	x
4729  b33d 1f05          	ldw	(OFST+1,sp),x
4730                     ; 3190 	        nBytes--;
4732  b33f 1e09          	ldw	x,(OFST+5,sp)
4733  b341 5a            	decw	x
4734  b342 1f09          	ldw	(OFST+5,sp),x
4735                     ; 3191                 if (i != 5 && nBytes == 0) {
4737  b344 7b04          	ld	a,(OFST+0,sp)
4738  b346 a105          	cp	a,#5
4739  b348 270a          	jreq	L1371
4741  b34a 1e09          	ldw	x,(OFST+5,sp)
4742  b34c 2606          	jrne	L1371
4743                     ; 3192 		  break_while = 1; // Hit end of fragment. Break out of
4745  b34e 35010021      	mov	_break_while,#1
4746                     ; 3194 		  break; // Break out of for() loop
4748  b352 2008          	jra	L7271
4749  b354               L1371:
4750                     ; 3178             for (i=0; i<6; i++) {
4752  b354 0c04          	inc	(OFST+0,sp)
4756  b356 7b04          	ld	a,(OFST+0,sp)
4757  b358 a106          	cp	a,#6
4758  b35a 25b9          	jrult	L3271
4759  b35c               L7271:
4760                     ; 3198 	    if (break_while == 1) {
4762  b35c c60021        	ld	a,_break_while
4763  b35f 4a            	dec	a
4764  b360 2603ccb42f    	jreq	L1051
4765                     ; 3200 	      break;
4767                     ; 3206             clear_saved_postpartial_all();
4769  b365 cdb800        	call	_clear_saved_postpartial_all
4771                     ; 3209 	    if (alpha[0] != '0' && alpha[0] != '1') alpha[0] = '0';
4773  b368 c6001b        	ld	a,_alpha
4774  b36b a130          	cp	a,#48
4775  b36d 2708          	jreq	L7371
4777  b36f a131          	cp	a,#49
4778  b371 2704          	jreq	L7371
4781  b373 3530001b      	mov	_alpha,#48
4782  b377               L7371:
4783                     ; 3210 	    if (alpha[1] != '0' && alpha[1] != '1') alpha[1] = '0';
4785  b377 c6001c        	ld	a,_alpha+1
4786  b37a a130          	cp	a,#48
4787  b37c 2708          	jreq	L1471
4789  b37e a131          	cp	a,#49
4790  b380 2704          	jreq	L1471
4793  b382 3530001c      	mov	_alpha+1,#48
4794  b386               L1471:
4795                     ; 3211 	    if (alpha[2] != '0' && alpha[2] != '1' && alpha[2] != '2') alpha[2] = '2';
4797  b386 c6001d        	ld	a,_alpha+2
4798  b389 a130          	cp	a,#48
4799  b38b 270c          	jreq	L3471
4801  b38d a131          	cp	a,#49
4802  b38f 2708          	jreq	L3471
4804  b391 a132          	cp	a,#50
4805  b393 2704          	jreq	L3471
4808  b395 3532001d      	mov	_alpha+2,#50
4809  b399               L3471:
4810                     ; 3212 	    if (alpha[3] != '0' && alpha[3] != '1') alpha[3] = '0';
4812  b399 c6001e        	ld	a,_alpha+3
4813  b39c a130          	cp	a,#48
4814  b39e 2708          	jreq	L5471
4816  b3a0 a131          	cp	a,#49
4817  b3a2 2704          	jreq	L5471
4820  b3a4 3530001e      	mov	_alpha+3,#48
4821  b3a8               L5471:
4822                     ; 3214 	    Pending_config_settings[0] = (uint8_t)alpha[0];
4824  b3a8 55001b011f    	mov	_Pending_config_settings,_alpha
4825                     ; 3215             Pending_config_settings[1] = (uint8_t)alpha[1];
4827  b3ad 55001c0120    	mov	_Pending_config_settings+1,_alpha+1
4828                     ; 3216             Pending_config_settings[2] = (uint8_t)alpha[2];
4830  b3b2 55001d0121    	mov	_Pending_config_settings+2,_alpha+2
4831                     ; 3217             Pending_config_settings[3] = (uint8_t)alpha[3];
4833  b3b7 55001e0122    	mov	_Pending_config_settings+3,_alpha+3
4834                     ; 3218             Pending_config_settings[4] = '0';
4836  b3bc 35300123      	mov	_Pending_config_settings+4,#48
4837                     ; 3219             Pending_config_settings[5] = '0';
4839  b3c0 35300124      	mov	_Pending_config_settings+5,#48
4840                     ; 3221             if (nBytes == 0) {
4842  b3c4 1e09          	ldw	x,(OFST+5,sp)
4843  b3c6 2618          	jrne	L3161
4844                     ; 3224 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4846  b3c8 a605          	ld	a,#5
4847  b3ca c7005a        	ld	_saved_parsestate,a
4848  b3cd 1e0b          	ldw	x,(OFST+7,sp)
4849  b3cf e70a          	ld	(10,x),a
4850                     ; 3225 	      break;
4852  b3d1 205c          	jra	L1051
4853  b3d3               L7761:
4854                     ; 3232 	  else if (pSocket->ParseCmd == 'z') {
4856  b3d3 a17a          	cp	a,#122
4857  b3d5 2609          	jrne	L3161
4858                     ; 3257 	    nBytes = 0;
4860  b3d7 5f            	clrw	x
4861  b3d8 1f09          	ldw	(OFST+5,sp),x
4862                     ; 3258 	    pSocket->nParseLeft = 0;
4864  b3da 1e0b          	ldw	x,(OFST+7,sp)
4865  b3dc 6f06          	clr	(6,x)
4866                     ; 3259             break; // Break out of the while loop. We're done with POST.
4868  b3de 204f          	jra	L1051
4869  b3e0               L3161:
4870                     ; 3270           pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4872  b3e0 a605          	ld	a,#5
4873  b3e2 c7005a        	ld	_saved_parsestate,a
4874  b3e5 1e0b          	ldw	x,(OFST+7,sp)
4875  b3e7 e70a          	ld	(10,x),a
4876                     ; 3272           if (pSocket->nParseLeft < 30) {
4878  b3e9 e606          	ld	a,(6,x)
4879  b3eb a11e          	cp	a,#30
4880  b3ed 2503ccafa6    	jruge	L7741
4881                     ; 3287 	    if (pSocket->nParseLeftAddl > 0) {
4883  b3f2 6d07          	tnz	(7,x)
4884  b3f4 27f9          	jreq	L7741
4885                     ; 3288 	      pSocket->nParseLeft += pSocket->nParseLeftAddl;
4887  b3f6 eb07          	add	a,(7,x)
4888  b3f8 e706          	ld	(6,x),a
4889                     ; 3289 	      pSocket->nParseLeftAddl = 0;
4891  b3fa 6f07          	clr	(7,x)
4892                     ; 3290 	      saved_nparseleft = pSocket->nParseLeft;
4894  b3fc c70059        	ld	_saved_nparseleft,a
4895  b3ff ccafa6        	jra	L7741
4896  b402               L7751:
4897                     ; 3295         else if (pSocket->ParseState == PARSE_DELIM) {
4899  b402 a105          	cp	a,#5
4900  b404 26f9          	jrne	L7741
4901                     ; 3296           if (pSocket->nParseLeft > 0) {
4903  b406 e606          	ld	a,(6,x)
4904  b408 2720          	jreq	L5671
4905                     ; 3299             pSocket->ParseState = saved_parsestate = PARSE_CMD;
4907  b40a 725f005a      	clr	_saved_parsestate
4908  b40e 6f0a          	clr	(10,x)
4909                     ; 3300             pSocket->nParseLeft--;
4911  b410 6a06          	dec	(6,x)
4912                     ; 3301             saved_nparseleft = pSocket->nParseLeft;
4914  b412 e606          	ld	a,(6,x)
4915  b414 c70059        	ld	_saved_nparseleft,a
4916                     ; 3302             pBuffer++;
4918  b417 1e05          	ldw	x,(OFST+1,sp)
4919  b419 5c            	incw	x
4920  b41a 1f05          	ldw	(OFST+1,sp),x
4921                     ; 3303 	    nBytes--;
4923  b41c 1e09          	ldw	x,(OFST+5,sp)
4924  b41e 5a            	decw	x
4925  b41f 1f09          	ldw	(OFST+5,sp),x
4926                     ; 3305 	    clear_saved_postpartial_all();
4928  b421 cdb800        	call	_clear_saved_postpartial_all
4930                     ; 3309             if (nBytes == 0) {
4932  b424 1e09          	ldw	x,(OFST+5,sp)
4933  b426 26d7          	jrne	L7741
4934                     ; 3310 	      break; // Hit end of fragment but still have more to parse in
4936  b428 2005          	jra	L1051
4937  b42a               L5671:
4938                     ; 3320             pSocket->nParseLeft = 0; // End the parsing
4940  b42a e706          	ld	(6,x),a
4941                     ; 3321 	    nBytes = 0;
4943  b42c 5f            	clrw	x
4944  b42d 1f09          	ldw	(OFST+5,sp),x
4945                     ; 3322 	    break; // Exit parsing
4946  b42f               L1051:
4947                     ; 3349       if (pSocket->nParseLeft == 0) {
4949  b42f 1e0b          	ldw	x,(OFST+7,sp)
4950  b431 e606          	ld	a,(6,x)
4951  b433 264e          	jrne	L3771
4952                     ; 3352 	saved_nstate = STATE_NULL;
4954  b435 357f005b      	mov	_saved_nstate,#127
4955                     ; 3353 	saved_parsestate = PARSE_CMD;
4957  b439 c7005a        	ld	_saved_parsestate,a
4958                     ; 3354         saved_nparseleft = 0;
4960  b43c c70059        	ld	_saved_nparseleft,a
4961                     ; 3355         saved_newlines = 0;
4963  b43f c70028        	ld	_saved_newlines,a
4964                     ; 3356 	for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i] = '\0';
4966  b442 6b04          	ld	(OFST+0,sp),a
4968  b444               L5771:
4971  b444 5f            	clrw	x
4972  b445 97            	ld	xl,a
4973  b446 724f0041      	clr	(_saved_postpartial,x)
4974  b44a 5f            	clrw	x
4975  b44b 97            	ld	xl,a
4976  b44c 724f0029      	clr	(_saved_postpartial_previous,x)
4979  b450 0c04          	inc	(OFST+0,sp)
4983  b452 7b04          	ld	a,(OFST+0,sp)
4984  b454 a118          	cp	a,#24
4985  b456 25ec          	jrult	L5771
4986                     ; 3362 	parse_complete = 1;
4988  b458 35010106      	mov	_parse_complete,#1
4989                     ; 3363 	pSocket->nState = STATE_SENDHEADER;
4991  b45c 1e0b          	ldw	x,(OFST+7,sp)
4992  b45e a60b          	ld	a,#11
4993  b460 f7            	ld	(x),a
4994                     ; 3375         if (current_webpage == WEBPAGE_IOCONTROL) {
4996  b461 c6001a        	ld	a,_current_webpage
4997  b464 260c          	jrne	L3002
4998                     ; 3376           pSocket->pData = g_HtmlPageIOControl;
5000  b466 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5001  b46a ef01          	ldw	(1,x),y
5002                     ; 3377           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5004  b46c 90ae0c06      	ldw	y,#3078
5005  b470 ef03          	ldw	(3,x),y
5006  b472               L3002:
5007                     ; 3379         if (current_webpage == WEBPAGE_CONFIGURATION) {
5009  b472 4a            	dec	a
5010  b473 2612          	jrne	L5741
5011                     ; 3380           pSocket->pData = g_HtmlPageConfiguration;
5013  b475 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5014  b479 ef01          	ldw	(1,x),y
5015                     ; 3381           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5017  b47b 90ae0c5c      	ldw	y,#3164
5018  b47f ef03          	ldw	(3,x),y
5019  b481 2004          	jra	L5741
5020  b483               L3771:
5021                     ; 3401 	uip_len = 0;
5023  b483 5f            	clrw	x
5024  b484 cf0373        	ldw	_uip_len,x
5025  b487               L5741:
5026                     ; 3405     if (pSocket->nState == STATE_PARSEGET) {
5028  b487 1e0b          	ldw	x,(OFST+7,sp)
5029  b489 f6            	ld	a,(x)
5030  b48a a10d          	cp	a,#13
5031  b48c 2703ccb714    	jrne	L1102
5033  b491 ccb70d        	jra	L5102
5034  b494               L3102:
5035                     ; 3434         if (pSocket->ParseState == PARSE_SLASH1) {
5037  b494 1e0b          	ldw	x,(OFST+7,sp)
5038  b496 e60a          	ld	a,(10,x)
5039  b498 a106          	cp	a,#6
5040  b49a 263c          	jrne	L1202
5041                     ; 3437           pSocket->ParseCmd = *pBuffer;
5043  b49c 1e05          	ldw	x,(OFST+1,sp)
5044  b49e f6            	ld	a,(x)
5045  b49f 1e0b          	ldw	x,(OFST+7,sp)
5046  b4a1 e708          	ld	(8,x),a
5047                     ; 3438           pSocket->nParseLeft--;
5049  b4a3 6a06          	dec	(6,x)
5050                     ; 3439           pBuffer++;
5052  b4a5 1e05          	ldw	x,(OFST+1,sp)
5053  b4a7 5c            	incw	x
5054  b4a8 1f05          	ldw	(OFST+1,sp),x
5055                     ; 3440 	  nBytes--;
5057  b4aa 1e09          	ldw	x,(OFST+5,sp)
5058  b4ac 5a            	decw	x
5059  b4ad 1f09          	ldw	(OFST+5,sp),x
5060                     ; 3441 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5062  b4af 1e0b          	ldw	x,(OFST+7,sp)
5063  b4b1 e608          	ld	a,(8,x)
5064  b4b3 a12f          	cp	a,#47
5065  b4b5 2605          	jrne	L3202
5066                     ; 3442 	    pSocket->ParseState = PARSE_NUM10;
5068  b4b7 a601          	ld	a,#1
5070  b4b9 ccb552        	jp	LC022
5071  b4bc               L3202:
5072                     ; 3446 	    current_webpage = WEBPAGE_IOCONTROL;
5074  b4bc 725f001a      	clr	_current_webpage
5075                     ; 3447             pSocket->pData = g_HtmlPageIOControl;
5077  b4c0 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5078  b4c4 ef01          	ldw	(1,x),y
5079                     ; 3448             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5081  b4c6 90ae0c06      	ldw	y,#3078
5082  b4ca ef03          	ldw	(3,x),y
5083                     ; 3449             pSocket->nParseLeft = 0; // This will cause the while() to exit
5085  b4cc 6f06          	clr	(6,x)
5086                     ; 3451             pSocket->nState = STATE_CONNECTED;
5088  b4ce 7f            	clr	(x)
5089                     ; 3452             pSocket->nPrevBytes = 0xFFFF;
5091  b4cf 90aeffff      	ldw	y,#65535
5092  b4d3 ef0b          	ldw	(11,x),y
5093  b4d5 ccb6fc        	jra	L7202
5094  b4d8               L1202:
5095                     ; 3456         else if (pSocket->ParseState == PARSE_NUM10) {
5097  b4d8 a101          	cp	a,#1
5098  b4da 2640          	jrne	L1302
5099                     ; 3461 	  if (*pBuffer == ' ') {
5101  b4dc 1e05          	ldw	x,(OFST+1,sp)
5102  b4de f6            	ld	a,(x)
5103  b4df a120          	cp	a,#32
5104  b4e1 261e          	jrne	L3302
5105                     ; 3462 	    current_webpage = WEBPAGE_IOCONTROL;
5107  b4e3 725f001a      	clr	_current_webpage
5108                     ; 3463             pSocket->pData = g_HtmlPageIOControl;
5110  b4e7 1e0b          	ldw	x,(OFST+7,sp)
5111  b4e9 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5112  b4ed ef01          	ldw	(1,x),y
5113                     ; 3464             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5115  b4ef 90ae0c06      	ldw	y,#3078
5116  b4f3 ef03          	ldw	(3,x),y
5117                     ; 3465             pSocket->nParseLeft = 0;
5119  b4f5 6f06          	clr	(6,x)
5120                     ; 3467             pSocket->nState = STATE_CONNECTED;
5122  b4f7 7f            	clr	(x)
5123                     ; 3468             pSocket->nPrevBytes = 0xFFFF;
5125  b4f8 90aeffff      	ldw	y,#65535
5126  b4fc ef0b          	ldw	(11,x),y
5128  b4fe ccb6fc        	jra	L7202
5129  b501               L3302:
5130                     ; 3472 	  else if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5132  b501 a130          	cp	a,#48
5133  b503 2547          	jrult	L7402
5135  b505 a13a          	cp	a,#58
5136  b507 2443          	jruge	L7402
5137                     ; 3474             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5139  b509 97            	ld	xl,a
5140  b50a a60a          	ld	a,#10
5141  b50c 42            	mul	x,a
5142  b50d 9f            	ld	a,xl
5143  b50e 1e0b          	ldw	x,(OFST+7,sp)
5144  b510 a0e0          	sub	a,#224
5145  b512 e709          	ld	(9,x),a
5146                     ; 3475 	    pSocket->ParseState = PARSE_NUM1;
5148  b514 a602          	ld	a,#2
5149  b516 e70a          	ld	(10,x),a
5150                     ; 3476             pSocket->nParseLeft--;
5152  b518 6a06          	dec	(6,x)
5153                     ; 3477             pBuffer++;
5154                     ; 3478 	    nBytes--;
5156  b51a 2023          	jp	LC024
5157                     ; 3483             pSocket->nParseLeft = 0;
5158                     ; 3484             pSocket->ParseState = PARSE_FAIL;
5159  b51c               L1302:
5160                     ; 3489         else if (pSocket->ParseState == PARSE_NUM1) {
5162  b51c a102          	cp	a,#2
5163  b51e 2637          	jrne	L5402
5164                     ; 3490 	  if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5166  b520 1e05          	ldw	x,(OFST+1,sp)
5167  b522 f6            	ld	a,(x)
5168  b523 a130          	cp	a,#48
5169  b525 2525          	jrult	L7402
5171  b527 a13a          	cp	a,#58
5172  b529 2421          	jruge	L7402
5173                     ; 3492             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5175  b52b 1605          	ldw	y,(OFST+1,sp)
5176  b52d 1e0b          	ldw	x,(OFST+7,sp)
5177  b52f 90f6          	ld	a,(y)
5178  b531 a030          	sub	a,#48
5179  b533 eb09          	add	a,(9,x)
5180  b535 e709          	ld	(9,x),a
5181                     ; 3493             pSocket->ParseState = PARSE_VAL;
5183  b537 a604          	ld	a,#4
5184  b539 e70a          	ld	(10,x),a
5185                     ; 3494             pSocket->nParseLeft = 1; // Set to 1 so PARSE_VAL will be called
5187  b53b a601          	ld	a,#1
5188  b53d e706          	ld	(6,x),a
5189                     ; 3495             pBuffer++;
5191                     ; 3496 	    nBytes--;
5193  b53f               LC024:
5195  b53f 1e05          	ldw	x,(OFST+1,sp)
5196  b541 5c            	incw	x
5197  b542 1f05          	ldw	(OFST+1,sp),x
5199  b544 1e09          	ldw	x,(OFST+5,sp)
5200  b546 5a            	decw	x
5201  b547 1f09          	ldw	(OFST+5,sp),x
5203  b549 ccb6fc        	jra	L7202
5204  b54c               L7402:
5205                     ; 3501             pSocket->nParseLeft = 0;
5207                     ; 3502             pSocket->ParseState = PARSE_FAIL;
5210  b54c 1e0b          	ldw	x,(OFST+7,sp)
5212  b54e a607          	ld	a,#7
5213  b550 6f06          	clr	(6,x)
5214  b552               LC022:
5215  b552 e70a          	ld	(10,x),a
5216  b554 ccb6fc        	jra	L7202
5217  b557               L5402:
5218                     ; 3506         else if (pSocket->ParseState == PARSE_VAL) {
5220  b557 a104          	cp	a,#4
5221  b559 26f9          	jrne	L7202
5222                     ; 3573           switch(pSocket->ParseNum)
5224  b55b e609          	ld	a,(9,x)
5226                     ; 3774 	      break;
5227  b55d a110          	cp	a,#16
5228  b55f 2407          	jruge	L422
5229  b561 5f            	clrw	x
5230  b562 97            	ld	xl,a
5231  b563 58            	sllw	x
5232  b564 de9d89        	ldw	x,(L622,x)
5233  b567 fc            	jp	(x)
5234  b568               L422:
5235  b568 a037          	sub	a,#55
5236  b56a 2603ccb65c    	jreq	L7311
5237  b56f 4a            	dec	a
5238  b570 2603ccb667    	jreq	L1411
5239  b575 a004          	sub	a,#4
5240  b577 2603ccb671    	jreq	L3411
5241  b57c 4a            	dec	a
5242  b57d 2603ccb680    	jreq	L5411
5243  b582 a004          	sub	a,#4
5244  b584 2603ccb690    	jreq	L7411
5245  b589 4a            	dec	a
5246  b58a 2603ccb69b    	jreq	L1511
5247  b58f 4a            	dec	a
5248  b590 2603ccb6ae    	jreq	L3511
5249  b595 a018          	sub	a,#24
5250  b597 2603ccb6c3    	jreq	L5511
5251  b59c a007          	sub	a,#7
5252  b59e 2603ccb6c9    	jreq	L7511
5253  b5a3 4a            	dec	a
5254  b5a4 2603ccb6d5    	jreq	L1611
5255  b5a9 ccb6e1        	jra	L3611
5256  b5ac               L7701:
5257                     ; 3623 	    case 0:  IO_8to1 &= (uint8_t)(~0x01);  parse_complete = 1; break; // Relay-01 OFF
5259  b5ac 7211016d      	bres	_IO_8to1,#0
5262  b5b0 35010106      	mov	_parse_complete,#1
5265  b5b4 ccb6f8        	jra	L1602
5266  b5b7               L1011:
5267                     ; 3624 	    case 1:  IO_8to1 |= (uint8_t)0x01;     parse_complete = 1; break; // Relay-01 ON
5269  b5b7 7210016d      	bset	_IO_8to1,#0
5272  b5bb 35010106      	mov	_parse_complete,#1
5275  b5bf ccb6f8        	jra	L1602
5276  b5c2               L3011:
5277                     ; 3625 	    case 2:  IO_8to1 &= (uint8_t)(~0x02);  parse_complete = 1; break; // Relay-02 OFF
5279  b5c2 7213016d      	bres	_IO_8to1,#1
5282  b5c6 35010106      	mov	_parse_complete,#1
5285  b5ca ccb6f8        	jra	L1602
5286  b5cd               L5011:
5287                     ; 3626 	    case 3:  IO_8to1 |= (uint8_t)0x02;     parse_complete = 1; break; // Relay-02 ON
5289  b5cd 7212016d      	bset	_IO_8to1,#1
5292  b5d1 35010106      	mov	_parse_complete,#1
5295  b5d5 ccb6f8        	jra	L1602
5296  b5d8               L7011:
5297                     ; 3627 	    case 4:  IO_8to1 &= (uint8_t)(~0x04);  parse_complete = 1; break; // Relay-03 OFF
5299  b5d8 7215016d      	bres	_IO_8to1,#2
5302  b5dc 35010106      	mov	_parse_complete,#1
5305  b5e0 ccb6f8        	jra	L1602
5306  b5e3               L1111:
5307                     ; 3628 	    case 5:  IO_8to1 |= (uint8_t)0x04;     parse_complete = 1; break; // Relay-03 ON
5309  b5e3 7214016d      	bset	_IO_8to1,#2
5312  b5e7 35010106      	mov	_parse_complete,#1
5315  b5eb ccb6f8        	jra	L1602
5316  b5ee               L3111:
5317                     ; 3629 	    case 6:  IO_8to1 &= (uint8_t)(~0x08);  parse_complete = 1; break; // Relay-04 OFF
5319  b5ee 7217016d      	bres	_IO_8to1,#3
5322  b5f2 35010106      	mov	_parse_complete,#1
5325  b5f6 ccb6f8        	jra	L1602
5326  b5f9               L5111:
5327                     ; 3630 	    case 7:  IO_8to1 |= (uint8_t)0x08;     parse_complete = 1; break; // Relay-04 ON
5329  b5f9 7216016d      	bset	_IO_8to1,#3
5332  b5fd 35010106      	mov	_parse_complete,#1
5335  b601 ccb6f8        	jra	L1602
5336  b604               L7111:
5337                     ; 3631 	    case 8:  IO_8to1 &= (uint8_t)(~0x10);  parse_complete = 1; break; // Relay-05 OFF
5339  b604 7219016d      	bres	_IO_8to1,#4
5342  b608 35010106      	mov	_parse_complete,#1
5345  b60c ccb6f8        	jra	L1602
5346  b60f               L1211:
5347                     ; 3632 	    case 9:  IO_8to1 |= (uint8_t)0x10;     parse_complete = 1; break; // Relay-05 ON
5349  b60f 7218016d      	bset	_IO_8to1,#4
5352  b613 35010106      	mov	_parse_complete,#1
5355  b617 ccb6f8        	jra	L1602
5356  b61a               L3211:
5357                     ; 3633 	    case 10: IO_8to1 &= (uint8_t)(~0x20);  parse_complete = 1; break; // Relay-06 OFF
5359  b61a 721b016d      	bres	_IO_8to1,#5
5362  b61e 35010106      	mov	_parse_complete,#1
5365  b622 ccb6f8        	jra	L1602
5366  b625               L5211:
5367                     ; 3634 	    case 11: IO_8to1 |= (uint8_t)0x20;     parse_complete = 1; break; // Relay-06 ON
5369  b625 721a016d      	bset	_IO_8to1,#5
5372  b629 35010106      	mov	_parse_complete,#1
5375  b62d ccb6f8        	jra	L1602
5376  b630               L7211:
5377                     ; 3635 	    case 12: IO_8to1 &= (uint8_t)(~0x40);  parse_complete = 1; break; // Relay-07 OFF
5379  b630 721d016d      	bres	_IO_8to1,#6
5382  b634 35010106      	mov	_parse_complete,#1
5385  b638 ccb6f8        	jra	L1602
5386  b63b               L1311:
5387                     ; 3636 	    case 13: IO_8to1 |= (uint8_t)0x40;     parse_complete = 1; break; // Relay-07 ON
5389  b63b 721c016d      	bset	_IO_8to1,#6
5392  b63f 35010106      	mov	_parse_complete,#1
5395  b643 ccb6f8        	jra	L1602
5396  b646               L3311:
5397                     ; 3637 	    case 14: IO_8to1 &= (uint8_t)(~0x80);  parse_complete = 1; break; // Relay-08 OFF
5399  b646 721f016d      	bres	_IO_8to1,#7
5402  b64a 35010106      	mov	_parse_complete,#1
5405  b64e ccb6f8        	jra	L1602
5406  b651               L5311:
5407                     ; 3638 	    case 15: IO_8to1 |= (uint8_t)0x80;     parse_complete = 1; break; // Relay-08 ON
5409  b651 721e016d      	bset	_IO_8to1,#7
5412  b655 35010106      	mov	_parse_complete,#1
5415  b659 ccb6f8        	jra	L1602
5416  b65c               L7311:
5417                     ; 3640 	    case 55:
5417                     ; 3641   	      IO_8to1 = (uint8_t)0xff; // Relays 1-8 ON
5419  b65c 35ff016d      	mov	_IO_8to1,#255
5420                     ; 3642 	      parse_complete = 1; 
5422  b660 35010106      	mov	_parse_complete,#1
5423                     ; 3643 	      break;
5425  b664 ccb6f8        	jra	L1602
5426  b667               L1411:
5427                     ; 3645 	    case 56:
5427                     ; 3646               IO_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
5429  b667 c7016d        	ld	_IO_8to1,a
5430                     ; 3647 	      parse_complete = 1; 
5432  b66a 35010106      	mov	_parse_complete,#1
5433                     ; 3648 	      break;
5435  b66e ccb6f8        	jra	L1602
5436  b671               L3411:
5437                     ; 3655 	    case 60: // Show IO Control page
5437                     ; 3656 	      current_webpage = WEBPAGE_IOCONTROL;
5439  b671 c7001a        	ld	_current_webpage,a
5440                     ; 3657               pSocket->pData = g_HtmlPageIOControl;
5442  b674 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5443  b678 ef01          	ldw	(1,x),y
5444                     ; 3658               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5446  b67a 90ae0c06      	ldw	y,#3078
5447                     ; 3659               pSocket->nState = STATE_CONNECTED;
5448                     ; 3660               pSocket->nPrevBytes = 0xFFFF;
5449                     ; 3661 	      break;
5451  b67e 2029          	jp	LC021
5452  b680               L5411:
5453                     ; 3663 	    case 61: // Show Configuration page
5453                     ; 3664 	      current_webpage = WEBPAGE_CONFIGURATION;
5455  b680 3501001a      	mov	_current_webpage,#1
5456                     ; 3665               pSocket->pData = g_HtmlPageConfiguration;
5458  b684 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5459  b688 ef01          	ldw	(1,x),y
5460                     ; 3666               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5462  b68a 90ae0c5c      	ldw	y,#3164
5463                     ; 3667               pSocket->nState = STATE_CONNECTED;
5464                     ; 3668               pSocket->nPrevBytes = 0xFFFF;
5465                     ; 3669 	      break;
5467  b68e 2019          	jp	LC021
5468  b690               L7411:
5469                     ; 3689 	    case 65: // Flash LED for diagnostics
5469                     ; 3690 	      // XXXXXXXXXXXXXXXXXXXXXX
5469                     ; 3691 	      // XXXXXXXXXXXXXXXXXXXXXX
5469                     ; 3692 	      // XXXXXXXXXXXXXXXXXXXXXX
5469                     ; 3693 	      debugflash();
5471  b690 cdcfab        	call	_debugflash
5473                     ; 3694 	      debugflash();
5475  b693 cdcfab        	call	_debugflash
5477                     ; 3695 	      debugflash();
5479  b696 cdcfab        	call	_debugflash
5481                     ; 3699 	      break;
5483  b699 205d          	jra	L1602
5484  b69b               L1511:
5485                     ; 3702             case 66: // Show statistics page
5485                     ; 3703 	      current_webpage = WEBPAGE_STATS;
5487  b69b 3505001a      	mov	_current_webpage,#5
5488                     ; 3704               pSocket->pData = g_HtmlPageStats;
5490  b69f 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5491  b6a3 ef01          	ldw	(1,x),y
5492                     ; 3705               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5494  b6a5 90ae0175      	ldw	y,#373
5495                     ; 3706               pSocket->nState = STATE_CONNECTED;
5497  b6a9               LC021:
5498  b6a9 ef03          	ldw	(3,x),y
5503  b6ab f7            	ld	(x),a
5504                     ; 3707               pSocket->nPrevBytes = 0xFFFF;
5505                     ; 3708 	      break;
5507  b6ac 2044          	jp	LC019
5508  b6ae               L3511:
5509                     ; 3710             case 67: // Clear statistics
5509                     ; 3711 	      uip_init_stats();
5511  b6ae cde8af        	call	_uip_init_stats
5513                     ; 3726 	      current_webpage = WEBPAGE_STATS;
5515  b6b1 3505001a      	mov	_current_webpage,#5
5516                     ; 3727               pSocket->pData = g_HtmlPageStats;
5518  b6b5 1e0b          	ldw	x,(OFST+7,sp)
5519  b6b7 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5520  b6bb ef01          	ldw	(1,x),y
5521                     ; 3728               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5523  b6bd 90ae0175      	ldw	y,#373
5524                     ; 3729               pSocket->nState = STATE_CONNECTED;
5525                     ; 3730               pSocket->nPrevBytes = 0xFFFF;
5526                     ; 3731 	      break;
5528  b6c1 202c          	jp	LC020
5529  b6c3               L5511:
5530                     ; 3734 	    case 91: // Reboot
5530                     ; 3735 	      user_reboot_request = 1;
5532  b6c3 3501010a      	mov	_user_reboot_request,#1
5533                     ; 3736 	      break;
5535  b6c7 202f          	jra	L1602
5536  b6c9               L7511:
5537                     ; 3738             case 98: // Show Very Short Form IO state page
5537                     ; 3739 	      // Normally when a page is transmitted the "current_webpage" is
5537                     ; 3740 	      // updated to reflect the page just transmitted. This is not
5537                     ; 3741 	      // done for this case as the page is very short (only requires
5537                     ; 3742 	      // one packet to send) and not changing the current_webpage
5537                     ; 3743 	      // pointer prevents "page interference" between normal browser
5537                     ; 3744 	      // activity and the automated functions that normally use this
5537                     ; 3745 	      // page.
5537                     ; 3746 	      // current_webpage = WEBPAGE_SSTATE;
5537                     ; 3747               pSocket->pData = g_HtmlPageSstate;
5539  b6c9 90ae9ae9      	ldw	y,#L32_g_HtmlPageSstate
5540  b6cd ef01          	ldw	(1,x),y
5541                     ; 3748               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
5543  b6cf 90ae0004      	ldw	y,#4
5544                     ; 3749               pSocket->nState = STATE_CONNECTED;
5545                     ; 3750               pSocket->nPrevBytes = 0xFFFF;
5546                     ; 3751 	      break;
5548  b6d3 20d4          	jp	LC021
5549  b6d5               L1611:
5550                     ; 3753             case 99: // Show Short Form IO state page
5550                     ; 3754 	      // Normally when a page is transmitted the "current_webpage" is
5550                     ; 3755 	      // updated to reflect the page just transmitted. This is not
5550                     ; 3756 	      // done for this case as the page is very short (only requires
5550                     ; 3757 	      // one packet to send) and not changing the current_webpage
5550                     ; 3758 	      // pointer prevents "page interference" between normal browser
5550                     ; 3759 	      // activity and the automated functions that normally use this
5550                     ; 3760 	      // page.
5550                     ; 3761 	      // current_webpage = WEBPAGE_RSTATE;
5550                     ; 3762               pSocket->pData = g_HtmlPageRstate;
5552  b6d5 90ae9a62      	ldw	y,#L12_g_HtmlPageRstate
5553  b6d9 ef01          	ldw	(1,x),y
5554                     ; 3763               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
5556  b6db 90ae0086      	ldw	y,#134
5557                     ; 3764               pSocket->nState = STATE_CONNECTED;
5558                     ; 3765               pSocket->nPrevBytes = 0xFFFF;
5559                     ; 3766 	      break;
5561  b6df 20c8          	jp	LC021
5562  b6e1               L3611:
5563                     ; 3768 	    default: // Show IO Control page
5563                     ; 3769 	      current_webpage = WEBPAGE_IOCONTROL;
5565  b6e1 725f001a      	clr	_current_webpage
5566                     ; 3770               pSocket->pData = g_HtmlPageIOControl;
5568  b6e5 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5569  b6e9 ef01          	ldw	(1,x),y
5570                     ; 3771               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5572  b6eb 90ae0c06      	ldw	y,#3078
5573                     ; 3772               pSocket->nState = STATE_CONNECTED;
5575  b6ef               LC020:
5576  b6ef ef03          	ldw	(3,x),y
5578  b6f1 7f            	clr	(x)
5579                     ; 3773               pSocket->nPrevBytes = 0xFFFF;
5581  b6f2               LC019:
5588  b6f2 90aeffff      	ldw	y,#65535
5589  b6f6 ef0b          	ldw	(11,x),y
5590                     ; 3774 	      break;
5592  b6f8               L1602:
5593                     ; 3776           pSocket->nParseLeft = 0;
5595  b6f8 1e0b          	ldw	x,(OFST+7,sp)
5596  b6fa 6f06          	clr	(6,x)
5597  b6fc               L7202:
5598                     ; 3779         if (pSocket->ParseState == PARSE_FAIL) {
5600  b6fc 1e0b          	ldw	x,(OFST+7,sp)
5601  b6fe e60a          	ld	a,(10,x)
5602  b700 a107          	cp	a,#7
5603                     ; 3784           pSocket->nState = STATE_SENDHEADER;
5604                     ; 3785 	  break;
5606  b702 2704          	jreq	LC025
5607                     ; 3788         if (pSocket->nParseLeft == 0) {
5609  b704 e606          	ld	a,(6,x)
5610  b706 2605          	jrne	L5102
5611                     ; 3791           pSocket->nState = STATE_SENDHEADER;
5613  b708               LC025:
5615  b708 a60b          	ld	a,#11
5616  b70a f7            	ld	(x),a
5617                     ; 3792           break;
5619  b70b 2007          	jra	L1102
5620  b70d               L5102:
5621                     ; 3433       while (nBytes != 0) {
5623  b70d 1e09          	ldw	x,(OFST+5,sp)
5624  b70f 2703ccb494    	jrne	L3102
5625  b714               L1102:
5626                     ; 3797     if (pSocket->nState == STATE_SENDHEADER) {
5628  b714 1e0b          	ldw	x,(OFST+7,sp)
5629  b716 f6            	ld	a,(x)
5630  b717 a10b          	cp	a,#11
5631  b719 261c          	jrne	L5611
5632                     ; 3803       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5634  b71b cda497        	call	_adjust_template_size
5636  b71e 89            	pushw	x
5637  b71f ce0375        	ldw	x,_uip_appdata
5638  b722 cda5ff        	call	L5_CopyHttpHeader
5640  b725 5b02          	addw	sp,#2
5641  b727 89            	pushw	x
5642  b728 ce0375        	ldw	x,_uip_appdata
5643  b72b cdf226        	call	_uip_send
5645  b72e 85            	popw	x
5646                     ; 3804       pSocket->nState = STATE_SENDDATA;
5648  b72f 1e0b          	ldw	x,(OFST+7,sp)
5649  b731 a60c          	ld	a,#12
5650  b733 f7            	ld	(x),a
5651                     ; 3805       return;
5653  b734 ccae21        	jra	L452
5654  b737               L5611:
5655                     ; 3808     senddata:
5655                     ; 3809     if (pSocket->nState == STATE_SENDDATA) {
5657  b737 1e0b          	ldw	x,(OFST+7,sp)
5658  b739 f6            	ld	a,(x)
5659  b73a a10c          	cp	a,#12
5660  b73c 26f6          	jrne	L452
5661                     ; 3816       if (pSocket->nDataLeft == 0) {
5663  b73e e604          	ld	a,(4,x)
5664  b740 ea03          	or	a,(3,x)
5665  b742 2605          	jrne	L3702
5666                     ; 3818         nBufSize = 0;
5668  b744 5f            	clrw	x
5669  b745 1f02          	ldw	(OFST-2,sp),x
5672  b747 202f          	jra	L5702
5673  b749               L3702:
5674                     ; 3821         pSocket->nPrevBytes = pSocket->nDataLeft;
5676  b749 9093          	ldw	y,x
5677  b74b 90ee03        	ldw	y,(3,y)
5678  b74e ef0b          	ldw	(11,x),y
5679                     ; 3822         nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5681  b750 ce0371        	ldw	x,_uip_conn
5682  b753 ee12          	ldw	x,(18,x)
5683  b755 89            	pushw	x
5684  b756 1e0d          	ldw	x,(OFST+9,sp)
5685  b758 1c0003        	addw	x,#3
5686  b75b 89            	pushw	x
5687  b75c 1e0f          	ldw	x,(OFST+11,sp)
5688  b75e 5c            	incw	x
5689  b75f 89            	pushw	x
5690  b760 ce0375        	ldw	x,_uip_appdata
5691  b763 cda6cb        	call	L7_CopyHttpData
5693  b766 5b06          	addw	sp,#6
5694  b768 1f02          	ldw	(OFST-2,sp),x
5696                     ; 3823         pSocket->nPrevBytes -= pSocket->nDataLeft;
5698  b76a 1e0b          	ldw	x,(OFST+7,sp)
5699  b76c e60c          	ld	a,(12,x)
5700  b76e e004          	sub	a,(4,x)
5701  b770 e70c          	ld	(12,x),a
5702  b772 e60b          	ld	a,(11,x)
5703  b774 e203          	sbc	a,(3,x)
5704  b776 e70b          	ld	(11,x),a
5705  b778               L5702:
5706                     ; 3826       if (nBufSize == 0) {
5708  b778 1e02          	ldw	x,(OFST-2,sp)
5709  b77a 2621          	jrne	LC016
5710                     ; 3828         uip_close();
5712  b77c               LC017:
5714  b77c 351002c8      	mov	_uip_flags,#16
5716  b780 ccae21        	jra	L452
5717                     ; 3832         uip_send(uip_appdata, nBufSize);
5719                     ; 3834       return;
5721  b783               L3031:
5722                     ; 3838   else if (uip_rexmit()) {
5724  b783 720502c875    	btjf	_uip_flags,#2,L1031
5725                     ; 3839     if (pSocket->nPrevBytes == 0xFFFF) {
5727  b788 160b          	ldw	y,(OFST+7,sp)
5728  b78a 90ee0b        	ldw	y,(11,y)
5729  b78d 905c          	incw	y
5730  b78f 2617          	jrne	L7012
5731                     ; 3841       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5733  b791 cda497        	call	_adjust_template_size
5735  b794 89            	pushw	x
5736  b795 ce0375        	ldw	x,_uip_appdata
5737  b798 cda5ff        	call	L5_CopyHttpHeader
5739  b79b 5b02          	addw	sp,#2
5741  b79d               LC016:
5743  b79d 89            	pushw	x
5744  b79e ce0375        	ldw	x,_uip_appdata
5745  b7a1 cdf226        	call	_uip_send
5746  b7a4 85            	popw	x
5748  b7a5 ccae21        	jra	L452
5749  b7a8               L7012:
5750                     ; 3844       pSocket->pData -= pSocket->nPrevBytes;
5752  b7a8 1e0b          	ldw	x,(OFST+7,sp)
5753  b7aa e602          	ld	a,(2,x)
5754  b7ac e00c          	sub	a,(12,x)
5755  b7ae e702          	ld	(2,x),a
5756  b7b0 e601          	ld	a,(1,x)
5757  b7b2 e20b          	sbc	a,(11,x)
5758  b7b4 e701          	ld	(1,x),a
5759                     ; 3845       pSocket->nDataLeft += pSocket->nPrevBytes;
5761  b7b6 e604          	ld	a,(4,x)
5762  b7b8 eb0c          	add	a,(12,x)
5763  b7ba e704          	ld	(4,x),a
5764  b7bc e603          	ld	a,(3,x)
5765  b7be e90b          	adc	a,(11,x)
5766                     ; 3846       pSocket->nPrevBytes = pSocket->nDataLeft;
5768  b7c0 9093          	ldw	y,x
5769  b7c2 e703          	ld	(3,x),a
5770  b7c4 90ee03        	ldw	y,(3,y)
5771  b7c7 ef0b          	ldw	(11,x),y
5772                     ; 3847       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5774  b7c9 ce0371        	ldw	x,_uip_conn
5775  b7cc ee12          	ldw	x,(18,x)
5776  b7ce 89            	pushw	x
5777  b7cf 1e0d          	ldw	x,(OFST+9,sp)
5778  b7d1 1c0003        	addw	x,#3
5779  b7d4 89            	pushw	x
5780  b7d5 1e0f          	ldw	x,(OFST+11,sp)
5781  b7d7 5c            	incw	x
5782  b7d8 89            	pushw	x
5783  b7d9 ce0375        	ldw	x,_uip_appdata
5784  b7dc cda6cb        	call	L7_CopyHttpData
5786  b7df 5b06          	addw	sp,#6
5787  b7e1 1f02          	ldw	(OFST-2,sp),x
5789                     ; 3848       pSocket->nPrevBytes -= pSocket->nDataLeft;
5791  b7e3 1e0b          	ldw	x,(OFST+7,sp)
5792  b7e5 e60c          	ld	a,(12,x)
5793  b7e7 e004          	sub	a,(4,x)
5794  b7e9 e70c          	ld	(12,x),a
5795  b7eb e60b          	ld	a,(11,x)
5796  b7ed e203          	sbc	a,(3,x)
5797  b7ef e70b          	ld	(11,x),a
5798                     ; 3849       if (nBufSize == 0) {
5800  b7f1 1e02          	ldw	x,(OFST-2,sp)
5801                     ; 3851         uip_close();
5803  b7f3 2787          	jreq	LC017
5804                     ; 3855         uip_send(uip_appdata, nBufSize);
5806  b7f5 89            	pushw	x
5807  b7f6 ce0375        	ldw	x,_uip_appdata
5808  b7f9 cdf226        	call	_uip_send
5810  b7fc 85            	popw	x
5811                     ; 3858     return;
5813  b7fd               L1031:
5814                     ; 3860 }
5816  b7fd ccae21        	jra	L452
5850                     ; 3863 void clear_saved_postpartial_all(void)
5850                     ; 3864 {
5851                     .text:	section	.text,new
5852  b800               _clear_saved_postpartial_all:
5854  b800 88            	push	a
5855       00000001      OFST:	set	1
5858                     ; 3866   for (i=0; i<24; i++) saved_postpartial[i] = '\0';
5860  b801 4f            	clr	a
5861  b802 6b01          	ld	(OFST+0,sp),a
5863  b804               L3312:
5866  b804 5f            	clrw	x
5867  b805 97            	ld	xl,a
5868  b806 724f0041      	clr	(_saved_postpartial,x)
5871  b80a 0c01          	inc	(OFST+0,sp)
5875  b80c 7b01          	ld	a,(OFST+0,sp)
5876  b80e a118          	cp	a,#24
5877  b810 25f2          	jrult	L3312
5878                     ; 3867 }
5881  b812 84            	pop	a
5882  b813 81            	ret	
5916                     ; 3870 void clear_saved_postpartial_data(void)
5916                     ; 3871 {
5917                     .text:	section	.text,new
5918  b814               _clear_saved_postpartial_data:
5920  b814 88            	push	a
5921       00000001      OFST:	set	1
5924                     ; 3873   for (i=4; i<24; i++) saved_postpartial[i] = '\0';
5926  b815 a604          	ld	a,#4
5927  b817 6b01          	ld	(OFST+0,sp),a
5929  b819               L5512:
5932  b819 5f            	clrw	x
5933  b81a 97            	ld	xl,a
5934  b81b 724f0041      	clr	(_saved_postpartial,x)
5937  b81f 0c01          	inc	(OFST+0,sp)
5941  b821 7b01          	ld	a,(OFST+0,sp)
5942  b823 a118          	cp	a,#24
5943  b825 25f2          	jrult	L5512
5944                     ; 3874 }
5947  b827 84            	pop	a
5948  b828 81            	ret	
5982                     ; 3877 void clear_saved_postpartial_previous(void)
5982                     ; 3878 {
5983                     .text:	section	.text,new
5984                     _clear_saved_postpartial_previous:
5986                     	push	a
5987       00000001      OFST:	set	1
5990                     ; 3880   for (i=0; i<24; i++) saved_postpartial_previous[i] = '\0';
5992                     	clr	a
5993                     	ld	(OFST+0,sp),a
5995                     L7712:
5998                     	clrw	x
5999                     	ld	xl,a
6000                     	clr	(_saved_postpartial_previous,x)
6003                     	inc	(OFST+0,sp)
6007                     	ld	a,(OFST+0,sp)
6008                     	cp	a,#24
6009                     	jrult	L7712
6010                     ; 3881 }
6013                     	pop	a
6014                     	ret	
6104                     ; 3884 void parse_POST_string(uint8_t curr_ParseCmd, uint8_t num_chars)
6104                     ; 3885 {
6105                     .text:	section	.text,new
6106  b829               _parse_POST_string:
6108  b829 89            	pushw	x
6109  b82a 5217          	subw	sp,#23
6110       00000017      OFST:	set	23
6113                     ; 3908   amp_found = 0;
6115  b82c 0f02          	clr	(OFST-21,sp)
6117                     ; 3909   for (i=0; i<20; i++) tmp_Pending[i] = '\0';
6119  b82e 0f17          	clr	(OFST+0,sp)
6121  b830               L7322:
6124  b830 96            	ldw	x,sp
6125  b831 1c0003        	addw	x,#OFST-20
6126  b834 9f            	ld	a,xl
6127  b835 5e            	swapw	x
6128  b836 1b17          	add	a,(OFST+0,sp)
6129  b838 2401          	jrnc	L662
6130  b83a 5c            	incw	x
6131  b83b               L662:
6132  b83b 02            	rlwa	x,a
6133  b83c 7f            	clr	(x)
6136  b83d 0c17          	inc	(OFST+0,sp)
6140  b83f 7b17          	ld	a,(OFST+0,sp)
6141  b841 a114          	cp	a,#20
6142  b843 25eb          	jrult	L7322
6143                     ; 3911   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6145  b845 c60029        	ld	a,_saved_postpartial_previous
6146  b848 1118          	cp	a,(OFST+1,sp)
6147  b84a 260a          	jrne	L5422
6148                     ; 3914     saved_postpartial_previous[0] = '\0';
6150  b84c 725f0029      	clr	_saved_postpartial_previous
6151                     ; 3920     frag_flag = 1; // frag_flag is used to manage the TCP Fragment restore
6153  b850 a601          	ld	a,#1
6154  b852 6b17          	ld	(OFST+0,sp),a
6157  b854 2005          	jra	L7422
6158  b856               L5422:
6159                     ; 3924     frag_flag = 0;
6161  b856 0f17          	clr	(OFST+0,sp)
6163                     ; 3928     clear_saved_postpartial_data(); // Clear [4] and higher
6165  b858 cdb814        	call	_clear_saved_postpartial_data
6167  b85b               L7422:
6168                     ; 3949   resume = 0;
6170  b85b 0f01          	clr	(OFST-22,sp)
6172                     ; 3950   if (frag_flag == 1) {
6174  b85d 7b17          	ld	a,(OFST+0,sp)
6175  b85f 4a            	dec	a
6176  b860 263f          	jrne	L1522
6177                     ; 3952     for (i = 0; i < num_chars; i++) {
6179  b862 6b17          	ld	(OFST+0,sp),a
6182  b864 2033          	jra	L7522
6183  b866               L3522:
6184                     ; 3961       if (saved_postpartial_previous[4+i] != '\0') {
6186  b866 5f            	clrw	x
6187  b867 97            	ld	xl,a
6188  b868 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6189  b86c 271b          	jreq	L3622
6190                     ; 3962         tmp_Pending[i] = saved_postpartial_previous[4+i];
6192  b86e 96            	ldw	x,sp
6193  b86f 1c0003        	addw	x,#OFST-20
6194  b872 9f            	ld	a,xl
6195  b873 5e            	swapw	x
6196  b874 1b17          	add	a,(OFST+0,sp)
6197  b876 2401          	jrnc	L272
6198  b878 5c            	incw	x
6199  b879               L272:
6200  b879 02            	rlwa	x,a
6201  b87a 7b17          	ld	a,(OFST+0,sp)
6202  b87c 905f          	clrw	y
6203  b87e 9097          	ld	yl,a
6204  b880 90d6002d      	ld	a,(_saved_postpartial_previous+4,y)
6205  b884 f7            	ld	(x),a
6207                     ; 3952     for (i = 0; i < num_chars; i++) {
6209  b885 0c17          	inc	(OFST+0,sp)
6211  b887 2010          	jra	L7522
6212  b889               L3622:
6213                     ; 3965         resume = i;
6215  b889 6b01          	ld	(OFST-22,sp),a
6217                     ; 3966         break;
6218  b88b               L1622:
6219                     ; 3969     if (*tmp_pBuffer == '&') {
6221  b88b 72c60025      	ld	a,[_tmp_pBuffer.w]
6222  b88f a126          	cp	a,#38
6223  b891 260e          	jrne	L1522
6224                     ; 3973       amp_found = 1;
6226  b893 a601          	ld	a,#1
6227  b895 6b02          	ld	(OFST-21,sp),a
6229  b897 2008          	jra	L1522
6230  b899               L7522:
6231                     ; 3952     for (i = 0; i < num_chars; i++) {
6233  b899 7b17          	ld	a,(OFST+0,sp)
6234  b89b 1119          	cp	a,(OFST+2,sp)
6235  b89d 25c7          	jrult	L3522
6236  b89f 20ea          	jra	L1622
6237  b8a1               L1522:
6238                     ; 3985   if (amp_found == 0) {
6240  b8a1 7b02          	ld	a,(OFST-21,sp)
6241  b8a3 2703ccb92d    	jrne	L1722
6242                     ; 3986     for (i = resume; i < num_chars; i++) {
6244  b8a8 7b01          	ld	a,(OFST-22,sp)
6245  b8aa 6b17          	ld	(OFST+0,sp),a
6248  b8ac 207b          	jra	L7722
6249  b8ae               L3722:
6250                     ; 3989       if (amp_found == 0) {
6252  b8ae 7b02          	ld	a,(OFST-21,sp)
6253  b8b0 265d          	jrne	L3032
6254                     ; 3992         if (*tmp_pBuffer == '&') {
6256  b8b2 72c60025      	ld	a,[_tmp_pBuffer.w]
6257  b8b6 a126          	cp	a,#38
6258  b8b8 2606          	jrne	L5032
6259                     ; 3995           amp_found = 1;
6261  b8ba a601          	ld	a,#1
6262  b8bc 6b02          	ld	(OFST-21,sp),a
6265  b8be 204f          	jra	L3032
6266  b8c0               L5032:
6267                     ; 3998           tmp_Pending[i] = *tmp_pBuffer;
6269  b8c0 96            	ldw	x,sp
6270  b8c1 1c0003        	addw	x,#OFST-20
6271  b8c4 9f            	ld	a,xl
6272  b8c5 5e            	swapw	x
6273  b8c6 1b17          	add	a,(OFST+0,sp)
6274  b8c8 2401          	jrnc	L472
6275  b8ca 5c            	incw	x
6276  b8cb               L472:
6277  b8cb 90ce0025      	ldw	y,_tmp_pBuffer
6278  b8cf 02            	rlwa	x,a
6279  b8d0 90f6          	ld	a,(y)
6280  b8d2 f7            	ld	(x),a
6281                     ; 3999           saved_postpartial[4+i] = *tmp_pBuffer;
6283  b8d3 5f            	clrw	x
6284  b8d4 7b17          	ld	a,(OFST+0,sp)
6285  b8d6 97            	ld	xl,a
6286  b8d7 90f6          	ld	a,(y)
6287  b8d9 d70045        	ld	(_saved_postpartial+4,x),a
6288                     ; 4000           tmp_nParseLeft--;
6290  b8dc 725a0022      	dec	_tmp_nParseLeft
6291                     ; 4001           saved_nparseleft = tmp_nParseLeft;
6293                     ; 4002           tmp_pBuffer++;
6295  b8e0 93            	ldw	x,y
6296  b8e1 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6297  b8e6 5c            	incw	x
6298  b8e7 cf0025        	ldw	_tmp_pBuffer,x
6299                     ; 4003           tmp_nBytes--;
6301  b8ea ce0023        	ldw	x,_tmp_nBytes
6302  b8ed 5a            	decw	x
6303  b8ee cf0023        	ldw	_tmp_nBytes,x
6304                     ; 4004           if (tmp_nBytes == 0) {
6306  b8f1 261c          	jrne	L3032
6307                     ; 4008             if (i == (num_chars - 1)) {
6309  b8f3 7b19          	ld	a,(OFST+2,sp)
6310  b8f5 5f            	clrw	x
6311  b8f6 97            	ld	xl,a
6312  b8f7 5a            	decw	x
6313  b8f8 7b17          	ld	a,(OFST+0,sp)
6314  b8fa 905f          	clrw	y
6315  b8fc 9097          	ld	yl,a
6316  b8fe 90bf07        	ldw	c_y,y
6317  b901 b307          	cpw	x,c_y
6318  b903 2604          	jrne	L3132
6319                     ; 4013               saved_parsestate = PARSE_DELIM;
6321  b905 3505005a      	mov	_saved_parsestate,#5
6322  b909               L3132:
6323                     ; 4015             break_while = 1;
6325  b909 35010021      	mov	_break_while,#1
6326                     ; 4016             break; // This will break the for() loop. But we need to break the
6328  b90d 201e          	jra	L1722
6329  b90f               L3032:
6330                     ; 4022       if (amp_found == 1) {
6332  b90f 7b02          	ld	a,(OFST-21,sp)
6333  b911 4a            	dec	a
6334  b912 2611          	jrne	L5132
6335                     ; 4025         tmp_Pending[i] = '\0';
6337  b914 96            	ldw	x,sp
6338  b915 1c0003        	addw	x,#OFST-20
6339  b918 9f            	ld	a,xl
6340  b919 5e            	swapw	x
6341  b91a 1b17          	add	a,(OFST+0,sp)
6342  b91c 2401          	jrnc	L672
6343  b91e 5c            	incw	x
6344  b91f               L672:
6345  b91f 02            	rlwa	x,a
6346  b920 7f            	clr	(x)
6347                     ; 4034         tmp_nParseLeft--;
6349  b921 725a0022      	dec	_tmp_nParseLeft
6350  b925               L5132:
6351                     ; 3986     for (i = resume; i < num_chars; i++) {
6353  b925 0c17          	inc	(OFST+0,sp)
6355  b927 7b17          	ld	a,(OFST+0,sp)
6356  b929               L7722:
6359  b929 1119          	cp	a,(OFST+2,sp)
6360  b92b 2581          	jrult	L3722
6361  b92d               L1722:
6362                     ; 4055   if (break_while == 0) clear_saved_postpartial_all();
6364  b92d c60021        	ld	a,_break_while
6365  b930 2603          	jrne	L7132
6368  b932 cdb800        	call	_clear_saved_postpartial_all
6370  b935               L7132:
6371                     ; 4058   if (curr_ParseCmd == 'a') {
6373  b935 7b18          	ld	a,(OFST+1,sp)
6374  b937 a161          	cp	a,#97
6375  b939 2622          	jrne	L1232
6376                     ; 4059     for (i=0; i<num_chars; i++) Pending_devicename[i] = tmp_Pending[i];
6378  b93b 0f17          	clr	(OFST+0,sp)
6381  b93d 2016          	jra	L7232
6382  b93f               L3232:
6385  b93f 5f            	clrw	x
6386  b940 97            	ld	xl,a
6387  b941 89            	pushw	x
6388  b942 96            	ldw	x,sp
6389  b943 1c0005        	addw	x,#OFST-18
6390  b946 9f            	ld	a,xl
6391  b947 5e            	swapw	x
6392  b948 1b19          	add	a,(OFST+2,sp)
6393  b94a 2401          	jrnc	L203
6394  b94c 5c            	incw	x
6395  b94d               L203:
6396  b94d 02            	rlwa	x,a
6397  b94e f6            	ld	a,(x)
6398  b94f 85            	popw	x
6399  b950 d70125        	ld	(_Pending_devicename,x),a
6402  b953 0c17          	inc	(OFST+0,sp)
6404  b955               L7232:
6407  b955 7b17          	ld	a,(OFST+0,sp)
6408  b957 1119          	cp	a,(OFST+2,sp)
6409  b959 25e4          	jrult	L3232
6411  b95b 204a          	jra	L3332
6412  b95d               L1232:
6413                     ; 4064   else if (curr_ParseCmd == 'l') {
6415  b95d a16c          	cp	a,#108
6416  b95f 2622          	jrne	L5332
6417                     ; 4065     for (i=0; i<num_chars; i++) Pending_mqtt_username[i] = tmp_Pending[i];
6419  b961 0f17          	clr	(OFST+0,sp)
6422  b963 2016          	jra	L3432
6423  b965               L7332:
6426  b965 5f            	clrw	x
6427  b966 97            	ld	xl,a
6428  b967 89            	pushw	x
6429  b968 96            	ldw	x,sp
6430  b969 1c0005        	addw	x,#OFST-18
6431  b96c 9f            	ld	a,xl
6432  b96d 5e            	swapw	x
6433  b96e 1b19          	add	a,(OFST+2,sp)
6434  b970 2401          	jrnc	L403
6435  b972 5c            	incw	x
6436  b973               L403:
6437  b973 02            	rlwa	x,a
6438  b974 f6            	ld	a,(x)
6439  b975 85            	popw	x
6440  b976 d70152        	ld	(_Pending_mqtt_username,x),a
6443  b979 0c17          	inc	(OFST+0,sp)
6445  b97b               L3432:
6448  b97b 7b17          	ld	a,(OFST+0,sp)
6449  b97d 1119          	cp	a,(OFST+2,sp)
6450  b97f 25e4          	jrult	L7332
6452  b981 2024          	jra	L3332
6453  b983               L5332:
6454                     ; 4069   else if (curr_ParseCmd == 'm') {
6456  b983 a16d          	cp	a,#109
6457  b985 2620          	jrne	L3332
6458                     ; 4070     for (i=0; i<num_chars; i++) Pending_mqtt_password[i] = tmp_Pending[i];
6460  b987 0f17          	clr	(OFST+0,sp)
6463  b989 2016          	jra	L7532
6464  b98b               L3532:
6467  b98b 5f            	clrw	x
6468  b98c 97            	ld	xl,a
6469  b98d 89            	pushw	x
6470  b98e 96            	ldw	x,sp
6471  b98f 1c0005        	addw	x,#OFST-18
6472  b992 9f            	ld	a,xl
6473  b993 5e            	swapw	x
6474  b994 1b19          	add	a,(OFST+2,sp)
6475  b996 2401          	jrnc	L603
6476  b998 5c            	incw	x
6477  b999               L603:
6478  b999 02            	rlwa	x,a
6479  b99a f6            	ld	a,(x)
6480  b99b 85            	popw	x
6481  b99c d70147        	ld	(_Pending_mqtt_password,x),a
6484  b99f 0c17          	inc	(OFST+0,sp)
6486  b9a1               L7532:
6489  b9a1 7b17          	ld	a,(OFST+0,sp)
6490  b9a3 1119          	cp	a,(OFST+2,sp)
6491  b9a5 25e4          	jrult	L3532
6492  b9a7               L3332:
6493                     ; 4073 }
6496  b9a7 5b19          	addw	sp,#25
6497  b9a9 81            	ret	
6571                     	switch	.const
6572  9da9               L023:
6573  9da9 ba88          	dc.w	L3632
6574  9dab ba8f          	dc.w	L5632
6575  9dad ba96          	dc.w	L7632
6576  9daf ba9d          	dc.w	L1732
6577  9db1 baa4          	dc.w	L3732
6578  9db3 baab          	dc.w	L5732
6579  9db5 bab2          	dc.w	L7732
6580  9db7 bab9          	dc.w	L1042
6581  9db9 bac0          	dc.w	L3042
6582  9dbb bac7          	dc.w	L5042
6583  9dbd bace          	dc.w	L7042
6584  9dbf bad5          	dc.w	L1142
6585  9dc1 badc          	dc.w	L3142
6586  9dc3 bae3          	dc.w	L5142
6587  9dc5 baea          	dc.w	L7142
6588  9dc7 baf1          	dc.w	L1242
6589                     ; 4076 void parse_POST_address(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6589                     ; 4077 {
6590                     .text:	section	.text,new
6591  b9aa               _parse_POST_address:
6593  b9aa 89            	pushw	x
6594  b9ab 89            	pushw	x
6595       00000002      OFST:	set	2
6598                     ; 4080   alpha[0] = '-';
6600  b9ac 352d001b      	mov	_alpha,#45
6601                     ; 4081   alpha[1] = '-';
6603  b9b0 352d001c      	mov	_alpha+1,#45
6604                     ; 4082   alpha[2] = '-';
6606  b9b4 352d001d      	mov	_alpha+2,#45
6607                     ; 4085   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6609  b9b8 9e            	ld	a,xh
6610  b9b9 c10029        	cp	a,_saved_postpartial_previous
6611  b9bc 2624          	jrne	L1542
6612                     ; 4088     saved_postpartial_previous[0] = '\0';
6614  b9be 725f0029      	clr	_saved_postpartial_previous
6615                     ; 4095     if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
6617  b9c2 c6002d        	ld	a,_saved_postpartial_previous+4
6618  b9c5 2705          	jreq	L3542
6621  b9c7 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
6622  b9cc               L3542:
6623                     ; 4096     if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
6625  b9cc c6002e        	ld	a,_saved_postpartial_previous+5
6626  b9cf 2705          	jreq	L5542
6629  b9d1 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
6630  b9d6               L5542:
6631                     ; 4097     if (saved_postpartial_previous[6] != '\0') alpha[2] = saved_postpartial_previous[6];
6633  b9d6 c6002f        	ld	a,_saved_postpartial_previous+6
6634  b9d9 270a          	jreq	L1642
6637  b9db 55002f001d    	mov	_alpha+2,_saved_postpartial_previous+6
6638  b9e0 2003          	jra	L1642
6639  b9e2               L1542:
6640                     ; 4103     clear_saved_postpartial_data(); // Clear [4] and higher
6642  b9e2 cdb814        	call	_clear_saved_postpartial_data
6644  b9e5               L1642:
6645                     ; 4106   for (i=0; i<3; i++) {
6647  b9e5 4f            	clr	a
6648  b9e6 6b02          	ld	(OFST+0,sp),a
6650  b9e8               L3642:
6651                     ; 4112     if (alpha[i] == '-') {
6653  b9e8 5f            	clrw	x
6654  b9e9 97            	ld	xl,a
6655  b9ea d6001b        	ld	a,(_alpha,x)
6656  b9ed a12d          	cp	a,#45
6657  b9ef 263c          	jrne	L1742
6658                     ; 4113       alpha[i] = (uint8_t)(*tmp_pBuffer);
6660  b9f1 7b02          	ld	a,(OFST+0,sp)
6661  b9f3 5f            	clrw	x
6662  b9f4 90ce0025      	ldw	y,_tmp_pBuffer
6663  b9f8 97            	ld	xl,a
6664  b9f9 90f6          	ld	a,(y)
6665  b9fb d7001b        	ld	(_alpha,x),a
6666                     ; 4114       saved_postpartial[i+4] = (uint8_t)(*tmp_pBuffer);
6668  b9fe 5f            	clrw	x
6669  b9ff 7b02          	ld	a,(OFST+0,sp)
6670  ba01 97            	ld	xl,a
6671  ba02 90f6          	ld	a,(y)
6672  ba04 d70045        	ld	(_saved_postpartial+4,x),a
6673                     ; 4115       tmp_nParseLeft--;
6675  ba07 725a0022      	dec	_tmp_nParseLeft
6676                     ; 4116       saved_nparseleft = tmp_nParseLeft;
6678                     ; 4117       tmp_pBuffer++;
6680  ba0b 93            	ldw	x,y
6681  ba0c 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6682  ba11 5c            	incw	x
6683  ba12 cf0025        	ldw	_tmp_pBuffer,x
6684                     ; 4118       tmp_nBytes--;
6686  ba15 ce0023        	ldw	x,_tmp_nBytes
6687  ba18 5a            	decw	x
6688  ba19 cf0023        	ldw	_tmp_nBytes,x
6689                     ; 4119       if (i != 2 && tmp_nBytes == 0) {
6691  ba1c 7b02          	ld	a,(OFST+0,sp)
6692  ba1e a102          	cp	a,#2
6693  ba20 270b          	jreq	L1742
6695  ba22 ce0023        	ldw	x,_tmp_nBytes
6696  ba25 2606          	jrne	L1742
6697                     ; 4120         break_while = 1; // Hit end of fragment but still have characters to
6699  ba27 35010021      	mov	_break_while,#1
6700                     ; 4124         break; // Break out of for() loop.
6702  ba2b 2008          	jra	L7642
6703  ba2d               L1742:
6704                     ; 4106   for (i=0; i<3; i++) {
6706  ba2d 0c02          	inc	(OFST+0,sp)
6710  ba2f 7b02          	ld	a,(OFST+0,sp)
6711  ba31 a103          	cp	a,#3
6712  ba33 25b3          	jrult	L3642
6713  ba35               L7642:
6714                     ; 4128   if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6716  ba35 c60021        	ld	a,_break_while
6717  ba38 4a            	dec	a
6718  ba39 2603ccbaff    	jreq	L223
6721                     ; 4132   clear_saved_postpartial_all();
6723  ba3e cdb800        	call	_clear_saved_postpartial_all
6725                     ; 4145     invalid = 0;
6727  ba41 0f01          	clr	(OFST-1,sp)
6729                     ; 4147     temp = (uint8_t)(       (alpha[2] - '0'));
6731  ba43 c6001d        	ld	a,_alpha+2
6732  ba46 a030          	sub	a,#48
6733  ba48 6b02          	ld	(OFST+0,sp),a
6735                     ; 4148     temp = (uint8_t)(temp + (alpha[1] - '0') * 10);
6737  ba4a c6001c        	ld	a,_alpha+1
6738  ba4d 97            	ld	xl,a
6739  ba4e a60a          	ld	a,#10
6740  ba50 42            	mul	x,a
6741  ba51 9f            	ld	a,xl
6742  ba52 a0e0          	sub	a,#224
6743  ba54 1b02          	add	a,(OFST+0,sp)
6744  ba56 6b02          	ld	(OFST+0,sp),a
6746                     ; 4149     if (temp > 55 && alpha[0] > '1') invalid = 1;
6748  ba58 a138          	cp	a,#56
6749  ba5a 250d          	jrult	L7742
6751  ba5c c6001b        	ld	a,_alpha
6752  ba5f a132          	cp	a,#50
6753  ba61 2506          	jrult	L7742
6756  ba63 a601          	ld	a,#1
6757  ba65 6b01          	ld	(OFST-1,sp),a
6760  ba67 200e          	jra	L1052
6761  ba69               L7742:
6762                     ; 4150     else temp = (uint8_t)(temp + (alpha[0] - '0') * 100);
6764  ba69 c6001b        	ld	a,_alpha
6765  ba6c 97            	ld	xl,a
6766  ba6d a664          	ld	a,#100
6767  ba6f 42            	mul	x,a
6768  ba70 9f            	ld	a,xl
6769  ba71 a0c0          	sub	a,#192
6770  ba73 1b02          	add	a,(OFST+0,sp)
6771  ba75 6b02          	ld	(OFST+0,sp),a
6773  ba77               L1052:
6774                     ; 4151     if (invalid == 0) { // Make change only if valid entry
6776  ba77 7b01          	ld	a,(OFST-1,sp)
6777  ba79 267b          	jrne	L3052
6778                     ; 4152       switch(curr_ParseNum)
6780  ba7b 7b04          	ld	a,(OFST+2,sp)
6782                     ; 4175         default: break;
6783  ba7d a110          	cp	a,#16
6784  ba7f 2475          	jruge	L3052
6785  ba81 5f            	clrw	x
6786  ba82 97            	ld	xl,a
6787  ba83 58            	sllw	x
6788  ba84 de9da9        	ldw	x,(L023,x)
6789  ba87 fc            	jp	(x)
6790  ba88               L3632:
6791                     ; 4154         case 0:  Pending_hostaddr[3] = (uint8_t)temp; break;
6793  ba88 7b02          	ld	a,(OFST+0,sp)
6794  ba8a c70146        	ld	_Pending_hostaddr+3,a
6797  ba8d 2067          	jra	L3052
6798  ba8f               L5632:
6799                     ; 4155         case 1:  Pending_hostaddr[2] = (uint8_t)temp; break;
6801  ba8f 7b02          	ld	a,(OFST+0,sp)
6802  ba91 c70145        	ld	_Pending_hostaddr+2,a
6805  ba94 2060          	jra	L3052
6806  ba96               L7632:
6807                     ; 4156         case 2:  Pending_hostaddr[1] = (uint8_t)temp; break;
6809  ba96 7b02          	ld	a,(OFST+0,sp)
6810  ba98 c70144        	ld	_Pending_hostaddr+1,a
6813  ba9b 2059          	jra	L3052
6814  ba9d               L1732:
6815                     ; 4157         case 3:  Pending_hostaddr[0] = (uint8_t)temp; break;
6817  ba9d 7b02          	ld	a,(OFST+0,sp)
6818  ba9f c70143        	ld	_Pending_hostaddr,a
6821  baa2 2052          	jra	L3052
6822  baa4               L3732:
6823                     ; 4158         case 4:  Pending_draddr[3] = (uint8_t)temp; break;
6825  baa4 7b02          	ld	a,(OFST+0,sp)
6826  baa6 c70142        	ld	_Pending_draddr+3,a
6829  baa9 204b          	jra	L3052
6830  baab               L5732:
6831                     ; 4159         case 5:  Pending_draddr[2] = (uint8_t)temp; break;
6833  baab 7b02          	ld	a,(OFST+0,sp)
6834  baad c70141        	ld	_Pending_draddr+2,a
6837  bab0 2044          	jra	L3052
6838  bab2               L7732:
6839                     ; 4160         case 6:  Pending_draddr[1] = (uint8_t)temp; break;
6841  bab2 7b02          	ld	a,(OFST+0,sp)
6842  bab4 c70140        	ld	_Pending_draddr+1,a
6845  bab7 203d          	jra	L3052
6846  bab9               L1042:
6847                     ; 4161         case 7:  Pending_draddr[0] = (uint8_t)temp; break;
6849  bab9 7b02          	ld	a,(OFST+0,sp)
6850  babb c7013f        	ld	_Pending_draddr,a
6853  babe 2036          	jra	L3052
6854  bac0               L3042:
6855                     ; 4162         case 8:  Pending_netmask[3] = (uint8_t)temp; break;
6857  bac0 7b02          	ld	a,(OFST+0,sp)
6858  bac2 c7013e        	ld	_Pending_netmask+3,a
6861  bac5 202f          	jra	L3052
6862  bac7               L5042:
6863                     ; 4163         case 9:  Pending_netmask[2] = (uint8_t)temp; break;
6865  bac7 7b02          	ld	a,(OFST+0,sp)
6866  bac9 c7013d        	ld	_Pending_netmask+2,a
6869  bacc 2028          	jra	L3052
6870  bace               L7042:
6871                     ; 4164         case 10: Pending_netmask[1] = (uint8_t)temp; break;
6873  bace 7b02          	ld	a,(OFST+0,sp)
6874  bad0 c7013c        	ld	_Pending_netmask+1,a
6877  bad3 2021          	jra	L3052
6878  bad5               L1142:
6879                     ; 4165         case 11: Pending_netmask[0] = (uint8_t)temp; break;
6881  bad5 7b02          	ld	a,(OFST+0,sp)
6882  bad7 c7013b        	ld	_Pending_netmask,a
6885  bada 201a          	jra	L3052
6886  badc               L3142:
6887                     ; 4168 	  Pending_mqttserveraddr[3] = (uint8_t)temp;
6889  badc 7b02          	ld	a,(OFST+0,sp)
6890  bade c70162        	ld	_Pending_mqttserveraddr+3,a
6891                     ; 4169 	  break;
6893  bae1 2013          	jra	L3052
6894  bae3               L5142:
6895                     ; 4171         case 13: Pending_mqttserveraddr[2] = (uint8_t)temp; break;
6897  bae3 7b02          	ld	a,(OFST+0,sp)
6898  bae5 c70161        	ld	_Pending_mqttserveraddr+2,a
6901  bae8 200c          	jra	L3052
6902  baea               L7142:
6903                     ; 4172         case 14: Pending_mqttserveraddr[1] = (uint8_t)temp; break;
6905  baea 7b02          	ld	a,(OFST+0,sp)
6906  baec c70160        	ld	_Pending_mqttserveraddr+1,a
6909  baef 2005          	jra	L3052
6910  baf1               L1242:
6911                     ; 4173         case 15: Pending_mqttserveraddr[0] = (uint8_t)temp; break;
6913  baf1 7b02          	ld	a,(OFST+0,sp)
6914  baf3 c7015f        	ld	_Pending_mqttserveraddr,a
6917                     ; 4175         default: break;
6919  baf6               L3052:
6920                     ; 4180   if (tmp_nBytes == 0) {
6922  baf6 ce0023        	ldw	x,_tmp_nBytes
6923  baf9 2604          	jrne	L223
6924                     ; 4183     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
6926  bafb 35020021      	mov	_break_while,#2
6927                     ; 4186     return;
6928  baff               L223:
6931  baff 5b04          	addw	sp,#4
6932  bb01 81            	ret	
6933                     ; 4188 }
7013                     ; 4191 void parse_POST_port(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
7013                     ; 4192 {
7014                     .text:	section	.text,new
7015  bb02               _parse_POST_port:
7017  bb02 89            	pushw	x
7018  bb03 5203          	subw	sp,#3
7019       00000003      OFST:	set	3
7022                     ; 4195   for (i=0; i<5; i++) alpha[i] = '-';
7024  bb05 4f            	clr	a
7025  bb06 6b03          	ld	(OFST+0,sp),a
7027  bb08               L1452:
7030  bb08 5f            	clrw	x
7031  bb09 97            	ld	xl,a
7032  bb0a a62d          	ld	a,#45
7033  bb0c d7001b        	ld	(_alpha,x),a
7036  bb0f 0c03          	inc	(OFST+0,sp)
7040  bb11 7b03          	ld	a,(OFST+0,sp)
7041  bb13 a105          	cp	a,#5
7042  bb15 25f1          	jrult	L1452
7043                     ; 4197   if (saved_postpartial_previous[0] == curr_ParseCmd) {
7045  bb17 c60029        	ld	a,_saved_postpartial_previous
7046  bb1a 1104          	cp	a,(OFST+1,sp)
7047  bb1c 2621          	jrne	L7452
7048                     ; 4200     saved_postpartial_previous[0] = '\0';
7050  bb1e 725f0029      	clr	_saved_postpartial_previous
7051                     ; 4207     for (i=0; i<5; i++) {
7053  bb22 4f            	clr	a
7054  bb23 6b03          	ld	(OFST+0,sp),a
7056  bb25               L1552:
7057                     ; 4208       if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
7059  bb25 5f            	clrw	x
7060  bb26 97            	ld	xl,a
7061  bb27 724d002d      	tnz	(_saved_postpartial_previous+4,x)
7062  bb2b 2708          	jreq	L7552
7065  bb2d 5f            	clrw	x
7066  bb2e 97            	ld	xl,a
7067  bb2f d6002d        	ld	a,(_saved_postpartial_previous+4,x)
7068  bb32 d7001b        	ld	(_alpha,x),a
7069  bb35               L7552:
7070                     ; 4207     for (i=0; i<5; i++) {
7072  bb35 0c03          	inc	(OFST+0,sp)
7076  bb37 7b03          	ld	a,(OFST+0,sp)
7077  bb39 a105          	cp	a,#5
7078  bb3b 25e8          	jrult	L1552
7080  bb3d 2003          	jra	L1652
7081  bb3f               L7452:
7082                     ; 4215     clear_saved_postpartial_data(); // Clear [4] and higher
7084  bb3f cdb814        	call	_clear_saved_postpartial_data
7086  bb42               L1652:
7087                     ; 4220     for (i=0; i<5; i++) {
7089  bb42 4f            	clr	a
7090  bb43 6b03          	ld	(OFST+0,sp),a
7092  bb45               L3652:
7093                     ; 4226       if (alpha[i] == '-') {
7095  bb45 5f            	clrw	x
7096  bb46 97            	ld	xl,a
7097  bb47 d6001b        	ld	a,(_alpha,x)
7098  bb4a a12d          	cp	a,#45
7099  bb4c 263c          	jrne	L1752
7100                     ; 4227         alpha[i] = (uint8_t)(*tmp_pBuffer);
7102  bb4e 7b03          	ld	a,(OFST+0,sp)
7103  bb50 5f            	clrw	x
7104  bb51 90ce0025      	ldw	y,_tmp_pBuffer
7105  bb55 97            	ld	xl,a
7106  bb56 90f6          	ld	a,(y)
7107  bb58 d7001b        	ld	(_alpha,x),a
7108                     ; 4228         saved_postpartial[i+4] = *tmp_pBuffer;
7110  bb5b 5f            	clrw	x
7111  bb5c 7b03          	ld	a,(OFST+0,sp)
7112  bb5e 97            	ld	xl,a
7113  bb5f 90f6          	ld	a,(y)
7114  bb61 d70045        	ld	(_saved_postpartial+4,x),a
7115                     ; 4229         tmp_nParseLeft--;
7117  bb64 725a0022      	dec	_tmp_nParseLeft
7118                     ; 4230         saved_nparseleft = tmp_nParseLeft;
7120                     ; 4231         tmp_pBuffer++;
7122  bb68 93            	ldw	x,y
7123  bb69 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
7124  bb6e 5c            	incw	x
7125  bb6f cf0025        	ldw	_tmp_pBuffer,x
7126                     ; 4232         tmp_nBytes--;
7128  bb72 ce0023        	ldw	x,_tmp_nBytes
7129  bb75 5a            	decw	x
7130  bb76 cf0023        	ldw	_tmp_nBytes,x
7131                     ; 4233         if (i != 4 && tmp_nBytes == 0) {
7133  bb79 7b03          	ld	a,(OFST+0,sp)
7134  bb7b a104          	cp	a,#4
7135  bb7d 270b          	jreq	L1752
7137  bb7f ce0023        	ldw	x,_tmp_nBytes
7138  bb82 2606          	jrne	L1752
7139                     ; 4234           break_while = 1; // Hit end of fragment but still have characters to
7141  bb84 35010021      	mov	_break_while,#1
7142                     ; 4238    	break; // Break out of for() loop.
7144  bb88 2008          	jra	L7652
7145  bb8a               L1752:
7146                     ; 4220     for (i=0; i<5; i++) {
7148  bb8a 0c03          	inc	(OFST+0,sp)
7152  bb8c 7b03          	ld	a,(OFST+0,sp)
7153  bb8e a105          	cp	a,#5
7154  bb90 25b3          	jrult	L3652
7155  bb92               L7652:
7156                     ; 4242     if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
7158  bb92 c60021        	ld	a,_break_while
7159  bb95 4a            	dec	a
7160  bb96 2603ccbc24    	jreq	L233
7163                     ; 4247   clear_saved_postpartial_all();
7165  bb9b cdb800        	call	_clear_saved_postpartial_all
7167                     ; 4256     invalid = 0;
7169  bb9e 0f03          	clr	(OFST+0,sp)
7171                     ; 4258     temp = (uint16_t)(       (alpha[4] - '0'));
7173  bba0 5f            	clrw	x
7174  bba1 c6001f        	ld	a,_alpha+4
7175  bba4 97            	ld	xl,a
7176  bba5 1d0030        	subw	x,#48
7177  bba8 1f01          	ldw	(OFST-2,sp),x
7179                     ; 4259     temp = (uint16_t)(temp + (alpha[3] - '0') * 10);
7181  bbaa c6001e        	ld	a,_alpha+3
7182  bbad 97            	ld	xl,a
7183  bbae a60a          	ld	a,#10
7184  bbb0 42            	mul	x,a
7185  bbb1 1d01e0        	subw	x,#480
7186  bbb4 72fb01        	addw	x,(OFST-2,sp)
7187  bbb7 1f01          	ldw	(OFST-2,sp),x
7189                     ; 4260     temp = (uint16_t)(temp + (alpha[2] - '0') * 100);
7191  bbb9 c6001d        	ld	a,_alpha+2
7192  bbbc 97            	ld	xl,a
7193  bbbd a664          	ld	a,#100
7194  bbbf 42            	mul	x,a
7195  bbc0 1d12c0        	subw	x,#4800
7196  bbc3 72fb01        	addw	x,(OFST-2,sp)
7197  bbc6 1f01          	ldw	(OFST-2,sp),x
7199                     ; 4261     temp = (uint16_t)(temp + (alpha[1] - '0') * 1000);
7201  bbc8 5f            	clrw	x
7202  bbc9 c6001c        	ld	a,_alpha+1
7203  bbcc 97            	ld	xl,a
7204  bbcd 90ae03e8      	ldw	y,#1000
7205  bbd1 cdf8b8        	call	c_imul
7207  bbd4 1dbb80        	subw	x,#48000
7208  bbd7 72fb01        	addw	x,(OFST-2,sp)
7209  bbda 1f01          	ldw	(OFST-2,sp),x
7211                     ; 4262     if (temp > 5535 && alpha[0] > '5') invalid = 1;
7213  bbdc a315a0        	cpw	x,#5536
7214  bbdf 250d          	jrult	L7752
7216  bbe1 c6001b        	ld	a,_alpha
7217  bbe4 a136          	cp	a,#54
7218  bbe6 2506          	jrult	L7752
7221  bbe8 a601          	ld	a,#1
7222  bbea 6b03          	ld	(OFST+0,sp),a
7225  bbec 2014          	jra	L1062
7226  bbee               L7752:
7227                     ; 4263     else temp = (uint16_t)(temp + (alpha[0] - '0') * 10000);
7229  bbee c6001b        	ld	a,_alpha
7230  bbf1 5f            	clrw	x
7231  bbf2 97            	ld	xl,a
7232  bbf3 90ae2710      	ldw	y,#10000
7233  bbf7 cdf8b8        	call	c_imul
7235  bbfa 1d5300        	subw	x,#21248
7236  bbfd 72fb01        	addw	x,(OFST-2,sp)
7237  bc00 1f01          	ldw	(OFST-2,sp),x
7239  bc02               L1062:
7240                     ; 4264     if (temp < 10) invalid = 1;
7242  bc02 a3000a        	cpw	x,#10
7243  bc05 2404          	jruge	L3062
7246  bc07 a601          	ld	a,#1
7247  bc09 6b03          	ld	(OFST+0,sp),a
7249  bc0b               L3062:
7250                     ; 4265     if (invalid == 0) {
7252  bc0b 7b03          	ld	a,(OFST+0,sp)
7253  bc0d 260c          	jrne	L5062
7254                     ; 4266       if (curr_ParseNum == 0) Pending_port = (uint16_t)temp;
7256  bc0f 7b05          	ld	a,(OFST+2,sp)
7257  bc11 2605          	jrne	L7062
7260  bc13 cf0139        	ldw	_Pending_port,x
7262  bc16 2003          	jra	L5062
7263  bc18               L7062:
7264                     ; 4268       else Pending_mqttport = (uint16_t)temp;
7266  bc18 cf015d        	ldw	_Pending_mqttport,x
7267  bc1b               L5062:
7268                     ; 4273   if (tmp_nBytes == 0) {
7270  bc1b ce0023        	ldw	x,_tmp_nBytes
7271  bc1e 2604          	jrne	L233
7272                     ; 4276     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
7274  bc20 35020021      	mov	_break_while,#2
7275                     ; 4279     return;
7276  bc24               L233:
7279  bc24 5b05          	addw	sp,#5
7280  bc26 81            	ret	
7281                     ; 4281 }
7316                     	switch	.const
7317  9dc9               L043:
7318  9dc9 bc35          	dc.w	L5162
7319  9dcb bc3d          	dc.w	L7162
7320  9dcd bc45          	dc.w	L1262
7321  9dcf bc4d          	dc.w	L3262
7322  9dd1 bc55          	dc.w	L5262
7323  9dd3 bc5d          	dc.w	L7262
7324  9dd5 bc65          	dc.w	L1362
7325  9dd7 bc6d          	dc.w	L3362
7326  9dd9 bc75          	dc.w	L5362
7327  9ddb bc7d          	dc.w	L7362
7328  9ddd bc85          	dc.w	L1462
7329  9ddf bc8d          	dc.w	L3462
7330  9de1 bc95          	dc.w	L5462
7331  9de3 bc9d          	dc.w	L7462
7332  9de5 bca5          	dc.w	L1562
7333  9de7 bcad          	dc.w	L3562
7334                     ; 4284 uint8_t GpioGetPin(uint8_t nGpio)
7334                     ; 4285 {
7335                     .text:	section	.text,new
7336  bc27               _GpioGetPin:
7340                     ; 4290   switch (nGpio) {
7343                     ; 4306     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7344  bc27 a110          	cp	a,#16
7345  bc29 2503ccbcb5    	jruge	L3762
7346  bc2e 5f            	clrw	x
7347  bc2f 97            	ld	xl,a
7348  bc30 58            	sllw	x
7349  bc31 de9dc9        	ldw	x,(L043,x)
7350  bc34 fc            	jp	(x)
7351  bc35               L5162:
7352                     ; 4291     case 0:  if (IO_8to1  & (uint8_t)(0x01)) return 1; break;
7354  bc35 7201016d7b    	btjf	_IO_8to1,#0,L3762
7357  bc3a a601          	ld	a,#1
7360  bc3c 81            	ret	
7361  bc3d               L7162:
7362                     ; 4292     case 1:  if (IO_8to1  & (uint8_t)(0x02)) return 1; break;
7364  bc3d 7203016d73    	btjf	_IO_8to1,#1,L3762
7367  bc42 a601          	ld	a,#1
7370  bc44 81            	ret	
7371  bc45               L1262:
7372                     ; 4293     case 2:  if (IO_8to1  & (uint8_t)(0x04)) return 1; break;
7374  bc45 7205016d6b    	btjf	_IO_8to1,#2,L3762
7377  bc4a a601          	ld	a,#1
7380  bc4c 81            	ret	
7381  bc4d               L3262:
7382                     ; 4294     case 3:  if (IO_8to1  & (uint8_t)(0x08)) return 1; break;
7384  bc4d 7207016d63    	btjf	_IO_8to1,#3,L3762
7387  bc52 a601          	ld	a,#1
7390  bc54 81            	ret	
7391  bc55               L5262:
7392                     ; 4295     case 4:  if (IO_8to1  & (uint8_t)(0x10)) return 1; break;
7394  bc55 7209016d5b    	btjf	_IO_8to1,#4,L3762
7397  bc5a a601          	ld	a,#1
7400  bc5c 81            	ret	
7401  bc5d               L7262:
7402                     ; 4296     case 5:  if (IO_8to1  & (uint8_t)(0x20)) return 1; break;
7404  bc5d 720b016d53    	btjf	_IO_8to1,#5,L3762
7407  bc62 a601          	ld	a,#1
7410  bc64 81            	ret	
7411  bc65               L1362:
7412                     ; 4297     case 6:  if (IO_8to1  & (uint8_t)(0x40)) return 1; break;
7414  bc65 720d016d4b    	btjf	_IO_8to1,#6,L3762
7417  bc6a a601          	ld	a,#1
7420  bc6c 81            	ret	
7421  bc6d               L3362:
7422                     ; 4298     case 7:  if (IO_8to1  & (uint8_t)(0x80)) return 1; break;
7424  bc6d 720f016d43    	btjf	_IO_8to1,#7,L3762
7427  bc72 a601          	ld	a,#1
7430  bc74 81            	ret	
7431  bc75               L5362:
7432                     ; 4299     case 8:  if (IO_16to9 & (uint8_t)(0x01)) return 1; break;
7434  bc75 7201016e3b    	btjf	_IO_16to9,#0,L3762
7437  bc7a a601          	ld	a,#1
7440  bc7c 81            	ret	
7441  bc7d               L7362:
7442                     ; 4300     case 9:  if (IO_16to9 & (uint8_t)(0x02)) return 1; break;
7444  bc7d 7203016e33    	btjf	_IO_16to9,#1,L3762
7447  bc82 a601          	ld	a,#1
7450  bc84 81            	ret	
7451  bc85               L1462:
7452                     ; 4301     case 10: if (IO_16to9 & (uint8_t)(0x04)) return 1; break;
7454  bc85 7205016e2b    	btjf	_IO_16to9,#2,L3762
7457  bc8a a601          	ld	a,#1
7460  bc8c 81            	ret	
7461  bc8d               L3462:
7462                     ; 4302     case 11: if (IO_16to9 & (uint8_t)(0x08)) return 1; break;
7464  bc8d 7207016e23    	btjf	_IO_16to9,#3,L3762
7467  bc92 a601          	ld	a,#1
7470  bc94 81            	ret	
7471  bc95               L5462:
7472                     ; 4303     case 12: if (IO_16to9 & (uint8_t)(0x10)) return 1; break;
7474  bc95 7209016e1b    	btjf	_IO_16to9,#4,L3762
7477  bc9a a601          	ld	a,#1
7480  bc9c 81            	ret	
7481  bc9d               L7462:
7482                     ; 4304     case 13: if (IO_16to9 & (uint8_t)(0x20)) return 1; break;
7484  bc9d 720b016e13    	btjf	_IO_16to9,#5,L3762
7487  bca2 a601          	ld	a,#1
7490  bca4 81            	ret	
7491  bca5               L1562:
7492                     ; 4305     case 14: if (IO_16to9 & (uint8_t)(0x40)) return 1; break;
7494  bca5 720d016e0b    	btjf	_IO_16to9,#6,L3762
7497  bcaa a601          	ld	a,#1
7500  bcac 81            	ret	
7501  bcad               L3562:
7502                     ; 4306     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7504  bcad 720f016e03    	btjf	_IO_16to9,#7,L3762
7507  bcb2 a601          	ld	a,#1
7510  bcb4 81            	ret	
7511  bcb5               L3762:
7512                     ; 4308   return 0;
7514  bcb5 4f            	clr	a
7517  bcb6 81            	ret	
7564                     ; 4357 void GpioSetPin(uint8_t nGpio, uint8_t nState)
7564                     ; 4358 {
7565                     .text:	section	.text,new
7566  bcb7               _GpioSetPin:
7568  bcb7 89            	pushw	x
7569  bcb8 88            	push	a
7570       00000001      OFST:	set	1
7573                     ; 4365   mask = 0;
7575  bcb9 0f01          	clr	(OFST+0,sp)
7577                     ; 4367   switch(nGpio) {
7579  bcbb 9e            	ld	a,xh
7581                     ; 4376     default: break;
7582  bcbc 4d            	tnz	a
7583  bcbd 2717          	jreq	L5372
7584  bcbf 4a            	dec	a
7585  bcc0 2717          	jreq	L7372
7586  bcc2 4a            	dec	a
7587  bcc3 2718          	jreq	L1472
7588  bcc5 4a            	dec	a
7589  bcc6 2719          	jreq	L3472
7590  bcc8 4a            	dec	a
7591  bcc9 271a          	jreq	L5472
7592  bccb 4a            	dec	a
7593  bccc 271b          	jreq	L7472
7594  bcce 4a            	dec	a
7595  bccf 271c          	jreq	L1572
7596  bcd1 4a            	dec	a
7597  bcd2 271d          	jreq	L3572
7598  bcd4 201f          	jra	L1003
7599  bcd6               L5372:
7600                     ; 4368     case 0: mask = 0x01; break;
7602  bcd6 4c            	inc	a
7605  bcd7 201a          	jp	LC026
7606  bcd9               L7372:
7607                     ; 4369     case 1: mask = 0x02; break;
7609  bcd9 a602          	ld	a,#2
7612  bcdb 2016          	jp	LC026
7613  bcdd               L1472:
7614                     ; 4370     case 2: mask = 0x04; break;
7616  bcdd a604          	ld	a,#4
7619  bcdf 2012          	jp	LC026
7620  bce1               L3472:
7621                     ; 4371     case 3: mask = 0x08; break;
7623  bce1 a608          	ld	a,#8
7626  bce3 200e          	jp	LC026
7627  bce5               L5472:
7628                     ; 4372     case 4: mask = 0x10; break;
7630  bce5 a610          	ld	a,#16
7633  bce7 200a          	jp	LC026
7634  bce9               L7472:
7635                     ; 4373     case 5: mask = 0x20; break;
7637  bce9 a620          	ld	a,#32
7640  bceb 2006          	jp	LC026
7641  bced               L1572:
7642                     ; 4374     case 6: mask = 0x40; break;
7644  bced a640          	ld	a,#64
7647  bcef 2002          	jp	LC026
7648  bcf1               L3572:
7649                     ; 4375     case 7: mask = 0x80; break;
7651  bcf1 a680          	ld	a,#128
7652  bcf3               LC026:
7653  bcf3 6b01          	ld	(OFST+0,sp),a
7657                     ; 4376     default: break;
7659  bcf5               L1003:
7660                     ; 4379   if (nState) IO_8to1 |= mask;
7662  bcf5 7b03          	ld	a,(OFST+2,sp)
7663  bcf7 2707          	jreq	L3003
7666  bcf9 c6016d        	ld	a,_IO_8to1
7667  bcfc 1a01          	or	a,(OFST+0,sp)
7669  bcfe 2006          	jra	L5003
7670  bd00               L3003:
7671                     ; 4380   else IO_8to1 &= (uint8_t)~mask;
7673  bd00 7b01          	ld	a,(OFST+0,sp)
7674  bd02 43            	cpl	a
7675  bd03 c4016d        	and	a,_IO_8to1
7676  bd06               L5003:
7677  bd06 c7016d        	ld	_IO_8to1,a
7678                     ; 4382 }
7681  bd09 5b03          	addw	sp,#3
7682  bd0b 81            	ret	
7743                     ; 4394 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7743                     ; 4395 {
7744                     .text:	section	.text,new
7745  bd0c               _SetMAC:
7747  bd0c 89            	pushw	x
7748  bd0d 5203          	subw	sp,#3
7749       00000003      OFST:	set	3
7752                     ; 4409   temp = 0;
7754                     ; 4410   invalid = 0;
7756  bd0f 0f01          	clr	(OFST-2,sp)
7758                     ; 4413   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7760  bd11 9f            	ld	a,xl
7761  bd12 a130          	cp	a,#48
7762  bd14 250b          	jrult	L1503
7764  bd16 9f            	ld	a,xl
7765  bd17 a13a          	cp	a,#58
7766  bd19 2406          	jruge	L1503
7769  bd1b 7b05          	ld	a,(OFST+2,sp)
7770  bd1d a030          	sub	a,#48
7772  bd1f 200c          	jp	LC027
7773  bd21               L1503:
7774                     ; 4414   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7776  bd21 7b05          	ld	a,(OFST+2,sp)
7777  bd23 a161          	cp	a,#97
7778  bd25 250a          	jrult	L5503
7780  bd27 a167          	cp	a,#103
7781  bd29 2406          	jruge	L5503
7784  bd2b a057          	sub	a,#87
7785  bd2d               LC027:
7786  bd2d 6b05          	ld	(OFST+2,sp),a
7788  bd2f 2004          	jra	L3503
7789  bd31               L5503:
7790                     ; 4415   else invalid = 1; // If an invalid entry set indicator
7792  bd31 a601          	ld	a,#1
7793  bd33 6b01          	ld	(OFST-2,sp),a
7795  bd35               L3503:
7796                     ; 4417   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7798  bd35 7b08          	ld	a,(OFST+5,sp)
7799  bd37 a130          	cp	a,#48
7800  bd39 2508          	jrult	L1603
7802  bd3b a13a          	cp	a,#58
7803  bd3d 2404          	jruge	L1603
7806  bd3f a030          	sub	a,#48
7808  bd41 200a          	jp	LC028
7809  bd43               L1603:
7810                     ; 4418   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7812  bd43 a161          	cp	a,#97
7813  bd45 250a          	jrult	L5603
7815  bd47 a167          	cp	a,#103
7816  bd49 2406          	jruge	L5603
7819  bd4b a057          	sub	a,#87
7820  bd4d               LC028:
7821  bd4d 6b08          	ld	(OFST+5,sp),a
7823  bd4f 2004          	jra	L3603
7824  bd51               L5603:
7825                     ; 4419   else invalid = 1; // If an invalid entry set indicator
7827  bd51 a601          	ld	a,#1
7828  bd53 6b01          	ld	(OFST-2,sp),a
7830  bd55               L3603:
7831                     ; 4421   if (invalid == 0) { // Change value only if valid entry
7833  bd55 7b01          	ld	a,(OFST-2,sp)
7834  bd57 264a          	jrne	L1703
7835                     ; 4422     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7837  bd59 7b05          	ld	a,(OFST+2,sp)
7838  bd5b 97            	ld	xl,a
7839  bd5c a610          	ld	a,#16
7840  bd5e 42            	mul	x,a
7841  bd5f 01            	rrwa	x,a
7842  bd60 1b08          	add	a,(OFST+5,sp)
7843  bd62 5f            	clrw	x
7844  bd63 97            	ld	xl,a
7845  bd64 1f02          	ldw	(OFST-1,sp),x
7847                     ; 4423     switch(itemnum)
7849  bd66 7b04          	ld	a,(OFST+1,sp)
7851                     ; 4431     default: break;
7852  bd68 2711          	jreq	L7003
7853  bd6a 4a            	dec	a
7854  bd6b 2715          	jreq	L1103
7855  bd6d 4a            	dec	a
7856  bd6e 2719          	jreq	L3103
7857  bd70 4a            	dec	a
7858  bd71 271d          	jreq	L5103
7859  bd73 4a            	dec	a
7860  bd74 2721          	jreq	L7103
7861  bd76 4a            	dec	a
7862  bd77 2725          	jreq	L1203
7863  bd79 2028          	jra	L1703
7864  bd7b               L7003:
7865                     ; 4425     case 0: Pending_uip_ethaddr_oct[5] = (uint8_t)temp; break;
7867  bd7b 7b03          	ld	a,(OFST+0,sp)
7868  bd7d c7011e        	ld	_Pending_uip_ethaddr_oct+5,a
7871  bd80 2021          	jra	L1703
7872  bd82               L1103:
7873                     ; 4426     case 1: Pending_uip_ethaddr_oct[4] = (uint8_t)temp; break;
7875  bd82 7b03          	ld	a,(OFST+0,sp)
7876  bd84 c7011d        	ld	_Pending_uip_ethaddr_oct+4,a
7879  bd87 201a          	jra	L1703
7880  bd89               L3103:
7881                     ; 4427     case 2: Pending_uip_ethaddr_oct[3] = (uint8_t)temp; break;
7883  bd89 7b03          	ld	a,(OFST+0,sp)
7884  bd8b c7011c        	ld	_Pending_uip_ethaddr_oct+3,a
7887  bd8e 2013          	jra	L1703
7888  bd90               L5103:
7889                     ; 4428     case 3: Pending_uip_ethaddr_oct[2] = (uint8_t)temp; break;
7891  bd90 7b03          	ld	a,(OFST+0,sp)
7892  bd92 c7011b        	ld	_Pending_uip_ethaddr_oct+2,a
7895  bd95 200c          	jra	L1703
7896  bd97               L7103:
7897                     ; 4429     case 4: Pending_uip_ethaddr_oct[1] = (uint8_t)temp; break;
7899  bd97 7b03          	ld	a,(OFST+0,sp)
7900  bd99 c7011a        	ld	_Pending_uip_ethaddr_oct+1,a
7903  bd9c 2005          	jra	L1703
7904  bd9e               L1203:
7905                     ; 4430     case 5: Pending_uip_ethaddr_oct[0] = (uint8_t)temp; break;
7907  bd9e 7b03          	ld	a,(OFST+0,sp)
7908  bda0 c70119        	ld	_Pending_uip_ethaddr_oct,a
7911                     ; 4431     default: break;
7913  bda3               L1703:
7914                     ; 4434 }
7917  bda3 5b05          	addw	sp,#5
7918  bda5 81            	ret	
8322                     	switch	.bss
8323  0017               _insertion_flag:
8324  0017 000000        	ds.b	3
8325                     	xdef	_insertion_flag
8326                     	xref	_second_counter
8327                     	xref	_TRANSMIT_counter
8328                     	xref	_TXERIF_counter
8329                     	xref	_RXERIF_counter
8330                     	xref	_MQTT_error_status
8331                     	xref	_mqtt_start_status
8332                     	xref	_Pending_mqtt_password
8333                     	xref	_Pending_mqtt_username
8334                     	xref	_Pending_mqttport
8335                     	xref	_Pending_mqttserveraddr
8336                     	xref	_stored_mqtt_password
8337                     	xref	_stored_mqtt_username
8338                     	xref	_stored_mqttport
8339                     	xref	_stored_mqttserveraddr
8340  001a               _current_webpage:
8341  001a 00            	ds.b	1
8342                     	xdef	_current_webpage
8343  001b               _alpha:
8344  001b 000000000000  	ds.b	6
8345                     	xdef	_alpha
8346  0021               _break_while:
8347  0021 00            	ds.b	1
8348                     	xdef	_break_while
8349  0022               _tmp_nParseLeft:
8350  0022 00            	ds.b	1
8351                     	xdef	_tmp_nParseLeft
8352  0023               _tmp_nBytes:
8353  0023 0000          	ds.b	2
8354                     	xdef	_tmp_nBytes
8355  0025               _tmp_pBuffer:
8356  0025 0000          	ds.b	2
8357                     	xdef	_tmp_pBuffer
8358  0027               _z_diag:
8359  0027 00            	ds.b	1
8360                     	xdef	_z_diag
8361  0028               _saved_newlines:
8362  0028 00            	ds.b	1
8363                     	xdef	_saved_newlines
8364  0029               _saved_postpartial_previous:
8365  0029 000000000000  	ds.b	24
8366                     	xdef	_saved_postpartial_previous
8367  0041               _saved_postpartial:
8368  0041 000000000000  	ds.b	24
8369                     	xdef	_saved_postpartial
8370  0059               _saved_nparseleft:
8371  0059 00            	ds.b	1
8372                     	xdef	_saved_nparseleft
8373  005a               _saved_parsestate:
8374  005a 00            	ds.b	1
8375                     	xdef	_saved_parsestate
8376  005b               _saved_nstate:
8377  005b 00            	ds.b	1
8378                     	xdef	_saved_nstate
8379  005c               _OctetArray:
8380  005c 000000000000  	ds.b	11
8381                     	xdef	_OctetArray
8382                     	xref	_user_reboot_request
8383                     	xref	_parse_complete
8384                     	xref	_mac_string
8385                     	xref	_stored_config_settings
8386                     	xref	_stored_devicename
8387                     	xref	_stored_port
8388                     	xref	_stored_netmask
8389                     	xref	_stored_draddr
8390                     	xref	_stored_hostaddr
8391                     	xref	_Pending_uip_ethaddr_oct
8392                     	xref	_Pending_config_settings
8393                     	xref	_Pending_devicename
8394                     	xref	_Pending_port
8395                     	xref	_Pending_netmask
8396                     	xref	_Pending_draddr
8397                     	xref	_Pending_hostaddr
8398                     	xref	_invert_input
8399                     	xref	_IO_8to1
8400                     	xref	_IO_16to9
8401                     	xref	_Port_Httpd
8402                     	xref	_strlen
8403                     	xref	_debugflash
8404                     	xref	_uip_flags
8405                     	xref	_uip_conn
8406                     	xref	_uip_len
8407                     	xref	_uip_appdata
8408                     	xref	_htons
8409                     	xref	_uip_send
8410                     	xref	_uip_listen
8411                     	xref	_uip_init_stats
8412                     	xdef	_SetMAC
8413                     	xdef	_clear_saved_postpartial_previous
8414                     	xdef	_clear_saved_postpartial_data
8415                     	xdef	_clear_saved_postpartial_all
8416                     	xdef	_GpioSetPin
8417                     	xdef	_GpioGetPin
8418                     	xdef	_parse_POST_port
8419                     	xdef	_parse_POST_address
8420                     	xdef	_parse_POST_string
8421                     	xdef	_HttpDCall
8422                     	xdef	_HttpDInit
8423                     	xdef	_emb_itoa
8424                     	xdef	_adjust_template_size
8425                     	switch	.const
8426  9de9               L143:
8427  9de9 436f6e6e6563  	dc.b	"Connection:close",13
8428  9dfa 0a00          	dc.b	10,0
8429  9dfc               L733:
8430  9dfc 436f6e74656e  	dc.b	"Content-Type: text"
8431  9e0e 2f68746d6c3b  	dc.b	"/html; charset=utf"
8432  9e20 2d380d        	dc.b	"-8",13
8433  9e23 0a00          	dc.b	10,0
8434  9e25               L533:
8435  9e25 43616368652d  	dc.b	"Cache-Control: no-"
8436  9e37 63616368652c  	dc.b	"cache, no-store",13
8437  9e47 0a00          	dc.b	10,0
8438  9e49               L523:
8439  9e49 436f6e74656e  	dc.b	"Content-Length:",0
8440  9e59               L323:
8441  9e59 0d0a00        	dc.b	13,10,0
8442  9e5c               L123:
8443  9e5c 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8444                     	xref.b	c_lreg
8445                     	xref.b	c_x
8446                     	xref.b	c_y
8466                     	xref	c_imul
8467                     	xref	c_uitolx
8468                     	xref	c_ludv
8469                     	xref	c_lumd
8470                     	xref	c_rtol
8471                     	xref	c_ltor
8472                     	xref	c_lzmp
8473                     	end
