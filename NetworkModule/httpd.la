   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  8080               L11_checked:
  20  8080 636865636b65  	dc.b	"checked",0
  21  8088               L31_g_HtmlPageIOControl:
  22  8088 257930342579  	dc.b	"%y04%y05%y06<title"
  23  809a 3e494f20436f  	dc.b	">IO Control</title"
  24  80ac 3e3c2f686561  	dc.b	"></head><body><h1>"
  25  80be 494f20436f6e  	dc.b	"IO Control</h1><fo"
  26  80d0 726d206d6574  	dc.b	"rm method='POST' a"
  27  80e2 6374696f6e3d  	dc.b	"ction='/'><table><"
  28  80f4 74723e3c7464  	dc.b	"tr><td class='t1'>"
  29  8106 4e616d653a3c  	dc.b	"Name:</td><td clas"
  30  8118 733d27743227  	dc.b	"s='t2'>%a00</td></"
  31  812a 74723e3c2f74  	dc.b	"tr></table><table>"
  32  813c 3c74723e3c74  	dc.b	"<tr><td class='t1'"
  33  814e 3e3c2f74643e  	dc.b	"></td><td class='t"
  34  8160 33273e3c2f74  	dc.b	"3'></td><td class="
  35  8172 277431273e53  	dc.b	"'t1'>SET</td></tr>"
  36  8184 3c7472        	dc.b	"<tr"
  37  8187 3e3c74642063  	dc.b	"><td class='t1'>Ou"
  38  8199 747075743031  	dc.b	"tput01</td><td cla"
  39  81ab 73733d277325  	dc.b	"ss='s%i00'></td><t"
  40  81bd 6420636c6173  	dc.b	"d class='t1'><inpu"
  41  81cf 742074797065  	dc.b	"t type='radio' id="
  42  81e1 2730316f6e27  	dc.b	"'01on' name='o00' "
  43  81f3 76616c75653d  	dc.b	"value='1' %o00><la"
  44  8205 62656c20666f  	dc.b	"bel for='01on'>ON<"
  45  8217 2f6c6162656c  	dc.b	"/label><input type"
  46  8229 3d2772616469  	dc.b	"='radio' id='01off"
  47  823b 27206e616d65  	dc.b	"' name='o00' value"
  48  824d 3d2730272025  	dc.b	"='0' %p00><label f"
  49  825f 6f723d273031  	dc.b	"or='01off'>OFF</la"
  50  8271 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
  51  8283 3c7464        	dc.b	"<td"
  52  8286 20636c617373  	dc.b	" class='t1'>Output"
  53  8298 30323c2f7464  	dc.b	"02</td><td class='"
  54  82aa 732569303127  	dc.b	"s%i01'></td><td cl"
  55  82bc 6173733d2774  	dc.b	"ass='t1'><input ty"
  56  82ce 70653d277261  	dc.b	"pe='radio' id='02o"
  57  82e0 6e27206e616d  	dc.b	"n' name='o01' valu"
  58  82f2 653d27312720  	dc.b	"e='1' %o01><label "
  59  8304 666f723d2730  	dc.b	"for='02on'>ON</lab"
  60  8316 656c3e3c696e  	dc.b	"el><input type='ra"
  61  8328 64696f272069  	dc.b	"dio' id='02off' na"
  62  833a 6d653d276f30  	dc.b	"me='o01' value='0'"
  63  834c 20257030313e  	dc.b	" %p01><label for='"
  64  835e 30326f666627  	dc.b	"02off'>OFF</label>"
  65  8370 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
  66  8382 636c61        	dc.b	"cla"
  67  8385 73733d277431  	dc.b	"ss='t1'>Output03</"
  68  8397 74643e3c7464  	dc.b	"td><td class='s%i0"
  69  83a9 32273e3c2f74  	dc.b	"2'></td><td class="
  70  83bb 277431273e3c  	dc.b	"'t1'><input type='"
  71  83cd 726164696f27  	dc.b	"radio' id='03on' n"
  72  83df 616d653d276f  	dc.b	"ame='o02' value='1"
  73  83f1 2720256f3032  	dc.b	"' %o02><label for="
  74  8403 2730336f6e27  	dc.b	"'03on'>ON</label><"
  75  8415 696e70757420  	dc.b	"input type='radio'"
  76  8427 2069643d2730  	dc.b	" id='03off' name='"
  77  8439 6f3032272076  	dc.b	"o02' value='0' %p0"
  78  844b 323e3c6c6162  	dc.b	"2><label for='03of"
  79  845d 66273e4f4646  	dc.b	"f'>OFF</label></td"
  80  846f 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
  81  8481 733d27        	dc.b	"s='"
  82  8484 7431273e4f75  	dc.b	"t1'>Output04</td><"
  83  8496 746420636c61  	dc.b	"td class='s%i03'><"
  84  84a8 2f74643e3c74  	dc.b	"/td><td class='t1'"
  85  84ba 3e3c696e7075  	dc.b	"><input type='radi"
  86  84cc 6f272069643d  	dc.b	"o' id='04on' name="
  87  84de 276f30332720  	dc.b	"'o03' value='1' %o"
  88  84f0 30333e3c6c61  	dc.b	"03><label for='04o"
  89  8502 6e273e4f4e3c  	dc.b	"n'>ON</label><inpu"
  90  8514 742074797065  	dc.b	"t type='radio' id="
  91  8526 2730346f6666  	dc.b	"'04off' name='o03'"
  92  8538 2076616c7565  	dc.b	" value='0' %p03><l"
  93  854a 6162656c2066  	dc.b	"abel for='04off'>O"
  94  855c 46463c2f6c61  	dc.b	"FF</label></td></t"
  95  856e 723e3c74723e  	dc.b	"r><tr><td class='t"
  96  8580 31273e        	dc.b	"1'>"
  97  8583 4f7574707574  	dc.b	"Output05</td><td c"
  98  8595 6c6173733d27  	dc.b	"lass='s%i04'></td>"
  99  85a7 3c746420636c  	dc.b	"<td class='t1'><in"
 100  85b9 707574207479  	dc.b	"put type='radio' i"
 101  85cb 643d2730356f  	dc.b	"d='05on' name='o04"
 102  85dd 272076616c75  	dc.b	"' value='1' %o04><"
 103  85ef 6c6162656c20  	dc.b	"label for='05on'>O"
 104  8601 4e3c2f6c6162  	dc.b	"N</label><input ty"
 105  8613 70653d277261  	dc.b	"pe='radio' id='05o"
 106  8625 666627206e61  	dc.b	"ff' name='o04' val"
 107  8637 75653d273027  	dc.b	"ue='0' %p04><label"
 108  8649 20666f723d27  	dc.b	" for='05off'>OFF</"
 109  865b 6c6162656c3e  	dc.b	"label></td></tr><t"
 110  866d 723e3c746420  	dc.b	"r><td class='t1'>O"
 111  867f 757470        	dc.b	"utp"
 112  8682 757430363c2f  	dc.b	"ut06</td><td class"
 113  8694 3d2773256930  	dc.b	"='s%i05'></td><td "
 114  86a6 636c6173733d  	dc.b	"class='t1'><input "
 115  86b8 747970653d27  	dc.b	"type='radio' id='0"
 116  86ca 366f6e27206e  	dc.b	"6on' name='o05' va"
 117  86dc 6c75653d2731  	dc.b	"lue='1' %o05><labe"
 118  86ee 6c20666f723d  	dc.b	"l for='06on'>ON</l"
 119  8700 6162656c3e3c  	dc.b	"abel><input type='"
 120  8712 726164696f27  	dc.b	"radio' id='06off' "
 121  8724 6e616d653d27  	dc.b	"name='o05' value='"
 122  8736 302720257030  	dc.b	"0' %p05><label for"
 123  8748 3d2730366f66  	dc.b	"='06off'>OFF</labe"
 124  875a 6c3e3c2f7464  	dc.b	"l></td></tr><tr><t"
 125  876c 6420636c6173  	dc.b	"d class='t1'>Outpu"
 126  877e 743037        	dc.b	"t07"
 127  8781 3c2f74643e3c  	dc.b	"</td><td class='s%"
 128  8793 693036273e3c  	dc.b	"i06'></td><td clas"
 129  87a5 733d27743127  	dc.b	"s='t1'><input type"
 130  87b7 3d2772616469  	dc.b	"='radio' id='07on'"
 131  87c9 206e616d653d  	dc.b	" name='o06' value="
 132  87db 27312720256f  	dc.b	"'1' %o06><label fo"
 133  87ed 723d2730376f  	dc.b	"r='07on'>ON</label"
 134  87ff 3e3c696e7075  	dc.b	"><input type='radi"
 135  8811 6f272069643d  	dc.b	"o' id='07off' name"
 136  8823 3d276f303627  	dc.b	"='o06' value='0' %"
 137  8835 7030363e3c6c  	dc.b	"p06><label for='07"
 138  8847 6f6666273e4f  	dc.b	"off'>OFF</label></"
 139  8859 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 140  886b 6173733d2774  	dc.b	"ass='t1'>Output08<"
 141  887d 2f7464        	dc.b	"/td"
 142  8880 3e3c74642063  	dc.b	"><td class='s%i07'"
 143  8892 3e3c2f74643e  	dc.b	"></td><td class='t"
 144  88a4 31273e3c696e  	dc.b	"1'><input type='ra"
 145  88b6 64696f272069  	dc.b	"dio' id='08on' nam"
 146  88c8 653d276f3037  	dc.b	"e='o07' value='1' "
 147  88da 256f30373e3c  	dc.b	"%o07><label for='0"
 148  88ec 386f6e273e4f  	dc.b	"8on'>ON</label><in"
 149  88fe 707574207479  	dc.b	"put type='radio' i"
 150  8910 643d2730386f  	dc.b	"d='08off' name='o0"
 151  8922 37272076616c  	dc.b	"7' value='0' %p07>"
 152  8934 3c6c6162656c  	dc.b	"<label for='08off'"
 153  8946 3e4f46463c2f  	dc.b	">OFF</label></td><"
 154  8958 2f74723e3c2f  	dc.b	"/tr></table><table"
 155  896a 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 156  897c 273e49        	dc.b	"'>I"
 157  897f 6e7075743031  	dc.b	"nput01</td><td cla"
 158  8991 73733d277325  	dc.b	"ss='s%i08'></td></"
 159  89a3 74723e3c7472  	dc.b	"tr><tr><td class='"
 160  89b5 7431273e496e  	dc.b	"t1'>Input02</td><t"
 161  89c7 6420636c6173  	dc.b	"d class='s%i09'></"
 162  89d9 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 163  89eb 6173733d2774  	dc.b	"ass='t1'>Input03</"
 164  89fd 74643e3c7464  	dc.b	"td><td class='s%i1"
 165  8a0f 30273e3c2f74  	dc.b	"0'></td></tr><tr><"
 166  8a21 746420636c61  	dc.b	"td class='t1'>Inpu"
 167  8a33 7430343c2f74  	dc.b	"t04</td><td class="
 168  8a45 277325693131  	dc.b	"'s%i11'></td></tr>"
 169  8a57 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 170  8a69 3e496e707574  	dc.b	">Input05</td><td c"
 171  8a7b 6c6173        	dc.b	"las"
 172  8a7e 733d27732569  	dc.b	"s='s%i12'></td></t"
 173  8a90 723e3c74723e  	dc.b	"r><tr><td class='t"
 174  8aa2 31273e496e70  	dc.b	"1'>Input06</td><td"
 175  8ab4 20636c617373  	dc.b	" class='s%i13'></t"
 176  8ac6 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 177  8ad8 73733d277431  	dc.b	"ss='t1'>Input07</t"
 178  8aea 643e3c746420  	dc.b	"d><td class='s%i14"
 179  8afc 273e3c2f7464  	dc.b	"'></td></tr><tr><t"
 180  8b0e 6420636c6173  	dc.b	"d class='t1'>Input"
 181  8b20 30383c2f7464  	dc.b	"08</td><td class='"
 182  8b32 732569313527  	dc.b	"s%i15'></td></tr><"
 183  8b44 2f7461626c65  	dc.b	"/table><input type"
 184  8b56 3d2768696464  	dc.b	"='hidden' name='z0"
 185  8b68 30272076616c  	dc.b	"0' value='0'><butt"
 186  8b7a 6f6e20        	dc.b	"on "
 187  8b7d 747970653d27  	dc.b	"type='submit' titl"
 188  8b8f 653d27536176  	dc.b	"e='Saves your chan"
 189  8ba1 676573207468  	dc.b	"ges then restarts "
 190  8bb3 746865204e65  	dc.b	"the Network Module"
 191  8bc5 273e53617665  	dc.b	"'>Save</button><bu"
 192  8bd7 74746f6e2074  	dc.b	"tton type='reset' "
 193  8be9 7469746c653d  	dc.b	"title='Un-does any"
 194  8bfb 206368616e67  	dc.b	" changes that have"
 195  8c0d 206e6f742062  	dc.b	" not been saved'>U"
 196  8c1f 6e646f20416c  	dc.b	"ndo All</button></"
 197  8c31 666f726d3e25  	dc.b	"form>%y03/60%y02Re"
 198  8c43 66726573683c  	dc.b	"fresh</button></fo"
 199  8c55 726d3e257930  	dc.b	"rm>%y03/61%y02Conf"
 200  8c67 696775726174  	dc.b	"iguration</button>"
 201  8c79 3c2f66        	dc.b	"</f"
 202  8c7c 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 203  8c8f               L51_g_HtmlPageConfiguration:
 204  8c8f 257930342579  	dc.b	"%y04%y05%y06<title"
 205  8ca1 3e436f6e6669  	dc.b	">Configuration</ti"
 206  8cb3 746c653e3c2f  	dc.b	"tle></head><body><"
 207  8cc5 68313e436f6e  	dc.b	"h1>Configuration</"
 208  8cd7 68313e3c666f  	dc.b	"h1><form method='P"
 209  8ce9 4f5354272061  	dc.b	"OST' action='/'><t"
 210  8cfb 61626c653e3c  	dc.b	"able><tr><td class"
 211  8d0d 3d277431273e  	dc.b	"='t1'>Name:</td><t"
 212  8d1f 643e3c696e70  	dc.b	"d><input name='a00"
 213  8d31 2720636c6173  	dc.b	"' class='t2' value"
 214  8d43 3d2725613030  	dc.b	"='%a00' pattern='["
 215  8d55 302d39612d7a  	dc.b	"0-9a-zA-Z-_*.]{1,1"
 216  8d67 397d27207265  	dc.b	"9}' required title"
 217  8d79 3d273120746f  	dc.b	"='1 to 19 letters,"
 218  8d8b 206e75        	dc.b	" nu"
 219  8d8e 6d626572732c  	dc.b	"mbers, and -_*. no"
 220  8da0 207370616365  	dc.b	" spaces' maxlength"
 221  8db2 3d273139273e  	dc.b	"='19'></td></tr></"
 222  8dc4 7461626c653e  	dc.b	"table><table><tr><"
 223  8dd6 746420636c61  	dc.b	"td class='t1'>Conf"
 224  8de8 69673c2f7464  	dc.b	"ig</td><td><input "
 225  8dfa 6e616d653d27  	dc.b	"name='g00' class='"
 226  8e0c 743527207661  	dc.b	"t5' value='%g00' p"
 227  8e1e 61747465726e  	dc.b	"attern='[0-9a-zA-Z"
 228  8e30 5d7b367d2720  	dc.b	"]{6}' title='6 cha"
 229  8e42 726163746572  	dc.b	"racters required. "
 230  8e54 53656520446f  	dc.b	"See Documentation'"
 231  8e66 206d61786c65  	dc.b	" maxlength='6'></t"
 232  8e78 643e3c2f7472  	dc.b	"d></tr></table><p>"
 233  8e8a 3c2f70        	dc.b	"</p"
 234  8e8d 3e3c7461626c  	dc.b	"><table><tr><td cl"
 235  8e9f 6173733d2774  	dc.b	"ass='t1'>IP Addres"
 236  8eb1 733c2f74643e  	dc.b	"s</td><td><input n"
 237  8ec3 616d653d2762  	dc.b	"ame='b00' class='t"
 238  8ed5 36272076616c  	dc.b	"6' value='%b00' %y"
 239  8ee7 30303c74643e  	dc.b	"00<td><input name="
 240  8ef9 276230312720  	dc.b	"'b01' class='t6' v"
 241  8f0b 616c75653d27  	dc.b	"alue='%b01' %y00<t"
 242  8f1d 643e3c696e70  	dc.b	"d><input name='b02"
 243  8f2f 2720636c6173  	dc.b	"' class='t6' value"
 244  8f41 3d2725623032  	dc.b	"='%b02' %y00<td><i"
 245  8f53 6e707574206e  	dc.b	"nput name='b03' cl"
 246  8f65 6173733d2774  	dc.b	"ass='t6' value='%b"
 247  8f77 303327202579  	dc.b	"03' %y00</tr><tr><"
 248  8f89 746420        	dc.b	"td "
 249  8f8c 636c6173733d  	dc.b	"class='t1'>Gateway"
 250  8f9e 3c2f74643e3c  	dc.b	"</td><td><input na"
 251  8fb0 6d653d276230  	dc.b	"me='b04' class='t6"
 252  8fc2 272076616c75  	dc.b	"' value='%b04' %y0"
 253  8fd4 303c74643e3c  	dc.b	"0<td><input name='"
 254  8fe6 623035272063  	dc.b	"b05' class='t6' va"
 255  8ff8 6c75653d2725  	dc.b	"lue='%b05' %y00<td"
 256  900a 3e3c696e7075  	dc.b	"><input name='b06'"
 257  901c 20636c617373  	dc.b	" class='t6' value="
 258  902e 272562303627  	dc.b	"'%b06' %y00<td><in"
 259  9040 707574206e61  	dc.b	"put name='b07' cla"
 260  9052 73733d277436  	dc.b	"ss='t6' value='%b0"
 261  9064 372720257930  	dc.b	"7' %y00</tr><tr><t"
 262  9076 6420636c6173  	dc.b	"d class='t1'>Netma"
 263  9088 736b3c        	dc.b	"sk<"
 264  908b 2f74643e3c74  	dc.b	"/td><td><input nam"
 265  909d 653d27623038  	dc.b	"e='b08' class='t6'"
 266  90af 2076616c7565  	dc.b	" value='%b08' %y00"
 267  90c1 3c74643e3c69  	dc.b	"<td><input name='b"
 268  90d3 30392720636c  	dc.b	"09' class='t6' val"
 269  90e5 75653d272562  	dc.b	"ue='%b09' %y00<td>"
 270  90f7 3c696e707574  	dc.b	"<input name='b10' "
 271  9109 636c6173733d  	dc.b	"class='t6' value='"
 272  911b 256231302720  	dc.b	"%b10' %y00<td><inp"
 273  912d 7574206e616d  	dc.b	"ut name='b11' clas"
 274  913f 733d27743627  	dc.b	"s='t6' value='%b11"
 275  9151 272025793030  	dc.b	"' %y00</tr></table"
 276  9163 3e3c7461626c  	dc.b	"><table><tr><td cl"
 277  9175 6173733d2774  	dc.b	"ass='t1'>Port</td>"
 278  9187 3c7464        	dc.b	"<td"
 279  918a 3e3c696e7075  	dc.b	"><input name='c00'"
 280  919c 20636c617373  	dc.b	" class='t8' value="
 281  91ae 272563303027  	dc.b	"'%c00' pattern='[0"
 282  91c0 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 283  91d2 657220303030  	dc.b	"er 00010 to 65535'"
 284  91e4 206d61786c65  	dc.b	" maxlength='5'></t"
 285  91f6 643e3c2f7472  	dc.b	"d></tr></table><ta"
 286  9208 626c653e3c74  	dc.b	"ble><tr><td class="
 287  921a 277431273e4d  	dc.b	"'t1'>MAC Address</"
 288  922c 74643e3c7464  	dc.b	"td><td><input name"
 289  923e 3d2764303027  	dc.b	"='d00' class='t7' "
 290  9250 76616c75653d  	dc.b	"value='%d00' %y01<"
 291  9262 74643e3c696e  	dc.b	"td><input name='d0"
 292  9274 312720636c61  	dc.b	"1' class='t7' valu"
 293  9286 653d27        	dc.b	"e='"
 294  9289 256430312720  	dc.b	"%d01' %y01<td><inp"
 295  929b 7574206e616d  	dc.b	"ut name='d02' clas"
 296  92ad 733d27743727  	dc.b	"s='t7' value='%d02"
 297  92bf 272025793031  	dc.b	"' %y01<td><input n"
 298  92d1 616d653d2764  	dc.b	"ame='d03' class='t"
 299  92e3 37272076616c  	dc.b	"7' value='%d03' %y"
 300  92f5 30313c74643e  	dc.b	"01<td><input name="
 301  9307 276430342720  	dc.b	"'d04' class='t7' v"
 302  9319 616c75653d27  	dc.b	"alue='%d04' %y01<t"
 303  932b 643e3c696e70  	dc.b	"d><input name='d05"
 304  933d 2720636c6173  	dc.b	"' class='t7' value"
 305  934f 3d2725643035  	dc.b	"='%d05' %y01</tr><"
 306  9361 2f7461626c65  	dc.b	"/table><p></p><tab"
 307  9373 6c653e3c7472  	dc.b	"le><tr><td class='"
 308  9385 743127        	dc.b	"t1'"
 309  9388 3e4d51545420  	dc.b	">MQTT Server</td><"
 310  939a 74643e3c696e  	dc.b	"td><input name='b1"
 311  93ac 322720636c61  	dc.b	"2' class='t6' valu"
 312  93be 653d27256231  	dc.b	"e='%b12' %y00<td><"
 313  93d0 696e70757420  	dc.b	"input name='b13' c"
 314  93e2 6c6173733d27  	dc.b	"lass='t6' value='%"
 315  93f4 623133272025  	dc.b	"b13' %y00<td><inpu"
 316  9406 74206e616d65  	dc.b	"t name='b14' class"
 317  9418 3d2774362720  	dc.b	"='t6' value='%b14'"
 318  942a 20257930303c  	dc.b	" %y00<td><input na"
 319  943c 6d653d276231  	dc.b	"me='b15' class='t6"
 320  944e 272076616c75  	dc.b	"' value='%b15' %y0"
 321  9460 303c2f74723e  	dc.b	"0</tr></table><tab"
 322  9472 6c653e3c7472  	dc.b	"le><tr><td class='"
 323  9484 743127        	dc.b	"t1'"
 324  9487 3e4d51545420  	dc.b	">MQTT Port</td><td"
 325  9499 3e3c696e7075  	dc.b	"><input name='c01'"
 326  94ab 20636c617373  	dc.b	" class='t8' value="
 327  94bd 272563303127  	dc.b	"'%c01' pattern='[0"
 328  94cf 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 329  94e1 657220303030  	dc.b	"er 00010 to 65535'"
 330  94f3 206d61786c65  	dc.b	" maxlength='5'></t"
 331  9505 643e3c2f7472  	dc.b	"d></tr></table><ta"
 332  9517 626c653e3c74  	dc.b	"ble><tr><td class="
 333  9529 277431273e4d  	dc.b	"'t1'>MQTT Username"
 334  953b 3c2f74643e3c  	dc.b	"</td><td><input na"
 335  954d 6d653d276c30  	dc.b	"me='l00' class='t1"
 336  955f 272076616c75  	dc.b	"' value='%l00' pat"
 337  9571 7465726e3d27  	dc.b	"tern='[0-9a-zA-Z-_"
 338  9583 2a2e5d        	dc.b	"*.]"
 339  9586 7b302c31307d  	dc.b	"{0,10}' title='0 t"
 340  9598 6f203130206c  	dc.b	"o 10 letters, numb"
 341  95aa 6572732c2061  	dc.b	"ers, and -_*. no s"
 342  95bc 70616365732e  	dc.b	"paces. Use none fo"
 343  95ce 72206e6f2065  	dc.b	"r no entry.' maxle"
 344  95e0 6e6774683d27  	dc.b	"ngth='10'></td></t"
 345  95f2 723e3c74723e  	dc.b	"r><tr><td class='t"
 346  9604 31273e4d5154  	dc.b	"1'>MQTT Password</"
 347  9616 74643e3c7464  	dc.b	"td><td><input name"
 348  9628 3d276d303027  	dc.b	"='m00' class='t1' "
 349  963a 76616c75653d  	dc.b	"value='%m00' patte"
 350  964c 726e3d275b30  	dc.b	"rn='[0-9a-zA-Z-_*."
 351  965e 5d7b302c3130  	dc.b	"]{0,10}' title='0 "
 352  9670 746f20313020  	dc.b	"to 10 letters, num"
 353  9682 626572        	dc.b	"ber"
 354  9685 732c20616e64  	dc.b	"s, and -_*. no spa"
 355  9697 6365732e2055  	dc.b	"ces. Use none for "
 356  96a9 6e6f20656e74  	dc.b	"no entry.' maxleng"
 357  96bb 74683d273130  	dc.b	"th='10'></td></tr>"
 358  96cd 3c2f7461626c  	dc.b	"</table><table><tr"
 359  96df 3e3c74642063  	dc.b	"><td class='t1'>MQ"
 360  96f1 545420537461  	dc.b	"TT Status  </td><t"
 361  9703 6420636c6173  	dc.b	"d class='s%n00'></"
 362  9715 74643e3c7464  	dc.b	"td><td class='s%n0"
 363  9727 31273e3c2f74  	dc.b	"1'></td><td class="
 364  9739 2773256e3032  	dc.b	"'s%n02'></td><td c"
 365  974b 6c6173733d27  	dc.b	"lass='s%n03'></td>"
 366  975d 3c746420636c  	dc.b	"<td class='s%n04'>"
 367  976f 3c2f74643e3c  	dc.b	"</td></tr></table>"
 368  9781 3c703e        	dc.b	"<p>"
 369  9784 3c2f703e3c69  	dc.b	"</p><input type='h"
 370  9796 696464656e27  	dc.b	"idden' name='z00' "
 371  97a8 76616c75653d  	dc.b	"value='0'><button "
 372  97ba 747970653d27  	dc.b	"type='submit'>Save"
 373  97cc 3c2f62757474  	dc.b	"</button><button t"
 374  97de 7970653d2772  	dc.b	"ype='reset'>Undo A"
 375  97f0 6c6c3c2f6275  	dc.b	"ll</button></form>"
 376  9802 3c703e536565  	dc.b	"<p>See Documentati"
 377  9814 6f6e20666f72  	dc.b	"on for help<br>Cod"
 378  9826 652052657669  	dc.b	"e Revision 2020113"
 379  9838 302031373532  	dc.b	"0 1752</p>%y03/91%"
 380  984a 793032526562  	dc.b	"y02Reboot</button>"
 381  985c 3c2f666f726d  	dc.b	"</form><br><br>%y0"
 382  986e 332f36312579  	dc.b	"3/61%y02Refresh</b"
 383  9880 757474        	dc.b	"utt"
 384  9883 6f6e3e3c2f66  	dc.b	"on></form>%y03/60%"
 385  9895 793032494f20  	dc.b	"y02IO Control</but"
 386  98a7 746f6e3e3c2f  	dc.b	"ton></form>%y03/66"
 387  98b9 257930324572  	dc.b	"%y02Error Statisti"
 388  98cb 63733c2f6275  	dc.b	"cs</button></form>"
 389  98dd 3c2f626f6479  	dc.b	"</body></html>",0
 390  98ec               L71_g_HtmlPageStats:
 391  98ec 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 392  98fe 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 393  9910 6561643e3c6c  	dc.b	"ead><link rel='ico"
 394  9922 6e2720687265  	dc.b	"n' href='data:,'><"
 395  9934 2f686561643e  	dc.b	"/head><body><table"
 396  9946 3e3c74723e3c  	dc.b	"><tr><td>Seconds s"
 397  9958 696e63652062  	dc.b	"ince boot %e26</td"
 398  996a 3e3c2f74723e  	dc.b	"></tr><tr><td>RXER"
 399  997c 494620636f75  	dc.b	"IF count %e27</td>"
 400  998e 3c2f74723e3c  	dc.b	"</tr><tr><td>TXERI"
 401  99a0 4620636f756e  	dc.b	"F count %e28</td><"
 402  99b2 2f74723e3c74  	dc.b	"/tr><tr><td>TRANSM"
 403  99c4 495420636f75  	dc.b	"IT count %e29</td>"
 404  99d6 3c2f74723e3c  	dc.b	"</tr></table>%y03/"
 405  99e8 363127        	dc.b	"61'"
 406  99eb 206d6574686f  	dc.b	" method='GET'><but"
 407  99fd 746f6e3e436f  	dc.b	"ton>Configuration<"
 408  9a0f 2f627574746f  	dc.b	"/button></form>%y0"
 409  9a21 332f36362720  	dc.b	"3/66' method='GET'"
 410  9a33 3e3c62757474  	dc.b	"><button>Refresh</"
 411  9a45 627574746f6e  	dc.b	"button></form></bo"
 412  9a57 64793e3c2f68  	dc.b	"dy></html>",0
 413  9a62               L12_g_HtmlPageRstate:
 414  9a62 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 415  9a74 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 416  9a86 6561643e3c74  	dc.b	"ead><title>Short F"
 417  9a98 6f726d3c2f74  	dc.b	"orm</title><link r"
 418  9aaa 656c3d276963  	dc.b	"el='icon' href='da"
 419  9abc 74613a2c273e  	dc.b	"ta:,'></head><body"
 420  9ace 3e3c703e2566  	dc.b	"><p>%f00</p></body"
 421  9ae0 3e3c2f68746d  	dc.b	"></html>",0
 422  9ae9               L32_g_HtmlPageSstate:
 423  9ae9 2566303000    	dc.b	"%f00",0
 424  9aee               L52_page_string00:
 425  9aee 706174746572  	dc.b	"pattern='[0-9]{3}'"
 426  9b00 207469746c65  	dc.b	" title='Enter 000 "
 427  9b12 746f20323535  	dc.b	"to 255' maxlength="
 428  9b24 2733273e3c2f  	dc.b	"'3'></td>",0
 429  9b2e               L72_page_string00_len:
 430  9b2e 3f            	dc.b	63
 431  9b2f               L13_page_string00_len_less4:
 432  9b2f 3b            	dc.b	59
 433  9b30               L33_page_string01:
 434  9b30 706174746572  	dc.b	"pattern='[0-9a-f]{"
 435  9b42 327d27207469  	dc.b	"2}' title='Enter 0"
 436  9b54 3020746f2066  	dc.b	"0 to ff' maxlength"
 437  9b66 3d2732273e3c  	dc.b	"='2'></td>",0
 438  9b71               L53_page_string01_len:
 439  9b71 40            	dc.b	64
 440  9b72               L73_page_string01_len_less4:
 441  9b72 3c            	dc.b	60
 442  9b73               L14_page_string02:
 443  9b73 27206d657468  	dc.b	"' method='GET'><bu"
 444  9b85 74746f6e2074  	dc.b	"tton title='Save f"
 445  9b97 697273742120  	dc.b	"irst! This button "
 446  9ba9 77696c6c206e  	dc.b	"will not save your"
 447  9bbb 206368616e67  	dc.b	" changes'>",0
 448  9bc6               L34_page_string02_len:
 449  9bc6 52            	dc.b	82
 450  9bc7               L54_page_string02_len_less4:
 451  9bc7 4e            	dc.b	78
 452  9bc8               L74_page_string03:
 453  9bc8 3c666f726d20  	dc.b	"<form style='displ"
 454  9bda 61793a20696e  	dc.b	"ay: inline' action"
 455  9bec 3d2700        	dc.b	"='",0
 456  9bef               L15_page_string03_len:
 457  9bef 26            	dc.b	38
 458  9bf0               L35_page_string03_len_less4:
 459  9bf0 22            	dc.b	34
 460  9bf1               L55_page_string04:
 461  9bf1 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 462  9c03 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 463  9c15 6561643e3c6c  	dc.b	"ead><link rel='ico"
 464  9c27 6e2720687265  	dc.b	"n' href='data:,'>",0
 465  9c39               L75_page_string04_len:
 466  9c39 47            	dc.b	71
 467  9c3a               L16_page_string04_len_less4:
 468  9c3a 43            	dc.b	67
 469  9c3b               L36_page_string05:
 470  9c3b 3c7374796c65  	dc.b	"<style>.s0 { backg"
 471  9c4d 726f756e642d  	dc.b	"round-color: red; "
 472  9c5f 77696474683a  	dc.b	"width: 30px; }.s1 "
 473  9c71 7b206261636b  	dc.b	"{ background-color"
 474  9c83 3a2067726565  	dc.b	": green; width: 30"
 475  9c95 70783b207d2e  	dc.b	"px; }.t1 { width: "
 476  9ca7 31323070783b  	dc.b	"120px; }.t2 { widt"
 477  9cb9 683a20313438  	dc.b	"h: 148px; }.t3 { w"
 478  9ccb 696474683a20  	dc.b	"idth: 30px; }.t5 {"
 479  9cdd 207769647468  	dc.b	" width: 60px; }.t6"
 480  9cef 207b20776964  	dc.b	" { width: 25px; }."
 481  9d01 7437207b2077  	dc.b	"t7 { width: 18px; "
 482  9d13 7d2e7438207b  	dc.b	"}.t8 { width: 40px"
 483  9d25 3b207d00      	dc.b	"; }",0
 484  9d29               L56_page_string05_len:
 485  9d29 ed            	dc.b	237
 486  9d2a               L76_page_string05_len_less4:
 487  9d2a e9            	dc.b	233
 488  9d2b               L17_page_string06:
 489  9d2b 7464207b2074  	dc.b	"td { text-align: c"
 490  9d3d 656e7465723b  	dc.b	"enter; border: 1px"
 491  9d4f 20626c61636b  	dc.b	" black solid; }</s"
 492  9d61 74796c653e00  	dc.b	"tyle>",0
 493  9d67               L37_page_string06_len:
 494  9d67 3b            	dc.b	59
 495  9d68               L57_page_string06_len_less4:
 496  9d68 37            	dc.b	55
 552                     ; 1220 uint16_t adjust_template_size()
 552                     ; 1221 {
 554                     .text:	section	.text,new
 555  a475               _adjust_template_size:
 557  a475 89            	pushw	x
 558       00000002      OFST:	set	2
 561                     ; 1239   size = 0;
 563  a476 5f            	clrw	x
 564  a477 1f01          	ldw	(OFST-1,sp),x
 566                     ; 1244   if (current_webpage == WEBPAGE_IOCONTROL) {
 568  a479 c6001a        	ld	a,_current_webpage
 569  a47c 2613          	jrne	L121
 570                     ; 1245     size = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
 572                     ; 1248     size = size + page_string04_len_less4
 572                     ; 1249                 + page_string05_len_less4
 572                     ; 1250 		+ page_string06_len_less4;
 574  a47e ae0d69        	ldw	x,#3433
 575  a481 1f01          	ldw	(OFST-1,sp),x
 577                     ; 1255     size = size + strlen(stored_devicename) - 4 ;
 579  a483 ae4000        	ldw	x,#_stored_devicename
 580  a486 cdf6dd        	call	_strlen
 582  a489 72fb01        	addw	x,(OFST-1,sp)
 583  a48c 1c00a4        	addw	x,#164
 585                     ; 1262     size = size - 48;
 588                     ; 1278     size = size - 8;
 591                     ; 1292     size = size + (2 * page_string03_len_less4);
 594                     ; 1321     size = size + (2 * (page_string02_len_less4));
 598  a48f 204f          	jra	L321
 599  a491               L121:
 600                     ; 1340   else if (current_webpage == WEBPAGE_CONFIGURATION) {
 602  a491 a101          	cp	a,#1
 603  a493 2632          	jrne	L521
 604                     ; 1341     size = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
 606                     ; 1344     size = size + page_string04_len_less4
 606                     ; 1345                 + page_string05_len_less4
 606                     ; 1346 		+ page_string06_len_less4;
 608  a495 ae0dbf        	ldw	x,#3519
 609  a498 1f01          	ldw	(OFST-1,sp),x
 611                     ; 1351     size = size + strlen(stored_devicename) - 4 ;
 613  a49a ae4000        	ldw	x,#_stored_devicename
 614  a49d cdf6dd        	call	_strlen
 616  a4a0 72fb01        	addw	x,(OFST-1,sp)
 617  a4a3 1d001c        	subw	x,#28
 619                     ; 1358     size = size - 12;
 622                     ; 1365     size = size + 1;
 625                     ; 1372     size = size - 12;
 628                     ; 1380     size = size + 2;
 631                     ; 1388     size = size - 4;
 634                     ; 1395     size = size + 1;
 636  a4a6 1f01          	ldw	(OFST-1,sp),x
 638                     ; 1400     size = size + (strlen(stored_mqtt_username) - 4);
 640  a4a8 ae4035        	ldw	x,#_stored_mqtt_username
 641  a4ab cdf6dd        	call	_strlen
 643  a4ae 1d0004        	subw	x,#4
 644  a4b1 72fb01        	addw	x,(OFST-1,sp)
 645  a4b4 1f01          	ldw	(OFST-1,sp),x
 647                     ; 1405     size = size + (strlen(stored_mqtt_password) - 4);
 649  a4b6 ae4040        	ldw	x,#_stored_mqtt_password
 650  a4b9 cdf6dd        	call	_strlen
 652  a4bc 1d0004        	subw	x,#4
 653  a4bf 72fb01        	addw	x,(OFST-1,sp)
 655                     ; 1412     size = size - 15;
 657  a4c2 1c06c9        	addw	x,#1737
 659                     ; 1426     size = size + (3 * page_string03_len_less4);
 662                     ; 1432     size = size + page_string03_len_less4;
 665                     ; 1455     size = size + (12 * (page_string00_len_less4));
 668                     ; 1464     size = size + (4 * (page_string00_len_less4));
 671                     ; 1474     size = size + (6 * (page_string01_len_less4));
 674                     ; 1483     size = size + (3 * (page_string02_len_less4));
 677                     ; 1498     size = size + page_string02_len_less4;
 681  a4c5 2019          	jra	L321
 682  a4c7               L521:
 683                     ; 1572   else if (current_webpage == WEBPAGE_STATS) {
 685  a4c7 a105          	cp	a,#5
 686  a4c9 2605          	jrne	L131
 687                     ; 1573     size = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
 689                     ; 1580     size = size + 24;
 691                     ; 1589     size = size + (2 * page_string03_len_less4);
 693  a4cb ae01d1        	ldw	x,#465
 696  a4ce 2010          	jra	L321
 697  a4d0               L131:
 698                     ; 1597   else if (current_webpage == WEBPAGE_RSTATE) {
 700  a4d0 a106          	cp	a,#6
 701  a4d2 2605          	jrne	L531
 702                     ; 1598     size = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
 704                     ; 1603     size = size + 12;
 706  a4d4 ae0092        	ldw	x,#146
 709  a4d7 2007          	jra	L321
 710  a4d9               L531:
 711                     ; 1610   else if (current_webpage == WEBPAGE_SSTATE) {
 713  a4d9 a107          	cp	a,#7
 714  a4db 2603          	jrne	L321
 715                     ; 1611     size = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
 717                     ; 1616     size = size + 12;
 719  a4dd ae0010        	ldw	x,#16
 721  a4e0               L321:
 722                     ; 1619   return size;
 726  a4e0 5b02          	addw	sp,#2
 727  a4e2 81            	ret	
 818                     ; 1623 void emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
 818                     ; 1624 {
 819                     .text:	section	.text,new
 820  a4e3               _emb_itoa:
 822  a4e3 5207          	subw	sp,#7
 823       00000007      OFST:	set	7
 826                     ; 1642   for (i=0; i < pad; i++) str[i] = '0';
 828  a4e5 0f07          	clr	(OFST+0,sp)
 831  a4e7 200a          	jra	L502
 832  a4e9               L102:
 835  a4e9 5f            	clrw	x
 836  a4ea 97            	ld	xl,a
 837  a4eb 72fb0e        	addw	x,(OFST+7,sp)
 838  a4ee a630          	ld	a,#48
 839  a4f0 f7            	ld	(x),a
 842  a4f1 0c07          	inc	(OFST+0,sp)
 844  a4f3               L502:
 847  a4f3 7b07          	ld	a,(OFST+0,sp)
 848  a4f5 1111          	cp	a,(OFST+10,sp)
 849  a4f7 25f0          	jrult	L102
 850                     ; 1643   str[pad] = '\0';
 852  a4f9 7b11          	ld	a,(OFST+10,sp)
 853  a4fb 5f            	clrw	x
 854  a4fc 97            	ld	xl,a
 855  a4fd 72fb0e        	addw	x,(OFST+7,sp)
 856  a500 7f            	clr	(x)
 857                     ; 1644   if (num == 0) return;
 859  a501 96            	ldw	x,sp
 860  a502 1c000a        	addw	x,#OFST+3
 861  a505 cdfabd        	call	c_lzmp
 863  a508 2603cca5b2    	jreq	L02
 866                     ; 1647   i = 0;
 868  a50d 0f07          	clr	(OFST+0,sp)
 871  a50f 2060          	jra	L712
 872  a511               L312:
 873                     ; 1649     rem = (uint8_t)(num % base);
 875  a511 7b10          	ld	a,(OFST+9,sp)
 876  a513 b703          	ld	c_lreg+3,a
 877  a515 3f02          	clr	c_lreg+2
 878  a517 3f01          	clr	c_lreg+1
 879  a519 3f00          	clr	c_lreg
 880  a51b 96            	ldw	x,sp
 881  a51c 5c            	incw	x
 882  a51d cdfad0        	call	c_rtol
 885  a520 96            	ldw	x,sp
 886  a521 1c000a        	addw	x,#OFST+3
 887  a524 cdf96a        	call	c_ltor
 889  a527 96            	ldw	x,sp
 890  a528 5c            	incw	x
 891  a529 cdfaa3        	call	c_lumd
 893  a52c b603          	ld	a,c_lreg+3
 894  a52e 6b06          	ld	(OFST-1,sp),a
 896                     ; 1650     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
 898  a530 a10a          	cp	a,#10
 899  a532 7b07          	ld	a,(OFST+0,sp)
 900  a534 250d          	jrult	L322
 903  a536 0c07          	inc	(OFST+0,sp)
 905  a538 5f            	clrw	x
 906  a539 97            	ld	xl,a
 907  a53a 72fb0e        	addw	x,(OFST+7,sp)
 908  a53d 7b06          	ld	a,(OFST-1,sp)
 909  a53f ab57          	add	a,#87
 911  a541 200b          	jra	L522
 912  a543               L322:
 913                     ; 1651     else str[i++] = (uint8_t)(rem + '0');
 915  a543 0c07          	inc	(OFST+0,sp)
 917  a545 5f            	clrw	x
 918  a546 97            	ld	xl,a
 919  a547 72fb0e        	addw	x,(OFST+7,sp)
 920  a54a 7b06          	ld	a,(OFST-1,sp)
 921  a54c ab30          	add	a,#48
 922  a54e               L522:
 923  a54e f7            	ld	(x),a
 924                     ; 1652     num = num/base;
 926  a54f 7b10          	ld	a,(OFST+9,sp)
 927  a551 b703          	ld	c_lreg+3,a
 928  a553 3f02          	clr	c_lreg+2
 929  a555 3f01          	clr	c_lreg+1
 930  a557 3f00          	clr	c_lreg
 931  a559 96            	ldw	x,sp
 932  a55a 5c            	incw	x
 933  a55b cdfad0        	call	c_rtol
 936  a55e 96            	ldw	x,sp
 937  a55f 1c000a        	addw	x,#OFST+3
 938  a562 cdf96a        	call	c_ltor
 940  a565 96            	ldw	x,sp
 941  a566 5c            	incw	x
 942  a567 cdf97c        	call	c_ludv
 944  a56a 96            	ldw	x,sp
 945  a56b 1c000a        	addw	x,#OFST+3
 946  a56e cdfad0        	call	c_rtol
 948  a571               L712:
 949                     ; 1648   while (num != 0) {
 951  a571 96            	ldw	x,sp
 952  a572 1c000a        	addw	x,#OFST+3
 953  a575 cdfabd        	call	c_lzmp
 955  a578 2697          	jrne	L312
 956                     ; 1661     start = 0;
 958  a57a 0f06          	clr	(OFST-1,sp)
 960                     ; 1662     end = (uint8_t)(pad - 1);
 962  a57c 7b11          	ld	a,(OFST+10,sp)
 963  a57e 4a            	dec	a
 964  a57f 6b07          	ld	(OFST+0,sp),a
 967  a581 2029          	jra	L332
 968  a583               L722:
 969                     ; 1665       temp = str[start];
 971  a583 5f            	clrw	x
 972  a584 97            	ld	xl,a
 973  a585 72fb0e        	addw	x,(OFST+7,sp)
 974  a588 f6            	ld	a,(x)
 975  a589 6b05          	ld	(OFST-2,sp),a
 977                     ; 1666       str[start] = str[end];
 979  a58b 5f            	clrw	x
 980  a58c 7b06          	ld	a,(OFST-1,sp)
 981  a58e 97            	ld	xl,a
 982  a58f 72fb0e        	addw	x,(OFST+7,sp)
 983  a592 7b07          	ld	a,(OFST+0,sp)
 984  a594 905f          	clrw	y
 985  a596 9097          	ld	yl,a
 986  a598 72f90e        	addw	y,(OFST+7,sp)
 987  a59b 90f6          	ld	a,(y)
 988  a59d f7            	ld	(x),a
 989                     ; 1667       str[end] = temp;
 991  a59e 5f            	clrw	x
 992  a59f 7b07          	ld	a,(OFST+0,sp)
 993  a5a1 97            	ld	xl,a
 994  a5a2 72fb0e        	addw	x,(OFST+7,sp)
 995  a5a5 7b05          	ld	a,(OFST-2,sp)
 996  a5a7 f7            	ld	(x),a
 997                     ; 1668       start++;
 999  a5a8 0c06          	inc	(OFST-1,sp)
1001                     ; 1669       end--;
1003  a5aa 0a07          	dec	(OFST+0,sp)
1005  a5ac               L332:
1006                     ; 1664     while (start < end) {
1006                     ; 1665       temp = str[start];
1006                     ; 1666       str[start] = str[end];
1006                     ; 1667       str[end] = temp;
1006                     ; 1668       start++;
1006                     ; 1669       end--;
1008  a5ac 7b06          	ld	a,(OFST-1,sp)
1009  a5ae 1107          	cp	a,(OFST+0,sp)
1010  a5b0 25d1          	jrult	L722
1011                     ; 1672 }
1012  a5b2               L02:
1015  a5b2 5b07          	addw	sp,#7
1016  a5b4 81            	ret	
1076                     ; 1675 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1076                     ; 1676 {
1077                     .text:	section	.text,new
1078  a5b5               L3_CopyStringP:
1080  a5b5 89            	pushw	x
1081  a5b6 5203          	subw	sp,#3
1082       00000003      OFST:	set	3
1085                     ; 1681   nBytes = 0;
1087  a5b8 5f            	clrw	x
1089  a5b9 2014          	jra	L172
1090  a5bb               L562:
1091                     ; 1683     **ppBuffer = Character;
1093  a5bb 1e04          	ldw	x,(OFST+1,sp)
1094  a5bd fe            	ldw	x,(x)
1095  a5be f7            	ld	(x),a
1096                     ; 1684     *ppBuffer = *ppBuffer + 1;
1098  a5bf 1e04          	ldw	x,(OFST+1,sp)
1099  a5c1 9093          	ldw	y,x
1100  a5c3 fe            	ldw	x,(x)
1101  a5c4 5c            	incw	x
1102  a5c5 90ff          	ldw	(y),x
1103                     ; 1685     pString = pString + 1;
1105  a5c7 1e08          	ldw	x,(OFST+5,sp)
1106  a5c9 5c            	incw	x
1107  a5ca 1f08          	ldw	(OFST+5,sp),x
1108                     ; 1686     nBytes++;
1110  a5cc 1e01          	ldw	x,(OFST-2,sp)
1111  a5ce 5c            	incw	x
1112  a5cf               L172:
1113  a5cf 1f01          	ldw	(OFST-2,sp),x
1115                     ; 1682   while ((Character = pString[0]) != '\0') {
1115                     ; 1683     **ppBuffer = Character;
1115                     ; 1684     *ppBuffer = *ppBuffer + 1;
1115                     ; 1685     pString = pString + 1;
1115                     ; 1686     nBytes++;
1117  a5d1 1e08          	ldw	x,(OFST+5,sp)
1118  a5d3 f6            	ld	a,(x)
1119  a5d4 6b03          	ld	(OFST+0,sp),a
1121  a5d6 26e3          	jrne	L562
1122                     ; 1688   return nBytes;
1124  a5d8 1e01          	ldw	x,(OFST-2,sp)
1127  a5da 5b05          	addw	sp,#5
1128  a5dc 81            	ret	
1187                     ; 1692 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint16_t nDataLen)
1187                     ; 1693 {
1188                     .text:	section	.text,new
1189  a5dd               L5_CopyHttpHeader:
1191  a5dd 89            	pushw	x
1192  a5de 5203          	subw	sp,#3
1193       00000003      OFST:	set	3
1196                     ; 1697   nBytes = 0;
1198  a5e0 5f            	clrw	x
1199  a5e1 1f02          	ldw	(OFST-1,sp),x
1201                     ; 1699   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1203  a5e3 ae9e5c        	ldw	x,#L123
1204  a5e6 89            	pushw	x
1205  a5e7 96            	ldw	x,sp
1206  a5e8 1c0006        	addw	x,#OFST+3
1207  a5eb cda5b5        	call	L3_CopyStringP
1209  a5ee 5b02          	addw	sp,#2
1210  a5f0 72fb02        	addw	x,(OFST-1,sp)
1211  a5f3 1f02          	ldw	(OFST-1,sp),x
1213                     ; 1700   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1215  a5f5 ae9e59        	ldw	x,#L323
1216  a5f8 89            	pushw	x
1217  a5f9 96            	ldw	x,sp
1218  a5fa 1c0006        	addw	x,#OFST+3
1219  a5fd cda5b5        	call	L3_CopyStringP
1221  a600 5b02          	addw	sp,#2
1222  a602 72fb02        	addw	x,(OFST-1,sp)
1223  a605 1f02          	ldw	(OFST-1,sp),x
1225                     ; 1702   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1227  a607 ae9e49        	ldw	x,#L523
1228  a60a 89            	pushw	x
1229  a60b 96            	ldw	x,sp
1230  a60c 1c0006        	addw	x,#OFST+3
1231  a60f cda5b5        	call	L3_CopyStringP
1233  a612 5b02          	addw	sp,#2
1234  a614 72fb02        	addw	x,(OFST-1,sp)
1235  a617 1f02          	ldw	(OFST-1,sp),x
1237                     ; 1706   emb_itoa(nDataLen, OctetArray, 10, 5);
1239  a619 4b05          	push	#5
1240  a61b 4b0a          	push	#10
1241  a61d ae005c        	ldw	x,#_OctetArray
1242  a620 89            	pushw	x
1243  a621 1e0c          	ldw	x,(OFST+9,sp)
1244  a623 cdfb31        	call	c_uitolx
1246  a626 be02          	ldw	x,c_lreg+2
1247  a628 89            	pushw	x
1248  a629 be00          	ldw	x,c_lreg
1249  a62b 89            	pushw	x
1250  a62c cda4e3        	call	_emb_itoa
1252  a62f 5b08          	addw	sp,#8
1253                     ; 1707   for (i=0; i<5; i++) {
1255  a631 4f            	clr	a
1256  a632 6b01          	ld	(OFST-2,sp),a
1258  a634               L723:
1259                     ; 1708     *pBuffer = (uint8_t)OctetArray[i];
1261  a634 5f            	clrw	x
1262  a635 97            	ld	xl,a
1263  a636 d6005c        	ld	a,(_OctetArray,x)
1264  a639 1e04          	ldw	x,(OFST+1,sp)
1265  a63b f7            	ld	(x),a
1266                     ; 1709     pBuffer = pBuffer + 1;
1268  a63c 5c            	incw	x
1269  a63d 1f04          	ldw	(OFST+1,sp),x
1270                     ; 1707   for (i=0; i<5; i++) {
1272  a63f 0c01          	inc	(OFST-2,sp)
1276  a641 7b01          	ld	a,(OFST-2,sp)
1277  a643 a105          	cp	a,#5
1278  a645 25ed          	jrult	L723
1279                     ; 1711   nBytes += 5;
1281  a647 1e02          	ldw	x,(OFST-1,sp)
1282  a649 1c0005        	addw	x,#5
1283  a64c 1f02          	ldw	(OFST-1,sp),x
1285                     ; 1713   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1287  a64e ae9e59        	ldw	x,#L323
1288  a651 89            	pushw	x
1289  a652 96            	ldw	x,sp
1290  a653 1c0006        	addw	x,#OFST+3
1291  a656 cda5b5        	call	L3_CopyStringP
1293  a659 5b02          	addw	sp,#2
1294  a65b 72fb02        	addw	x,(OFST-1,sp)
1295  a65e 1f02          	ldw	(OFST-1,sp),x
1297                     ; 1716   nBytes += CopyStringP(&pBuffer, (const char *)("Cache-Control: no-cache, no-store\r\n"));
1299  a660 ae9e25        	ldw	x,#L533
1300  a663 89            	pushw	x
1301  a664 96            	ldw	x,sp
1302  a665 1c0006        	addw	x,#OFST+3
1303  a668 cda5b5        	call	L3_CopyStringP
1305  a66b 5b02          	addw	sp,#2
1306  a66d 72fb02        	addw	x,(OFST-1,sp)
1307  a670 1f02          	ldw	(OFST-1,sp),x
1309                     ; 1718   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type: text/html; charset=utf-8\r\n"));
1311  a672 ae9dfc        	ldw	x,#L733
1312  a675 89            	pushw	x
1313  a676 96            	ldw	x,sp
1314  a677 1c0006        	addw	x,#OFST+3
1315  a67a cda5b5        	call	L3_CopyStringP
1317  a67d 5b02          	addw	sp,#2
1318  a67f 72fb02        	addw	x,(OFST-1,sp)
1319  a682 1f02          	ldw	(OFST-1,sp),x
1321                     ; 1720   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
1323  a684 ae9de9        	ldw	x,#L143
1324  a687 89            	pushw	x
1325  a688 96            	ldw	x,sp
1326  a689 1c0006        	addw	x,#OFST+3
1327  a68c cda5b5        	call	L3_CopyStringP
1329  a68f 5b02          	addw	sp,#2
1330  a691 72fb02        	addw	x,(OFST-1,sp)
1331  a694 1f02          	ldw	(OFST-1,sp),x
1333                     ; 1721   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1335  a696 ae9e59        	ldw	x,#L323
1336  a699 89            	pushw	x
1337  a69a 96            	ldw	x,sp
1338  a69b 1c0006        	addw	x,#OFST+3
1339  a69e cda5b5        	call	L3_CopyStringP
1341  a6a1 5b02          	addw	sp,#2
1342  a6a3 72fb02        	addw	x,(OFST-1,sp)
1344                     ; 1723   return nBytes;
1348  a6a6 5b05          	addw	sp,#5
1349  a6a8 81            	ret	
1506                     	switch	.const
1507  9d69               L431:
1508  9d69 a856          	dc.w	L343
1509  9d6b a864          	dc.w	L543
1510  9d6d a872          	dc.w	L743
1511  9d6f a880          	dc.w	L153
1512  9d71 a88e          	dc.w	L353
1513  9d73 a89c          	dc.w	L553
1514  9d75 a8aa          	dc.w	L753
1515  9d77 a8b7          	dc.w	L163
1516  9d79 a8c4          	dc.w	L363
1517  9d7b a8d1          	dc.w	L563
1518  9d7d a8de          	dc.w	L763
1519  9d7f a8eb          	dc.w	L173
1520  9d81 a8f8          	dc.w	L373
1521  9d83 a905          	dc.w	L573
1522  9d85 a912          	dc.w	L773
1523  9d87 a91f          	dc.w	L104
1524                     ; 1727 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
1524                     ; 1728 {
1525                     .text:	section	.text,new
1526  a6a9               L7_CopyHttpData:
1528  a6a9 89            	pushw	x
1529  a6aa 5208          	subw	sp,#8
1530       00000008      OFST:	set	8
1533                     ; 1747   nBytes = 0;
1535  a6ac 5f            	clrw	x
1536  a6ad 1f05          	ldw	(OFST-3,sp),x
1538                     ; 1748   nParsedNum = 0;
1540  a6af 0f07          	clr	(OFST-1,sp)
1542                     ; 1749   nParsedMode = 0;
1544  a6b1 0f04          	clr	(OFST-4,sp)
1546                     ; 1804   nMaxBytes = UIP_TCP_MSS - 25;
1548  a6b3 ae019f        	ldw	x,#415
1549  a6b6 1f11          	ldw	(OFST+9,sp),x
1551  a6b8 ccac88        	jra	L325
1552  a6bb               L125:
1553                     ; 1838     if (*pDataLeft > 0) {
1555  a6bb 1e0f          	ldw	x,(OFST+7,sp)
1556  a6bd e601          	ld	a,(1,x)
1557  a6bf fa            	or	a,(x)
1558  a6c0 2603ccac91    	jreq	L525
1559                     ; 1845       if (insertion_flag[0] != 0) {
1561  a6c5 c60017        	ld	a,_insertion_flag
1562  a6c8 2711          	jreq	L135
1563                     ; 1854         nParsedMode = insertion_flag[1];
1565  a6ca c60018        	ld	a,_insertion_flag+1
1566  a6cd 6b04          	ld	(OFST-4,sp),a
1568                     ; 1855         nParsedNum = insertion_flag[2];
1570  a6cf c60019        	ld	a,_insertion_flag+2
1571  a6d2 6b07          	ld	(OFST-1,sp),a
1573                     ; 1856 	nByte = '0'; // Need to set nByte to something other than '%' so we
1575  a6d4 a630          	ld	a,#48
1576  a6d6 6b02          	ld	(OFST-6,sp),a
1579  a6d8 cca79a        	jra	L335
1580  a6db               L135:
1581                     ; 1869         memcpy(&nByte, *ppData, 1);
1583  a6db 96            	ldw	x,sp
1584  a6dc 1c0002        	addw	x,#OFST-6
1585  a6df bf04          	ldw	c_x,x
1586  a6e1 160d          	ldw	y,(OFST+5,sp)
1587  a6e3 90fe          	ldw	y,(y)
1588  a6e5 90bf07        	ldw	c_y,y
1589  a6e8 ae0001        	ldw	x,#1
1590  a6eb               L25:
1591  a6eb 5a            	decw	x
1592  a6ec 92d607        	ld	a,([c_y.w],x)
1593  a6ef 92d704        	ld	([c_x.w],x),a
1594  a6f2 5d            	tnzw	x
1595  a6f3 26f6          	jrne	L25
1596                     ; 1912         if (nByte == '%') {
1598  a6f5 7b02          	ld	a,(OFST-6,sp)
1599  a6f7 a125          	cp	a,#37
1600  a6f9 26dd          	jrne	L335
1601                     ; 1913           *ppData = *ppData + 1;
1603  a6fb 1e0d          	ldw	x,(OFST+5,sp)
1604  a6fd 9093          	ldw	y,x
1605  a6ff fe            	ldw	x,(x)
1606  a700 5c            	incw	x
1607  a701 90ff          	ldw	(y),x
1608                     ; 1914           *pDataLeft = *pDataLeft - 1;
1610  a703 1e0f          	ldw	x,(OFST+7,sp)
1611  a705 9093          	ldw	y,x
1612  a707 fe            	ldw	x,(x)
1613  a708 5a            	decw	x
1614  a709 90ff          	ldw	(y),x
1615                     ; 1919           memcpy(&nParsedMode, *ppData, 1);
1617  a70b 96            	ldw	x,sp
1618  a70c 1c0004        	addw	x,#OFST-4
1619  a70f bf04          	ldw	c_x,x
1620  a711 160d          	ldw	y,(OFST+5,sp)
1621  a713 90fe          	ldw	y,(y)
1622  a715 90bf07        	ldw	c_y,y
1623  a718 ae0001        	ldw	x,#1
1624  a71b               L45:
1625  a71b 5a            	decw	x
1626  a71c 92d607        	ld	a,([c_y.w],x)
1627  a71f 92d704        	ld	([c_x.w],x),a
1628  a722 5d            	tnzw	x
1629  a723 26f6          	jrne	L45
1630                     ; 1920           *ppData = *ppData + 1;
1632  a725 1e0d          	ldw	x,(OFST+5,sp)
1633  a727 9093          	ldw	y,x
1634  a729 fe            	ldw	x,(x)
1635  a72a 5c            	incw	x
1636  a72b 90ff          	ldw	(y),x
1637                     ; 1921           *pDataLeft = *pDataLeft - 1;
1639  a72d 1e0f          	ldw	x,(OFST+7,sp)
1640  a72f 9093          	ldw	y,x
1641  a731 fe            	ldw	x,(x)
1642  a732 5a            	decw	x
1643  a733 90ff          	ldw	(y),x
1644                     ; 1926           memcpy(&temp, *ppData, 1);
1646  a735 96            	ldw	x,sp
1647  a736 5c            	incw	x
1648  a737 bf04          	ldw	c_x,x
1649  a739 160d          	ldw	y,(OFST+5,sp)
1650  a73b 90fe          	ldw	y,(y)
1651  a73d 90bf07        	ldw	c_y,y
1652  a740 ae0001        	ldw	x,#1
1653  a743               L65:
1654  a743 5a            	decw	x
1655  a744 92d607        	ld	a,([c_y.w],x)
1656  a747 92d704        	ld	([c_x.w],x),a
1657  a74a 5d            	tnzw	x
1658  a74b 26f6          	jrne	L65
1659                     ; 1927           nParsedNum = (uint8_t)((temp - '0') * 10);
1661  a74d 7b01          	ld	a,(OFST-7,sp)
1662  a74f 97            	ld	xl,a
1663  a750 a60a          	ld	a,#10
1664  a752 42            	mul	x,a
1665  a753 9f            	ld	a,xl
1666  a754 a0e0          	sub	a,#224
1667  a756 6b07          	ld	(OFST-1,sp),a
1669                     ; 1928           *ppData = *ppData + 1;
1671  a758 1e0d          	ldw	x,(OFST+5,sp)
1672  a75a 9093          	ldw	y,x
1673  a75c fe            	ldw	x,(x)
1674  a75d 5c            	incw	x
1675  a75e 90ff          	ldw	(y),x
1676                     ; 1929           *pDataLeft = *pDataLeft - 1;
1678  a760 1e0f          	ldw	x,(OFST+7,sp)
1679  a762 9093          	ldw	y,x
1680  a764 fe            	ldw	x,(x)
1681  a765 5a            	decw	x
1682  a766 90ff          	ldw	(y),x
1683                     ; 1934           memcpy(&temp, *ppData, 1);
1685  a768 96            	ldw	x,sp
1686  a769 5c            	incw	x
1687  a76a bf04          	ldw	c_x,x
1688  a76c 160d          	ldw	y,(OFST+5,sp)
1689  a76e 90fe          	ldw	y,(y)
1690  a770 90bf07        	ldw	c_y,y
1691  a773 ae0001        	ldw	x,#1
1692  a776               L06:
1693  a776 5a            	decw	x
1694  a777 92d607        	ld	a,([c_y.w],x)
1695  a77a 92d704        	ld	([c_x.w],x),a
1696  a77d 5d            	tnzw	x
1697  a77e 26f6          	jrne	L06
1698                     ; 1935           nParsedNum = (uint8_t)(nParsedNum + temp - '0');
1700  a780 7b07          	ld	a,(OFST-1,sp)
1701  a782 1b01          	add	a,(OFST-7,sp)
1702  a784 a030          	sub	a,#48
1703  a786 6b07          	ld	(OFST-1,sp),a
1705                     ; 1936           *ppData = *ppData + 1;
1707  a788 1e0d          	ldw	x,(OFST+5,sp)
1708  a78a 9093          	ldw	y,x
1709  a78c fe            	ldw	x,(x)
1710  a78d 5c            	incw	x
1711  a78e 90ff          	ldw	(y),x
1712                     ; 1937           *pDataLeft = *pDataLeft - 1;
1714  a790 1e0f          	ldw	x,(OFST+7,sp)
1715  a792 9093          	ldw	y,x
1716  a794 fe            	ldw	x,(x)
1717  a795 5a            	decw	x
1718  a796 90ff          	ldw	(y),x
1719  a798 7b02          	ld	a,(OFST-6,sp)
1720  a79a               L335:
1721                     ; 1941       if ((nByte == '%') || (insertion_flag[0] != 0)) {
1723  a79a a125          	cp	a,#37
1724  a79c 2709          	jreq	L145
1726  a79e 725d0017      	tnz	_insertion_flag
1727  a7a2 2603ccac6b    	jreq	L735
1728  a7a7               L145:
1729                     ; 1951         if (nParsedMode == 'i') {
1731  a7a7 7b04          	ld	a,(OFST-4,sp)
1732  a7a9 a169          	cp	a,#105
1733  a7ab 262b          	jrne	L345
1734                     ; 1965           if (nParsedNum > 7) {
1736  a7ad 7b07          	ld	a,(OFST-1,sp)
1737  a7af a108          	cp	a,#8
1738  a7b1 2520          	jrult	L545
1739                     ; 1967 	    i = GpioGetPin(nParsedNum);
1741  a7b3 cdbc05        	call	_GpioGetPin
1743  a7b6 6b08          	ld	(OFST+0,sp),a
1745                     ; 1968 	    if (invert_input == 0x00) *pBuffer = (uint8_t)(i + '0');
1747  a7b8 725d0165      	tnz	_invert_input
1748  a7bc 2607          	jrne	L745
1751  a7be               LC012:
1752  a7be ab30          	add	a,#48
1753  a7c0 1e09          	ldw	x,(OFST+1,sp)
1755  a7c2 ccaba1        	jra	L7201
1756  a7c5               L745:
1757                     ; 1970 	      if (i == 0) *pBuffer = (uint8_t)('1');
1759  a7c5 7b08          	ld	a,(OFST+0,sp)
1760  a7c7 2703ccab9d    	jrne	L5201
1763  a7cc 1e09          	ldw	x,(OFST+1,sp)
1764  a7ce a631          	ld	a,#49
1766  a7d0 ccaba1        	jra	L7201
1767                     ; 1971 	      else *pBuffer = (uint8_t)('0');
1768                     ; 1973             pBuffer++;
1769                     ; 1974             nBytes++;
1771  a7d3               L545:
1772                     ; 1978 	    *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
1774  a7d3 cdbc05        	call	_GpioGetPin
1776                     ; 1979             pBuffer++;
1777                     ; 1980             nBytes++;
1778  a7d6 20e6          	jp	LC012
1779  a7d8               L345:
1780                     ; 1998         else if ((nParsedMode == 'o' && ((uint8_t)(GpioGetPin(nParsedNum) == 1)))
1780                     ; 1999 	      || (nParsedMode == 'p' && ((uint8_t)(GpioGetPin(nParsedNum) == 0)))) { 
1782  a7d8 a16f          	cp	a,#111
1783  a7da 260a          	jrne	L765
1785  a7dc 7b07          	ld	a,(OFST-1,sp)
1786  a7de cdbc05        	call	_GpioGetPin
1788  a7e1 4a            	dec	a
1789  a7e2 270e          	jreq	L565
1790  a7e4 7b04          	ld	a,(OFST-4,sp)
1791  a7e6               L765:
1793  a7e6 a170          	cp	a,#112
1794  a7e8 2626          	jrne	L365
1796  a7ea 7b07          	ld	a,(OFST-1,sp)
1797  a7ec cdbc05        	call	_GpioGetPin
1799  a7ef 4d            	tnz	a
1800  a7f0 261e          	jrne	L365
1801  a7f2               L565:
1802                     ; 2004           for(i=0; i<7; i++) {
1804  a7f2 4f            	clr	a
1805  a7f3 6b08          	ld	(OFST+0,sp),a
1807  a7f5               L175:
1808                     ; 2005             *pBuffer = checked[i];
1810  a7f5 5f            	clrw	x
1811  a7f6 97            	ld	xl,a
1812  a7f7 d68080        	ld	a,(L11_checked,x)
1813  a7fa 1e09          	ldw	x,(OFST+1,sp)
1814  a7fc f7            	ld	(x),a
1815                     ; 2006             pBuffer++;
1817  a7fd 5c            	incw	x
1818  a7fe 1f09          	ldw	(OFST+1,sp),x
1819                     ; 2004           for(i=0; i<7; i++) {
1821  a800 0c08          	inc	(OFST+0,sp)
1825  a802 7b08          	ld	a,(OFST+0,sp)
1826  a804 a107          	cp	a,#7
1827  a806 25ed          	jrult	L175
1828                     ; 2008 	  nBytes += 7;
1830  a808 1e05          	ldw	x,(OFST-3,sp)
1831  a80a 1c0007        	addw	x,#7
1833  a80d ccac86        	jp	LC006
1834  a810               L365:
1835                     ; 2011         else if (nParsedMode == 'a') {
1837  a810 7b04          	ld	a,(OFST-4,sp)
1838  a812 a161          	cp	a,#97
1839  a814 2629          	jrne	L106
1840                     ; 2013 	  for(i=0; i<19; i++) {
1842  a816 4f            	clr	a
1843  a817 6b08          	ld	(OFST+0,sp),a
1845  a819               L306:
1846                     ; 2014 	    if (stored_devicename[i] != '\0') {
1848  a819 5f            	clrw	x
1849  a81a 97            	ld	xl,a
1850  a81b 724d4000      	tnz	(_stored_devicename,x)
1851  a81f 2603ccac88    	jreq	L325
1852                     ; 2015               *pBuffer = (uint8_t)(stored_devicename[i]);
1854  a824 5f            	clrw	x
1855  a825 97            	ld	xl,a
1856  a826 d64000        	ld	a,(_stored_devicename,x)
1857  a829 1e09          	ldw	x,(OFST+1,sp)
1858  a82b f7            	ld	(x),a
1859                     ; 2016               pBuffer++;
1861  a82c 5c            	incw	x
1862  a82d 1f09          	ldw	(OFST+1,sp),x
1863                     ; 2017               nBytes++;
1865  a82f 1e05          	ldw	x,(OFST-3,sp)
1866  a831 5c            	incw	x
1867  a832 1f05          	ldw	(OFST-3,sp),x
1870                     ; 2013 	  for(i=0; i<19; i++) {
1872  a834 0c08          	inc	(OFST+0,sp)
1876  a836 7b08          	ld	a,(OFST+0,sp)
1877  a838 a113          	cp	a,#19
1878  a83a 25dd          	jrult	L306
1879  a83c ccac88        	jra	L325
1880  a83f               L106:
1881                     ; 2023         else if (nParsedMode == 'b') {
1883  a83f a162          	cp	a,#98
1884  a841 2703cca95b    	jrne	L716
1885                     ; 2028           switch (nParsedNum)
1887  a846 7b07          	ld	a,(OFST-1,sp)
1889                     ; 2049 	    default: break;
1890  a848 a110          	cp	a,#16
1891  a84a 2503cca93d    	jruge	L326
1892  a84f 5f            	clrw	x
1893  a850 97            	ld	xl,a
1894  a851 58            	sllw	x
1895  a852 de9d69        	ldw	x,(L431,x)
1896  a855 fc            	jp	(x)
1897  a856               L343:
1898                     ; 2031 	    case 0:  emb_itoa(stored_hostaddr[3], OctetArray, 10, 3); break;
1900  a856 4b03          	push	#3
1901  a858 4b0a          	push	#10
1902  a85a ae005c        	ldw	x,#_OctetArray
1903  a85d 89            	pushw	x
1904  a85e c6402a        	ld	a,_stored_hostaddr+3
1908  a861 cca92a        	jp	LC001
1909  a864               L543:
1910                     ; 2032 	    case 1:  emb_itoa(stored_hostaddr[2], OctetArray, 10, 3); break;
1912  a864 4b03          	push	#3
1913  a866 4b0a          	push	#10
1914  a868 ae005c        	ldw	x,#_OctetArray
1915  a86b 89            	pushw	x
1916  a86c c64029        	ld	a,_stored_hostaddr+2
1920  a86f cca92a        	jp	LC001
1921  a872               L743:
1922                     ; 2033 	    case 2:  emb_itoa(stored_hostaddr[1], OctetArray, 10, 3); break;
1924  a872 4b03          	push	#3
1925  a874 4b0a          	push	#10
1926  a876 ae005c        	ldw	x,#_OctetArray
1927  a879 89            	pushw	x
1928  a87a c64028        	ld	a,_stored_hostaddr+1
1932  a87d cca92a        	jp	LC001
1933  a880               L153:
1934                     ; 2034 	    case 3:  emb_itoa(stored_hostaddr[0], OctetArray, 10, 3); break;
1936  a880 4b03          	push	#3
1937  a882 4b0a          	push	#10
1938  a884 ae005c        	ldw	x,#_OctetArray
1939  a887 89            	pushw	x
1940  a888 c64027        	ld	a,_stored_hostaddr
1944  a88b cca92a        	jp	LC001
1945  a88e               L353:
1946                     ; 2035 	    case 4:  emb_itoa(stored_draddr[3],   OctetArray, 10, 3); break;
1948  a88e 4b03          	push	#3
1949  a890 4b0a          	push	#10
1950  a892 ae005c        	ldw	x,#_OctetArray
1951  a895 89            	pushw	x
1952  a896 c64026        	ld	a,_stored_draddr+3
1956  a899 cca92a        	jp	LC001
1957  a89c               L553:
1958                     ; 2036 	    case 5:  emb_itoa(stored_draddr[2],   OctetArray, 10, 3); break;
1960  a89c 4b03          	push	#3
1961  a89e 4b0a          	push	#10
1962  a8a0 ae005c        	ldw	x,#_OctetArray
1963  a8a3 89            	pushw	x
1964  a8a4 c64025        	ld	a,_stored_draddr+2
1968  a8a7 cca92a        	jp	LC001
1969  a8aa               L753:
1970                     ; 2037 	    case 6:  emb_itoa(stored_draddr[1],   OctetArray, 10, 3); break;
1972  a8aa 4b03          	push	#3
1973  a8ac 4b0a          	push	#10
1974  a8ae ae005c        	ldw	x,#_OctetArray
1975  a8b1 89            	pushw	x
1976  a8b2 c64024        	ld	a,_stored_draddr+1
1980  a8b5 2073          	jp	LC001
1981  a8b7               L163:
1982                     ; 2038 	    case 7:  emb_itoa(stored_draddr[0],   OctetArray, 10, 3); break;
1984  a8b7 4b03          	push	#3
1985  a8b9 4b0a          	push	#10
1986  a8bb ae005c        	ldw	x,#_OctetArray
1987  a8be 89            	pushw	x
1988  a8bf c64023        	ld	a,_stored_draddr
1992  a8c2 2066          	jp	LC001
1993  a8c4               L363:
1994                     ; 2039 	    case 8:  emb_itoa(stored_netmask[3],  OctetArray, 10, 3); break;
1996  a8c4 4b03          	push	#3
1997  a8c6 4b0a          	push	#10
1998  a8c8 ae005c        	ldw	x,#_OctetArray
1999  a8cb 89            	pushw	x
2000  a8cc c64022        	ld	a,_stored_netmask+3
2004  a8cf 2059          	jp	LC001
2005  a8d1               L563:
2006                     ; 2040 	    case 9:  emb_itoa(stored_netmask[2],  OctetArray, 10, 3); break;
2008  a8d1 4b03          	push	#3
2009  a8d3 4b0a          	push	#10
2010  a8d5 ae005c        	ldw	x,#_OctetArray
2011  a8d8 89            	pushw	x
2012  a8d9 c64021        	ld	a,_stored_netmask+2
2016  a8dc 204c          	jp	LC001
2017  a8de               L763:
2018                     ; 2041 	    case 10: emb_itoa(stored_netmask[1],  OctetArray, 10, 3); break;
2020  a8de 4b03          	push	#3
2021  a8e0 4b0a          	push	#10
2022  a8e2 ae005c        	ldw	x,#_OctetArray
2023  a8e5 89            	pushw	x
2024  a8e6 c64020        	ld	a,_stored_netmask+1
2028  a8e9 203f          	jp	LC001
2029  a8eb               L173:
2030                     ; 2042 	    case 11: emb_itoa(stored_netmask[0],  OctetArray, 10, 3); break;
2032  a8eb 4b03          	push	#3
2033  a8ed 4b0a          	push	#10
2034  a8ef ae005c        	ldw	x,#_OctetArray
2035  a8f2 89            	pushw	x
2036  a8f3 c6401f        	ld	a,_stored_netmask
2040  a8f6 2032          	jp	LC001
2041  a8f8               L373:
2042                     ; 2044 	    case 12: emb_itoa(stored_mqttserveraddr[3], OctetArray, 10, 3); break;
2044  a8f8 4b03          	push	#3
2045  a8fa 4b0a          	push	#10
2046  a8fc ae005c        	ldw	x,#_OctetArray
2047  a8ff 89            	pushw	x
2048  a900 c64034        	ld	a,_stored_mqttserveraddr+3
2052  a903 2025          	jp	LC001
2053  a905               L573:
2054                     ; 2045 	    case 13: emb_itoa(stored_mqttserveraddr[2], OctetArray, 10, 3); break;
2056  a905 4b03          	push	#3
2057  a907 4b0a          	push	#10
2058  a909 ae005c        	ldw	x,#_OctetArray
2059  a90c 89            	pushw	x
2060  a90d c64033        	ld	a,_stored_mqttserveraddr+2
2064  a910 2018          	jp	LC001
2065  a912               L773:
2066                     ; 2046 	    case 14: emb_itoa(stored_mqttserveraddr[1], OctetArray, 10, 3); break;
2068  a912 4b03          	push	#3
2069  a914 4b0a          	push	#10
2070  a916 ae005c        	ldw	x,#_OctetArray
2071  a919 89            	pushw	x
2072  a91a c64032        	ld	a,_stored_mqttserveraddr+1
2076  a91d 200b          	jp	LC001
2077  a91f               L104:
2078                     ; 2047 	    case 15: emb_itoa(stored_mqttserveraddr[0], OctetArray, 10, 3); break;
2080  a91f 4b03          	push	#3
2081  a921 4b0a          	push	#10
2082  a923 ae005c        	ldw	x,#_OctetArray
2083  a926 89            	pushw	x
2084  a927 c64031        	ld	a,_stored_mqttserveraddr
2086  a92a               LC001:
2087  a92a b703          	ld	c_lreg+3,a
2088  a92c 3f02          	clr	c_lreg+2
2089  a92e 3f01          	clr	c_lreg+1
2090  a930 3f00          	clr	c_lreg
2091  a932 be02          	ldw	x,c_lreg+2
2092  a934 89            	pushw	x
2093  a935 be00          	ldw	x,c_lreg
2094  a937 89            	pushw	x
2095  a938 cda4e3        	call	_emb_itoa
2096  a93b 5b08          	addw	sp,#8
2099                     ; 2049 	    default: break;
2101  a93d               L326:
2102                     ; 2053 	  for(i=0; i<3; i++) {
2104  a93d 4f            	clr	a
2105  a93e 6b08          	ld	(OFST+0,sp),a
2107  a940               L526:
2108                     ; 2054 	    *pBuffer = (uint8_t)OctetArray[i];
2110  a940 5f            	clrw	x
2111  a941 97            	ld	xl,a
2112  a942 d6005c        	ld	a,(_OctetArray,x)
2113  a945 1e09          	ldw	x,(OFST+1,sp)
2114  a947 f7            	ld	(x),a
2115                     ; 2055             pBuffer++;
2117  a948 5c            	incw	x
2118  a949 1f09          	ldw	(OFST+1,sp),x
2119                     ; 2053 	  for(i=0; i<3; i++) {
2121  a94b 0c08          	inc	(OFST+0,sp)
2125  a94d 7b08          	ld	a,(OFST+0,sp)
2126  a94f a103          	cp	a,#3
2127  a951 25ed          	jrult	L526
2128                     ; 2057 	  nBytes += 3;
2130  a953 1e05          	ldw	x,(OFST-3,sp)
2131  a955 1c0003        	addw	x,#3
2133  a958 ccac86        	jp	LC006
2134  a95b               L716:
2135                     ; 2060         else if (nParsedMode == 'c') {
2137  a95b a163          	cp	a,#99
2138  a95d 2648          	jrne	L536
2139                     ; 2069 	  if (nParsedNum == 0) emb_itoa(stored_port, OctetArray, 10, 5);
2141  a95f 7b07          	ld	a,(OFST-1,sp)
2142  a961 260d          	jrne	L736
2145  a963 4b05          	push	#5
2146  a965 4b0a          	push	#10
2147  a967 ae005c        	ldw	x,#_OctetArray
2148  a96a 89            	pushw	x
2149  a96b ce401d        	ldw	x,_stored_port
2153  a96e 200b          	jra	L146
2154  a970               L736:
2155                     ; 2071 	  else emb_itoa(stored_mqttport, OctetArray, 10, 5);
2157  a970 4b05          	push	#5
2158  a972 4b0a          	push	#10
2159  a974 ae005c        	ldw	x,#_OctetArray
2160  a977 89            	pushw	x
2161  a978 ce402f        	ldw	x,_stored_mqttport
2164  a97b               L146:
2165  a97b cdfb31        	call	c_uitolx
2166  a97e be02          	ldw	x,c_lreg+2
2167  a980 89            	pushw	x
2168  a981 be00          	ldw	x,c_lreg
2169  a983 89            	pushw	x
2170  a984 cda4e3        	call	_emb_itoa
2171  a987 5b08          	addw	sp,#8
2172                     ; 2075 	  for(i=0; i<5; i++) {
2174  a989 4f            	clr	a
2175  a98a 6b08          	ld	(OFST+0,sp),a
2177  a98c               L346:
2178                     ; 2076             *pBuffer = (uint8_t)OctetArray[i];
2180  a98c 5f            	clrw	x
2181  a98d 97            	ld	xl,a
2182  a98e d6005c        	ld	a,(_OctetArray,x)
2183  a991 1e09          	ldw	x,(OFST+1,sp)
2184  a993 f7            	ld	(x),a
2185                     ; 2077             pBuffer++;
2187  a994 5c            	incw	x
2188  a995 1f09          	ldw	(OFST+1,sp),x
2189                     ; 2075 	  for(i=0; i<5; i++) {
2191  a997 0c08          	inc	(OFST+0,sp)
2195  a999 7b08          	ld	a,(OFST+0,sp)
2196  a99b a105          	cp	a,#5
2197  a99d 25ed          	jrult	L346
2198                     ; 2079 	  nBytes += 5;
2200  a99f 1e05          	ldw	x,(OFST-3,sp)
2201  a9a1 1c0005        	addw	x,#5
2203  a9a4 ccac86        	jp	LC006
2204  a9a7               L536:
2205                     ; 2082         else if (nParsedMode == 'd') {
2207  a9a7 a164          	cp	a,#100
2208  a9a9 266a          	jrne	L356
2209                     ; 2087 	  if (nParsedNum == 0) { OctetArray[0] = mac_string[0]; OctetArray[1] = mac_string[1]; }
2211  a9ab 7b07          	ld	a,(OFST-1,sp)
2212  a9ad 260a          	jrne	L556
2215  a9af 55010c005c    	mov	_OctetArray,_mac_string
2218  a9b4 55010d005d    	mov	_OctetArray+1,_mac_string+1
2219  a9b9               L556:
2220                     ; 2088 	  if (nParsedNum == 1) { OctetArray[0] = mac_string[2]; OctetArray[1] = mac_string[3]; }
2222  a9b9 a101          	cp	a,#1
2223  a9bb 260a          	jrne	L756
2226  a9bd 55010e005c    	mov	_OctetArray,_mac_string+2
2229  a9c2 55010f005d    	mov	_OctetArray+1,_mac_string+3
2230  a9c7               L756:
2231                     ; 2089 	  if (nParsedNum == 2) { OctetArray[0] = mac_string[4]; OctetArray[1] = mac_string[5]; }
2233  a9c7 a102          	cp	a,#2
2234  a9c9 260a          	jrne	L166
2237  a9cb 550110005c    	mov	_OctetArray,_mac_string+4
2240  a9d0 550111005d    	mov	_OctetArray+1,_mac_string+5
2241  a9d5               L166:
2242                     ; 2090 	  if (nParsedNum == 3) { OctetArray[0] = mac_string[6]; OctetArray[1] = mac_string[7]; }
2244  a9d5 a103          	cp	a,#3
2245  a9d7 260a          	jrne	L366
2248  a9d9 550112005c    	mov	_OctetArray,_mac_string+6
2251  a9de 550113005d    	mov	_OctetArray+1,_mac_string+7
2252  a9e3               L366:
2253                     ; 2091 	  if (nParsedNum == 4) { OctetArray[0] = mac_string[8]; OctetArray[1] = mac_string[9]; }
2255  a9e3 a104          	cp	a,#4
2256  a9e5 260a          	jrne	L566
2259  a9e7 550114005c    	mov	_OctetArray,_mac_string+8
2262  a9ec 550115005d    	mov	_OctetArray+1,_mac_string+9
2263  a9f1               L566:
2264                     ; 2092 	  if (nParsedNum == 5) { OctetArray[0] = mac_string[10]; OctetArray[1] = mac_string[11]; }
2266  a9f1 a105          	cp	a,#5
2267  a9f3 260a          	jrne	L766
2270  a9f5 550116005c    	mov	_OctetArray,_mac_string+10
2273  a9fa 550117005d    	mov	_OctetArray+1,_mac_string+11
2274  a9ff               L766:
2275                     ; 2094           *pBuffer = OctetArray[0];
2277  a9ff 1e09          	ldw	x,(OFST+1,sp)
2278  aa01 c6005c        	ld	a,_OctetArray
2279  aa04 f7            	ld	(x),a
2280                     ; 2095           pBuffer++;
2282  aa05 5c            	incw	x
2283  aa06 1f09          	ldw	(OFST+1,sp),x
2284                     ; 2096           nBytes++;
2286  aa08 1e05          	ldw	x,(OFST-3,sp)
2287  aa0a 5c            	incw	x
2288  aa0b 1f05          	ldw	(OFST-3,sp),x
2290                     ; 2098           *pBuffer = OctetArray[1];
2292  aa0d c6005d        	ld	a,_OctetArray+1
2293  aa10 1e09          	ldw	x,(OFST+1,sp)
2294                     ; 2099           pBuffer++;
2295                     ; 2100           nBytes++;
2297  aa12 ccaba1        	jp	L7201
2298  aa15               L356:
2299                     ; 2168         else if (nParsedMode == 'e') {
2301  aa15 a165          	cp	a,#101
2302  aa17 2677          	jrne	L376
2303                     ; 2169           switch (nParsedNum)
2305  aa19 7b07          	ld	a,(OFST-1,sp)
2307                     ; 2176 	    case 29:  emb_itoa(TRANSMIT_counter, OctetArray, 10, 10); break;
2308  aa1b a01a          	sub	a,#26
2309  aa1d 270b          	jreq	L504
2310  aa1f 4a            	dec	a
2311  aa20 2719          	jreq	L704
2312  aa22 4a            	dec	a
2313  aa23 2727          	jreq	L114
2314  aa25 4a            	dec	a
2315  aa26 2735          	jreq	L314
2316  aa28 2048          	jra	L776
2317  aa2a               L504:
2318                     ; 2173 	    case 26:  emb_itoa(second_counter, OctetArray, 10, 10); break;
2320  aa2a 4b0a          	push	#10
2321  aa2c 4b0a          	push	#10
2322  aa2e ae005c        	ldw	x,#_OctetArray
2323  aa31 89            	pushw	x
2324  aa32 ce029e        	ldw	x,_second_counter+2
2325  aa35 89            	pushw	x
2326  aa36 ce029c        	ldw	x,_second_counter
2330  aa39 2031          	jp	LC002
2331  aa3b               L704:
2332                     ; 2174 	    case 27:  emb_itoa(RXERIF_counter, OctetArray, 10, 10); break;
2334  aa3b 4b0a          	push	#10
2335  aa3d 4b0a          	push	#10
2336  aa3f ae005c        	ldw	x,#_OctetArray
2337  aa42 89            	pushw	x
2338  aa43 ce0071        	ldw	x,_RXERIF_counter+2
2339  aa46 89            	pushw	x
2340  aa47 ce006f        	ldw	x,_RXERIF_counter
2344  aa4a 2020          	jp	LC002
2345  aa4c               L114:
2346                     ; 2175 	    case 28:  emb_itoa(TXERIF_counter, OctetArray, 10, 10); break;
2348  aa4c 4b0a          	push	#10
2349  aa4e 4b0a          	push	#10
2350  aa50 ae005c        	ldw	x,#_OctetArray
2351  aa53 89            	pushw	x
2352  aa54 ce006d        	ldw	x,_TXERIF_counter+2
2353  aa57 89            	pushw	x
2354  aa58 ce006b        	ldw	x,_TXERIF_counter
2358  aa5b 200f          	jp	LC002
2359  aa5d               L314:
2360                     ; 2176 	    case 29:  emb_itoa(TRANSMIT_counter, OctetArray, 10, 10); break;
2362  aa5d 4b0a          	push	#10
2363  aa5f 4b0a          	push	#10
2364  aa61 ae005c        	ldw	x,#_OctetArray
2365  aa64 89            	pushw	x
2366  aa65 ce0069        	ldw	x,_TRANSMIT_counter+2
2367  aa68 89            	pushw	x
2368  aa69 ce0067        	ldw	x,_TRANSMIT_counter
2370  aa6c               LC002:
2371  aa6c 89            	pushw	x
2372  aa6d cda4e3        	call	_emb_itoa
2373  aa70 5b08          	addw	sp,#8
2376  aa72               L776:
2377                     ; 2178 	  for (i=0; i<10; i++) {
2379  aa72 4f            	clr	a
2380  aa73 6b08          	ld	(OFST+0,sp),a
2382  aa75               L107:
2383                     ; 2179             *pBuffer = OctetArray[i];
2385  aa75 5f            	clrw	x
2386  aa76 97            	ld	xl,a
2387  aa77 d6005c        	ld	a,(_OctetArray,x)
2388  aa7a 1e09          	ldw	x,(OFST+1,sp)
2389  aa7c f7            	ld	(x),a
2390                     ; 2180             pBuffer++;
2392  aa7d 5c            	incw	x
2393  aa7e 1f09          	ldw	(OFST+1,sp),x
2394                     ; 2178 	  for (i=0; i<10; i++) {
2396  aa80 0c08          	inc	(OFST+0,sp)
2400  aa82 7b08          	ld	a,(OFST+0,sp)
2401  aa84 a10a          	cp	a,#10
2402  aa86 25ed          	jrult	L107
2403                     ; 2182 	  nBytes += 10;
2405  aa88 1e05          	ldw	x,(OFST-3,sp)
2406  aa8a 1c000a        	addw	x,#10
2408  aa8d ccac86        	jp	LC006
2409  aa90               L376:
2410                     ; 2186         else if (nParsedMode == 'f') {
2412  aa90 a166          	cp	a,#102
2413  aa92 263d          	jrne	L117
2414                     ; 2201 	  for(i=0; i<16; i++) {
2416  aa94 4f            	clr	a
2417  aa95 6b08          	ld	(OFST+0,sp),a
2419  aa97               L317:
2420                     ; 2202             if (i > 7) {
2422  aa97 a108          	cp	a,#8
2423  aa99 251b          	jrult	L127
2424                     ; 2204               j = GpioGetPin(i);
2426  aa9b cdbc05        	call	_GpioGetPin
2428  aa9e 6b03          	ld	(OFST-5,sp),a
2430                     ; 2205               if (invert_input == 0x00) *pBuffer = (uint8_t)(j + '0');
2432  aaa0 725d0165      	tnz	_invert_input
2435  aaa4 2713          	jreq	LC010
2436                     ; 2207                 if (j == 0) *pBuffer = (uint8_t)('1'); 
2438  aaa6 7b03          	ld	a,(OFST-5,sp)
2439  aaa8 2606          	jrne	L727
2442  aaaa 1e09          	ldw	x,(OFST+1,sp)
2443  aaac a631          	ld	a,#49
2445  aaae 200d          	jra	L337
2446  aab0               L727:
2447                     ; 2208                 else *pBuffer = (uint8_t)('0');
2449  aab0 1e09          	ldw	x,(OFST+1,sp)
2450  aab2 a630          	ld	a,#48
2451                     ; 2210               pBuffer++;
2453  aab4 2007          	jra	L337
2454  aab6               L127:
2455                     ; 2214               *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
2457  aab6 cdbc05        	call	_GpioGetPin
2459  aab9               LC010:
2461  aab9 ab30          	add	a,#48
2462  aabb 1e09          	ldw	x,(OFST+1,sp)
2463                     ; 2215               pBuffer++;
2465  aabd               L337:
2466  aabd f7            	ld	(x),a
2468  aabe 5c            	incw	x
2469  aabf 1f09          	ldw	(OFST+1,sp),x
2470                     ; 2201 	  for(i=0; i<16; i++) {
2472  aac1 0c08          	inc	(OFST+0,sp)
2476  aac3 7b08          	ld	a,(OFST+0,sp)
2477  aac5 a110          	cp	a,#16
2478  aac7 25ce          	jrult	L317
2479                     ; 2218 	  nBytes += 16;
2481  aac9 1e05          	ldw	x,(OFST-3,sp)
2482  aacb 1c0010        	addw	x,#16
2484  aace ccac86        	jp	LC006
2485  aad1               L117:
2486                     ; 2237 else if (nParsedMode == 'g') {
2488  aad1 a167          	cp	a,#103
2489  aad3 261e          	jrne	L737
2490                     ; 2250 	  for(i = 0; i < 6; i++) {
2492  aad5 4f            	clr	a
2493  aad6 6b08          	ld	(OFST+0,sp),a
2495  aad8               L147:
2496                     ; 2251             *pBuffer = stored_config_settings[i];
2498  aad8 5f            	clrw	x
2499  aad9 97            	ld	xl,a
2500  aada d6404c        	ld	a,(_stored_config_settings,x)
2501  aadd 1e09          	ldw	x,(OFST+1,sp)
2502  aadf f7            	ld	(x),a
2503                     ; 2252             pBuffer++;
2505  aae0 5c            	incw	x
2506  aae1 1f09          	ldw	(OFST+1,sp),x
2507                     ; 2250 	  for(i = 0; i < 6; i++) {
2509  aae3 0c08          	inc	(OFST+0,sp)
2513  aae5 7b08          	ld	a,(OFST+0,sp)
2514  aae7 a106          	cp	a,#6
2515  aae9 25ed          	jrult	L147
2516                     ; 2254           nBytes += 6;
2518  aaeb 1e05          	ldw	x,(OFST-3,sp)
2519  aaed 1c0006        	addw	x,#6
2521  aaf0 ccac86        	jp	LC006
2522  aaf3               L737:
2523                     ; 2258         else if (nParsedMode == 'l') {
2525  aaf3 a16c          	cp	a,#108
2526  aaf5 2629          	jrne	L157
2527                     ; 2261           for(i=0; i<10; i++) {
2529  aaf7 4f            	clr	a
2530  aaf8 6b08          	ld	(OFST+0,sp),a
2532  aafa               L357:
2533                     ; 2262 	    if (stored_mqtt_username[i] != '\0') {
2535  aafa 5f            	clrw	x
2536  aafb 97            	ld	xl,a
2537  aafc 724d4035      	tnz	(_stored_mqtt_username,x)
2538  ab00 2603ccac88    	jreq	L325
2539                     ; 2263               *pBuffer = (uint8_t)(stored_mqtt_username[i]);
2541  ab05 5f            	clrw	x
2542  ab06 97            	ld	xl,a
2543  ab07 d64035        	ld	a,(_stored_mqtt_username,x)
2544  ab0a 1e09          	ldw	x,(OFST+1,sp)
2545  ab0c f7            	ld	(x),a
2546                     ; 2264               pBuffer++;
2548  ab0d 5c            	incw	x
2549  ab0e 1f09          	ldw	(OFST+1,sp),x
2550                     ; 2265               nBytes++;
2552  ab10 1e05          	ldw	x,(OFST-3,sp)
2553  ab12 5c            	incw	x
2554  ab13 1f05          	ldw	(OFST-3,sp),x
2557                     ; 2261           for(i=0; i<10; i++) {
2559  ab15 0c08          	inc	(OFST+0,sp)
2563  ab17 7b08          	ld	a,(OFST+0,sp)
2564  ab19 a10a          	cp	a,#10
2565  ab1b 25dd          	jrult	L357
2566  ab1d ccac88        	jra	L325
2567  ab20               L157:
2568                     ; 2271         else if (nParsedMode == 'm') {
2570  ab20 a16d          	cp	a,#109
2571  ab22 2626          	jrne	L767
2572                     ; 2274           for(i=0; i<10; i++) {
2574  ab24 4f            	clr	a
2575  ab25 6b08          	ld	(OFST+0,sp),a
2577  ab27               L177:
2578                     ; 2275 	    if (stored_mqtt_password[i] != '\0') {
2580  ab27 5f            	clrw	x
2581  ab28 97            	ld	xl,a
2582  ab29 724d4040      	tnz	(_stored_mqtt_password,x)
2583  ab2d 27ee          	jreq	L325
2584                     ; 2276               *pBuffer = (uint8_t)(stored_mqtt_password[i]);
2586  ab2f 5f            	clrw	x
2587  ab30 97            	ld	xl,a
2588  ab31 d64040        	ld	a,(_stored_mqtt_password,x)
2589  ab34 1e09          	ldw	x,(OFST+1,sp)
2590  ab36 f7            	ld	(x),a
2591                     ; 2277               pBuffer++;
2593  ab37 5c            	incw	x
2594  ab38 1f09          	ldw	(OFST+1,sp),x
2595                     ; 2278               nBytes++;
2597  ab3a 1e05          	ldw	x,(OFST-3,sp)
2598  ab3c 5c            	incw	x
2599  ab3d 1f05          	ldw	(OFST-3,sp),x
2602                     ; 2274           for(i=0; i<10; i++) {
2604  ab3f 0c08          	inc	(OFST+0,sp)
2608  ab41 7b08          	ld	a,(OFST+0,sp)
2609  ab43 a10a          	cp	a,#10
2610  ab45 25e0          	jrult	L177
2611  ab47 ccac88        	jra	L325
2612  ab4a               L767:
2613                     ; 2284         else if (nParsedMode == 'n') {
2615  ab4a a16e          	cp	a,#110
2616  ab4c 2657          	jrne	L5001
2617                     ; 2288 	  no_err = 0;
2619  ab4e 0f08          	clr	(OFST+0,sp)
2621                     ; 2289           switch (nParsedNum)
2623  ab50 7b07          	ld	a,(OFST-1,sp)
2625                     ; 2311 	    default:
2625                     ; 2312 	      break;
2626  ab52 270e          	jreq	L514
2627  ab54 4a            	dec	a
2628  ab55 2712          	jreq	L714
2629  ab57 4a            	dec	a
2630  ab58 2716          	jreq	L124
2631  ab5a 4a            	dec	a
2632  ab5b 271a          	jreq	L324
2633  ab5d 4a            	dec	a
2634  ab5e 271f          	jreq	L524
2635  ab60 2030          	jra	L1101
2636  ab62               L514:
2637                     ; 2291 	    case 0:
2637                     ; 2292               // Connection request status
2637                     ; 2293 	      if (mqtt_start_status & MQTT_START_CONNECTIONS_GOOD) no_err = 1;
2639  ab62 720900a72b    	btjf	_mqtt_start_status,#4,L1101
2641  ab67 2013          	jp	LC004
2642  ab69               L714:
2643                     ; 2295 	    case 1:
2643                     ; 2296 	      // ARP request status
2643                     ; 2297 	      if (mqtt_start_status & MQTT_START_ARP_REQUEST_GOOD) no_err = 1;
2645  ab69 720b00a724    	btjf	_mqtt_start_status,#5,L1101
2647  ab6e 200c          	jp	LC004
2648  ab70               L124:
2649                     ; 2299 	    case 2:
2649                     ; 2300 	      // TCP connection status
2649                     ; 2301 	      if (mqtt_start_status & MQTT_START_TCP_CONNECT_GOOD) no_err = 1;
2651  ab70 720d00a71d    	btjf	_mqtt_start_status,#6,L1101
2653  ab75 2005          	jp	LC004
2654  ab77               L324:
2655                     ; 2303 	    case 3:
2655                     ; 2304 	      // MQTT Connection status 1
2655                     ; 2305 	      if (mqtt_start_status & MQTT_START_MQTT_CONNECT_GOOD) no_err = 1;
2657  ab77 720f00a716    	btjf	_mqtt_start_status,#7,L1101
2660  ab7c               LC004:
2664  ab7c 4c            	inc	a
2665  ab7d 2011          	jp	LC003
2666  ab7f               L524:
2667                     ; 2307 	    case 4:
2667                     ; 2308 	      // MQTT start complete with no errors
2667                     ; 2309 	      if ((MQTT_error_status == 1) && ((mqtt_start_status & 0xf0) == 0xf0) ) no_err = 1;
2669  ab7f c6029b        	ld	a,_MQTT_error_status
2670  ab82 4a            	dec	a
2671  ab83 260d          	jrne	L1101
2673  ab85 c600a7        	ld	a,_mqtt_start_status
2674  ab88 a4f0          	and	a,#240
2675  ab8a a1f0          	cp	a,#240
2676  ab8c 2604          	jrne	L1101
2679  ab8e a601          	ld	a,#1
2680  ab90               LC003:
2681  ab90 6b08          	ld	(OFST+0,sp),a
2683                     ; 2311 	    default:
2683                     ; 2312 	      break;
2685  ab92               L1101:
2686                     ; 2314 	  if (no_err == 1) *pBuffer = '1'; // Paint a green square
2688  ab92 7b08          	ld	a,(OFST+0,sp)
2689  ab94 4a            	dec	a
2690  ab95 2606          	jrne	L5201
2693  ab97 1e09          	ldw	x,(OFST+1,sp)
2694  ab99 a631          	ld	a,#49
2696  ab9b 2004          	jra	L7201
2697  ab9d               L5201:
2698                     ; 2315 	  else *pBuffer = '0'; // Paint a red square
2701  ab9d 1e09          	ldw	x,(OFST+1,sp)
2702  ab9f a630          	ld	a,#48
2703  aba1               L7201:
2704  aba1 f7            	ld	(x),a
2705                     ; 2316           pBuffer++;
2706                     ; 2317           nBytes++;
2708  aba2 ccac80        	jp	LC007
2709  aba5               L5001:
2710                     ; 2321         else if (nParsedMode == 'y') {
2712  aba5 a179          	cp	a,#121
2713  aba7 269e          	jrne	L325
2714                     ; 2366 	  i = insertion_flag[0];
2716  aba9 c60017        	ld	a,_insertion_flag
2717  abac 6b08          	ld	(OFST+0,sp),a
2719                     ; 2367 	  insertion_flag[1] = nParsedMode;
2721  abae 7b04          	ld	a,(OFST-4,sp)
2722  abb0 c70018        	ld	_insertion_flag+1,a
2723                     ; 2368 	  insertion_flag[2] = nParsedNum;
2725  abb3 7b07          	ld	a,(OFST-1,sp)
2726  abb5 c70019        	ld	_insertion_flag+2,a
2727                     ; 2370           switch (nParsedNum)
2730                     ; 2418 	    default: break;
2731  abb8 2718          	jreq	L134
2732  abba 4a            	dec	a
2733  abbb 272a          	jreq	L334
2734  abbd 4a            	dec	a
2735  abbe 273c          	jreq	L534
2736  abc0 4a            	dec	a
2737  abc1 274e          	jreq	L734
2738  abc3 4a            	dec	a
2739  abc4 2760          	jreq	L144
2740  abc6 4a            	dec	a
2741  abc7 2772          	jreq	L344
2742  abc9 4a            	dec	a
2743  abca 2603ccac50    	jreq	L544
2744  abcf ccac7e        	jra	LC008
2745  abd2               L134:
2746                     ; 2372 	    case 0:
2746                     ; 2373 	      // %y00 replaced with string 
2746                     ; 2374 	      // page_string00[] = "pattern='[0-9]{3}' title='Enter 000 to 255' maxlength='3'";
2746                     ; 2375               *pBuffer = (uint8_t)page_string00[i];
2748  abd2 7b08          	ld	a,(OFST+0,sp)
2749  abd4 5f            	clrw	x
2750  abd5 97            	ld	xl,a
2751  abd6 d69aee        	ld	a,(L52_page_string00,x)
2752  abd9 1e09          	ldw	x,(OFST+1,sp)
2753  abdb f7            	ld	(x),a
2754                     ; 2376 	      insertion_flag[0]++;
2756  abdc 725c0017      	inc	_insertion_flag
2757                     ; 2377 	      if (insertion_flag[0] == page_string00_len) insertion_flag[0] = 0;
2759  abe0 c60017        	ld	a,_insertion_flag
2760  abe3 a13f          	cp	a,#63
2762  abe5 207c          	jp	LC005
2763  abe7               L334:
2764                     ; 2379 	    case 1:
2764                     ; 2380 	      // %y01 replaced with string 
2764                     ; 2381               // page_string01[] = "pattern='[0-9a-f]{2}' title='Enter 00 to ff' maxlength='2'";
2764                     ; 2382               *pBuffer = (uint8_t)page_string01[i];
2766  abe7 7b08          	ld	a,(OFST+0,sp)
2767  abe9 5f            	clrw	x
2768  abea 97            	ld	xl,a
2769  abeb d69b30        	ld	a,(L33_page_string01,x)
2770  abee 1e09          	ldw	x,(OFST+1,sp)
2771  abf0 f7            	ld	(x),a
2772                     ; 2383 	      insertion_flag[0]++;
2774  abf1 725c0017      	inc	_insertion_flag
2775                     ; 2384 	      if (insertion_flag[0] == page_string01_len) insertion_flag[0] = 0;
2777  abf5 c60017        	ld	a,_insertion_flag
2778  abf8 a140          	cp	a,#64
2780  abfa 2067          	jp	LC005
2781  abfc               L534:
2782                     ; 2386 	    case 2:
2782                     ; 2387 	      // %y02 replaced with string 
2782                     ; 2388               // page_string02[] = "<button title='Save first! This button will not save your changes'>";
2782                     ; 2389               *pBuffer = (uint8_t)page_string02[i];
2784  abfc 7b08          	ld	a,(OFST+0,sp)
2785  abfe 5f            	clrw	x
2786  abff 97            	ld	xl,a
2787  ac00 d69b73        	ld	a,(L14_page_string02,x)
2788  ac03 1e09          	ldw	x,(OFST+1,sp)
2789  ac05 f7            	ld	(x),a
2790                     ; 2390 	      insertion_flag[0]++;
2792  ac06 725c0017      	inc	_insertion_flag
2793                     ; 2391 	      if (insertion_flag[0] == page_string02_len) insertion_flag[0] = 0;
2795  ac0a c60017        	ld	a,_insertion_flag
2796  ac0d a152          	cp	a,#82
2798  ac0f 2052          	jp	LC005
2799  ac11               L734:
2800                     ; 2393 	    case 3:
2800                     ; 2394 	      // %y03 replaced with string 
2800                     ; 2395               // page_string03[] = "<form style='display: inline' action='http://";
2800                     ; 2396               *pBuffer = (uint8_t)page_string03[i];
2802  ac11 7b08          	ld	a,(OFST+0,sp)
2803  ac13 5f            	clrw	x
2804  ac14 97            	ld	xl,a
2805  ac15 d69bc8        	ld	a,(L74_page_string03,x)
2806  ac18 1e09          	ldw	x,(OFST+1,sp)
2807  ac1a f7            	ld	(x),a
2808                     ; 2397 	      insertion_flag[0]++;
2810  ac1b 725c0017      	inc	_insertion_flag
2811                     ; 2398 	      if (insertion_flag[0] == page_string03_len) insertion_flag[0] = 0;
2813  ac1f c60017        	ld	a,_insertion_flag
2814  ac22 a126          	cp	a,#38
2816  ac24 203d          	jp	LC005
2817  ac26               L144:
2818                     ; 2400 	    case 4:
2818                     ; 2401 	      // %y04 replaced with first header string 
2818                     ; 2402               *pBuffer = (uint8_t)page_string04[i];
2820  ac26 7b08          	ld	a,(OFST+0,sp)
2821  ac28 5f            	clrw	x
2822  ac29 97            	ld	xl,a
2823  ac2a d69bf1        	ld	a,(L55_page_string04,x)
2824  ac2d 1e09          	ldw	x,(OFST+1,sp)
2825  ac2f f7            	ld	(x),a
2826                     ; 2403 	      insertion_flag[0]++;
2828  ac30 725c0017      	inc	_insertion_flag
2829                     ; 2404 	      if (insertion_flag[0] == page_string04_len) insertion_flag[0] = 0;
2831  ac34 c60017        	ld	a,_insertion_flag
2832  ac37 a147          	cp	a,#71
2834  ac39 2028          	jp	LC005
2835  ac3b               L344:
2836                     ; 2406 	    case 5:
2836                     ; 2407 	      // %y05 replaced with second header string 
2836                     ; 2408               *pBuffer = (uint8_t)page_string05[i];
2838  ac3b 7b08          	ld	a,(OFST+0,sp)
2839  ac3d 5f            	clrw	x
2840  ac3e 97            	ld	xl,a
2841  ac3f d69c3b        	ld	a,(L36_page_string05,x)
2842  ac42 1e09          	ldw	x,(OFST+1,sp)
2843  ac44 f7            	ld	(x),a
2844                     ; 2409 	      insertion_flag[0]++;
2846  ac45 725c0017      	inc	_insertion_flag
2847                     ; 2410 	      if (insertion_flag[0] == page_string05_len) insertion_flag[0] = 0;
2849  ac49 c60017        	ld	a,_insertion_flag
2850  ac4c a1ed          	cp	a,#237
2852  ac4e 2013          	jp	LC005
2853  ac50               L544:
2854                     ; 2412 	    case 6:
2854                     ; 2413 	      // %y06 replaced with third header string 
2854                     ; 2414               *pBuffer = (uint8_t)page_string06[i];
2856  ac50 7b08          	ld	a,(OFST+0,sp)
2857  ac52 5f            	clrw	x
2858  ac53 97            	ld	xl,a
2859  ac54 d69d2b        	ld	a,(L17_page_string06,x)
2860  ac57 1e09          	ldw	x,(OFST+1,sp)
2861  ac59 f7            	ld	(x),a
2862                     ; 2415 	      insertion_flag[0]++;
2864  ac5a 725c0017      	inc	_insertion_flag
2865                     ; 2416 	      if (insertion_flag[0] == page_string06_len) insertion_flag[0] = 0;
2867  ac5e c60017        	ld	a,_insertion_flag
2868  ac61 a13b          	cp	a,#59
2871  ac63               LC005:
2872  ac63 2619          	jrne	LC008
2879  ac65 725f0017      	clr	_insertion_flag
2880                     ; 2418 	    default: break;
2882                     ; 2420           pBuffer++;
2883                     ; 2421           nBytes++;
2884  ac69 2013          	jp	LC008
2885  ac6b               L735:
2886                     ; 2429         *pBuffer = nByte;
2888  ac6b 1e09          	ldw	x,(OFST+1,sp)
2889  ac6d f7            	ld	(x),a
2890                     ; 2430         *ppData = *ppData + 1;
2892  ac6e 1e0d          	ldw	x,(OFST+5,sp)
2893  ac70 9093          	ldw	y,x
2894  ac72 fe            	ldw	x,(x)
2895  ac73 5c            	incw	x
2896  ac74 90ff          	ldw	(y),x
2897                     ; 2431         *pDataLeft = *pDataLeft - 1;
2899  ac76 1e0f          	ldw	x,(OFST+7,sp)
2900  ac78 9093          	ldw	y,x
2901  ac7a fe            	ldw	x,(x)
2902  ac7b 5a            	decw	x
2903  ac7c 90ff          	ldw	(y),x
2904                     ; 2432         pBuffer++;
2906  ac7e               LC008:
2908  ac7e 1e09          	ldw	x,(OFST+1,sp)
2909                     ; 2433         nBytes++;
2911  ac80               LC007:
2916  ac80 5c            	incw	x
2917  ac81 1f09          	ldw	(OFST+1,sp),x
2923  ac83 1e05          	ldw	x,(OFST-3,sp)
2924  ac85 5c            	incw	x
2925  ac86               LC006:
2926  ac86 1f05          	ldw	(OFST-3,sp),x
2928  ac88               L325:
2929                     ; 1807   while (nBytes < nMaxBytes) {
2931  ac88 1e05          	ldw	x,(OFST-3,sp)
2932  ac8a 1311          	cpw	x,(OFST+9,sp)
2933  ac8c 2403cca6bb    	jrult	L125
2934  ac91               L525:
2935                     ; 2438   return nBytes;
2937  ac91 1e05          	ldw	x,(OFST-3,sp)
2940  ac93 5b0a          	addw	sp,#10
2941  ac95 81            	ret	
2973                     ; 2442 void HttpDInit()
2973                     ; 2443 {
2974                     .text:	section	.text,new
2975  ac96               _HttpDInit:
2979                     ; 2445   uip_listen(htons(Port_Httpd));
2981  ac96 ce0103        	ldw	x,_Port_Httpd
2982  ac99 cdf201        	call	_htons
2984  ac9c cde88c        	call	_uip_listen
2986                     ; 2446   current_webpage = WEBPAGE_IOCONTROL;
2988  ac9f 725f001a      	clr	_current_webpage
2989                     ; 2449   insertion_flag[0] = 0;
2991  aca3 725f0017      	clr	_insertion_flag
2992                     ; 2450   insertion_flag[1] = 0;
2994  aca7 725f0018      	clr	_insertion_flag+1
2995                     ; 2451   insertion_flag[2] = 0;
2997  acab 725f0019      	clr	_insertion_flag+2
2998                     ; 2454   saved_nstate = STATE_NULL;
3000  acaf 357f005b      	mov	_saved_nstate,#127
3001                     ; 2455   saved_parsestate = PARSE_CMD;
3003  acb3 725f005a      	clr	_saved_parsestate
3004                     ; 2456   saved_nparseleft = 0;
3006  acb7 725f0059      	clr	_saved_nparseleft
3007                     ; 2457   clear_saved_postpartial_all();
3010                     ; 2458 }
3013  acbb ccb7de        	jp	_clear_saved_postpartial_all
3206                     	switch	.const
3207  9d89               L622:
3208  9d89 b582          	dc.w	L7701
3209  9d8b b58d          	dc.w	L1011
3210  9d8d b598          	dc.w	L3011
3211  9d8f b5a3          	dc.w	L5011
3212  9d91 b5ae          	dc.w	L7011
3213  9d93 b5b9          	dc.w	L1111
3214  9d95 b5c4          	dc.w	L3111
3215  9d97 b5cf          	dc.w	L5111
3216  9d99 b5da          	dc.w	L7111
3217  9d9b b5e5          	dc.w	L1211
3218  9d9d b5f0          	dc.w	L3211
3219  9d9f b5fb          	dc.w	L5211
3220  9da1 b606          	dc.w	L7211
3221  9da3 b611          	dc.w	L1311
3222  9da5 b61c          	dc.w	L3311
3223  9da7 b627          	dc.w	L5311
3224                     ; 2461 void HttpDCall(uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
3224                     ; 2462 {
3225                     .text:	section	.text,new
3226  acbe               _HttpDCall:
3228  acbe 89            	pushw	x
3229  acbf 5204          	subw	sp,#4
3230       00000004      OFST:	set	4
3233                     ; 2466   i = 0;
3235  acc1 0f04          	clr	(OFST+0,sp)
3237                     ; 2468   if (uip_connected()) {
3239  acc3 720d02c467    	btjf	_uip_flags,#6,L5521
3240                     ; 2470     if (current_webpage == WEBPAGE_IOCONTROL) {
3242  acc8 c6001a        	ld	a,_current_webpage
3243  accb 260e          	jrne	L7521
3244                     ; 2471       pSocket->pData = g_HtmlPageIOControl;
3246  accd 1e0b          	ldw	x,(OFST+7,sp)
3247  accf 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
3248  acd3 ef01          	ldw	(1,x),y
3249                     ; 2472       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
3251  acd5 90ae0c06      	ldw	y,#3078
3253  acd9 2046          	jp	LC013
3254  acdb               L7521:
3255                     ; 2476     else if (current_webpage == WEBPAGE_CONFIGURATION) {
3257  acdb a101          	cp	a,#1
3258  acdd 260e          	jrne	L3621
3259                     ; 2477       pSocket->pData = g_HtmlPageConfiguration;
3261  acdf 1e0b          	ldw	x,(OFST+7,sp)
3262  ace1 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
3263  ace5 ef01          	ldw	(1,x),y
3264                     ; 2478       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
3266  ace7 90ae0c5c      	ldw	y,#3164
3268  aceb 2034          	jp	LC013
3269  aced               L3621:
3270                     ; 2493     else if (current_webpage == WEBPAGE_STATS) {
3272  aced a105          	cp	a,#5
3273  acef 260e          	jrne	L7621
3274                     ; 2494       pSocket->pData = g_HtmlPageStats;
3276  acf1 1e0b          	ldw	x,(OFST+7,sp)
3277  acf3 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
3278  acf7 ef01          	ldw	(1,x),y
3279                     ; 2495       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
3281  acf9 90ae0175      	ldw	y,#373
3283  acfd 2022          	jp	LC013
3284  acff               L7621:
3285                     ; 2499     else if (current_webpage == WEBPAGE_RSTATE) {
3287  acff a106          	cp	a,#6
3288  ad01 260e          	jrne	L3721
3289                     ; 2500       pSocket->pData = g_HtmlPageRstate;
3291  ad03 1e0b          	ldw	x,(OFST+7,sp)
3292  ad05 90ae9a62      	ldw	y,#L12_g_HtmlPageRstate
3293  ad09 ef01          	ldw	(1,x),y
3294                     ; 2501       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
3296  ad0b 90ae0086      	ldw	y,#134
3298  ad0f 2010          	jp	LC013
3299  ad11               L3721:
3300                     ; 2504     else if (current_webpage == WEBPAGE_SSTATE) {
3302  ad11 a107          	cp	a,#7
3303  ad13 260e          	jrne	L1621
3304                     ; 2505       pSocket->pData = g_HtmlPageSstate;
3306  ad15 1e0b          	ldw	x,(OFST+7,sp)
3307  ad17 90ae9ae9      	ldw	y,#L32_g_HtmlPageSstate
3308  ad1b ef01          	ldw	(1,x),y
3309                     ; 2506       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
3311  ad1d 90ae0004      	ldw	y,#4
3312  ad21               LC013:
3313  ad21 ef03          	ldw	(3,x),y
3314  ad23               L1621:
3315                     ; 2509     pSocket->nState = STATE_CONNECTED;
3317  ad23 1e0b          	ldw	x,(OFST+7,sp)
3318                     ; 2510     pSocket->nPrevBytes = 0xFFFF;
3320  ad25 90aeffff      	ldw	y,#65535
3321  ad29 7f            	clr	(x)
3322  ad2a ef0b          	ldw	(11,x),y
3324  ad2c ccadff        	jra	L452
3325  ad2f               L5521:
3326                     ; 2519   else if (uip_newdata() || uip_acked()) {
3328  ad2f 720202c408    	btjt	_uip_flags,#1,L5031
3330  ad34 720002c403cc  	btjf	_uip_flags,#0,L3031
3331  ad3c               L5031:
3332                     ; 2520     if (uip_acked()) {
3334  ad3c 720102c403cc  	btjt	_uip_flags,#0,L5611
3335                     ; 2523       goto senddata;
3337                     ; 2593     if (saved_nstate != STATE_NULL) {
3339  ad44 c6005b        	ld	a,_saved_nstate
3340  ad47 a17f          	cp	a,#127
3341  ad49 2603ccadcb    	jreq	L7331
3342                     ; 2599       pSocket->nState = saved_nstate;
3344  ad4e 1e0b          	ldw	x,(OFST+7,sp)
3345  ad50 f7            	ld	(x),a
3346                     ; 2606       pSocket->ParseState = saved_parsestate;
3348  ad51 c6005a        	ld	a,_saved_parsestate
3349  ad54 e70a          	ld	(10,x),a
3350                     ; 2610       pSocket->nParseLeft = saved_nparseleft;
3352  ad56 c60059        	ld	a,_saved_nparseleft
3353  ad59 e706          	ld	(6,x),a
3354                     ; 2612       pSocket->nNewlines = saved_newlines;
3356  ad5b c60028        	ld	a,_saved_newlines
3357  ad5e e705          	ld	(5,x),a
3358                     ; 2624       for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i];
3360  ad60 4f            	clr	a
3361  ad61 6b04          	ld	(OFST+0,sp),a
3363  ad63               L3131:
3366  ad63 5f            	clrw	x
3367  ad64 97            	ld	xl,a
3368  ad65 d60041        	ld	a,(_saved_postpartial,x)
3369  ad68 d70029        	ld	(_saved_postpartial_previous,x),a
3372  ad6b 0c04          	inc	(OFST+0,sp)
3376  ad6d 7b04          	ld	a,(OFST+0,sp)
3377  ad6f a118          	cp	a,#24
3378  ad71 25f0          	jrult	L3131
3379                     ; 2629       if (saved_nstate == STATE_PARSEPOST) {
3381  ad73 c6005b        	ld	a,_saved_nstate
3382  ad76 a10a          	cp	a,#10
3383  ad78 2651          	jrne	L7331
3384                     ; 2630         if (saved_parsestate == PARSE_CMD) {
3386  ad7a c6005a        	ld	a,_saved_parsestate
3387  ad7d 274c          	jreq	L7331
3389                     ; 2633         else if (saved_parsestate == PARSE_NUM10) {
3391  ad7f a101          	cp	a,#1
3392  ad81 2609          	jrne	L7231
3393                     ; 2635 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3395  ad83 1e0b          	ldw	x,(OFST+7,sp)
3396  ad85 c60029        	ld	a,_saved_postpartial_previous
3397  ad88 e708          	ld	(8,x),a
3399  ad8a 203f          	jra	L7331
3400  ad8c               L7231:
3401                     ; 2637         else if (saved_parsestate == PARSE_NUM1) {
3403  ad8c a102          	cp	a,#2
3404  ad8e 2615          	jrne	L3331
3405                     ; 2639 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3407  ad90 1e0b          	ldw	x,(OFST+7,sp)
3408  ad92 c60029        	ld	a,_saved_postpartial_previous
3409  ad95 e708          	ld	(8,x),a
3410                     ; 2640           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3412  ad97 c6002a        	ld	a,_saved_postpartial_previous+1
3413  ad9a 97            	ld	xl,a
3414  ad9b a60a          	ld	a,#10
3415  ad9d 42            	mul	x,a
3416  ad9e 9f            	ld	a,xl
3417  ad9f a0e0          	sub	a,#224
3418  ada1 1e0b          	ldw	x,(OFST+7,sp)
3420  ada3 2024          	jp	LC014
3421  ada5               L3331:
3422                     ; 2642         else if (saved_parsestate == PARSE_EQUAL || saved_parsestate == PARSE_VAL) {
3424  ada5 a103          	cp	a,#3
3425  ada7 2704          	jreq	L1431
3427  ada9 a104          	cp	a,#4
3428  adab 261e          	jrne	L7331
3429  adad               L1431:
3430                     ; 2644 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3432  adad 1e0b          	ldw	x,(OFST+7,sp)
3433  adaf c60029        	ld	a,_saved_postpartial_previous
3434  adb2 e708          	ld	(8,x),a
3435                     ; 2645           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3437  adb4 c6002a        	ld	a,_saved_postpartial_previous+1
3438  adb7 97            	ld	xl,a
3439  adb8 a60a          	ld	a,#10
3440  adba 42            	mul	x,a
3441  adbb 9f            	ld	a,xl
3442  adbc 1e0b          	ldw	x,(OFST+7,sp)
3443  adbe a0e0          	sub	a,#224
3444  adc0 e709          	ld	(9,x),a
3445                     ; 2646           pSocket->ParseNum += (uint8_t)(saved_postpartial_previous[2] - '0');
3447  adc2 c6002b        	ld	a,_saved_postpartial_previous+2
3448  adc5 a030          	sub	a,#48
3449  adc7 eb09          	add	a,(9,x)
3450  adc9               LC014:
3451  adc9 e709          	ld	(9,x),a
3453  adcb               L7331:
3454                     ; 2648 	else if (saved_parsestate == PARSE_DELIM) {
3456                     ; 2668     if (pSocket->nState == STATE_CONNECTED) {
3458  adcb 1e0b          	ldw	x,(OFST+7,sp)
3459  adcd f6            	ld	a,(x)
3460  adce 2627          	jrne	L7431
3461                     ; 2669       if (nBytes == 0) return;
3463  add0 1e09          	ldw	x,(OFST+5,sp)
3464  add2 272b          	jreq	L452
3467                     ; 2670       if (*pBuffer == 'G') {
3469  add4 1e05          	ldw	x,(OFST+1,sp)
3470  add6 f6            	ld	a,(x)
3471  add7 a147          	cp	a,#71
3472  add9 2606          	jrne	L3531
3473                     ; 2671         pSocket->nState = STATE_GET_G;
3475  addb 1e0b          	ldw	x,(OFST+7,sp)
3476  addd a601          	ld	a,#1
3478  addf 2008          	jp	LC015
3479  ade1               L3531:
3480                     ; 2673       else if (*pBuffer == 'P') {
3482  ade1 a150          	cp	a,#80
3483  ade3 2605          	jrne	L5531
3484                     ; 2674         pSocket->nState = STATE_POST_P;
3486  ade5 1e0b          	ldw	x,(OFST+7,sp)
3487  ade7 a604          	ld	a,#4
3488  ade9               LC015:
3489  ade9 f7            	ld	(x),a
3490  adea               L5531:
3491                     ; 2676       nBytes--;
3493  adea 1e09          	ldw	x,(OFST+5,sp)
3494  adec 5a            	decw	x
3495  aded 1f09          	ldw	(OFST+5,sp),x
3496                     ; 2677       pBuffer++;
3498  adef 1e05          	ldw	x,(OFST+1,sp)
3499  adf1 5c            	incw	x
3500  adf2 1f05          	ldw	(OFST+1,sp),x
3501  adf4 1e0b          	ldw	x,(OFST+7,sp)
3502  adf6 f6            	ld	a,(x)
3503  adf7               L7431:
3504                     ; 2680     if (pSocket->nState == STATE_GET_G) {
3506  adf7 a101          	cp	a,#1
3507  adf9 2620          	jrne	L1631
3508                     ; 2681       if (nBytes == 0) return;
3510  adfb 1e09          	ldw	x,(OFST+5,sp)
3511  adfd 2603          	jrne	L3631
3513  adff               L452:
3516  adff 5b06          	addw	sp,#6
3517  ae01 81            	ret	
3518  ae02               L3631:
3519                     ; 2682       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
3521  ae02 1e05          	ldw	x,(OFST+1,sp)
3522  ae04 f6            	ld	a,(x)
3523  ae05 a145          	cp	a,#69
3524  ae07 2605          	jrne	L5631
3527  ae09 1e0b          	ldw	x,(OFST+7,sp)
3528  ae0b a602          	ld	a,#2
3529  ae0d f7            	ld	(x),a
3530  ae0e               L5631:
3531                     ; 2683       nBytes--;
3533  ae0e 1e09          	ldw	x,(OFST+5,sp)
3534  ae10 5a            	decw	x
3535  ae11 1f09          	ldw	(OFST+5,sp),x
3536                     ; 2684       pBuffer++;
3538  ae13 1e05          	ldw	x,(OFST+1,sp)
3539  ae15 5c            	incw	x
3540  ae16 1f05          	ldw	(OFST+1,sp),x
3541  ae18 1e0b          	ldw	x,(OFST+7,sp)
3542  ae1a f6            	ld	a,(x)
3543  ae1b               L1631:
3544                     ; 2687     if (pSocket->nState == STATE_GET_GE) {
3546  ae1b a102          	cp	a,#2
3547  ae1d 261d          	jrne	L7631
3548                     ; 2688       if (nBytes == 0) return;
3550  ae1f 1e09          	ldw	x,(OFST+5,sp)
3551  ae21 27dc          	jreq	L452
3554                     ; 2689       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
3556  ae23 1e05          	ldw	x,(OFST+1,sp)
3557  ae25 f6            	ld	a,(x)
3558  ae26 a154          	cp	a,#84
3559  ae28 2605          	jrne	L3731
3562  ae2a 1e0b          	ldw	x,(OFST+7,sp)
3563  ae2c a603          	ld	a,#3
3564  ae2e f7            	ld	(x),a
3565  ae2f               L3731:
3566                     ; 2690       nBytes--;
3568  ae2f 1e09          	ldw	x,(OFST+5,sp)
3569  ae31 5a            	decw	x
3570  ae32 1f09          	ldw	(OFST+5,sp),x
3571                     ; 2691       pBuffer++;
3573  ae34 1e05          	ldw	x,(OFST+1,sp)
3574  ae36 5c            	incw	x
3575  ae37 1f05          	ldw	(OFST+1,sp),x
3576  ae39 1e0b          	ldw	x,(OFST+7,sp)
3577  ae3b f6            	ld	a,(x)
3578  ae3c               L7631:
3579                     ; 2694     if (pSocket->nState == STATE_GET_GET) {
3581  ae3c a103          	cp	a,#3
3582  ae3e 261d          	jrne	L5731
3583                     ; 2695       if (nBytes == 0) return;
3585  ae40 1e09          	ldw	x,(OFST+5,sp)
3586  ae42 27bb          	jreq	L452
3589                     ; 2696       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
3591  ae44 1e05          	ldw	x,(OFST+1,sp)
3592  ae46 f6            	ld	a,(x)
3593  ae47 a120          	cp	a,#32
3594  ae49 2605          	jrne	L1041
3597  ae4b 1e0b          	ldw	x,(OFST+7,sp)
3598  ae4d a608          	ld	a,#8
3599  ae4f f7            	ld	(x),a
3600  ae50               L1041:
3601                     ; 2697       nBytes--;
3603  ae50 1e09          	ldw	x,(OFST+5,sp)
3604  ae52 5a            	decw	x
3605  ae53 1f09          	ldw	(OFST+5,sp),x
3606                     ; 2698       pBuffer++;
3608  ae55 1e05          	ldw	x,(OFST+1,sp)
3609  ae57 5c            	incw	x
3610  ae58 1f05          	ldw	(OFST+1,sp),x
3611  ae5a 1e0b          	ldw	x,(OFST+7,sp)
3612  ae5c f6            	ld	a,(x)
3613  ae5d               L5731:
3614                     ; 2701     if (pSocket->nState == STATE_POST_P) {
3616  ae5d a104          	cp	a,#4
3617  ae5f 261d          	jrne	L3041
3618                     ; 2702       if (nBytes == 0) return;
3620  ae61 1e09          	ldw	x,(OFST+5,sp)
3621  ae63 279a          	jreq	L452
3624                     ; 2703       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
3626  ae65 1e05          	ldw	x,(OFST+1,sp)
3627  ae67 f6            	ld	a,(x)
3628  ae68 a14f          	cp	a,#79
3629  ae6a 2605          	jrne	L7041
3632  ae6c 1e0b          	ldw	x,(OFST+7,sp)
3633  ae6e a605          	ld	a,#5
3634  ae70 f7            	ld	(x),a
3635  ae71               L7041:
3636                     ; 2704       nBytes--;
3638  ae71 1e09          	ldw	x,(OFST+5,sp)
3639  ae73 5a            	decw	x
3640  ae74 1f09          	ldw	(OFST+5,sp),x
3641                     ; 2705       pBuffer++;
3643  ae76 1e05          	ldw	x,(OFST+1,sp)
3644  ae78 5c            	incw	x
3645  ae79 1f05          	ldw	(OFST+1,sp),x
3646  ae7b 1e0b          	ldw	x,(OFST+7,sp)
3647  ae7d f6            	ld	a,(x)
3648  ae7e               L3041:
3649                     ; 2708     if (pSocket->nState == STATE_POST_PO) {
3651  ae7e a105          	cp	a,#5
3652  ae80 2620          	jrne	L1141
3653                     ; 2709       if (nBytes == 0) return;
3655  ae82 1e09          	ldw	x,(OFST+5,sp)
3656  ae84 2603ccadff    	jreq	L452
3659                     ; 2710       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
3661  ae89 1e05          	ldw	x,(OFST+1,sp)
3662  ae8b f6            	ld	a,(x)
3663  ae8c a153          	cp	a,#83
3664  ae8e 2605          	jrne	L5141
3667  ae90 1e0b          	ldw	x,(OFST+7,sp)
3668  ae92 a606          	ld	a,#6
3669  ae94 f7            	ld	(x),a
3670  ae95               L5141:
3671                     ; 2711       nBytes--;
3673  ae95 1e09          	ldw	x,(OFST+5,sp)
3674  ae97 5a            	decw	x
3675  ae98 1f09          	ldw	(OFST+5,sp),x
3676                     ; 2712       pBuffer++;
3678  ae9a 1e05          	ldw	x,(OFST+1,sp)
3679  ae9c 5c            	incw	x
3680  ae9d 1f05          	ldw	(OFST+1,sp),x
3681  ae9f 1e0b          	ldw	x,(OFST+7,sp)
3682  aea1 f6            	ld	a,(x)
3683  aea2               L1141:
3684                     ; 2715     if (pSocket->nState == STATE_POST_POS) {
3686  aea2 a106          	cp	a,#6
3687  aea4 261d          	jrne	L7141
3688                     ; 2716       if (nBytes == 0) return;
3690  aea6 1e09          	ldw	x,(OFST+5,sp)
3691  aea8 27dc          	jreq	L452
3694                     ; 2717       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
3696  aeaa 1e05          	ldw	x,(OFST+1,sp)
3697  aeac f6            	ld	a,(x)
3698  aead a154          	cp	a,#84
3699  aeaf 2605          	jrne	L3241
3702  aeb1 1e0b          	ldw	x,(OFST+7,sp)
3703  aeb3 a607          	ld	a,#7
3704  aeb5 f7            	ld	(x),a
3705  aeb6               L3241:
3706                     ; 2718       nBytes--;
3708  aeb6 1e09          	ldw	x,(OFST+5,sp)
3709  aeb8 5a            	decw	x
3710  aeb9 1f09          	ldw	(OFST+5,sp),x
3711                     ; 2719       pBuffer++;
3713  aebb 1e05          	ldw	x,(OFST+1,sp)
3714  aebd 5c            	incw	x
3715  aebe 1f05          	ldw	(OFST+1,sp),x
3716  aec0 1e0b          	ldw	x,(OFST+7,sp)
3717  aec2 f6            	ld	a,(x)
3718  aec3               L7141:
3719                     ; 2722     if (pSocket->nState == STATE_POST_POST) {
3721  aec3 a107          	cp	a,#7
3722  aec5 261d          	jrne	L5241
3723                     ; 2723       if (nBytes == 0) return;
3725  aec7 1e09          	ldw	x,(OFST+5,sp)
3726  aec9 27bb          	jreq	L452
3729                     ; 2724       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
3731  aecb 1e05          	ldw	x,(OFST+1,sp)
3732  aecd f6            	ld	a,(x)
3733  aece a120          	cp	a,#32
3734  aed0 2605          	jrne	L1341
3737  aed2 1e0b          	ldw	x,(OFST+7,sp)
3738  aed4 a609          	ld	a,#9
3739  aed6 f7            	ld	(x),a
3740  aed7               L1341:
3741                     ; 2725       nBytes--;
3743  aed7 1e09          	ldw	x,(OFST+5,sp)
3744  aed9 5a            	decw	x
3745  aeda 1f09          	ldw	(OFST+5,sp),x
3746                     ; 2726       pBuffer++;
3748  aedc 1e05          	ldw	x,(OFST+1,sp)
3749  aede 5c            	incw	x
3750  aedf 1f05          	ldw	(OFST+1,sp),x
3751  aee1 1e0b          	ldw	x,(OFST+7,sp)
3752  aee3 f6            	ld	a,(x)
3753  aee4               L5241:
3754                     ; 2729     if (pSocket->nState == STATE_GOTPOST) {
3756  aee4 a109          	cp	a,#9
3757  aee6 2703ccaf6d    	jrne	L3341
3758                     ; 2731       saved_nstate = STATE_GOTPOST;
3760  aeeb 3509005b      	mov	_saved_nstate,#9
3761                     ; 2732       if (nBytes == 0) {
3763  aeef 1e09          	ldw	x,(OFST+5,sp)
3764  aef1 2676          	jrne	L1441
3765                     ; 2735 	saved_newlines = pSocket->nNewlines;
3767  aef3 1e0b          	ldw	x,(OFST+7,sp)
3768  aef5 e605          	ld	a,(5,x)
3769  aef7 c70028        	ld	_saved_newlines,a
3770                     ; 2736         return;
3772  aefa ccadff        	jra	L452
3773  aefd               L7341:
3774                     ; 2744 	if (saved_newlines == 2) {
3776  aefd c60028        	ld	a,_saved_newlines
3777  af00 a102          	cp	a,#2
3778  af02 272b          	jreq	L7441
3780                     ; 2749           if (*pBuffer == '\n') pSocket->nNewlines++;
3782  af04 1e05          	ldw	x,(OFST+1,sp)
3783  af06 f6            	ld	a,(x)
3784  af07 a10a          	cp	a,#10
3785  af09 2606          	jrne	L1541
3788  af0b 1e0b          	ldw	x,(OFST+7,sp)
3789  af0d 6c05          	inc	(5,x)
3791  af0f 2008          	jra	L3541
3792  af11               L1541:
3793                     ; 2750           else if (*pBuffer == '\r') { }
3795  af11 a10d          	cp	a,#13
3796  af13 2704          	jreq	L3541
3798                     ; 2751           else pSocket->nNewlines = 0;
3800  af15 1e0b          	ldw	x,(OFST+7,sp)
3801  af17 6f05          	clr	(5,x)
3802  af19               L3541:
3803                     ; 2752           pBuffer++;
3805  af19 1e05          	ldw	x,(OFST+1,sp)
3806  af1b 5c            	incw	x
3807  af1c 1f05          	ldw	(OFST+1,sp),x
3808                     ; 2753           nBytes--;
3810  af1e 1e09          	ldw	x,(OFST+5,sp)
3811  af20 5a            	decw	x
3812  af21 1f09          	ldw	(OFST+5,sp),x
3813                     ; 2754           if (nBytes == 0) {
3815  af23 260a          	jrne	L7441
3816                     ; 2757             saved_newlines = pSocket->nNewlines;
3818  af25 1e0b          	ldw	x,(OFST+7,sp)
3819  af27 e605          	ld	a,(5,x)
3820  af29 c70028        	ld	_saved_newlines,a
3821                     ; 2758             return;
3823  af2c ccadff        	jra	L452
3824  af2f               L7441:
3825                     ; 2766         if (pSocket->nNewlines == 2) {
3827  af2f 1e0b          	ldw	x,(OFST+7,sp)
3828  af31 e605          	ld	a,(5,x)
3829  af33 a102          	cp	a,#2
3830  af35 2632          	jrne	L1441
3831                     ; 2769           if (current_webpage == WEBPAGE_IOCONTROL) {
3833  af37 c6001a        	ld	a,_current_webpage
3834  af3a 2609          	jrne	L5641
3835                     ; 2770 	    pSocket->nParseLeft = PARSEBYTES_IOCONTROL;
3837  af3c a635          	ld	a,#53
3838  af3e e706          	ld	(6,x),a
3839                     ; 2771 	    pSocket->nParseLeftAddl = PARSEBYTES_IOCONTROL_ADDL;
3841  af40 6f07          	clr	(7,x)
3842  af42 c6001a        	ld	a,_current_webpage
3843  af45               L5641:
3844                     ; 2773           if (current_webpage == WEBPAGE_CONFIGURATION) {
3846  af45 4a            	dec	a
3847  af46 2608          	jrne	L7641
3848                     ; 2774 	    pSocket->nParseLeft = PARSEBYTES_CONFIGURATION;
3850  af48 a6ec          	ld	a,#236
3851  af4a e706          	ld	(6,x),a
3852                     ; 2775 	    pSocket->nParseLeftAddl = PARSEBYTES_CONFIGURATION_ADDL;
3854  af4c a618          	ld	a,#24
3855  af4e e707          	ld	(7,x),a
3856  af50               L7641:
3857                     ; 2777           pSocket->ParseState = saved_parsestate = PARSE_CMD;
3859  af50 725f005a      	clr	_saved_parsestate
3860  af54 6f0a          	clr	(10,x)
3861                     ; 2778 	  saved_nparseleft = pSocket->nParseLeft;
3863  af56 e606          	ld	a,(6,x)
3864  af58 c70059        	ld	_saved_nparseleft,a
3865                     ; 2780           pSocket->nState = STATE_PARSEPOST;
3867  af5b a60a          	ld	a,#10
3868  af5d f7            	ld	(x),a
3869                     ; 2781 	  saved_nstate = STATE_PARSEPOST;
3871  af5e 350a005b      	mov	_saved_nstate,#10
3872                     ; 2782 	  if (nBytes == 0) {
3874  af62 1e09          	ldw	x,(OFST+5,sp)
3875  af64 2607          	jrne	L3341
3876                     ; 2785 	    return;
3878  af66 ccadff        	jra	L452
3879  af69               L1441:
3880                     ; 2739       while (nBytes != 0) {
3882  af69 1e09          	ldw	x,(OFST+5,sp)
3883  af6b 2690          	jrne	L7341
3884  af6d               L3341:
3885                     ; 2792     if (pSocket->nState == STATE_GOTGET) {
3887  af6d 1e0b          	ldw	x,(OFST+7,sp)
3888  af6f f6            	ld	a,(x)
3889  af70 a108          	cp	a,#8
3890  af72 2609          	jrne	L3741
3891                     ; 2796       pSocket->nParseLeft = 6;
3893  af74 a606          	ld	a,#6
3894  af76 e706          	ld	(6,x),a
3895                     ; 2797       pSocket->ParseState = PARSE_SLASH1;
3897  af78 e70a          	ld	(10,x),a
3898                     ; 2799       pSocket->nState = STATE_PARSEGET;
3900  af7a a60d          	ld	a,#13
3901  af7c f7            	ld	(x),a
3902  af7d               L3741:
3903                     ; 2802     if (pSocket->nState == STATE_PARSEPOST) {
3905  af7d a10a          	cp	a,#10
3906  af7f 2703ccb45d    	jrne	L5741
3907  af84               L7741:
3908                     ; 2816         if (pSocket->ParseState == PARSE_CMD) {
3910  af84 1e0b          	ldw	x,(OFST+7,sp)
3911  af86 e60a          	ld	a,(10,x)
3912  af88 2664          	jrne	L3051
3913                     ; 2817           pSocket->ParseCmd = *pBuffer;
3915  af8a 1e05          	ldw	x,(OFST+1,sp)
3916  af8c f6            	ld	a,(x)
3917  af8d 1e0b          	ldw	x,(OFST+7,sp)
3918  af8f e708          	ld	(8,x),a
3919                     ; 2818 	  saved_postpartial[0] = *pBuffer;
3921  af91 1e05          	ldw	x,(OFST+1,sp)
3922  af93 f6            	ld	a,(x)
3923  af94 c70041        	ld	_saved_postpartial,a
3924                     ; 2819           pSocket->ParseState = saved_parsestate = PARSE_NUM10;
3926  af97 a601          	ld	a,#1
3927  af99 c7005a        	ld	_saved_parsestate,a
3928  af9c 1e0b          	ldw	x,(OFST+7,sp)
3929  af9e e70a          	ld	(10,x),a
3930                     ; 2820 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3932  afa0 e606          	ld	a,(6,x)
3933  afa2 2704          	jreq	L5051
3934                     ; 2821 	    pSocket->nParseLeft--;
3936  afa4 6a06          	dec	(6,x)
3938  afa6 2004          	jra	L7051
3939  afa8               L5051:
3940                     ; 2825 	    pSocket->ParseState = PARSE_DELIM;
3942  afa8 a605          	ld	a,#5
3943  afaa e70a          	ld	(10,x),a
3944  afac               L7051:
3945                     ; 2827 	  saved_nparseleft = pSocket->nParseLeft;
3947  afac e606          	ld	a,(6,x)
3948  afae c70059        	ld	_saved_nparseleft,a
3949                     ; 2828           pBuffer++;
3951  afb1 1e05          	ldw	x,(OFST+1,sp)
3952  afb3 5c            	incw	x
3953  afb4 1f05          	ldw	(OFST+1,sp),x
3954                     ; 2829 	  nBytes --;
3956  afb6 1e09          	ldw	x,(OFST+5,sp)
3957  afb8 5a            	decw	x
3958  afb9 1f09          	ldw	(OFST+5,sp),x
3959                     ; 2831 	  if (pSocket->ParseCmd == 'o' ||
3959                     ; 2832 	      pSocket->ParseCmd == 'a' ||
3959                     ; 2833 	      pSocket->ParseCmd == 'b' ||
3959                     ; 2834 	      pSocket->ParseCmd == 'c' ||
3959                     ; 2835 	      pSocket->ParseCmd == 'd' ||
3959                     ; 2836 	      pSocket->ParseCmd == 'g' ||
3959                     ; 2837 	      pSocket->ParseCmd == 'l' ||
3959                     ; 2838 	      pSocket->ParseCmd == 'm' ||
3959                     ; 2839 	      pSocket->ParseCmd == 'z') { }
3961  afbb 1e0b          	ldw	x,(OFST+7,sp)
3962  afbd e608          	ld	a,(8,x)
3963  afbf a16f          	cp	a,#111
3964  afc1 2724          	jreq	L3351
3966  afc3 a161          	cp	a,#97
3967  afc5 2720          	jreq	L3351
3969  afc7 a162          	cp	a,#98
3970  afc9 271c          	jreq	L3351
3972  afcb a163          	cp	a,#99
3973  afcd 2718          	jreq	L3351
3975  afcf a164          	cp	a,#100
3976  afd1 2714          	jreq	L3351
3978  afd3 a167          	cp	a,#103
3979  afd5 2710          	jreq	L3351
3981  afd7 a16c          	cp	a,#108
3982  afd9 270c          	jreq	L3351
3984  afdb a16d          	cp	a,#109
3985  afdd 2708          	jreq	L3351
3987  afdf a17a          	cp	a,#122
3988  afe1 2704          	jreq	L3351
3989                     ; 2842 	    pSocket->ParseState = PARSE_DELIM;
3991  afe3 a605          	ld	a,#5
3992  afe5 e70a          	ld	(10,x),a
3993  afe7               L3351:
3994                     ; 2844 	  if (nBytes == 0) { // Hit end of fragment. Break out of while()
3996  afe7 1e09          	ldw	x,(OFST+5,sp)
3997  afe9 2699          	jrne	L7741
3998                     ; 2846 	    break;
4000  afeb ccb405        	jra	L1051
4001  afee               L3051:
4002                     ; 2850         else if (pSocket->ParseState == PARSE_NUM10) {
4004  afee a101          	cp	a,#1
4005  aff0 2640          	jrne	L1451
4006                     ; 2851           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
4008  aff2 1e05          	ldw	x,(OFST+1,sp)
4009  aff4 f6            	ld	a,(x)
4010  aff5 97            	ld	xl,a
4011  aff6 a60a          	ld	a,#10
4012  aff8 42            	mul	x,a
4013  aff9 9f            	ld	a,xl
4014  affa 1e0b          	ldw	x,(OFST+7,sp)
4015  affc a0e0          	sub	a,#224
4016  affe e709          	ld	(9,x),a
4017                     ; 2852 	  saved_postpartial[1] = *pBuffer;
4019  b000 1e05          	ldw	x,(OFST+1,sp)
4020  b002 f6            	ld	a,(x)
4021  b003 c70042        	ld	_saved_postpartial+1,a
4022                     ; 2853           pSocket->ParseState = saved_parsestate = PARSE_NUM1;
4024  b006 a602          	ld	a,#2
4025  b008 c7005a        	ld	_saved_parsestate,a
4026  b00b 1e0b          	ldw	x,(OFST+7,sp)
4027  b00d e70a          	ld	(10,x),a
4028                     ; 2854 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4030  b00f e606          	ld	a,(6,x)
4031  b011 2704          	jreq	L3451
4032                     ; 2855 	    pSocket->nParseLeft--;
4034  b013 6a06          	dec	(6,x)
4036  b015 2004          	jra	L5451
4037  b017               L3451:
4038                     ; 2859 	    pSocket->ParseState = PARSE_DELIM;
4040  b017 a605          	ld	a,#5
4041  b019 e70a          	ld	(10,x),a
4042  b01b               L5451:
4043                     ; 2861 	  saved_nparseleft = pSocket->nParseLeft;
4045  b01b e606          	ld	a,(6,x)
4046  b01d c70059        	ld	_saved_nparseleft,a
4047                     ; 2862           pBuffer++;
4049  b020 1e05          	ldw	x,(OFST+1,sp)
4050  b022 5c            	incw	x
4051  b023 1f05          	ldw	(OFST+1,sp),x
4052                     ; 2863 	  nBytes--;
4054  b025 1e09          	ldw	x,(OFST+5,sp)
4055  b027 5a            	decw	x
4056  b028 1f09          	ldw	(OFST+5,sp),x
4057                     ; 2864 	  if (nBytes == 0) {
4059  b02a 2703ccaf84    	jrne	L7741
4060                     ; 2866 	    break;
4062  b02f ccb405        	jra	L1051
4063  b032               L1451:
4064                     ; 2870         else if (pSocket->ParseState == PARSE_NUM1) {
4066  b032 a102          	cp	a,#2
4067  b034 2638          	jrne	L3551
4068                     ; 2871           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
4070  b036 1605          	ldw	y,(OFST+1,sp)
4071  b038 90f6          	ld	a,(y)
4072  b03a a030          	sub	a,#48
4073  b03c eb09          	add	a,(9,x)
4074  b03e e709          	ld	(9,x),a
4075                     ; 2872 	  saved_postpartial[2] = *pBuffer;
4077  b040 93            	ldw	x,y
4078  b041 f6            	ld	a,(x)
4079  b042 c70043        	ld	_saved_postpartial+2,a
4080                     ; 2873           pSocket->ParseState = saved_parsestate = PARSE_EQUAL;
4082  b045 a603          	ld	a,#3
4083  b047 c7005a        	ld	_saved_parsestate,a
4084  b04a 1e0b          	ldw	x,(OFST+7,sp)
4085  b04c e70a          	ld	(10,x),a
4086                     ; 2874 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4088  b04e e606          	ld	a,(6,x)
4089  b050 2704          	jreq	L5551
4090                     ; 2875 	    pSocket->nParseLeft--;
4092  b052 6a06          	dec	(6,x)
4094  b054 2004          	jra	L7551
4095  b056               L5551:
4096                     ; 2879 	    pSocket->ParseState = PARSE_DELIM;
4098  b056 a605          	ld	a,#5
4099  b058 e70a          	ld	(10,x),a
4100  b05a               L7551:
4101                     ; 2881 	  saved_nparseleft = pSocket->nParseLeft;
4103  b05a e606          	ld	a,(6,x)
4104  b05c c70059        	ld	_saved_nparseleft,a
4105                     ; 2882           pBuffer++;
4107  b05f 1e05          	ldw	x,(OFST+1,sp)
4108  b061 5c            	incw	x
4109  b062 1f05          	ldw	(OFST+1,sp),x
4110                     ; 2883 	  nBytes--;
4112  b064 1e09          	ldw	x,(OFST+5,sp)
4113  b066 5a            	decw	x
4114  b067 1f09          	ldw	(OFST+5,sp),x
4115                     ; 2884 	  if (nBytes == 0) {
4117  b069 26c1          	jrne	L7741
4118                     ; 2886 	    break;
4120  b06b ccb405        	jra	L1051
4121  b06e               L3551:
4122                     ; 2890         else if (pSocket->ParseState == PARSE_EQUAL) {
4124  b06e a103          	cp	a,#3
4125  b070 262f          	jrne	L5651
4126                     ; 2891           pSocket->ParseState = saved_parsestate = PARSE_VAL;
4128  b072 a604          	ld	a,#4
4129  b074 c7005a        	ld	_saved_parsestate,a
4130  b077 e70a          	ld	(10,x),a
4131                     ; 2892 	  saved_postpartial[3] = *pBuffer;
4133  b079 1e05          	ldw	x,(OFST+1,sp)
4134  b07b f6            	ld	a,(x)
4135  b07c c70044        	ld	_saved_postpartial+3,a
4136                     ; 2893 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4138  b07f 1e0b          	ldw	x,(OFST+7,sp)
4139  b081 e606          	ld	a,(6,x)
4140  b083 2704          	jreq	L7651
4141                     ; 2894 	    pSocket->nParseLeft--;
4143  b085 6a06          	dec	(6,x)
4145  b087 2004          	jra	L1751
4146  b089               L7651:
4147                     ; 2898 	    pSocket->ParseState = PARSE_DELIM;
4149  b089 a605          	ld	a,#5
4150  b08b e70a          	ld	(10,x),a
4151  b08d               L1751:
4152                     ; 2900 	  saved_nparseleft = pSocket->nParseLeft;
4154  b08d e606          	ld	a,(6,x)
4155  b08f c70059        	ld	_saved_nparseleft,a
4156                     ; 2901           pBuffer++;
4158  b092 1e05          	ldw	x,(OFST+1,sp)
4159  b094 5c            	incw	x
4160  b095 1f05          	ldw	(OFST+1,sp),x
4161                     ; 2902 	  nBytes--;
4163  b097 1e09          	ldw	x,(OFST+5,sp)
4164  b099 5a            	decw	x
4165  b09a 1f09          	ldw	(OFST+5,sp),x
4166                     ; 2903 	  if (nBytes == 0) {
4168  b09c 268e          	jrne	L7741
4169                     ; 2905 	    break;
4171  b09e ccb405        	jra	L1051
4172  b0a1               L5651:
4173                     ; 2909         else if (pSocket->ParseState == PARSE_VAL) {
4175  b0a1 a104          	cp	a,#4
4176  b0a3 2703ccb3d8    	jrne	L7751
4177                     ; 2922           if (pSocket->ParseCmd == 'o') {
4179  b0a8 e608          	ld	a,(8,x)
4180  b0aa a16f          	cp	a,#111
4181  b0ac 2640          	jrne	L1061
4182                     ; 2936               if ((uint8_t)(*pBuffer) == '1') pin_value = 1;
4184  b0ae 1e05          	ldw	x,(OFST+1,sp)
4185  b0b0 f6            	ld	a,(x)
4186  b0b1 a131          	cp	a,#49
4187  b0b3 2604          	jrne	L3061
4190  b0b5 a601          	ld	a,#1
4192  b0b7 2001          	jra	L5061
4193  b0b9               L3061:
4194                     ; 2937 	      else pin_value = 0;
4196  b0b9 4f            	clr	a
4197  b0ba               L5061:
4198  b0ba 6b01          	ld	(OFST-3,sp),a
4200                     ; 2938 	      GpioSetPin(pSocket->ParseNum, (uint8_t)pin_value);
4202  b0bc 160b          	ldw	y,(OFST+7,sp)
4203  b0be 97            	ld	xl,a
4204  b0bf 90e609        	ld	a,(9,y)
4205  b0c2 95            	ld	xh,a
4206  b0c3 cdbc95        	call	_GpioSetPin
4208                     ; 2940 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent
4210  b0c6 1e0b          	ldw	x,(OFST+7,sp)
4211  b0c8 e606          	ld	a,(6,x)
4212  b0ca 2704          	jreq	L7061
4215  b0cc 6a06          	dec	(6,x)
4216  b0ce e606          	ld	a,(6,x)
4217  b0d0               L7061:
4218                     ; 2942             saved_nparseleft = pSocket->nParseLeft;
4220  b0d0 c70059        	ld	_saved_nparseleft,a
4221                     ; 2943             pBuffer++;
4223  b0d3 1e05          	ldw	x,(OFST+1,sp)
4224  b0d5 5c            	incw	x
4225  b0d6 1f05          	ldw	(OFST+1,sp),x
4226                     ; 2944 	    nBytes--;
4228  b0d8 1e09          	ldw	x,(OFST+5,sp)
4229  b0da 5a            	decw	x
4230  b0db 1f09          	ldw	(OFST+5,sp),x
4231                     ; 2945 	    if (nBytes == 0) {
4233  b0dd 2703ccb3b6    	jrne	L3161
4234                     ; 2948 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4236  b0e2 a605          	ld	a,#5
4237  b0e4 c7005a        	ld	_saved_parsestate,a
4238  b0e7 1e0b          	ldw	x,(OFST+7,sp)
4239  b0e9 e70a          	ld	(10,x),a
4240                     ; 2949 	      break;
4242  b0eb ccb405        	jra	L1051
4243  b0ee               L1061:
4244                     ; 2956           else if (pSocket->ParseCmd == 'a'
4244                     ; 2957                 || pSocket->ParseCmd == 'l'
4244                     ; 2958                 || pSocket->ParseCmd == 'm' ) {
4246  b0ee a161          	cp	a,#97
4247  b0f0 2708          	jreq	L7161
4249  b0f2 a16c          	cp	a,#108
4250  b0f4 2704          	jreq	L7161
4252  b0f6 a16d          	cp	a,#109
4253  b0f8 2657          	jrne	L5161
4254  b0fa               L7161:
4255                     ; 2962 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4257  b0fa 725f0021      	clr	_break_while
4258                     ; 2964             tmp_pBuffer = pBuffer;
4260  b0fe 1e05          	ldw	x,(OFST+1,sp)
4261  b100 cf0025        	ldw	_tmp_pBuffer,x
4262                     ; 2965             tmp_nBytes = nBytes;
4264  b103 1e09          	ldw	x,(OFST+5,sp)
4265  b105 cf0023        	ldw	_tmp_nBytes,x
4266                     ; 2966 	    tmp_nParseLeft = pSocket->nParseLeft;
4268  b108 1e0b          	ldw	x,(OFST+7,sp)
4269  b10a e606          	ld	a,(6,x)
4270  b10c c70022        	ld	_tmp_nParseLeft,a
4271                     ; 2967             switch (pSocket->ParseCmd) {
4273  b10f e608          	ld	a,(8,x)
4275                     ; 2970               case 'm': i = 10; break;
4276  b111 a061          	sub	a,#97
4277  b113 270b          	jreq	L3701
4278  b115 a00b          	sub	a,#11
4279  b117 270b          	jreq	L5701
4280  b119 4a            	dec	a
4281  b11a 2708          	jreq	L5701
4282  b11c 7b04          	ld	a,(OFST+0,sp)
4283  b11e 2008          	jra	L5261
4284  b120               L3701:
4285                     ; 2968               case 'a': i = 19; break;
4287  b120 a613          	ld	a,#19
4290  b122 2002          	jp	LC018
4291  b124               L5701:
4292                     ; 2969               case 'l':
4292                     ; 2970               case 'm': i = 10; break;
4294  b124 a60a          	ld	a,#10
4295  b126               LC018:
4296  b126 6b04          	ld	(OFST+0,sp),a
4300  b128               L5261:
4301                     ; 2972             parse_POST_string(pSocket->ParseCmd, i);
4303  b128 160b          	ldw	y,(OFST+7,sp)
4304  b12a 97            	ld	xl,a
4305  b12b 90e608        	ld	a,(8,y)
4306  b12e 95            	ld	xh,a
4307  b12f cdb807        	call	_parse_POST_string
4309                     ; 2973             pBuffer = tmp_pBuffer;
4311  b132 ce0025        	ldw	x,_tmp_pBuffer
4312  b135 1f05          	ldw	(OFST+1,sp),x
4313                     ; 2974             nBytes = tmp_nBytes;
4315  b137 ce0023        	ldw	x,_tmp_nBytes
4316  b13a 1f09          	ldw	(OFST+5,sp),x
4317                     ; 2975 	    pSocket->nParseLeft = tmp_nParseLeft;
4319  b13c 1e0b          	ldw	x,(OFST+7,sp)
4320  b13e c60022        	ld	a,_tmp_nParseLeft
4321  b141 e706          	ld	(6,x),a
4322                     ; 2976             if (break_while == 1) {
4324  b143 c60021        	ld	a,_break_while
4325  b146 4a            	dec	a
4326  b147 2696          	jrne	L3161
4327                     ; 2980 	      pSocket->ParseState = saved_parsestate;
4329  b149 c6005a        	ld	a,_saved_parsestate
4330  b14c e70a          	ld	(10,x),a
4331                     ; 2981 	      break;
4333  b14e ccb405        	jra	L1051
4334  b151               L5161:
4335                     ; 2988           else if (pSocket->ParseCmd == 'b') {
4337  b151 a162          	cp	a,#98
4338  b153 2654          	jrne	L3361
4339                     ; 2996 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4341  b155 725f0021      	clr	_break_while
4342                     ; 2998             tmp_pBuffer = pBuffer;
4344  b159 1e05          	ldw	x,(OFST+1,sp)
4345  b15b cf0025        	ldw	_tmp_pBuffer,x
4346                     ; 2999             tmp_nBytes = nBytes;
4348  b15e 1e09          	ldw	x,(OFST+5,sp)
4349  b160 cf0023        	ldw	_tmp_nBytes,x
4350                     ; 3000 	    tmp_nParseLeft = pSocket->nParseLeft;
4352  b163 1e0b          	ldw	x,(OFST+7,sp)
4353  b165 e606          	ld	a,(6,x)
4354  b167 c70022        	ld	_tmp_nParseLeft,a
4355                     ; 3001             parse_POST_address(pSocket->ParseCmd, pSocket->ParseNum);
4357  b16a e609          	ld	a,(9,x)
4358  b16c 160b          	ldw	y,(OFST+7,sp)
4359  b16e 97            	ld	xl,a
4360  b16f 90e608        	ld	a,(8,y)
4361  b172 95            	ld	xh,a
4362  b173 cdb988        	call	_parse_POST_address
4364                     ; 3002             pBuffer = tmp_pBuffer;
4366  b176 ce0025        	ldw	x,_tmp_pBuffer
4367  b179 1f05          	ldw	(OFST+1,sp),x
4368                     ; 3003             nBytes = tmp_nBytes;
4370  b17b ce0023        	ldw	x,_tmp_nBytes
4371  b17e 1f09          	ldw	(OFST+5,sp),x
4372                     ; 3004 	    pSocket->nParseLeft = tmp_nParseLeft;
4374  b180 1e0b          	ldw	x,(OFST+7,sp)
4375  b182 c60022        	ld	a,_tmp_nParseLeft
4376  b185 e706          	ld	(6,x),a
4377                     ; 3005             if (break_while == 1) {
4379  b187 c60021        	ld	a,_break_while
4380  b18a a101          	cp	a,#1
4381  b18c 260a          	jrne	L5361
4382                     ; 3009               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4384  b18e a604          	ld	a,#4
4385  b190 c7005a        	ld	_saved_parsestate,a
4386  b193 e70a          	ld	(10,x),a
4387                     ; 3010 	      break;
4389  b195 ccb405        	jra	L1051
4390  b198               L5361:
4391                     ; 3012             if (break_while == 2) {
4393  b198 a102          	cp	a,#2
4394  b19a 2703ccb3b6    	jrne	L3161
4395                     ; 3015               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4397  b19f a605          	ld	a,#5
4398  b1a1 c7005a        	ld	_saved_parsestate,a
4399  b1a4 e70a          	ld	(10,x),a
4400                     ; 3016 	      break;
4402  b1a6 ccb405        	jra	L1051
4403  b1a9               L3361:
4404                     ; 3023           else if (pSocket->ParseCmd == 'c') {
4406  b1a9 a163          	cp	a,#99
4407  b1ab 2651          	jrne	L3461
4408                     ; 3032 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4410  b1ad 725f0021      	clr	_break_while
4411                     ; 3034             tmp_pBuffer = pBuffer;
4413  b1b1 1e05          	ldw	x,(OFST+1,sp)
4414  b1b3 cf0025        	ldw	_tmp_pBuffer,x
4415                     ; 3035             tmp_nBytes = nBytes;
4417  b1b6 1e09          	ldw	x,(OFST+5,sp)
4418  b1b8 cf0023        	ldw	_tmp_nBytes,x
4419                     ; 3036 	    tmp_nParseLeft = pSocket->nParseLeft;
4421  b1bb 1e0b          	ldw	x,(OFST+7,sp)
4422  b1bd e606          	ld	a,(6,x)
4423  b1bf c70022        	ld	_tmp_nParseLeft,a
4424                     ; 3037             parse_POST_port(pSocket->ParseCmd, pSocket->ParseNum);
4426  b1c2 e609          	ld	a,(9,x)
4427  b1c4 160b          	ldw	y,(OFST+7,sp)
4428  b1c6 97            	ld	xl,a
4429  b1c7 90e608        	ld	a,(8,y)
4430  b1ca 95            	ld	xh,a
4431  b1cb cdbae0        	call	_parse_POST_port
4433                     ; 3038             pBuffer = tmp_pBuffer;
4435  b1ce ce0025        	ldw	x,_tmp_pBuffer
4436  b1d1 1f05          	ldw	(OFST+1,sp),x
4437                     ; 3039             nBytes = tmp_nBytes;
4439  b1d3 ce0023        	ldw	x,_tmp_nBytes
4440  b1d6 1f09          	ldw	(OFST+5,sp),x
4441                     ; 3040 	    pSocket->nParseLeft = tmp_nParseLeft;
4443  b1d8 1e0b          	ldw	x,(OFST+7,sp)
4444  b1da c60022        	ld	a,_tmp_nParseLeft
4445  b1dd e706          	ld	(6,x),a
4446                     ; 3041             if (break_while == 1) {
4448  b1df c60021        	ld	a,_break_while
4449  b1e2 a101          	cp	a,#1
4450  b1e4 260a          	jrne	L5461
4451                     ; 3044               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4453  b1e6 a604          	ld	a,#4
4454  b1e8 c7005a        	ld	_saved_parsestate,a
4455  b1eb e70a          	ld	(10,x),a
4456                     ; 3045 	      break;
4458  b1ed ccb405        	jra	L1051
4459  b1f0               L5461:
4460                     ; 3047             if (break_while == 2) {
4462  b1f0 a102          	cp	a,#2
4463  b1f2 26a8          	jrne	L3161
4464                     ; 3050               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4466  b1f4 a605          	ld	a,#5
4467  b1f6 c7005a        	ld	_saved_parsestate,a
4468  b1f9 e70a          	ld	(10,x),a
4469                     ; 3051 	      break;
4471  b1fb ccb405        	jra	L1051
4472  b1fe               L3461:
4473                     ; 3058           else if (pSocket->ParseCmd == 'd') {
4475  b1fe a164          	cp	a,#100
4476  b200 2703ccb2a0    	jrne	L3561
4477                     ; 3064 	    alpha[0] = '-';
4479  b205 352d001b      	mov	_alpha,#45
4480                     ; 3065 	    alpha[1] = '-';
4482  b209 352d001c      	mov	_alpha+1,#45
4483                     ; 3067 	    if (saved_postpartial_previous[0] == 'd') {
4485  b20d c60029        	ld	a,_saved_postpartial_previous
4486  b210 a164          	cp	a,#100
4487  b212 261a          	jrne	L5561
4488                     ; 3071 	      saved_postpartial_previous[0] = '\0';
4490  b214 725f0029      	clr	_saved_postpartial_previous
4491                     ; 3077 	      if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
4493  b218 c6002d        	ld	a,_saved_postpartial_previous+4
4494  b21b 2705          	jreq	L7561
4497  b21d 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
4498  b222               L7561:
4499                     ; 3078 	      if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
4501  b222 c6002e        	ld	a,_saved_postpartial_previous+5
4502  b225 270a          	jreq	L3661
4505  b227 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
4506  b22c 2003          	jra	L3661
4507  b22e               L5561:
4508                     ; 3085               clear_saved_postpartial_data(); // Clear [4] and higher
4510  b22e cdb7f2        	call	_clear_saved_postpartial_data
4512  b231               L3661:
4513                     ; 3088             if (alpha[0] == '-') {
4515  b231 c6001b        	ld	a,_alpha
4516  b234 a12d          	cp	a,#45
4517  b236 261e          	jrne	L5661
4518                     ; 3089 	      alpha[0] = (uint8_t)(*pBuffer);
4520  b238 1e05          	ldw	x,(OFST+1,sp)
4521  b23a f6            	ld	a,(x)
4522  b23b c7001b        	ld	_alpha,a
4523                     ; 3090               saved_postpartial[4] = *pBuffer;
4525  b23e c70045        	ld	_saved_postpartial+4,a
4526                     ; 3091               pSocket->nParseLeft--;
4528  b241 1e0b          	ldw	x,(OFST+7,sp)
4529  b243 6a06          	dec	(6,x)
4530                     ; 3092               saved_nparseleft = pSocket->nParseLeft;
4532  b245 e606          	ld	a,(6,x)
4533  b247 c70059        	ld	_saved_nparseleft,a
4534                     ; 3093               pBuffer++;
4536  b24a 1e05          	ldw	x,(OFST+1,sp)
4537  b24c 5c            	incw	x
4538  b24d 1f05          	ldw	(OFST+1,sp),x
4539                     ; 3094 	      nBytes--;
4541  b24f 1e09          	ldw	x,(OFST+5,sp)
4542  b251 5a            	decw	x
4543  b252 1f09          	ldw	(OFST+5,sp),x
4544                     ; 3095               if (nBytes == 0) break; // Hit end of fragment. Break out of
4546  b254 27a5          	jreq	L1051
4549  b256               L5661:
4550                     ; 3099             if (alpha[1] == '-') {
4552  b256 c6001c        	ld	a,_alpha+1
4553  b259 a12d          	cp	a,#45
4554  b25b 261c          	jrne	L1761
4555                     ; 3100 	      alpha[1] = (uint8_t)(*pBuffer);
4557  b25d 1e05          	ldw	x,(OFST+1,sp)
4558  b25f f6            	ld	a,(x)
4559  b260 c7001c        	ld	_alpha+1,a
4560                     ; 3101               saved_postpartial[5] = *pBuffer;
4562  b263 c70046        	ld	_saved_postpartial+5,a
4563                     ; 3102               pSocket->nParseLeft--;
4565  b266 1e0b          	ldw	x,(OFST+7,sp)
4566  b268 6a06          	dec	(6,x)
4567                     ; 3103               saved_nparseleft = pSocket->nParseLeft;
4569  b26a e606          	ld	a,(6,x)
4570  b26c c70059        	ld	_saved_nparseleft,a
4571                     ; 3104               pBuffer++;
4573  b26f 1e05          	ldw	x,(OFST+1,sp)
4574  b271 5c            	incw	x
4575  b272 1f05          	ldw	(OFST+1,sp),x
4576                     ; 3105 	      nBytes--;
4578  b274 1e09          	ldw	x,(OFST+5,sp)
4579  b276 5a            	decw	x
4580  b277 1f09          	ldw	(OFST+5,sp),x
4581  b279               L1761:
4582                     ; 3111             clear_saved_postpartial_all();
4584  b279 cdb7de        	call	_clear_saved_postpartial_all
4586                     ; 3113             SetMAC(pSocket->ParseNum, alpha[0], alpha[1]);
4588  b27c 3b001c        	push	_alpha+1
4589  b27f c6001b        	ld	a,_alpha
4590  b282 160c          	ldw	y,(OFST+8,sp)
4591  b284 97            	ld	xl,a
4592  b285 90e609        	ld	a,(9,y)
4593  b288 95            	ld	xh,a
4594  b289 cdbcea        	call	_SetMAC
4596  b28c 84            	pop	a
4597                     ; 3115             if (nBytes == 0) {
4599  b28d 1e09          	ldw	x,(OFST+5,sp)
4600  b28f 2703ccb3b6    	jrne	L3161
4601                     ; 3118 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4603  b294 a605          	ld	a,#5
4604  b296 c7005a        	ld	_saved_parsestate,a
4605  b299 1e0b          	ldw	x,(OFST+7,sp)
4606  b29b e70a          	ld	(10,x),a
4607                     ; 3119 	      break;
4609  b29d ccb405        	jra	L1051
4610  b2a0               L3561:
4611                     ; 3126 	  else if (pSocket->ParseCmd == 'g') {
4613  b2a0 a167          	cp	a,#103
4614  b2a2 2703ccb3a9    	jrne	L7761
4615                     ; 3137             for (i=0; i<6; i++) alpha[i] = '-';
4617  b2a7 4f            	clr	a
4618  b2a8 6b04          	ld	(OFST+0,sp),a
4620  b2aa               L1071:
4623  b2aa 5f            	clrw	x
4624  b2ab 97            	ld	xl,a
4625  b2ac a62d          	ld	a,#45
4626  b2ae d7001b        	ld	(_alpha,x),a
4629  b2b1 0c04          	inc	(OFST+0,sp)
4633  b2b3 7b04          	ld	a,(OFST+0,sp)
4634  b2b5 a106          	cp	a,#6
4635  b2b7 25f1          	jrult	L1071
4636                     ; 3139 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4638  b2b9 725f0021      	clr	_break_while
4639                     ; 3142 	    if (saved_postpartial_previous[0] == 'g') {
4641  b2bd c60029        	ld	a,_saved_postpartial_previous
4642  b2c0 a167          	cp	a,#103
4643  b2c2 2621          	jrne	L7071
4644                     ; 3146 	      saved_postpartial_previous[0] = '\0';
4646  b2c4 725f0029      	clr	_saved_postpartial_previous
4647                     ; 3152               for (i=0; i<6; i++) {
4649  b2c8 4f            	clr	a
4650  b2c9 6b04          	ld	(OFST+0,sp),a
4652  b2cb               L1171:
4653                     ; 3153                 if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
4655  b2cb 5f            	clrw	x
4656  b2cc 97            	ld	xl,a
4657  b2cd 724d002d      	tnz	(_saved_postpartial_previous+4,x)
4658  b2d1 2708          	jreq	L7171
4661  b2d3 5f            	clrw	x
4662  b2d4 97            	ld	xl,a
4663  b2d5 d6002d        	ld	a,(_saved_postpartial_previous+4,x)
4664  b2d8 d7001b        	ld	(_alpha,x),a
4665  b2db               L7171:
4666                     ; 3152               for (i=0; i<6; i++) {
4668  b2db 0c04          	inc	(OFST+0,sp)
4672  b2dd 7b04          	ld	a,(OFST+0,sp)
4673  b2df a106          	cp	a,#6
4674  b2e1 25e8          	jrult	L1171
4676  b2e3 2003          	jra	L1271
4677  b2e5               L7071:
4678                     ; 3161               clear_saved_postpartial_data(); // Clear [4] and higher
4680  b2e5 cdb7f2        	call	_clear_saved_postpartial_data
4682  b2e8               L1271:
4683                     ; 3164             for (i=0; i<6; i++) {
4685  b2e8 4f            	clr	a
4686  b2e9 6b04          	ld	(OFST+0,sp),a
4688  b2eb               L3271:
4689                     ; 3170               if (alpha[i] == '-') {
4691  b2eb 5f            	clrw	x
4692  b2ec 97            	ld	xl,a
4693  b2ed d6001b        	ld	a,(_alpha,x)
4694  b2f0 a12d          	cp	a,#45
4695  b2f2 2636          	jrne	L1371
4696                     ; 3171 	        alpha[i] = (uint8_t)(*pBuffer);
4698  b2f4 7b04          	ld	a,(OFST+0,sp)
4699  b2f6 5f            	clrw	x
4700  b2f7 1605          	ldw	y,(OFST+1,sp)
4701  b2f9 97            	ld	xl,a
4702  b2fa 90f6          	ld	a,(y)
4703  b2fc d7001b        	ld	(_alpha,x),a
4704                     ; 3172                 saved_postpartial[i+4] = *pBuffer;
4706  b2ff 5f            	clrw	x
4707  b300 7b04          	ld	a,(OFST+0,sp)
4708  b302 97            	ld	xl,a
4709  b303 90f6          	ld	a,(y)
4710  b305 d70045        	ld	(_saved_postpartial+4,x),a
4711                     ; 3173                 pSocket->nParseLeft--;
4713  b308 1e0b          	ldw	x,(OFST+7,sp)
4714  b30a 6a06          	dec	(6,x)
4715                     ; 3174                 saved_nparseleft = pSocket->nParseLeft;
4717  b30c e606          	ld	a,(6,x)
4718  b30e c70059        	ld	_saved_nparseleft,a
4719                     ; 3175                 pBuffer++;
4721  b311 93            	ldw	x,y
4722  b312 5c            	incw	x
4723  b313 1f05          	ldw	(OFST+1,sp),x
4724                     ; 3176 	        nBytes--;
4726  b315 1e09          	ldw	x,(OFST+5,sp)
4727  b317 5a            	decw	x
4728  b318 1f09          	ldw	(OFST+5,sp),x
4729                     ; 3177                 if (i != 5 && nBytes == 0) {
4731  b31a 7b04          	ld	a,(OFST+0,sp)
4732  b31c a105          	cp	a,#5
4733  b31e 270a          	jreq	L1371
4735  b320 1e09          	ldw	x,(OFST+5,sp)
4736  b322 2606          	jrne	L1371
4737                     ; 3178 		  break_while = 1; // Hit end of fragment. Break out of
4739  b324 35010021      	mov	_break_while,#1
4740                     ; 3180 		  break; // Break out of for() loop
4742  b328 2008          	jra	L7271
4743  b32a               L1371:
4744                     ; 3164             for (i=0; i<6; i++) {
4746  b32a 0c04          	inc	(OFST+0,sp)
4750  b32c 7b04          	ld	a,(OFST+0,sp)
4751  b32e a106          	cp	a,#6
4752  b330 25b9          	jrult	L3271
4753  b332               L7271:
4754                     ; 3184 	    if (break_while == 1) {
4756  b332 c60021        	ld	a,_break_while
4757  b335 4a            	dec	a
4758  b336 2603ccb405    	jreq	L1051
4759                     ; 3186 	      break;
4761                     ; 3192             clear_saved_postpartial_all();
4763  b33b cdb7de        	call	_clear_saved_postpartial_all
4765                     ; 3195 	    if (alpha[0] != '0' && alpha[0] != '1') alpha[0] = '0';
4767  b33e c6001b        	ld	a,_alpha
4768  b341 a130          	cp	a,#48
4769  b343 2708          	jreq	L7371
4771  b345 a131          	cp	a,#49
4772  b347 2704          	jreq	L7371
4775  b349 3530001b      	mov	_alpha,#48
4776  b34d               L7371:
4777                     ; 3196 	    if (alpha[1] != '0' && alpha[1] != '1') alpha[1] = '0';
4779  b34d c6001c        	ld	a,_alpha+1
4780  b350 a130          	cp	a,#48
4781  b352 2708          	jreq	L1471
4783  b354 a131          	cp	a,#49
4784  b356 2704          	jreq	L1471
4787  b358 3530001c      	mov	_alpha+1,#48
4788  b35c               L1471:
4789                     ; 3197 	    if (alpha[2] != '0' && alpha[2] != '1' && alpha[2] != '2') alpha[2] = '2';
4791  b35c c6001d        	ld	a,_alpha+2
4792  b35f a130          	cp	a,#48
4793  b361 270c          	jreq	L3471
4795  b363 a131          	cp	a,#49
4796  b365 2708          	jreq	L3471
4798  b367 a132          	cp	a,#50
4799  b369 2704          	jreq	L3471
4802  b36b 3532001d      	mov	_alpha+2,#50
4803  b36f               L3471:
4804                     ; 3198 	    if (alpha[3] != '0' && alpha[3] != '1') alpha[3] = '0';
4806  b36f c6001e        	ld	a,_alpha+3
4807  b372 a130          	cp	a,#48
4808  b374 2708          	jreq	L5471
4810  b376 a131          	cp	a,#49
4811  b378 2704          	jreq	L5471
4814  b37a 3530001e      	mov	_alpha+3,#48
4815  b37e               L5471:
4816                     ; 3200 	    Pending_config_settings[0] = (uint8_t)alpha[0];
4818  b37e 55001b011f    	mov	_Pending_config_settings,_alpha
4819                     ; 3201             Pending_config_settings[1] = (uint8_t)alpha[1];
4821  b383 55001c0120    	mov	_Pending_config_settings+1,_alpha+1
4822                     ; 3202             Pending_config_settings[2] = (uint8_t)alpha[2];
4824  b388 55001d0121    	mov	_Pending_config_settings+2,_alpha+2
4825                     ; 3203             Pending_config_settings[3] = (uint8_t)alpha[3];
4827  b38d 55001e0122    	mov	_Pending_config_settings+3,_alpha+3
4828                     ; 3204             Pending_config_settings[4] = '0';
4830  b392 35300123      	mov	_Pending_config_settings+4,#48
4831                     ; 3205             Pending_config_settings[5] = '0';
4833  b396 35300124      	mov	_Pending_config_settings+5,#48
4834                     ; 3207             if (nBytes == 0) {
4836  b39a 1e09          	ldw	x,(OFST+5,sp)
4837  b39c 2618          	jrne	L3161
4838                     ; 3210 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4840  b39e a605          	ld	a,#5
4841  b3a0 c7005a        	ld	_saved_parsestate,a
4842  b3a3 1e0b          	ldw	x,(OFST+7,sp)
4843  b3a5 e70a          	ld	(10,x),a
4844                     ; 3211 	      break;
4846  b3a7 205c          	jra	L1051
4847  b3a9               L7761:
4848                     ; 3218 	  else if (pSocket->ParseCmd == 'z') {
4850  b3a9 a17a          	cp	a,#122
4851  b3ab 2609          	jrne	L3161
4852                     ; 3243 	    nBytes = 0;
4854  b3ad 5f            	clrw	x
4855  b3ae 1f09          	ldw	(OFST+5,sp),x
4856                     ; 3244 	    pSocket->nParseLeft = 0;
4858  b3b0 1e0b          	ldw	x,(OFST+7,sp)
4859  b3b2 6f06          	clr	(6,x)
4860                     ; 3245             break; // Break out of the while loop. We're done with POST.
4862  b3b4 204f          	jra	L1051
4863  b3b6               L3161:
4864                     ; 3256           pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4866  b3b6 a605          	ld	a,#5
4867  b3b8 c7005a        	ld	_saved_parsestate,a
4868  b3bb 1e0b          	ldw	x,(OFST+7,sp)
4869  b3bd e70a          	ld	(10,x),a
4870                     ; 3258           if (pSocket->nParseLeft < 30) {
4872  b3bf e606          	ld	a,(6,x)
4873  b3c1 a11e          	cp	a,#30
4874  b3c3 2503ccaf84    	jruge	L7741
4875                     ; 3273 	    if (pSocket->nParseLeftAddl > 0) {
4877  b3c8 6d07          	tnz	(7,x)
4878  b3ca 27f9          	jreq	L7741
4879                     ; 3274 	      pSocket->nParseLeft += pSocket->nParseLeftAddl;
4881  b3cc eb07          	add	a,(7,x)
4882  b3ce e706          	ld	(6,x),a
4883                     ; 3275 	      pSocket->nParseLeftAddl = 0;
4885  b3d0 6f07          	clr	(7,x)
4886                     ; 3276 	      saved_nparseleft = pSocket->nParseLeft;
4888  b3d2 c70059        	ld	_saved_nparseleft,a
4889  b3d5 ccaf84        	jra	L7741
4890  b3d8               L7751:
4891                     ; 3281         else if (pSocket->ParseState == PARSE_DELIM) {
4893  b3d8 a105          	cp	a,#5
4894  b3da 26f9          	jrne	L7741
4895                     ; 3282           if (pSocket->nParseLeft > 0) {
4897  b3dc e606          	ld	a,(6,x)
4898  b3de 2720          	jreq	L5671
4899                     ; 3285             pSocket->ParseState = saved_parsestate = PARSE_CMD;
4901  b3e0 725f005a      	clr	_saved_parsestate
4902  b3e4 6f0a          	clr	(10,x)
4903                     ; 3286             pSocket->nParseLeft--;
4905  b3e6 6a06          	dec	(6,x)
4906                     ; 3287             saved_nparseleft = pSocket->nParseLeft;
4908  b3e8 e606          	ld	a,(6,x)
4909  b3ea c70059        	ld	_saved_nparseleft,a
4910                     ; 3288             pBuffer++;
4912  b3ed 1e05          	ldw	x,(OFST+1,sp)
4913  b3ef 5c            	incw	x
4914  b3f0 1f05          	ldw	(OFST+1,sp),x
4915                     ; 3289 	    nBytes--;
4917  b3f2 1e09          	ldw	x,(OFST+5,sp)
4918  b3f4 5a            	decw	x
4919  b3f5 1f09          	ldw	(OFST+5,sp),x
4920                     ; 3291 	    clear_saved_postpartial_all();
4922  b3f7 cdb7de        	call	_clear_saved_postpartial_all
4924                     ; 3295             if (nBytes == 0) {
4926  b3fa 1e09          	ldw	x,(OFST+5,sp)
4927  b3fc 26d7          	jrne	L7741
4928                     ; 3296 	      break; // Hit end of fragment but still have more to parse in
4930  b3fe 2005          	jra	L1051
4931  b400               L5671:
4932                     ; 3306             pSocket->nParseLeft = 0; // End the parsing
4934  b400 e706          	ld	(6,x),a
4935                     ; 3307 	    nBytes = 0;
4937  b402 5f            	clrw	x
4938  b403 1f09          	ldw	(OFST+5,sp),x
4939                     ; 3308 	    break; // Exit parsing
4940  b405               L1051:
4941                     ; 3335       if (pSocket->nParseLeft == 0) {
4943  b405 1e0b          	ldw	x,(OFST+7,sp)
4944  b407 e606          	ld	a,(6,x)
4945  b409 264e          	jrne	L3771
4946                     ; 3338 	saved_nstate = STATE_NULL;
4948  b40b 357f005b      	mov	_saved_nstate,#127
4949                     ; 3339 	saved_parsestate = PARSE_CMD;
4951  b40f c7005a        	ld	_saved_parsestate,a
4952                     ; 3340         saved_nparseleft = 0;
4954  b412 c70059        	ld	_saved_nparseleft,a
4955                     ; 3341         saved_newlines = 0;
4957  b415 c70028        	ld	_saved_newlines,a
4958                     ; 3342 	for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i] = '\0';
4960  b418 6b04          	ld	(OFST+0,sp),a
4962  b41a               L5771:
4965  b41a 5f            	clrw	x
4966  b41b 97            	ld	xl,a
4967  b41c 724f0041      	clr	(_saved_postpartial,x)
4968  b420 5f            	clrw	x
4969  b421 97            	ld	xl,a
4970  b422 724f0029      	clr	(_saved_postpartial_previous,x)
4973  b426 0c04          	inc	(OFST+0,sp)
4977  b428 7b04          	ld	a,(OFST+0,sp)
4978  b42a a118          	cp	a,#24
4979  b42c 25ec          	jrult	L5771
4980                     ; 3348 	parse_complete = 1;
4982  b42e 35010106      	mov	_parse_complete,#1
4983                     ; 3349 	pSocket->nState = STATE_SENDHEADER;
4985  b432 1e0b          	ldw	x,(OFST+7,sp)
4986  b434 a60b          	ld	a,#11
4987  b436 f7            	ld	(x),a
4988                     ; 3361         if (current_webpage == WEBPAGE_IOCONTROL) {
4990  b437 c6001a        	ld	a,_current_webpage
4991  b43a 260c          	jrne	L3002
4992                     ; 3362           pSocket->pData = g_HtmlPageIOControl;
4994  b43c 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4995  b440 ef01          	ldw	(1,x),y
4996                     ; 3363           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4998  b442 90ae0c06      	ldw	y,#3078
4999  b446 ef03          	ldw	(3,x),y
5000  b448               L3002:
5001                     ; 3365         if (current_webpage == WEBPAGE_CONFIGURATION) {
5003  b448 4a            	dec	a
5004  b449 2612          	jrne	L5741
5005                     ; 3366           pSocket->pData = g_HtmlPageConfiguration;
5007  b44b 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5008  b44f ef01          	ldw	(1,x),y
5009                     ; 3367           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5011  b451 90ae0c5c      	ldw	y,#3164
5012  b455 ef03          	ldw	(3,x),y
5013  b457 2004          	jra	L5741
5014  b459               L3771:
5015                     ; 3387 	uip_len = 0;
5017  b459 5f            	clrw	x
5018  b45a cf036f        	ldw	_uip_len,x
5019  b45d               L5741:
5020                     ; 3391     if (pSocket->nState == STATE_PARSEGET) {
5022  b45d 1e0b          	ldw	x,(OFST+7,sp)
5023  b45f f6            	ld	a,(x)
5024  b460 a10d          	cp	a,#13
5025  b462 2703ccb6f2    	jrne	L1102
5027  b467 ccb6eb        	jra	L5102
5028  b46a               L3102:
5029                     ; 3420         if (pSocket->ParseState == PARSE_SLASH1) {
5031  b46a 1e0b          	ldw	x,(OFST+7,sp)
5032  b46c e60a          	ld	a,(10,x)
5033  b46e a106          	cp	a,#6
5034  b470 263c          	jrne	L1202
5035                     ; 3423           pSocket->ParseCmd = *pBuffer;
5037  b472 1e05          	ldw	x,(OFST+1,sp)
5038  b474 f6            	ld	a,(x)
5039  b475 1e0b          	ldw	x,(OFST+7,sp)
5040  b477 e708          	ld	(8,x),a
5041                     ; 3424           pSocket->nParseLeft--;
5043  b479 6a06          	dec	(6,x)
5044                     ; 3425           pBuffer++;
5046  b47b 1e05          	ldw	x,(OFST+1,sp)
5047  b47d 5c            	incw	x
5048  b47e 1f05          	ldw	(OFST+1,sp),x
5049                     ; 3426 	  nBytes--;
5051  b480 1e09          	ldw	x,(OFST+5,sp)
5052  b482 5a            	decw	x
5053  b483 1f09          	ldw	(OFST+5,sp),x
5054                     ; 3427 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5056  b485 1e0b          	ldw	x,(OFST+7,sp)
5057  b487 e608          	ld	a,(8,x)
5058  b489 a12f          	cp	a,#47
5059  b48b 2605          	jrne	L3202
5060                     ; 3428 	    pSocket->ParseState = PARSE_NUM10;
5062  b48d a601          	ld	a,#1
5064  b48f ccb528        	jp	LC022
5065  b492               L3202:
5066                     ; 3432 	    current_webpage = WEBPAGE_IOCONTROL;
5068  b492 725f001a      	clr	_current_webpage
5069                     ; 3433             pSocket->pData = g_HtmlPageIOControl;
5071  b496 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5072  b49a ef01          	ldw	(1,x),y
5073                     ; 3434             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5075  b49c 90ae0c06      	ldw	y,#3078
5076  b4a0 ef03          	ldw	(3,x),y
5077                     ; 3435             pSocket->nParseLeft = 0; // This will cause the while() to exit
5079  b4a2 6f06          	clr	(6,x)
5080                     ; 3437             pSocket->nState = STATE_CONNECTED;
5082  b4a4 7f            	clr	(x)
5083                     ; 3438             pSocket->nPrevBytes = 0xFFFF;
5085  b4a5 90aeffff      	ldw	y,#65535
5086  b4a9 ef0b          	ldw	(11,x),y
5087  b4ab ccb6da        	jra	L7202
5088  b4ae               L1202:
5089                     ; 3442         else if (pSocket->ParseState == PARSE_NUM10) {
5091  b4ae a101          	cp	a,#1
5092  b4b0 2640          	jrne	L1302
5093                     ; 3447 	  if (*pBuffer == ' ') {
5095  b4b2 1e05          	ldw	x,(OFST+1,sp)
5096  b4b4 f6            	ld	a,(x)
5097  b4b5 a120          	cp	a,#32
5098  b4b7 261e          	jrne	L3302
5099                     ; 3448 	    current_webpage = WEBPAGE_IOCONTROL;
5101  b4b9 725f001a      	clr	_current_webpage
5102                     ; 3449             pSocket->pData = g_HtmlPageIOControl;
5104  b4bd 1e0b          	ldw	x,(OFST+7,sp)
5105  b4bf 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5106  b4c3 ef01          	ldw	(1,x),y
5107                     ; 3450             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5109  b4c5 90ae0c06      	ldw	y,#3078
5110  b4c9 ef03          	ldw	(3,x),y
5111                     ; 3451             pSocket->nParseLeft = 0;
5113  b4cb 6f06          	clr	(6,x)
5114                     ; 3453             pSocket->nState = STATE_CONNECTED;
5116  b4cd 7f            	clr	(x)
5117                     ; 3454             pSocket->nPrevBytes = 0xFFFF;
5119  b4ce 90aeffff      	ldw	y,#65535
5120  b4d2 ef0b          	ldw	(11,x),y
5122  b4d4 ccb6da        	jra	L7202
5123  b4d7               L3302:
5124                     ; 3458 	  else if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5126  b4d7 a130          	cp	a,#48
5127  b4d9 2547          	jrult	L7402
5129  b4db a13a          	cp	a,#58
5130  b4dd 2443          	jruge	L7402
5131                     ; 3460             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5133  b4df 97            	ld	xl,a
5134  b4e0 a60a          	ld	a,#10
5135  b4e2 42            	mul	x,a
5136  b4e3 9f            	ld	a,xl
5137  b4e4 1e0b          	ldw	x,(OFST+7,sp)
5138  b4e6 a0e0          	sub	a,#224
5139  b4e8 e709          	ld	(9,x),a
5140                     ; 3461 	    pSocket->ParseState = PARSE_NUM1;
5142  b4ea a602          	ld	a,#2
5143  b4ec e70a          	ld	(10,x),a
5144                     ; 3462             pSocket->nParseLeft--;
5146  b4ee 6a06          	dec	(6,x)
5147                     ; 3463             pBuffer++;
5148                     ; 3464 	    nBytes--;
5150  b4f0 2023          	jp	LC024
5151                     ; 3469             pSocket->nParseLeft = 0;
5152                     ; 3470             pSocket->ParseState = PARSE_FAIL;
5153  b4f2               L1302:
5154                     ; 3475         else if (pSocket->ParseState == PARSE_NUM1) {
5156  b4f2 a102          	cp	a,#2
5157  b4f4 2637          	jrne	L5402
5158                     ; 3476 	  if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5160  b4f6 1e05          	ldw	x,(OFST+1,sp)
5161  b4f8 f6            	ld	a,(x)
5162  b4f9 a130          	cp	a,#48
5163  b4fb 2525          	jrult	L7402
5165  b4fd a13a          	cp	a,#58
5166  b4ff 2421          	jruge	L7402
5167                     ; 3478             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5169  b501 1605          	ldw	y,(OFST+1,sp)
5170  b503 1e0b          	ldw	x,(OFST+7,sp)
5171  b505 90f6          	ld	a,(y)
5172  b507 a030          	sub	a,#48
5173  b509 eb09          	add	a,(9,x)
5174  b50b e709          	ld	(9,x),a
5175                     ; 3479             pSocket->ParseState = PARSE_VAL;
5177  b50d a604          	ld	a,#4
5178  b50f e70a          	ld	(10,x),a
5179                     ; 3480             pSocket->nParseLeft = 1; // Set to 1 so PARSE_VAL will be called
5181  b511 a601          	ld	a,#1
5182  b513 e706          	ld	(6,x),a
5183                     ; 3481             pBuffer++;
5185                     ; 3482 	    nBytes--;
5187  b515               LC024:
5189  b515 1e05          	ldw	x,(OFST+1,sp)
5190  b517 5c            	incw	x
5191  b518 1f05          	ldw	(OFST+1,sp),x
5193  b51a 1e09          	ldw	x,(OFST+5,sp)
5194  b51c 5a            	decw	x
5195  b51d 1f09          	ldw	(OFST+5,sp),x
5197  b51f ccb6da        	jra	L7202
5198  b522               L7402:
5199                     ; 3487             pSocket->nParseLeft = 0;
5201                     ; 3488             pSocket->ParseState = PARSE_FAIL;
5204  b522 1e0b          	ldw	x,(OFST+7,sp)
5206  b524 a607          	ld	a,#7
5207  b526 6f06          	clr	(6,x)
5208  b528               LC022:
5209  b528 e70a          	ld	(10,x),a
5210  b52a ccb6da        	jra	L7202
5211  b52d               L5402:
5212                     ; 3492         else if (pSocket->ParseState == PARSE_VAL) {
5214  b52d a104          	cp	a,#4
5215  b52f 26f9          	jrne	L7202
5216                     ; 3559           switch(pSocket->ParseNum)
5218  b531 e609          	ld	a,(9,x)
5220                     ; 3746 	      break;
5221  b533 a110          	cp	a,#16
5222  b535 2407          	jruge	L422
5223  b537 5f            	clrw	x
5224  b538 97            	ld	xl,a
5225  b539 58            	sllw	x
5226  b53a de9d89        	ldw	x,(L622,x)
5227  b53d fc            	jp	(x)
5228  b53e               L422:
5229  b53e a037          	sub	a,#55
5230  b540 2603ccb632    	jreq	L7311
5231  b545 4a            	dec	a
5232  b546 2603ccb63d    	jreq	L1411
5233  b54b a004          	sub	a,#4
5234  b54d 2603ccb647    	jreq	L3411
5235  b552 4a            	dec	a
5236  b553 2603ccb656    	jreq	L5411
5237  b558 a004          	sub	a,#4
5238  b55a 2603ccb666    	jreq	L7411
5239  b55f 4a            	dec	a
5240  b560 2603ccb671    	jreq	L1511
5241  b565 4a            	dec	a
5242  b566 2603ccb684    	jreq	L3511
5243  b56b a018          	sub	a,#24
5244  b56d 2603ccb699    	jreq	L5511
5245  b572 a007          	sub	a,#7
5246  b574 2603ccb69f    	jreq	L7511
5247  b579 4a            	dec	a
5248  b57a 2603ccb6af    	jreq	L1611
5249  b57f ccb6bf        	jra	L3611
5250  b582               L7701:
5251                     ; 3609 	    case 0:  IO_8to1 &= (uint8_t)(~0x01);  parse_complete = 1; break; // Relay-01 OFF
5253  b582 7211016d      	bres	_IO_8to1,#0
5256  b586 35010106      	mov	_parse_complete,#1
5259  b58a ccb6d6        	jra	L1602
5260  b58d               L1011:
5261                     ; 3610 	    case 1:  IO_8to1 |= (uint8_t)0x01;     parse_complete = 1; break; // Relay-01 ON
5263  b58d 7210016d      	bset	_IO_8to1,#0
5266  b591 35010106      	mov	_parse_complete,#1
5269  b595 ccb6d6        	jra	L1602
5270  b598               L3011:
5271                     ; 3611 	    case 2:  IO_8to1 &= (uint8_t)(~0x02);  parse_complete = 1; break; // Relay-02 OFF
5273  b598 7213016d      	bres	_IO_8to1,#1
5276  b59c 35010106      	mov	_parse_complete,#1
5279  b5a0 ccb6d6        	jra	L1602
5280  b5a3               L5011:
5281                     ; 3612 	    case 3:  IO_8to1 |= (uint8_t)0x02;     parse_complete = 1; break; // Relay-02 ON
5283  b5a3 7212016d      	bset	_IO_8to1,#1
5286  b5a7 35010106      	mov	_parse_complete,#1
5289  b5ab ccb6d6        	jra	L1602
5290  b5ae               L7011:
5291                     ; 3613 	    case 4:  IO_8to1 &= (uint8_t)(~0x04);  parse_complete = 1; break; // Relay-03 OFF
5293  b5ae 7215016d      	bres	_IO_8to1,#2
5296  b5b2 35010106      	mov	_parse_complete,#1
5299  b5b6 ccb6d6        	jra	L1602
5300  b5b9               L1111:
5301                     ; 3614 	    case 5:  IO_8to1 |= (uint8_t)0x04;     parse_complete = 1; break; // Relay-03 ON
5303  b5b9 7214016d      	bset	_IO_8to1,#2
5306  b5bd 35010106      	mov	_parse_complete,#1
5309  b5c1 ccb6d6        	jra	L1602
5310  b5c4               L3111:
5311                     ; 3615 	    case 6:  IO_8to1 &= (uint8_t)(~0x08);  parse_complete = 1; break; // Relay-04 OFF
5313  b5c4 7217016d      	bres	_IO_8to1,#3
5316  b5c8 35010106      	mov	_parse_complete,#1
5319  b5cc ccb6d6        	jra	L1602
5320  b5cf               L5111:
5321                     ; 3616 	    case 7:  IO_8to1 |= (uint8_t)0x08;     parse_complete = 1; break; // Relay-04 ON
5323  b5cf 7216016d      	bset	_IO_8to1,#3
5326  b5d3 35010106      	mov	_parse_complete,#1
5329  b5d7 ccb6d6        	jra	L1602
5330  b5da               L7111:
5331                     ; 3617 	    case 8:  IO_8to1 &= (uint8_t)(~0x10);  parse_complete = 1; break; // Relay-05 OFF
5333  b5da 7219016d      	bres	_IO_8to1,#4
5336  b5de 35010106      	mov	_parse_complete,#1
5339  b5e2 ccb6d6        	jra	L1602
5340  b5e5               L1211:
5341                     ; 3618 	    case 9:  IO_8to1 |= (uint8_t)0x10;     parse_complete = 1; break; // Relay-05 ON
5343  b5e5 7218016d      	bset	_IO_8to1,#4
5346  b5e9 35010106      	mov	_parse_complete,#1
5349  b5ed ccb6d6        	jra	L1602
5350  b5f0               L3211:
5351                     ; 3619 	    case 10: IO_8to1 &= (uint8_t)(~0x20);  parse_complete = 1; break; // Relay-06 OFF
5353  b5f0 721b016d      	bres	_IO_8to1,#5
5356  b5f4 35010106      	mov	_parse_complete,#1
5359  b5f8 ccb6d6        	jra	L1602
5360  b5fb               L5211:
5361                     ; 3620 	    case 11: IO_8to1 |= (uint8_t)0x20;     parse_complete = 1; break; // Relay-06 ON
5363  b5fb 721a016d      	bset	_IO_8to1,#5
5366  b5ff 35010106      	mov	_parse_complete,#1
5369  b603 ccb6d6        	jra	L1602
5370  b606               L7211:
5371                     ; 3621 	    case 12: IO_8to1 &= (uint8_t)(~0x40);  parse_complete = 1; break; // Relay-07 OFF
5373  b606 721d016d      	bres	_IO_8to1,#6
5376  b60a 35010106      	mov	_parse_complete,#1
5379  b60e ccb6d6        	jra	L1602
5380  b611               L1311:
5381                     ; 3622 	    case 13: IO_8to1 |= (uint8_t)0x40;     parse_complete = 1; break; // Relay-07 ON
5383  b611 721c016d      	bset	_IO_8to1,#6
5386  b615 35010106      	mov	_parse_complete,#1
5389  b619 ccb6d6        	jra	L1602
5390  b61c               L3311:
5391                     ; 3623 	    case 14: IO_8to1 &= (uint8_t)(~0x80);  parse_complete = 1; break; // Relay-08 OFF
5393  b61c 721f016d      	bres	_IO_8to1,#7
5396  b620 35010106      	mov	_parse_complete,#1
5399  b624 ccb6d6        	jra	L1602
5400  b627               L5311:
5401                     ; 3624 	    case 15: IO_8to1 |= (uint8_t)0x80;     parse_complete = 1; break; // Relay-08 ON
5403  b627 721e016d      	bset	_IO_8to1,#7
5406  b62b 35010106      	mov	_parse_complete,#1
5409  b62f ccb6d6        	jra	L1602
5410  b632               L7311:
5411                     ; 3626 	    case 55:
5411                     ; 3627   	      IO_8to1 = (uint8_t)0xff; // Relays 1-8 ON
5413  b632 35ff016d      	mov	_IO_8to1,#255
5414                     ; 3628 	      parse_complete = 1; 
5416  b636 35010106      	mov	_parse_complete,#1
5417                     ; 3629 	      break;
5419  b63a ccb6d6        	jra	L1602
5420  b63d               L1411:
5421                     ; 3631 	    case 56:
5421                     ; 3632               IO_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
5423  b63d c7016d        	ld	_IO_8to1,a
5424                     ; 3633 	      parse_complete = 1; 
5426  b640 35010106      	mov	_parse_complete,#1
5427                     ; 3634 	      break;
5429  b644 ccb6d6        	jra	L1602
5430  b647               L3411:
5431                     ; 3641 	    case 60: // Show IO Control page
5431                     ; 3642 	      current_webpage = WEBPAGE_IOCONTROL;
5433  b647 c7001a        	ld	_current_webpage,a
5434                     ; 3643               pSocket->pData = g_HtmlPageIOControl;
5436  b64a 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5437  b64e ef01          	ldw	(1,x),y
5438                     ; 3644               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5440  b650 90ae0c06      	ldw	y,#3078
5441                     ; 3645               pSocket->nState = STATE_CONNECTED;
5442                     ; 3646               pSocket->nPrevBytes = 0xFFFF;
5443                     ; 3647 	      break;
5445  b654 2029          	jp	LC021
5446  b656               L5411:
5447                     ; 3649 	    case 61: // Show Configuration page
5447                     ; 3650 	      current_webpage = WEBPAGE_CONFIGURATION;
5449  b656 3501001a      	mov	_current_webpage,#1
5450                     ; 3651               pSocket->pData = g_HtmlPageConfiguration;
5452  b65a 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5453  b65e ef01          	ldw	(1,x),y
5454                     ; 3652               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5456  b660 90ae0c5c      	ldw	y,#3164
5457                     ; 3653               pSocket->nState = STATE_CONNECTED;
5458                     ; 3654               pSocket->nPrevBytes = 0xFFFF;
5459                     ; 3655 	      break;
5461  b664 2019          	jp	LC021
5462  b666               L7411:
5463                     ; 3675 	    case 65: // Flash LED for diagnostics
5463                     ; 3676 	      // XXXXXXXXXXXXXXXXXXXXXX
5463                     ; 3677 	      // XXXXXXXXXXXXXXXXXXXXXX
5463                     ; 3678 	      // XXXXXXXXXXXXXXXXXXXXXX
5463                     ; 3679 	      debugflash();
5465  b666 cdcf87        	call	_debugflash
5467                     ; 3680 	      debugflash();
5469  b669 cdcf87        	call	_debugflash
5471                     ; 3681 	      debugflash();
5473  b66c cdcf87        	call	_debugflash
5475                     ; 3685 	      break;
5477  b66f 2065          	jra	L1602
5478  b671               L1511:
5479                     ; 3688             case 66: // Show statistics page
5479                     ; 3689 	      current_webpage = WEBPAGE_STATS;
5481  b671 3505001a      	mov	_current_webpage,#5
5482                     ; 3690               pSocket->pData = g_HtmlPageStats;
5484  b675 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5485  b679 ef01          	ldw	(1,x),y
5486                     ; 3691               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5488  b67b 90ae0175      	ldw	y,#373
5489                     ; 3692               pSocket->nState = STATE_CONNECTED;
5491  b67f               LC021:
5492  b67f ef03          	ldw	(3,x),y
5497  b681 f7            	ld	(x),a
5498                     ; 3693               pSocket->nPrevBytes = 0xFFFF;
5499                     ; 3694 	      break;
5501  b682 204c          	jp	LC019
5502  b684               L3511:
5503                     ; 3696             case 67: // Clear statistics
5503                     ; 3697 	      uip_init_stats();
5505  b684 cde88b        	call	_uip_init_stats
5507                     ; 3712 	      current_webpage = WEBPAGE_STATS;
5509  b687 3505001a      	mov	_current_webpage,#5
5510                     ; 3713               pSocket->pData = g_HtmlPageStats;
5512  b68b 1e0b          	ldw	x,(OFST+7,sp)
5513  b68d 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5514  b691 ef01          	ldw	(1,x),y
5515                     ; 3714               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5517  b693 90ae0175      	ldw	y,#373
5518                     ; 3715               pSocket->nState = STATE_CONNECTED;
5519                     ; 3716               pSocket->nPrevBytes = 0xFFFF;
5520                     ; 3717 	      break;
5522  b697 2034          	jp	LC020
5523  b699               L5511:
5524                     ; 3720 	    case 91: // Reboot
5524                     ; 3721 	      user_reboot_request = 1;
5526  b699 3501010a      	mov	_user_reboot_request,#1
5527                     ; 3722 	      break;
5529  b69d 2037          	jra	L1602
5530  b69f               L7511:
5531                     ; 3724             case 98: // Show Very Short Form IO state page
5531                     ; 3725 	      current_webpage = WEBPAGE_SSTATE;
5533  b69f 3507001a      	mov	_current_webpage,#7
5534                     ; 3726               pSocket->pData = g_HtmlPageSstate;
5536  b6a3 90ae9ae9      	ldw	y,#L32_g_HtmlPageSstate
5537  b6a7 ef01          	ldw	(1,x),y
5538                     ; 3727               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageSstate) - 1);
5540  b6a9 90ae0004      	ldw	y,#4
5541                     ; 3728               pSocket->nState = STATE_CONNECTED;
5542                     ; 3729               pSocket->nPrevBytes = 0xFFFF;
5543                     ; 3730 	      break;
5545  b6ad 20d0          	jp	LC021
5546  b6af               L1611:
5547                     ; 3732             case 99: // Show Short Form IO state page
5547                     ; 3733 	      current_webpage = WEBPAGE_RSTATE;
5549  b6af 3506001a      	mov	_current_webpage,#6
5550                     ; 3734               pSocket->pData = g_HtmlPageRstate;
5552  b6b3 90ae9a62      	ldw	y,#L12_g_HtmlPageRstate
5553  b6b7 ef01          	ldw	(1,x),y
5554                     ; 3735               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
5556  b6b9 90ae0086      	ldw	y,#134
5557                     ; 3736               pSocket->nState = STATE_CONNECTED;
5558                     ; 3737               pSocket->nPrevBytes = 0xFFFF;
5559                     ; 3738 	      break;
5561  b6bd 20c0          	jp	LC021
5562  b6bf               L3611:
5563                     ; 3740 	    default: // Show IO Control page
5563                     ; 3741 	      current_webpage = WEBPAGE_IOCONTROL;
5565  b6bf 725f001a      	clr	_current_webpage
5566                     ; 3742               pSocket->pData = g_HtmlPageIOControl;
5568  b6c3 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5569  b6c7 ef01          	ldw	(1,x),y
5570                     ; 3743               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5572  b6c9 90ae0c06      	ldw	y,#3078
5573                     ; 3744               pSocket->nState = STATE_CONNECTED;
5575  b6cd               LC020:
5576  b6cd ef03          	ldw	(3,x),y
5578  b6cf 7f            	clr	(x)
5579                     ; 3745               pSocket->nPrevBytes = 0xFFFF;
5581  b6d0               LC019:
5588  b6d0 90aeffff      	ldw	y,#65535
5589  b6d4 ef0b          	ldw	(11,x),y
5590                     ; 3746 	      break;
5592  b6d6               L1602:
5593                     ; 3748           pSocket->nParseLeft = 0;
5595  b6d6 1e0b          	ldw	x,(OFST+7,sp)
5596  b6d8 6f06          	clr	(6,x)
5597  b6da               L7202:
5598                     ; 3751         if (pSocket->ParseState == PARSE_FAIL) {
5600  b6da 1e0b          	ldw	x,(OFST+7,sp)
5601  b6dc e60a          	ld	a,(10,x)
5602  b6de a107          	cp	a,#7
5603                     ; 3756           pSocket->nState = STATE_SENDHEADER;
5604                     ; 3757 	  break;
5606  b6e0 2704          	jreq	LC025
5607                     ; 3760         if (pSocket->nParseLeft == 0) {
5609  b6e2 e606          	ld	a,(6,x)
5610  b6e4 2605          	jrne	L5102
5611                     ; 3763           pSocket->nState = STATE_SENDHEADER;
5613  b6e6               LC025:
5615  b6e6 a60b          	ld	a,#11
5616  b6e8 f7            	ld	(x),a
5617                     ; 3764           break;
5619  b6e9 2007          	jra	L1102
5620  b6eb               L5102:
5621                     ; 3419       while (nBytes != 0) {
5623  b6eb 1e09          	ldw	x,(OFST+5,sp)
5624  b6ed 2703ccb46a    	jrne	L3102
5625  b6f2               L1102:
5626                     ; 3769     if (pSocket->nState == STATE_SENDHEADER) {
5628  b6f2 1e0b          	ldw	x,(OFST+7,sp)
5629  b6f4 f6            	ld	a,(x)
5630  b6f5 a10b          	cp	a,#11
5631  b6f7 261c          	jrne	L5611
5632                     ; 3775       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5634  b6f9 cda475        	call	_adjust_template_size
5636  b6fc 89            	pushw	x
5637  b6fd ce0371        	ldw	x,_uip_appdata
5638  b700 cda5dd        	call	L5_CopyHttpHeader
5640  b703 5b02          	addw	sp,#2
5641  b705 89            	pushw	x
5642  b706 ce0371        	ldw	x,_uip_appdata
5643  b709 cdf202        	call	_uip_send
5645  b70c 85            	popw	x
5646                     ; 3776       pSocket->nState = STATE_SENDDATA;
5648  b70d 1e0b          	ldw	x,(OFST+7,sp)
5649  b70f a60c          	ld	a,#12
5650  b711 f7            	ld	(x),a
5651                     ; 3777       return;
5653  b712 ccadff        	jra	L452
5654  b715               L5611:
5655                     ; 3780     senddata:
5655                     ; 3781     if (pSocket->nState == STATE_SENDDATA) {
5657  b715 1e0b          	ldw	x,(OFST+7,sp)
5658  b717 f6            	ld	a,(x)
5659  b718 a10c          	cp	a,#12
5660  b71a 26f6          	jrne	L452
5661                     ; 3788       if (pSocket->nDataLeft == 0) {
5663  b71c e604          	ld	a,(4,x)
5664  b71e ea03          	or	a,(3,x)
5665  b720 2605          	jrne	L3702
5666                     ; 3790         nBufSize = 0;
5668  b722 5f            	clrw	x
5669  b723 1f02          	ldw	(OFST-2,sp),x
5672  b725 202f          	jra	L5702
5673  b727               L3702:
5674                     ; 3793         pSocket->nPrevBytes = pSocket->nDataLeft;
5676  b727 9093          	ldw	y,x
5677  b729 90ee03        	ldw	y,(3,y)
5678  b72c ef0b          	ldw	(11,x),y
5679                     ; 3794         nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5681  b72e ce036d        	ldw	x,_uip_conn
5682  b731 ee12          	ldw	x,(18,x)
5683  b733 89            	pushw	x
5684  b734 1e0d          	ldw	x,(OFST+9,sp)
5685  b736 1c0003        	addw	x,#3
5686  b739 89            	pushw	x
5687  b73a 1e0f          	ldw	x,(OFST+11,sp)
5688  b73c 5c            	incw	x
5689  b73d 89            	pushw	x
5690  b73e ce0371        	ldw	x,_uip_appdata
5691  b741 cda6a9        	call	L7_CopyHttpData
5693  b744 5b06          	addw	sp,#6
5694  b746 1f02          	ldw	(OFST-2,sp),x
5696                     ; 3795         pSocket->nPrevBytes -= pSocket->nDataLeft;
5698  b748 1e0b          	ldw	x,(OFST+7,sp)
5699  b74a e60c          	ld	a,(12,x)
5700  b74c e004          	sub	a,(4,x)
5701  b74e e70c          	ld	(12,x),a
5702  b750 e60b          	ld	a,(11,x)
5703  b752 e203          	sbc	a,(3,x)
5704  b754 e70b          	ld	(11,x),a
5705  b756               L5702:
5706                     ; 3798       if (nBufSize == 0) {
5708  b756 1e02          	ldw	x,(OFST-2,sp)
5709  b758 2621          	jrne	LC016
5710                     ; 3800         uip_close();
5712  b75a               LC017:
5714  b75a 351002c4      	mov	_uip_flags,#16
5716  b75e ccadff        	jra	L452
5717                     ; 3804         uip_send(uip_appdata, nBufSize);
5719                     ; 3806       return;
5721  b761               L3031:
5722                     ; 3810   else if (uip_rexmit()) {
5724  b761 720502c475    	btjf	_uip_flags,#2,L1031
5725                     ; 3811     if (pSocket->nPrevBytes == 0xFFFF) {
5727  b766 160b          	ldw	y,(OFST+7,sp)
5728  b768 90ee0b        	ldw	y,(11,y)
5729  b76b 905c          	incw	y
5730  b76d 2617          	jrne	L7012
5731                     ; 3813       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5733  b76f cda475        	call	_adjust_template_size
5735  b772 89            	pushw	x
5736  b773 ce0371        	ldw	x,_uip_appdata
5737  b776 cda5dd        	call	L5_CopyHttpHeader
5739  b779 5b02          	addw	sp,#2
5741  b77b               LC016:
5743  b77b 89            	pushw	x
5744  b77c ce0371        	ldw	x,_uip_appdata
5745  b77f cdf202        	call	_uip_send
5746  b782 85            	popw	x
5748  b783 ccadff        	jra	L452
5749  b786               L7012:
5750                     ; 3816       pSocket->pData -= pSocket->nPrevBytes;
5752  b786 1e0b          	ldw	x,(OFST+7,sp)
5753  b788 e602          	ld	a,(2,x)
5754  b78a e00c          	sub	a,(12,x)
5755  b78c e702          	ld	(2,x),a
5756  b78e e601          	ld	a,(1,x)
5757  b790 e20b          	sbc	a,(11,x)
5758  b792 e701          	ld	(1,x),a
5759                     ; 3817       pSocket->nDataLeft += pSocket->nPrevBytes;
5761  b794 e604          	ld	a,(4,x)
5762  b796 eb0c          	add	a,(12,x)
5763  b798 e704          	ld	(4,x),a
5764  b79a e603          	ld	a,(3,x)
5765  b79c e90b          	adc	a,(11,x)
5766                     ; 3818       pSocket->nPrevBytes = pSocket->nDataLeft;
5768  b79e 9093          	ldw	y,x
5769  b7a0 e703          	ld	(3,x),a
5770  b7a2 90ee03        	ldw	y,(3,y)
5771  b7a5 ef0b          	ldw	(11,x),y
5772                     ; 3819       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5774  b7a7 ce036d        	ldw	x,_uip_conn
5775  b7aa ee12          	ldw	x,(18,x)
5776  b7ac 89            	pushw	x
5777  b7ad 1e0d          	ldw	x,(OFST+9,sp)
5778  b7af 1c0003        	addw	x,#3
5779  b7b2 89            	pushw	x
5780  b7b3 1e0f          	ldw	x,(OFST+11,sp)
5781  b7b5 5c            	incw	x
5782  b7b6 89            	pushw	x
5783  b7b7 ce0371        	ldw	x,_uip_appdata
5784  b7ba cda6a9        	call	L7_CopyHttpData
5786  b7bd 5b06          	addw	sp,#6
5787  b7bf 1f02          	ldw	(OFST-2,sp),x
5789                     ; 3820       pSocket->nPrevBytes -= pSocket->nDataLeft;
5791  b7c1 1e0b          	ldw	x,(OFST+7,sp)
5792  b7c3 e60c          	ld	a,(12,x)
5793  b7c5 e004          	sub	a,(4,x)
5794  b7c7 e70c          	ld	(12,x),a
5795  b7c9 e60b          	ld	a,(11,x)
5796  b7cb e203          	sbc	a,(3,x)
5797  b7cd e70b          	ld	(11,x),a
5798                     ; 3821       if (nBufSize == 0) {
5800  b7cf 1e02          	ldw	x,(OFST-2,sp)
5801                     ; 3823         uip_close();
5803  b7d1 2787          	jreq	LC017
5804                     ; 3827         uip_send(uip_appdata, nBufSize);
5806  b7d3 89            	pushw	x
5807  b7d4 ce0371        	ldw	x,_uip_appdata
5808  b7d7 cdf202        	call	_uip_send
5810  b7da 85            	popw	x
5811                     ; 3830     return;
5813  b7db               L1031:
5814                     ; 3832 }
5816  b7db ccadff        	jra	L452
5850                     ; 3835 void clear_saved_postpartial_all(void)
5850                     ; 3836 {
5851                     .text:	section	.text,new
5852  b7de               _clear_saved_postpartial_all:
5854  b7de 88            	push	a
5855       00000001      OFST:	set	1
5858                     ; 3838   for (i=0; i<24; i++) saved_postpartial[i] = '\0';
5860  b7df 4f            	clr	a
5861  b7e0 6b01          	ld	(OFST+0,sp),a
5863  b7e2               L3312:
5866  b7e2 5f            	clrw	x
5867  b7e3 97            	ld	xl,a
5868  b7e4 724f0041      	clr	(_saved_postpartial,x)
5871  b7e8 0c01          	inc	(OFST+0,sp)
5875  b7ea 7b01          	ld	a,(OFST+0,sp)
5876  b7ec a118          	cp	a,#24
5877  b7ee 25f2          	jrult	L3312
5878                     ; 3839 }
5881  b7f0 84            	pop	a
5882  b7f1 81            	ret	
5916                     ; 3842 void clear_saved_postpartial_data(void)
5916                     ; 3843 {
5917                     .text:	section	.text,new
5918  b7f2               _clear_saved_postpartial_data:
5920  b7f2 88            	push	a
5921       00000001      OFST:	set	1
5924                     ; 3845   for (i=4; i<24; i++) saved_postpartial[i] = '\0';
5926  b7f3 a604          	ld	a,#4
5927  b7f5 6b01          	ld	(OFST+0,sp),a
5929  b7f7               L5512:
5932  b7f7 5f            	clrw	x
5933  b7f8 97            	ld	xl,a
5934  b7f9 724f0041      	clr	(_saved_postpartial,x)
5937  b7fd 0c01          	inc	(OFST+0,sp)
5941  b7ff 7b01          	ld	a,(OFST+0,sp)
5942  b801 a118          	cp	a,#24
5943  b803 25f2          	jrult	L5512
5944                     ; 3846 }
5947  b805 84            	pop	a
5948  b806 81            	ret	
5982                     ; 3849 void clear_saved_postpartial_previous(void)
5982                     ; 3850 {
5983                     .text:	section	.text,new
5984                     _clear_saved_postpartial_previous:
5986                     	push	a
5987       00000001      OFST:	set	1
5990                     ; 3852   for (i=0; i<24; i++) saved_postpartial_previous[i] = '\0';
5992                     	clr	a
5993                     	ld	(OFST+0,sp),a
5995                     L7712:
5998                     	clrw	x
5999                     	ld	xl,a
6000                     	clr	(_saved_postpartial_previous,x)
6003                     	inc	(OFST+0,sp)
6007                     	ld	a,(OFST+0,sp)
6008                     	cp	a,#24
6009                     	jrult	L7712
6010                     ; 3853 }
6013                     	pop	a
6014                     	ret	
6104                     ; 3856 void parse_POST_string(uint8_t curr_ParseCmd, uint8_t num_chars)
6104                     ; 3857 {
6105                     .text:	section	.text,new
6106  b807               _parse_POST_string:
6108  b807 89            	pushw	x
6109  b808 5217          	subw	sp,#23
6110       00000017      OFST:	set	23
6113                     ; 3880   amp_found = 0;
6115  b80a 0f02          	clr	(OFST-21,sp)
6117                     ; 3881   for (i=0; i<20; i++) tmp_Pending[i] = '\0';
6119  b80c 0f17          	clr	(OFST+0,sp)
6121  b80e               L7322:
6124  b80e 96            	ldw	x,sp
6125  b80f 1c0003        	addw	x,#OFST-20
6126  b812 9f            	ld	a,xl
6127  b813 5e            	swapw	x
6128  b814 1b17          	add	a,(OFST+0,sp)
6129  b816 2401          	jrnc	L662
6130  b818 5c            	incw	x
6131  b819               L662:
6132  b819 02            	rlwa	x,a
6133  b81a 7f            	clr	(x)
6136  b81b 0c17          	inc	(OFST+0,sp)
6140  b81d 7b17          	ld	a,(OFST+0,sp)
6141  b81f a114          	cp	a,#20
6142  b821 25eb          	jrult	L7322
6143                     ; 3883   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6145  b823 c60029        	ld	a,_saved_postpartial_previous
6146  b826 1118          	cp	a,(OFST+1,sp)
6147  b828 260a          	jrne	L5422
6148                     ; 3886     saved_postpartial_previous[0] = '\0';
6150  b82a 725f0029      	clr	_saved_postpartial_previous
6151                     ; 3892     frag_flag = 1; // frag_flag is used to manage the TCP Fragment restore
6153  b82e a601          	ld	a,#1
6154  b830 6b17          	ld	(OFST+0,sp),a
6157  b832 2005          	jra	L7422
6158  b834               L5422:
6159                     ; 3896     frag_flag = 0;
6161  b834 0f17          	clr	(OFST+0,sp)
6163                     ; 3900     clear_saved_postpartial_data(); // Clear [4] and higher
6165  b836 cdb7f2        	call	_clear_saved_postpartial_data
6167  b839               L7422:
6168                     ; 3921   resume = 0;
6170  b839 0f01          	clr	(OFST-22,sp)
6172                     ; 3922   if (frag_flag == 1) {
6174  b83b 7b17          	ld	a,(OFST+0,sp)
6175  b83d 4a            	dec	a
6176  b83e 263f          	jrne	L1522
6177                     ; 3924     for (i = 0; i < num_chars; i++) {
6179  b840 6b17          	ld	(OFST+0,sp),a
6182  b842 2033          	jra	L7522
6183  b844               L3522:
6184                     ; 3933       if (saved_postpartial_previous[4+i] != '\0') {
6186  b844 5f            	clrw	x
6187  b845 97            	ld	xl,a
6188  b846 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6189  b84a 271b          	jreq	L3622
6190                     ; 3934         tmp_Pending[i] = saved_postpartial_previous[4+i];
6192  b84c 96            	ldw	x,sp
6193  b84d 1c0003        	addw	x,#OFST-20
6194  b850 9f            	ld	a,xl
6195  b851 5e            	swapw	x
6196  b852 1b17          	add	a,(OFST+0,sp)
6197  b854 2401          	jrnc	L272
6198  b856 5c            	incw	x
6199  b857               L272:
6200  b857 02            	rlwa	x,a
6201  b858 7b17          	ld	a,(OFST+0,sp)
6202  b85a 905f          	clrw	y
6203  b85c 9097          	ld	yl,a
6204  b85e 90d6002d      	ld	a,(_saved_postpartial_previous+4,y)
6205  b862 f7            	ld	(x),a
6207                     ; 3924     for (i = 0; i < num_chars; i++) {
6209  b863 0c17          	inc	(OFST+0,sp)
6211  b865 2010          	jra	L7522
6212  b867               L3622:
6213                     ; 3937         resume = i;
6215  b867 6b01          	ld	(OFST-22,sp),a
6217                     ; 3938         break;
6218  b869               L1622:
6219                     ; 3941     if (*tmp_pBuffer == '&') {
6221  b869 72c60025      	ld	a,[_tmp_pBuffer.w]
6222  b86d a126          	cp	a,#38
6223  b86f 260e          	jrne	L1522
6224                     ; 3945       amp_found = 1;
6226  b871 a601          	ld	a,#1
6227  b873 6b02          	ld	(OFST-21,sp),a
6229  b875 2008          	jra	L1522
6230  b877               L7522:
6231                     ; 3924     for (i = 0; i < num_chars; i++) {
6233  b877 7b17          	ld	a,(OFST+0,sp)
6234  b879 1119          	cp	a,(OFST+2,sp)
6235  b87b 25c7          	jrult	L3522
6236  b87d 20ea          	jra	L1622
6237  b87f               L1522:
6238                     ; 3957   if (amp_found == 0) {
6240  b87f 7b02          	ld	a,(OFST-21,sp)
6241  b881 2703ccb90b    	jrne	L1722
6242                     ; 3958     for (i = resume; i < num_chars; i++) {
6244  b886 7b01          	ld	a,(OFST-22,sp)
6245  b888 6b17          	ld	(OFST+0,sp),a
6248  b88a 207b          	jra	L7722
6249  b88c               L3722:
6250                     ; 3961       if (amp_found == 0) {
6252  b88c 7b02          	ld	a,(OFST-21,sp)
6253  b88e 265d          	jrne	L3032
6254                     ; 3964         if (*tmp_pBuffer == '&') {
6256  b890 72c60025      	ld	a,[_tmp_pBuffer.w]
6257  b894 a126          	cp	a,#38
6258  b896 2606          	jrne	L5032
6259                     ; 3967           amp_found = 1;
6261  b898 a601          	ld	a,#1
6262  b89a 6b02          	ld	(OFST-21,sp),a
6265  b89c 204f          	jra	L3032
6266  b89e               L5032:
6267                     ; 3970           tmp_Pending[i] = *tmp_pBuffer;
6269  b89e 96            	ldw	x,sp
6270  b89f 1c0003        	addw	x,#OFST-20
6271  b8a2 9f            	ld	a,xl
6272  b8a3 5e            	swapw	x
6273  b8a4 1b17          	add	a,(OFST+0,sp)
6274  b8a6 2401          	jrnc	L472
6275  b8a8 5c            	incw	x
6276  b8a9               L472:
6277  b8a9 90ce0025      	ldw	y,_tmp_pBuffer
6278  b8ad 02            	rlwa	x,a
6279  b8ae 90f6          	ld	a,(y)
6280  b8b0 f7            	ld	(x),a
6281                     ; 3971           saved_postpartial[4+i] = *tmp_pBuffer;
6283  b8b1 5f            	clrw	x
6284  b8b2 7b17          	ld	a,(OFST+0,sp)
6285  b8b4 97            	ld	xl,a
6286  b8b5 90f6          	ld	a,(y)
6287  b8b7 d70045        	ld	(_saved_postpartial+4,x),a
6288                     ; 3972           tmp_nParseLeft--;
6290  b8ba 725a0022      	dec	_tmp_nParseLeft
6291                     ; 3973           saved_nparseleft = tmp_nParseLeft;
6293                     ; 3974           tmp_pBuffer++;
6295  b8be 93            	ldw	x,y
6296  b8bf 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6297  b8c4 5c            	incw	x
6298  b8c5 cf0025        	ldw	_tmp_pBuffer,x
6299                     ; 3975           tmp_nBytes--;
6301  b8c8 ce0023        	ldw	x,_tmp_nBytes
6302  b8cb 5a            	decw	x
6303  b8cc cf0023        	ldw	_tmp_nBytes,x
6304                     ; 3976           if (tmp_nBytes == 0) {
6306  b8cf 261c          	jrne	L3032
6307                     ; 3980             if (i == (num_chars - 1)) {
6309  b8d1 7b19          	ld	a,(OFST+2,sp)
6310  b8d3 5f            	clrw	x
6311  b8d4 97            	ld	xl,a
6312  b8d5 5a            	decw	x
6313  b8d6 7b17          	ld	a,(OFST+0,sp)
6314  b8d8 905f          	clrw	y
6315  b8da 9097          	ld	yl,a
6316  b8dc 90bf07        	ldw	c_y,y
6317  b8df b307          	cpw	x,c_y
6318  b8e1 2604          	jrne	L3132
6319                     ; 3985               saved_parsestate = PARSE_DELIM;
6321  b8e3 3505005a      	mov	_saved_parsestate,#5
6322  b8e7               L3132:
6323                     ; 3987             break_while = 1;
6325  b8e7 35010021      	mov	_break_while,#1
6326                     ; 3988             break; // This will break the for() loop. But we need to break the
6328  b8eb 201e          	jra	L1722
6329  b8ed               L3032:
6330                     ; 3994       if (amp_found == 1) {
6332  b8ed 7b02          	ld	a,(OFST-21,sp)
6333  b8ef 4a            	dec	a
6334  b8f0 2611          	jrne	L5132
6335                     ; 3997         tmp_Pending[i] = '\0';
6337  b8f2 96            	ldw	x,sp
6338  b8f3 1c0003        	addw	x,#OFST-20
6339  b8f6 9f            	ld	a,xl
6340  b8f7 5e            	swapw	x
6341  b8f8 1b17          	add	a,(OFST+0,sp)
6342  b8fa 2401          	jrnc	L672
6343  b8fc 5c            	incw	x
6344  b8fd               L672:
6345  b8fd 02            	rlwa	x,a
6346  b8fe 7f            	clr	(x)
6347                     ; 4006         tmp_nParseLeft--;
6349  b8ff 725a0022      	dec	_tmp_nParseLeft
6350  b903               L5132:
6351                     ; 3958     for (i = resume; i < num_chars; i++) {
6353  b903 0c17          	inc	(OFST+0,sp)
6355  b905 7b17          	ld	a,(OFST+0,sp)
6356  b907               L7722:
6359  b907 1119          	cp	a,(OFST+2,sp)
6360  b909 2581          	jrult	L3722
6361  b90b               L1722:
6362                     ; 4027   if (break_while == 0) clear_saved_postpartial_all();
6364  b90b c60021        	ld	a,_break_while
6365  b90e 2603          	jrne	L7132
6368  b910 cdb7de        	call	_clear_saved_postpartial_all
6370  b913               L7132:
6371                     ; 4030   if (curr_ParseCmd == 'a') {
6373  b913 7b18          	ld	a,(OFST+1,sp)
6374  b915 a161          	cp	a,#97
6375  b917 2622          	jrne	L1232
6376                     ; 4031     for (i=0; i<num_chars; i++) Pending_devicename[i] = tmp_Pending[i];
6378  b919 0f17          	clr	(OFST+0,sp)
6381  b91b 2016          	jra	L7232
6382  b91d               L3232:
6385  b91d 5f            	clrw	x
6386  b91e 97            	ld	xl,a
6387  b91f 89            	pushw	x
6388  b920 96            	ldw	x,sp
6389  b921 1c0005        	addw	x,#OFST-18
6390  b924 9f            	ld	a,xl
6391  b925 5e            	swapw	x
6392  b926 1b19          	add	a,(OFST+2,sp)
6393  b928 2401          	jrnc	L203
6394  b92a 5c            	incw	x
6395  b92b               L203:
6396  b92b 02            	rlwa	x,a
6397  b92c f6            	ld	a,(x)
6398  b92d 85            	popw	x
6399  b92e d70125        	ld	(_Pending_devicename,x),a
6402  b931 0c17          	inc	(OFST+0,sp)
6404  b933               L7232:
6407  b933 7b17          	ld	a,(OFST+0,sp)
6408  b935 1119          	cp	a,(OFST+2,sp)
6409  b937 25e4          	jrult	L3232
6411  b939 204a          	jra	L3332
6412  b93b               L1232:
6413                     ; 4036   else if (curr_ParseCmd == 'l') {
6415  b93b a16c          	cp	a,#108
6416  b93d 2622          	jrne	L5332
6417                     ; 4037     for (i=0; i<num_chars; i++) Pending_mqtt_username[i] = tmp_Pending[i];
6419  b93f 0f17          	clr	(OFST+0,sp)
6422  b941 2016          	jra	L3432
6423  b943               L7332:
6426  b943 5f            	clrw	x
6427  b944 97            	ld	xl,a
6428  b945 89            	pushw	x
6429  b946 96            	ldw	x,sp
6430  b947 1c0005        	addw	x,#OFST-18
6431  b94a 9f            	ld	a,xl
6432  b94b 5e            	swapw	x
6433  b94c 1b19          	add	a,(OFST+2,sp)
6434  b94e 2401          	jrnc	L403
6435  b950 5c            	incw	x
6436  b951               L403:
6437  b951 02            	rlwa	x,a
6438  b952 f6            	ld	a,(x)
6439  b953 85            	popw	x
6440  b954 d70152        	ld	(_Pending_mqtt_username,x),a
6443  b957 0c17          	inc	(OFST+0,sp)
6445  b959               L3432:
6448  b959 7b17          	ld	a,(OFST+0,sp)
6449  b95b 1119          	cp	a,(OFST+2,sp)
6450  b95d 25e4          	jrult	L7332
6452  b95f 2024          	jra	L3332
6453  b961               L5332:
6454                     ; 4041   else if (curr_ParseCmd == 'm') {
6456  b961 a16d          	cp	a,#109
6457  b963 2620          	jrne	L3332
6458                     ; 4042     for (i=0; i<num_chars; i++) Pending_mqtt_password[i] = tmp_Pending[i];
6460  b965 0f17          	clr	(OFST+0,sp)
6463  b967 2016          	jra	L7532
6464  b969               L3532:
6467  b969 5f            	clrw	x
6468  b96a 97            	ld	xl,a
6469  b96b 89            	pushw	x
6470  b96c 96            	ldw	x,sp
6471  b96d 1c0005        	addw	x,#OFST-18
6472  b970 9f            	ld	a,xl
6473  b971 5e            	swapw	x
6474  b972 1b19          	add	a,(OFST+2,sp)
6475  b974 2401          	jrnc	L603
6476  b976 5c            	incw	x
6477  b977               L603:
6478  b977 02            	rlwa	x,a
6479  b978 f6            	ld	a,(x)
6480  b979 85            	popw	x
6481  b97a d70147        	ld	(_Pending_mqtt_password,x),a
6484  b97d 0c17          	inc	(OFST+0,sp)
6486  b97f               L7532:
6489  b97f 7b17          	ld	a,(OFST+0,sp)
6490  b981 1119          	cp	a,(OFST+2,sp)
6491  b983 25e4          	jrult	L3532
6492  b985               L3332:
6493                     ; 4045 }
6496  b985 5b19          	addw	sp,#25
6497  b987 81            	ret	
6571                     	switch	.const
6572  9da9               L023:
6573  9da9 ba66          	dc.w	L3632
6574  9dab ba6d          	dc.w	L5632
6575  9dad ba74          	dc.w	L7632
6576  9daf ba7b          	dc.w	L1732
6577  9db1 ba82          	dc.w	L3732
6578  9db3 ba89          	dc.w	L5732
6579  9db5 ba90          	dc.w	L7732
6580  9db7 ba97          	dc.w	L1042
6581  9db9 ba9e          	dc.w	L3042
6582  9dbb baa5          	dc.w	L5042
6583  9dbd baac          	dc.w	L7042
6584  9dbf bab3          	dc.w	L1142
6585  9dc1 baba          	dc.w	L3142
6586  9dc3 bac1          	dc.w	L5142
6587  9dc5 bac8          	dc.w	L7142
6588  9dc7 bacf          	dc.w	L1242
6589                     ; 4048 void parse_POST_address(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6589                     ; 4049 {
6590                     .text:	section	.text,new
6591  b988               _parse_POST_address:
6593  b988 89            	pushw	x
6594  b989 89            	pushw	x
6595       00000002      OFST:	set	2
6598                     ; 4052   alpha[0] = '-';
6600  b98a 352d001b      	mov	_alpha,#45
6601                     ; 4053   alpha[1] = '-';
6603  b98e 352d001c      	mov	_alpha+1,#45
6604                     ; 4054   alpha[2] = '-';
6606  b992 352d001d      	mov	_alpha+2,#45
6607                     ; 4057   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6609  b996 9e            	ld	a,xh
6610  b997 c10029        	cp	a,_saved_postpartial_previous
6611  b99a 2624          	jrne	L1542
6612                     ; 4060     saved_postpartial_previous[0] = '\0';
6614  b99c 725f0029      	clr	_saved_postpartial_previous
6615                     ; 4067     if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
6617  b9a0 c6002d        	ld	a,_saved_postpartial_previous+4
6618  b9a3 2705          	jreq	L3542
6621  b9a5 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
6622  b9aa               L3542:
6623                     ; 4068     if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
6625  b9aa c6002e        	ld	a,_saved_postpartial_previous+5
6626  b9ad 2705          	jreq	L5542
6629  b9af 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
6630  b9b4               L5542:
6631                     ; 4069     if (saved_postpartial_previous[6] != '\0') alpha[2] = saved_postpartial_previous[6];
6633  b9b4 c6002f        	ld	a,_saved_postpartial_previous+6
6634  b9b7 270a          	jreq	L1642
6637  b9b9 55002f001d    	mov	_alpha+2,_saved_postpartial_previous+6
6638  b9be 2003          	jra	L1642
6639  b9c0               L1542:
6640                     ; 4075     clear_saved_postpartial_data(); // Clear [4] and higher
6642  b9c0 cdb7f2        	call	_clear_saved_postpartial_data
6644  b9c3               L1642:
6645                     ; 4078   for (i=0; i<3; i++) {
6647  b9c3 4f            	clr	a
6648  b9c4 6b02          	ld	(OFST+0,sp),a
6650  b9c6               L3642:
6651                     ; 4084     if (alpha[i] == '-') {
6653  b9c6 5f            	clrw	x
6654  b9c7 97            	ld	xl,a
6655  b9c8 d6001b        	ld	a,(_alpha,x)
6656  b9cb a12d          	cp	a,#45
6657  b9cd 263c          	jrne	L1742
6658                     ; 4085       alpha[i] = (uint8_t)(*tmp_pBuffer);
6660  b9cf 7b02          	ld	a,(OFST+0,sp)
6661  b9d1 5f            	clrw	x
6662  b9d2 90ce0025      	ldw	y,_tmp_pBuffer
6663  b9d6 97            	ld	xl,a
6664  b9d7 90f6          	ld	a,(y)
6665  b9d9 d7001b        	ld	(_alpha,x),a
6666                     ; 4086       saved_postpartial[i+4] = (uint8_t)(*tmp_pBuffer);
6668  b9dc 5f            	clrw	x
6669  b9dd 7b02          	ld	a,(OFST+0,sp)
6670  b9df 97            	ld	xl,a
6671  b9e0 90f6          	ld	a,(y)
6672  b9e2 d70045        	ld	(_saved_postpartial+4,x),a
6673                     ; 4087       tmp_nParseLeft--;
6675  b9e5 725a0022      	dec	_tmp_nParseLeft
6676                     ; 4088       saved_nparseleft = tmp_nParseLeft;
6678                     ; 4089       tmp_pBuffer++;
6680  b9e9 93            	ldw	x,y
6681  b9ea 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6682  b9ef 5c            	incw	x
6683  b9f0 cf0025        	ldw	_tmp_pBuffer,x
6684                     ; 4090       tmp_nBytes--;
6686  b9f3 ce0023        	ldw	x,_tmp_nBytes
6687  b9f6 5a            	decw	x
6688  b9f7 cf0023        	ldw	_tmp_nBytes,x
6689                     ; 4091       if (i != 2 && tmp_nBytes == 0) {
6691  b9fa 7b02          	ld	a,(OFST+0,sp)
6692  b9fc a102          	cp	a,#2
6693  b9fe 270b          	jreq	L1742
6695  ba00 ce0023        	ldw	x,_tmp_nBytes
6696  ba03 2606          	jrne	L1742
6697                     ; 4092         break_while = 1; // Hit end of fragment but still have characters to
6699  ba05 35010021      	mov	_break_while,#1
6700                     ; 4096         break; // Break out of for() loop.
6702  ba09 2008          	jra	L7642
6703  ba0b               L1742:
6704                     ; 4078   for (i=0; i<3; i++) {
6706  ba0b 0c02          	inc	(OFST+0,sp)
6710  ba0d 7b02          	ld	a,(OFST+0,sp)
6711  ba0f a103          	cp	a,#3
6712  ba11 25b3          	jrult	L3642
6713  ba13               L7642:
6714                     ; 4100   if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6716  ba13 c60021        	ld	a,_break_while
6717  ba16 4a            	dec	a
6718  ba17 2603ccbadd    	jreq	L223
6721                     ; 4104   clear_saved_postpartial_all();
6723  ba1c cdb7de        	call	_clear_saved_postpartial_all
6725                     ; 4117     invalid = 0;
6727  ba1f 0f01          	clr	(OFST-1,sp)
6729                     ; 4119     temp = (uint8_t)(       (alpha[2] - '0'));
6731  ba21 c6001d        	ld	a,_alpha+2
6732  ba24 a030          	sub	a,#48
6733  ba26 6b02          	ld	(OFST+0,sp),a
6735                     ; 4120     temp = (uint8_t)(temp + (alpha[1] - '0') * 10);
6737  ba28 c6001c        	ld	a,_alpha+1
6738  ba2b 97            	ld	xl,a
6739  ba2c a60a          	ld	a,#10
6740  ba2e 42            	mul	x,a
6741  ba2f 9f            	ld	a,xl
6742  ba30 a0e0          	sub	a,#224
6743  ba32 1b02          	add	a,(OFST+0,sp)
6744  ba34 6b02          	ld	(OFST+0,sp),a
6746                     ; 4121     if (temp > 55 && alpha[0] > '1') invalid = 1;
6748  ba36 a138          	cp	a,#56
6749  ba38 250d          	jrult	L7742
6751  ba3a c6001b        	ld	a,_alpha
6752  ba3d a132          	cp	a,#50
6753  ba3f 2506          	jrult	L7742
6756  ba41 a601          	ld	a,#1
6757  ba43 6b01          	ld	(OFST-1,sp),a
6760  ba45 200e          	jra	L1052
6761  ba47               L7742:
6762                     ; 4122     else temp = (uint8_t)(temp + (alpha[0] - '0') * 100);
6764  ba47 c6001b        	ld	a,_alpha
6765  ba4a 97            	ld	xl,a
6766  ba4b a664          	ld	a,#100
6767  ba4d 42            	mul	x,a
6768  ba4e 9f            	ld	a,xl
6769  ba4f a0c0          	sub	a,#192
6770  ba51 1b02          	add	a,(OFST+0,sp)
6771  ba53 6b02          	ld	(OFST+0,sp),a
6773  ba55               L1052:
6774                     ; 4123     if (invalid == 0) { // Make change only if valid entry
6776  ba55 7b01          	ld	a,(OFST-1,sp)
6777  ba57 267b          	jrne	L3052
6778                     ; 4124       switch(curr_ParseNum)
6780  ba59 7b04          	ld	a,(OFST+2,sp)
6782                     ; 4147         default: break;
6783  ba5b a110          	cp	a,#16
6784  ba5d 2475          	jruge	L3052
6785  ba5f 5f            	clrw	x
6786  ba60 97            	ld	xl,a
6787  ba61 58            	sllw	x
6788  ba62 de9da9        	ldw	x,(L023,x)
6789  ba65 fc            	jp	(x)
6790  ba66               L3632:
6791                     ; 4126         case 0:  Pending_hostaddr[3] = (uint8_t)temp; break;
6793  ba66 7b02          	ld	a,(OFST+0,sp)
6794  ba68 c70146        	ld	_Pending_hostaddr+3,a
6797  ba6b 2067          	jra	L3052
6798  ba6d               L5632:
6799                     ; 4127         case 1:  Pending_hostaddr[2] = (uint8_t)temp; break;
6801  ba6d 7b02          	ld	a,(OFST+0,sp)
6802  ba6f c70145        	ld	_Pending_hostaddr+2,a
6805  ba72 2060          	jra	L3052
6806  ba74               L7632:
6807                     ; 4128         case 2:  Pending_hostaddr[1] = (uint8_t)temp; break;
6809  ba74 7b02          	ld	a,(OFST+0,sp)
6810  ba76 c70144        	ld	_Pending_hostaddr+1,a
6813  ba79 2059          	jra	L3052
6814  ba7b               L1732:
6815                     ; 4129         case 3:  Pending_hostaddr[0] = (uint8_t)temp; break;
6817  ba7b 7b02          	ld	a,(OFST+0,sp)
6818  ba7d c70143        	ld	_Pending_hostaddr,a
6821  ba80 2052          	jra	L3052
6822  ba82               L3732:
6823                     ; 4130         case 4:  Pending_draddr[3] = (uint8_t)temp; break;
6825  ba82 7b02          	ld	a,(OFST+0,sp)
6826  ba84 c70142        	ld	_Pending_draddr+3,a
6829  ba87 204b          	jra	L3052
6830  ba89               L5732:
6831                     ; 4131         case 5:  Pending_draddr[2] = (uint8_t)temp; break;
6833  ba89 7b02          	ld	a,(OFST+0,sp)
6834  ba8b c70141        	ld	_Pending_draddr+2,a
6837  ba8e 2044          	jra	L3052
6838  ba90               L7732:
6839                     ; 4132         case 6:  Pending_draddr[1] = (uint8_t)temp; break;
6841  ba90 7b02          	ld	a,(OFST+0,sp)
6842  ba92 c70140        	ld	_Pending_draddr+1,a
6845  ba95 203d          	jra	L3052
6846  ba97               L1042:
6847                     ; 4133         case 7:  Pending_draddr[0] = (uint8_t)temp; break;
6849  ba97 7b02          	ld	a,(OFST+0,sp)
6850  ba99 c7013f        	ld	_Pending_draddr,a
6853  ba9c 2036          	jra	L3052
6854  ba9e               L3042:
6855                     ; 4134         case 8:  Pending_netmask[3] = (uint8_t)temp; break;
6857  ba9e 7b02          	ld	a,(OFST+0,sp)
6858  baa0 c7013e        	ld	_Pending_netmask+3,a
6861  baa3 202f          	jra	L3052
6862  baa5               L5042:
6863                     ; 4135         case 9:  Pending_netmask[2] = (uint8_t)temp; break;
6865  baa5 7b02          	ld	a,(OFST+0,sp)
6866  baa7 c7013d        	ld	_Pending_netmask+2,a
6869  baaa 2028          	jra	L3052
6870  baac               L7042:
6871                     ; 4136         case 10: Pending_netmask[1] = (uint8_t)temp; break;
6873  baac 7b02          	ld	a,(OFST+0,sp)
6874  baae c7013c        	ld	_Pending_netmask+1,a
6877  bab1 2021          	jra	L3052
6878  bab3               L1142:
6879                     ; 4137         case 11: Pending_netmask[0] = (uint8_t)temp; break;
6881  bab3 7b02          	ld	a,(OFST+0,sp)
6882  bab5 c7013b        	ld	_Pending_netmask,a
6885  bab8 201a          	jra	L3052
6886  baba               L3142:
6887                     ; 4140 	  Pending_mqttserveraddr[3] = (uint8_t)temp;
6889  baba 7b02          	ld	a,(OFST+0,sp)
6890  babc c70162        	ld	_Pending_mqttserveraddr+3,a
6891                     ; 4141 	  break;
6893  babf 2013          	jra	L3052
6894  bac1               L5142:
6895                     ; 4143         case 13: Pending_mqttserveraddr[2] = (uint8_t)temp; break;
6897  bac1 7b02          	ld	a,(OFST+0,sp)
6898  bac3 c70161        	ld	_Pending_mqttserveraddr+2,a
6901  bac6 200c          	jra	L3052
6902  bac8               L7142:
6903                     ; 4144         case 14: Pending_mqttserveraddr[1] = (uint8_t)temp; break;
6905  bac8 7b02          	ld	a,(OFST+0,sp)
6906  baca c70160        	ld	_Pending_mqttserveraddr+1,a
6909  bacd 2005          	jra	L3052
6910  bacf               L1242:
6911                     ; 4145         case 15: Pending_mqttserveraddr[0] = (uint8_t)temp; break;
6913  bacf 7b02          	ld	a,(OFST+0,sp)
6914  bad1 c7015f        	ld	_Pending_mqttserveraddr,a
6917                     ; 4147         default: break;
6919  bad4               L3052:
6920                     ; 4152   if (tmp_nBytes == 0) {
6922  bad4 ce0023        	ldw	x,_tmp_nBytes
6923  bad7 2604          	jrne	L223
6924                     ; 4155     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
6926  bad9 35020021      	mov	_break_while,#2
6927                     ; 4158     return;
6928  badd               L223:
6931  badd 5b04          	addw	sp,#4
6932  badf 81            	ret	
6933                     ; 4160 }
7013                     ; 4163 void parse_POST_port(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
7013                     ; 4164 {
7014                     .text:	section	.text,new
7015  bae0               _parse_POST_port:
7017  bae0 89            	pushw	x
7018  bae1 5203          	subw	sp,#3
7019       00000003      OFST:	set	3
7022                     ; 4167   for (i=0; i<5; i++) alpha[i] = '-';
7024  bae3 4f            	clr	a
7025  bae4 6b03          	ld	(OFST+0,sp),a
7027  bae6               L1452:
7030  bae6 5f            	clrw	x
7031  bae7 97            	ld	xl,a
7032  bae8 a62d          	ld	a,#45
7033  baea d7001b        	ld	(_alpha,x),a
7036  baed 0c03          	inc	(OFST+0,sp)
7040  baef 7b03          	ld	a,(OFST+0,sp)
7041  baf1 a105          	cp	a,#5
7042  baf3 25f1          	jrult	L1452
7043                     ; 4169   if (saved_postpartial_previous[0] == curr_ParseCmd) {
7045  baf5 c60029        	ld	a,_saved_postpartial_previous
7046  baf8 1104          	cp	a,(OFST+1,sp)
7047  bafa 2621          	jrne	L7452
7048                     ; 4172     saved_postpartial_previous[0] = '\0';
7050  bafc 725f0029      	clr	_saved_postpartial_previous
7051                     ; 4179     for (i=0; i<5; i++) {
7053  bb00 4f            	clr	a
7054  bb01 6b03          	ld	(OFST+0,sp),a
7056  bb03               L1552:
7057                     ; 4180       if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
7059  bb03 5f            	clrw	x
7060  bb04 97            	ld	xl,a
7061  bb05 724d002d      	tnz	(_saved_postpartial_previous+4,x)
7062  bb09 2708          	jreq	L7552
7065  bb0b 5f            	clrw	x
7066  bb0c 97            	ld	xl,a
7067  bb0d d6002d        	ld	a,(_saved_postpartial_previous+4,x)
7068  bb10 d7001b        	ld	(_alpha,x),a
7069  bb13               L7552:
7070                     ; 4179     for (i=0; i<5; i++) {
7072  bb13 0c03          	inc	(OFST+0,sp)
7076  bb15 7b03          	ld	a,(OFST+0,sp)
7077  bb17 a105          	cp	a,#5
7078  bb19 25e8          	jrult	L1552
7080  bb1b 2003          	jra	L1652
7081  bb1d               L7452:
7082                     ; 4187     clear_saved_postpartial_data(); // Clear [4] and higher
7084  bb1d cdb7f2        	call	_clear_saved_postpartial_data
7086  bb20               L1652:
7087                     ; 4192     for (i=0; i<5; i++) {
7089  bb20 4f            	clr	a
7090  bb21 6b03          	ld	(OFST+0,sp),a
7092  bb23               L3652:
7093                     ; 4198       if (alpha[i] == '-') {
7095  bb23 5f            	clrw	x
7096  bb24 97            	ld	xl,a
7097  bb25 d6001b        	ld	a,(_alpha,x)
7098  bb28 a12d          	cp	a,#45
7099  bb2a 263c          	jrne	L1752
7100                     ; 4199         alpha[i] = (uint8_t)(*tmp_pBuffer);
7102  bb2c 7b03          	ld	a,(OFST+0,sp)
7103  bb2e 5f            	clrw	x
7104  bb2f 90ce0025      	ldw	y,_tmp_pBuffer
7105  bb33 97            	ld	xl,a
7106  bb34 90f6          	ld	a,(y)
7107  bb36 d7001b        	ld	(_alpha,x),a
7108                     ; 4200         saved_postpartial[i+4] = *tmp_pBuffer;
7110  bb39 5f            	clrw	x
7111  bb3a 7b03          	ld	a,(OFST+0,sp)
7112  bb3c 97            	ld	xl,a
7113  bb3d 90f6          	ld	a,(y)
7114  bb3f d70045        	ld	(_saved_postpartial+4,x),a
7115                     ; 4201         tmp_nParseLeft--;
7117  bb42 725a0022      	dec	_tmp_nParseLeft
7118                     ; 4202         saved_nparseleft = tmp_nParseLeft;
7120                     ; 4203         tmp_pBuffer++;
7122  bb46 93            	ldw	x,y
7123  bb47 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
7124  bb4c 5c            	incw	x
7125  bb4d cf0025        	ldw	_tmp_pBuffer,x
7126                     ; 4204         tmp_nBytes--;
7128  bb50 ce0023        	ldw	x,_tmp_nBytes
7129  bb53 5a            	decw	x
7130  bb54 cf0023        	ldw	_tmp_nBytes,x
7131                     ; 4205         if (i != 4 && tmp_nBytes == 0) {
7133  bb57 7b03          	ld	a,(OFST+0,sp)
7134  bb59 a104          	cp	a,#4
7135  bb5b 270b          	jreq	L1752
7137  bb5d ce0023        	ldw	x,_tmp_nBytes
7138  bb60 2606          	jrne	L1752
7139                     ; 4206           break_while = 1; // Hit end of fragment but still have characters to
7141  bb62 35010021      	mov	_break_while,#1
7142                     ; 4210    	break; // Break out of for() loop.
7144  bb66 2008          	jra	L7652
7145  bb68               L1752:
7146                     ; 4192     for (i=0; i<5; i++) {
7148  bb68 0c03          	inc	(OFST+0,sp)
7152  bb6a 7b03          	ld	a,(OFST+0,sp)
7153  bb6c a105          	cp	a,#5
7154  bb6e 25b3          	jrult	L3652
7155  bb70               L7652:
7156                     ; 4214     if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
7158  bb70 c60021        	ld	a,_break_while
7159  bb73 4a            	dec	a
7160  bb74 2603ccbc02    	jreq	L233
7163                     ; 4219   clear_saved_postpartial_all();
7165  bb79 cdb7de        	call	_clear_saved_postpartial_all
7167                     ; 4228     invalid = 0;
7169  bb7c 0f03          	clr	(OFST+0,sp)
7171                     ; 4230     temp = (uint16_t)(       (alpha[4] - '0'));
7173  bb7e 5f            	clrw	x
7174  bb7f c6001f        	ld	a,_alpha+4
7175  bb82 97            	ld	xl,a
7176  bb83 1d0030        	subw	x,#48
7177  bb86 1f01          	ldw	(OFST-2,sp),x
7179                     ; 4231     temp = (uint16_t)(temp + (alpha[3] - '0') * 10);
7181  bb88 c6001e        	ld	a,_alpha+3
7182  bb8b 97            	ld	xl,a
7183  bb8c a60a          	ld	a,#10
7184  bb8e 42            	mul	x,a
7185  bb8f 1d01e0        	subw	x,#480
7186  bb92 72fb01        	addw	x,(OFST-2,sp)
7187  bb95 1f01          	ldw	(OFST-2,sp),x
7189                     ; 4232     temp = (uint16_t)(temp + (alpha[2] - '0') * 100);
7191  bb97 c6001d        	ld	a,_alpha+2
7192  bb9a 97            	ld	xl,a
7193  bb9b a664          	ld	a,#100
7194  bb9d 42            	mul	x,a
7195  bb9e 1d12c0        	subw	x,#4800
7196  bba1 72fb01        	addw	x,(OFST-2,sp)
7197  bba4 1f01          	ldw	(OFST-2,sp),x
7199                     ; 4233     temp = (uint16_t)(temp + (alpha[1] - '0') * 1000);
7201  bba6 5f            	clrw	x
7202  bba7 c6001c        	ld	a,_alpha+1
7203  bbaa 97            	ld	xl,a
7204  bbab 90ae03e8      	ldw	y,#1000
7205  bbaf cdf894        	call	c_imul
7207  bbb2 1dbb80        	subw	x,#48000
7208  bbb5 72fb01        	addw	x,(OFST-2,sp)
7209  bbb8 1f01          	ldw	(OFST-2,sp),x
7211                     ; 4234     if (temp > 5535 && alpha[0] > '5') invalid = 1;
7213  bbba a315a0        	cpw	x,#5536
7214  bbbd 250d          	jrult	L7752
7216  bbbf c6001b        	ld	a,_alpha
7217  bbc2 a136          	cp	a,#54
7218  bbc4 2506          	jrult	L7752
7221  bbc6 a601          	ld	a,#1
7222  bbc8 6b03          	ld	(OFST+0,sp),a
7225  bbca 2014          	jra	L1062
7226  bbcc               L7752:
7227                     ; 4235     else temp = (uint16_t)(temp + (alpha[0] - '0') * 10000);
7229  bbcc c6001b        	ld	a,_alpha
7230  bbcf 5f            	clrw	x
7231  bbd0 97            	ld	xl,a
7232  bbd1 90ae2710      	ldw	y,#10000
7233  bbd5 cdf894        	call	c_imul
7235  bbd8 1d5300        	subw	x,#21248
7236  bbdb 72fb01        	addw	x,(OFST-2,sp)
7237  bbde 1f01          	ldw	(OFST-2,sp),x
7239  bbe0               L1062:
7240                     ; 4236     if (temp < 10) invalid = 1;
7242  bbe0 a3000a        	cpw	x,#10
7243  bbe3 2404          	jruge	L3062
7246  bbe5 a601          	ld	a,#1
7247  bbe7 6b03          	ld	(OFST+0,sp),a
7249  bbe9               L3062:
7250                     ; 4237     if (invalid == 0) {
7252  bbe9 7b03          	ld	a,(OFST+0,sp)
7253  bbeb 260c          	jrne	L5062
7254                     ; 4238       if (curr_ParseNum == 0) Pending_port = (uint16_t)temp;
7256  bbed 7b05          	ld	a,(OFST+2,sp)
7257  bbef 2605          	jrne	L7062
7260  bbf1 cf0139        	ldw	_Pending_port,x
7262  bbf4 2003          	jra	L5062
7263  bbf6               L7062:
7264                     ; 4240       else Pending_mqttport = (uint16_t)temp;
7266  bbf6 cf015d        	ldw	_Pending_mqttport,x
7267  bbf9               L5062:
7268                     ; 4245   if (tmp_nBytes == 0) {
7270  bbf9 ce0023        	ldw	x,_tmp_nBytes
7271  bbfc 2604          	jrne	L233
7272                     ; 4248     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
7274  bbfe 35020021      	mov	_break_while,#2
7275                     ; 4251     return;
7276  bc02               L233:
7279  bc02 5b05          	addw	sp,#5
7280  bc04 81            	ret	
7281                     ; 4253 }
7316                     	switch	.const
7317  9dc9               L043:
7318  9dc9 bc13          	dc.w	L5162
7319  9dcb bc1b          	dc.w	L7162
7320  9dcd bc23          	dc.w	L1262
7321  9dcf bc2b          	dc.w	L3262
7322  9dd1 bc33          	dc.w	L5262
7323  9dd3 bc3b          	dc.w	L7262
7324  9dd5 bc43          	dc.w	L1362
7325  9dd7 bc4b          	dc.w	L3362
7326  9dd9 bc53          	dc.w	L5362
7327  9ddb bc5b          	dc.w	L7362
7328  9ddd bc63          	dc.w	L1462
7329  9ddf bc6b          	dc.w	L3462
7330  9de1 bc73          	dc.w	L5462
7331  9de3 bc7b          	dc.w	L7462
7332  9de5 bc83          	dc.w	L1562
7333  9de7 bc8b          	dc.w	L3562
7334                     ; 4256 uint8_t GpioGetPin(uint8_t nGpio)
7334                     ; 4257 {
7335                     .text:	section	.text,new
7336  bc05               _GpioGetPin:
7340                     ; 4262   switch (nGpio) {
7343                     ; 4278     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7344  bc05 a110          	cp	a,#16
7345  bc07 2503ccbc93    	jruge	L3762
7346  bc0c 5f            	clrw	x
7347  bc0d 97            	ld	xl,a
7348  bc0e 58            	sllw	x
7349  bc0f de9dc9        	ldw	x,(L043,x)
7350  bc12 fc            	jp	(x)
7351  bc13               L5162:
7352                     ; 4263     case 0:  if (IO_8to1  & (uint8_t)(0x01)) return 1; break;
7354  bc13 7201016d7b    	btjf	_IO_8to1,#0,L3762
7357  bc18 a601          	ld	a,#1
7360  bc1a 81            	ret	
7361  bc1b               L7162:
7362                     ; 4264     case 1:  if (IO_8to1  & (uint8_t)(0x02)) return 1; break;
7364  bc1b 7203016d73    	btjf	_IO_8to1,#1,L3762
7367  bc20 a601          	ld	a,#1
7370  bc22 81            	ret	
7371  bc23               L1262:
7372                     ; 4265     case 2:  if (IO_8to1  & (uint8_t)(0x04)) return 1; break;
7374  bc23 7205016d6b    	btjf	_IO_8to1,#2,L3762
7377  bc28 a601          	ld	a,#1
7380  bc2a 81            	ret	
7381  bc2b               L3262:
7382                     ; 4266     case 3:  if (IO_8to1  & (uint8_t)(0x08)) return 1; break;
7384  bc2b 7207016d63    	btjf	_IO_8to1,#3,L3762
7387  bc30 a601          	ld	a,#1
7390  bc32 81            	ret	
7391  bc33               L5262:
7392                     ; 4267     case 4:  if (IO_8to1  & (uint8_t)(0x10)) return 1; break;
7394  bc33 7209016d5b    	btjf	_IO_8to1,#4,L3762
7397  bc38 a601          	ld	a,#1
7400  bc3a 81            	ret	
7401  bc3b               L7262:
7402                     ; 4268     case 5:  if (IO_8to1  & (uint8_t)(0x20)) return 1; break;
7404  bc3b 720b016d53    	btjf	_IO_8to1,#5,L3762
7407  bc40 a601          	ld	a,#1
7410  bc42 81            	ret	
7411  bc43               L1362:
7412                     ; 4269     case 6:  if (IO_8to1  & (uint8_t)(0x40)) return 1; break;
7414  bc43 720d016d4b    	btjf	_IO_8to1,#6,L3762
7417  bc48 a601          	ld	a,#1
7420  bc4a 81            	ret	
7421  bc4b               L3362:
7422                     ; 4270     case 7:  if (IO_8to1  & (uint8_t)(0x80)) return 1; break;
7424  bc4b 720f016d43    	btjf	_IO_8to1,#7,L3762
7427  bc50 a601          	ld	a,#1
7430  bc52 81            	ret	
7431  bc53               L5362:
7432                     ; 4271     case 8:  if (IO_16to9 & (uint8_t)(0x01)) return 1; break;
7434  bc53 7201016e3b    	btjf	_IO_16to9,#0,L3762
7437  bc58 a601          	ld	a,#1
7440  bc5a 81            	ret	
7441  bc5b               L7362:
7442                     ; 4272     case 9:  if (IO_16to9 & (uint8_t)(0x02)) return 1; break;
7444  bc5b 7203016e33    	btjf	_IO_16to9,#1,L3762
7447  bc60 a601          	ld	a,#1
7450  bc62 81            	ret	
7451  bc63               L1462:
7452                     ; 4273     case 10: if (IO_16to9 & (uint8_t)(0x04)) return 1; break;
7454  bc63 7205016e2b    	btjf	_IO_16to9,#2,L3762
7457  bc68 a601          	ld	a,#1
7460  bc6a 81            	ret	
7461  bc6b               L3462:
7462                     ; 4274     case 11: if (IO_16to9 & (uint8_t)(0x08)) return 1; break;
7464  bc6b 7207016e23    	btjf	_IO_16to9,#3,L3762
7467  bc70 a601          	ld	a,#1
7470  bc72 81            	ret	
7471  bc73               L5462:
7472                     ; 4275     case 12: if (IO_16to9 & (uint8_t)(0x10)) return 1; break;
7474  bc73 7209016e1b    	btjf	_IO_16to9,#4,L3762
7477  bc78 a601          	ld	a,#1
7480  bc7a 81            	ret	
7481  bc7b               L7462:
7482                     ; 4276     case 13: if (IO_16to9 & (uint8_t)(0x20)) return 1; break;
7484  bc7b 720b016e13    	btjf	_IO_16to9,#5,L3762
7487  bc80 a601          	ld	a,#1
7490  bc82 81            	ret	
7491  bc83               L1562:
7492                     ; 4277     case 14: if (IO_16to9 & (uint8_t)(0x40)) return 1; break;
7494  bc83 720d016e0b    	btjf	_IO_16to9,#6,L3762
7497  bc88 a601          	ld	a,#1
7500  bc8a 81            	ret	
7501  bc8b               L3562:
7502                     ; 4278     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7504  bc8b 720f016e03    	btjf	_IO_16to9,#7,L3762
7507  bc90 a601          	ld	a,#1
7510  bc92 81            	ret	
7511  bc93               L3762:
7512                     ; 4280   return 0;
7514  bc93 4f            	clr	a
7517  bc94 81            	ret	
7564                     ; 4329 void GpioSetPin(uint8_t nGpio, uint8_t nState)
7564                     ; 4330 {
7565                     .text:	section	.text,new
7566  bc95               _GpioSetPin:
7568  bc95 89            	pushw	x
7569  bc96 88            	push	a
7570       00000001      OFST:	set	1
7573                     ; 4337   mask = 0;
7575  bc97 0f01          	clr	(OFST+0,sp)
7577                     ; 4339   switch(nGpio) {
7579  bc99 9e            	ld	a,xh
7581                     ; 4348     default: break;
7582  bc9a 4d            	tnz	a
7583  bc9b 2717          	jreq	L5372
7584  bc9d 4a            	dec	a
7585  bc9e 2717          	jreq	L7372
7586  bca0 4a            	dec	a
7587  bca1 2718          	jreq	L1472
7588  bca3 4a            	dec	a
7589  bca4 2719          	jreq	L3472
7590  bca6 4a            	dec	a
7591  bca7 271a          	jreq	L5472
7592  bca9 4a            	dec	a
7593  bcaa 271b          	jreq	L7472
7594  bcac 4a            	dec	a
7595  bcad 271c          	jreq	L1572
7596  bcaf 4a            	dec	a
7597  bcb0 271d          	jreq	L3572
7598  bcb2 201f          	jra	L1003
7599  bcb4               L5372:
7600                     ; 4340     case 0: mask = 0x01; break;
7602  bcb4 4c            	inc	a
7605  bcb5 201a          	jp	LC026
7606  bcb7               L7372:
7607                     ; 4341     case 1: mask = 0x02; break;
7609  bcb7 a602          	ld	a,#2
7612  bcb9 2016          	jp	LC026
7613  bcbb               L1472:
7614                     ; 4342     case 2: mask = 0x04; break;
7616  bcbb a604          	ld	a,#4
7619  bcbd 2012          	jp	LC026
7620  bcbf               L3472:
7621                     ; 4343     case 3: mask = 0x08; break;
7623  bcbf a608          	ld	a,#8
7626  bcc1 200e          	jp	LC026
7627  bcc3               L5472:
7628                     ; 4344     case 4: mask = 0x10; break;
7630  bcc3 a610          	ld	a,#16
7633  bcc5 200a          	jp	LC026
7634  bcc7               L7472:
7635                     ; 4345     case 5: mask = 0x20; break;
7637  bcc7 a620          	ld	a,#32
7640  bcc9 2006          	jp	LC026
7641  bccb               L1572:
7642                     ; 4346     case 6: mask = 0x40; break;
7644  bccb a640          	ld	a,#64
7647  bccd 2002          	jp	LC026
7648  bccf               L3572:
7649                     ; 4347     case 7: mask = 0x80; break;
7651  bccf a680          	ld	a,#128
7652  bcd1               LC026:
7653  bcd1 6b01          	ld	(OFST+0,sp),a
7657                     ; 4348     default: break;
7659  bcd3               L1003:
7660                     ; 4351   if (nState) IO_8to1 |= mask;
7662  bcd3 7b03          	ld	a,(OFST+2,sp)
7663  bcd5 2707          	jreq	L3003
7666  bcd7 c6016d        	ld	a,_IO_8to1
7667  bcda 1a01          	or	a,(OFST+0,sp)
7669  bcdc 2006          	jra	L5003
7670  bcde               L3003:
7671                     ; 4352   else IO_8to1 &= (uint8_t)~mask;
7673  bcde 7b01          	ld	a,(OFST+0,sp)
7674  bce0 43            	cpl	a
7675  bce1 c4016d        	and	a,_IO_8to1
7676  bce4               L5003:
7677  bce4 c7016d        	ld	_IO_8to1,a
7678                     ; 4354 }
7681  bce7 5b03          	addw	sp,#3
7682  bce9 81            	ret	
7743                     ; 4366 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7743                     ; 4367 {
7744                     .text:	section	.text,new
7745  bcea               _SetMAC:
7747  bcea 89            	pushw	x
7748  bceb 5203          	subw	sp,#3
7749       00000003      OFST:	set	3
7752                     ; 4381   temp = 0;
7754                     ; 4382   invalid = 0;
7756  bced 0f01          	clr	(OFST-2,sp)
7758                     ; 4385   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7760  bcef 9f            	ld	a,xl
7761  bcf0 a130          	cp	a,#48
7762  bcf2 250b          	jrult	L1503
7764  bcf4 9f            	ld	a,xl
7765  bcf5 a13a          	cp	a,#58
7766  bcf7 2406          	jruge	L1503
7769  bcf9 7b05          	ld	a,(OFST+2,sp)
7770  bcfb a030          	sub	a,#48
7772  bcfd 200c          	jp	LC027
7773  bcff               L1503:
7774                     ; 4386   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7776  bcff 7b05          	ld	a,(OFST+2,sp)
7777  bd01 a161          	cp	a,#97
7778  bd03 250a          	jrult	L5503
7780  bd05 a167          	cp	a,#103
7781  bd07 2406          	jruge	L5503
7784  bd09 a057          	sub	a,#87
7785  bd0b               LC027:
7786  bd0b 6b05          	ld	(OFST+2,sp),a
7788  bd0d 2004          	jra	L3503
7789  bd0f               L5503:
7790                     ; 4387   else invalid = 1; // If an invalid entry set indicator
7792  bd0f a601          	ld	a,#1
7793  bd11 6b01          	ld	(OFST-2,sp),a
7795  bd13               L3503:
7796                     ; 4389   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7798  bd13 7b08          	ld	a,(OFST+5,sp)
7799  bd15 a130          	cp	a,#48
7800  bd17 2508          	jrult	L1603
7802  bd19 a13a          	cp	a,#58
7803  bd1b 2404          	jruge	L1603
7806  bd1d a030          	sub	a,#48
7808  bd1f 200a          	jp	LC028
7809  bd21               L1603:
7810                     ; 4390   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7812  bd21 a161          	cp	a,#97
7813  bd23 250a          	jrult	L5603
7815  bd25 a167          	cp	a,#103
7816  bd27 2406          	jruge	L5603
7819  bd29 a057          	sub	a,#87
7820  bd2b               LC028:
7821  bd2b 6b08          	ld	(OFST+5,sp),a
7823  bd2d 2004          	jra	L3603
7824  bd2f               L5603:
7825                     ; 4391   else invalid = 1; // If an invalid entry set indicator
7827  bd2f a601          	ld	a,#1
7828  bd31 6b01          	ld	(OFST-2,sp),a
7830  bd33               L3603:
7831                     ; 4393   if (invalid == 0) { // Change value only if valid entry
7833  bd33 7b01          	ld	a,(OFST-2,sp)
7834  bd35 264a          	jrne	L1703
7835                     ; 4394     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7837  bd37 7b05          	ld	a,(OFST+2,sp)
7838  bd39 97            	ld	xl,a
7839  bd3a a610          	ld	a,#16
7840  bd3c 42            	mul	x,a
7841  bd3d 01            	rrwa	x,a
7842  bd3e 1b08          	add	a,(OFST+5,sp)
7843  bd40 5f            	clrw	x
7844  bd41 97            	ld	xl,a
7845  bd42 1f02          	ldw	(OFST-1,sp),x
7847                     ; 4395     switch(itemnum)
7849  bd44 7b04          	ld	a,(OFST+1,sp)
7851                     ; 4403     default: break;
7852  bd46 2711          	jreq	L7003
7853  bd48 4a            	dec	a
7854  bd49 2715          	jreq	L1103
7855  bd4b 4a            	dec	a
7856  bd4c 2719          	jreq	L3103
7857  bd4e 4a            	dec	a
7858  bd4f 271d          	jreq	L5103
7859  bd51 4a            	dec	a
7860  bd52 2721          	jreq	L7103
7861  bd54 4a            	dec	a
7862  bd55 2725          	jreq	L1203
7863  bd57 2028          	jra	L1703
7864  bd59               L7003:
7865                     ; 4397     case 0: Pending_uip_ethaddr_oct[5] = (uint8_t)temp; break;
7867  bd59 7b03          	ld	a,(OFST+0,sp)
7868  bd5b c7011e        	ld	_Pending_uip_ethaddr_oct+5,a
7871  bd5e 2021          	jra	L1703
7872  bd60               L1103:
7873                     ; 4398     case 1: Pending_uip_ethaddr_oct[4] = (uint8_t)temp; break;
7875  bd60 7b03          	ld	a,(OFST+0,sp)
7876  bd62 c7011d        	ld	_Pending_uip_ethaddr_oct+4,a
7879  bd65 201a          	jra	L1703
7880  bd67               L3103:
7881                     ; 4399     case 2: Pending_uip_ethaddr_oct[3] = (uint8_t)temp; break;
7883  bd67 7b03          	ld	a,(OFST+0,sp)
7884  bd69 c7011c        	ld	_Pending_uip_ethaddr_oct+3,a
7887  bd6c 2013          	jra	L1703
7888  bd6e               L5103:
7889                     ; 4400     case 3: Pending_uip_ethaddr_oct[2] = (uint8_t)temp; break;
7891  bd6e 7b03          	ld	a,(OFST+0,sp)
7892  bd70 c7011b        	ld	_Pending_uip_ethaddr_oct+2,a
7895  bd73 200c          	jra	L1703
7896  bd75               L7103:
7897                     ; 4401     case 4: Pending_uip_ethaddr_oct[1] = (uint8_t)temp; break;
7899  bd75 7b03          	ld	a,(OFST+0,sp)
7900  bd77 c7011a        	ld	_Pending_uip_ethaddr_oct+1,a
7903  bd7a 2005          	jra	L1703
7904  bd7c               L1203:
7905                     ; 4402     case 5: Pending_uip_ethaddr_oct[0] = (uint8_t)temp; break;
7907  bd7c 7b03          	ld	a,(OFST+0,sp)
7908  bd7e c70119        	ld	_Pending_uip_ethaddr_oct,a
7911                     ; 4403     default: break;
7913  bd81               L1703:
7914                     ; 4406 }
7917  bd81 5b05          	addw	sp,#5
7918  bd83 81            	ret	
8322                     	switch	.bss
8323  0017               _insertion_flag:
8324  0017 000000        	ds.b	3
8325                     	xdef	_insertion_flag
8326                     	xref	_second_counter
8327                     	xref	_TRANSMIT_counter
8328                     	xref	_TXERIF_counter
8329                     	xref	_RXERIF_counter
8330                     	xref	_MQTT_error_status
8331                     	xref	_mqtt_start_status
8332                     	xref	_Pending_mqtt_password
8333                     	xref	_Pending_mqtt_username
8334                     	xref	_Pending_mqttport
8335                     	xref	_Pending_mqttserveraddr
8336                     	xref	_stored_mqtt_password
8337                     	xref	_stored_mqtt_username
8338                     	xref	_stored_mqttport
8339                     	xref	_stored_mqttserveraddr
8340  001a               _current_webpage:
8341  001a 00            	ds.b	1
8342                     	xdef	_current_webpage
8343  001b               _alpha:
8344  001b 000000000000  	ds.b	6
8345                     	xdef	_alpha
8346  0021               _break_while:
8347  0021 00            	ds.b	1
8348                     	xdef	_break_while
8349  0022               _tmp_nParseLeft:
8350  0022 00            	ds.b	1
8351                     	xdef	_tmp_nParseLeft
8352  0023               _tmp_nBytes:
8353  0023 0000          	ds.b	2
8354                     	xdef	_tmp_nBytes
8355  0025               _tmp_pBuffer:
8356  0025 0000          	ds.b	2
8357                     	xdef	_tmp_pBuffer
8358  0027               _z_diag:
8359  0027 00            	ds.b	1
8360                     	xdef	_z_diag
8361  0028               _saved_newlines:
8362  0028 00            	ds.b	1
8363                     	xdef	_saved_newlines
8364  0029               _saved_postpartial_previous:
8365  0029 000000000000  	ds.b	24
8366                     	xdef	_saved_postpartial_previous
8367  0041               _saved_postpartial:
8368  0041 000000000000  	ds.b	24
8369                     	xdef	_saved_postpartial
8370  0059               _saved_nparseleft:
8371  0059 00            	ds.b	1
8372                     	xdef	_saved_nparseleft
8373  005a               _saved_parsestate:
8374  005a 00            	ds.b	1
8375                     	xdef	_saved_parsestate
8376  005b               _saved_nstate:
8377  005b 00            	ds.b	1
8378                     	xdef	_saved_nstate
8379  005c               _OctetArray:
8380  005c 000000000000  	ds.b	11
8381                     	xdef	_OctetArray
8382                     	xref	_user_reboot_request
8383                     	xref	_parse_complete
8384                     	xref	_mac_string
8385                     	xref	_stored_config_settings
8386                     	xref	_stored_devicename
8387                     	xref	_stored_port
8388                     	xref	_stored_netmask
8389                     	xref	_stored_draddr
8390                     	xref	_stored_hostaddr
8391                     	xref	_Pending_uip_ethaddr_oct
8392                     	xref	_Pending_config_settings
8393                     	xref	_Pending_devicename
8394                     	xref	_Pending_port
8395                     	xref	_Pending_netmask
8396                     	xref	_Pending_draddr
8397                     	xref	_Pending_hostaddr
8398                     	xref	_invert_input
8399                     	xref	_IO_8to1
8400                     	xref	_IO_16to9
8401                     	xref	_Port_Httpd
8402                     	xref	_strlen
8403                     	xref	_debugflash
8404                     	xref	_uip_flags
8405                     	xref	_uip_conn
8406                     	xref	_uip_len
8407                     	xref	_uip_appdata
8408                     	xref	_htons
8409                     	xref	_uip_send
8410                     	xref	_uip_listen
8411                     	xref	_uip_init_stats
8412                     	xdef	_SetMAC
8413                     	xdef	_clear_saved_postpartial_previous
8414                     	xdef	_clear_saved_postpartial_data
8415                     	xdef	_clear_saved_postpartial_all
8416                     	xdef	_GpioSetPin
8417                     	xdef	_GpioGetPin
8418                     	xdef	_parse_POST_port
8419                     	xdef	_parse_POST_address
8420                     	xdef	_parse_POST_string
8421                     	xdef	_HttpDCall
8422                     	xdef	_HttpDInit
8423                     	xdef	_emb_itoa
8424                     	xdef	_adjust_template_size
8425                     	switch	.const
8426  9de9               L143:
8427  9de9 436f6e6e6563  	dc.b	"Connection:close",13
8428  9dfa 0a00          	dc.b	10,0
8429  9dfc               L733:
8430  9dfc 436f6e74656e  	dc.b	"Content-Type: text"
8431  9e0e 2f68746d6c3b  	dc.b	"/html; charset=utf"
8432  9e20 2d380d        	dc.b	"-8",13
8433  9e23 0a00          	dc.b	10,0
8434  9e25               L533:
8435  9e25 43616368652d  	dc.b	"Cache-Control: no-"
8436  9e37 63616368652c  	dc.b	"cache, no-store",13
8437  9e47 0a00          	dc.b	10,0
8438  9e49               L523:
8439  9e49 436f6e74656e  	dc.b	"Content-Length:",0
8440  9e59               L323:
8441  9e59 0d0a00        	dc.b	13,10,0
8442  9e5c               L123:
8443  9e5c 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8444                     	xref.b	c_lreg
8445                     	xref.b	c_x
8446                     	xref.b	c_y
8466                     	xref	c_imul
8467                     	xref	c_uitolx
8468                     	xref	c_ludv
8469                     	xref	c_lumd
8470                     	xref	c_rtol
8471                     	xref	c_ltor
8472                     	xref	c_lzmp
8473                     	end
