   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  8080               L11_checked:
  20  8080 636865636b65  	dc.b	"checked",0
  21  8088               L31_g_HtmlPageIOControl:
  22  8088 257930342579  	dc.b	"%y04%y05%y06<title"
  23  809a 3e494f20436f  	dc.b	">IO Control</title"
  24  80ac 3e3c2f686561  	dc.b	"></head><body><h1>"
  25  80be 494f20436f6e  	dc.b	"IO Control</h1><fo"
  26  80d0 726d206d6574  	dc.b	"rm method='POST' a"
  27  80e2 6374696f6e3d  	dc.b	"ction='/'><table><"
  28  80f4 74723e3c7464  	dc.b	"tr><td class='t1'>"
  29  8106 4e616d653a3c  	dc.b	"Name:</td><td clas"
  30  8118 733d27743227  	dc.b	"s='t2'>%a00</td></"
  31  812a 74723e3c2f74  	dc.b	"tr></table><table>"
  32  813c 3c74723e3c74  	dc.b	"<tr><td class='t1'"
  33  814e 3e3c2f74643e  	dc.b	"></td><td class='t"
  34  8160 33273e3c2f74  	dc.b	"3'></td><td class="
  35  8172 277431273e53  	dc.b	"'t1'>SET</td></tr>"
  36  8184 3c7472        	dc.b	"<tr"
  37  8187 3e3c74642063  	dc.b	"><td class='t1'>Ou"
  38  8199 747075743031  	dc.b	"tput01</td><td cla"
  39  81ab 73733d277325  	dc.b	"ss='s%i00'></td><t"
  40  81bd 6420636c6173  	dc.b	"d class='t1'><inpu"
  41  81cf 742074797065  	dc.b	"t type='radio' id="
  42  81e1 2730316f6e27  	dc.b	"'01on' name='o00' "
  43  81f3 76616c75653d  	dc.b	"value='1' %o00><la"
  44  8205 62656c20666f  	dc.b	"bel for='01on'>ON<"
  45  8217 2f6c6162656c  	dc.b	"/label><input type"
  46  8229 3d2772616469  	dc.b	"='radio' id='01off"
  47  823b 27206e616d65  	dc.b	"' name='o00' value"
  48  824d 3d2730272025  	dc.b	"='0' %p00><label f"
  49  825f 6f723d273031  	dc.b	"or='01off'>OFF</la"
  50  8271 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
  51  8283 3c7464        	dc.b	"<td"
  52  8286 20636c617373  	dc.b	" class='t1'>Output"
  53  8298 30323c2f7464  	dc.b	"02</td><td class='"
  54  82aa 732569303127  	dc.b	"s%i01'></td><td cl"
  55  82bc 6173733d2774  	dc.b	"ass='t1'><input ty"
  56  82ce 70653d277261  	dc.b	"pe='radio' id='02o"
  57  82e0 6e27206e616d  	dc.b	"n' name='o01' valu"
  58  82f2 653d27312720  	dc.b	"e='1' %o01><label "
  59  8304 666f723d2730  	dc.b	"for='02on'>ON</lab"
  60  8316 656c3e3c696e  	dc.b	"el><input type='ra"
  61  8328 64696f272069  	dc.b	"dio' id='02off' na"
  62  833a 6d653d276f30  	dc.b	"me='o01' value='0'"
  63  834c 20257030313e  	dc.b	" %p01><label for='"
  64  835e 30326f666627  	dc.b	"02off'>OFF</label>"
  65  8370 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
  66  8382 636c61        	dc.b	"cla"
  67  8385 73733d277431  	dc.b	"ss='t1'>Output03</"
  68  8397 74643e3c7464  	dc.b	"td><td class='s%i0"
  69  83a9 32273e3c2f74  	dc.b	"2'></td><td class="
  70  83bb 277431273e3c  	dc.b	"'t1'><input type='"
  71  83cd 726164696f27  	dc.b	"radio' id='03on' n"
  72  83df 616d653d276f  	dc.b	"ame='o02' value='1"
  73  83f1 2720256f3032  	dc.b	"' %o02><label for="
  74  8403 2730336f6e27  	dc.b	"'03on'>ON</label><"
  75  8415 696e70757420  	dc.b	"input type='radio'"
  76  8427 2069643d2730  	dc.b	" id='03off' name='"
  77  8439 6f3032272076  	dc.b	"o02' value='0' %p0"
  78  844b 323e3c6c6162  	dc.b	"2><label for='03of"
  79  845d 66273e4f4646  	dc.b	"f'>OFF</label></td"
  80  846f 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
  81  8481 733d27        	dc.b	"s='"
  82  8484 7431273e4f75  	dc.b	"t1'>Output04</td><"
  83  8496 746420636c61  	dc.b	"td class='s%i03'><"
  84  84a8 2f74643e3c74  	dc.b	"/td><td class='t1'"
  85  84ba 3e3c696e7075  	dc.b	"><input type='radi"
  86  84cc 6f272069643d  	dc.b	"o' id='04on' name="
  87  84de 276f30332720  	dc.b	"'o03' value='1' %o"
  88  84f0 30333e3c6c61  	dc.b	"03><label for='04o"
  89  8502 6e273e4f4e3c  	dc.b	"n'>ON</label><inpu"
  90  8514 742074797065  	dc.b	"t type='radio' id="
  91  8526 2730346f6666  	dc.b	"'04off' name='o03'"
  92  8538 2076616c7565  	dc.b	" value='0' %p03><l"
  93  854a 6162656c2066  	dc.b	"abel for='04off'>O"
  94  855c 46463c2f6c61  	dc.b	"FF</label></td></t"
  95  856e 723e3c74723e  	dc.b	"r><tr><td class='t"
  96  8580 31273e        	dc.b	"1'>"
  97  8583 4f7574707574  	dc.b	"Output05</td><td c"
  98  8595 6c6173733d27  	dc.b	"lass='s%i04'></td>"
  99  85a7 3c746420636c  	dc.b	"<td class='t1'><in"
 100  85b9 707574207479  	dc.b	"put type='radio' i"
 101  85cb 643d2730356f  	dc.b	"d='05on' name='o04"
 102  85dd 272076616c75  	dc.b	"' value='1' %o04><"
 103  85ef 6c6162656c20  	dc.b	"label for='05on'>O"
 104  8601 4e3c2f6c6162  	dc.b	"N</label><input ty"
 105  8613 70653d277261  	dc.b	"pe='radio' id='05o"
 106  8625 666627206e61  	dc.b	"ff' name='o04' val"
 107  8637 75653d273027  	dc.b	"ue='0' %p04><label"
 108  8649 20666f723d27  	dc.b	" for='05off'>OFF</"
 109  865b 6c6162656c3e  	dc.b	"label></td></tr><t"
 110  866d 723e3c746420  	dc.b	"r><td class='t1'>O"
 111  867f 757470        	dc.b	"utp"
 112  8682 757430363c2f  	dc.b	"ut06</td><td class"
 113  8694 3d2773256930  	dc.b	"='s%i05'></td><td "
 114  86a6 636c6173733d  	dc.b	"class='t1'><input "
 115  86b8 747970653d27  	dc.b	"type='radio' id='0"
 116  86ca 366f6e27206e  	dc.b	"6on' name='o05' va"
 117  86dc 6c75653d2731  	dc.b	"lue='1' %o05><labe"
 118  86ee 6c20666f723d  	dc.b	"l for='06on'>ON</l"
 119  8700 6162656c3e3c  	dc.b	"abel><input type='"
 120  8712 726164696f27  	dc.b	"radio' id='06off' "
 121  8724 6e616d653d27  	dc.b	"name='o05' value='"
 122  8736 302720257030  	dc.b	"0' %p05><label for"
 123  8748 3d2730366f66  	dc.b	"='06off'>OFF</labe"
 124  875a 6c3e3c2f7464  	dc.b	"l></td></tr><tr><t"
 125  876c 6420636c6173  	dc.b	"d class='t1'>Outpu"
 126  877e 743037        	dc.b	"t07"
 127  8781 3c2f74643e3c  	dc.b	"</td><td class='s%"
 128  8793 693036273e3c  	dc.b	"i06'></td><td clas"
 129  87a5 733d27743127  	dc.b	"s='t1'><input type"
 130  87b7 3d2772616469  	dc.b	"='radio' id='07on'"
 131  87c9 206e616d653d  	dc.b	" name='o06' value="
 132  87db 27312720256f  	dc.b	"'1' %o06><label fo"
 133  87ed 723d2730376f  	dc.b	"r='07on'>ON</label"
 134  87ff 3e3c696e7075  	dc.b	"><input type='radi"
 135  8811 6f272069643d  	dc.b	"o' id='07off' name"
 136  8823 3d276f303627  	dc.b	"='o06' value='0' %"
 137  8835 7030363e3c6c  	dc.b	"p06><label for='07"
 138  8847 6f6666273e4f  	dc.b	"off'>OFF</label></"
 139  8859 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 140  886b 6173733d2774  	dc.b	"ass='t1'>Output08<"
 141  887d 2f7464        	dc.b	"/td"
 142  8880 3e3c74642063  	dc.b	"><td class='s%i07'"
 143  8892 3e3c2f74643e  	dc.b	"></td><td class='t"
 144  88a4 31273e3c696e  	dc.b	"1'><input type='ra"
 145  88b6 64696f272069  	dc.b	"dio' id='08on' nam"
 146  88c8 653d276f3037  	dc.b	"e='o07' value='1' "
 147  88da 256f30373e3c  	dc.b	"%o07><label for='0"
 148  88ec 386f6e273e4f  	dc.b	"8on'>ON</label><in"
 149  88fe 707574207479  	dc.b	"put type='radio' i"
 150  8910 643d2730386f  	dc.b	"d='08off' name='o0"
 151  8922 37272076616c  	dc.b	"7' value='0' %p07>"
 152  8934 3c6c6162656c  	dc.b	"<label for='08off'"
 153  8946 3e4f46463c2f  	dc.b	">OFF</label></td><"
 154  8958 2f74723e3c2f  	dc.b	"/tr></table><table"
 155  896a 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 156  897c 273e49        	dc.b	"'>I"
 157  897f 6e7075743031  	dc.b	"nput01</td><td cla"
 158  8991 73733d277325  	dc.b	"ss='s%i08'></td></"
 159  89a3 74723e3c7472  	dc.b	"tr><tr><td class='"
 160  89b5 7431273e496e  	dc.b	"t1'>Input02</td><t"
 161  89c7 6420636c6173  	dc.b	"d class='s%i09'></"
 162  89d9 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 163  89eb 6173733d2774  	dc.b	"ass='t1'>Input03</"
 164  89fd 74643e3c7464  	dc.b	"td><td class='s%i1"
 165  8a0f 30273e3c2f74  	dc.b	"0'></td></tr><tr><"
 166  8a21 746420636c61  	dc.b	"td class='t1'>Inpu"
 167  8a33 7430343c2f74  	dc.b	"t04</td><td class="
 168  8a45 277325693131  	dc.b	"'s%i11'></td></tr>"
 169  8a57 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 170  8a69 3e496e707574  	dc.b	">Input05</td><td c"
 171  8a7b 6c6173        	dc.b	"las"
 172  8a7e 733d27732569  	dc.b	"s='s%i12'></td></t"
 173  8a90 723e3c74723e  	dc.b	"r><tr><td class='t"
 174  8aa2 31273e496e70  	dc.b	"1'>Input06</td><td"
 175  8ab4 20636c617373  	dc.b	" class='s%i13'></t"
 176  8ac6 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 177  8ad8 73733d277431  	dc.b	"ss='t1'>Input07</t"
 178  8aea 643e3c746420  	dc.b	"d><td class='s%i14"
 179  8afc 273e3c2f7464  	dc.b	"'></td></tr><tr><t"
 180  8b0e 6420636c6173  	dc.b	"d class='t1'>Input"
 181  8b20 30383c2f7464  	dc.b	"08</td><td class='"
 182  8b32 732569313527  	dc.b	"s%i15'></td></tr><"
 183  8b44 2f7461626c65  	dc.b	"/table><input type"
 184  8b56 3d2768696464  	dc.b	"='hidden' name='z0"
 185  8b68 30272076616c  	dc.b	"0' value='0'><butt"
 186  8b7a 6f6e20        	dc.b	"on "
 187  8b7d 747970653d27  	dc.b	"type='submit' titl"
 188  8b8f 653d27536176  	dc.b	"e='Saves your chan"
 189  8ba1 676573207468  	dc.b	"ges then restarts "
 190  8bb3 746865204e65  	dc.b	"the Network Module"
 191  8bc5 273e53617665  	dc.b	"'>Save</button><bu"
 192  8bd7 74746f6e2074  	dc.b	"tton type='reset' "
 193  8be9 7469746c653d  	dc.b	"title='Un-does any"
 194  8bfb 206368616e67  	dc.b	" changes that have"
 195  8c0d 206e6f742062  	dc.b	" not been saved'>U"
 196  8c1f 6e646f20416c  	dc.b	"ndo All</button></"
 197  8c31 666f726d3e25  	dc.b	"form>%y03/60%y02Re"
 198  8c43 66726573683c  	dc.b	"fresh</button></fo"
 199  8c55 726d3e257930  	dc.b	"rm>%y03/61%y02Conf"
 200  8c67 696775726174  	dc.b	"iguration</button>"
 201  8c79 3c2f66        	dc.b	"</f"
 202  8c7c 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 203  8c8f               L51_g_HtmlPageConfiguration:
 204  8c8f 257930342579  	dc.b	"%y04%y05%y06<title"
 205  8ca1 3e436f6e6669  	dc.b	">Configuration</ti"
 206  8cb3 746c653e3c2f  	dc.b	"tle></head><body><"
 207  8cc5 68313e436f6e  	dc.b	"h1>Configuration</"
 208  8cd7 68313e3c666f  	dc.b	"h1><form method='P"
 209  8ce9 4f5354272061  	dc.b	"OST' action='/'><t"
 210  8cfb 61626c653e3c  	dc.b	"able><tr><td class"
 211  8d0d 3d277431273e  	dc.b	"='t1'>Name:</td><t"
 212  8d1f 643e3c696e70  	dc.b	"d><input name='a00"
 213  8d31 2720636c6173  	dc.b	"' class='t2' value"
 214  8d43 3d2725613030  	dc.b	"='%a00' pattern='["
 215  8d55 302d39612d7a  	dc.b	"0-9a-zA-Z-_*.]{1,1"
 216  8d67 397d27207265  	dc.b	"9}' required title"
 217  8d79 3d273120746f  	dc.b	"='1 to 19 letters,"
 218  8d8b 206e75        	dc.b	" nu"
 219  8d8e 6d626572732c  	dc.b	"mbers, and -_*. no"
 220  8da0 207370616365  	dc.b	" spaces' maxlength"
 221  8db2 3d273139273e  	dc.b	"='19'></td></tr></"
 222  8dc4 7461626c653e  	dc.b	"table><table><tr><"
 223  8dd6 746420636c61  	dc.b	"td class='t1'>Conf"
 224  8de8 69673c2f7464  	dc.b	"ig</td><td><input "
 225  8dfa 6e616d653d27  	dc.b	"name='g00' class='"
 226  8e0c 743527207661  	dc.b	"t5' value='%g00' p"
 227  8e1e 61747465726e  	dc.b	"attern='[0-9a-zA-Z"
 228  8e30 5d7b367d2720  	dc.b	"]{6}' title='6 cha"
 229  8e42 726163746572  	dc.b	"racters required. "
 230  8e54 53656520446f  	dc.b	"See Documentation'"
 231  8e66 206d61786c65  	dc.b	" maxlength='6'></t"
 232  8e78 643e3c2f7472  	dc.b	"d></tr></table><p>"
 233  8e8a 3c2f70        	dc.b	"</p"
 234  8e8d 3e3c7461626c  	dc.b	"><table><tr><td cl"
 235  8e9f 6173733d2774  	dc.b	"ass='t1'>IP Addres"
 236  8eb1 733c2f74643e  	dc.b	"s</td><td><input n"
 237  8ec3 616d653d2762  	dc.b	"ame='b00' class='t"
 238  8ed5 36272076616c  	dc.b	"6' value='%b00' %y"
 239  8ee7 30303c74643e  	dc.b	"00<td><input name="
 240  8ef9 276230312720  	dc.b	"'b01' class='t6' v"
 241  8f0b 616c75653d27  	dc.b	"alue='%b01' %y00<t"
 242  8f1d 643e3c696e70  	dc.b	"d><input name='b02"
 243  8f2f 2720636c6173  	dc.b	"' class='t6' value"
 244  8f41 3d2725623032  	dc.b	"='%b02' %y00<td><i"
 245  8f53 6e707574206e  	dc.b	"nput name='b03' cl"
 246  8f65 6173733d2774  	dc.b	"ass='t6' value='%b"
 247  8f77 303327202579  	dc.b	"03' %y00</tr><tr><"
 248  8f89 746420        	dc.b	"td "
 249  8f8c 636c6173733d  	dc.b	"class='t1'>Gateway"
 250  8f9e 3c2f74643e3c  	dc.b	"</td><td><input na"
 251  8fb0 6d653d276230  	dc.b	"me='b04' class='t6"
 252  8fc2 272076616c75  	dc.b	"' value='%b04' %y0"
 253  8fd4 303c74643e3c  	dc.b	"0<td><input name='"
 254  8fe6 623035272063  	dc.b	"b05' class='t6' va"
 255  8ff8 6c75653d2725  	dc.b	"lue='%b05' %y00<td"
 256  900a 3e3c696e7075  	dc.b	"><input name='b06'"
 257  901c 20636c617373  	dc.b	" class='t6' value="
 258  902e 272562303627  	dc.b	"'%b06' %y00<td><in"
 259  9040 707574206e61  	dc.b	"put name='b07' cla"
 260  9052 73733d277436  	dc.b	"ss='t6' value='%b0"
 261  9064 372720257930  	dc.b	"7' %y00</tr><tr><t"
 262  9076 6420636c6173  	dc.b	"d class='t1'>Netma"
 263  9088 736b3c        	dc.b	"sk<"
 264  908b 2f74643e3c74  	dc.b	"/td><td><input nam"
 265  909d 653d27623038  	dc.b	"e='b08' class='t6'"
 266  90af 2076616c7565  	dc.b	" value='%b08' %y00"
 267  90c1 3c74643e3c69  	dc.b	"<td><input name='b"
 268  90d3 30392720636c  	dc.b	"09' class='t6' val"
 269  90e5 75653d272562  	dc.b	"ue='%b09' %y00<td>"
 270  90f7 3c696e707574  	dc.b	"<input name='b10' "
 271  9109 636c6173733d  	dc.b	"class='t6' value='"
 272  911b 256231302720  	dc.b	"%b10' %y00<td><inp"
 273  912d 7574206e616d  	dc.b	"ut name='b11' clas"
 274  913f 733d27743627  	dc.b	"s='t6' value='%b11"
 275  9151 272025793030  	dc.b	"' %y00</tr></table"
 276  9163 3e3c7461626c  	dc.b	"><table><tr><td cl"
 277  9175 6173733d2774  	dc.b	"ass='t1'>Port</td>"
 278  9187 3c7464        	dc.b	"<td"
 279  918a 3e3c696e7075  	dc.b	"><input name='c00'"
 280  919c 20636c617373  	dc.b	" class='t8' value="
 281  91ae 272563303027  	dc.b	"'%c00' pattern='[0"
 282  91c0 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 283  91d2 657220303030  	dc.b	"er 00010 to 65535'"
 284  91e4 206d61786c65  	dc.b	" maxlength='5'></t"
 285  91f6 643e3c2f7472  	dc.b	"d></tr></table><ta"
 286  9208 626c653e3c74  	dc.b	"ble><tr><td class="
 287  921a 277431273e4d  	dc.b	"'t1'>MAC Address</"
 288  922c 74643e3c7464  	dc.b	"td><td><input name"
 289  923e 3d2764303027  	dc.b	"='d00' class='t7' "
 290  9250 76616c75653d  	dc.b	"value='%d00' %y01<"
 291  9262 74643e3c696e  	dc.b	"td><input name='d0"
 292  9274 312720636c61  	dc.b	"1' class='t7' valu"
 293  9286 653d27        	dc.b	"e='"
 294  9289 256430312720  	dc.b	"%d01' %y01<td><inp"
 295  929b 7574206e616d  	dc.b	"ut name='d02' clas"
 296  92ad 733d27743727  	dc.b	"s='t7' value='%d02"
 297  92bf 272025793031  	dc.b	"' %y01<td><input n"
 298  92d1 616d653d2764  	dc.b	"ame='d03' class='t"
 299  92e3 37272076616c  	dc.b	"7' value='%d03' %y"
 300  92f5 30313c74643e  	dc.b	"01<td><input name="
 301  9307 276430342720  	dc.b	"'d04' class='t7' v"
 302  9319 616c75653d27  	dc.b	"alue='%d04' %y01<t"
 303  932b 643e3c696e70  	dc.b	"d><input name='d05"
 304  933d 2720636c6173  	dc.b	"' class='t7' value"
 305  934f 3d2725643035  	dc.b	"='%d05' %y01</tr><"
 306  9361 2f7461626c65  	dc.b	"/table><p></p><tab"
 307  9373 6c653e3c7472  	dc.b	"le><tr><td class='"
 308  9385 743127        	dc.b	"t1'"
 309  9388 3e4d51545420  	dc.b	">MQTT Server</td><"
 310  939a 74643e3c696e  	dc.b	"td><input name='b1"
 311  93ac 322720636c61  	dc.b	"2' class='t6' valu"
 312  93be 653d27256231  	dc.b	"e='%b12' %y00<td><"
 313  93d0 696e70757420  	dc.b	"input name='b13' c"
 314  93e2 6c6173733d27  	dc.b	"lass='t6' value='%"
 315  93f4 623133272025  	dc.b	"b13' %y00<td><inpu"
 316  9406 74206e616d65  	dc.b	"t name='b14' class"
 317  9418 3d2774362720  	dc.b	"='t6' value='%b14'"
 318  942a 20257930303c  	dc.b	" %y00<td><input na"
 319  943c 6d653d276231  	dc.b	"me='b15' class='t6"
 320  944e 272076616c75  	dc.b	"' value='%b15' %y0"
 321  9460 303c2f74723e  	dc.b	"0</tr></table><tab"
 322  9472 6c653e3c7472  	dc.b	"le><tr><td class='"
 323  9484 743127        	dc.b	"t1'"
 324  9487 3e4d51545420  	dc.b	">MQTT Port</td><td"
 325  9499 3e3c696e7075  	dc.b	"><input name='c01'"
 326  94ab 20636c617373  	dc.b	" class='t8' value="
 327  94bd 272563303127  	dc.b	"'%c01' pattern='[0"
 328  94cf 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 329  94e1 657220303030  	dc.b	"er 00010 to 65535'"
 330  94f3 206d61786c65  	dc.b	" maxlength='5'></t"
 331  9505 643e3c2f7472  	dc.b	"d></tr></table><ta"
 332  9517 626c653e3c74  	dc.b	"ble><tr><td class="
 333  9529 277431273e4d  	dc.b	"'t1'>MQTT Username"
 334  953b 3c2f74643e3c  	dc.b	"</td><td><input na"
 335  954d 6d653d276c30  	dc.b	"me='l00' class='t1"
 336  955f 272076616c75  	dc.b	"' value='%l00' pat"
 337  9571 7465726e3d27  	dc.b	"tern='[0-9a-zA-Z-_"
 338  9583 2a2e5d        	dc.b	"*.]"
 339  9586 7b302c31307d  	dc.b	"{0,10}' title='0 t"
 340  9598 6f203130206c  	dc.b	"o 10 letters, numb"
 341  95aa 6572732c2061  	dc.b	"ers, and -_*. no s"
 342  95bc 70616365732e  	dc.b	"paces. Use none fo"
 343  95ce 72206e6f2065  	dc.b	"r no entry.' maxle"
 344  95e0 6e6774683d27  	dc.b	"ngth='10'></td></t"
 345  95f2 723e3c74723e  	dc.b	"r><tr><td class='t"
 346  9604 31273e4d5154  	dc.b	"1'>MQTT Password</"
 347  9616 74643e3c7464  	dc.b	"td><td><input name"
 348  9628 3d276d303027  	dc.b	"='m00' class='t1' "
 349  963a 76616c75653d  	dc.b	"value='%m00' patte"
 350  964c 726e3d275b30  	dc.b	"rn='[0-9a-zA-Z-_*."
 351  965e 5d7b302c3130  	dc.b	"]{0,10}' title='0 "
 352  9670 746f20313020  	dc.b	"to 10 letters, num"
 353  9682 626572        	dc.b	"ber"
 354  9685 732c20616e64  	dc.b	"s, and -_*. no spa"
 355  9697 6365732e2055  	dc.b	"ces. Use none for "
 356  96a9 6e6f20656e74  	dc.b	"no entry.' maxleng"
 357  96bb 74683d273130  	dc.b	"th='10'></td></tr>"
 358  96cd 3c2f7461626c  	dc.b	"</table><table><tr"
 359  96df 3e3c74642063  	dc.b	"><td class='t1'>MQ"
 360  96f1 545420537461  	dc.b	"TT Status  </td><t"
 361  9703 6420636c6173  	dc.b	"d class='s%n00'></"
 362  9715 74643e3c7464  	dc.b	"td><td class='s%n0"
 363  9727 31273e3c2f74  	dc.b	"1'></td><td class="
 364  9739 2773256e3032  	dc.b	"'s%n02'></td><td c"
 365  974b 6c6173733d27  	dc.b	"lass='s%n03'></td>"
 366  975d 3c746420636c  	dc.b	"<td class='s%n04'>"
 367  976f 3c2f74643e3c  	dc.b	"</td></tr></table>"
 368  9781 3c703e        	dc.b	"<p>"
 369  9784 3c2f703e3c69  	dc.b	"</p><input type='h"
 370  9796 696464656e27  	dc.b	"idden' name='z00' "
 371  97a8 76616c75653d  	dc.b	"value='0'><button "
 372  97ba 747970653d27  	dc.b	"type='submit'>Save"
 373  97cc 3c2f62757474  	dc.b	"</button><button t"
 374  97de 7970653d2772  	dc.b	"ype='reset'>Undo A"
 375  97f0 6c6c3c2f6275  	dc.b	"ll</button></form>"
 376  9802 3c703e536565  	dc.b	"<p>See Documentati"
 377  9814 6f6e20666f72  	dc.b	"on for help<br>Cod"
 378  9826 652052657669  	dc.b	"e Revision 2020112"
 379  9838 312030343533  	dc.b	"1 0453</p>%y03/91%"
 380  984a 793032526562  	dc.b	"y02Reboot</button>"
 381  985c 3c2f666f726d  	dc.b	"</form><br><br>%y0"
 382  986e 332f36312579  	dc.b	"3/61%y02Refresh</b"
 383  9880 757474        	dc.b	"utt"
 384  9883 6f6e3e3c2f66  	dc.b	"on></form>%y03/60%"
 385  9895 793032494f20  	dc.b	"y02IO Control</but"
 386  98a7 746f6e3e3c2f  	dc.b	"ton></form>%y03/66"
 387  98b9 257930324572  	dc.b	"%y02Error Statisti"
 388  98cb 63733c2f6275  	dc.b	"cs</button></form>"
 389  98dd 3c2f626f6479  	dc.b	"</body></html>",0
 390  98ec               L71_g_HtmlPageStats:
 391  98ec 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 392  98fe 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 393  9910 6561643e3c6c  	dc.b	"ead><link rel='ico"
 394  9922 6e2720687265  	dc.b	"n' href='data:,'><"
 395  9934 2f686561643e  	dc.b	"/head><body><table"
 396  9946 3e3c74723e3c  	dc.b	"><tr><td>Seconds s"
 397  9958 696e63652062  	dc.b	"ince boot %e26</td"
 398  996a 3e3c2f74723e  	dc.b	"></tr><tr><td>RXER"
 399  997c 494620636f75  	dc.b	"IF count %e27</td>"
 400  998e 3c2f74723e3c  	dc.b	"</tr><tr><td>TXERI"
 401  99a0 4620636f756e  	dc.b	"F count %e28</td><"
 402  99b2 2f74723e3c2f  	dc.b	"/tr></table>%y03/6"
 403  99c4 3127206d6574  	dc.b	"1' method='GET'><b"
 404  99d6 7574746f6e3e  	dc.b	"utton>Configuratio"
 405  99e8 6e3c2f        	dc.b	"n</"
 406  99eb 627574746f6e  	dc.b	"button></form>%y03"
 407  99fd 2f363627206d  	dc.b	"/66' method='GET'>"
 408  9a0f 3c627574746f  	dc.b	"<button>Refresh</b"
 409  9a21 7574746f6e3e  	dc.b	"utton></form></bod"
 410  9a33 793e3c2f6874  	dc.b	"y></html>",0
 411  9a3d               L12_g_HtmlPageRstate:
 412  9a3d 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 413  9a4f 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 414  9a61 6561643e3c74  	dc.b	"ead><title>Help Pa"
 415  9a73 676520323c2f  	dc.b	"ge 2</title><link "
 416  9a85 72656c3d2769  	dc.b	"rel='icon' href='d"
 417  9a97 6174613a2c27  	dc.b	"ata:,'></head><bod"
 418  9aa9 793e3c703e25  	dc.b	"y><p>%f00</p></bod"
 419  9abb 793e3c2f6874  	dc.b	"y></html>",0
 420  9ac5               L32_page_string00:
 421  9ac5 706174746572  	dc.b	"pattern='[0-9]{3}'"
 422  9ad7 207469746c65  	dc.b	" title='Enter 000 "
 423  9ae9 746f20323535  	dc.b	"to 255' maxlength="
 424  9afb 2733273e3c2f  	dc.b	"'3'></td>",0
 425  9b05               L52_page_string00_len:
 426  9b05 3f            	dc.b	63
 427  9b06               L72_page_string00_len_less4:
 428  9b06 3b            	dc.b	59
 429  9b07               L13_page_string01:
 430  9b07 706174746572  	dc.b	"pattern='[0-9a-f]{"
 431  9b19 327d27207469  	dc.b	"2}' title='Enter 0"
 432  9b2b 3020746f2066  	dc.b	"0 to ff' maxlength"
 433  9b3d 3d2732273e3c  	dc.b	"='2'></td>",0
 434  9b48               L33_page_string01_len:
 435  9b48 40            	dc.b	64
 436  9b49               L53_page_string01_len_less4:
 437  9b49 3c            	dc.b	60
 438  9b4a               L73_page_string02:
 439  9b4a 27206d657468  	dc.b	"' method='GET'><bu"
 440  9b5c 74746f6e2074  	dc.b	"tton title='Save f"
 441  9b6e 697273742120  	dc.b	"irst! This button "
 442  9b80 77696c6c206e  	dc.b	"will not save your"
 443  9b92 206368616e67  	dc.b	" changes'>",0
 444  9b9d               L14_page_string02_len:
 445  9b9d 52            	dc.b	82
 446  9b9e               L34_page_string02_len_less4:
 447  9b9e 4e            	dc.b	78
 448  9b9f               L54_page_string03:
 449  9b9f 3c666f726d20  	dc.b	"<form style='displ"
 450  9bb1 61793a20696e  	dc.b	"ay: inline' action"
 451  9bc3 3d2700        	dc.b	"='",0
 452  9bc6               L74_page_string03_len:
 453  9bc6 26            	dc.b	38
 454  9bc7               L15_page_string03_len_less4:
 455  9bc7 22            	dc.b	34
 456  9bc8               L35_page_string04:
 457  9bc8 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 458  9bda 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 459  9bec 6561643e3c6c  	dc.b	"ead><link rel='ico"
 460  9bfe 6e2720687265  	dc.b	"n' href='data:,'>",0
 461  9c10               L55_page_string04_len:
 462  9c10 47            	dc.b	71
 463  9c11               L75_page_string04_len_less4:
 464  9c11 43            	dc.b	67
 465  9c12               L16_page_string05:
 466  9c12 3c7374796c65  	dc.b	"<style>.s0 { backg"
 467  9c24 726f756e642d  	dc.b	"round-color: red; "
 468  9c36 77696474683a  	dc.b	"width: 30px; }.s1 "
 469  9c48 7b206261636b  	dc.b	"{ background-color"
 470  9c5a 3a2067726565  	dc.b	": green; width: 30"
 471  9c6c 70783b207d2e  	dc.b	"px; }.t1 { width: "
 472  9c7e 31323070783b  	dc.b	"120px; }.t2 { widt"
 473  9c90 683a20313438  	dc.b	"h: 148px; }.t3 { w"
 474  9ca2 696474683a20  	dc.b	"idth: 30px; }.t5 {"
 475  9cb4 207769647468  	dc.b	" width: 60px; }.t6"
 476  9cc6 207b20776964  	dc.b	" { width: 25px; }."
 477  9cd8 7437207b2077  	dc.b	"t7 { width: 18px; "
 478  9cea 7d2e7438207b  	dc.b	"}.t8 { width: 40px"
 479  9cfc 3b207d00      	dc.b	"; }",0
 480  9d00               L36_page_string05_len:
 481  9d00 ed            	dc.b	237
 482  9d01               L56_page_string05_len_less4:
 483  9d01 e9            	dc.b	233
 484  9d02               L76_page_string06:
 485  9d02 7464207b2074  	dc.b	"td { text-align: c"
 486  9d14 656e7465723b  	dc.b	"enter; border: 1px"
 487  9d26 20626c61636b  	dc.b	" black solid; }</s"
 488  9d38 74796c653e00  	dc.b	"tyle>",0
 489  9d3e               L17_page_string06_len:
 490  9d3e 3b            	dc.b	59
 491  9d3f               L37_page_string06_len_less4:
 492  9d3f 37            	dc.b	55
 547                     ; 1204 uint16_t adjust_template_size()
 547                     ; 1205 {
 549                     .text:	section	.text,new
 550  a41a               _adjust_template_size:
 552  a41a 89            	pushw	x
 553       00000002      OFST:	set	2
 556                     ; 1223   size = 0;
 558  a41b 5f            	clrw	x
 559  a41c 1f01          	ldw	(OFST-1,sp),x
 561                     ; 1228   if (current_webpage == WEBPAGE_IOCONTROL) {
 563  a41e c6001a        	ld	a,_current_webpage
 564  a421 2613          	jrne	L711
 565                     ; 1229     size = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
 567                     ; 1232     size = size + page_string04_len_less4
 567                     ; 1233                 + page_string05_len_less4
 567                     ; 1234 		+ page_string06_len_less4;
 569  a423 ae0d69        	ldw	x,#3433
 570  a426 1f01          	ldw	(OFST-1,sp),x
 572                     ; 1239     size = size + strlen(stored_devicename) - 4 ;
 574  a428 ae4000        	ldw	x,#_stored_devicename
 575  a42b cdf5ef        	call	_strlen
 577  a42e 72fb01        	addw	x,(OFST-1,sp)
 578  a431 1c00a4        	addw	x,#164
 580                     ; 1246     size = size - 48;
 583                     ; 1262     size = size - 8;
 586                     ; 1276     size = size + (2 * page_string03_len_less4);
 589                     ; 1305     size = size + (2 * (page_string02_len_less4));
 593  a434 2046          	jra	L121
 594  a436               L711:
 595                     ; 1324   else if (current_webpage == WEBPAGE_CONFIGURATION) {
 597  a436 a101          	cp	a,#1
 598  a438 2632          	jrne	L321
 599                     ; 1325     size = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
 601                     ; 1328     size = size + page_string04_len_less4
 601                     ; 1329                 + page_string05_len_less4
 601                     ; 1330 		+ page_string06_len_less4;
 603  a43a ae0dbf        	ldw	x,#3519
 604  a43d 1f01          	ldw	(OFST-1,sp),x
 606                     ; 1335     size = size + strlen(stored_devicename) - 4 ;
 608  a43f ae4000        	ldw	x,#_stored_devicename
 609  a442 cdf5ef        	call	_strlen
 611  a445 72fb01        	addw	x,(OFST-1,sp)
 612  a448 1d001c        	subw	x,#28
 614                     ; 1342     size = size - 12;
 617                     ; 1349     size = size + 1;
 620                     ; 1356     size = size - 12;
 623                     ; 1364     size = size + 2;
 626                     ; 1372     size = size - 4;
 629                     ; 1379     size = size + 1;
 631  a44b 1f01          	ldw	(OFST-1,sp),x
 633                     ; 1384     size = size + (strlen(stored_mqtt_username) - 4);
 635  a44d ae4035        	ldw	x,#_stored_mqtt_username
 636  a450 cdf5ef        	call	_strlen
 638  a453 1d0004        	subw	x,#4
 639  a456 72fb01        	addw	x,(OFST-1,sp)
 640  a459 1f01          	ldw	(OFST-1,sp),x
 642                     ; 1389     size = size + (strlen(stored_mqtt_password) - 4);
 644  a45b ae4040        	ldw	x,#_stored_mqtt_password
 645  a45e cdf5ef        	call	_strlen
 647  a461 1d0004        	subw	x,#4
 648  a464 72fb01        	addw	x,(OFST-1,sp)
 650                     ; 1396     size = size - 15;
 652  a467 1c06c9        	addw	x,#1737
 654                     ; 1410     size = size + (3 * page_string03_len_less4);
 657                     ; 1416     size = size + page_string03_len_less4;
 660                     ; 1439     size = size + (12 * (page_string00_len_less4));
 663                     ; 1448     size = size + (4 * (page_string00_len_less4));
 666                     ; 1458     size = size + (6 * (page_string01_len_less4));
 669                     ; 1467     size = size + (3 * (page_string02_len_less4));
 672                     ; 1482     size = size + page_string02_len_less4;
 676  a46a 2010          	jra	L121
 677  a46c               L321:
 678                     ; 1556   else if (current_webpage == WEBPAGE_STATS) {
 680  a46c a105          	cp	a,#5
 681  a46e 2605          	jrne	L721
 682                     ; 1557     size = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
 684                     ; 1564     size = size + 18;
 686                     ; 1573     size = size + (2 * page_string03_len_less4);
 688  a470 ae01a6        	ldw	x,#422
 691  a473 2007          	jra	L121
 692  a475               L721:
 693                     ; 1581   else if (current_webpage == WEBPAGE_RSTATE) {
 695  a475 a106          	cp	a,#6
 696  a477 2603          	jrne	L121
 697                     ; 1582     size = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
 699                     ; 1587     size = size + 12;
 701  a479 ae0093        	ldw	x,#147
 703  a47c               L121:
 704                     ; 1590   return size;
 708  a47c 5b02          	addw	sp,#2
 709  a47e 81            	ret	
 800                     ; 1594 void emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
 800                     ; 1595 {
 801                     .text:	section	.text,new
 802  a47f               _emb_itoa:
 804  a47f 5207          	subw	sp,#7
 805       00000007      OFST:	set	7
 808                     ; 1613   for (i=0; i < pad; i++) str[i] = '0';
 810  a481 0f07          	clr	(OFST+0,sp)
 813  a483 200a          	jra	L771
 814  a485               L371:
 817  a485 5f            	clrw	x
 818  a486 97            	ld	xl,a
 819  a487 72fb0e        	addw	x,(OFST+7,sp)
 820  a48a a630          	ld	a,#48
 821  a48c f7            	ld	(x),a
 824  a48d 0c07          	inc	(OFST+0,sp)
 826  a48f               L771:
 829  a48f 7b07          	ld	a,(OFST+0,sp)
 830  a491 1111          	cp	a,(OFST+10,sp)
 831  a493 25f0          	jrult	L371
 832                     ; 1614   str[pad] = '\0';
 834  a495 7b11          	ld	a,(OFST+10,sp)
 835  a497 5f            	clrw	x
 836  a498 97            	ld	xl,a
 837  a499 72fb0e        	addw	x,(OFST+7,sp)
 838  a49c 7f            	clr	(x)
 839                     ; 1615   if (num == 0) return;
 841  a49d 96            	ldw	x,sp
 842  a49e 1c000a        	addw	x,#OFST+3
 843  a4a1 cdf9cf        	call	c_lzmp
 845  a4a4 2603cca54e    	jreq	L02
 848                     ; 1618   i = 0;
 850  a4a9 0f07          	clr	(OFST+0,sp)
 853  a4ab 2060          	jra	L112
 854  a4ad               L502:
 855                     ; 1620     rem = (uint8_t)(num % base);
 857  a4ad 7b10          	ld	a,(OFST+9,sp)
 858  a4af b703          	ld	c_lreg+3,a
 859  a4b1 3f02          	clr	c_lreg+2
 860  a4b3 3f01          	clr	c_lreg+1
 861  a4b5 3f00          	clr	c_lreg
 862  a4b7 96            	ldw	x,sp
 863  a4b8 5c            	incw	x
 864  a4b9 cdf9e2        	call	c_rtol
 867  a4bc 96            	ldw	x,sp
 868  a4bd 1c000a        	addw	x,#OFST+3
 869  a4c0 cdf87c        	call	c_ltor
 871  a4c3 96            	ldw	x,sp
 872  a4c4 5c            	incw	x
 873  a4c5 cdf9b5        	call	c_lumd
 875  a4c8 b603          	ld	a,c_lreg+3
 876  a4ca 6b06          	ld	(OFST-1,sp),a
 878                     ; 1621     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
 880  a4cc a10a          	cp	a,#10
 881  a4ce 7b07          	ld	a,(OFST+0,sp)
 882  a4d0 250d          	jrult	L512
 885  a4d2 0c07          	inc	(OFST+0,sp)
 887  a4d4 5f            	clrw	x
 888  a4d5 97            	ld	xl,a
 889  a4d6 72fb0e        	addw	x,(OFST+7,sp)
 890  a4d9 7b06          	ld	a,(OFST-1,sp)
 891  a4db ab57          	add	a,#87
 893  a4dd 200b          	jra	L712
 894  a4df               L512:
 895                     ; 1622     else str[i++] = (uint8_t)(rem + '0');
 897  a4df 0c07          	inc	(OFST+0,sp)
 899  a4e1 5f            	clrw	x
 900  a4e2 97            	ld	xl,a
 901  a4e3 72fb0e        	addw	x,(OFST+7,sp)
 902  a4e6 7b06          	ld	a,(OFST-1,sp)
 903  a4e8 ab30          	add	a,#48
 904  a4ea               L712:
 905  a4ea f7            	ld	(x),a
 906                     ; 1623     num = num/base;
 908  a4eb 7b10          	ld	a,(OFST+9,sp)
 909  a4ed b703          	ld	c_lreg+3,a
 910  a4ef 3f02          	clr	c_lreg+2
 911  a4f1 3f01          	clr	c_lreg+1
 912  a4f3 3f00          	clr	c_lreg
 913  a4f5 96            	ldw	x,sp
 914  a4f6 5c            	incw	x
 915  a4f7 cdf9e2        	call	c_rtol
 918  a4fa 96            	ldw	x,sp
 919  a4fb 1c000a        	addw	x,#OFST+3
 920  a4fe cdf87c        	call	c_ltor
 922  a501 96            	ldw	x,sp
 923  a502 5c            	incw	x
 924  a503 cdf88e        	call	c_ludv
 926  a506 96            	ldw	x,sp
 927  a507 1c000a        	addw	x,#OFST+3
 928  a50a cdf9e2        	call	c_rtol
 930  a50d               L112:
 931                     ; 1619   while (num != 0) {
 933  a50d 96            	ldw	x,sp
 934  a50e 1c000a        	addw	x,#OFST+3
 935  a511 cdf9cf        	call	c_lzmp
 937  a514 2697          	jrne	L502
 938                     ; 1632     start = 0;
 940  a516 0f06          	clr	(OFST-1,sp)
 942                     ; 1633     end = (uint8_t)(pad - 1);
 944  a518 7b11          	ld	a,(OFST+10,sp)
 945  a51a 4a            	dec	a
 946  a51b 6b07          	ld	(OFST+0,sp),a
 949  a51d 2029          	jra	L522
 950  a51f               L122:
 951                     ; 1636       temp = str[start];
 953  a51f 5f            	clrw	x
 954  a520 97            	ld	xl,a
 955  a521 72fb0e        	addw	x,(OFST+7,sp)
 956  a524 f6            	ld	a,(x)
 957  a525 6b05          	ld	(OFST-2,sp),a
 959                     ; 1637       str[start] = str[end];
 961  a527 5f            	clrw	x
 962  a528 7b06          	ld	a,(OFST-1,sp)
 963  a52a 97            	ld	xl,a
 964  a52b 72fb0e        	addw	x,(OFST+7,sp)
 965  a52e 7b07          	ld	a,(OFST+0,sp)
 966  a530 905f          	clrw	y
 967  a532 9097          	ld	yl,a
 968  a534 72f90e        	addw	y,(OFST+7,sp)
 969  a537 90f6          	ld	a,(y)
 970  a539 f7            	ld	(x),a
 971                     ; 1638       str[end] = temp;
 973  a53a 5f            	clrw	x
 974  a53b 7b07          	ld	a,(OFST+0,sp)
 975  a53d 97            	ld	xl,a
 976  a53e 72fb0e        	addw	x,(OFST+7,sp)
 977  a541 7b05          	ld	a,(OFST-2,sp)
 978  a543 f7            	ld	(x),a
 979                     ; 1639       start++;
 981  a544 0c06          	inc	(OFST-1,sp)
 983                     ; 1640       end--;
 985  a546 0a07          	dec	(OFST+0,sp)
 987  a548               L522:
 988                     ; 1635     while (start < end) {
 988                     ; 1636       temp = str[start];
 988                     ; 1637       str[start] = str[end];
 988                     ; 1638       str[end] = temp;
 988                     ; 1639       start++;
 988                     ; 1640       end--;
 990  a548 7b06          	ld	a,(OFST-1,sp)
 991  a54a 1107          	cp	a,(OFST+0,sp)
 992  a54c 25d1          	jrult	L122
 993                     ; 1643 }
 994  a54e               L02:
 997  a54e 5b07          	addw	sp,#7
 998  a550 81            	ret	
1058                     ; 1646 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1058                     ; 1647 {
1059                     .text:	section	.text,new
1060  a551               L3_CopyStringP:
1062  a551 89            	pushw	x
1063  a552 5203          	subw	sp,#3
1064       00000003      OFST:	set	3
1067                     ; 1652   nBytes = 0;
1069  a554 5f            	clrw	x
1071  a555 2014          	jra	L362
1072  a557               L752:
1073                     ; 1654     **ppBuffer = Character;
1075  a557 1e04          	ldw	x,(OFST+1,sp)
1076  a559 fe            	ldw	x,(x)
1077  a55a f7            	ld	(x),a
1078                     ; 1655     *ppBuffer = *ppBuffer + 1;
1080  a55b 1e04          	ldw	x,(OFST+1,sp)
1081  a55d 9093          	ldw	y,x
1082  a55f fe            	ldw	x,(x)
1083  a560 5c            	incw	x
1084  a561 90ff          	ldw	(y),x
1085                     ; 1656     pString = pString + 1;
1087  a563 1e08          	ldw	x,(OFST+5,sp)
1088  a565 5c            	incw	x
1089  a566 1f08          	ldw	(OFST+5,sp),x
1090                     ; 1657     nBytes++;
1092  a568 1e01          	ldw	x,(OFST-2,sp)
1093  a56a 5c            	incw	x
1094  a56b               L362:
1095  a56b 1f01          	ldw	(OFST-2,sp),x
1097                     ; 1653   while ((Character = pString[0]) != '\0') {
1097                     ; 1654     **ppBuffer = Character;
1097                     ; 1655     *ppBuffer = *ppBuffer + 1;
1097                     ; 1656     pString = pString + 1;
1097                     ; 1657     nBytes++;
1099  a56d 1e08          	ldw	x,(OFST+5,sp)
1100  a56f f6            	ld	a,(x)
1101  a570 6b03          	ld	(OFST+0,sp),a
1103  a572 26e3          	jrne	L752
1104                     ; 1659   return nBytes;
1106  a574 1e01          	ldw	x,(OFST-2,sp)
1109  a576 5b05          	addw	sp,#5
1110  a578 81            	ret	
1169                     ; 1663 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint16_t nDataLen)
1169                     ; 1664 {
1170                     .text:	section	.text,new
1171  a579               L5_CopyHttpHeader:
1173  a579 89            	pushw	x
1174  a57a 5203          	subw	sp,#3
1175       00000003      OFST:	set	3
1178                     ; 1668   nBytes = 0;
1180  a57c 5f            	clrw	x
1181  a57d 1f02          	ldw	(OFST-1,sp),x
1183                     ; 1670   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1185  a57f ae9e33        	ldw	x,#L313
1186  a582 89            	pushw	x
1187  a583 96            	ldw	x,sp
1188  a584 1c0006        	addw	x,#OFST+3
1189  a587 cda551        	call	L3_CopyStringP
1191  a58a 5b02          	addw	sp,#2
1192  a58c 72fb02        	addw	x,(OFST-1,sp)
1193  a58f 1f02          	ldw	(OFST-1,sp),x
1195                     ; 1671   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1197  a591 ae9e30        	ldw	x,#L513
1198  a594 89            	pushw	x
1199  a595 96            	ldw	x,sp
1200  a596 1c0006        	addw	x,#OFST+3
1201  a599 cda551        	call	L3_CopyStringP
1203  a59c 5b02          	addw	sp,#2
1204  a59e 72fb02        	addw	x,(OFST-1,sp)
1205  a5a1 1f02          	ldw	(OFST-1,sp),x
1207                     ; 1673   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1209  a5a3 ae9e20        	ldw	x,#L713
1210  a5a6 89            	pushw	x
1211  a5a7 96            	ldw	x,sp
1212  a5a8 1c0006        	addw	x,#OFST+3
1213  a5ab cda551        	call	L3_CopyStringP
1215  a5ae 5b02          	addw	sp,#2
1216  a5b0 72fb02        	addw	x,(OFST-1,sp)
1217  a5b3 1f02          	ldw	(OFST-1,sp),x
1219                     ; 1677   emb_itoa(nDataLen, OctetArray, 10, 5);
1221  a5b5 4b05          	push	#5
1222  a5b7 4b0a          	push	#10
1223  a5b9 ae005c        	ldw	x,#_OctetArray
1224  a5bc 89            	pushw	x
1225  a5bd 1e0c          	ldw	x,(OFST+9,sp)
1226  a5bf cdfa43        	call	c_uitolx
1228  a5c2 be02          	ldw	x,c_lreg+2
1229  a5c4 89            	pushw	x
1230  a5c5 be00          	ldw	x,c_lreg
1231  a5c7 89            	pushw	x
1232  a5c8 cda47f        	call	_emb_itoa
1234  a5cb 5b08          	addw	sp,#8
1235                     ; 1678   for (i=0; i<5; i++) {
1237  a5cd 4f            	clr	a
1238  a5ce 6b01          	ld	(OFST-2,sp),a
1240  a5d0               L123:
1241                     ; 1679     *pBuffer = (uint8_t)OctetArray[i];
1243  a5d0 5f            	clrw	x
1244  a5d1 97            	ld	xl,a
1245  a5d2 d6005c        	ld	a,(_OctetArray,x)
1246  a5d5 1e04          	ldw	x,(OFST+1,sp)
1247  a5d7 f7            	ld	(x),a
1248                     ; 1680     pBuffer = pBuffer + 1;
1250  a5d8 5c            	incw	x
1251  a5d9 1f04          	ldw	(OFST+1,sp),x
1252                     ; 1678   for (i=0; i<5; i++) {
1254  a5db 0c01          	inc	(OFST-2,sp)
1258  a5dd 7b01          	ld	a,(OFST-2,sp)
1259  a5df a105          	cp	a,#5
1260  a5e1 25ed          	jrult	L123
1261                     ; 1682   nBytes += 5;
1263  a5e3 1e02          	ldw	x,(OFST-1,sp)
1264  a5e5 1c0005        	addw	x,#5
1265  a5e8 1f02          	ldw	(OFST-1,sp),x
1267                     ; 1684   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1269  a5ea ae9e30        	ldw	x,#L513
1270  a5ed 89            	pushw	x
1271  a5ee 96            	ldw	x,sp
1272  a5ef 1c0006        	addw	x,#OFST+3
1273  a5f2 cda551        	call	L3_CopyStringP
1275  a5f5 5b02          	addw	sp,#2
1276  a5f7 72fb02        	addw	x,(OFST-1,sp)
1277  a5fa 1f02          	ldw	(OFST-1,sp),x
1279                     ; 1687   nBytes += CopyStringP(&pBuffer, (const char *)("Cache-Control: no-cache, no-store\r\n"));
1281  a5fc ae9dfc        	ldw	x,#L723
1282  a5ff 89            	pushw	x
1283  a600 96            	ldw	x,sp
1284  a601 1c0006        	addw	x,#OFST+3
1285  a604 cda551        	call	L3_CopyStringP
1287  a607 5b02          	addw	sp,#2
1288  a609 72fb02        	addw	x,(OFST-1,sp)
1289  a60c 1f02          	ldw	(OFST-1,sp),x
1291                     ; 1689   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type: text/html; charset=utf-8\r\n"));
1293  a60e ae9dd3        	ldw	x,#L133
1294  a611 89            	pushw	x
1295  a612 96            	ldw	x,sp
1296  a613 1c0006        	addw	x,#OFST+3
1297  a616 cda551        	call	L3_CopyStringP
1299  a619 5b02          	addw	sp,#2
1300  a61b 72fb02        	addw	x,(OFST-1,sp)
1301  a61e 1f02          	ldw	(OFST-1,sp),x
1303                     ; 1691   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
1305  a620 ae9dc0        	ldw	x,#L333
1306  a623 89            	pushw	x
1307  a624 96            	ldw	x,sp
1308  a625 1c0006        	addw	x,#OFST+3
1309  a628 cda551        	call	L3_CopyStringP
1311  a62b 5b02          	addw	sp,#2
1312  a62d 72fb02        	addw	x,(OFST-1,sp)
1313  a630 1f02          	ldw	(OFST-1,sp),x
1315                     ; 1692   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1317  a632 ae9e30        	ldw	x,#L513
1318  a635 89            	pushw	x
1319  a636 96            	ldw	x,sp
1320  a637 1c0006        	addw	x,#OFST+3
1321  a63a cda551        	call	L3_CopyStringP
1323  a63d 5b02          	addw	sp,#2
1324  a63f 72fb02        	addw	x,(OFST-1,sp)
1326                     ; 1694   return nBytes;
1330  a642 5b05          	addw	sp,#5
1331  a644 81            	ret	
1487                     	switch	.const
1488  9d40               L431:
1489  9d40 a7f2          	dc.w	L533
1490  9d42 a800          	dc.w	L733
1491  9d44 a80e          	dc.w	L143
1492  9d46 a81c          	dc.w	L343
1493  9d48 a82a          	dc.w	L543
1494  9d4a a838          	dc.w	L743
1495  9d4c a846          	dc.w	L153
1496  9d4e a853          	dc.w	L353
1497  9d50 a860          	dc.w	L553
1498  9d52 a86d          	dc.w	L753
1499  9d54 a87a          	dc.w	L163
1500  9d56 a887          	dc.w	L363
1501  9d58 a894          	dc.w	L563
1502  9d5a a8a1          	dc.w	L763
1503  9d5c a8ae          	dc.w	L173
1504  9d5e a8bb          	dc.w	L373
1505                     ; 1698 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
1505                     ; 1699 {
1506                     .text:	section	.text,new
1507  a645               L7_CopyHttpData:
1509  a645 89            	pushw	x
1510  a646 5208          	subw	sp,#8
1511       00000008      OFST:	set	8
1514                     ; 1718   nBytes = 0;
1516  a648 5f            	clrw	x
1517  a649 1f05          	ldw	(OFST-3,sp),x
1519                     ; 1719   nParsedNum = 0;
1521  a64b 0f07          	clr	(OFST-1,sp)
1523                     ; 1720   nParsedMode = 0;
1525  a64d 0f04          	clr	(OFST-4,sp)
1527                     ; 1775   nMaxBytes = UIP_TCP_MSS - 25;
1529  a64f ae019f        	ldw	x,#415
1530  a652 1f11          	ldw	(OFST+9,sp),x
1532  a654 ccac10        	jra	L315
1533  a657               L115:
1534                     ; 1809     if (*pDataLeft > 0) {
1536  a657 1e0f          	ldw	x,(OFST+7,sp)
1537  a659 e601          	ld	a,(1,x)
1538  a65b fa            	or	a,(x)
1539  a65c 2603ccac19    	jreq	L515
1540                     ; 1816       if (insertion_flag[0] != 0) {
1542  a661 c60017        	ld	a,_insertion_flag
1543  a664 2711          	jreq	L125
1544                     ; 1825         nParsedMode = insertion_flag[1];
1546  a666 c60018        	ld	a,_insertion_flag+1
1547  a669 6b04          	ld	(OFST-4,sp),a
1549                     ; 1826         nParsedNum = insertion_flag[2];
1551  a66b c60019        	ld	a,_insertion_flag+2
1552  a66e 6b07          	ld	(OFST-1,sp),a
1554                     ; 1827 	nByte = '0'; // Need to set nByte to something other than '%' so we
1556  a670 a630          	ld	a,#48
1557  a672 6b02          	ld	(OFST-6,sp),a
1560  a674 cca736        	jra	L325
1561  a677               L125:
1562                     ; 1840         memcpy(&nByte, *ppData, 1);
1564  a677 96            	ldw	x,sp
1565  a678 1c0002        	addw	x,#OFST-6
1566  a67b bf04          	ldw	c_x,x
1567  a67d 160d          	ldw	y,(OFST+5,sp)
1568  a67f 90fe          	ldw	y,(y)
1569  a681 90bf07        	ldw	c_y,y
1570  a684 ae0001        	ldw	x,#1
1571  a687               L25:
1572  a687 5a            	decw	x
1573  a688 92d607        	ld	a,([c_y.w],x)
1574  a68b 92d704        	ld	([c_x.w],x),a
1575  a68e 5d            	tnzw	x
1576  a68f 26f6          	jrne	L25
1577                     ; 1883         if (nByte == '%') {
1579  a691 7b02          	ld	a,(OFST-6,sp)
1580  a693 a125          	cp	a,#37
1581  a695 26dd          	jrne	L325
1582                     ; 1884           *ppData = *ppData + 1;
1584  a697 1e0d          	ldw	x,(OFST+5,sp)
1585  a699 9093          	ldw	y,x
1586  a69b fe            	ldw	x,(x)
1587  a69c 5c            	incw	x
1588  a69d 90ff          	ldw	(y),x
1589                     ; 1885           *pDataLeft = *pDataLeft - 1;
1591  a69f 1e0f          	ldw	x,(OFST+7,sp)
1592  a6a1 9093          	ldw	y,x
1593  a6a3 fe            	ldw	x,(x)
1594  a6a4 5a            	decw	x
1595  a6a5 90ff          	ldw	(y),x
1596                     ; 1890           memcpy(&nParsedMode, *ppData, 1);
1598  a6a7 96            	ldw	x,sp
1599  a6a8 1c0004        	addw	x,#OFST-4
1600  a6ab bf04          	ldw	c_x,x
1601  a6ad 160d          	ldw	y,(OFST+5,sp)
1602  a6af 90fe          	ldw	y,(y)
1603  a6b1 90bf07        	ldw	c_y,y
1604  a6b4 ae0001        	ldw	x,#1
1605  a6b7               L45:
1606  a6b7 5a            	decw	x
1607  a6b8 92d607        	ld	a,([c_y.w],x)
1608  a6bb 92d704        	ld	([c_x.w],x),a
1609  a6be 5d            	tnzw	x
1610  a6bf 26f6          	jrne	L45
1611                     ; 1891           *ppData = *ppData + 1;
1613  a6c1 1e0d          	ldw	x,(OFST+5,sp)
1614  a6c3 9093          	ldw	y,x
1615  a6c5 fe            	ldw	x,(x)
1616  a6c6 5c            	incw	x
1617  a6c7 90ff          	ldw	(y),x
1618                     ; 1892           *pDataLeft = *pDataLeft - 1;
1620  a6c9 1e0f          	ldw	x,(OFST+7,sp)
1621  a6cb 9093          	ldw	y,x
1622  a6cd fe            	ldw	x,(x)
1623  a6ce 5a            	decw	x
1624  a6cf 90ff          	ldw	(y),x
1625                     ; 1897           memcpy(&temp, *ppData, 1);
1627  a6d1 96            	ldw	x,sp
1628  a6d2 5c            	incw	x
1629  a6d3 bf04          	ldw	c_x,x
1630  a6d5 160d          	ldw	y,(OFST+5,sp)
1631  a6d7 90fe          	ldw	y,(y)
1632  a6d9 90bf07        	ldw	c_y,y
1633  a6dc ae0001        	ldw	x,#1
1634  a6df               L65:
1635  a6df 5a            	decw	x
1636  a6e0 92d607        	ld	a,([c_y.w],x)
1637  a6e3 92d704        	ld	([c_x.w],x),a
1638  a6e6 5d            	tnzw	x
1639  a6e7 26f6          	jrne	L65
1640                     ; 1898           nParsedNum = (uint8_t)((temp - '0') * 10);
1642  a6e9 7b01          	ld	a,(OFST-7,sp)
1643  a6eb 97            	ld	xl,a
1644  a6ec a60a          	ld	a,#10
1645  a6ee 42            	mul	x,a
1646  a6ef 9f            	ld	a,xl
1647  a6f0 a0e0          	sub	a,#224
1648  a6f2 6b07          	ld	(OFST-1,sp),a
1650                     ; 1899           *ppData = *ppData + 1;
1652  a6f4 1e0d          	ldw	x,(OFST+5,sp)
1653  a6f6 9093          	ldw	y,x
1654  a6f8 fe            	ldw	x,(x)
1655  a6f9 5c            	incw	x
1656  a6fa 90ff          	ldw	(y),x
1657                     ; 1900           *pDataLeft = *pDataLeft - 1;
1659  a6fc 1e0f          	ldw	x,(OFST+7,sp)
1660  a6fe 9093          	ldw	y,x
1661  a700 fe            	ldw	x,(x)
1662  a701 5a            	decw	x
1663  a702 90ff          	ldw	(y),x
1664                     ; 1905           memcpy(&temp, *ppData, 1);
1666  a704 96            	ldw	x,sp
1667  a705 5c            	incw	x
1668  a706 bf04          	ldw	c_x,x
1669  a708 160d          	ldw	y,(OFST+5,sp)
1670  a70a 90fe          	ldw	y,(y)
1671  a70c 90bf07        	ldw	c_y,y
1672  a70f ae0001        	ldw	x,#1
1673  a712               L06:
1674  a712 5a            	decw	x
1675  a713 92d607        	ld	a,([c_y.w],x)
1676  a716 92d704        	ld	([c_x.w],x),a
1677  a719 5d            	tnzw	x
1678  a71a 26f6          	jrne	L06
1679                     ; 1906           nParsedNum = (uint8_t)(nParsedNum + temp - '0');
1681  a71c 7b07          	ld	a,(OFST-1,sp)
1682  a71e 1b01          	add	a,(OFST-7,sp)
1683  a720 a030          	sub	a,#48
1684  a722 6b07          	ld	(OFST-1,sp),a
1686                     ; 1907           *ppData = *ppData + 1;
1688  a724 1e0d          	ldw	x,(OFST+5,sp)
1689  a726 9093          	ldw	y,x
1690  a728 fe            	ldw	x,(x)
1691  a729 5c            	incw	x
1692  a72a 90ff          	ldw	(y),x
1693                     ; 1908           *pDataLeft = *pDataLeft - 1;
1695  a72c 1e0f          	ldw	x,(OFST+7,sp)
1696  a72e 9093          	ldw	y,x
1697  a730 fe            	ldw	x,(x)
1698  a731 5a            	decw	x
1699  a732 90ff          	ldw	(y),x
1700  a734 7b02          	ld	a,(OFST-6,sp)
1701  a736               L325:
1702                     ; 1912       if ((nByte == '%') || (insertion_flag[0] != 0)) {
1704  a736 a125          	cp	a,#37
1705  a738 2709          	jreq	L135
1707  a73a 725d0017      	tnz	_insertion_flag
1708  a73e 2603ccabf3    	jreq	L725
1709  a743               L135:
1710                     ; 1922         if (nParsedMode == 'i') {
1712  a743 7b04          	ld	a,(OFST-4,sp)
1713  a745 a169          	cp	a,#105
1714  a747 262b          	jrne	L335
1715                     ; 1936           if (nParsedNum > 7) {
1717  a749 7b07          	ld	a,(OFST-1,sp)
1718  a74b a108          	cp	a,#8
1719  a74d 2520          	jrult	L535
1720                     ; 1938 	    i = GpioGetPin(nParsedNum);
1722  a74f cdbb1d        	call	_GpioGetPin
1724  a752 6b08          	ld	(OFST+0,sp),a
1726                     ; 1939 	    if (invert_input == 0x00) *pBuffer = (uint8_t)(i + '0');
1728  a754 725d0161      	tnz	_invert_input
1729  a758 2607          	jrne	L735
1732  a75a               LC012:
1733  a75a ab30          	add	a,#48
1734  a75c 1e09          	ldw	x,(OFST+1,sp)
1736  a75e ccab29        	jra	L7101
1737  a761               L735:
1738                     ; 1941 	      if (i == 0) *pBuffer = (uint8_t)('1');
1740  a761 7b08          	ld	a,(OFST+0,sp)
1741  a763 2703ccab25    	jrne	L5101
1744  a768 1e09          	ldw	x,(OFST+1,sp)
1745  a76a a631          	ld	a,#49
1747  a76c ccab29        	jra	L7101
1748                     ; 1942 	      else *pBuffer = (uint8_t)('0');
1749                     ; 1944             pBuffer++;
1750                     ; 1945             nBytes++;
1752  a76f               L535:
1753                     ; 1949 	    *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
1755  a76f cdbb1d        	call	_GpioGetPin
1757                     ; 1950             pBuffer++;
1758                     ; 1951             nBytes++;
1759  a772 20e6          	jp	LC012
1760  a774               L335:
1761                     ; 1969         else if ((nParsedMode == 'o' && ((uint8_t)(GpioGetPin(nParsedNum) == 1)))
1761                     ; 1970 	      || (nParsedMode == 'p' && ((uint8_t)(GpioGetPin(nParsedNum) == 0)))) { 
1763  a774 a16f          	cp	a,#111
1764  a776 260a          	jrne	L755
1766  a778 7b07          	ld	a,(OFST-1,sp)
1767  a77a cdbb1d        	call	_GpioGetPin
1769  a77d 4a            	dec	a
1770  a77e 270e          	jreq	L555
1771  a780 7b04          	ld	a,(OFST-4,sp)
1772  a782               L755:
1774  a782 a170          	cp	a,#112
1775  a784 2626          	jrne	L355
1777  a786 7b07          	ld	a,(OFST-1,sp)
1778  a788 cdbb1d        	call	_GpioGetPin
1780  a78b 4d            	tnz	a
1781  a78c 261e          	jrne	L355
1782  a78e               L555:
1783                     ; 1975           for(i=0; i<7; i++) {
1785  a78e 4f            	clr	a
1786  a78f 6b08          	ld	(OFST+0,sp),a
1788  a791               L165:
1789                     ; 1976             *pBuffer = checked[i];
1791  a791 5f            	clrw	x
1792  a792 97            	ld	xl,a
1793  a793 d68080        	ld	a,(L11_checked,x)
1794  a796 1e09          	ldw	x,(OFST+1,sp)
1795  a798 f7            	ld	(x),a
1796                     ; 1977             pBuffer++;
1798  a799 5c            	incw	x
1799  a79a 1f09          	ldw	(OFST+1,sp),x
1800                     ; 1975           for(i=0; i<7; i++) {
1802  a79c 0c08          	inc	(OFST+0,sp)
1806  a79e 7b08          	ld	a,(OFST+0,sp)
1807  a7a0 a107          	cp	a,#7
1808  a7a2 25ed          	jrult	L165
1809                     ; 1979 	  nBytes += 7;
1811  a7a4 1e05          	ldw	x,(OFST-3,sp)
1812  a7a6 1c0007        	addw	x,#7
1814  a7a9 ccac0e        	jp	LC006
1815  a7ac               L355:
1816                     ; 1982         else if (nParsedMode == 'a') {
1818  a7ac 7b04          	ld	a,(OFST-4,sp)
1819  a7ae a161          	cp	a,#97
1820  a7b0 2629          	jrne	L175
1821                     ; 1984 	  for(i=0; i<19; i++) {
1823  a7b2 4f            	clr	a
1824  a7b3 6b08          	ld	(OFST+0,sp),a
1826  a7b5               L375:
1827                     ; 1985 	    if (stored_devicename[i] != '\0') {
1829  a7b5 5f            	clrw	x
1830  a7b6 97            	ld	xl,a
1831  a7b7 724d4000      	tnz	(_stored_devicename,x)
1832  a7bb 2603ccac10    	jreq	L315
1833                     ; 1986               *pBuffer = (uint8_t)(stored_devicename[i]);
1835  a7c0 5f            	clrw	x
1836  a7c1 97            	ld	xl,a
1837  a7c2 d64000        	ld	a,(_stored_devicename,x)
1838  a7c5 1e09          	ldw	x,(OFST+1,sp)
1839  a7c7 f7            	ld	(x),a
1840                     ; 1987               pBuffer++;
1842  a7c8 5c            	incw	x
1843  a7c9 1f09          	ldw	(OFST+1,sp),x
1844                     ; 1988               nBytes++;
1846  a7cb 1e05          	ldw	x,(OFST-3,sp)
1847  a7cd 5c            	incw	x
1848  a7ce 1f05          	ldw	(OFST-3,sp),x
1851                     ; 1984 	  for(i=0; i<19; i++) {
1853  a7d0 0c08          	inc	(OFST+0,sp)
1857  a7d2 7b08          	ld	a,(OFST+0,sp)
1858  a7d4 a113          	cp	a,#19
1859  a7d6 25dd          	jrult	L375
1860  a7d8 ccac10        	jra	L315
1861  a7db               L175:
1862                     ; 1994         else if (nParsedMode == 'b') {
1864  a7db a162          	cp	a,#98
1865  a7dd 2703cca8f7    	jrne	L706
1866                     ; 1999           switch (nParsedNum)
1868  a7e2 7b07          	ld	a,(OFST-1,sp)
1870                     ; 2020 	    default: break;
1871  a7e4 a110          	cp	a,#16
1872  a7e6 2503cca8d9    	jruge	L316
1873  a7eb 5f            	clrw	x
1874  a7ec 97            	ld	xl,a
1875  a7ed 58            	sllw	x
1876  a7ee de9d40        	ldw	x,(L431,x)
1877  a7f1 fc            	jp	(x)
1878  a7f2               L533:
1879                     ; 2002 	    case 0:  emb_itoa(stored_hostaddr[3], OctetArray, 10, 3); break;
1881  a7f2 4b03          	push	#3
1882  a7f4 4b0a          	push	#10
1883  a7f6 ae005c        	ldw	x,#_OctetArray
1884  a7f9 89            	pushw	x
1885  a7fa c6402a        	ld	a,_stored_hostaddr+3
1889  a7fd cca8c6        	jp	LC001
1890  a800               L733:
1891                     ; 2003 	    case 1:  emb_itoa(stored_hostaddr[2], OctetArray, 10, 3); break;
1893  a800 4b03          	push	#3
1894  a802 4b0a          	push	#10
1895  a804 ae005c        	ldw	x,#_OctetArray
1896  a807 89            	pushw	x
1897  a808 c64029        	ld	a,_stored_hostaddr+2
1901  a80b cca8c6        	jp	LC001
1902  a80e               L143:
1903                     ; 2004 	    case 2:  emb_itoa(stored_hostaddr[1], OctetArray, 10, 3); break;
1905  a80e 4b03          	push	#3
1906  a810 4b0a          	push	#10
1907  a812 ae005c        	ldw	x,#_OctetArray
1908  a815 89            	pushw	x
1909  a816 c64028        	ld	a,_stored_hostaddr+1
1913  a819 cca8c6        	jp	LC001
1914  a81c               L343:
1915                     ; 2005 	    case 3:  emb_itoa(stored_hostaddr[0], OctetArray, 10, 3); break;
1917  a81c 4b03          	push	#3
1918  a81e 4b0a          	push	#10
1919  a820 ae005c        	ldw	x,#_OctetArray
1920  a823 89            	pushw	x
1921  a824 c64027        	ld	a,_stored_hostaddr
1925  a827 cca8c6        	jp	LC001
1926  a82a               L543:
1927                     ; 2006 	    case 4:  emb_itoa(stored_draddr[3],   OctetArray, 10, 3); break;
1929  a82a 4b03          	push	#3
1930  a82c 4b0a          	push	#10
1931  a82e ae005c        	ldw	x,#_OctetArray
1932  a831 89            	pushw	x
1933  a832 c64026        	ld	a,_stored_draddr+3
1937  a835 cca8c6        	jp	LC001
1938  a838               L743:
1939                     ; 2007 	    case 5:  emb_itoa(stored_draddr[2],   OctetArray, 10, 3); break;
1941  a838 4b03          	push	#3
1942  a83a 4b0a          	push	#10
1943  a83c ae005c        	ldw	x,#_OctetArray
1944  a83f 89            	pushw	x
1945  a840 c64025        	ld	a,_stored_draddr+2
1949  a843 cca8c6        	jp	LC001
1950  a846               L153:
1951                     ; 2008 	    case 6:  emb_itoa(stored_draddr[1],   OctetArray, 10, 3); break;
1953  a846 4b03          	push	#3
1954  a848 4b0a          	push	#10
1955  a84a ae005c        	ldw	x,#_OctetArray
1956  a84d 89            	pushw	x
1957  a84e c64024        	ld	a,_stored_draddr+1
1961  a851 2073          	jp	LC001
1962  a853               L353:
1963                     ; 2009 	    case 7:  emb_itoa(stored_draddr[0],   OctetArray, 10, 3); break;
1965  a853 4b03          	push	#3
1966  a855 4b0a          	push	#10
1967  a857 ae005c        	ldw	x,#_OctetArray
1968  a85a 89            	pushw	x
1969  a85b c64023        	ld	a,_stored_draddr
1973  a85e 2066          	jp	LC001
1974  a860               L553:
1975                     ; 2010 	    case 8:  emb_itoa(stored_netmask[3],  OctetArray, 10, 3); break;
1977  a860 4b03          	push	#3
1978  a862 4b0a          	push	#10
1979  a864 ae005c        	ldw	x,#_OctetArray
1980  a867 89            	pushw	x
1981  a868 c64022        	ld	a,_stored_netmask+3
1985  a86b 2059          	jp	LC001
1986  a86d               L753:
1987                     ; 2011 	    case 9:  emb_itoa(stored_netmask[2],  OctetArray, 10, 3); break;
1989  a86d 4b03          	push	#3
1990  a86f 4b0a          	push	#10
1991  a871 ae005c        	ldw	x,#_OctetArray
1992  a874 89            	pushw	x
1993  a875 c64021        	ld	a,_stored_netmask+2
1997  a878 204c          	jp	LC001
1998  a87a               L163:
1999                     ; 2012 	    case 10: emb_itoa(stored_netmask[1],  OctetArray, 10, 3); break;
2001  a87a 4b03          	push	#3
2002  a87c 4b0a          	push	#10
2003  a87e ae005c        	ldw	x,#_OctetArray
2004  a881 89            	pushw	x
2005  a882 c64020        	ld	a,_stored_netmask+1
2009  a885 203f          	jp	LC001
2010  a887               L363:
2011                     ; 2013 	    case 11: emb_itoa(stored_netmask[0],  OctetArray, 10, 3); break;
2013  a887 4b03          	push	#3
2014  a889 4b0a          	push	#10
2015  a88b ae005c        	ldw	x,#_OctetArray
2016  a88e 89            	pushw	x
2017  a88f c6401f        	ld	a,_stored_netmask
2021  a892 2032          	jp	LC001
2022  a894               L563:
2023                     ; 2015 	    case 12: emb_itoa(stored_mqttserveraddr[3], OctetArray, 10, 3); break;
2025  a894 4b03          	push	#3
2026  a896 4b0a          	push	#10
2027  a898 ae005c        	ldw	x,#_OctetArray
2028  a89b 89            	pushw	x
2029  a89c c64034        	ld	a,_stored_mqttserveraddr+3
2033  a89f 2025          	jp	LC001
2034  a8a1               L763:
2035                     ; 2016 	    case 13: emb_itoa(stored_mqttserveraddr[2], OctetArray, 10, 3); break;
2037  a8a1 4b03          	push	#3
2038  a8a3 4b0a          	push	#10
2039  a8a5 ae005c        	ldw	x,#_OctetArray
2040  a8a8 89            	pushw	x
2041  a8a9 c64033        	ld	a,_stored_mqttserveraddr+2
2045  a8ac 2018          	jp	LC001
2046  a8ae               L173:
2047                     ; 2017 	    case 14: emb_itoa(stored_mqttserveraddr[1], OctetArray, 10, 3); break;
2049  a8ae 4b03          	push	#3
2050  a8b0 4b0a          	push	#10
2051  a8b2 ae005c        	ldw	x,#_OctetArray
2052  a8b5 89            	pushw	x
2053  a8b6 c64032        	ld	a,_stored_mqttserveraddr+1
2057  a8b9 200b          	jp	LC001
2058  a8bb               L373:
2059                     ; 2018 	    case 15: emb_itoa(stored_mqttserveraddr[0], OctetArray, 10, 3); break;
2061  a8bb 4b03          	push	#3
2062  a8bd 4b0a          	push	#10
2063  a8bf ae005c        	ldw	x,#_OctetArray
2064  a8c2 89            	pushw	x
2065  a8c3 c64031        	ld	a,_stored_mqttserveraddr
2067  a8c6               LC001:
2068  a8c6 b703          	ld	c_lreg+3,a
2069  a8c8 3f02          	clr	c_lreg+2
2070  a8ca 3f01          	clr	c_lreg+1
2071  a8cc 3f00          	clr	c_lreg
2072  a8ce be02          	ldw	x,c_lreg+2
2073  a8d0 89            	pushw	x
2074  a8d1 be00          	ldw	x,c_lreg
2075  a8d3 89            	pushw	x
2076  a8d4 cda47f        	call	_emb_itoa
2077  a8d7 5b08          	addw	sp,#8
2080                     ; 2020 	    default: break;
2082  a8d9               L316:
2083                     ; 2024 	  for(i=0; i<3; i++) {
2085  a8d9 4f            	clr	a
2086  a8da 6b08          	ld	(OFST+0,sp),a
2088  a8dc               L516:
2089                     ; 2025 	    *pBuffer = (uint8_t)OctetArray[i];
2091  a8dc 5f            	clrw	x
2092  a8dd 97            	ld	xl,a
2093  a8de d6005c        	ld	a,(_OctetArray,x)
2094  a8e1 1e09          	ldw	x,(OFST+1,sp)
2095  a8e3 f7            	ld	(x),a
2096                     ; 2026             pBuffer++;
2098  a8e4 5c            	incw	x
2099  a8e5 1f09          	ldw	(OFST+1,sp),x
2100                     ; 2024 	  for(i=0; i<3; i++) {
2102  a8e7 0c08          	inc	(OFST+0,sp)
2106  a8e9 7b08          	ld	a,(OFST+0,sp)
2107  a8eb a103          	cp	a,#3
2108  a8ed 25ed          	jrult	L516
2109                     ; 2028 	  nBytes += 3;
2111  a8ef 1e05          	ldw	x,(OFST-3,sp)
2112  a8f1 1c0003        	addw	x,#3
2114  a8f4 ccac0e        	jp	LC006
2115  a8f7               L706:
2116                     ; 2031         else if (nParsedMode == 'c') {
2118  a8f7 a163          	cp	a,#99
2119  a8f9 2648          	jrne	L526
2120                     ; 2040 	  if (nParsedNum == 0) emb_itoa(stored_port, OctetArray, 10, 5);
2122  a8fb 7b07          	ld	a,(OFST-1,sp)
2123  a8fd 260d          	jrne	L726
2126  a8ff 4b05          	push	#5
2127  a901 4b0a          	push	#10
2128  a903 ae005c        	ldw	x,#_OctetArray
2129  a906 89            	pushw	x
2130  a907 ce401d        	ldw	x,_stored_port
2134  a90a 200b          	jra	L136
2135  a90c               L726:
2136                     ; 2042 	  else emb_itoa(stored_mqttport, OctetArray, 10, 5);
2138  a90c 4b05          	push	#5
2139  a90e 4b0a          	push	#10
2140  a910 ae005c        	ldw	x,#_OctetArray
2141  a913 89            	pushw	x
2142  a914 ce402f        	ldw	x,_stored_mqttport
2145  a917               L136:
2146  a917 cdfa43        	call	c_uitolx
2147  a91a be02          	ldw	x,c_lreg+2
2148  a91c 89            	pushw	x
2149  a91d be00          	ldw	x,c_lreg
2150  a91f 89            	pushw	x
2151  a920 cda47f        	call	_emb_itoa
2152  a923 5b08          	addw	sp,#8
2153                     ; 2046 	  for(i=0; i<5; i++) {
2155  a925 4f            	clr	a
2156  a926 6b08          	ld	(OFST+0,sp),a
2158  a928               L336:
2159                     ; 2047             *pBuffer = (uint8_t)OctetArray[i];
2161  a928 5f            	clrw	x
2162  a929 97            	ld	xl,a
2163  a92a d6005c        	ld	a,(_OctetArray,x)
2164  a92d 1e09          	ldw	x,(OFST+1,sp)
2165  a92f f7            	ld	(x),a
2166                     ; 2048             pBuffer++;
2168  a930 5c            	incw	x
2169  a931 1f09          	ldw	(OFST+1,sp),x
2170                     ; 2046 	  for(i=0; i<5; i++) {
2172  a933 0c08          	inc	(OFST+0,sp)
2176  a935 7b08          	ld	a,(OFST+0,sp)
2177  a937 a105          	cp	a,#5
2178  a939 25ed          	jrult	L336
2179                     ; 2050 	  nBytes += 5;
2181  a93b 1e05          	ldw	x,(OFST-3,sp)
2182  a93d 1c0005        	addw	x,#5
2184  a940 ccac0e        	jp	LC006
2185  a943               L526:
2186                     ; 2053         else if (nParsedMode == 'd') {
2188  a943 a164          	cp	a,#100
2189  a945 266a          	jrne	L346
2190                     ; 2058 	  if (nParsedNum == 0) { OctetArray[0] = mac_string[0]; OctetArray[1] = mac_string[1]; }
2192  a947 7b07          	ld	a,(OFST-1,sp)
2193  a949 260a          	jrne	L546
2196  a94b 550108005c    	mov	_OctetArray,_mac_string
2199  a950 550109005d    	mov	_OctetArray+1,_mac_string+1
2200  a955               L546:
2201                     ; 2059 	  if (nParsedNum == 1) { OctetArray[0] = mac_string[2]; OctetArray[1] = mac_string[3]; }
2203  a955 a101          	cp	a,#1
2204  a957 260a          	jrne	L746
2207  a959 55010a005c    	mov	_OctetArray,_mac_string+2
2210  a95e 55010b005d    	mov	_OctetArray+1,_mac_string+3
2211  a963               L746:
2212                     ; 2060 	  if (nParsedNum == 2) { OctetArray[0] = mac_string[4]; OctetArray[1] = mac_string[5]; }
2214  a963 a102          	cp	a,#2
2215  a965 260a          	jrne	L156
2218  a967 55010c005c    	mov	_OctetArray,_mac_string+4
2221  a96c 55010d005d    	mov	_OctetArray+1,_mac_string+5
2222  a971               L156:
2223                     ; 2061 	  if (nParsedNum == 3) { OctetArray[0] = mac_string[6]; OctetArray[1] = mac_string[7]; }
2225  a971 a103          	cp	a,#3
2226  a973 260a          	jrne	L356
2229  a975 55010e005c    	mov	_OctetArray,_mac_string+6
2232  a97a 55010f005d    	mov	_OctetArray+1,_mac_string+7
2233  a97f               L356:
2234                     ; 2062 	  if (nParsedNum == 4) { OctetArray[0] = mac_string[8]; OctetArray[1] = mac_string[9]; }
2236  a97f a104          	cp	a,#4
2237  a981 260a          	jrne	L556
2240  a983 550110005c    	mov	_OctetArray,_mac_string+8
2243  a988 550111005d    	mov	_OctetArray+1,_mac_string+9
2244  a98d               L556:
2245                     ; 2063 	  if (nParsedNum == 5) { OctetArray[0] = mac_string[10]; OctetArray[1] = mac_string[11]; }
2247  a98d a105          	cp	a,#5
2248  a98f 260a          	jrne	L756
2251  a991 550112005c    	mov	_OctetArray,_mac_string+10
2254  a996 550113005d    	mov	_OctetArray+1,_mac_string+11
2255  a99b               L756:
2256                     ; 2065           *pBuffer = OctetArray[0];
2258  a99b 1e09          	ldw	x,(OFST+1,sp)
2259  a99d c6005c        	ld	a,_OctetArray
2260  a9a0 f7            	ld	(x),a
2261                     ; 2066           pBuffer++;
2263  a9a1 5c            	incw	x
2264  a9a2 1f09          	ldw	(OFST+1,sp),x
2265                     ; 2067           nBytes++;
2267  a9a4 1e05          	ldw	x,(OFST-3,sp)
2268  a9a6 5c            	incw	x
2269  a9a7 1f05          	ldw	(OFST-3,sp),x
2271                     ; 2069           *pBuffer = OctetArray[1];
2273  a9a9 c6005d        	ld	a,_OctetArray+1
2274  a9ac 1e09          	ldw	x,(OFST+1,sp)
2275                     ; 2070           pBuffer++;
2276                     ; 2071           nBytes++;
2278  a9ae ccab29        	jp	L7101
2279  a9b1               L346:
2280                     ; 2139         else if (nParsedMode == 'e') {
2282  a9b1 a165          	cp	a,#101
2283  a9b3 2663          	jrne	L366
2284                     ; 2140           switch (nParsedNum)
2286  a9b5 7b07          	ld	a,(OFST-1,sp)
2288                     ; 2146 	    case 28:  emb_itoa(TXERIF_counter, OctetArray, 10, 10); break;
2289  a9b7 a01a          	sub	a,#26
2290  a9b9 2708          	jreq	L773
2291  a9bb 4a            	dec	a
2292  a9bc 2716          	jreq	L104
2293  a9be 4a            	dec	a
2294  a9bf 2724          	jreq	L304
2295  a9c1 2037          	jra	L766
2296  a9c3               L773:
2297                     ; 2144 	    case 26:  emb_itoa(second_counter, OctetArray, 10, 10); break;
2299  a9c3 4b0a          	push	#10
2300  a9c5 4b0a          	push	#10
2301  a9c7 ae005c        	ldw	x,#_OctetArray
2302  a9ca 89            	pushw	x
2303  a9cb ce029a        	ldw	x,_second_counter+2
2304  a9ce 89            	pushw	x
2305  a9cf ce0298        	ldw	x,_second_counter
2309  a9d2 2020          	jp	LC002
2310  a9d4               L104:
2311                     ; 2145 	    case 27:  emb_itoa(RXERIF_counter, OctetArray, 10, 10); break;
2313  a9d4 4b0a          	push	#10
2314  a9d6 4b0a          	push	#10
2315  a9d8 ae005c        	ldw	x,#_OctetArray
2316  a9db 89            	pushw	x
2317  a9dc ce0069        	ldw	x,_RXERIF_counter+2
2318  a9df 89            	pushw	x
2319  a9e0 ce0067        	ldw	x,_RXERIF_counter
2323  a9e3 200f          	jp	LC002
2324  a9e5               L304:
2325                     ; 2146 	    case 28:  emb_itoa(TXERIF_counter, OctetArray, 10, 10); break;
2327  a9e5 4b0a          	push	#10
2328  a9e7 4b0a          	push	#10
2329  a9e9 ae005c        	ldw	x,#_OctetArray
2330  a9ec 89            	pushw	x
2331  a9ed ce006d        	ldw	x,_TXERIF_counter+2
2332  a9f0 89            	pushw	x
2333  a9f1 ce006b        	ldw	x,_TXERIF_counter
2335  a9f4               LC002:
2336  a9f4 89            	pushw	x
2337  a9f5 cda47f        	call	_emb_itoa
2338  a9f8 5b08          	addw	sp,#8
2341  a9fa               L766:
2342                     ; 2148 	  for (i=0; i<10; i++) {
2344  a9fa 4f            	clr	a
2345  a9fb 6b08          	ld	(OFST+0,sp),a
2347  a9fd               L176:
2348                     ; 2149             *pBuffer = OctetArray[i];
2350  a9fd 5f            	clrw	x
2351  a9fe 97            	ld	xl,a
2352  a9ff d6005c        	ld	a,(_OctetArray,x)
2353  aa02 1e09          	ldw	x,(OFST+1,sp)
2354  aa04 f7            	ld	(x),a
2355                     ; 2150             pBuffer++;
2357  aa05 5c            	incw	x
2358  aa06 1f09          	ldw	(OFST+1,sp),x
2359                     ; 2148 	  for (i=0; i<10; i++) {
2361  aa08 0c08          	inc	(OFST+0,sp)
2365  aa0a 7b08          	ld	a,(OFST+0,sp)
2366  aa0c a10a          	cp	a,#10
2367  aa0e 25ed          	jrult	L176
2368                     ; 2152 	  nBytes += 10;
2370  aa10 1e05          	ldw	x,(OFST-3,sp)
2371  aa12 1c000a        	addw	x,#10
2373  aa15 ccac0e        	jp	LC006
2374  aa18               L366:
2375                     ; 2156         else if (nParsedMode == 'f') {
2377  aa18 a166          	cp	a,#102
2378  aa1a 263d          	jrne	L107
2379                     ; 2171 	  for(i=0; i<16; i++) {
2381  aa1c 4f            	clr	a
2382  aa1d 6b08          	ld	(OFST+0,sp),a
2384  aa1f               L307:
2385                     ; 2172             if (i > 7) {
2387  aa1f a108          	cp	a,#8
2388  aa21 251b          	jrult	L117
2389                     ; 2174               j = GpioGetPin(i);
2391  aa23 cdbb1d        	call	_GpioGetPin
2393  aa26 6b03          	ld	(OFST-5,sp),a
2395                     ; 2175               if (invert_input == 0x00) *pBuffer = (uint8_t)(j + '0');
2397  aa28 725d0161      	tnz	_invert_input
2400  aa2c 2713          	jreq	LC010
2401                     ; 2177                 if (j == 0) *pBuffer = (uint8_t)('1'); 
2403  aa2e 7b03          	ld	a,(OFST-5,sp)
2404  aa30 2606          	jrne	L717
2407  aa32 1e09          	ldw	x,(OFST+1,sp)
2408  aa34 a631          	ld	a,#49
2410  aa36 200d          	jra	L327
2411  aa38               L717:
2412                     ; 2178                 else *pBuffer = (uint8_t)('0');
2414  aa38 1e09          	ldw	x,(OFST+1,sp)
2415  aa3a a630          	ld	a,#48
2416                     ; 2180               pBuffer++;
2418  aa3c 2007          	jra	L327
2419  aa3e               L117:
2420                     ; 2184               *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
2422  aa3e cdbb1d        	call	_GpioGetPin
2424  aa41               LC010:
2426  aa41 ab30          	add	a,#48
2427  aa43 1e09          	ldw	x,(OFST+1,sp)
2428                     ; 2185               pBuffer++;
2430  aa45               L327:
2431  aa45 f7            	ld	(x),a
2433  aa46 5c            	incw	x
2434  aa47 1f09          	ldw	(OFST+1,sp),x
2435                     ; 2171 	  for(i=0; i<16; i++) {
2437  aa49 0c08          	inc	(OFST+0,sp)
2441  aa4b 7b08          	ld	a,(OFST+0,sp)
2442  aa4d a110          	cp	a,#16
2443  aa4f 25ce          	jrult	L307
2444                     ; 2188 	  nBytes += 16;
2446  aa51 1e05          	ldw	x,(OFST-3,sp)
2447  aa53 1c0010        	addw	x,#16
2449  aa56 ccac0e        	jp	LC006
2450  aa59               L107:
2451                     ; 2207 else if (nParsedMode == 'g') {
2453  aa59 a167          	cp	a,#103
2454  aa5b 261e          	jrne	L727
2455                     ; 2220 	  for(i = 0; i < 6; i++) {
2457  aa5d 4f            	clr	a
2458  aa5e 6b08          	ld	(OFST+0,sp),a
2460  aa60               L137:
2461                     ; 2221             *pBuffer = stored_config_settings[i];
2463  aa60 5f            	clrw	x
2464  aa61 97            	ld	xl,a
2465  aa62 d6404c        	ld	a,(_stored_config_settings,x)
2466  aa65 1e09          	ldw	x,(OFST+1,sp)
2467  aa67 f7            	ld	(x),a
2468                     ; 2222             pBuffer++;
2470  aa68 5c            	incw	x
2471  aa69 1f09          	ldw	(OFST+1,sp),x
2472                     ; 2220 	  for(i = 0; i < 6; i++) {
2474  aa6b 0c08          	inc	(OFST+0,sp)
2478  aa6d 7b08          	ld	a,(OFST+0,sp)
2479  aa6f a106          	cp	a,#6
2480  aa71 25ed          	jrult	L137
2481                     ; 2224           nBytes += 6;
2483  aa73 1e05          	ldw	x,(OFST-3,sp)
2484  aa75 1c0006        	addw	x,#6
2486  aa78 ccac0e        	jp	LC006
2487  aa7b               L727:
2488                     ; 2228         else if (nParsedMode == 'l') {
2490  aa7b a16c          	cp	a,#108
2491  aa7d 2629          	jrne	L147
2492                     ; 2231           for(i=0; i<10; i++) {
2494  aa7f 4f            	clr	a
2495  aa80 6b08          	ld	(OFST+0,sp),a
2497  aa82               L347:
2498                     ; 2232 	    if (stored_mqtt_username[i] != '\0') {
2500  aa82 5f            	clrw	x
2501  aa83 97            	ld	xl,a
2502  aa84 724d4035      	tnz	(_stored_mqtt_username,x)
2503  aa88 2603ccac10    	jreq	L315
2504                     ; 2233               *pBuffer = (uint8_t)(stored_mqtt_username[i]);
2506  aa8d 5f            	clrw	x
2507  aa8e 97            	ld	xl,a
2508  aa8f d64035        	ld	a,(_stored_mqtt_username,x)
2509  aa92 1e09          	ldw	x,(OFST+1,sp)
2510  aa94 f7            	ld	(x),a
2511                     ; 2234               pBuffer++;
2513  aa95 5c            	incw	x
2514  aa96 1f09          	ldw	(OFST+1,sp),x
2515                     ; 2235               nBytes++;
2517  aa98 1e05          	ldw	x,(OFST-3,sp)
2518  aa9a 5c            	incw	x
2519  aa9b 1f05          	ldw	(OFST-3,sp),x
2522                     ; 2231           for(i=0; i<10; i++) {
2524  aa9d 0c08          	inc	(OFST+0,sp)
2528  aa9f 7b08          	ld	a,(OFST+0,sp)
2529  aaa1 a10a          	cp	a,#10
2530  aaa3 25dd          	jrult	L347
2531  aaa5 ccac10        	jra	L315
2532  aaa8               L147:
2533                     ; 2241         else if (nParsedMode == 'm') {
2535  aaa8 a16d          	cp	a,#109
2536  aaaa 2626          	jrne	L757
2537                     ; 2244           for(i=0; i<10; i++) {
2539  aaac 4f            	clr	a
2540  aaad 6b08          	ld	(OFST+0,sp),a
2542  aaaf               L167:
2543                     ; 2245 	    if (stored_mqtt_password[i] != '\0') {
2545  aaaf 5f            	clrw	x
2546  aab0 97            	ld	xl,a
2547  aab1 724d4040      	tnz	(_stored_mqtt_password,x)
2548  aab5 27ee          	jreq	L315
2549                     ; 2246               *pBuffer = (uint8_t)(stored_mqtt_password[i]);
2551  aab7 5f            	clrw	x
2552  aab8 97            	ld	xl,a
2553  aab9 d64040        	ld	a,(_stored_mqtt_password,x)
2554  aabc 1e09          	ldw	x,(OFST+1,sp)
2555  aabe f7            	ld	(x),a
2556                     ; 2247               pBuffer++;
2558  aabf 5c            	incw	x
2559  aac0 1f09          	ldw	(OFST+1,sp),x
2560                     ; 2248               nBytes++;
2562  aac2 1e05          	ldw	x,(OFST-3,sp)
2563  aac4 5c            	incw	x
2564  aac5 1f05          	ldw	(OFST-3,sp),x
2567                     ; 2244           for(i=0; i<10; i++) {
2569  aac7 0c08          	inc	(OFST+0,sp)
2573  aac9 7b08          	ld	a,(OFST+0,sp)
2574  aacb a10a          	cp	a,#10
2575  aacd 25e0          	jrult	L167
2576  aacf ccac10        	jra	L315
2577  aad2               L757:
2578                     ; 2254         else if (nParsedMode == 'n') {
2580  aad2 a16e          	cp	a,#110
2581  aad4 2657          	jrne	L577
2582                     ; 2258 	  no_err = 0;
2584  aad6 0f08          	clr	(OFST+0,sp)
2586                     ; 2259           switch (nParsedNum)
2588  aad8 7b07          	ld	a,(OFST-1,sp)
2590                     ; 2281 	    default:
2590                     ; 2282 	      break;
2591  aada 270e          	jreq	L504
2592  aadc 4a            	dec	a
2593  aadd 2712          	jreq	L704
2594  aadf 4a            	dec	a
2595  aae0 2716          	jreq	L114
2596  aae2 4a            	dec	a
2597  aae3 271a          	jreq	L314
2598  aae5 4a            	dec	a
2599  aae6 271f          	jreq	L514
2600  aae8 2030          	jra	L1001
2601  aaea               L504:
2602                     ; 2261 	    case 0:
2602                     ; 2262               // Connection request status
2602                     ; 2263 	      if (mqtt_start_status & MQTT_START_CONNECTIONS_GOOD) no_err = 1;
2604  aaea 720900a32b    	btjf	_mqtt_start_status,#4,L1001
2606  aaef 2013          	jp	LC004
2607  aaf1               L704:
2608                     ; 2265 	    case 1:
2608                     ; 2266 	      // ARP request status
2608                     ; 2267 	      if (mqtt_start_status & MQTT_START_ARP_REQUEST_GOOD) no_err = 1;
2610  aaf1 720b00a324    	btjf	_mqtt_start_status,#5,L1001
2612  aaf6 200c          	jp	LC004
2613  aaf8               L114:
2614                     ; 2269 	    case 2:
2614                     ; 2270 	      // TCP connection status
2614                     ; 2271 	      if (mqtt_start_status & MQTT_START_TCP_CONNECT_GOOD) no_err = 1;
2616  aaf8 720d00a31d    	btjf	_mqtt_start_status,#6,L1001
2618  aafd 2005          	jp	LC004
2619  aaff               L314:
2620                     ; 2273 	    case 3:
2620                     ; 2274 	      // MQTT Connection status 1
2620                     ; 2275 	      if (mqtt_start_status & MQTT_START_MQTT_CONNECT_GOOD) no_err = 1;
2622  aaff 720f00a316    	btjf	_mqtt_start_status,#7,L1001
2625  ab04               LC004:
2629  ab04 4c            	inc	a
2630  ab05 2011          	jp	LC003
2631  ab07               L514:
2632                     ; 2277 	    case 4:
2632                     ; 2278 	      // MQTT start complete with no errors
2632                     ; 2279 	      if ((MQTT_error_status == 1) && ((mqtt_start_status & 0xf0) == 0xf0) ) no_err = 1;
2634  ab07 c60297        	ld	a,_MQTT_error_status
2635  ab0a 4a            	dec	a
2636  ab0b 260d          	jrne	L1001
2638  ab0d c600a3        	ld	a,_mqtt_start_status
2639  ab10 a4f0          	and	a,#240
2640  ab12 a1f0          	cp	a,#240
2641  ab14 2604          	jrne	L1001
2644  ab16 a601          	ld	a,#1
2645  ab18               LC003:
2646  ab18 6b08          	ld	(OFST+0,sp),a
2648                     ; 2281 	    default:
2648                     ; 2282 	      break;
2650  ab1a               L1001:
2651                     ; 2284 	  if (no_err == 1) *pBuffer = '1'; // Paint a green square
2653  ab1a 7b08          	ld	a,(OFST+0,sp)
2654  ab1c 4a            	dec	a
2655  ab1d 2606          	jrne	L5101
2658  ab1f 1e09          	ldw	x,(OFST+1,sp)
2659  ab21 a631          	ld	a,#49
2661  ab23 2004          	jra	L7101
2662  ab25               L5101:
2663                     ; 2285 	  else *pBuffer = '0'; // Paint a red square
2666  ab25 1e09          	ldw	x,(OFST+1,sp)
2667  ab27 a630          	ld	a,#48
2668  ab29               L7101:
2669  ab29 f7            	ld	(x),a
2670                     ; 2286           pBuffer++;
2671                     ; 2287           nBytes++;
2673  ab2a ccac08        	jp	LC007
2674  ab2d               L577:
2675                     ; 2291         else if (nParsedMode == 'y') {
2677  ab2d a179          	cp	a,#121
2678  ab2f 269e          	jrne	L315
2679                     ; 2336 	  i = insertion_flag[0];
2681  ab31 c60017        	ld	a,_insertion_flag
2682  ab34 6b08          	ld	(OFST+0,sp),a
2684                     ; 2337 	  insertion_flag[1] = nParsedMode;
2686  ab36 7b04          	ld	a,(OFST-4,sp)
2687  ab38 c70018        	ld	_insertion_flag+1,a
2688                     ; 2338 	  insertion_flag[2] = nParsedNum;
2690  ab3b 7b07          	ld	a,(OFST-1,sp)
2691  ab3d c70019        	ld	_insertion_flag+2,a
2692                     ; 2340           switch (nParsedNum)
2695                     ; 2388 	    default: break;
2696  ab40 2718          	jreq	L124
2697  ab42 4a            	dec	a
2698  ab43 272a          	jreq	L324
2699  ab45 4a            	dec	a
2700  ab46 273c          	jreq	L524
2701  ab48 4a            	dec	a
2702  ab49 274e          	jreq	L724
2703  ab4b 4a            	dec	a
2704  ab4c 2760          	jreq	L134
2705  ab4e 4a            	dec	a
2706  ab4f 2772          	jreq	L334
2707  ab51 4a            	dec	a
2708  ab52 2603ccabd8    	jreq	L534
2709  ab57 ccac06        	jra	LC008
2710  ab5a               L124:
2711                     ; 2342 	    case 0:
2711                     ; 2343 	      // %y00 replaced with string 
2711                     ; 2344 	      // page_string00[] = "pattern='[0-9]{3}' title='Enter 000 to 255' maxlength='3'";
2711                     ; 2345               *pBuffer = (uint8_t)page_string00[i];
2713  ab5a 7b08          	ld	a,(OFST+0,sp)
2714  ab5c 5f            	clrw	x
2715  ab5d 97            	ld	xl,a
2716  ab5e d69ac5        	ld	a,(L32_page_string00,x)
2717  ab61 1e09          	ldw	x,(OFST+1,sp)
2718  ab63 f7            	ld	(x),a
2719                     ; 2346 	      insertion_flag[0]++;
2721  ab64 725c0017      	inc	_insertion_flag
2722                     ; 2347 	      if (insertion_flag[0] == page_string00_len) insertion_flag[0] = 0;
2724  ab68 c60017        	ld	a,_insertion_flag
2725  ab6b a13f          	cp	a,#63
2727  ab6d 207c          	jp	LC005
2728  ab6f               L324:
2729                     ; 2349 	    case 1:
2729                     ; 2350 	      // %y01 replaced with string 
2729                     ; 2351               // page_string01[] = "pattern='[0-9a-f]{2}' title='Enter 00 to ff' maxlength='2'";
2729                     ; 2352               *pBuffer = (uint8_t)page_string01[i];
2731  ab6f 7b08          	ld	a,(OFST+0,sp)
2732  ab71 5f            	clrw	x
2733  ab72 97            	ld	xl,a
2734  ab73 d69b07        	ld	a,(L13_page_string01,x)
2735  ab76 1e09          	ldw	x,(OFST+1,sp)
2736  ab78 f7            	ld	(x),a
2737                     ; 2353 	      insertion_flag[0]++;
2739  ab79 725c0017      	inc	_insertion_flag
2740                     ; 2354 	      if (insertion_flag[0] == page_string01_len) insertion_flag[0] = 0;
2742  ab7d c60017        	ld	a,_insertion_flag
2743  ab80 a140          	cp	a,#64
2745  ab82 2067          	jp	LC005
2746  ab84               L524:
2747                     ; 2356 	    case 2:
2747                     ; 2357 	      // %y02 replaced with string 
2747                     ; 2358               // page_string02[] = "<button title='Save first! This button will not save your changes'>";
2747                     ; 2359               *pBuffer = (uint8_t)page_string02[i];
2749  ab84 7b08          	ld	a,(OFST+0,sp)
2750  ab86 5f            	clrw	x
2751  ab87 97            	ld	xl,a
2752  ab88 d69b4a        	ld	a,(L73_page_string02,x)
2753  ab8b 1e09          	ldw	x,(OFST+1,sp)
2754  ab8d f7            	ld	(x),a
2755                     ; 2360 	      insertion_flag[0]++;
2757  ab8e 725c0017      	inc	_insertion_flag
2758                     ; 2361 	      if (insertion_flag[0] == page_string02_len) insertion_flag[0] = 0;
2760  ab92 c60017        	ld	a,_insertion_flag
2761  ab95 a152          	cp	a,#82
2763  ab97 2052          	jp	LC005
2764  ab99               L724:
2765                     ; 2363 	    case 3:
2765                     ; 2364 	      // %y03 replaced with string 
2765                     ; 2365               // page_string03[] = "<form style='display: inline' action='http://";
2765                     ; 2366               *pBuffer = (uint8_t)page_string03[i];
2767  ab99 7b08          	ld	a,(OFST+0,sp)
2768  ab9b 5f            	clrw	x
2769  ab9c 97            	ld	xl,a
2770  ab9d d69b9f        	ld	a,(L54_page_string03,x)
2771  aba0 1e09          	ldw	x,(OFST+1,sp)
2772  aba2 f7            	ld	(x),a
2773                     ; 2367 	      insertion_flag[0]++;
2775  aba3 725c0017      	inc	_insertion_flag
2776                     ; 2368 	      if (insertion_flag[0] == page_string03_len) insertion_flag[0] = 0;
2778  aba7 c60017        	ld	a,_insertion_flag
2779  abaa a126          	cp	a,#38
2781  abac 203d          	jp	LC005
2782  abae               L134:
2783                     ; 2370 	    case 4:
2783                     ; 2371 	      // %y04 replaced with first header string 
2783                     ; 2372               *pBuffer = (uint8_t)page_string04[i];
2785  abae 7b08          	ld	a,(OFST+0,sp)
2786  abb0 5f            	clrw	x
2787  abb1 97            	ld	xl,a
2788  abb2 d69bc8        	ld	a,(L35_page_string04,x)
2789  abb5 1e09          	ldw	x,(OFST+1,sp)
2790  abb7 f7            	ld	(x),a
2791                     ; 2373 	      insertion_flag[0]++;
2793  abb8 725c0017      	inc	_insertion_flag
2794                     ; 2374 	      if (insertion_flag[0] == page_string04_len) insertion_flag[0] = 0;
2796  abbc c60017        	ld	a,_insertion_flag
2797  abbf a147          	cp	a,#71
2799  abc1 2028          	jp	LC005
2800  abc3               L334:
2801                     ; 2376 	    case 5:
2801                     ; 2377 	      // %y05 replaced with second header string 
2801                     ; 2378               *pBuffer = (uint8_t)page_string05[i];
2803  abc3 7b08          	ld	a,(OFST+0,sp)
2804  abc5 5f            	clrw	x
2805  abc6 97            	ld	xl,a
2806  abc7 d69c12        	ld	a,(L16_page_string05,x)
2807  abca 1e09          	ldw	x,(OFST+1,sp)
2808  abcc f7            	ld	(x),a
2809                     ; 2379 	      insertion_flag[0]++;
2811  abcd 725c0017      	inc	_insertion_flag
2812                     ; 2380 	      if (insertion_flag[0] == page_string05_len) insertion_flag[0] = 0;
2814  abd1 c60017        	ld	a,_insertion_flag
2815  abd4 a1ed          	cp	a,#237
2817  abd6 2013          	jp	LC005
2818  abd8               L534:
2819                     ; 2382 	    case 6:
2819                     ; 2383 	      // %y06 replaced with third header string 
2819                     ; 2384               *pBuffer = (uint8_t)page_string06[i];
2821  abd8 7b08          	ld	a,(OFST+0,sp)
2822  abda 5f            	clrw	x
2823  abdb 97            	ld	xl,a
2824  abdc d69d02        	ld	a,(L76_page_string06,x)
2825  abdf 1e09          	ldw	x,(OFST+1,sp)
2826  abe1 f7            	ld	(x),a
2827                     ; 2385 	      insertion_flag[0]++;
2829  abe2 725c0017      	inc	_insertion_flag
2830                     ; 2386 	      if (insertion_flag[0] == page_string06_len) insertion_flag[0] = 0;
2832  abe6 c60017        	ld	a,_insertion_flag
2833  abe9 a13b          	cp	a,#59
2836  abeb               LC005:
2837  abeb 2619          	jrne	LC008
2844  abed 725f0017      	clr	_insertion_flag
2845                     ; 2388 	    default: break;
2847                     ; 2390           pBuffer++;
2848                     ; 2391           nBytes++;
2849  abf1 2013          	jp	LC008
2850  abf3               L725:
2851                     ; 2399         *pBuffer = nByte;
2853  abf3 1e09          	ldw	x,(OFST+1,sp)
2854  abf5 f7            	ld	(x),a
2855                     ; 2400         *ppData = *ppData + 1;
2857  abf6 1e0d          	ldw	x,(OFST+5,sp)
2858  abf8 9093          	ldw	y,x
2859  abfa fe            	ldw	x,(x)
2860  abfb 5c            	incw	x
2861  abfc 90ff          	ldw	(y),x
2862                     ; 2401         *pDataLeft = *pDataLeft - 1;
2864  abfe 1e0f          	ldw	x,(OFST+7,sp)
2865  ac00 9093          	ldw	y,x
2866  ac02 fe            	ldw	x,(x)
2867  ac03 5a            	decw	x
2868  ac04 90ff          	ldw	(y),x
2869                     ; 2402         pBuffer++;
2871  ac06               LC008:
2873  ac06 1e09          	ldw	x,(OFST+1,sp)
2874                     ; 2403         nBytes++;
2876  ac08               LC007:
2881  ac08 5c            	incw	x
2882  ac09 1f09          	ldw	(OFST+1,sp),x
2888  ac0b 1e05          	ldw	x,(OFST-3,sp)
2889  ac0d 5c            	incw	x
2890  ac0e               LC006:
2891  ac0e 1f05          	ldw	(OFST-3,sp),x
2893  ac10               L315:
2894                     ; 1778   while (nBytes < nMaxBytes) {
2896  ac10 1e05          	ldw	x,(OFST-3,sp)
2897  ac12 1311          	cpw	x,(OFST+9,sp)
2898  ac14 2403cca657    	jrult	L115
2899  ac19               L515:
2900                     ; 2408   return nBytes;
2902  ac19 1e05          	ldw	x,(OFST-3,sp)
2905  ac1b 5b0a          	addw	sp,#10
2906  ac1d 81            	ret	
2938                     ; 2412 void HttpDInit()
2938                     ; 2413 {
2939                     .text:	section	.text,new
2940  ac1e               _HttpDInit:
2944                     ; 2415   uip_listen(htons(Port_Httpd));
2946  ac1e ce00ff        	ldw	x,_Port_Httpd
2947  ac21 cdf113        	call	_htons
2949  ac24 cde79e        	call	_uip_listen
2951                     ; 2416   current_webpage = WEBPAGE_IOCONTROL;
2953  ac27 725f001a      	clr	_current_webpage
2954                     ; 2419   insertion_flag[0] = 0;
2956  ac2b 725f0017      	clr	_insertion_flag
2957                     ; 2420   insertion_flag[1] = 0;
2959  ac2f 725f0018      	clr	_insertion_flag+1
2960                     ; 2421   insertion_flag[2] = 0;
2962  ac33 725f0019      	clr	_insertion_flag+2
2963                     ; 2424   saved_nstate = STATE_NULL;
2965  ac37 357f005b      	mov	_saved_nstate,#127
2966                     ; 2425   saved_parsestate = PARSE_CMD;
2968  ac3b 725f005a      	clr	_saved_parsestate
2969                     ; 2426   saved_nparseleft = 0;
2971  ac3f 725f0059      	clr	_saved_nparseleft
2972                     ; 2427   clear_saved_postpartial_all();
2975                     ; 2428 }
2978  ac43 ccb6f6        	jp	_clear_saved_postpartial_all
3170                     	switch	.const
3171  9d60               L422:
3172  9d60 b4f2          	dc.w	L7601
3173  9d62 b4f9          	dc.w	L1701
3174  9d64 b500          	dc.w	L3701
3175  9d66 b507          	dc.w	L5701
3176  9d68 b50e          	dc.w	L7701
3177  9d6a b515          	dc.w	L1011
3178  9d6c b51c          	dc.w	L3011
3179  9d6e b523          	dc.w	L5011
3180  9d70 b52a          	dc.w	L7011
3181  9d72 b531          	dc.w	L1111
3182  9d74 b538          	dc.w	L3111
3183  9d76 b53f          	dc.w	L5111
3184  9d78 b546          	dc.w	L7111
3185  9d7a b54d          	dc.w	L1211
3186  9d7c b554          	dc.w	L3211
3187  9d7e b55b          	dc.w	L5211
3188                     ; 2431 void HttpDCall(uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
3188                     ; 2432 {
3189                     .text:	section	.text,new
3190  ac46               _HttpDCall:
3192  ac46 89            	pushw	x
3193  ac47 5204          	subw	sp,#4
3194       00000004      OFST:	set	4
3197                     ; 2436   i = 0;
3199  ac49 0f04          	clr	(OFST+0,sp)
3201                     ; 2438   if (uip_connected()) {
3203  ac4b 720d02c055    	btjf	_uip_flags,#6,L3421
3204                     ; 2440     if (current_webpage == WEBPAGE_IOCONTROL) {
3206  ac50 c6001a        	ld	a,_current_webpage
3207  ac53 260e          	jrne	L5421
3208                     ; 2441       pSocket->pData = g_HtmlPageIOControl;
3210  ac55 1e0b          	ldw	x,(OFST+7,sp)
3211  ac57 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
3212  ac5b ef01          	ldw	(1,x),y
3213                     ; 2442       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
3215  ac5d 90ae0c06      	ldw	y,#3078
3217  ac61 2034          	jp	LC013
3218  ac63               L5421:
3219                     ; 2446     else if (current_webpage == WEBPAGE_CONFIGURATION) {
3221  ac63 a101          	cp	a,#1
3222  ac65 260e          	jrne	L1521
3223                     ; 2447       pSocket->pData = g_HtmlPageConfiguration;
3225  ac67 1e0b          	ldw	x,(OFST+7,sp)
3226  ac69 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
3227  ac6d ef01          	ldw	(1,x),y
3228                     ; 2448       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
3230  ac6f 90ae0c5c      	ldw	y,#3164
3232  ac73 2022          	jp	LC013
3233  ac75               L1521:
3234                     ; 2463     else if (current_webpage == WEBPAGE_STATS) {
3236  ac75 a105          	cp	a,#5
3237  ac77 260e          	jrne	L5521
3238                     ; 2464       pSocket->pData = g_HtmlPageStats;
3240  ac79 1e0b          	ldw	x,(OFST+7,sp)
3241  ac7b 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
3242  ac7f ef01          	ldw	(1,x),y
3243                     ; 2465       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
3245  ac81 90ae0150      	ldw	y,#336
3247  ac85 2010          	jp	LC013
3248  ac87               L5521:
3249                     ; 2469     else if (current_webpage == WEBPAGE_RSTATE) {
3251  ac87 a106          	cp	a,#6
3252  ac89 260e          	jrne	L7421
3253                     ; 2470       pSocket->pData = g_HtmlPageRstate;
3255  ac8b 1e0b          	ldw	x,(OFST+7,sp)
3256  ac8d 90ae9a3d      	ldw	y,#L12_g_HtmlPageRstate
3257  ac91 ef01          	ldw	(1,x),y
3258                     ; 2471       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
3260  ac93 90ae0087      	ldw	y,#135
3261  ac97               LC013:
3262  ac97 ef03          	ldw	(3,x),y
3263  ac99               L7421:
3264                     ; 2474     pSocket->nState = STATE_CONNECTED;
3266  ac99 1e0b          	ldw	x,(OFST+7,sp)
3267                     ; 2475     pSocket->nPrevBytes = 0xFFFF;
3269  ac9b 90aeffff      	ldw	y,#65535
3270  ac9f 7f            	clr	(x)
3271  aca0 ef0b          	ldw	(11,x),y
3273  aca2 ccad75        	jra	L252
3274  aca5               L3421:
3275                     ; 2484   else if (uip_newdata() || uip_acked()) {
3277  aca5 720202c008    	btjt	_uip_flags,#1,L7621
3279  acaa 720002c003cc  	btjf	_uip_flags,#0,L5621
3280  acb2               L7621:
3281                     ; 2485     if (uip_acked()) {
3283  acb2 720102c003cc  	btjt	_uip_flags,#0,L3511
3284                     ; 2488       goto senddata;
3286                     ; 2558     if (saved_nstate != STATE_NULL) {
3288  acba c6005b        	ld	a,_saved_nstate
3289  acbd a17f          	cp	a,#127
3290  acbf 2603ccad41    	jreq	L1231
3291                     ; 2564       pSocket->nState = saved_nstate;
3293  acc4 1e0b          	ldw	x,(OFST+7,sp)
3294  acc6 f7            	ld	(x),a
3295                     ; 2571       pSocket->ParseState = saved_parsestate;
3297  acc7 c6005a        	ld	a,_saved_parsestate
3298  acca e70a          	ld	(10,x),a
3299                     ; 2575       pSocket->nParseLeft = saved_nparseleft;
3301  accc c60059        	ld	a,_saved_nparseleft
3302  accf e706          	ld	(6,x),a
3303                     ; 2577       pSocket->nNewlines = saved_newlines;
3305  acd1 c60028        	ld	a,_saved_newlines
3306  acd4 e705          	ld	(5,x),a
3307                     ; 2589       for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i];
3309  acd6 4f            	clr	a
3310  acd7 6b04          	ld	(OFST+0,sp),a
3312  acd9               L5721:
3315  acd9 5f            	clrw	x
3316  acda 97            	ld	xl,a
3317  acdb d60041        	ld	a,(_saved_postpartial,x)
3318  acde d70029        	ld	(_saved_postpartial_previous,x),a
3321  ace1 0c04          	inc	(OFST+0,sp)
3325  ace3 7b04          	ld	a,(OFST+0,sp)
3326  ace5 a118          	cp	a,#24
3327  ace7 25f0          	jrult	L5721
3328                     ; 2594       if (saved_nstate == STATE_PARSEPOST) {
3330  ace9 c6005b        	ld	a,_saved_nstate
3331  acec a10a          	cp	a,#10
3332  acee 2651          	jrne	L1231
3333                     ; 2595         if (saved_parsestate == PARSE_CMD) {
3335  acf0 c6005a        	ld	a,_saved_parsestate
3336  acf3 274c          	jreq	L1231
3338                     ; 2598         else if (saved_parsestate == PARSE_NUM10) {
3340  acf5 a101          	cp	a,#1
3341  acf7 2609          	jrne	L1131
3342                     ; 2600 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3344  acf9 1e0b          	ldw	x,(OFST+7,sp)
3345  acfb c60029        	ld	a,_saved_postpartial_previous
3346  acfe e708          	ld	(8,x),a
3348  ad00 203f          	jra	L1231
3349  ad02               L1131:
3350                     ; 2602         else if (saved_parsestate == PARSE_NUM1) {
3352  ad02 a102          	cp	a,#2
3353  ad04 2615          	jrne	L5131
3354                     ; 2604 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3356  ad06 1e0b          	ldw	x,(OFST+7,sp)
3357  ad08 c60029        	ld	a,_saved_postpartial_previous
3358  ad0b e708          	ld	(8,x),a
3359                     ; 2605           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3361  ad0d c6002a        	ld	a,_saved_postpartial_previous+1
3362  ad10 97            	ld	xl,a
3363  ad11 a60a          	ld	a,#10
3364  ad13 42            	mul	x,a
3365  ad14 9f            	ld	a,xl
3366  ad15 a0e0          	sub	a,#224
3367  ad17 1e0b          	ldw	x,(OFST+7,sp)
3369  ad19 2024          	jp	LC014
3370  ad1b               L5131:
3371                     ; 2607         else if (saved_parsestate == PARSE_EQUAL || saved_parsestate == PARSE_VAL) {
3373  ad1b a103          	cp	a,#3
3374  ad1d 2704          	jreq	L3231
3376  ad1f a104          	cp	a,#4
3377  ad21 261e          	jrne	L1231
3378  ad23               L3231:
3379                     ; 2609 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3381  ad23 1e0b          	ldw	x,(OFST+7,sp)
3382  ad25 c60029        	ld	a,_saved_postpartial_previous
3383  ad28 e708          	ld	(8,x),a
3384                     ; 2610           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3386  ad2a c6002a        	ld	a,_saved_postpartial_previous+1
3387  ad2d 97            	ld	xl,a
3388  ad2e a60a          	ld	a,#10
3389  ad30 42            	mul	x,a
3390  ad31 9f            	ld	a,xl
3391  ad32 1e0b          	ldw	x,(OFST+7,sp)
3392  ad34 a0e0          	sub	a,#224
3393  ad36 e709          	ld	(9,x),a
3394                     ; 2611           pSocket->ParseNum += (uint8_t)(saved_postpartial_previous[2] - '0');
3396  ad38 c6002b        	ld	a,_saved_postpartial_previous+2
3397  ad3b a030          	sub	a,#48
3398  ad3d eb09          	add	a,(9,x)
3399  ad3f               LC014:
3400  ad3f e709          	ld	(9,x),a
3402  ad41               L1231:
3403                     ; 2613 	else if (saved_parsestate == PARSE_DELIM) {
3405                     ; 2633     if (pSocket->nState == STATE_CONNECTED) {
3407  ad41 1e0b          	ldw	x,(OFST+7,sp)
3408  ad43 f6            	ld	a,(x)
3409  ad44 2627          	jrne	L1331
3410                     ; 2634       if (nBytes == 0) return;
3412  ad46 1e09          	ldw	x,(OFST+5,sp)
3413  ad48 272b          	jreq	L252
3416                     ; 2635       if (*pBuffer == 'G') {
3418  ad4a 1e05          	ldw	x,(OFST+1,sp)
3419  ad4c f6            	ld	a,(x)
3420  ad4d a147          	cp	a,#71
3421  ad4f 2606          	jrne	L5331
3422                     ; 2636         pSocket->nState = STATE_GET_G;
3424  ad51 1e0b          	ldw	x,(OFST+7,sp)
3425  ad53 a601          	ld	a,#1
3427  ad55 2008          	jp	LC015
3428  ad57               L5331:
3429                     ; 2638       else if (*pBuffer == 'P') {
3431  ad57 a150          	cp	a,#80
3432  ad59 2605          	jrne	L7331
3433                     ; 2639         pSocket->nState = STATE_POST_P;
3435  ad5b 1e0b          	ldw	x,(OFST+7,sp)
3436  ad5d a604          	ld	a,#4
3437  ad5f               LC015:
3438  ad5f f7            	ld	(x),a
3439  ad60               L7331:
3440                     ; 2641       nBytes--;
3442  ad60 1e09          	ldw	x,(OFST+5,sp)
3443  ad62 5a            	decw	x
3444  ad63 1f09          	ldw	(OFST+5,sp),x
3445                     ; 2642       pBuffer++;
3447  ad65 1e05          	ldw	x,(OFST+1,sp)
3448  ad67 5c            	incw	x
3449  ad68 1f05          	ldw	(OFST+1,sp),x
3450  ad6a 1e0b          	ldw	x,(OFST+7,sp)
3451  ad6c f6            	ld	a,(x)
3452  ad6d               L1331:
3453                     ; 2645     if (pSocket->nState == STATE_GET_G) {
3455  ad6d a101          	cp	a,#1
3456  ad6f 2620          	jrne	L3431
3457                     ; 2646       if (nBytes == 0) return;
3459  ad71 1e09          	ldw	x,(OFST+5,sp)
3460  ad73 2603          	jrne	L5431
3462  ad75               L252:
3465  ad75 5b06          	addw	sp,#6
3466  ad77 81            	ret	
3467  ad78               L5431:
3468                     ; 2647       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
3470  ad78 1e05          	ldw	x,(OFST+1,sp)
3471  ad7a f6            	ld	a,(x)
3472  ad7b a145          	cp	a,#69
3473  ad7d 2605          	jrne	L7431
3476  ad7f 1e0b          	ldw	x,(OFST+7,sp)
3477  ad81 a602          	ld	a,#2
3478  ad83 f7            	ld	(x),a
3479  ad84               L7431:
3480                     ; 2648       nBytes--;
3482  ad84 1e09          	ldw	x,(OFST+5,sp)
3483  ad86 5a            	decw	x
3484  ad87 1f09          	ldw	(OFST+5,sp),x
3485                     ; 2649       pBuffer++;
3487  ad89 1e05          	ldw	x,(OFST+1,sp)
3488  ad8b 5c            	incw	x
3489  ad8c 1f05          	ldw	(OFST+1,sp),x
3490  ad8e 1e0b          	ldw	x,(OFST+7,sp)
3491  ad90 f6            	ld	a,(x)
3492  ad91               L3431:
3493                     ; 2652     if (pSocket->nState == STATE_GET_GE) {
3495  ad91 a102          	cp	a,#2
3496  ad93 261d          	jrne	L1531
3497                     ; 2653       if (nBytes == 0) return;
3499  ad95 1e09          	ldw	x,(OFST+5,sp)
3500  ad97 27dc          	jreq	L252
3503                     ; 2654       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
3505  ad99 1e05          	ldw	x,(OFST+1,sp)
3506  ad9b f6            	ld	a,(x)
3507  ad9c a154          	cp	a,#84
3508  ad9e 2605          	jrne	L5531
3511  ada0 1e0b          	ldw	x,(OFST+7,sp)
3512  ada2 a603          	ld	a,#3
3513  ada4 f7            	ld	(x),a
3514  ada5               L5531:
3515                     ; 2655       nBytes--;
3517  ada5 1e09          	ldw	x,(OFST+5,sp)
3518  ada7 5a            	decw	x
3519  ada8 1f09          	ldw	(OFST+5,sp),x
3520                     ; 2656       pBuffer++;
3522  adaa 1e05          	ldw	x,(OFST+1,sp)
3523  adac 5c            	incw	x
3524  adad 1f05          	ldw	(OFST+1,sp),x
3525  adaf 1e0b          	ldw	x,(OFST+7,sp)
3526  adb1 f6            	ld	a,(x)
3527  adb2               L1531:
3528                     ; 2659     if (pSocket->nState == STATE_GET_GET) {
3530  adb2 a103          	cp	a,#3
3531  adb4 261d          	jrne	L7531
3532                     ; 2660       if (nBytes == 0) return;
3534  adb6 1e09          	ldw	x,(OFST+5,sp)
3535  adb8 27bb          	jreq	L252
3538                     ; 2661       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
3540  adba 1e05          	ldw	x,(OFST+1,sp)
3541  adbc f6            	ld	a,(x)
3542  adbd a120          	cp	a,#32
3543  adbf 2605          	jrne	L3631
3546  adc1 1e0b          	ldw	x,(OFST+7,sp)
3547  adc3 a608          	ld	a,#8
3548  adc5 f7            	ld	(x),a
3549  adc6               L3631:
3550                     ; 2662       nBytes--;
3552  adc6 1e09          	ldw	x,(OFST+5,sp)
3553  adc8 5a            	decw	x
3554  adc9 1f09          	ldw	(OFST+5,sp),x
3555                     ; 2663       pBuffer++;
3557  adcb 1e05          	ldw	x,(OFST+1,sp)
3558  adcd 5c            	incw	x
3559  adce 1f05          	ldw	(OFST+1,sp),x
3560  add0 1e0b          	ldw	x,(OFST+7,sp)
3561  add2 f6            	ld	a,(x)
3562  add3               L7531:
3563                     ; 2666     if (pSocket->nState == STATE_POST_P) {
3565  add3 a104          	cp	a,#4
3566  add5 261d          	jrne	L5631
3567                     ; 2667       if (nBytes == 0) return;
3569  add7 1e09          	ldw	x,(OFST+5,sp)
3570  add9 279a          	jreq	L252
3573                     ; 2668       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
3575  addb 1e05          	ldw	x,(OFST+1,sp)
3576  addd f6            	ld	a,(x)
3577  adde a14f          	cp	a,#79
3578  ade0 2605          	jrne	L1731
3581  ade2 1e0b          	ldw	x,(OFST+7,sp)
3582  ade4 a605          	ld	a,#5
3583  ade6 f7            	ld	(x),a
3584  ade7               L1731:
3585                     ; 2669       nBytes--;
3587  ade7 1e09          	ldw	x,(OFST+5,sp)
3588  ade9 5a            	decw	x
3589  adea 1f09          	ldw	(OFST+5,sp),x
3590                     ; 2670       pBuffer++;
3592  adec 1e05          	ldw	x,(OFST+1,sp)
3593  adee 5c            	incw	x
3594  adef 1f05          	ldw	(OFST+1,sp),x
3595  adf1 1e0b          	ldw	x,(OFST+7,sp)
3596  adf3 f6            	ld	a,(x)
3597  adf4               L5631:
3598                     ; 2673     if (pSocket->nState == STATE_POST_PO) {
3600  adf4 a105          	cp	a,#5
3601  adf6 2620          	jrne	L3731
3602                     ; 2674       if (nBytes == 0) return;
3604  adf8 1e09          	ldw	x,(OFST+5,sp)
3605  adfa 2603ccad75    	jreq	L252
3608                     ; 2675       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
3610  adff 1e05          	ldw	x,(OFST+1,sp)
3611  ae01 f6            	ld	a,(x)
3612  ae02 a153          	cp	a,#83
3613  ae04 2605          	jrne	L7731
3616  ae06 1e0b          	ldw	x,(OFST+7,sp)
3617  ae08 a606          	ld	a,#6
3618  ae0a f7            	ld	(x),a
3619  ae0b               L7731:
3620                     ; 2676       nBytes--;
3622  ae0b 1e09          	ldw	x,(OFST+5,sp)
3623  ae0d 5a            	decw	x
3624  ae0e 1f09          	ldw	(OFST+5,sp),x
3625                     ; 2677       pBuffer++;
3627  ae10 1e05          	ldw	x,(OFST+1,sp)
3628  ae12 5c            	incw	x
3629  ae13 1f05          	ldw	(OFST+1,sp),x
3630  ae15 1e0b          	ldw	x,(OFST+7,sp)
3631  ae17 f6            	ld	a,(x)
3632  ae18               L3731:
3633                     ; 2680     if (pSocket->nState == STATE_POST_POS) {
3635  ae18 a106          	cp	a,#6
3636  ae1a 261d          	jrne	L1041
3637                     ; 2681       if (nBytes == 0) return;
3639  ae1c 1e09          	ldw	x,(OFST+5,sp)
3640  ae1e 27dc          	jreq	L252
3643                     ; 2682       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
3645  ae20 1e05          	ldw	x,(OFST+1,sp)
3646  ae22 f6            	ld	a,(x)
3647  ae23 a154          	cp	a,#84
3648  ae25 2605          	jrne	L5041
3651  ae27 1e0b          	ldw	x,(OFST+7,sp)
3652  ae29 a607          	ld	a,#7
3653  ae2b f7            	ld	(x),a
3654  ae2c               L5041:
3655                     ; 2683       nBytes--;
3657  ae2c 1e09          	ldw	x,(OFST+5,sp)
3658  ae2e 5a            	decw	x
3659  ae2f 1f09          	ldw	(OFST+5,sp),x
3660                     ; 2684       pBuffer++;
3662  ae31 1e05          	ldw	x,(OFST+1,sp)
3663  ae33 5c            	incw	x
3664  ae34 1f05          	ldw	(OFST+1,sp),x
3665  ae36 1e0b          	ldw	x,(OFST+7,sp)
3666  ae38 f6            	ld	a,(x)
3667  ae39               L1041:
3668                     ; 2687     if (pSocket->nState == STATE_POST_POST) {
3670  ae39 a107          	cp	a,#7
3671  ae3b 261d          	jrne	L7041
3672                     ; 2688       if (nBytes == 0) return;
3674  ae3d 1e09          	ldw	x,(OFST+5,sp)
3675  ae3f 27bb          	jreq	L252
3678                     ; 2689       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
3680  ae41 1e05          	ldw	x,(OFST+1,sp)
3681  ae43 f6            	ld	a,(x)
3682  ae44 a120          	cp	a,#32
3683  ae46 2605          	jrne	L3141
3686  ae48 1e0b          	ldw	x,(OFST+7,sp)
3687  ae4a a609          	ld	a,#9
3688  ae4c f7            	ld	(x),a
3689  ae4d               L3141:
3690                     ; 2690       nBytes--;
3692  ae4d 1e09          	ldw	x,(OFST+5,sp)
3693  ae4f 5a            	decw	x
3694  ae50 1f09          	ldw	(OFST+5,sp),x
3695                     ; 2691       pBuffer++;
3697  ae52 1e05          	ldw	x,(OFST+1,sp)
3698  ae54 5c            	incw	x
3699  ae55 1f05          	ldw	(OFST+1,sp),x
3700  ae57 1e0b          	ldw	x,(OFST+7,sp)
3701  ae59 f6            	ld	a,(x)
3702  ae5a               L7041:
3703                     ; 2694     if (pSocket->nState == STATE_GOTPOST) {
3705  ae5a a109          	cp	a,#9
3706  ae5c 2703ccaee3    	jrne	L5141
3707                     ; 2696       saved_nstate = STATE_GOTPOST;
3709  ae61 3509005b      	mov	_saved_nstate,#9
3710                     ; 2697       if (nBytes == 0) {
3712  ae65 1e09          	ldw	x,(OFST+5,sp)
3713  ae67 2676          	jrne	L3241
3714                     ; 2700 	saved_newlines = pSocket->nNewlines;
3716  ae69 1e0b          	ldw	x,(OFST+7,sp)
3717  ae6b e605          	ld	a,(5,x)
3718  ae6d c70028        	ld	_saved_newlines,a
3719                     ; 2701         return;
3721  ae70 ccad75        	jra	L252
3722  ae73               L1241:
3723                     ; 2709 	if (saved_newlines == 2) {
3725  ae73 c60028        	ld	a,_saved_newlines
3726  ae76 a102          	cp	a,#2
3727  ae78 272b          	jreq	L1341
3729                     ; 2714           if (*pBuffer == '\n') pSocket->nNewlines++;
3731  ae7a 1e05          	ldw	x,(OFST+1,sp)
3732  ae7c f6            	ld	a,(x)
3733  ae7d a10a          	cp	a,#10
3734  ae7f 2606          	jrne	L3341
3737  ae81 1e0b          	ldw	x,(OFST+7,sp)
3738  ae83 6c05          	inc	(5,x)
3740  ae85 2008          	jra	L5341
3741  ae87               L3341:
3742                     ; 2715           else if (*pBuffer == '\r') { }
3744  ae87 a10d          	cp	a,#13
3745  ae89 2704          	jreq	L5341
3747                     ; 2716           else pSocket->nNewlines = 0;
3749  ae8b 1e0b          	ldw	x,(OFST+7,sp)
3750  ae8d 6f05          	clr	(5,x)
3751  ae8f               L5341:
3752                     ; 2717           pBuffer++;
3754  ae8f 1e05          	ldw	x,(OFST+1,sp)
3755  ae91 5c            	incw	x
3756  ae92 1f05          	ldw	(OFST+1,sp),x
3757                     ; 2718           nBytes--;
3759  ae94 1e09          	ldw	x,(OFST+5,sp)
3760  ae96 5a            	decw	x
3761  ae97 1f09          	ldw	(OFST+5,sp),x
3762                     ; 2719           if (nBytes == 0) {
3764  ae99 260a          	jrne	L1341
3765                     ; 2722             saved_newlines = pSocket->nNewlines;
3767  ae9b 1e0b          	ldw	x,(OFST+7,sp)
3768  ae9d e605          	ld	a,(5,x)
3769  ae9f c70028        	ld	_saved_newlines,a
3770                     ; 2723             return;
3772  aea2 ccad75        	jra	L252
3773  aea5               L1341:
3774                     ; 2731         if (pSocket->nNewlines == 2) {
3776  aea5 1e0b          	ldw	x,(OFST+7,sp)
3777  aea7 e605          	ld	a,(5,x)
3778  aea9 a102          	cp	a,#2
3779  aeab 2632          	jrne	L3241
3780                     ; 2734           if (current_webpage == WEBPAGE_IOCONTROL) {
3782  aead c6001a        	ld	a,_current_webpage
3783  aeb0 2609          	jrne	L7441
3784                     ; 2735 	    pSocket->nParseLeft = PARSEBYTES_IOCONTROL;
3786  aeb2 a635          	ld	a,#53
3787  aeb4 e706          	ld	(6,x),a
3788                     ; 2736 	    pSocket->nParseLeftAddl = PARSEBYTES_IOCONTROL_ADDL;
3790  aeb6 6f07          	clr	(7,x)
3791  aeb8 c6001a        	ld	a,_current_webpage
3792  aebb               L7441:
3793                     ; 2738           if (current_webpage == WEBPAGE_CONFIGURATION) {
3795  aebb 4a            	dec	a
3796  aebc 2608          	jrne	L1541
3797                     ; 2739 	    pSocket->nParseLeft = PARSEBYTES_CONFIGURATION;
3799  aebe a6ec          	ld	a,#236
3800  aec0 e706          	ld	(6,x),a
3801                     ; 2740 	    pSocket->nParseLeftAddl = PARSEBYTES_CONFIGURATION_ADDL;
3803  aec2 a618          	ld	a,#24
3804  aec4 e707          	ld	(7,x),a
3805  aec6               L1541:
3806                     ; 2742           pSocket->ParseState = saved_parsestate = PARSE_CMD;
3808  aec6 725f005a      	clr	_saved_parsestate
3809  aeca 6f0a          	clr	(10,x)
3810                     ; 2743 	  saved_nparseleft = pSocket->nParseLeft;
3812  aecc e606          	ld	a,(6,x)
3813  aece c70059        	ld	_saved_nparseleft,a
3814                     ; 2745           pSocket->nState = STATE_PARSEPOST;
3816  aed1 a60a          	ld	a,#10
3817  aed3 f7            	ld	(x),a
3818                     ; 2746 	  saved_nstate = STATE_PARSEPOST;
3820  aed4 350a005b      	mov	_saved_nstate,#10
3821                     ; 2747 	  if (nBytes == 0) {
3823  aed8 1e09          	ldw	x,(OFST+5,sp)
3824  aeda 2607          	jrne	L5141
3825                     ; 2750 	    return;
3827  aedc ccad75        	jra	L252
3828  aedf               L3241:
3829                     ; 2704       while (nBytes != 0) {
3831  aedf 1e09          	ldw	x,(OFST+5,sp)
3832  aee1 2690          	jrne	L1241
3833  aee3               L5141:
3834                     ; 2757     if (pSocket->nState == STATE_GOTGET) {
3836  aee3 1e0b          	ldw	x,(OFST+7,sp)
3837  aee5 f6            	ld	a,(x)
3838  aee6 a108          	cp	a,#8
3839  aee8 2609          	jrne	L5541
3840                     ; 2761       pSocket->nParseLeft = 6;
3842  aeea a606          	ld	a,#6
3843  aeec e706          	ld	(6,x),a
3844                     ; 2762       pSocket->ParseState = PARSE_SLASH1;
3846  aeee e70a          	ld	(10,x),a
3847                     ; 2764       pSocket->nState = STATE_PARSEGET;
3849  aef0 a60d          	ld	a,#13
3850  aef2 f7            	ld	(x),a
3851  aef3               L5541:
3852                     ; 2767     if (pSocket->nState == STATE_PARSEPOST) {
3854  aef3 a10a          	cp	a,#10
3855  aef5 2703ccb3d3    	jrne	L7541
3856  aefa               L1641:
3857                     ; 2781         if (pSocket->ParseState == PARSE_CMD) {
3859  aefa 1e0b          	ldw	x,(OFST+7,sp)
3860  aefc e60a          	ld	a,(10,x)
3861  aefe 2664          	jrne	L5641
3862                     ; 2782           pSocket->ParseCmd = *pBuffer;
3864  af00 1e05          	ldw	x,(OFST+1,sp)
3865  af02 f6            	ld	a,(x)
3866  af03 1e0b          	ldw	x,(OFST+7,sp)
3867  af05 e708          	ld	(8,x),a
3868                     ; 2783 	  saved_postpartial[0] = *pBuffer;
3870  af07 1e05          	ldw	x,(OFST+1,sp)
3871  af09 f6            	ld	a,(x)
3872  af0a c70041        	ld	_saved_postpartial,a
3873                     ; 2784           pSocket->ParseState = saved_parsestate = PARSE_NUM10;
3875  af0d a601          	ld	a,#1
3876  af0f c7005a        	ld	_saved_parsestate,a
3877  af12 1e0b          	ldw	x,(OFST+7,sp)
3878  af14 e70a          	ld	(10,x),a
3879                     ; 2785 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3881  af16 e606          	ld	a,(6,x)
3882  af18 2704          	jreq	L7641
3883                     ; 2786 	    pSocket->nParseLeft--;
3885  af1a 6a06          	dec	(6,x)
3887  af1c 2004          	jra	L1741
3888  af1e               L7641:
3889                     ; 2790 	    pSocket->ParseState = PARSE_DELIM;
3891  af1e a605          	ld	a,#5
3892  af20 e70a          	ld	(10,x),a
3893  af22               L1741:
3894                     ; 2792 	  saved_nparseleft = pSocket->nParseLeft;
3896  af22 e606          	ld	a,(6,x)
3897  af24 c70059        	ld	_saved_nparseleft,a
3898                     ; 2793           pBuffer++;
3900  af27 1e05          	ldw	x,(OFST+1,sp)
3901  af29 5c            	incw	x
3902  af2a 1f05          	ldw	(OFST+1,sp),x
3903                     ; 2794 	  nBytes --;
3905  af2c 1e09          	ldw	x,(OFST+5,sp)
3906  af2e 5a            	decw	x
3907  af2f 1f09          	ldw	(OFST+5,sp),x
3908                     ; 2796 	  if (pSocket->ParseCmd == 'o' ||
3908                     ; 2797 	      pSocket->ParseCmd == 'a' ||
3908                     ; 2798 	      pSocket->ParseCmd == 'b' ||
3908                     ; 2799 	      pSocket->ParseCmd == 'c' ||
3908                     ; 2800 	      pSocket->ParseCmd == 'd' ||
3908                     ; 2801 	      pSocket->ParseCmd == 'g' ||
3908                     ; 2802 	      pSocket->ParseCmd == 'l' ||
3908                     ; 2803 	      pSocket->ParseCmd == 'm' ||
3908                     ; 2804 	      pSocket->ParseCmd == 'z') { }
3910  af31 1e0b          	ldw	x,(OFST+7,sp)
3911  af33 e608          	ld	a,(8,x)
3912  af35 a16f          	cp	a,#111
3913  af37 2724          	jreq	L5151
3915  af39 a161          	cp	a,#97
3916  af3b 2720          	jreq	L5151
3918  af3d a162          	cp	a,#98
3919  af3f 271c          	jreq	L5151
3921  af41 a163          	cp	a,#99
3922  af43 2718          	jreq	L5151
3924  af45 a164          	cp	a,#100
3925  af47 2714          	jreq	L5151
3927  af49 a167          	cp	a,#103
3928  af4b 2710          	jreq	L5151
3930  af4d a16c          	cp	a,#108
3931  af4f 270c          	jreq	L5151
3933  af51 a16d          	cp	a,#109
3934  af53 2708          	jreq	L5151
3936  af55 a17a          	cp	a,#122
3937  af57 2704          	jreq	L5151
3938                     ; 2807 	    pSocket->ParseState = PARSE_DELIM;
3940  af59 a605          	ld	a,#5
3941  af5b e70a          	ld	(10,x),a
3942  af5d               L5151:
3943                     ; 2809 	  if (nBytes == 0) { // Hit end of fragment. Break out of while()
3945  af5d 1e09          	ldw	x,(OFST+5,sp)
3946  af5f 2699          	jrne	L1641
3947                     ; 2811 	    break;
3949  af61 ccb37b        	jra	L3641
3950  af64               L5641:
3951                     ; 2815         else if (pSocket->ParseState == PARSE_NUM10) {
3953  af64 a101          	cp	a,#1
3954  af66 2640          	jrne	L3251
3955                     ; 2816           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3957  af68 1e05          	ldw	x,(OFST+1,sp)
3958  af6a f6            	ld	a,(x)
3959  af6b 97            	ld	xl,a
3960  af6c a60a          	ld	a,#10
3961  af6e 42            	mul	x,a
3962  af6f 9f            	ld	a,xl
3963  af70 1e0b          	ldw	x,(OFST+7,sp)
3964  af72 a0e0          	sub	a,#224
3965  af74 e709          	ld	(9,x),a
3966                     ; 2817 	  saved_postpartial[1] = *pBuffer;
3968  af76 1e05          	ldw	x,(OFST+1,sp)
3969  af78 f6            	ld	a,(x)
3970  af79 c70042        	ld	_saved_postpartial+1,a
3971                     ; 2818           pSocket->ParseState = saved_parsestate = PARSE_NUM1;
3973  af7c a602          	ld	a,#2
3974  af7e c7005a        	ld	_saved_parsestate,a
3975  af81 1e0b          	ldw	x,(OFST+7,sp)
3976  af83 e70a          	ld	(10,x),a
3977                     ; 2819 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3979  af85 e606          	ld	a,(6,x)
3980  af87 2704          	jreq	L5251
3981                     ; 2820 	    pSocket->nParseLeft--;
3983  af89 6a06          	dec	(6,x)
3985  af8b 2004          	jra	L7251
3986  af8d               L5251:
3987                     ; 2824 	    pSocket->ParseState = PARSE_DELIM;
3989  af8d a605          	ld	a,#5
3990  af8f e70a          	ld	(10,x),a
3991  af91               L7251:
3992                     ; 2826 	  saved_nparseleft = pSocket->nParseLeft;
3994  af91 e606          	ld	a,(6,x)
3995  af93 c70059        	ld	_saved_nparseleft,a
3996                     ; 2827           pBuffer++;
3998  af96 1e05          	ldw	x,(OFST+1,sp)
3999  af98 5c            	incw	x
4000  af99 1f05          	ldw	(OFST+1,sp),x
4001                     ; 2828 	  nBytes--;
4003  af9b 1e09          	ldw	x,(OFST+5,sp)
4004  af9d 5a            	decw	x
4005  af9e 1f09          	ldw	(OFST+5,sp),x
4006                     ; 2829 	  if (nBytes == 0) {
4008  afa0 2703ccaefa    	jrne	L1641
4009                     ; 2831 	    break;
4011  afa5 ccb37b        	jra	L3641
4012  afa8               L3251:
4013                     ; 2835         else if (pSocket->ParseState == PARSE_NUM1) {
4015  afa8 a102          	cp	a,#2
4016  afaa 2638          	jrne	L5351
4017                     ; 2836           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
4019  afac 1605          	ldw	y,(OFST+1,sp)
4020  afae 90f6          	ld	a,(y)
4021  afb0 a030          	sub	a,#48
4022  afb2 eb09          	add	a,(9,x)
4023  afb4 e709          	ld	(9,x),a
4024                     ; 2837 	  saved_postpartial[2] = *pBuffer;
4026  afb6 93            	ldw	x,y
4027  afb7 f6            	ld	a,(x)
4028  afb8 c70043        	ld	_saved_postpartial+2,a
4029                     ; 2838           pSocket->ParseState = saved_parsestate = PARSE_EQUAL;
4031  afbb a603          	ld	a,#3
4032  afbd c7005a        	ld	_saved_parsestate,a
4033  afc0 1e0b          	ldw	x,(OFST+7,sp)
4034  afc2 e70a          	ld	(10,x),a
4035                     ; 2839 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4037  afc4 e606          	ld	a,(6,x)
4038  afc6 2704          	jreq	L7351
4039                     ; 2840 	    pSocket->nParseLeft--;
4041  afc8 6a06          	dec	(6,x)
4043  afca 2004          	jra	L1451
4044  afcc               L7351:
4045                     ; 2844 	    pSocket->ParseState = PARSE_DELIM;
4047  afcc a605          	ld	a,#5
4048  afce e70a          	ld	(10,x),a
4049  afd0               L1451:
4050                     ; 2846 	  saved_nparseleft = pSocket->nParseLeft;
4052  afd0 e606          	ld	a,(6,x)
4053  afd2 c70059        	ld	_saved_nparseleft,a
4054                     ; 2847           pBuffer++;
4056  afd5 1e05          	ldw	x,(OFST+1,sp)
4057  afd7 5c            	incw	x
4058  afd8 1f05          	ldw	(OFST+1,sp),x
4059                     ; 2848 	  nBytes--;
4061  afda 1e09          	ldw	x,(OFST+5,sp)
4062  afdc 5a            	decw	x
4063  afdd 1f09          	ldw	(OFST+5,sp),x
4064                     ; 2849 	  if (nBytes == 0) {
4066  afdf 26c1          	jrne	L1641
4067                     ; 2851 	    break;
4069  afe1 ccb37b        	jra	L3641
4070  afe4               L5351:
4071                     ; 2855         else if (pSocket->ParseState == PARSE_EQUAL) {
4073  afe4 a103          	cp	a,#3
4074  afe6 262f          	jrne	L7451
4075                     ; 2856           pSocket->ParseState = saved_parsestate = PARSE_VAL;
4077  afe8 a604          	ld	a,#4
4078  afea c7005a        	ld	_saved_parsestate,a
4079  afed e70a          	ld	(10,x),a
4080                     ; 2857 	  saved_postpartial[3] = *pBuffer;
4082  afef 1e05          	ldw	x,(OFST+1,sp)
4083  aff1 f6            	ld	a,(x)
4084  aff2 c70044        	ld	_saved_postpartial+3,a
4085                     ; 2858 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
4087  aff5 1e0b          	ldw	x,(OFST+7,sp)
4088  aff7 e606          	ld	a,(6,x)
4089  aff9 2704          	jreq	L1551
4090                     ; 2859 	    pSocket->nParseLeft--;
4092  affb 6a06          	dec	(6,x)
4094  affd 2004          	jra	L3551
4095  afff               L1551:
4096                     ; 2863 	    pSocket->ParseState = PARSE_DELIM;
4098  afff a605          	ld	a,#5
4099  b001 e70a          	ld	(10,x),a
4100  b003               L3551:
4101                     ; 2865 	  saved_nparseleft = pSocket->nParseLeft;
4103  b003 e606          	ld	a,(6,x)
4104  b005 c70059        	ld	_saved_nparseleft,a
4105                     ; 2866           pBuffer++;
4107  b008 1e05          	ldw	x,(OFST+1,sp)
4108  b00a 5c            	incw	x
4109  b00b 1f05          	ldw	(OFST+1,sp),x
4110                     ; 2867 	  nBytes--;
4112  b00d 1e09          	ldw	x,(OFST+5,sp)
4113  b00f 5a            	decw	x
4114  b010 1f09          	ldw	(OFST+5,sp),x
4115                     ; 2868 	  if (nBytes == 0) {
4117  b012 268e          	jrne	L1641
4118                     ; 2870 	    break;
4120  b014 ccb37b        	jra	L3641
4121  b017               L7451:
4122                     ; 2874         else if (pSocket->ParseState == PARSE_VAL) {
4124  b017 a104          	cp	a,#4
4125  b019 2703ccb34e    	jrne	L1651
4126                     ; 2887           if (pSocket->ParseCmd == 'o') {
4128  b01e e608          	ld	a,(8,x)
4129  b020 a16f          	cp	a,#111
4130  b022 2640          	jrne	L3651
4131                     ; 2901               if ((uint8_t)(*pBuffer) == '1') pin_value = 1;
4133  b024 1e05          	ldw	x,(OFST+1,sp)
4134  b026 f6            	ld	a,(x)
4135  b027 a131          	cp	a,#49
4136  b029 2604          	jrne	L5651
4139  b02b a601          	ld	a,#1
4141  b02d 2001          	jra	L7651
4142  b02f               L5651:
4143                     ; 2902 	      else pin_value = 0;
4145  b02f 4f            	clr	a
4146  b030               L7651:
4147  b030 6b01          	ld	(OFST-3,sp),a
4149                     ; 2903 	      GpioSetPin(pSocket->ParseNum, (uint8_t)pin_value);
4151  b032 160b          	ldw	y,(OFST+7,sp)
4152  b034 97            	ld	xl,a
4153  b035 90e609        	ld	a,(9,y)
4154  b038 95            	ld	xh,a
4155  b039 cdbbad        	call	_GpioSetPin
4157                     ; 2905 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent
4159  b03c 1e0b          	ldw	x,(OFST+7,sp)
4160  b03e e606          	ld	a,(6,x)
4161  b040 2704          	jreq	L1751
4164  b042 6a06          	dec	(6,x)
4165  b044 e606          	ld	a,(6,x)
4166  b046               L1751:
4167                     ; 2907             saved_nparseleft = pSocket->nParseLeft;
4169  b046 c70059        	ld	_saved_nparseleft,a
4170                     ; 2908             pBuffer++;
4172  b049 1e05          	ldw	x,(OFST+1,sp)
4173  b04b 5c            	incw	x
4174  b04c 1f05          	ldw	(OFST+1,sp),x
4175                     ; 2909 	    nBytes--;
4177  b04e 1e09          	ldw	x,(OFST+5,sp)
4178  b050 5a            	decw	x
4179  b051 1f09          	ldw	(OFST+5,sp),x
4180                     ; 2910 	    if (nBytes == 0) {
4182  b053 2703ccb32c    	jrne	L5751
4183                     ; 2913 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4185  b058 a605          	ld	a,#5
4186  b05a c7005a        	ld	_saved_parsestate,a
4187  b05d 1e0b          	ldw	x,(OFST+7,sp)
4188  b05f e70a          	ld	(10,x),a
4189                     ; 2914 	      break;
4191  b061 ccb37b        	jra	L3641
4192  b064               L3651:
4193                     ; 2921           else if (pSocket->ParseCmd == 'a'
4193                     ; 2922                 || pSocket->ParseCmd == 'l'
4193                     ; 2923                 || pSocket->ParseCmd == 'm' ) {
4195  b064 a161          	cp	a,#97
4196  b066 2708          	jreq	L1061
4198  b068 a16c          	cp	a,#108
4199  b06a 2704          	jreq	L1061
4201  b06c a16d          	cp	a,#109
4202  b06e 2657          	jrne	L7751
4203  b070               L1061:
4204                     ; 2927 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4206  b070 725f0021      	clr	_break_while
4207                     ; 2929             tmp_pBuffer = pBuffer;
4209  b074 1e05          	ldw	x,(OFST+1,sp)
4210  b076 cf0025        	ldw	_tmp_pBuffer,x
4211                     ; 2930             tmp_nBytes = nBytes;
4213  b079 1e09          	ldw	x,(OFST+5,sp)
4214  b07b cf0023        	ldw	_tmp_nBytes,x
4215                     ; 2931 	    tmp_nParseLeft = pSocket->nParseLeft;
4217  b07e 1e0b          	ldw	x,(OFST+7,sp)
4218  b080 e606          	ld	a,(6,x)
4219  b082 c70022        	ld	_tmp_nParseLeft,a
4220                     ; 2932             switch (pSocket->ParseCmd) {
4222  b085 e608          	ld	a,(8,x)
4224                     ; 2935               case 'm': i = 10; break;
4225  b087 a061          	sub	a,#97
4226  b089 270b          	jreq	L3601
4227  b08b a00b          	sub	a,#11
4228  b08d 270b          	jreq	L5601
4229  b08f 4a            	dec	a
4230  b090 2708          	jreq	L5601
4231  b092 7b04          	ld	a,(OFST+0,sp)
4232  b094 2008          	jra	L7061
4233  b096               L3601:
4234                     ; 2933               case 'a': i = 19; break;
4236  b096 a613          	ld	a,#19
4239  b098 2002          	jp	LC018
4240  b09a               L5601:
4241                     ; 2934               case 'l':
4241                     ; 2935               case 'm': i = 10; break;
4243  b09a a60a          	ld	a,#10
4244  b09c               LC018:
4245  b09c 6b04          	ld	(OFST+0,sp),a
4249  b09e               L7061:
4250                     ; 2937             parse_POST_string(pSocket->ParseCmd, i);
4252  b09e 160b          	ldw	y,(OFST+7,sp)
4253  b0a0 97            	ld	xl,a
4254  b0a1 90e608        	ld	a,(8,y)
4255  b0a4 95            	ld	xh,a
4256  b0a5 cdb71f        	call	_parse_POST_string
4258                     ; 2938             pBuffer = tmp_pBuffer;
4260  b0a8 ce0025        	ldw	x,_tmp_pBuffer
4261  b0ab 1f05          	ldw	(OFST+1,sp),x
4262                     ; 2939             nBytes = tmp_nBytes;
4264  b0ad ce0023        	ldw	x,_tmp_nBytes
4265  b0b0 1f09          	ldw	(OFST+5,sp),x
4266                     ; 2940 	    pSocket->nParseLeft = tmp_nParseLeft;
4268  b0b2 1e0b          	ldw	x,(OFST+7,sp)
4269  b0b4 c60022        	ld	a,_tmp_nParseLeft
4270  b0b7 e706          	ld	(6,x),a
4271                     ; 2941             if (break_while == 1) {
4273  b0b9 c60021        	ld	a,_break_while
4274  b0bc 4a            	dec	a
4275  b0bd 2696          	jrne	L5751
4276                     ; 2945 	      pSocket->ParseState = saved_parsestate;
4278  b0bf c6005a        	ld	a,_saved_parsestate
4279  b0c2 e70a          	ld	(10,x),a
4280                     ; 2946 	      break;
4282  b0c4 ccb37b        	jra	L3641
4283  b0c7               L7751:
4284                     ; 2953           else if (pSocket->ParseCmd == 'b') {
4286  b0c7 a162          	cp	a,#98
4287  b0c9 2654          	jrne	L5161
4288                     ; 2961 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4290  b0cb 725f0021      	clr	_break_while
4291                     ; 2963             tmp_pBuffer = pBuffer;
4293  b0cf 1e05          	ldw	x,(OFST+1,sp)
4294  b0d1 cf0025        	ldw	_tmp_pBuffer,x
4295                     ; 2964             tmp_nBytes = nBytes;
4297  b0d4 1e09          	ldw	x,(OFST+5,sp)
4298  b0d6 cf0023        	ldw	_tmp_nBytes,x
4299                     ; 2965 	    tmp_nParseLeft = pSocket->nParseLeft;
4301  b0d9 1e0b          	ldw	x,(OFST+7,sp)
4302  b0db e606          	ld	a,(6,x)
4303  b0dd c70022        	ld	_tmp_nParseLeft,a
4304                     ; 2966             parse_POST_address(pSocket->ParseCmd, pSocket->ParseNum);
4306  b0e0 e609          	ld	a,(9,x)
4307  b0e2 160b          	ldw	y,(OFST+7,sp)
4308  b0e4 97            	ld	xl,a
4309  b0e5 90e608        	ld	a,(8,y)
4310  b0e8 95            	ld	xh,a
4311  b0e9 cdb8a0        	call	_parse_POST_address
4313                     ; 2967             pBuffer = tmp_pBuffer;
4315  b0ec ce0025        	ldw	x,_tmp_pBuffer
4316  b0ef 1f05          	ldw	(OFST+1,sp),x
4317                     ; 2968             nBytes = tmp_nBytes;
4319  b0f1 ce0023        	ldw	x,_tmp_nBytes
4320  b0f4 1f09          	ldw	(OFST+5,sp),x
4321                     ; 2969 	    pSocket->nParseLeft = tmp_nParseLeft;
4323  b0f6 1e0b          	ldw	x,(OFST+7,sp)
4324  b0f8 c60022        	ld	a,_tmp_nParseLeft
4325  b0fb e706          	ld	(6,x),a
4326                     ; 2970             if (break_while == 1) {
4328  b0fd c60021        	ld	a,_break_while
4329  b100 a101          	cp	a,#1
4330  b102 260a          	jrne	L7161
4331                     ; 2974               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4333  b104 a604          	ld	a,#4
4334  b106 c7005a        	ld	_saved_parsestate,a
4335  b109 e70a          	ld	(10,x),a
4336                     ; 2975 	      break;
4338  b10b ccb37b        	jra	L3641
4339  b10e               L7161:
4340                     ; 2977             if (break_while == 2) {
4342  b10e a102          	cp	a,#2
4343  b110 2703ccb32c    	jrne	L5751
4344                     ; 2980               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4346  b115 a605          	ld	a,#5
4347  b117 c7005a        	ld	_saved_parsestate,a
4348  b11a e70a          	ld	(10,x),a
4349                     ; 2981 	      break;
4351  b11c ccb37b        	jra	L3641
4352  b11f               L5161:
4353                     ; 2988           else if (pSocket->ParseCmd == 'c') {
4355  b11f a163          	cp	a,#99
4356  b121 2651          	jrne	L5261
4357                     ; 2997 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4359  b123 725f0021      	clr	_break_while
4360                     ; 2999             tmp_pBuffer = pBuffer;
4362  b127 1e05          	ldw	x,(OFST+1,sp)
4363  b129 cf0025        	ldw	_tmp_pBuffer,x
4364                     ; 3000             tmp_nBytes = nBytes;
4366  b12c 1e09          	ldw	x,(OFST+5,sp)
4367  b12e cf0023        	ldw	_tmp_nBytes,x
4368                     ; 3001 	    tmp_nParseLeft = pSocket->nParseLeft;
4370  b131 1e0b          	ldw	x,(OFST+7,sp)
4371  b133 e606          	ld	a,(6,x)
4372  b135 c70022        	ld	_tmp_nParseLeft,a
4373                     ; 3002             parse_POST_port(pSocket->ParseCmd, pSocket->ParseNum);
4375  b138 e609          	ld	a,(9,x)
4376  b13a 160b          	ldw	y,(OFST+7,sp)
4377  b13c 97            	ld	xl,a
4378  b13d 90e608        	ld	a,(8,y)
4379  b140 95            	ld	xh,a
4380  b141 cdb9f8        	call	_parse_POST_port
4382                     ; 3003             pBuffer = tmp_pBuffer;
4384  b144 ce0025        	ldw	x,_tmp_pBuffer
4385  b147 1f05          	ldw	(OFST+1,sp),x
4386                     ; 3004             nBytes = tmp_nBytes;
4388  b149 ce0023        	ldw	x,_tmp_nBytes
4389  b14c 1f09          	ldw	(OFST+5,sp),x
4390                     ; 3005 	    pSocket->nParseLeft = tmp_nParseLeft;
4392  b14e 1e0b          	ldw	x,(OFST+7,sp)
4393  b150 c60022        	ld	a,_tmp_nParseLeft
4394  b153 e706          	ld	(6,x),a
4395                     ; 3006             if (break_while == 1) {
4397  b155 c60021        	ld	a,_break_while
4398  b158 a101          	cp	a,#1
4399  b15a 260a          	jrne	L7261
4400                     ; 3009               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4402  b15c a604          	ld	a,#4
4403  b15e c7005a        	ld	_saved_parsestate,a
4404  b161 e70a          	ld	(10,x),a
4405                     ; 3010 	      break;
4407  b163 ccb37b        	jra	L3641
4408  b166               L7261:
4409                     ; 3012             if (break_while == 2) {
4411  b166 a102          	cp	a,#2
4412  b168 26a8          	jrne	L5751
4413                     ; 3015               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4415  b16a a605          	ld	a,#5
4416  b16c c7005a        	ld	_saved_parsestate,a
4417  b16f e70a          	ld	(10,x),a
4418                     ; 3016 	      break;
4420  b171 ccb37b        	jra	L3641
4421  b174               L5261:
4422                     ; 3023           else if (pSocket->ParseCmd == 'd') {
4424  b174 a164          	cp	a,#100
4425  b176 2703ccb216    	jrne	L5361
4426                     ; 3029 	    alpha[0] = '-';
4428  b17b 352d001b      	mov	_alpha,#45
4429                     ; 3030 	    alpha[1] = '-';
4431  b17f 352d001c      	mov	_alpha+1,#45
4432                     ; 3032 	    if (saved_postpartial_previous[0] == 'd') {
4434  b183 c60029        	ld	a,_saved_postpartial_previous
4435  b186 a164          	cp	a,#100
4436  b188 261a          	jrne	L7361
4437                     ; 3036 	      saved_postpartial_previous[0] = '\0';
4439  b18a 725f0029      	clr	_saved_postpartial_previous
4440                     ; 3042 	      if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
4442  b18e c6002d        	ld	a,_saved_postpartial_previous+4
4443  b191 2705          	jreq	L1461
4446  b193 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
4447  b198               L1461:
4448                     ; 3043 	      if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
4450  b198 c6002e        	ld	a,_saved_postpartial_previous+5
4451  b19b 270a          	jreq	L5461
4454  b19d 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
4455  b1a2 2003          	jra	L5461
4456  b1a4               L7361:
4457                     ; 3050               clear_saved_postpartial_data(); // Clear [4] and higher
4459  b1a4 cdb70a        	call	_clear_saved_postpartial_data
4461  b1a7               L5461:
4462                     ; 3053             if (alpha[0] == '-') {
4464  b1a7 c6001b        	ld	a,_alpha
4465  b1aa a12d          	cp	a,#45
4466  b1ac 261e          	jrne	L7461
4467                     ; 3054 	      alpha[0] = (uint8_t)(*pBuffer);
4469  b1ae 1e05          	ldw	x,(OFST+1,sp)
4470  b1b0 f6            	ld	a,(x)
4471  b1b1 c7001b        	ld	_alpha,a
4472                     ; 3055               saved_postpartial[4] = *pBuffer;
4474  b1b4 c70045        	ld	_saved_postpartial+4,a
4475                     ; 3056               pSocket->nParseLeft--;
4477  b1b7 1e0b          	ldw	x,(OFST+7,sp)
4478  b1b9 6a06          	dec	(6,x)
4479                     ; 3057               saved_nparseleft = pSocket->nParseLeft;
4481  b1bb e606          	ld	a,(6,x)
4482  b1bd c70059        	ld	_saved_nparseleft,a
4483                     ; 3058               pBuffer++;
4485  b1c0 1e05          	ldw	x,(OFST+1,sp)
4486  b1c2 5c            	incw	x
4487  b1c3 1f05          	ldw	(OFST+1,sp),x
4488                     ; 3059 	      nBytes--;
4490  b1c5 1e09          	ldw	x,(OFST+5,sp)
4491  b1c7 5a            	decw	x
4492  b1c8 1f09          	ldw	(OFST+5,sp),x
4493                     ; 3060               if (nBytes == 0) break; // Hit end of fragment. Break out of
4495  b1ca 27a5          	jreq	L3641
4498  b1cc               L7461:
4499                     ; 3064             if (alpha[1] == '-') {
4501  b1cc c6001c        	ld	a,_alpha+1
4502  b1cf a12d          	cp	a,#45
4503  b1d1 261c          	jrne	L3561
4504                     ; 3065 	      alpha[1] = (uint8_t)(*pBuffer);
4506  b1d3 1e05          	ldw	x,(OFST+1,sp)
4507  b1d5 f6            	ld	a,(x)
4508  b1d6 c7001c        	ld	_alpha+1,a
4509                     ; 3066               saved_postpartial[5] = *pBuffer;
4511  b1d9 c70046        	ld	_saved_postpartial+5,a
4512                     ; 3067               pSocket->nParseLeft--;
4514  b1dc 1e0b          	ldw	x,(OFST+7,sp)
4515  b1de 6a06          	dec	(6,x)
4516                     ; 3068               saved_nparseleft = pSocket->nParseLeft;
4518  b1e0 e606          	ld	a,(6,x)
4519  b1e2 c70059        	ld	_saved_nparseleft,a
4520                     ; 3069               pBuffer++;
4522  b1e5 1e05          	ldw	x,(OFST+1,sp)
4523  b1e7 5c            	incw	x
4524  b1e8 1f05          	ldw	(OFST+1,sp),x
4525                     ; 3070 	      nBytes--;
4527  b1ea 1e09          	ldw	x,(OFST+5,sp)
4528  b1ec 5a            	decw	x
4529  b1ed 1f09          	ldw	(OFST+5,sp),x
4530  b1ef               L3561:
4531                     ; 3076             clear_saved_postpartial_all();
4533  b1ef cdb6f6        	call	_clear_saved_postpartial_all
4535                     ; 3078             SetMAC(pSocket->ParseNum, alpha[0], alpha[1]);
4537  b1f2 3b001c        	push	_alpha+1
4538  b1f5 c6001b        	ld	a,_alpha
4539  b1f8 160c          	ldw	y,(OFST+8,sp)
4540  b1fa 97            	ld	xl,a
4541  b1fb 90e609        	ld	a,(9,y)
4542  b1fe 95            	ld	xh,a
4543  b1ff cdbc02        	call	_SetMAC
4545  b202 84            	pop	a
4546                     ; 3080             if (nBytes == 0) {
4548  b203 1e09          	ldw	x,(OFST+5,sp)
4549  b205 2703ccb32c    	jrne	L5751
4550                     ; 3083 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4552  b20a a605          	ld	a,#5
4553  b20c c7005a        	ld	_saved_parsestate,a
4554  b20f 1e0b          	ldw	x,(OFST+7,sp)
4555  b211 e70a          	ld	(10,x),a
4556                     ; 3084 	      break;
4558  b213 ccb37b        	jra	L3641
4559  b216               L5361:
4560                     ; 3091 	  else if (pSocket->ParseCmd == 'g') {
4562  b216 a167          	cp	a,#103
4563  b218 2703ccb31f    	jrne	L1661
4564                     ; 3102             for (i=0; i<6; i++) alpha[i] = '-';
4566  b21d 4f            	clr	a
4567  b21e 6b04          	ld	(OFST+0,sp),a
4569  b220               L3661:
4572  b220 5f            	clrw	x
4573  b221 97            	ld	xl,a
4574  b222 a62d          	ld	a,#45
4575  b224 d7001b        	ld	(_alpha,x),a
4578  b227 0c04          	inc	(OFST+0,sp)
4582  b229 7b04          	ld	a,(OFST+0,sp)
4583  b22b a106          	cp	a,#6
4584  b22d 25f1          	jrult	L3661
4585                     ; 3104 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4587  b22f 725f0021      	clr	_break_while
4588                     ; 3107 	    if (saved_postpartial_previous[0] == 'g') {
4590  b233 c60029        	ld	a,_saved_postpartial_previous
4591  b236 a167          	cp	a,#103
4592  b238 2621          	jrne	L1761
4593                     ; 3111 	      saved_postpartial_previous[0] = '\0';
4595  b23a 725f0029      	clr	_saved_postpartial_previous
4596                     ; 3117               for (i=0; i<6; i++) {
4598  b23e 4f            	clr	a
4599  b23f 6b04          	ld	(OFST+0,sp),a
4601  b241               L3761:
4602                     ; 3118                 if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
4604  b241 5f            	clrw	x
4605  b242 97            	ld	xl,a
4606  b243 724d002d      	tnz	(_saved_postpartial_previous+4,x)
4607  b247 2708          	jreq	L1071
4610  b249 5f            	clrw	x
4611  b24a 97            	ld	xl,a
4612  b24b d6002d        	ld	a,(_saved_postpartial_previous+4,x)
4613  b24e d7001b        	ld	(_alpha,x),a
4614  b251               L1071:
4615                     ; 3117               for (i=0; i<6; i++) {
4617  b251 0c04          	inc	(OFST+0,sp)
4621  b253 7b04          	ld	a,(OFST+0,sp)
4622  b255 a106          	cp	a,#6
4623  b257 25e8          	jrult	L3761
4625  b259 2003          	jra	L3071
4626  b25b               L1761:
4627                     ; 3126               clear_saved_postpartial_data(); // Clear [4] and higher
4629  b25b cdb70a        	call	_clear_saved_postpartial_data
4631  b25e               L3071:
4632                     ; 3129             for (i=0; i<6; i++) {
4634  b25e 4f            	clr	a
4635  b25f 6b04          	ld	(OFST+0,sp),a
4637  b261               L5071:
4638                     ; 3135               if (alpha[i] == '-') {
4640  b261 5f            	clrw	x
4641  b262 97            	ld	xl,a
4642  b263 d6001b        	ld	a,(_alpha,x)
4643  b266 a12d          	cp	a,#45
4644  b268 2636          	jrne	L3171
4645                     ; 3136 	        alpha[i] = (uint8_t)(*pBuffer);
4647  b26a 7b04          	ld	a,(OFST+0,sp)
4648  b26c 5f            	clrw	x
4649  b26d 1605          	ldw	y,(OFST+1,sp)
4650  b26f 97            	ld	xl,a
4651  b270 90f6          	ld	a,(y)
4652  b272 d7001b        	ld	(_alpha,x),a
4653                     ; 3137                 saved_postpartial[i+4] = *pBuffer;
4655  b275 5f            	clrw	x
4656  b276 7b04          	ld	a,(OFST+0,sp)
4657  b278 97            	ld	xl,a
4658  b279 90f6          	ld	a,(y)
4659  b27b d70045        	ld	(_saved_postpartial+4,x),a
4660                     ; 3138                 pSocket->nParseLeft--;
4662  b27e 1e0b          	ldw	x,(OFST+7,sp)
4663  b280 6a06          	dec	(6,x)
4664                     ; 3139                 saved_nparseleft = pSocket->nParseLeft;
4666  b282 e606          	ld	a,(6,x)
4667  b284 c70059        	ld	_saved_nparseleft,a
4668                     ; 3140                 pBuffer++;
4670  b287 93            	ldw	x,y
4671  b288 5c            	incw	x
4672  b289 1f05          	ldw	(OFST+1,sp),x
4673                     ; 3141 	        nBytes--;
4675  b28b 1e09          	ldw	x,(OFST+5,sp)
4676  b28d 5a            	decw	x
4677  b28e 1f09          	ldw	(OFST+5,sp),x
4678                     ; 3142                 if (i != 5 && nBytes == 0) {
4680  b290 7b04          	ld	a,(OFST+0,sp)
4681  b292 a105          	cp	a,#5
4682  b294 270a          	jreq	L3171
4684  b296 1e09          	ldw	x,(OFST+5,sp)
4685  b298 2606          	jrne	L3171
4686                     ; 3143 		  break_while = 1; // Hit end of fragment. Break out of
4688  b29a 35010021      	mov	_break_while,#1
4689                     ; 3145 		  break; // Break out of for() loop
4691  b29e 2008          	jra	L1171
4692  b2a0               L3171:
4693                     ; 3129             for (i=0; i<6; i++) {
4695  b2a0 0c04          	inc	(OFST+0,sp)
4699  b2a2 7b04          	ld	a,(OFST+0,sp)
4700  b2a4 a106          	cp	a,#6
4701  b2a6 25b9          	jrult	L5071
4702  b2a8               L1171:
4703                     ; 3149 	    if (break_while == 1) {
4705  b2a8 c60021        	ld	a,_break_while
4706  b2ab 4a            	dec	a
4707  b2ac 2603ccb37b    	jreq	L3641
4708                     ; 3151 	      break;
4710                     ; 3157             clear_saved_postpartial_all();
4712  b2b1 cdb6f6        	call	_clear_saved_postpartial_all
4714                     ; 3160 	    if (alpha[0] != '0' && alpha[0] != '1') alpha[0] = '0';
4716  b2b4 c6001b        	ld	a,_alpha
4717  b2b7 a130          	cp	a,#48
4718  b2b9 2708          	jreq	L1271
4720  b2bb a131          	cp	a,#49
4721  b2bd 2704          	jreq	L1271
4724  b2bf 3530001b      	mov	_alpha,#48
4725  b2c3               L1271:
4726                     ; 3161 	    if (alpha[1] != '0' && alpha[1] != '1') alpha[1] = '0';
4728  b2c3 c6001c        	ld	a,_alpha+1
4729  b2c6 a130          	cp	a,#48
4730  b2c8 2708          	jreq	L3271
4732  b2ca a131          	cp	a,#49
4733  b2cc 2704          	jreq	L3271
4736  b2ce 3530001c      	mov	_alpha+1,#48
4737  b2d2               L3271:
4738                     ; 3162 	    if (alpha[2] != '0' && alpha[2] != '1' && alpha[2] != '2') alpha[2] = '2';
4740  b2d2 c6001d        	ld	a,_alpha+2
4741  b2d5 a130          	cp	a,#48
4742  b2d7 270c          	jreq	L5271
4744  b2d9 a131          	cp	a,#49
4745  b2db 2708          	jreq	L5271
4747  b2dd a132          	cp	a,#50
4748  b2df 2704          	jreq	L5271
4751  b2e1 3532001d      	mov	_alpha+2,#50
4752  b2e5               L5271:
4753                     ; 3163 	    if (alpha[3] != '0' && alpha[3] != '1') alpha[3] = '0';
4755  b2e5 c6001e        	ld	a,_alpha+3
4756  b2e8 a130          	cp	a,#48
4757  b2ea 2708          	jreq	L7271
4759  b2ec a131          	cp	a,#49
4760  b2ee 2704          	jreq	L7271
4763  b2f0 3530001e      	mov	_alpha+3,#48
4764  b2f4               L7271:
4765                     ; 3165 	    Pending_config_settings[0] = (uint8_t)alpha[0];
4767  b2f4 55001b011b    	mov	_Pending_config_settings,_alpha
4768                     ; 3166             Pending_config_settings[1] = (uint8_t)alpha[1];
4770  b2f9 55001c011c    	mov	_Pending_config_settings+1,_alpha+1
4771                     ; 3167             Pending_config_settings[2] = (uint8_t)alpha[2];
4773  b2fe 55001d011d    	mov	_Pending_config_settings+2,_alpha+2
4774                     ; 3168             Pending_config_settings[3] = (uint8_t)alpha[3];
4776  b303 55001e011e    	mov	_Pending_config_settings+3,_alpha+3
4777                     ; 3169             Pending_config_settings[4] = '0';
4779  b308 3530011f      	mov	_Pending_config_settings+4,#48
4780                     ; 3170             Pending_config_settings[5] = '0';
4782  b30c 35300120      	mov	_Pending_config_settings+5,#48
4783                     ; 3172             if (nBytes == 0) {
4785  b310 1e09          	ldw	x,(OFST+5,sp)
4786  b312 2618          	jrne	L5751
4787                     ; 3175 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4789  b314 a605          	ld	a,#5
4790  b316 c7005a        	ld	_saved_parsestate,a
4791  b319 1e0b          	ldw	x,(OFST+7,sp)
4792  b31b e70a          	ld	(10,x),a
4793                     ; 3176 	      break;
4795  b31d 205c          	jra	L3641
4796  b31f               L1661:
4797                     ; 3183 	  else if (pSocket->ParseCmd == 'z') {
4799  b31f a17a          	cp	a,#122
4800  b321 2609          	jrne	L5751
4801                     ; 3208 	    nBytes = 0;
4803  b323 5f            	clrw	x
4804  b324 1f09          	ldw	(OFST+5,sp),x
4805                     ; 3209 	    pSocket->nParseLeft = 0;
4807  b326 1e0b          	ldw	x,(OFST+7,sp)
4808  b328 6f06          	clr	(6,x)
4809                     ; 3210             break; // Break out of the while loop. We're done with POST.
4811  b32a 204f          	jra	L3641
4812  b32c               L5751:
4813                     ; 3221           pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4815  b32c a605          	ld	a,#5
4816  b32e c7005a        	ld	_saved_parsestate,a
4817  b331 1e0b          	ldw	x,(OFST+7,sp)
4818  b333 e70a          	ld	(10,x),a
4819                     ; 3223           if (pSocket->nParseLeft < 30) {
4821  b335 e606          	ld	a,(6,x)
4822  b337 a11e          	cp	a,#30
4823  b339 2503ccaefa    	jruge	L1641
4824                     ; 3238 	    if (pSocket->nParseLeftAddl > 0) {
4826  b33e 6d07          	tnz	(7,x)
4827  b340 27f9          	jreq	L1641
4828                     ; 3239 	      pSocket->nParseLeft += pSocket->nParseLeftAddl;
4830  b342 eb07          	add	a,(7,x)
4831  b344 e706          	ld	(6,x),a
4832                     ; 3240 	      pSocket->nParseLeftAddl = 0;
4834  b346 6f07          	clr	(7,x)
4835                     ; 3241 	      saved_nparseleft = pSocket->nParseLeft;
4837  b348 c70059        	ld	_saved_nparseleft,a
4838  b34b ccaefa        	jra	L1641
4839  b34e               L1651:
4840                     ; 3246         else if (pSocket->ParseState == PARSE_DELIM) {
4842  b34e a105          	cp	a,#5
4843  b350 26f9          	jrne	L1641
4844                     ; 3247           if (pSocket->nParseLeft > 0) {
4846  b352 e606          	ld	a,(6,x)
4847  b354 2720          	jreq	L7471
4848                     ; 3250             pSocket->ParseState = saved_parsestate = PARSE_CMD;
4850  b356 725f005a      	clr	_saved_parsestate
4851  b35a 6f0a          	clr	(10,x)
4852                     ; 3251             pSocket->nParseLeft--;
4854  b35c 6a06          	dec	(6,x)
4855                     ; 3252             saved_nparseleft = pSocket->nParseLeft;
4857  b35e e606          	ld	a,(6,x)
4858  b360 c70059        	ld	_saved_nparseleft,a
4859                     ; 3253             pBuffer++;
4861  b363 1e05          	ldw	x,(OFST+1,sp)
4862  b365 5c            	incw	x
4863  b366 1f05          	ldw	(OFST+1,sp),x
4864                     ; 3254 	    nBytes--;
4866  b368 1e09          	ldw	x,(OFST+5,sp)
4867  b36a 5a            	decw	x
4868  b36b 1f09          	ldw	(OFST+5,sp),x
4869                     ; 3256 	    clear_saved_postpartial_all();
4871  b36d cdb6f6        	call	_clear_saved_postpartial_all
4873                     ; 3260             if (nBytes == 0) {
4875  b370 1e09          	ldw	x,(OFST+5,sp)
4876  b372 26d7          	jrne	L1641
4877                     ; 3261 	      break; // Hit end of fragment but still have more to parse in
4879  b374 2005          	jra	L3641
4880  b376               L7471:
4881                     ; 3271             pSocket->nParseLeft = 0; // End the parsing
4883  b376 e706          	ld	(6,x),a
4884                     ; 3272 	    nBytes = 0;
4886  b378 5f            	clrw	x
4887  b379 1f09          	ldw	(OFST+5,sp),x
4888                     ; 3273 	    break; // Exit parsing
4889  b37b               L3641:
4890                     ; 3300       if (pSocket->nParseLeft == 0) {
4892  b37b 1e0b          	ldw	x,(OFST+7,sp)
4893  b37d e606          	ld	a,(6,x)
4894  b37f 264e          	jrne	L5571
4895                     ; 3303 	saved_nstate = STATE_NULL;
4897  b381 357f005b      	mov	_saved_nstate,#127
4898                     ; 3304 	saved_parsestate = PARSE_CMD;
4900  b385 c7005a        	ld	_saved_parsestate,a
4901                     ; 3305         saved_nparseleft = 0;
4903  b388 c70059        	ld	_saved_nparseleft,a
4904                     ; 3306         saved_newlines = 0;
4906  b38b c70028        	ld	_saved_newlines,a
4907                     ; 3307 	for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i] = '\0';
4909  b38e 6b04          	ld	(OFST+0,sp),a
4911  b390               L7571:
4914  b390 5f            	clrw	x
4915  b391 97            	ld	xl,a
4916  b392 724f0041      	clr	(_saved_postpartial,x)
4917  b396 5f            	clrw	x
4918  b397 97            	ld	xl,a
4919  b398 724f0029      	clr	(_saved_postpartial_previous,x)
4922  b39c 0c04          	inc	(OFST+0,sp)
4926  b39e 7b04          	ld	a,(OFST+0,sp)
4927  b3a0 a118          	cp	a,#24
4928  b3a2 25ec          	jrult	L7571
4929                     ; 3313 	parse_complete = 1;
4931  b3a4 35010102      	mov	_parse_complete,#1
4932                     ; 3314 	pSocket->nState = STATE_SENDHEADER;
4934  b3a8 1e0b          	ldw	x,(OFST+7,sp)
4935  b3aa a60b          	ld	a,#11
4936  b3ac f7            	ld	(x),a
4937                     ; 3326         if (current_webpage == WEBPAGE_IOCONTROL) {
4939  b3ad c6001a        	ld	a,_current_webpage
4940  b3b0 260c          	jrne	L5671
4941                     ; 3327           pSocket->pData = g_HtmlPageIOControl;
4943  b3b2 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4944  b3b6 ef01          	ldw	(1,x),y
4945                     ; 3328           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4947  b3b8 90ae0c06      	ldw	y,#3078
4948  b3bc ef03          	ldw	(3,x),y
4949  b3be               L5671:
4950                     ; 3330         if (current_webpage == WEBPAGE_CONFIGURATION) {
4952  b3be 4a            	dec	a
4953  b3bf 2612          	jrne	L7541
4954                     ; 3331           pSocket->pData = g_HtmlPageConfiguration;
4956  b3c1 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
4957  b3c5 ef01          	ldw	(1,x),y
4958                     ; 3332           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
4960  b3c7 90ae0c5c      	ldw	y,#3164
4961  b3cb ef03          	ldw	(3,x),y
4962  b3cd 2004          	jra	L7541
4963  b3cf               L5571:
4964                     ; 3352 	uip_len = 0;
4966  b3cf 5f            	clrw	x
4967  b3d0 cf036b        	ldw	_uip_len,x
4968  b3d3               L7541:
4969                     ; 3356     if (pSocket->nState == STATE_PARSEGET) {
4971  b3d3 1e0b          	ldw	x,(OFST+7,sp)
4972  b3d5 f6            	ld	a,(x)
4973  b3d6 a10d          	cp	a,#13
4974  b3d8 2703ccb60a    	jrne	L3771
4976  b3dd ccb603        	jra	L7771
4977  b3e0               L5771:
4978                     ; 3385         if (pSocket->ParseState == PARSE_SLASH1) {
4980  b3e0 1e0b          	ldw	x,(OFST+7,sp)
4981  b3e2 e60a          	ld	a,(10,x)
4982  b3e4 a106          	cp	a,#6
4983  b3e6 263c          	jrne	L3002
4984                     ; 3388           pSocket->ParseCmd = *pBuffer;
4986  b3e8 1e05          	ldw	x,(OFST+1,sp)
4987  b3ea f6            	ld	a,(x)
4988  b3eb 1e0b          	ldw	x,(OFST+7,sp)
4989  b3ed e708          	ld	(8,x),a
4990                     ; 3389           pSocket->nParseLeft--;
4992  b3ef 6a06          	dec	(6,x)
4993                     ; 3390           pBuffer++;
4995  b3f1 1e05          	ldw	x,(OFST+1,sp)
4996  b3f3 5c            	incw	x
4997  b3f4 1f05          	ldw	(OFST+1,sp),x
4998                     ; 3391 	  nBytes--;
5000  b3f6 1e09          	ldw	x,(OFST+5,sp)
5001  b3f8 5a            	decw	x
5002  b3f9 1f09          	ldw	(OFST+5,sp),x
5003                     ; 3392 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
5005  b3fb 1e0b          	ldw	x,(OFST+7,sp)
5006  b3fd e608          	ld	a,(8,x)
5007  b3ff a12f          	cp	a,#47
5008  b401 2605          	jrne	L5002
5009                     ; 3393 	    pSocket->ParseState = PARSE_NUM10;
5011  b403 a601          	ld	a,#1
5013  b405 ccb49e        	jp	LC022
5014  b408               L5002:
5015                     ; 3397 	    current_webpage = WEBPAGE_IOCONTROL;
5017  b408 725f001a      	clr	_current_webpage
5018                     ; 3398             pSocket->pData = g_HtmlPageIOControl;
5020  b40c 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5021  b410 ef01          	ldw	(1,x),y
5022                     ; 3399             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5024  b412 90ae0c06      	ldw	y,#3078
5025  b416 ef03          	ldw	(3,x),y
5026                     ; 3400             pSocket->nParseLeft = 0; // This will cause the while() to exit
5028  b418 6f06          	clr	(6,x)
5029                     ; 3402             pSocket->nState = STATE_CONNECTED;
5031  b41a 7f            	clr	(x)
5032                     ; 3403             pSocket->nPrevBytes = 0xFFFF;
5034  b41b 90aeffff      	ldw	y,#65535
5035  b41f ef0b          	ldw	(11,x),y
5036  b421 ccb5f2        	jra	L1102
5037  b424               L3002:
5038                     ; 3407         else if (pSocket->ParseState == PARSE_NUM10) {
5040  b424 a101          	cp	a,#1
5041  b426 2640          	jrne	L3102
5042                     ; 3412 	  if (*pBuffer == ' ') {
5044  b428 1e05          	ldw	x,(OFST+1,sp)
5045  b42a f6            	ld	a,(x)
5046  b42b a120          	cp	a,#32
5047  b42d 261e          	jrne	L5102
5048                     ; 3413 	    current_webpage = WEBPAGE_IOCONTROL;
5050  b42f 725f001a      	clr	_current_webpage
5051                     ; 3414             pSocket->pData = g_HtmlPageIOControl;
5053  b433 1e0b          	ldw	x,(OFST+7,sp)
5054  b435 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5055  b439 ef01          	ldw	(1,x),y
5056                     ; 3415             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5058  b43b 90ae0c06      	ldw	y,#3078
5059  b43f ef03          	ldw	(3,x),y
5060                     ; 3416             pSocket->nParseLeft = 0;
5062  b441 6f06          	clr	(6,x)
5063                     ; 3418             pSocket->nState = STATE_CONNECTED;
5065  b443 7f            	clr	(x)
5066                     ; 3419             pSocket->nPrevBytes = 0xFFFF;
5068  b444 90aeffff      	ldw	y,#65535
5069  b448 ef0b          	ldw	(11,x),y
5071  b44a ccb5f2        	jra	L1102
5072  b44d               L5102:
5073                     ; 3423 	  else if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5075  b44d a130          	cp	a,#48
5076  b44f 2547          	jrult	L1302
5078  b451 a13a          	cp	a,#58
5079  b453 2443          	jruge	L1302
5080                     ; 3425             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
5082  b455 97            	ld	xl,a
5083  b456 a60a          	ld	a,#10
5084  b458 42            	mul	x,a
5085  b459 9f            	ld	a,xl
5086  b45a 1e0b          	ldw	x,(OFST+7,sp)
5087  b45c a0e0          	sub	a,#224
5088  b45e e709          	ld	(9,x),a
5089                     ; 3426 	    pSocket->ParseState = PARSE_NUM1;
5091  b460 a602          	ld	a,#2
5092  b462 e70a          	ld	(10,x),a
5093                     ; 3427             pSocket->nParseLeft--;
5095  b464 6a06          	dec	(6,x)
5096                     ; 3428             pBuffer++;
5097                     ; 3429 	    nBytes--;
5099  b466 2023          	jp	LC024
5100                     ; 3434             pSocket->nParseLeft = 0;
5101                     ; 3435             pSocket->ParseState = PARSE_FAIL;
5102  b468               L3102:
5103                     ; 3440         else if (pSocket->ParseState == PARSE_NUM1) {
5105  b468 a102          	cp	a,#2
5106  b46a 2637          	jrne	L7202
5107                     ; 3441 	  if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
5109  b46c 1e05          	ldw	x,(OFST+1,sp)
5110  b46e f6            	ld	a,(x)
5111  b46f a130          	cp	a,#48
5112  b471 2525          	jrult	L1302
5114  b473 a13a          	cp	a,#58
5115  b475 2421          	jruge	L1302
5116                     ; 3443             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
5118  b477 1605          	ldw	y,(OFST+1,sp)
5119  b479 1e0b          	ldw	x,(OFST+7,sp)
5120  b47b 90f6          	ld	a,(y)
5121  b47d a030          	sub	a,#48
5122  b47f eb09          	add	a,(9,x)
5123  b481 e709          	ld	(9,x),a
5124                     ; 3444             pSocket->ParseState = PARSE_VAL;
5126  b483 a604          	ld	a,#4
5127  b485 e70a          	ld	(10,x),a
5128                     ; 3445             pSocket->nParseLeft = 1; // Set to 1 so PARSE_VAL will be called
5130  b487 a601          	ld	a,#1
5131  b489 e706          	ld	(6,x),a
5132                     ; 3446             pBuffer++;
5134                     ; 3447 	    nBytes--;
5136  b48b               LC024:
5138  b48b 1e05          	ldw	x,(OFST+1,sp)
5139  b48d 5c            	incw	x
5140  b48e 1f05          	ldw	(OFST+1,sp),x
5142  b490 1e09          	ldw	x,(OFST+5,sp)
5143  b492 5a            	decw	x
5144  b493 1f09          	ldw	(OFST+5,sp),x
5146  b495 ccb5f2        	jra	L1102
5147  b498               L1302:
5148                     ; 3452             pSocket->nParseLeft = 0;
5150                     ; 3453             pSocket->ParseState = PARSE_FAIL;
5153  b498 1e0b          	ldw	x,(OFST+7,sp)
5155  b49a a607          	ld	a,#7
5156  b49c 6f06          	clr	(6,x)
5157  b49e               LC022:
5158  b49e e70a          	ld	(10,x),a
5159  b4a0 ccb5f2        	jra	L1102
5160  b4a3               L7202:
5161                     ; 3457         else if (pSocket->ParseState == PARSE_VAL) {
5163  b4a3 a104          	cp	a,#4
5164  b4a5 26f9          	jrne	L1102
5165                     ; 3523           switch(pSocket->ParseNum)
5167  b4a7 e609          	ld	a,(9,x)
5169                     ; 3698 	      break;
5170  b4a9 a110          	cp	a,#16
5171  b4ab 2407          	jruge	L222
5172  b4ad 5f            	clrw	x
5173  b4ae 97            	ld	xl,a
5174  b4af 58            	sllw	x
5175  b4b0 de9d60        	ldw	x,(L422,x)
5176  b4b3 fc            	jp	(x)
5177  b4b4               L222:
5178  b4b4 a037          	sub	a,#55
5179  b4b6 2603ccb562    	jreq	L7211
5180  b4bb 4a            	dec	a
5181  b4bc 2603ccb569    	jreq	L1311
5182  b4c1 a004          	sub	a,#4
5183  b4c3 2603ccb56f    	jreq	L3311
5184  b4c8 4a            	dec	a
5185  b4c9 2603ccb57e    	jreq	L5311
5186  b4ce a004          	sub	a,#4
5187  b4d0 2603ccb58e    	jreq	L7311
5188  b4d5 4a            	dec	a
5189  b4d6 2603ccb599    	jreq	L1411
5190  b4db 4a            	dec	a
5191  b4dc 2603ccb5ac    	jreq	L3411
5192  b4e1 a018          	sub	a,#24
5193  b4e3 2603ccb5c1    	jreq	L5411
5194  b4e8 a008          	sub	a,#8
5195  b4ea 2603ccb5c7    	jreq	L7411
5196  b4ef ccb5d7        	jra	L1511
5197  b4f2               L7601:
5198                     ; 3571 	    case 0:  IO_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
5200  b4f2 72110169      	bres	_IO_8to1,#0
5203  b4f6 ccb5ee        	jra	L3402
5204  b4f9               L1701:
5205                     ; 3572 	    case 1:  IO_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
5207  b4f9 72100169      	bset	_IO_8to1,#0
5210  b4fd ccb5ee        	jra	L3402
5211  b500               L3701:
5212                     ; 3573 	    case 2:  IO_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
5214  b500 72130169      	bres	_IO_8to1,#1
5217  b504 ccb5ee        	jra	L3402
5218  b507               L5701:
5219                     ; 3574 	    case 3:  IO_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
5221  b507 72120169      	bset	_IO_8to1,#1
5224  b50b ccb5ee        	jra	L3402
5225  b50e               L7701:
5226                     ; 3575 	    case 4:  IO_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
5228  b50e 72150169      	bres	_IO_8to1,#2
5231  b512 ccb5ee        	jra	L3402
5232  b515               L1011:
5233                     ; 3576 	    case 5:  IO_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
5235  b515 72140169      	bset	_IO_8to1,#2
5238  b519 ccb5ee        	jra	L3402
5239  b51c               L3011:
5240                     ; 3577 	    case 6:  IO_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
5242  b51c 72170169      	bres	_IO_8to1,#3
5245  b520 ccb5ee        	jra	L3402
5246  b523               L5011:
5247                     ; 3578 	    case 7:  IO_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
5249  b523 72160169      	bset	_IO_8to1,#3
5252  b527 ccb5ee        	jra	L3402
5253  b52a               L7011:
5254                     ; 3579 	    case 8:  IO_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
5256  b52a 72190169      	bres	_IO_8to1,#4
5259  b52e ccb5ee        	jra	L3402
5260  b531               L1111:
5261                     ; 3580 	    case 9:  IO_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
5263  b531 72180169      	bset	_IO_8to1,#4
5266  b535 ccb5ee        	jra	L3402
5267  b538               L3111:
5268                     ; 3581 	    case 10: IO_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
5270  b538 721b0169      	bres	_IO_8to1,#5
5273  b53c ccb5ee        	jra	L3402
5274  b53f               L5111:
5275                     ; 3582 	    case 11: IO_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
5277  b53f 721a0169      	bset	_IO_8to1,#5
5280  b543 ccb5ee        	jra	L3402
5281  b546               L7111:
5282                     ; 3583 	    case 12: IO_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
5284  b546 721d0169      	bres	_IO_8to1,#6
5287  b54a ccb5ee        	jra	L3402
5288  b54d               L1211:
5289                     ; 3584 	    case 13: IO_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
5291  b54d 721c0169      	bset	_IO_8to1,#6
5294  b551 ccb5ee        	jra	L3402
5295  b554               L3211:
5296                     ; 3585 	    case 14: IO_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
5298  b554 721f0169      	bres	_IO_8to1,#7
5301  b558 ccb5ee        	jra	L3402
5302  b55b               L5211:
5303                     ; 3586 	    case 15: IO_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
5305  b55b 721e0169      	bset	_IO_8to1,#7
5308  b55f ccb5ee        	jra	L3402
5309  b562               L7211:
5310                     ; 3588 	    case 55:
5310                     ; 3589   	      IO_8to1 = (uint8_t)0xff; // Relays 1-8 ON
5312  b562 35ff0169      	mov	_IO_8to1,#255
5313                     ; 3590 	      break;
5315  b566 ccb5ee        	jra	L3402
5316  b569               L1311:
5317                     ; 3592 	    case 56:
5317                     ; 3593               IO_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
5319  b569 c70169        	ld	_IO_8to1,a
5320                     ; 3594 	      break;
5322  b56c ccb5ee        	jra	L3402
5323  b56f               L3311:
5324                     ; 3601 	    case 60: // Show IO Control page
5324                     ; 3602 	      current_webpage = WEBPAGE_IOCONTROL;
5326  b56f c7001a        	ld	_current_webpage,a
5327                     ; 3603               pSocket->pData = g_HtmlPageIOControl;
5329  b572 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5330  b576 ef01          	ldw	(1,x),y
5331                     ; 3604               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5333  b578 90ae0c06      	ldw	y,#3078
5334                     ; 3605               pSocket->nState = STATE_CONNECTED;
5335                     ; 3606               pSocket->nPrevBytes = 0xFFFF;
5336                     ; 3607 	      break;
5338  b57c 2029          	jp	LC021
5339  b57e               L5311:
5340                     ; 3609 	    case 61: // Show Configuration page
5340                     ; 3610 	      current_webpage = WEBPAGE_CONFIGURATION;
5342  b57e 3501001a      	mov	_current_webpage,#1
5343                     ; 3611               pSocket->pData = g_HtmlPageConfiguration;
5345  b582 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5346  b586 ef01          	ldw	(1,x),y
5347                     ; 3612               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5349  b588 90ae0c5c      	ldw	y,#3164
5350                     ; 3613               pSocket->nState = STATE_CONNECTED;
5351                     ; 3614               pSocket->nPrevBytes = 0xFFFF;
5352                     ; 3615 	      break;
5354  b58c 2019          	jp	LC021
5355  b58e               L7311:
5356                     ; 3635 	    case 65: // Flash LED for diagnostics
5356                     ; 3636 	      // XXXXXXXXXXXXXXXXXXXXXX
5356                     ; 3637 	      // XXXXXXXXXXXXXXXXXXXXXX
5356                     ; 3638 	      // XXXXXXXXXXXXXXXXXXXXXX
5356                     ; 3639 	      debugflash();
5358  b58e cdce99        	call	_debugflash
5360                     ; 3640 	      debugflash();
5362  b591 cdce99        	call	_debugflash
5364                     ; 3641 	      debugflash();
5366  b594 cdce99        	call	_debugflash
5368                     ; 3645 	      break;
5370  b597 2055          	jra	L3402
5371  b599               L1411:
5372                     ; 3648             case 66: // Show statistics page
5372                     ; 3649 	      current_webpage = WEBPAGE_STATS;
5374  b599 3505001a      	mov	_current_webpage,#5
5375                     ; 3650               pSocket->pData = g_HtmlPageStats;
5377  b59d 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5378  b5a1 ef01          	ldw	(1,x),y
5379                     ; 3651               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5381  b5a3 90ae0150      	ldw	y,#336
5382                     ; 3652               pSocket->nState = STATE_CONNECTED;
5384  b5a7               LC021:
5385  b5a7 ef03          	ldw	(3,x),y
5389  b5a9 f7            	ld	(x),a
5390                     ; 3653               pSocket->nPrevBytes = 0xFFFF;
5391                     ; 3654 	      break;
5393  b5aa 203c          	jp	LC019
5394  b5ac               L3411:
5395                     ; 3656             case 67: // Clear statistics
5395                     ; 3657 	      uip_init_stats();
5397  b5ac cde79d        	call	_uip_init_stats
5399                     ; 3672 	      current_webpage = WEBPAGE_STATS;
5401  b5af 3505001a      	mov	_current_webpage,#5
5402                     ; 3673               pSocket->pData = g_HtmlPageStats;
5404  b5b3 1e0b          	ldw	x,(OFST+7,sp)
5405  b5b5 90ae98ec      	ldw	y,#L71_g_HtmlPageStats
5406  b5b9 ef01          	ldw	(1,x),y
5407                     ; 3674               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageStats) - 1);
5409  b5bb 90ae0150      	ldw	y,#336
5410                     ; 3675               pSocket->nState = STATE_CONNECTED;
5411                     ; 3676               pSocket->nPrevBytes = 0xFFFF;
5412                     ; 3677 	      break;
5414  b5bf 2024          	jp	LC020
5415  b5c1               L5411:
5416                     ; 3680 	    case 91: // Reboot
5416                     ; 3681 	      user_reboot_request = 1;
5418  b5c1 35010106      	mov	_user_reboot_request,#1
5419                     ; 3682 	      break;
5421  b5c5 2027          	jra	L3402
5422  b5c7               L7411:
5423                     ; 3684             case 99: // Show simplified IO state page
5423                     ; 3685 	      current_webpage = WEBPAGE_RSTATE;
5425  b5c7 3506001a      	mov	_current_webpage,#6
5426                     ; 3686               pSocket->pData = g_HtmlPageRstate;
5428  b5cb 90ae9a3d      	ldw	y,#L12_g_HtmlPageRstate
5429  b5cf ef01          	ldw	(1,x),y
5430                     ; 3687               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
5432  b5d1 90ae0087      	ldw	y,#135
5433                     ; 3688               pSocket->nState = STATE_CONNECTED;
5434                     ; 3689               pSocket->nPrevBytes = 0xFFFF;
5435                     ; 3690 	      break;
5437  b5d5 20d0          	jp	LC021
5438  b5d7               L1511:
5439                     ; 3692 	    default: // Show IO Control page
5439                     ; 3693 	      current_webpage = WEBPAGE_IOCONTROL;
5441  b5d7 725f001a      	clr	_current_webpage
5442                     ; 3694               pSocket->pData = g_HtmlPageIOControl;
5444  b5db 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5445  b5df ef01          	ldw	(1,x),y
5446                     ; 3695               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5448  b5e1 90ae0c06      	ldw	y,#3078
5449                     ; 3696               pSocket->nState = STATE_CONNECTED;
5451  b5e5               LC020:
5452  b5e5 ef03          	ldw	(3,x),y
5454  b5e7 7f            	clr	(x)
5455                     ; 3697               pSocket->nPrevBytes = 0xFFFF;
5457  b5e8               LC019:
5463  b5e8 90aeffff      	ldw	y,#65535
5464  b5ec ef0b          	ldw	(11,x),y
5465                     ; 3698 	      break;
5467  b5ee               L3402:
5468                     ; 3700           pSocket->nParseLeft = 0;
5470  b5ee 1e0b          	ldw	x,(OFST+7,sp)
5471  b5f0 6f06          	clr	(6,x)
5472  b5f2               L1102:
5473                     ; 3703         if (pSocket->ParseState == PARSE_FAIL) {
5475  b5f2 1e0b          	ldw	x,(OFST+7,sp)
5476  b5f4 e60a          	ld	a,(10,x)
5477  b5f6 a107          	cp	a,#7
5478                     ; 3708           pSocket->nState = STATE_SENDHEADER;
5479                     ; 3709 	  break;
5481  b5f8 2704          	jreq	LC025
5482                     ; 3712         if (pSocket->nParseLeft == 0) {
5484  b5fa e606          	ld	a,(6,x)
5485  b5fc 2605          	jrne	L7771
5486                     ; 3715           pSocket->nState = STATE_SENDHEADER;
5488  b5fe               LC025:
5490  b5fe a60b          	ld	a,#11
5491  b600 f7            	ld	(x),a
5492                     ; 3716           break;
5494  b601 2007          	jra	L3771
5495  b603               L7771:
5496                     ; 3384       while (nBytes != 0) {
5498  b603 1e09          	ldw	x,(OFST+5,sp)
5499  b605 2703ccb3e0    	jrne	L5771
5500  b60a               L3771:
5501                     ; 3721     if (pSocket->nState == STATE_SENDHEADER) {
5503  b60a 1e0b          	ldw	x,(OFST+7,sp)
5504  b60c f6            	ld	a,(x)
5505  b60d a10b          	cp	a,#11
5506  b60f 261c          	jrne	L3511
5507                     ; 3727       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5509  b611 cda41a        	call	_adjust_template_size
5511  b614 89            	pushw	x
5512  b615 ce036d        	ldw	x,_uip_appdata
5513  b618 cda579        	call	L5_CopyHttpHeader
5515  b61b 5b02          	addw	sp,#2
5516  b61d 89            	pushw	x
5517  b61e ce036d        	ldw	x,_uip_appdata
5518  b621 cdf114        	call	_uip_send
5520  b624 85            	popw	x
5521                     ; 3728       pSocket->nState = STATE_SENDDATA;
5523  b625 1e0b          	ldw	x,(OFST+7,sp)
5524  b627 a60c          	ld	a,#12
5525  b629 f7            	ld	(x),a
5526                     ; 3729       return;
5528  b62a ccad75        	jra	L252
5529  b62d               L3511:
5530                     ; 3732     senddata:
5530                     ; 3733     if (pSocket->nState == STATE_SENDDATA) {
5532  b62d 1e0b          	ldw	x,(OFST+7,sp)
5533  b62f f6            	ld	a,(x)
5534  b630 a10c          	cp	a,#12
5535  b632 26f6          	jrne	L252
5536                     ; 3740       if (pSocket->nDataLeft == 0) {
5538  b634 e604          	ld	a,(4,x)
5539  b636 ea03          	or	a,(3,x)
5540  b638 2605          	jrne	L5502
5541                     ; 3742         nBufSize = 0;
5543  b63a 5f            	clrw	x
5544  b63b 1f02          	ldw	(OFST-2,sp),x
5547  b63d 202f          	jra	L7502
5548  b63f               L5502:
5549                     ; 3745         pSocket->nPrevBytes = pSocket->nDataLeft;
5551  b63f 9093          	ldw	y,x
5552  b641 90ee03        	ldw	y,(3,y)
5553  b644 ef0b          	ldw	(11,x),y
5554                     ; 3746         nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5556  b646 ce0369        	ldw	x,_uip_conn
5557  b649 ee12          	ldw	x,(18,x)
5558  b64b 89            	pushw	x
5559  b64c 1e0d          	ldw	x,(OFST+9,sp)
5560  b64e 1c0003        	addw	x,#3
5561  b651 89            	pushw	x
5562  b652 1e0f          	ldw	x,(OFST+11,sp)
5563  b654 5c            	incw	x
5564  b655 89            	pushw	x
5565  b656 ce036d        	ldw	x,_uip_appdata
5566  b659 cda645        	call	L7_CopyHttpData
5568  b65c 5b06          	addw	sp,#6
5569  b65e 1f02          	ldw	(OFST-2,sp),x
5571                     ; 3747         pSocket->nPrevBytes -= pSocket->nDataLeft;
5573  b660 1e0b          	ldw	x,(OFST+7,sp)
5574  b662 e60c          	ld	a,(12,x)
5575  b664 e004          	sub	a,(4,x)
5576  b666 e70c          	ld	(12,x),a
5577  b668 e60b          	ld	a,(11,x)
5578  b66a e203          	sbc	a,(3,x)
5579  b66c e70b          	ld	(11,x),a
5580  b66e               L7502:
5581                     ; 3750       if (nBufSize == 0) {
5583  b66e 1e02          	ldw	x,(OFST-2,sp)
5584  b670 2621          	jrne	LC016
5585                     ; 3752         uip_close();
5587  b672               LC017:
5589  b672 351002c0      	mov	_uip_flags,#16
5591  b676 ccad75        	jra	L252
5592                     ; 3756         uip_send(uip_appdata, nBufSize);
5594                     ; 3758       return;
5596  b679               L5621:
5597                     ; 3762   else if (uip_rexmit()) {
5599  b679 720502c075    	btjf	_uip_flags,#2,L3621
5600                     ; 3763     if (pSocket->nPrevBytes == 0xFFFF) {
5602  b67e 160b          	ldw	y,(OFST+7,sp)
5603  b680 90ee0b        	ldw	y,(11,y)
5604  b683 905c          	incw	y
5605  b685 2617          	jrne	L1702
5606                     ; 3765       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5608  b687 cda41a        	call	_adjust_template_size
5610  b68a 89            	pushw	x
5611  b68b ce036d        	ldw	x,_uip_appdata
5612  b68e cda579        	call	L5_CopyHttpHeader
5614  b691 5b02          	addw	sp,#2
5616  b693               LC016:
5618  b693 89            	pushw	x
5619  b694 ce036d        	ldw	x,_uip_appdata
5620  b697 cdf114        	call	_uip_send
5621  b69a 85            	popw	x
5623  b69b ccad75        	jra	L252
5624  b69e               L1702:
5625                     ; 3768       pSocket->pData -= pSocket->nPrevBytes;
5627  b69e 1e0b          	ldw	x,(OFST+7,sp)
5628  b6a0 e602          	ld	a,(2,x)
5629  b6a2 e00c          	sub	a,(12,x)
5630  b6a4 e702          	ld	(2,x),a
5631  b6a6 e601          	ld	a,(1,x)
5632  b6a8 e20b          	sbc	a,(11,x)
5633  b6aa e701          	ld	(1,x),a
5634                     ; 3769       pSocket->nDataLeft += pSocket->nPrevBytes;
5636  b6ac e604          	ld	a,(4,x)
5637  b6ae eb0c          	add	a,(12,x)
5638  b6b0 e704          	ld	(4,x),a
5639  b6b2 e603          	ld	a,(3,x)
5640  b6b4 e90b          	adc	a,(11,x)
5641                     ; 3770       pSocket->nPrevBytes = pSocket->nDataLeft;
5643  b6b6 9093          	ldw	y,x
5644  b6b8 e703          	ld	(3,x),a
5645  b6ba 90ee03        	ldw	y,(3,y)
5646  b6bd ef0b          	ldw	(11,x),y
5647                     ; 3771       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5649  b6bf ce0369        	ldw	x,_uip_conn
5650  b6c2 ee12          	ldw	x,(18,x)
5651  b6c4 89            	pushw	x
5652  b6c5 1e0d          	ldw	x,(OFST+9,sp)
5653  b6c7 1c0003        	addw	x,#3
5654  b6ca 89            	pushw	x
5655  b6cb 1e0f          	ldw	x,(OFST+11,sp)
5656  b6cd 5c            	incw	x
5657  b6ce 89            	pushw	x
5658  b6cf ce036d        	ldw	x,_uip_appdata
5659  b6d2 cda645        	call	L7_CopyHttpData
5661  b6d5 5b06          	addw	sp,#6
5662  b6d7 1f02          	ldw	(OFST-2,sp),x
5664                     ; 3772       pSocket->nPrevBytes -= pSocket->nDataLeft;
5666  b6d9 1e0b          	ldw	x,(OFST+7,sp)
5667  b6db e60c          	ld	a,(12,x)
5668  b6dd e004          	sub	a,(4,x)
5669  b6df e70c          	ld	(12,x),a
5670  b6e1 e60b          	ld	a,(11,x)
5671  b6e3 e203          	sbc	a,(3,x)
5672  b6e5 e70b          	ld	(11,x),a
5673                     ; 3773       if (nBufSize == 0) {
5675  b6e7 1e02          	ldw	x,(OFST-2,sp)
5676                     ; 3775         uip_close();
5678  b6e9 2787          	jreq	LC017
5679                     ; 3779         uip_send(uip_appdata, nBufSize);
5681  b6eb 89            	pushw	x
5682  b6ec ce036d        	ldw	x,_uip_appdata
5683  b6ef cdf114        	call	_uip_send
5685  b6f2 85            	popw	x
5686                     ; 3782     return;
5688  b6f3               L3621:
5689                     ; 3784 }
5691  b6f3 ccad75        	jra	L252
5725                     ; 3787 void clear_saved_postpartial_all(void)
5725                     ; 3788 {
5726                     .text:	section	.text,new
5727  b6f6               _clear_saved_postpartial_all:
5729  b6f6 88            	push	a
5730       00000001      OFST:	set	1
5733                     ; 3790   for (i=0; i<24; i++) saved_postpartial[i] = '\0';
5735  b6f7 4f            	clr	a
5736  b6f8 6b01          	ld	(OFST+0,sp),a
5738  b6fa               L5112:
5741  b6fa 5f            	clrw	x
5742  b6fb 97            	ld	xl,a
5743  b6fc 724f0041      	clr	(_saved_postpartial,x)
5746  b700 0c01          	inc	(OFST+0,sp)
5750  b702 7b01          	ld	a,(OFST+0,sp)
5751  b704 a118          	cp	a,#24
5752  b706 25f2          	jrult	L5112
5753                     ; 3791 }
5756  b708 84            	pop	a
5757  b709 81            	ret	
5791                     ; 3794 void clear_saved_postpartial_data(void)
5791                     ; 3795 {
5792                     .text:	section	.text,new
5793  b70a               _clear_saved_postpartial_data:
5795  b70a 88            	push	a
5796       00000001      OFST:	set	1
5799                     ; 3797   for (i=4; i<24; i++) saved_postpartial[i] = '\0';
5801  b70b a604          	ld	a,#4
5802  b70d 6b01          	ld	(OFST+0,sp),a
5804  b70f               L7312:
5807  b70f 5f            	clrw	x
5808  b710 97            	ld	xl,a
5809  b711 724f0041      	clr	(_saved_postpartial,x)
5812  b715 0c01          	inc	(OFST+0,sp)
5816  b717 7b01          	ld	a,(OFST+0,sp)
5817  b719 a118          	cp	a,#24
5818  b71b 25f2          	jrult	L7312
5819                     ; 3798 }
5822  b71d 84            	pop	a
5823  b71e 81            	ret	
5857                     ; 3801 void clear_saved_postpartial_previous(void)
5857                     ; 3802 {
5858                     .text:	section	.text,new
5859                     _clear_saved_postpartial_previous:
5861                     	push	a
5862       00000001      OFST:	set	1
5865                     ; 3804   for (i=0; i<24; i++) saved_postpartial_previous[i] = '\0';
5867                     	clr	a
5868                     	ld	(OFST+0,sp),a
5870                     L1612:
5873                     	clrw	x
5874                     	ld	xl,a
5875                     	clr	(_saved_postpartial_previous,x)
5878                     	inc	(OFST+0,sp)
5882                     	ld	a,(OFST+0,sp)
5883                     	cp	a,#24
5884                     	jrult	L1612
5885                     ; 3805 }
5888                     	pop	a
5889                     	ret	
5979                     ; 3808 void parse_POST_string(uint8_t curr_ParseCmd, uint8_t num_chars)
5979                     ; 3809 {
5980                     .text:	section	.text,new
5981  b71f               _parse_POST_string:
5983  b71f 89            	pushw	x
5984  b720 5217          	subw	sp,#23
5985       00000017      OFST:	set	23
5988                     ; 3832   amp_found = 0;
5990  b722 0f02          	clr	(OFST-21,sp)
5992                     ; 3833   for (i=0; i<20; i++) tmp_Pending[i] = '\0';
5994  b724 0f17          	clr	(OFST+0,sp)
5996  b726               L1222:
5999  b726 96            	ldw	x,sp
6000  b727 1c0003        	addw	x,#OFST-20
6001  b72a 9f            	ld	a,xl
6002  b72b 5e            	swapw	x
6003  b72c 1b17          	add	a,(OFST+0,sp)
6004  b72e 2401          	jrnc	L462
6005  b730 5c            	incw	x
6006  b731               L462:
6007  b731 02            	rlwa	x,a
6008  b732 7f            	clr	(x)
6011  b733 0c17          	inc	(OFST+0,sp)
6015  b735 7b17          	ld	a,(OFST+0,sp)
6016  b737 a114          	cp	a,#20
6017  b739 25eb          	jrult	L1222
6018                     ; 3835   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6020  b73b c60029        	ld	a,_saved_postpartial_previous
6021  b73e 1118          	cp	a,(OFST+1,sp)
6022  b740 260a          	jrne	L7222
6023                     ; 3838     saved_postpartial_previous[0] = '\0';
6025  b742 725f0029      	clr	_saved_postpartial_previous
6026                     ; 3844     frag_flag = 1; // frag_flag is used to manage the TCP Fragment restore
6028  b746 a601          	ld	a,#1
6029  b748 6b17          	ld	(OFST+0,sp),a
6032  b74a 2005          	jra	L1322
6033  b74c               L7222:
6034                     ; 3848     frag_flag = 0;
6036  b74c 0f17          	clr	(OFST+0,sp)
6038                     ; 3852     clear_saved_postpartial_data(); // Clear [4] and higher
6040  b74e cdb70a        	call	_clear_saved_postpartial_data
6042  b751               L1322:
6043                     ; 3873   resume = 0;
6045  b751 0f01          	clr	(OFST-22,sp)
6047                     ; 3874   if (frag_flag == 1) {
6049  b753 7b17          	ld	a,(OFST+0,sp)
6050  b755 4a            	dec	a
6051  b756 263f          	jrne	L3322
6052                     ; 3876     for (i = 0; i < num_chars; i++) {
6054  b758 6b17          	ld	(OFST+0,sp),a
6057  b75a 2033          	jra	L1422
6058  b75c               L5322:
6059                     ; 3885       if (saved_postpartial_previous[4+i] != '\0') {
6061  b75c 5f            	clrw	x
6062  b75d 97            	ld	xl,a
6063  b75e 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6064  b762 271b          	jreq	L5422
6065                     ; 3886         tmp_Pending[i] = saved_postpartial_previous[4+i];
6067  b764 96            	ldw	x,sp
6068  b765 1c0003        	addw	x,#OFST-20
6069  b768 9f            	ld	a,xl
6070  b769 5e            	swapw	x
6071  b76a 1b17          	add	a,(OFST+0,sp)
6072  b76c 2401          	jrnc	L072
6073  b76e 5c            	incw	x
6074  b76f               L072:
6075  b76f 02            	rlwa	x,a
6076  b770 7b17          	ld	a,(OFST+0,sp)
6077  b772 905f          	clrw	y
6078  b774 9097          	ld	yl,a
6079  b776 90d6002d      	ld	a,(_saved_postpartial_previous+4,y)
6080  b77a f7            	ld	(x),a
6082                     ; 3876     for (i = 0; i < num_chars; i++) {
6084  b77b 0c17          	inc	(OFST+0,sp)
6086  b77d 2010          	jra	L1422
6087  b77f               L5422:
6088                     ; 3889         resume = i;
6090  b77f 6b01          	ld	(OFST-22,sp),a
6092                     ; 3890         break;
6093  b781               L3422:
6094                     ; 3893     if (*tmp_pBuffer == '&') {
6096  b781 72c60025      	ld	a,[_tmp_pBuffer.w]
6097  b785 a126          	cp	a,#38
6098  b787 260e          	jrne	L3322
6099                     ; 3897       amp_found = 1;
6101  b789 a601          	ld	a,#1
6102  b78b 6b02          	ld	(OFST-21,sp),a
6104  b78d 2008          	jra	L3322
6105  b78f               L1422:
6106                     ; 3876     for (i = 0; i < num_chars; i++) {
6108  b78f 7b17          	ld	a,(OFST+0,sp)
6109  b791 1119          	cp	a,(OFST+2,sp)
6110  b793 25c7          	jrult	L5322
6111  b795 20ea          	jra	L3422
6112  b797               L3322:
6113                     ; 3909   if (amp_found == 0) {
6115  b797 7b02          	ld	a,(OFST-21,sp)
6116  b799 2703ccb823    	jrne	L3522
6117                     ; 3910     for (i = resume; i < num_chars; i++) {
6119  b79e 7b01          	ld	a,(OFST-22,sp)
6120  b7a0 6b17          	ld	(OFST+0,sp),a
6123  b7a2 207b          	jra	L1622
6124  b7a4               L5522:
6125                     ; 3913       if (amp_found == 0) {
6127  b7a4 7b02          	ld	a,(OFST-21,sp)
6128  b7a6 265d          	jrne	L5622
6129                     ; 3916         if (*tmp_pBuffer == '&') {
6131  b7a8 72c60025      	ld	a,[_tmp_pBuffer.w]
6132  b7ac a126          	cp	a,#38
6133  b7ae 2606          	jrne	L7622
6134                     ; 3919           amp_found = 1;
6136  b7b0 a601          	ld	a,#1
6137  b7b2 6b02          	ld	(OFST-21,sp),a
6140  b7b4 204f          	jra	L5622
6141  b7b6               L7622:
6142                     ; 3922           tmp_Pending[i] = *tmp_pBuffer;
6144  b7b6 96            	ldw	x,sp
6145  b7b7 1c0003        	addw	x,#OFST-20
6146  b7ba 9f            	ld	a,xl
6147  b7bb 5e            	swapw	x
6148  b7bc 1b17          	add	a,(OFST+0,sp)
6149  b7be 2401          	jrnc	L272
6150  b7c0 5c            	incw	x
6151  b7c1               L272:
6152  b7c1 90ce0025      	ldw	y,_tmp_pBuffer
6153  b7c5 02            	rlwa	x,a
6154  b7c6 90f6          	ld	a,(y)
6155  b7c8 f7            	ld	(x),a
6156                     ; 3923           saved_postpartial[4+i] = *tmp_pBuffer;
6158  b7c9 5f            	clrw	x
6159  b7ca 7b17          	ld	a,(OFST+0,sp)
6160  b7cc 97            	ld	xl,a
6161  b7cd 90f6          	ld	a,(y)
6162  b7cf d70045        	ld	(_saved_postpartial+4,x),a
6163                     ; 3924           tmp_nParseLeft--;
6165  b7d2 725a0022      	dec	_tmp_nParseLeft
6166                     ; 3925           saved_nparseleft = tmp_nParseLeft;
6168                     ; 3926           tmp_pBuffer++;
6170  b7d6 93            	ldw	x,y
6171  b7d7 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6172  b7dc 5c            	incw	x
6173  b7dd cf0025        	ldw	_tmp_pBuffer,x
6174                     ; 3927           tmp_nBytes--;
6176  b7e0 ce0023        	ldw	x,_tmp_nBytes
6177  b7e3 5a            	decw	x
6178  b7e4 cf0023        	ldw	_tmp_nBytes,x
6179                     ; 3928           if (tmp_nBytes == 0) {
6181  b7e7 261c          	jrne	L5622
6182                     ; 3932             if (i == (num_chars - 1)) {
6184  b7e9 7b19          	ld	a,(OFST+2,sp)
6185  b7eb 5f            	clrw	x
6186  b7ec 97            	ld	xl,a
6187  b7ed 5a            	decw	x
6188  b7ee 7b17          	ld	a,(OFST+0,sp)
6189  b7f0 905f          	clrw	y
6190  b7f2 9097          	ld	yl,a
6191  b7f4 90bf07        	ldw	c_y,y
6192  b7f7 b307          	cpw	x,c_y
6193  b7f9 2604          	jrne	L5722
6194                     ; 3937               saved_parsestate = PARSE_DELIM;
6196  b7fb 3505005a      	mov	_saved_parsestate,#5
6197  b7ff               L5722:
6198                     ; 3939             break_while = 1;
6200  b7ff 35010021      	mov	_break_while,#1
6201                     ; 3940             break; // This will break the for() loop. But we need to break the
6203  b803 201e          	jra	L3522
6204  b805               L5622:
6205                     ; 3946       if (amp_found == 1) {
6207  b805 7b02          	ld	a,(OFST-21,sp)
6208  b807 4a            	dec	a
6209  b808 2611          	jrne	L7722
6210                     ; 3949         tmp_Pending[i] = '\0';
6212  b80a 96            	ldw	x,sp
6213  b80b 1c0003        	addw	x,#OFST-20
6214  b80e 9f            	ld	a,xl
6215  b80f 5e            	swapw	x
6216  b810 1b17          	add	a,(OFST+0,sp)
6217  b812 2401          	jrnc	L472
6218  b814 5c            	incw	x
6219  b815               L472:
6220  b815 02            	rlwa	x,a
6221  b816 7f            	clr	(x)
6222                     ; 3958         tmp_nParseLeft--;
6224  b817 725a0022      	dec	_tmp_nParseLeft
6225  b81b               L7722:
6226                     ; 3910     for (i = resume; i < num_chars; i++) {
6228  b81b 0c17          	inc	(OFST+0,sp)
6230  b81d 7b17          	ld	a,(OFST+0,sp)
6231  b81f               L1622:
6234  b81f 1119          	cp	a,(OFST+2,sp)
6235  b821 2581          	jrult	L5522
6236  b823               L3522:
6237                     ; 3979   if (break_while == 0) clear_saved_postpartial_all();
6239  b823 c60021        	ld	a,_break_while
6240  b826 2603          	jrne	L1032
6243  b828 cdb6f6        	call	_clear_saved_postpartial_all
6245  b82b               L1032:
6246                     ; 3982   if (curr_ParseCmd == 'a') {
6248  b82b 7b18          	ld	a,(OFST+1,sp)
6249  b82d a161          	cp	a,#97
6250  b82f 2622          	jrne	L3032
6251                     ; 3983     for (i=0; i<num_chars; i++) Pending_devicename[i] = tmp_Pending[i];
6253  b831 0f17          	clr	(OFST+0,sp)
6256  b833 2016          	jra	L1132
6257  b835               L5032:
6260  b835 5f            	clrw	x
6261  b836 97            	ld	xl,a
6262  b837 89            	pushw	x
6263  b838 96            	ldw	x,sp
6264  b839 1c0005        	addw	x,#OFST-18
6265  b83c 9f            	ld	a,xl
6266  b83d 5e            	swapw	x
6267  b83e 1b19          	add	a,(OFST+2,sp)
6268  b840 2401          	jrnc	L003
6269  b842 5c            	incw	x
6270  b843               L003:
6271  b843 02            	rlwa	x,a
6272  b844 f6            	ld	a,(x)
6273  b845 85            	popw	x
6274  b846 d70121        	ld	(_Pending_devicename,x),a
6277  b849 0c17          	inc	(OFST+0,sp)
6279  b84b               L1132:
6282  b84b 7b17          	ld	a,(OFST+0,sp)
6283  b84d 1119          	cp	a,(OFST+2,sp)
6284  b84f 25e4          	jrult	L5032
6286  b851 204a          	jra	L5132
6287  b853               L3032:
6288                     ; 3988   else if (curr_ParseCmd == 'l') {
6290  b853 a16c          	cp	a,#108
6291  b855 2622          	jrne	L7132
6292                     ; 3989     for (i=0; i<num_chars; i++) Pending_mqtt_username[i] = tmp_Pending[i];
6294  b857 0f17          	clr	(OFST+0,sp)
6297  b859 2016          	jra	L5232
6298  b85b               L1232:
6301  b85b 5f            	clrw	x
6302  b85c 97            	ld	xl,a
6303  b85d 89            	pushw	x
6304  b85e 96            	ldw	x,sp
6305  b85f 1c0005        	addw	x,#OFST-18
6306  b862 9f            	ld	a,xl
6307  b863 5e            	swapw	x
6308  b864 1b19          	add	a,(OFST+2,sp)
6309  b866 2401          	jrnc	L203
6310  b868 5c            	incw	x
6311  b869               L203:
6312  b869 02            	rlwa	x,a
6313  b86a f6            	ld	a,(x)
6314  b86b 85            	popw	x
6315  b86c d7014e        	ld	(_Pending_mqtt_username,x),a
6318  b86f 0c17          	inc	(OFST+0,sp)
6320  b871               L5232:
6323  b871 7b17          	ld	a,(OFST+0,sp)
6324  b873 1119          	cp	a,(OFST+2,sp)
6325  b875 25e4          	jrult	L1232
6327  b877 2024          	jra	L5132
6328  b879               L7132:
6329                     ; 3993   else if (curr_ParseCmd == 'm') {
6331  b879 a16d          	cp	a,#109
6332  b87b 2620          	jrne	L5132
6333                     ; 3994     for (i=0; i<num_chars; i++) Pending_mqtt_password[i] = tmp_Pending[i];
6335  b87d 0f17          	clr	(OFST+0,sp)
6338  b87f 2016          	jra	L1432
6339  b881               L5332:
6342  b881 5f            	clrw	x
6343  b882 97            	ld	xl,a
6344  b883 89            	pushw	x
6345  b884 96            	ldw	x,sp
6346  b885 1c0005        	addw	x,#OFST-18
6347  b888 9f            	ld	a,xl
6348  b889 5e            	swapw	x
6349  b88a 1b19          	add	a,(OFST+2,sp)
6350  b88c 2401          	jrnc	L403
6351  b88e 5c            	incw	x
6352  b88f               L403:
6353  b88f 02            	rlwa	x,a
6354  b890 f6            	ld	a,(x)
6355  b891 85            	popw	x
6356  b892 d70143        	ld	(_Pending_mqtt_password,x),a
6359  b895 0c17          	inc	(OFST+0,sp)
6361  b897               L1432:
6364  b897 7b17          	ld	a,(OFST+0,sp)
6365  b899 1119          	cp	a,(OFST+2,sp)
6366  b89b 25e4          	jrult	L5332
6367  b89d               L5132:
6368                     ; 3997 }
6371  b89d 5b19          	addw	sp,#25
6372  b89f 81            	ret	
6446                     	switch	.const
6447  9d80               L613:
6448  9d80 b97e          	dc.w	L5432
6449  9d82 b985          	dc.w	L7432
6450  9d84 b98c          	dc.w	L1532
6451  9d86 b993          	dc.w	L3532
6452  9d88 b99a          	dc.w	L5532
6453  9d8a b9a1          	dc.w	L7532
6454  9d8c b9a8          	dc.w	L1632
6455  9d8e b9af          	dc.w	L3632
6456  9d90 b9b6          	dc.w	L5632
6457  9d92 b9bd          	dc.w	L7632
6458  9d94 b9c4          	dc.w	L1732
6459  9d96 b9cb          	dc.w	L3732
6460  9d98 b9d2          	dc.w	L5732
6461  9d9a b9d9          	dc.w	L7732
6462  9d9c b9e0          	dc.w	L1042
6463  9d9e b9e7          	dc.w	L3042
6464                     ; 4000 void parse_POST_address(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6464                     ; 4001 {
6465                     .text:	section	.text,new
6466  b8a0               _parse_POST_address:
6468  b8a0 89            	pushw	x
6469  b8a1 89            	pushw	x
6470       00000002      OFST:	set	2
6473                     ; 4004   alpha[0] = '-';
6475  b8a2 352d001b      	mov	_alpha,#45
6476                     ; 4005   alpha[1] = '-';
6478  b8a6 352d001c      	mov	_alpha+1,#45
6479                     ; 4006   alpha[2] = '-';
6481  b8aa 352d001d      	mov	_alpha+2,#45
6482                     ; 4009   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6484  b8ae 9e            	ld	a,xh
6485  b8af c10029        	cp	a,_saved_postpartial_previous
6486  b8b2 2624          	jrne	L3342
6487                     ; 4012     saved_postpartial_previous[0] = '\0';
6489  b8b4 725f0029      	clr	_saved_postpartial_previous
6490                     ; 4019     if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
6492  b8b8 c6002d        	ld	a,_saved_postpartial_previous+4
6493  b8bb 2705          	jreq	L5342
6496  b8bd 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
6497  b8c2               L5342:
6498                     ; 4020     if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
6500  b8c2 c6002e        	ld	a,_saved_postpartial_previous+5
6501  b8c5 2705          	jreq	L7342
6504  b8c7 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
6505  b8cc               L7342:
6506                     ; 4021     if (saved_postpartial_previous[6] != '\0') alpha[2] = saved_postpartial_previous[6];
6508  b8cc c6002f        	ld	a,_saved_postpartial_previous+6
6509  b8cf 270a          	jreq	L3442
6512  b8d1 55002f001d    	mov	_alpha+2,_saved_postpartial_previous+6
6513  b8d6 2003          	jra	L3442
6514  b8d8               L3342:
6515                     ; 4027     clear_saved_postpartial_data(); // Clear [4] and higher
6517  b8d8 cdb70a        	call	_clear_saved_postpartial_data
6519  b8db               L3442:
6520                     ; 4030   for (i=0; i<3; i++) {
6522  b8db 4f            	clr	a
6523  b8dc 6b02          	ld	(OFST+0,sp),a
6525  b8de               L5442:
6526                     ; 4036     if (alpha[i] == '-') {
6528  b8de 5f            	clrw	x
6529  b8df 97            	ld	xl,a
6530  b8e0 d6001b        	ld	a,(_alpha,x)
6531  b8e3 a12d          	cp	a,#45
6532  b8e5 263c          	jrne	L3542
6533                     ; 4037       alpha[i] = (uint8_t)(*tmp_pBuffer);
6535  b8e7 7b02          	ld	a,(OFST+0,sp)
6536  b8e9 5f            	clrw	x
6537  b8ea 90ce0025      	ldw	y,_tmp_pBuffer
6538  b8ee 97            	ld	xl,a
6539  b8ef 90f6          	ld	a,(y)
6540  b8f1 d7001b        	ld	(_alpha,x),a
6541                     ; 4038       saved_postpartial[i+4] = (uint8_t)(*tmp_pBuffer);
6543  b8f4 5f            	clrw	x
6544  b8f5 7b02          	ld	a,(OFST+0,sp)
6545  b8f7 97            	ld	xl,a
6546  b8f8 90f6          	ld	a,(y)
6547  b8fa d70045        	ld	(_saved_postpartial+4,x),a
6548                     ; 4039       tmp_nParseLeft--;
6550  b8fd 725a0022      	dec	_tmp_nParseLeft
6551                     ; 4040       saved_nparseleft = tmp_nParseLeft;
6553                     ; 4041       tmp_pBuffer++;
6555  b901 93            	ldw	x,y
6556  b902 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6557  b907 5c            	incw	x
6558  b908 cf0025        	ldw	_tmp_pBuffer,x
6559                     ; 4042       tmp_nBytes--;
6561  b90b ce0023        	ldw	x,_tmp_nBytes
6562  b90e 5a            	decw	x
6563  b90f cf0023        	ldw	_tmp_nBytes,x
6564                     ; 4043       if (i != 2 && tmp_nBytes == 0) {
6566  b912 7b02          	ld	a,(OFST+0,sp)
6567  b914 a102          	cp	a,#2
6568  b916 270b          	jreq	L3542
6570  b918 ce0023        	ldw	x,_tmp_nBytes
6571  b91b 2606          	jrne	L3542
6572                     ; 4044         break_while = 1; // Hit end of fragment but still have characters to
6574  b91d 35010021      	mov	_break_while,#1
6575                     ; 4048         break; // Break out of for() loop.
6577  b921 2008          	jra	L1542
6578  b923               L3542:
6579                     ; 4030   for (i=0; i<3; i++) {
6581  b923 0c02          	inc	(OFST+0,sp)
6585  b925 7b02          	ld	a,(OFST+0,sp)
6586  b927 a103          	cp	a,#3
6587  b929 25b3          	jrult	L5442
6588  b92b               L1542:
6589                     ; 4052   if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6591  b92b c60021        	ld	a,_break_while
6592  b92e 4a            	dec	a
6593  b92f 2603ccb9f5    	jreq	L023
6596                     ; 4056   clear_saved_postpartial_all();
6598  b934 cdb6f6        	call	_clear_saved_postpartial_all
6600                     ; 4069     invalid = 0;
6602  b937 0f01          	clr	(OFST-1,sp)
6604                     ; 4071     temp = (uint8_t)(       (alpha[2] - '0'));
6606  b939 c6001d        	ld	a,_alpha+2
6607  b93c a030          	sub	a,#48
6608  b93e 6b02          	ld	(OFST+0,sp),a
6610                     ; 4072     temp = (uint8_t)(temp + (alpha[1] - '0') * 10);
6612  b940 c6001c        	ld	a,_alpha+1
6613  b943 97            	ld	xl,a
6614  b944 a60a          	ld	a,#10
6615  b946 42            	mul	x,a
6616  b947 9f            	ld	a,xl
6617  b948 a0e0          	sub	a,#224
6618  b94a 1b02          	add	a,(OFST+0,sp)
6619  b94c 6b02          	ld	(OFST+0,sp),a
6621                     ; 4073     if (temp > 55 && alpha[0] > '1') invalid = 1;
6623  b94e a138          	cp	a,#56
6624  b950 250d          	jrult	L1642
6626  b952 c6001b        	ld	a,_alpha
6627  b955 a132          	cp	a,#50
6628  b957 2506          	jrult	L1642
6631  b959 a601          	ld	a,#1
6632  b95b 6b01          	ld	(OFST-1,sp),a
6635  b95d 200e          	jra	L3642
6636  b95f               L1642:
6637                     ; 4074     else temp = (uint8_t)(temp + (alpha[0] - '0') * 100);
6639  b95f c6001b        	ld	a,_alpha
6640  b962 97            	ld	xl,a
6641  b963 a664          	ld	a,#100
6642  b965 42            	mul	x,a
6643  b966 9f            	ld	a,xl
6644  b967 a0c0          	sub	a,#192
6645  b969 1b02          	add	a,(OFST+0,sp)
6646  b96b 6b02          	ld	(OFST+0,sp),a
6648  b96d               L3642:
6649                     ; 4075     if (invalid == 0) { // Make change only if valid entry
6651  b96d 7b01          	ld	a,(OFST-1,sp)
6652  b96f 267b          	jrne	L5642
6653                     ; 4076       switch(curr_ParseNum)
6655  b971 7b04          	ld	a,(OFST+2,sp)
6657                     ; 4099         default: break;
6658  b973 a110          	cp	a,#16
6659  b975 2475          	jruge	L5642
6660  b977 5f            	clrw	x
6661  b978 97            	ld	xl,a
6662  b979 58            	sllw	x
6663  b97a de9d80        	ldw	x,(L613,x)
6664  b97d fc            	jp	(x)
6665  b97e               L5432:
6666                     ; 4078         case 0:  Pending_hostaddr[3] = (uint8_t)temp; break;
6668  b97e 7b02          	ld	a,(OFST+0,sp)
6669  b980 c70142        	ld	_Pending_hostaddr+3,a
6672  b983 2067          	jra	L5642
6673  b985               L7432:
6674                     ; 4079         case 1:  Pending_hostaddr[2] = (uint8_t)temp; break;
6676  b985 7b02          	ld	a,(OFST+0,sp)
6677  b987 c70141        	ld	_Pending_hostaddr+2,a
6680  b98a 2060          	jra	L5642
6681  b98c               L1532:
6682                     ; 4080         case 2:  Pending_hostaddr[1] = (uint8_t)temp; break;
6684  b98c 7b02          	ld	a,(OFST+0,sp)
6685  b98e c70140        	ld	_Pending_hostaddr+1,a
6688  b991 2059          	jra	L5642
6689  b993               L3532:
6690                     ; 4081         case 3:  Pending_hostaddr[0] = (uint8_t)temp; break;
6692  b993 7b02          	ld	a,(OFST+0,sp)
6693  b995 c7013f        	ld	_Pending_hostaddr,a
6696  b998 2052          	jra	L5642
6697  b99a               L5532:
6698                     ; 4082         case 4:  Pending_draddr[3] = (uint8_t)temp; break;
6700  b99a 7b02          	ld	a,(OFST+0,sp)
6701  b99c c7013e        	ld	_Pending_draddr+3,a
6704  b99f 204b          	jra	L5642
6705  b9a1               L7532:
6706                     ; 4083         case 5:  Pending_draddr[2] = (uint8_t)temp; break;
6708  b9a1 7b02          	ld	a,(OFST+0,sp)
6709  b9a3 c7013d        	ld	_Pending_draddr+2,a
6712  b9a6 2044          	jra	L5642
6713  b9a8               L1632:
6714                     ; 4084         case 6:  Pending_draddr[1] = (uint8_t)temp; break;
6716  b9a8 7b02          	ld	a,(OFST+0,sp)
6717  b9aa c7013c        	ld	_Pending_draddr+1,a
6720  b9ad 203d          	jra	L5642
6721  b9af               L3632:
6722                     ; 4085         case 7:  Pending_draddr[0] = (uint8_t)temp; break;
6724  b9af 7b02          	ld	a,(OFST+0,sp)
6725  b9b1 c7013b        	ld	_Pending_draddr,a
6728  b9b4 2036          	jra	L5642
6729  b9b6               L5632:
6730                     ; 4086         case 8:  Pending_netmask[3] = (uint8_t)temp; break;
6732  b9b6 7b02          	ld	a,(OFST+0,sp)
6733  b9b8 c7013a        	ld	_Pending_netmask+3,a
6736  b9bb 202f          	jra	L5642
6737  b9bd               L7632:
6738                     ; 4087         case 9:  Pending_netmask[2] = (uint8_t)temp; break;
6740  b9bd 7b02          	ld	a,(OFST+0,sp)
6741  b9bf c70139        	ld	_Pending_netmask+2,a
6744  b9c2 2028          	jra	L5642
6745  b9c4               L1732:
6746                     ; 4088         case 10: Pending_netmask[1] = (uint8_t)temp; break;
6748  b9c4 7b02          	ld	a,(OFST+0,sp)
6749  b9c6 c70138        	ld	_Pending_netmask+1,a
6752  b9c9 2021          	jra	L5642
6753  b9cb               L3732:
6754                     ; 4089         case 11: Pending_netmask[0] = (uint8_t)temp; break;
6756  b9cb 7b02          	ld	a,(OFST+0,sp)
6757  b9cd c70137        	ld	_Pending_netmask,a
6760  b9d0 201a          	jra	L5642
6761  b9d2               L5732:
6762                     ; 4092 	  Pending_mqttserveraddr[3] = (uint8_t)temp;
6764  b9d2 7b02          	ld	a,(OFST+0,sp)
6765  b9d4 c7015e        	ld	_Pending_mqttserveraddr+3,a
6766                     ; 4093 	  break;
6768  b9d7 2013          	jra	L5642
6769  b9d9               L7732:
6770                     ; 4095         case 13: Pending_mqttserveraddr[2] = (uint8_t)temp; break;
6772  b9d9 7b02          	ld	a,(OFST+0,sp)
6773  b9db c7015d        	ld	_Pending_mqttserveraddr+2,a
6776  b9de 200c          	jra	L5642
6777  b9e0               L1042:
6778                     ; 4096         case 14: Pending_mqttserveraddr[1] = (uint8_t)temp; break;
6780  b9e0 7b02          	ld	a,(OFST+0,sp)
6781  b9e2 c7015c        	ld	_Pending_mqttserveraddr+1,a
6784  b9e5 2005          	jra	L5642
6785  b9e7               L3042:
6786                     ; 4097         case 15: Pending_mqttserveraddr[0] = (uint8_t)temp; break;
6788  b9e7 7b02          	ld	a,(OFST+0,sp)
6789  b9e9 c7015b        	ld	_Pending_mqttserveraddr,a
6792                     ; 4099         default: break;
6794  b9ec               L5642:
6795                     ; 4104   if (tmp_nBytes == 0) {
6797  b9ec ce0023        	ldw	x,_tmp_nBytes
6798  b9ef 2604          	jrne	L023
6799                     ; 4107     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
6801  b9f1 35020021      	mov	_break_while,#2
6802                     ; 4110     return;
6803  b9f5               L023:
6806  b9f5 5b04          	addw	sp,#4
6807  b9f7 81            	ret	
6808                     ; 4112 }
6888                     ; 4115 void parse_POST_port(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6888                     ; 4116 {
6889                     .text:	section	.text,new
6890  b9f8               _parse_POST_port:
6892  b9f8 89            	pushw	x
6893  b9f9 5203          	subw	sp,#3
6894       00000003      OFST:	set	3
6897                     ; 4119   for (i=0; i<5; i++) alpha[i] = '-';
6899  b9fb 4f            	clr	a
6900  b9fc 6b03          	ld	(OFST+0,sp),a
6902  b9fe               L3252:
6905  b9fe 5f            	clrw	x
6906  b9ff 97            	ld	xl,a
6907  ba00 a62d          	ld	a,#45
6908  ba02 d7001b        	ld	(_alpha,x),a
6911  ba05 0c03          	inc	(OFST+0,sp)
6915  ba07 7b03          	ld	a,(OFST+0,sp)
6916  ba09 a105          	cp	a,#5
6917  ba0b 25f1          	jrult	L3252
6918                     ; 4121   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6920  ba0d c60029        	ld	a,_saved_postpartial_previous
6921  ba10 1104          	cp	a,(OFST+1,sp)
6922  ba12 2621          	jrne	L1352
6923                     ; 4124     saved_postpartial_previous[0] = '\0';
6925  ba14 725f0029      	clr	_saved_postpartial_previous
6926                     ; 4131     for (i=0; i<5; i++) {
6928  ba18 4f            	clr	a
6929  ba19 6b03          	ld	(OFST+0,sp),a
6931  ba1b               L3352:
6932                     ; 4132       if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
6934  ba1b 5f            	clrw	x
6935  ba1c 97            	ld	xl,a
6936  ba1d 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6937  ba21 2708          	jreq	L1452
6940  ba23 5f            	clrw	x
6941  ba24 97            	ld	xl,a
6942  ba25 d6002d        	ld	a,(_saved_postpartial_previous+4,x)
6943  ba28 d7001b        	ld	(_alpha,x),a
6944  ba2b               L1452:
6945                     ; 4131     for (i=0; i<5; i++) {
6947  ba2b 0c03          	inc	(OFST+0,sp)
6951  ba2d 7b03          	ld	a,(OFST+0,sp)
6952  ba2f a105          	cp	a,#5
6953  ba31 25e8          	jrult	L3352
6955  ba33 2003          	jra	L3452
6956  ba35               L1352:
6957                     ; 4139     clear_saved_postpartial_data(); // Clear [4] and higher
6959  ba35 cdb70a        	call	_clear_saved_postpartial_data
6961  ba38               L3452:
6962                     ; 4144     for (i=0; i<5; i++) {
6964  ba38 4f            	clr	a
6965  ba39 6b03          	ld	(OFST+0,sp),a
6967  ba3b               L5452:
6968                     ; 4150       if (alpha[i] == '-') {
6970  ba3b 5f            	clrw	x
6971  ba3c 97            	ld	xl,a
6972  ba3d d6001b        	ld	a,(_alpha,x)
6973  ba40 a12d          	cp	a,#45
6974  ba42 263c          	jrne	L3552
6975                     ; 4151         alpha[i] = (uint8_t)(*tmp_pBuffer);
6977  ba44 7b03          	ld	a,(OFST+0,sp)
6978  ba46 5f            	clrw	x
6979  ba47 90ce0025      	ldw	y,_tmp_pBuffer
6980  ba4b 97            	ld	xl,a
6981  ba4c 90f6          	ld	a,(y)
6982  ba4e d7001b        	ld	(_alpha,x),a
6983                     ; 4152         saved_postpartial[i+4] = *tmp_pBuffer;
6985  ba51 5f            	clrw	x
6986  ba52 7b03          	ld	a,(OFST+0,sp)
6987  ba54 97            	ld	xl,a
6988  ba55 90f6          	ld	a,(y)
6989  ba57 d70045        	ld	(_saved_postpartial+4,x),a
6990                     ; 4153         tmp_nParseLeft--;
6992  ba5a 725a0022      	dec	_tmp_nParseLeft
6993                     ; 4154         saved_nparseleft = tmp_nParseLeft;
6995                     ; 4155         tmp_pBuffer++;
6997  ba5e 93            	ldw	x,y
6998  ba5f 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6999  ba64 5c            	incw	x
7000  ba65 cf0025        	ldw	_tmp_pBuffer,x
7001                     ; 4156         tmp_nBytes--;
7003  ba68 ce0023        	ldw	x,_tmp_nBytes
7004  ba6b 5a            	decw	x
7005  ba6c cf0023        	ldw	_tmp_nBytes,x
7006                     ; 4157         if (i != 4 && tmp_nBytes == 0) {
7008  ba6f 7b03          	ld	a,(OFST+0,sp)
7009  ba71 a104          	cp	a,#4
7010  ba73 270b          	jreq	L3552
7012  ba75 ce0023        	ldw	x,_tmp_nBytes
7013  ba78 2606          	jrne	L3552
7014                     ; 4158           break_while = 1; // Hit end of fragment but still have characters to
7016  ba7a 35010021      	mov	_break_while,#1
7017                     ; 4162    	break; // Break out of for() loop.
7019  ba7e 2008          	jra	L1552
7020  ba80               L3552:
7021                     ; 4144     for (i=0; i<5; i++) {
7023  ba80 0c03          	inc	(OFST+0,sp)
7027  ba82 7b03          	ld	a,(OFST+0,sp)
7028  ba84 a105          	cp	a,#5
7029  ba86 25b3          	jrult	L5452
7030  ba88               L1552:
7031                     ; 4166     if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
7033  ba88 c60021        	ld	a,_break_while
7034  ba8b 4a            	dec	a
7035  ba8c 2603ccbb1a    	jreq	L033
7038                     ; 4171   clear_saved_postpartial_all();
7040  ba91 cdb6f6        	call	_clear_saved_postpartial_all
7042                     ; 4180     invalid = 0;
7044  ba94 0f03          	clr	(OFST+0,sp)
7046                     ; 4182     temp = (uint16_t)(       (alpha[4] - '0'));
7048  ba96 5f            	clrw	x
7049  ba97 c6001f        	ld	a,_alpha+4
7050  ba9a 97            	ld	xl,a
7051  ba9b 1d0030        	subw	x,#48
7052  ba9e 1f01          	ldw	(OFST-2,sp),x
7054                     ; 4183     temp = (uint16_t)(temp + (alpha[3] - '0') * 10);
7056  baa0 c6001e        	ld	a,_alpha+3
7057  baa3 97            	ld	xl,a
7058  baa4 a60a          	ld	a,#10
7059  baa6 42            	mul	x,a
7060  baa7 1d01e0        	subw	x,#480
7061  baaa 72fb01        	addw	x,(OFST-2,sp)
7062  baad 1f01          	ldw	(OFST-2,sp),x
7064                     ; 4184     temp = (uint16_t)(temp + (alpha[2] - '0') * 100);
7066  baaf c6001d        	ld	a,_alpha+2
7067  bab2 97            	ld	xl,a
7068  bab3 a664          	ld	a,#100
7069  bab5 42            	mul	x,a
7070  bab6 1d12c0        	subw	x,#4800
7071  bab9 72fb01        	addw	x,(OFST-2,sp)
7072  babc 1f01          	ldw	(OFST-2,sp),x
7074                     ; 4185     temp = (uint16_t)(temp + (alpha[1] - '0') * 1000);
7076  babe 5f            	clrw	x
7077  babf c6001c        	ld	a,_alpha+1
7078  bac2 97            	ld	xl,a
7079  bac3 90ae03e8      	ldw	y,#1000
7080  bac7 cdf7a6        	call	c_imul
7082  baca 1dbb80        	subw	x,#48000
7083  bacd 72fb01        	addw	x,(OFST-2,sp)
7084  bad0 1f01          	ldw	(OFST-2,sp),x
7086                     ; 4186     if (temp > 5535 && alpha[0] > '5') invalid = 1;
7088  bad2 a315a0        	cpw	x,#5536
7089  bad5 250d          	jrult	L1652
7091  bad7 c6001b        	ld	a,_alpha
7092  bada a136          	cp	a,#54
7093  badc 2506          	jrult	L1652
7096  bade a601          	ld	a,#1
7097  bae0 6b03          	ld	(OFST+0,sp),a
7100  bae2 2014          	jra	L3652
7101  bae4               L1652:
7102                     ; 4187     else temp = (uint16_t)(temp + (alpha[0] - '0') * 10000);
7104  bae4 c6001b        	ld	a,_alpha
7105  bae7 5f            	clrw	x
7106  bae8 97            	ld	xl,a
7107  bae9 90ae2710      	ldw	y,#10000
7108  baed cdf7a6        	call	c_imul
7110  baf0 1d5300        	subw	x,#21248
7111  baf3 72fb01        	addw	x,(OFST-2,sp)
7112  baf6 1f01          	ldw	(OFST-2,sp),x
7114  baf8               L3652:
7115                     ; 4188     if (temp < 10) invalid = 1;
7117  baf8 a3000a        	cpw	x,#10
7118  bafb 2404          	jruge	L5652
7121  bafd a601          	ld	a,#1
7122  baff 6b03          	ld	(OFST+0,sp),a
7124  bb01               L5652:
7125                     ; 4189     if (invalid == 0) {
7127  bb01 7b03          	ld	a,(OFST+0,sp)
7128  bb03 260c          	jrne	L7652
7129                     ; 4190       if (curr_ParseNum == 0) Pending_port = (uint16_t)temp;
7131  bb05 7b05          	ld	a,(OFST+2,sp)
7132  bb07 2605          	jrne	L1752
7135  bb09 cf0135        	ldw	_Pending_port,x
7137  bb0c 2003          	jra	L7652
7138  bb0e               L1752:
7139                     ; 4192       else Pending_mqttport = (uint16_t)temp;
7141  bb0e cf0159        	ldw	_Pending_mqttport,x
7142  bb11               L7652:
7143                     ; 4197   if (tmp_nBytes == 0) {
7145  bb11 ce0023        	ldw	x,_tmp_nBytes
7146  bb14 2604          	jrne	L033
7147                     ; 4200     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
7149  bb16 35020021      	mov	_break_while,#2
7150                     ; 4203     return;
7151  bb1a               L033:
7154  bb1a 5b05          	addw	sp,#5
7155  bb1c 81            	ret	
7156                     ; 4205 }
7191                     	switch	.const
7192  9da0               L633:
7193  9da0 bb2b          	dc.w	L7752
7194  9da2 bb33          	dc.w	L1062
7195  9da4 bb3b          	dc.w	L3062
7196  9da6 bb43          	dc.w	L5062
7197  9da8 bb4b          	dc.w	L7062
7198  9daa bb53          	dc.w	L1162
7199  9dac bb5b          	dc.w	L3162
7200  9dae bb63          	dc.w	L5162
7201  9db0 bb6b          	dc.w	L7162
7202  9db2 bb73          	dc.w	L1262
7203  9db4 bb7b          	dc.w	L3262
7204  9db6 bb83          	dc.w	L5262
7205  9db8 bb8b          	dc.w	L7262
7206  9dba bb93          	dc.w	L1362
7207  9dbc bb9b          	dc.w	L3362
7208  9dbe bba3          	dc.w	L5362
7209                     ; 4208 uint8_t GpioGetPin(uint8_t nGpio)
7209                     ; 4209 {
7210                     .text:	section	.text,new
7211  bb1d               _GpioGetPin:
7215                     ; 4214   switch (nGpio) {
7218                     ; 4230     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7219  bb1d a110          	cp	a,#16
7220  bb1f 2503ccbbab    	jruge	L5562
7221  bb24 5f            	clrw	x
7222  bb25 97            	ld	xl,a
7223  bb26 58            	sllw	x
7224  bb27 de9da0        	ldw	x,(L633,x)
7225  bb2a fc            	jp	(x)
7226  bb2b               L7752:
7227                     ; 4215     case 0:  if (IO_8to1  & (uint8_t)(0x01)) return 1; break;
7229  bb2b 720101697b    	btjf	_IO_8to1,#0,L5562
7232  bb30 a601          	ld	a,#1
7235  bb32 81            	ret	
7236  bb33               L1062:
7237                     ; 4216     case 1:  if (IO_8to1  & (uint8_t)(0x02)) return 1; break;
7239  bb33 7203016973    	btjf	_IO_8to1,#1,L5562
7242  bb38 a601          	ld	a,#1
7245  bb3a 81            	ret	
7246  bb3b               L3062:
7247                     ; 4217     case 2:  if (IO_8to1  & (uint8_t)(0x04)) return 1; break;
7249  bb3b 720501696b    	btjf	_IO_8to1,#2,L5562
7252  bb40 a601          	ld	a,#1
7255  bb42 81            	ret	
7256  bb43               L5062:
7257                     ; 4218     case 3:  if (IO_8to1  & (uint8_t)(0x08)) return 1; break;
7259  bb43 7207016963    	btjf	_IO_8to1,#3,L5562
7262  bb48 a601          	ld	a,#1
7265  bb4a 81            	ret	
7266  bb4b               L7062:
7267                     ; 4219     case 4:  if (IO_8to1  & (uint8_t)(0x10)) return 1; break;
7269  bb4b 720901695b    	btjf	_IO_8to1,#4,L5562
7272  bb50 a601          	ld	a,#1
7275  bb52 81            	ret	
7276  bb53               L1162:
7277                     ; 4220     case 5:  if (IO_8to1  & (uint8_t)(0x20)) return 1; break;
7279  bb53 720b016953    	btjf	_IO_8to1,#5,L5562
7282  bb58 a601          	ld	a,#1
7285  bb5a 81            	ret	
7286  bb5b               L3162:
7287                     ; 4221     case 6:  if (IO_8to1  & (uint8_t)(0x40)) return 1; break;
7289  bb5b 720d01694b    	btjf	_IO_8to1,#6,L5562
7292  bb60 a601          	ld	a,#1
7295  bb62 81            	ret	
7296  bb63               L5162:
7297                     ; 4222     case 7:  if (IO_8to1  & (uint8_t)(0x80)) return 1; break;
7299  bb63 720f016943    	btjf	_IO_8to1,#7,L5562
7302  bb68 a601          	ld	a,#1
7305  bb6a 81            	ret	
7306  bb6b               L7162:
7307                     ; 4223     case 8:  if (IO_16to9 & (uint8_t)(0x01)) return 1; break;
7309  bb6b 7201016a3b    	btjf	_IO_16to9,#0,L5562
7312  bb70 a601          	ld	a,#1
7315  bb72 81            	ret	
7316  bb73               L1262:
7317                     ; 4224     case 9:  if (IO_16to9 & (uint8_t)(0x02)) return 1; break;
7319  bb73 7203016a33    	btjf	_IO_16to9,#1,L5562
7322  bb78 a601          	ld	a,#1
7325  bb7a 81            	ret	
7326  bb7b               L3262:
7327                     ; 4225     case 10: if (IO_16to9 & (uint8_t)(0x04)) return 1; break;
7329  bb7b 7205016a2b    	btjf	_IO_16to9,#2,L5562
7332  bb80 a601          	ld	a,#1
7335  bb82 81            	ret	
7336  bb83               L5262:
7337                     ; 4226     case 11: if (IO_16to9 & (uint8_t)(0x08)) return 1; break;
7339  bb83 7207016a23    	btjf	_IO_16to9,#3,L5562
7342  bb88 a601          	ld	a,#1
7345  bb8a 81            	ret	
7346  bb8b               L7262:
7347                     ; 4227     case 12: if (IO_16to9 & (uint8_t)(0x10)) return 1; break;
7349  bb8b 7209016a1b    	btjf	_IO_16to9,#4,L5562
7352  bb90 a601          	ld	a,#1
7355  bb92 81            	ret	
7356  bb93               L1362:
7357                     ; 4228     case 13: if (IO_16to9 & (uint8_t)(0x20)) return 1; break;
7359  bb93 720b016a13    	btjf	_IO_16to9,#5,L5562
7362  bb98 a601          	ld	a,#1
7365  bb9a 81            	ret	
7366  bb9b               L3362:
7367                     ; 4229     case 14: if (IO_16to9 & (uint8_t)(0x40)) return 1; break;
7369  bb9b 720d016a0b    	btjf	_IO_16to9,#6,L5562
7372  bba0 a601          	ld	a,#1
7375  bba2 81            	ret	
7376  bba3               L5362:
7377                     ; 4230     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7379  bba3 720f016a03    	btjf	_IO_16to9,#7,L5562
7382  bba8 a601          	ld	a,#1
7385  bbaa 81            	ret	
7386  bbab               L5562:
7387                     ; 4232   return 0;
7389  bbab 4f            	clr	a
7392  bbac 81            	ret	
7439                     ; 4281 void GpioSetPin(uint8_t nGpio, uint8_t nState)
7439                     ; 4282 {
7440                     .text:	section	.text,new
7441  bbad               _GpioSetPin:
7443  bbad 89            	pushw	x
7444  bbae 88            	push	a
7445       00000001      OFST:	set	1
7448                     ; 4289   mask = 0;
7450  bbaf 0f01          	clr	(OFST+0,sp)
7452                     ; 4291   switch(nGpio) {
7454  bbb1 9e            	ld	a,xh
7456                     ; 4300     default: break;
7457  bbb2 4d            	tnz	a
7458  bbb3 2717          	jreq	L7172
7459  bbb5 4a            	dec	a
7460  bbb6 2717          	jreq	L1272
7461  bbb8 4a            	dec	a
7462  bbb9 2718          	jreq	L3272
7463  bbbb 4a            	dec	a
7464  bbbc 2719          	jreq	L5272
7465  bbbe 4a            	dec	a
7466  bbbf 271a          	jreq	L7272
7467  bbc1 4a            	dec	a
7468  bbc2 271b          	jreq	L1372
7469  bbc4 4a            	dec	a
7470  bbc5 271c          	jreq	L3372
7471  bbc7 4a            	dec	a
7472  bbc8 271d          	jreq	L5372
7473  bbca 201f          	jra	L3672
7474  bbcc               L7172:
7475                     ; 4292     case 0: mask = 0x01; break;
7477  bbcc 4c            	inc	a
7480  bbcd 201a          	jp	LC026
7481  bbcf               L1272:
7482                     ; 4293     case 1: mask = 0x02; break;
7484  bbcf a602          	ld	a,#2
7487  bbd1 2016          	jp	LC026
7488  bbd3               L3272:
7489                     ; 4294     case 2: mask = 0x04; break;
7491  bbd3 a604          	ld	a,#4
7494  bbd5 2012          	jp	LC026
7495  bbd7               L5272:
7496                     ; 4295     case 3: mask = 0x08; break;
7498  bbd7 a608          	ld	a,#8
7501  bbd9 200e          	jp	LC026
7502  bbdb               L7272:
7503                     ; 4296     case 4: mask = 0x10; break;
7505  bbdb a610          	ld	a,#16
7508  bbdd 200a          	jp	LC026
7509  bbdf               L1372:
7510                     ; 4297     case 5: mask = 0x20; break;
7512  bbdf a620          	ld	a,#32
7515  bbe1 2006          	jp	LC026
7516  bbe3               L3372:
7517                     ; 4298     case 6: mask = 0x40; break;
7519  bbe3 a640          	ld	a,#64
7522  bbe5 2002          	jp	LC026
7523  bbe7               L5372:
7524                     ; 4299     case 7: mask = 0x80; break;
7526  bbe7 a680          	ld	a,#128
7527  bbe9               LC026:
7528  bbe9 6b01          	ld	(OFST+0,sp),a
7532                     ; 4300     default: break;
7534  bbeb               L3672:
7535                     ; 4303   if (nState) IO_8to1 |= mask;
7537  bbeb 7b03          	ld	a,(OFST+2,sp)
7538  bbed 2707          	jreq	L5672
7541  bbef c60169        	ld	a,_IO_8to1
7542  bbf2 1a01          	or	a,(OFST+0,sp)
7544  bbf4 2006          	jra	L7672
7545  bbf6               L5672:
7546                     ; 4304   else IO_8to1 &= (uint8_t)~mask;
7548  bbf6 7b01          	ld	a,(OFST+0,sp)
7549  bbf8 43            	cpl	a
7550  bbf9 c40169        	and	a,_IO_8to1
7551  bbfc               L7672:
7552  bbfc c70169        	ld	_IO_8to1,a
7553                     ; 4306 }
7556  bbff 5b03          	addw	sp,#3
7557  bc01 81            	ret	
7618                     ; 4318 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7618                     ; 4319 {
7619                     .text:	section	.text,new
7620  bc02               _SetMAC:
7622  bc02 89            	pushw	x
7623  bc03 5203          	subw	sp,#3
7624       00000003      OFST:	set	3
7627                     ; 4333   temp = 0;
7629                     ; 4334   invalid = 0;
7631  bc05 0f01          	clr	(OFST-2,sp)
7633                     ; 4337   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7635  bc07 9f            	ld	a,xl
7636  bc08 a130          	cp	a,#48
7637  bc0a 250b          	jrult	L3303
7639  bc0c 9f            	ld	a,xl
7640  bc0d a13a          	cp	a,#58
7641  bc0f 2406          	jruge	L3303
7644  bc11 7b05          	ld	a,(OFST+2,sp)
7645  bc13 a030          	sub	a,#48
7647  bc15 200c          	jp	LC027
7648  bc17               L3303:
7649                     ; 4338   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7651  bc17 7b05          	ld	a,(OFST+2,sp)
7652  bc19 a161          	cp	a,#97
7653  bc1b 250a          	jrult	L7303
7655  bc1d a167          	cp	a,#103
7656  bc1f 2406          	jruge	L7303
7659  bc21 a057          	sub	a,#87
7660  bc23               LC027:
7661  bc23 6b05          	ld	(OFST+2,sp),a
7663  bc25 2004          	jra	L5303
7664  bc27               L7303:
7665                     ; 4339   else invalid = 1; // If an invalid entry set indicator
7667  bc27 a601          	ld	a,#1
7668  bc29 6b01          	ld	(OFST-2,sp),a
7670  bc2b               L5303:
7671                     ; 4341   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7673  bc2b 7b08          	ld	a,(OFST+5,sp)
7674  bc2d a130          	cp	a,#48
7675  bc2f 2508          	jrult	L3403
7677  bc31 a13a          	cp	a,#58
7678  bc33 2404          	jruge	L3403
7681  bc35 a030          	sub	a,#48
7683  bc37 200a          	jp	LC028
7684  bc39               L3403:
7685                     ; 4342   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7687  bc39 a161          	cp	a,#97
7688  bc3b 250a          	jrult	L7403
7690  bc3d a167          	cp	a,#103
7691  bc3f 2406          	jruge	L7403
7694  bc41 a057          	sub	a,#87
7695  bc43               LC028:
7696  bc43 6b08          	ld	(OFST+5,sp),a
7698  bc45 2004          	jra	L5403
7699  bc47               L7403:
7700                     ; 4343   else invalid = 1; // If an invalid entry set indicator
7702  bc47 a601          	ld	a,#1
7703  bc49 6b01          	ld	(OFST-2,sp),a
7705  bc4b               L5403:
7706                     ; 4345   if (invalid == 0) { // Change value only if valid entry
7708  bc4b 7b01          	ld	a,(OFST-2,sp)
7709  bc4d 264a          	jrne	L3503
7710                     ; 4346     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7712  bc4f 7b05          	ld	a,(OFST+2,sp)
7713  bc51 97            	ld	xl,a
7714  bc52 a610          	ld	a,#16
7715  bc54 42            	mul	x,a
7716  bc55 01            	rrwa	x,a
7717  bc56 1b08          	add	a,(OFST+5,sp)
7718  bc58 5f            	clrw	x
7719  bc59 97            	ld	xl,a
7720  bc5a 1f02          	ldw	(OFST-1,sp),x
7722                     ; 4347     switch(itemnum)
7724  bc5c 7b04          	ld	a,(OFST+1,sp)
7726                     ; 4355     default: break;
7727  bc5e 2711          	jreq	L1772
7728  bc60 4a            	dec	a
7729  bc61 2715          	jreq	L3772
7730  bc63 4a            	dec	a
7731  bc64 2719          	jreq	L5772
7732  bc66 4a            	dec	a
7733  bc67 271d          	jreq	L7772
7734  bc69 4a            	dec	a
7735  bc6a 2721          	jreq	L1003
7736  bc6c 4a            	dec	a
7737  bc6d 2725          	jreq	L3003
7738  bc6f 2028          	jra	L3503
7739  bc71               L1772:
7740                     ; 4349     case 0: Pending_uip_ethaddr_oct[5] = (uint8_t)temp; break;
7742  bc71 7b03          	ld	a,(OFST+0,sp)
7743  bc73 c7011a        	ld	_Pending_uip_ethaddr_oct+5,a
7746  bc76 2021          	jra	L3503
7747  bc78               L3772:
7748                     ; 4350     case 1: Pending_uip_ethaddr_oct[4] = (uint8_t)temp; break;
7750  bc78 7b03          	ld	a,(OFST+0,sp)
7751  bc7a c70119        	ld	_Pending_uip_ethaddr_oct+4,a
7754  bc7d 201a          	jra	L3503
7755  bc7f               L5772:
7756                     ; 4351     case 2: Pending_uip_ethaddr_oct[3] = (uint8_t)temp; break;
7758  bc7f 7b03          	ld	a,(OFST+0,sp)
7759  bc81 c70118        	ld	_Pending_uip_ethaddr_oct+3,a
7762  bc84 2013          	jra	L3503
7763  bc86               L7772:
7764                     ; 4352     case 3: Pending_uip_ethaddr_oct[2] = (uint8_t)temp; break;
7766  bc86 7b03          	ld	a,(OFST+0,sp)
7767  bc88 c70117        	ld	_Pending_uip_ethaddr_oct+2,a
7770  bc8b 200c          	jra	L3503
7771  bc8d               L1003:
7772                     ; 4353     case 4: Pending_uip_ethaddr_oct[1] = (uint8_t)temp; break;
7774  bc8d 7b03          	ld	a,(OFST+0,sp)
7775  bc8f c70116        	ld	_Pending_uip_ethaddr_oct+1,a
7778  bc92 2005          	jra	L3503
7779  bc94               L3003:
7780                     ; 4354     case 5: Pending_uip_ethaddr_oct[0] = (uint8_t)temp; break;
7782  bc94 7b03          	ld	a,(OFST+0,sp)
7783  bc96 c70115        	ld	_Pending_uip_ethaddr_oct,a
7786                     ; 4355     default: break;
7788  bc99               L3503:
7789                     ; 4358 }
7792  bc99 5b05          	addw	sp,#5
7793  bc9b 81            	ret	
8187                     	switch	.bss
8188  0017               _insertion_flag:
8189  0017 000000        	ds.b	3
8190                     	xdef	_insertion_flag
8191                     	xref	_second_counter
8192                     	xref	_RXERIF_counter
8193                     	xref	_TXERIF_counter
8194                     	xref	_MQTT_error_status
8195                     	xref	_mqtt_start_status
8196                     	xref	_Pending_mqtt_password
8197                     	xref	_Pending_mqtt_username
8198                     	xref	_Pending_mqttport
8199                     	xref	_Pending_mqttserveraddr
8200                     	xref	_stored_mqtt_password
8201                     	xref	_stored_mqtt_username
8202                     	xref	_stored_mqttport
8203                     	xref	_stored_mqttserveraddr
8204  001a               _current_webpage:
8205  001a 00            	ds.b	1
8206                     	xdef	_current_webpage
8207  001b               _alpha:
8208  001b 000000000000  	ds.b	6
8209                     	xdef	_alpha
8210  0021               _break_while:
8211  0021 00            	ds.b	1
8212                     	xdef	_break_while
8213  0022               _tmp_nParseLeft:
8214  0022 00            	ds.b	1
8215                     	xdef	_tmp_nParseLeft
8216  0023               _tmp_nBytes:
8217  0023 0000          	ds.b	2
8218                     	xdef	_tmp_nBytes
8219  0025               _tmp_pBuffer:
8220  0025 0000          	ds.b	2
8221                     	xdef	_tmp_pBuffer
8222  0027               _z_diag:
8223  0027 00            	ds.b	1
8224                     	xdef	_z_diag
8225  0028               _saved_newlines:
8226  0028 00            	ds.b	1
8227                     	xdef	_saved_newlines
8228  0029               _saved_postpartial_previous:
8229  0029 000000000000  	ds.b	24
8230                     	xdef	_saved_postpartial_previous
8231  0041               _saved_postpartial:
8232  0041 000000000000  	ds.b	24
8233                     	xdef	_saved_postpartial
8234  0059               _saved_nparseleft:
8235  0059 00            	ds.b	1
8236                     	xdef	_saved_nparseleft
8237  005a               _saved_parsestate:
8238  005a 00            	ds.b	1
8239                     	xdef	_saved_parsestate
8240  005b               _saved_nstate:
8241  005b 00            	ds.b	1
8242                     	xdef	_saved_nstate
8243  005c               _OctetArray:
8244  005c 000000000000  	ds.b	11
8245                     	xdef	_OctetArray
8246                     	xref	_user_reboot_request
8247                     	xref	_parse_complete
8248                     	xref	_mac_string
8249                     	xref	_stored_config_settings
8250                     	xref	_stored_devicename
8251                     	xref	_stored_port
8252                     	xref	_stored_netmask
8253                     	xref	_stored_draddr
8254                     	xref	_stored_hostaddr
8255                     	xref	_Pending_uip_ethaddr_oct
8256                     	xref	_Pending_config_settings
8257                     	xref	_Pending_devicename
8258                     	xref	_Pending_port
8259                     	xref	_Pending_netmask
8260                     	xref	_Pending_draddr
8261                     	xref	_Pending_hostaddr
8262                     	xref	_invert_input
8263                     	xref	_IO_8to1
8264                     	xref	_IO_16to9
8265                     	xref	_Port_Httpd
8266                     	xref	_strlen
8267                     	xref	_debugflash
8268                     	xref	_uip_flags
8269                     	xref	_uip_conn
8270                     	xref	_uip_len
8271                     	xref	_uip_appdata
8272                     	xref	_htons
8273                     	xref	_uip_send
8274                     	xref	_uip_listen
8275                     	xref	_uip_init_stats
8276                     	xdef	_SetMAC
8277                     	xdef	_clear_saved_postpartial_previous
8278                     	xdef	_clear_saved_postpartial_data
8279                     	xdef	_clear_saved_postpartial_all
8280                     	xdef	_GpioSetPin
8281                     	xdef	_GpioGetPin
8282                     	xdef	_parse_POST_port
8283                     	xdef	_parse_POST_address
8284                     	xdef	_parse_POST_string
8285                     	xdef	_HttpDCall
8286                     	xdef	_HttpDInit
8287                     	xdef	_emb_itoa
8288                     	xdef	_adjust_template_size
8289                     	switch	.const
8290  9dc0               L333:
8291  9dc0 436f6e6e6563  	dc.b	"Connection:close",13
8292  9dd1 0a00          	dc.b	10,0
8293  9dd3               L133:
8294  9dd3 436f6e74656e  	dc.b	"Content-Type: text"
8295  9de5 2f68746d6c3b  	dc.b	"/html; charset=utf"
8296  9df7 2d380d        	dc.b	"-8",13
8297  9dfa 0a00          	dc.b	10,0
8298  9dfc               L723:
8299  9dfc 43616368652d  	dc.b	"Cache-Control: no-"
8300  9e0e 63616368652c  	dc.b	"cache, no-store",13
8301  9e1e 0a00          	dc.b	10,0
8302  9e20               L713:
8303  9e20 436f6e74656e  	dc.b	"Content-Length:",0
8304  9e30               L513:
8305  9e30 0d0a00        	dc.b	13,10,0
8306  9e33               L313:
8307  9e33 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8308                     	xref.b	c_lreg
8309                     	xref.b	c_x
8310                     	xref.b	c_y
8330                     	xref	c_imul
8331                     	xref	c_uitolx
8332                     	xref	c_ludv
8333                     	xref	c_lumd
8334                     	xref	c_rtol
8335                     	xref	c_ltor
8336                     	xref	c_lzmp
8337                     	end
