   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  8080               L11_checked:
  20  8080 636865636b65  	dc.b	"checked",0
  21  8088               L31_g_HtmlPageIOControl:
  22  8088 257930342579  	dc.b	"%y04%y05%y06<title"
  23  809a 3e494f20436f  	dc.b	">IO Control</title"
  24  80ac 3e3c2f686561  	dc.b	"></head><body><h1>"
  25  80be 494f20436f6e  	dc.b	"IO Control</h1><fo"
  26  80d0 726d206d6574  	dc.b	"rm method='POST' a"
  27  80e2 6374696f6e3d  	dc.b	"ction='/'><table><"
  28  80f4 74723e3c7464  	dc.b	"tr><td class='t1'>"
  29  8106 4e616d653a3c  	dc.b	"Name:</td><td clas"
  30  8118 733d27743227  	dc.b	"s='t2'>%a00</td></"
  31  812a 74723e3c2f74  	dc.b	"tr></table><table>"
  32  813c 3c74723e3c74  	dc.b	"<tr><td class='t1'"
  33  814e 3e3c2f74643e  	dc.b	"></td><td class='t"
  34  8160 33273e3c2f74  	dc.b	"3'></td><td class="
  35  8172 277431273e53  	dc.b	"'t1'>SET</td></tr>"
  36  8184 3c7472        	dc.b	"<tr"
  37  8187 3e3c74642063  	dc.b	"><td class='t1'>Ou"
  38  8199 747075743031  	dc.b	"tput01</td><td cla"
  39  81ab 73733d277325  	dc.b	"ss='s%i00'></td><t"
  40  81bd 6420636c6173  	dc.b	"d class='t1'><inpu"
  41  81cf 742074797065  	dc.b	"t type='radio' id="
  42  81e1 2730316f6e27  	dc.b	"'01on' name='o00' "
  43  81f3 76616c75653d  	dc.b	"value='1' %o00><la"
  44  8205 62656c20666f  	dc.b	"bel for='01on'>ON<"
  45  8217 2f6c6162656c  	dc.b	"/label><input type"
  46  8229 3d2772616469  	dc.b	"='radio' id='01off"
  47  823b 27206e616d65  	dc.b	"' name='o00' value"
  48  824d 3d2730272025  	dc.b	"='0' %p00><label f"
  49  825f 6f723d273031  	dc.b	"or='01off'>OFF</la"
  50  8271 62656c3e3c2f  	dc.b	"bel></td></tr><tr>"
  51  8283 3c7464        	dc.b	"<td"
  52  8286 20636c617373  	dc.b	" class='t1'>Output"
  53  8298 30323c2f7464  	dc.b	"02</td><td class='"
  54  82aa 732569303127  	dc.b	"s%i01'></td><td cl"
  55  82bc 6173733d2774  	dc.b	"ass='t1'><input ty"
  56  82ce 70653d277261  	dc.b	"pe='radio' id='02o"
  57  82e0 6e27206e616d  	dc.b	"n' name='o01' valu"
  58  82f2 653d27312720  	dc.b	"e='1' %o01><label "
  59  8304 666f723d2730  	dc.b	"for='02on'>ON</lab"
  60  8316 656c3e3c696e  	dc.b	"el><input type='ra"
  61  8328 64696f272069  	dc.b	"dio' id='02off' na"
  62  833a 6d653d276f30  	dc.b	"me='o01' value='0'"
  63  834c 20257030313e  	dc.b	" %p01><label for='"
  64  835e 30326f666627  	dc.b	"02off'>OFF</label>"
  65  8370 3c2f74643e3c  	dc.b	"</td></tr><tr><td "
  66  8382 636c61        	dc.b	"cla"
  67  8385 73733d277431  	dc.b	"ss='t1'>Output03</"
  68  8397 74643e3c7464  	dc.b	"td><td class='s%i0"
  69  83a9 32273e3c2f74  	dc.b	"2'></td><td class="
  70  83bb 277431273e3c  	dc.b	"'t1'><input type='"
  71  83cd 726164696f27  	dc.b	"radio' id='03on' n"
  72  83df 616d653d276f  	dc.b	"ame='o02' value='1"
  73  83f1 2720256f3032  	dc.b	"' %o02><label for="
  74  8403 2730336f6e27  	dc.b	"'03on'>ON</label><"
  75  8415 696e70757420  	dc.b	"input type='radio'"
  76  8427 2069643d2730  	dc.b	" id='03off' name='"
  77  8439 6f3032272076  	dc.b	"o02' value='0' %p0"
  78  844b 323e3c6c6162  	dc.b	"2><label for='03of"
  79  845d 66273e4f4646  	dc.b	"f'>OFF</label></td"
  80  846f 3e3c2f74723e  	dc.b	"></tr><tr><td clas"
  81  8481 733d27        	dc.b	"s='"
  82  8484 7431273e4f75  	dc.b	"t1'>Output04</td><"
  83  8496 746420636c61  	dc.b	"td class='s%i03'><"
  84  84a8 2f74643e3c74  	dc.b	"/td><td class='t1'"
  85  84ba 3e3c696e7075  	dc.b	"><input type='radi"
  86  84cc 6f272069643d  	dc.b	"o' id='04on' name="
  87  84de 276f30332720  	dc.b	"'o03' value='1' %o"
  88  84f0 30333e3c6c61  	dc.b	"03><label for='04o"
  89  8502 6e273e4f4e3c  	dc.b	"n'>ON</label><inpu"
  90  8514 742074797065  	dc.b	"t type='radio' id="
  91  8526 2730346f6666  	dc.b	"'04off' name='o03'"
  92  8538 2076616c7565  	dc.b	" value='0' %p03><l"
  93  854a 6162656c2066  	dc.b	"abel for='04off'>O"
  94  855c 46463c2f6c61  	dc.b	"FF</label></td></t"
  95  856e 723e3c74723e  	dc.b	"r><tr><td class='t"
  96  8580 31273e        	dc.b	"1'>"
  97  8583 4f7574707574  	dc.b	"Output05</td><td c"
  98  8595 6c6173733d27  	dc.b	"lass='s%i04'></td>"
  99  85a7 3c746420636c  	dc.b	"<td class='t1'><in"
 100  85b9 707574207479  	dc.b	"put type='radio' i"
 101  85cb 643d2730356f  	dc.b	"d='05on' name='o04"
 102  85dd 272076616c75  	dc.b	"' value='1' %o04><"
 103  85ef 6c6162656c20  	dc.b	"label for='05on'>O"
 104  8601 4e3c2f6c6162  	dc.b	"N</label><input ty"
 105  8613 70653d277261  	dc.b	"pe='radio' id='05o"
 106  8625 666627206e61  	dc.b	"ff' name='o04' val"
 107  8637 75653d273027  	dc.b	"ue='0' %p04><label"
 108  8649 20666f723d27  	dc.b	" for='05off'>OFF</"
 109  865b 6c6162656c3e  	dc.b	"label></td></tr><t"
 110  866d 723e3c746420  	dc.b	"r><td class='t1'>O"
 111  867f 757470        	dc.b	"utp"
 112  8682 757430363c2f  	dc.b	"ut06</td><td class"
 113  8694 3d2773256930  	dc.b	"='s%i05'></td><td "
 114  86a6 636c6173733d  	dc.b	"class='t1'><input "
 115  86b8 747970653d27  	dc.b	"type='radio' id='0"
 116  86ca 366f6e27206e  	dc.b	"6on' name='o05' va"
 117  86dc 6c75653d2731  	dc.b	"lue='1' %o05><labe"
 118  86ee 6c20666f723d  	dc.b	"l for='06on'>ON</l"
 119  8700 6162656c3e3c  	dc.b	"abel><input type='"
 120  8712 726164696f27  	dc.b	"radio' id='06off' "
 121  8724 6e616d653d27  	dc.b	"name='o05' value='"
 122  8736 302720257030  	dc.b	"0' %p05><label for"
 123  8748 3d2730366f66  	dc.b	"='06off'>OFF</labe"
 124  875a 6c3e3c2f7464  	dc.b	"l></td></tr><tr><t"
 125  876c 6420636c6173  	dc.b	"d class='t1'>Outpu"
 126  877e 743037        	dc.b	"t07"
 127  8781 3c2f74643e3c  	dc.b	"</td><td class='s%"
 128  8793 693036273e3c  	dc.b	"i06'></td><td clas"
 129  87a5 733d27743127  	dc.b	"s='t1'><input type"
 130  87b7 3d2772616469  	dc.b	"='radio' id='07on'"
 131  87c9 206e616d653d  	dc.b	" name='o06' value="
 132  87db 27312720256f  	dc.b	"'1' %o06><label fo"
 133  87ed 723d2730376f  	dc.b	"r='07on'>ON</label"
 134  87ff 3e3c696e7075  	dc.b	"><input type='radi"
 135  8811 6f272069643d  	dc.b	"o' id='07off' name"
 136  8823 3d276f303627  	dc.b	"='o06' value='0' %"
 137  8835 7030363e3c6c  	dc.b	"p06><label for='07"
 138  8847 6f6666273e4f  	dc.b	"off'>OFF</label></"
 139  8859 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 140  886b 6173733d2774  	dc.b	"ass='t1'>Output08<"
 141  887d 2f7464        	dc.b	"/td"
 142  8880 3e3c74642063  	dc.b	"><td class='s%i07'"
 143  8892 3e3c2f74643e  	dc.b	"></td><td class='t"
 144  88a4 31273e3c696e  	dc.b	"1'><input type='ra"
 145  88b6 64696f272069  	dc.b	"dio' id='08on' nam"
 146  88c8 653d276f3037  	dc.b	"e='o07' value='1' "
 147  88da 256f30373e3c  	dc.b	"%o07><label for='0"
 148  88ec 386f6e273e4f  	dc.b	"8on'>ON</label><in"
 149  88fe 707574207479  	dc.b	"put type='radio' i"
 150  8910 643d2730386f  	dc.b	"d='08off' name='o0"
 151  8922 37272076616c  	dc.b	"7' value='0' %p07>"
 152  8934 3c6c6162656c  	dc.b	"<label for='08off'"
 153  8946 3e4f46463c2f  	dc.b	">OFF</label></td><"
 154  8958 2f74723e3c2f  	dc.b	"/tr></table><table"
 155  896a 3e3c74723e3c  	dc.b	"><tr><td class='t1"
 156  897c 273e49        	dc.b	"'>I"
 157  897f 6e7075743031  	dc.b	"nput01</td><td cla"
 158  8991 73733d277325  	dc.b	"ss='s%i08'></td></"
 159  89a3 74723e3c7472  	dc.b	"tr><tr><td class='"
 160  89b5 7431273e496e  	dc.b	"t1'>Input02</td><t"
 161  89c7 6420636c6173  	dc.b	"d class='s%i09'></"
 162  89d9 74643e3c2f74  	dc.b	"td></tr><tr><td cl"
 163  89eb 6173733d2774  	dc.b	"ass='t1'>Input03</"
 164  89fd 74643e3c7464  	dc.b	"td><td class='s%i1"
 165  8a0f 30273e3c2f74  	dc.b	"0'></td></tr><tr><"
 166  8a21 746420636c61  	dc.b	"td class='t1'>Inpu"
 167  8a33 7430343c2f74  	dc.b	"t04</td><td class="
 168  8a45 277325693131  	dc.b	"'s%i11'></td></tr>"
 169  8a57 3c74723e3c74  	dc.b	"<tr><td class='t1'"
 170  8a69 3e496e707574  	dc.b	">Input05</td><td c"
 171  8a7b 6c6173        	dc.b	"las"
 172  8a7e 733d27732569  	dc.b	"s='s%i12'></td></t"
 173  8a90 723e3c74723e  	dc.b	"r><tr><td class='t"
 174  8aa2 31273e496e70  	dc.b	"1'>Input06</td><td"
 175  8ab4 20636c617373  	dc.b	" class='s%i13'></t"
 176  8ac6 643e3c2f7472  	dc.b	"d></tr><tr><td cla"
 177  8ad8 73733d277431  	dc.b	"ss='t1'>Input07</t"
 178  8aea 643e3c746420  	dc.b	"d><td class='s%i14"
 179  8afc 273e3c2f7464  	dc.b	"'></td></tr><tr><t"
 180  8b0e 6420636c6173  	dc.b	"d class='t1'>Input"
 181  8b20 30383c2f7464  	dc.b	"08</td><td class='"
 182  8b32 732569313527  	dc.b	"s%i15'></td></tr><"
 183  8b44 2f7461626c65  	dc.b	"/table><input type"
 184  8b56 3d2768696464  	dc.b	"='hidden' name='z0"
 185  8b68 30272076616c  	dc.b	"0' value='0'><butt"
 186  8b7a 6f6e20        	dc.b	"on "
 187  8b7d 747970653d27  	dc.b	"type='submit' titl"
 188  8b8f 653d27536176  	dc.b	"e='Saves your chan"
 189  8ba1 676573207468  	dc.b	"ges then restarts "
 190  8bb3 746865204e65  	dc.b	"the Network Module"
 191  8bc5 273e53617665  	dc.b	"'>Save</button><bu"
 192  8bd7 74746f6e2074  	dc.b	"tton type='reset' "
 193  8be9 7469746c653d  	dc.b	"title='Un-does any"
 194  8bfb 206368616e67  	dc.b	" changes that have"
 195  8c0d 206e6f742062  	dc.b	" not been saved'>U"
 196  8c1f 6e646f20416c  	dc.b	"ndo All</button></"
 197  8c31 666f726d3e25  	dc.b	"form>%y03/60%y02Re"
 198  8c43 66726573683c  	dc.b	"fresh</button></fo"
 199  8c55 726d3e257930  	dc.b	"rm>%y03/61%y02Conf"
 200  8c67 696775726174  	dc.b	"iguration</button>"
 201  8c79 3c2f66        	dc.b	"</f"
 202  8c7c 6f726d3e3c2f  	dc.b	"orm></body></html>",0
 203  8c8f               L51_g_HtmlPageConfiguration:
 204  8c8f 257930342579  	dc.b	"%y04%y05%y06<title"
 205  8ca1 3e436f6e6669  	dc.b	">Configuration</ti"
 206  8cb3 746c653e3c2f  	dc.b	"tle></head><body><"
 207  8cc5 68313e436f6e  	dc.b	"h1>Configuration</"
 208  8cd7 68313e3c666f  	dc.b	"h1><form method='P"
 209  8ce9 4f5354272061  	dc.b	"OST' action='/'><t"
 210  8cfb 61626c653e3c  	dc.b	"able><tr><td class"
 211  8d0d 3d277431273e  	dc.b	"='t1'>Name:</td><t"
 212  8d1f 643e3c696e70  	dc.b	"d><input name='a00"
 213  8d31 2720636c6173  	dc.b	"' class='t2' value"
 214  8d43 3d2725613030  	dc.b	"='%a00' pattern='["
 215  8d55 302d39612d7a  	dc.b	"0-9a-zA-Z-_*.]{1,1"
 216  8d67 397d27207265  	dc.b	"9}' required title"
 217  8d79 3d273120746f  	dc.b	"='1 to 19 letters,"
 218  8d8b 206e75        	dc.b	" nu"
 219  8d8e 6d626572732c  	dc.b	"mbers, and -_*. no"
 220  8da0 207370616365  	dc.b	" spaces' maxlength"
 221  8db2 3d273139273e  	dc.b	"='19'></td></tr></"
 222  8dc4 7461626c653e  	dc.b	"table><table><tr><"
 223  8dd6 746420636c61  	dc.b	"td class='t1'>Conf"
 224  8de8 69673c2f7464  	dc.b	"ig</td><td><input "
 225  8dfa 6e616d653d27  	dc.b	"name='g00' class='"
 226  8e0c 743527207661  	dc.b	"t5' value='%g00' p"
 227  8e1e 61747465726e  	dc.b	"attern='[0-9a-zA-Z"
 228  8e30 5d7b367d2720  	dc.b	"]{6}' title='6 cha"
 229  8e42 726163746572  	dc.b	"racters required. "
 230  8e54 53656520446f  	dc.b	"See Documentation'"
 231  8e66 206d61786c65  	dc.b	" maxlength='6'></t"
 232  8e78 643e3c2f7472  	dc.b	"d></tr></table><p>"
 233  8e8a 3c2f70        	dc.b	"</p"
 234  8e8d 3e3c7461626c  	dc.b	"><table><tr><td cl"
 235  8e9f 6173733d2774  	dc.b	"ass='t1'>IP Addres"
 236  8eb1 733c2f74643e  	dc.b	"s</td><td><input n"
 237  8ec3 616d653d2762  	dc.b	"ame='b00' class='t"
 238  8ed5 36272076616c  	dc.b	"6' value='%b00' %y"
 239  8ee7 30303c74643e  	dc.b	"00<td><input name="
 240  8ef9 276230312720  	dc.b	"'b01' class='t6' v"
 241  8f0b 616c75653d27  	dc.b	"alue='%b01' %y00<t"
 242  8f1d 643e3c696e70  	dc.b	"d><input name='b02"
 243  8f2f 2720636c6173  	dc.b	"' class='t6' value"
 244  8f41 3d2725623032  	dc.b	"='%b02' %y00<td><i"
 245  8f53 6e707574206e  	dc.b	"nput name='b03' cl"
 246  8f65 6173733d2774  	dc.b	"ass='t6' value='%b"
 247  8f77 303327202579  	dc.b	"03' %y00</tr><tr><"
 248  8f89 746420        	dc.b	"td "
 249  8f8c 636c6173733d  	dc.b	"class='t1'>Gateway"
 250  8f9e 3c2f74643e3c  	dc.b	"</td><td><input na"
 251  8fb0 6d653d276230  	dc.b	"me='b04' class='t6"
 252  8fc2 272076616c75  	dc.b	"' value='%b04' %y0"
 253  8fd4 303c74643e3c  	dc.b	"0<td><input name='"
 254  8fe6 623035272063  	dc.b	"b05' class='t6' va"
 255  8ff8 6c75653d2725  	dc.b	"lue='%b05' %y00<td"
 256  900a 3e3c696e7075  	dc.b	"><input name='b06'"
 257  901c 20636c617373  	dc.b	" class='t6' value="
 258  902e 272562303627  	dc.b	"'%b06' %y00<td><in"
 259  9040 707574206e61  	dc.b	"put name='b07' cla"
 260  9052 73733d277436  	dc.b	"ss='t6' value='%b0"
 261  9064 372720257930  	dc.b	"7' %y00</tr><tr><t"
 262  9076 6420636c6173  	dc.b	"d class='t1'>Netma"
 263  9088 736b3c        	dc.b	"sk<"
 264  908b 2f74643e3c74  	dc.b	"/td><td><input nam"
 265  909d 653d27623038  	dc.b	"e='b08' class='t6'"
 266  90af 2076616c7565  	dc.b	" value='%b08' %y00"
 267  90c1 3c74643e3c69  	dc.b	"<td><input name='b"
 268  90d3 30392720636c  	dc.b	"09' class='t6' val"
 269  90e5 75653d272562  	dc.b	"ue='%b09' %y00<td>"
 270  90f7 3c696e707574  	dc.b	"<input name='b10' "
 271  9109 636c6173733d  	dc.b	"class='t6' value='"
 272  911b 256231302720  	dc.b	"%b10' %y00<td><inp"
 273  912d 7574206e616d  	dc.b	"ut name='b11' clas"
 274  913f 733d27743627  	dc.b	"s='t6' value='%b11"
 275  9151 272025793030  	dc.b	"' %y00</tr></table"
 276  9163 3e3c7461626c  	dc.b	"><table><tr><td cl"
 277  9175 6173733d2774  	dc.b	"ass='t1'>Port</td>"
 278  9187 3c7464        	dc.b	"<td"
 279  918a 3e3c696e7075  	dc.b	"><input name='c00'"
 280  919c 20636c617373  	dc.b	" class='t8' value="
 281  91ae 272563303027  	dc.b	"'%c00' pattern='[0"
 282  91c0 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 283  91d2 657220303030  	dc.b	"er 00010 to 65535'"
 284  91e4 206d61786c65  	dc.b	" maxlength='5'></t"
 285  91f6 643e3c2f7472  	dc.b	"d></tr></table><ta"
 286  9208 626c653e3c74  	dc.b	"ble><tr><td class="
 287  921a 277431273e4d  	dc.b	"'t1'>MAC Address</"
 288  922c 74643e3c7464  	dc.b	"td><td><input name"
 289  923e 3d2764303027  	dc.b	"='d00' class='t7' "
 290  9250 76616c75653d  	dc.b	"value='%d00' %y01<"
 291  9262 74643e3c696e  	dc.b	"td><input name='d0"
 292  9274 312720636c61  	dc.b	"1' class='t7' valu"
 293  9286 653d27        	dc.b	"e='"
 294  9289 256430312720  	dc.b	"%d01' %y01<td><inp"
 295  929b 7574206e616d  	dc.b	"ut name='d02' clas"
 296  92ad 733d27743727  	dc.b	"s='t7' value='%d02"
 297  92bf 272025793031  	dc.b	"' %y01<td><input n"
 298  92d1 616d653d2764  	dc.b	"ame='d03' class='t"
 299  92e3 37272076616c  	dc.b	"7' value='%d03' %y"
 300  92f5 30313c74643e  	dc.b	"01<td><input name="
 301  9307 276430342720  	dc.b	"'d04' class='t7' v"
 302  9319 616c75653d27  	dc.b	"alue='%d04' %y01<t"
 303  932b 643e3c696e70  	dc.b	"d><input name='d05"
 304  933d 2720636c6173  	dc.b	"' class='t7' value"
 305  934f 3d2725643035  	dc.b	"='%d05' %y01</tr><"
 306  9361 2f7461626c65  	dc.b	"/table><p></p><tab"
 307  9373 6c653e3c7472  	dc.b	"le><tr><td class='"
 308  9385 743127        	dc.b	"t1'"
 309  9388 3e4d51545420  	dc.b	">MQTT Server</td><"
 310  939a 74643e3c696e  	dc.b	"td><input name='b1"
 311  93ac 322720636c61  	dc.b	"2' class='t6' valu"
 312  93be 653d27256231  	dc.b	"e='%b12' %y00<td><"
 313  93d0 696e70757420  	dc.b	"input name='b13' c"
 314  93e2 6c6173733d27  	dc.b	"lass='t6' value='%"
 315  93f4 623133272025  	dc.b	"b13' %y00<td><inpu"
 316  9406 74206e616d65  	dc.b	"t name='b14' class"
 317  9418 3d2774362720  	dc.b	"='t6' value='%b14'"
 318  942a 20257930303c  	dc.b	" %y00<td><input na"
 319  943c 6d653d276231  	dc.b	"me='b15' class='t6"
 320  944e 272076616c75  	dc.b	"' value='%b15' %y0"
 321  9460 303c2f74723e  	dc.b	"0</tr></table><tab"
 322  9472 6c653e3c7472  	dc.b	"le><tr><td class='"
 323  9484 743127        	dc.b	"t1'"
 324  9487 3e4d51545420  	dc.b	">MQTT Port</td><td"
 325  9499 3e3c696e7075  	dc.b	"><input name='c01'"
 326  94ab 20636c617373  	dc.b	" class='t8' value="
 327  94bd 272563303127  	dc.b	"'%c01' pattern='[0"
 328  94cf 2d395d7b357d  	dc.b	"-9]{5}' title='Ent"
 329  94e1 657220303030  	dc.b	"er 00010 to 65535'"
 330  94f3 206d61786c65  	dc.b	" maxlength='5'></t"
 331  9505 643e3c2f7472  	dc.b	"d></tr></table><ta"
 332  9517 626c653e3c74  	dc.b	"ble><tr><td class="
 333  9529 277431273e4d  	dc.b	"'t1'>MQTT Username"
 334  953b 3c2f74643e3c  	dc.b	"</td><td><input na"
 335  954d 6d653d276c30  	dc.b	"me='l00' class='t1"
 336  955f 272076616c75  	dc.b	"' value='%l00' pat"
 337  9571 7465726e3d27  	dc.b	"tern='[0-9a-zA-Z-_"
 338  9583 2a2e5d        	dc.b	"*.]"
 339  9586 7b302c31307d  	dc.b	"{0,10}' title='0 t"
 340  9598 6f203130206c  	dc.b	"o 10 letters, numb"
 341  95aa 6572732c2061  	dc.b	"ers, and -_*. no s"
 342  95bc 70616365732e  	dc.b	"paces. Use none fo"
 343  95ce 72206e6f2065  	dc.b	"r no entry.' maxle"
 344  95e0 6e6774683d27  	dc.b	"ngth='10'></td></t"
 345  95f2 723e3c74723e  	dc.b	"r><tr><td class='t"
 346  9604 31273e4d5154  	dc.b	"1'>MQTT Password</"
 347  9616 74643e3c7464  	dc.b	"td><td><input name"
 348  9628 3d276d303027  	dc.b	"='m00' class='t1' "
 349  963a 76616c75653d  	dc.b	"value='%m00' patte"
 350  964c 726e3d275b30  	dc.b	"rn='[0-9a-zA-Z-_*."
 351  965e 5d7b302c3130  	dc.b	"]{0,10}' title='0 "
 352  9670 746f20313020  	dc.b	"to 10 letters, num"
 353  9682 626572        	dc.b	"ber"
 354  9685 732c20616e64  	dc.b	"s, and -_*. no spa"
 355  9697 6365732e2055  	dc.b	"ces. Use none for "
 356  96a9 6e6f20656e74  	dc.b	"no entry.' maxleng"
 357  96bb 74683d273130  	dc.b	"th='10'></td></tr>"
 358  96cd 3c2f7461626c  	dc.b	"</table><table><tr"
 359  96df 3e3c74642063  	dc.b	"><td class='t1'>MQ"
 360  96f1 545420537461  	dc.b	"TT Status  </td><t"
 361  9703 6420636c6173  	dc.b	"d class='s%n00'></"
 362  9715 74643e3c7464  	dc.b	"td><td class='s%n0"
 363  9727 31273e3c2f74  	dc.b	"1'></td><td class="
 364  9739 2773256e3032  	dc.b	"'s%n02'></td><td c"
 365  974b 6c6173733d27  	dc.b	"lass='s%n03'></td>"
 366  975d 3c746420636c  	dc.b	"<td class='s%n04'>"
 367  976f 3c2f74643e3c  	dc.b	"</td></tr></table>"
 368  9781 3c703e        	dc.b	"<p>"
 369  9784 3c2f703e3c69  	dc.b	"</p><input type='h"
 370  9796 696464656e27  	dc.b	"idden' name='z00' "
 371  97a8 76616c75653d  	dc.b	"value='0'><button "
 372  97ba 747970653d27  	dc.b	"type='submit'>Save"
 373  97cc 3c2f62757474  	dc.b	"</button><button t"
 374  97de 7970653d2772  	dc.b	"ype='reset'>Undo A"
 375  97f0 6c6c3c2f6275  	dc.b	"ll</button></form>"
 376  9802 3c703e536565  	dc.b	"<p>See Documentati"
 377  9814 6f6e20666f72  	dc.b	"on for help<br>Cod"
 378  9826 652052657669  	dc.b	"e Revision 2020111"
 379  9838 362030323536  	dc.b	"6 0256</p>%y03/91%"
 380  984a 793032526562  	dc.b	"y02Reboot</button>"
 381  985c 3c2f666f726d  	dc.b	"</form><br><br>%y0"
 382  986e 332f36312579  	dc.b	"3/61%y02Refresh</b"
 383  9880 757474        	dc.b	"utt"
 384  9883 6f6e3e3c2f66  	dc.b	"on></form>%y03/60%"
 385  9895 793032494f20  	dc.b	"y02IO Control</but"
 386  98a7 746f6e3e3c2f  	dc.b	"ton></form></body>"
 387  98b9 3c2f68746d6c  	dc.b	"</html>",0
 388  98c1               L71_g_HtmlPageRstate:
 389  98c1 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 390  98d3 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 391  98e5 6561643e3c74  	dc.b	"ead><title>Help Pa"
 392  98f7 676520323c2f  	dc.b	"ge 2</title><link "
 393  9909 72656c3d2769  	dc.b	"rel='icon' href='d"
 394  991b 6174613a2c27  	dc.b	"ata:,'></head><bod"
 395  992d 793e3c703e25  	dc.b	"y><p>%f00</p></bod"
 396  993f 793e3c2f6874  	dc.b	"y></html>",0
 397  9949               L12_page_string00:
 398  9949 706174746572  	dc.b	"pattern='[0-9]{3}'"
 399  995b 207469746c65  	dc.b	" title='Enter 000 "
 400  996d 746f20323535  	dc.b	"to 255' maxlength="
 401  997f 2733273e3c2f  	dc.b	"'3'></td>",0
 402  9989               L32_page_string00_len:
 403  9989 3f            	dc.b	63
 404  998a               L52_page_string00_len_less4:
 405  998a 3b            	dc.b	59
 406  998b               L72_page_string01:
 407  998b 706174746572  	dc.b	"pattern='[0-9a-f]{"
 408  999d 327d27207469  	dc.b	"2}' title='Enter 0"
 409  99af 3020746f2066  	dc.b	"0 to ff' maxlength"
 410  99c1 3d2732273e3c  	dc.b	"='2'></td>",0
 411  99cc               L13_page_string01_len:
 412  99cc 40            	dc.b	64
 413  99cd               L33_page_string01_len_less4:
 414  99cd 3c            	dc.b	60
 415  99ce               L53_page_string02:
 416  99ce 27206d657468  	dc.b	"' method='GET'><bu"
 417  99e0 74746f6e2074  	dc.b	"tton title='Save f"
 418  99f2 697273742120  	dc.b	"irst! This button "
 419  9a04 77696c6c206e  	dc.b	"will not save your"
 420  9a16 206368616e67  	dc.b	" changes'>",0
 421  9a21               L73_page_string02_len:
 422  9a21 52            	dc.b	82
 423  9a22               L14_page_string02_len_less4:
 424  9a22 4e            	dc.b	78
 425  9a23               L34_page_string03:
 426  9a23 3c666f726d20  	dc.b	"<form style='displ"
 427  9a35 61793a20696e  	dc.b	"ay: inline' action"
 428  9a47 3d2700        	dc.b	"='",0
 429  9a4a               L54_page_string03_len:
 430  9a4a 26            	dc.b	38
 431  9a4b               L74_page_string03_len_less4:
 432  9a4b 22            	dc.b	34
 433  9a4c               L15_page_string04:
 434  9a4c 3c21444f4354  	dc.b	"<!DOCTYPE html><ht"
 435  9a5e 6d6c206c616e  	dc.b	"ml lang='en-US'><h"
 436  9a70 6561643e3c6c  	dc.b	"ead><link rel='ico"
 437  9a82 6e2720687265  	dc.b	"n' href='data:,'>",0
 438  9a94               L35_page_string04_len:
 439  9a94 47            	dc.b	71
 440  9a95               L55_page_string04_len_less4:
 441  9a95 43            	dc.b	67
 442  9a96               L75_page_string05:
 443  9a96 3c7374796c65  	dc.b	"<style>.s0 { backg"
 444  9aa8 726f756e642d  	dc.b	"round-color: red; "
 445  9aba 77696474683a  	dc.b	"width: 30px; }.s1 "
 446  9acc 7b206261636b  	dc.b	"{ background-color"
 447  9ade 3a2067726565  	dc.b	": green; width: 30"
 448  9af0 70783b207d2e  	dc.b	"px; }.t1 { width: "
 449  9b02 31323070783b  	dc.b	"120px; }.t2 { widt"
 450  9b14 683a20313438  	dc.b	"h: 148px; }.t3 { w"
 451  9b26 696474683a20  	dc.b	"idth: 30px; }.t5 {"
 452  9b38 207769647468  	dc.b	" width: 60px; }.t6"
 453  9b4a 207b20776964  	dc.b	" { width: 25px; }."
 454  9b5c 7437207b2077  	dc.b	"t7 { width: 18px; "
 455  9b6e 7d2e7438207b  	dc.b	"}.t8 { width: 40px"
 456  9b80 3b207d00      	dc.b	"; }",0
 457  9b84               L16_page_string05_len:
 458  9b84 ed            	dc.b	237
 459  9b85               L36_page_string05_len_less4:
 460  9b85 e9            	dc.b	233
 461  9b86               L56_page_string06:
 462  9b86 7464207b2074  	dc.b	"td { text-align: c"
 463  9b98 656e7465723b  	dc.b	"enter; border: 1px"
 464  9baa 20626c61636b  	dc.b	" black solid; }</s"
 465  9bbc 74796c653e00  	dc.b	"tyle>",0
 466  9bc2               L76_page_string06_len:
 467  9bc2 3b            	dc.b	59
 468  9bc3               L17_page_string06_len_less4:
 469  9bc3 37            	dc.b	55
 523                     ; 1205 uint16_t adjust_template_size()
 523                     ; 1206 {
 525                     .text:	section	.text,new
 526  a27d               _adjust_template_size:
 528  a27d 89            	pushw	x
 529       00000002      OFST:	set	2
 532                     ; 1224   size = 0;
 534  a27e 5f            	clrw	x
 535  a27f 1f01          	ldw	(OFST-1,sp),x
 537                     ; 1229   if (current_webpage == WEBPAGE_IOCONTROL) {
 539  a281 c6001a        	ld	a,_current_webpage
 540  a284 2613          	jrne	L511
 541                     ; 1230     size = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
 543                     ; 1233     size = size + page_string04_len_less4
 543                     ; 1234                 + page_string05_len_less4
 543                     ; 1235 		+ page_string06_len_less4;
 545  a286 ae0d69        	ldw	x,#3433
 546  a289 1f01          	ldw	(OFST-1,sp),x
 548                     ; 1240     size = size + strlen(stored_devicename) - 4 ;
 550  a28b ae4000        	ldw	x,#_stored_devicename
 551  a28e cdf371        	call	_strlen
 553  a291 72fb01        	addw	x,(OFST-1,sp)
 554  a294 1c00a4        	addw	x,#164
 556                     ; 1247     size = size - 48;
 559                     ; 1263     size = size - 8;
 562                     ; 1277     size = size + (2 * page_string03_len_less4);
 565                     ; 1306     size = size + (2 * (page_string02_len_less4));
 569  a297 203d          	jra	L711
 570  a299               L511:
 571                     ; 1325   else if (current_webpage == WEBPAGE_CONFIGURATION) {
 573  a299 a101          	cp	a,#1
 574  a29b 2632          	jrne	L121
 575                     ; 1326     size = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
 577                     ; 1329     size = size + page_string04_len_less4
 577                     ; 1330                 + page_string05_len_less4
 577                     ; 1331 		+ page_string06_len_less4;
 579  a29d ae0d94        	ldw	x,#3476
 580  a2a0 1f01          	ldw	(OFST-1,sp),x
 582                     ; 1336     size = size + strlen(stored_devicename) - 4 ;
 584  a2a2 ae4000        	ldw	x,#_stored_devicename
 585  a2a5 cdf371        	call	_strlen
 587  a2a8 72fb01        	addw	x,(OFST-1,sp)
 588  a2ab 1d001c        	subw	x,#28
 590                     ; 1343     size = size - 12;
 593                     ; 1350     size = size + 1;
 596                     ; 1357     size = size - 12;
 599                     ; 1365     size = size + 2;
 602                     ; 1373     size = size - 4;
 605                     ; 1380     size = size + 1;
 607  a2ae 1f01          	ldw	(OFST-1,sp),x
 609                     ; 1385     size = size + (strlen(stored_mqtt_username) - 4);
 611  a2b0 ae4035        	ldw	x,#_stored_mqtt_username
 612  a2b3 cdf371        	call	_strlen
 614  a2b6 1d0004        	subw	x,#4
 615  a2b9 72fb01        	addw	x,(OFST-1,sp)
 616  a2bc 1f01          	ldw	(OFST-1,sp),x
 618                     ; 1390     size = size + (strlen(stored_mqtt_password) - 4);
 620  a2be ae4040        	ldw	x,#_stored_mqtt_password
 621  a2c1 cdf371        	call	_strlen
 623  a2c4 1d0004        	subw	x,#4
 624  a2c7 72fb01        	addw	x,(OFST-1,sp)
 626                     ; 1397     size = size - 15;
 628  a2ca 1c0659        	addw	x,#1625
 630                     ; 1411     size = size + (3 * page_string03_len_less4);
 633                     ; 1440     size = size + (12 * (page_string00_len_less4));
 636                     ; 1449     size = size + (4 * (page_string00_len_less4));
 639                     ; 1459     size = size + (6 * (page_string01_len_less4));
 642                     ; 1468     size = size + (3 * (page_string02_len_less4));
 646  a2cd 2007          	jra	L711
 647  a2cf               L121:
 648                     ; 1578   else if (current_webpage == WEBPAGE_RSTATE) {
 650  a2cf a106          	cp	a,#6
 651  a2d1 2603          	jrne	L711
 652                     ; 1579     size = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
 654                     ; 1584     size = size + 12;
 656  a2d3 ae0093        	ldw	x,#147
 658  a2d6               L711:
 659                     ; 1587   return size;
 663  a2d6 5b02          	addw	sp,#2
 664  a2d8 81            	ret	
 755                     ; 1591 void emb_itoa(uint32_t num, char* str, uint8_t base, uint8_t pad)
 755                     ; 1592 {
 756                     .text:	section	.text,new
 757  a2d9               _emb_itoa:
 759  a2d9 5207          	subw	sp,#7
 760       00000007      OFST:	set	7
 763                     ; 1610   for (i=0; i < pad; i++) str[i] = '0';
 765  a2db 0f07          	clr	(OFST+0,sp)
 768  a2dd 200a          	jra	L171
 769  a2df               L561:
 772  a2df 5f            	clrw	x
 773  a2e0 97            	ld	xl,a
 774  a2e1 72fb0e        	addw	x,(OFST+7,sp)
 775  a2e4 a630          	ld	a,#48
 776  a2e6 f7            	ld	(x),a
 779  a2e7 0c07          	inc	(OFST+0,sp)
 781  a2e9               L171:
 784  a2e9 7b07          	ld	a,(OFST+0,sp)
 785  a2eb 1111          	cp	a,(OFST+10,sp)
 786  a2ed 25f0          	jrult	L561
 787                     ; 1611   str[pad] = '\0';
 789  a2ef 7b11          	ld	a,(OFST+10,sp)
 790  a2f1 5f            	clrw	x
 791  a2f2 97            	ld	xl,a
 792  a2f3 72fb0e        	addw	x,(OFST+7,sp)
 793  a2f6 7f            	clr	(x)
 794                     ; 1612   if (num == 0) return;
 796  a2f7 96            	ldw	x,sp
 797  a2f8 1c000a        	addw	x,#OFST+3
 798  a2fb cdf751        	call	c_lzmp
 800  a2fe 2603cca3a8    	jreq	L02
 803                     ; 1615   i = 0;
 805  a303 0f07          	clr	(OFST+0,sp)
 808  a305 2060          	jra	L302
 809  a307               L771:
 810                     ; 1617     rem = (uint8_t)(num % base);
 812  a307 7b10          	ld	a,(OFST+9,sp)
 813  a309 b703          	ld	c_lreg+3,a
 814  a30b 3f02          	clr	c_lreg+2
 815  a30d 3f01          	clr	c_lreg+1
 816  a30f 3f00          	clr	c_lreg
 817  a311 96            	ldw	x,sp
 818  a312 5c            	incw	x
 819  a313 cdf764        	call	c_rtol
 822  a316 96            	ldw	x,sp
 823  a317 1c000a        	addw	x,#OFST+3
 824  a31a cdf5fe        	call	c_ltor
 826  a31d 96            	ldw	x,sp
 827  a31e 5c            	incw	x
 828  a31f cdf737        	call	c_lumd
 830  a322 b603          	ld	a,c_lreg+3
 831  a324 6b06          	ld	(OFST-1,sp),a
 833                     ; 1618     if (rem > 9) str[i++] = (uint8_t)(rem - 10 + 'a');
 835  a326 a10a          	cp	a,#10
 836  a328 7b07          	ld	a,(OFST+0,sp)
 837  a32a 250d          	jrult	L702
 840  a32c 0c07          	inc	(OFST+0,sp)
 842  a32e 5f            	clrw	x
 843  a32f 97            	ld	xl,a
 844  a330 72fb0e        	addw	x,(OFST+7,sp)
 845  a333 7b06          	ld	a,(OFST-1,sp)
 846  a335 ab57          	add	a,#87
 848  a337 200b          	jra	L112
 849  a339               L702:
 850                     ; 1619     else str[i++] = (uint8_t)(rem + '0');
 852  a339 0c07          	inc	(OFST+0,sp)
 854  a33b 5f            	clrw	x
 855  a33c 97            	ld	xl,a
 856  a33d 72fb0e        	addw	x,(OFST+7,sp)
 857  a340 7b06          	ld	a,(OFST-1,sp)
 858  a342 ab30          	add	a,#48
 859  a344               L112:
 860  a344 f7            	ld	(x),a
 861                     ; 1620     num = num/base;
 863  a345 7b10          	ld	a,(OFST+9,sp)
 864  a347 b703          	ld	c_lreg+3,a
 865  a349 3f02          	clr	c_lreg+2
 866  a34b 3f01          	clr	c_lreg+1
 867  a34d 3f00          	clr	c_lreg
 868  a34f 96            	ldw	x,sp
 869  a350 5c            	incw	x
 870  a351 cdf764        	call	c_rtol
 873  a354 96            	ldw	x,sp
 874  a355 1c000a        	addw	x,#OFST+3
 875  a358 cdf5fe        	call	c_ltor
 877  a35b 96            	ldw	x,sp
 878  a35c 5c            	incw	x
 879  a35d cdf610        	call	c_ludv
 881  a360 96            	ldw	x,sp
 882  a361 1c000a        	addw	x,#OFST+3
 883  a364 cdf764        	call	c_rtol
 885  a367               L302:
 886                     ; 1616   while (num != 0) {
 888  a367 96            	ldw	x,sp
 889  a368 1c000a        	addw	x,#OFST+3
 890  a36b cdf751        	call	c_lzmp
 892  a36e 2697          	jrne	L771
 893                     ; 1629     start = 0;
 895  a370 0f06          	clr	(OFST-1,sp)
 897                     ; 1630     end = (uint8_t)(pad - 1);
 899  a372 7b11          	ld	a,(OFST+10,sp)
 900  a374 4a            	dec	a
 901  a375 6b07          	ld	(OFST+0,sp),a
 904  a377 2029          	jra	L712
 905  a379               L312:
 906                     ; 1633       temp = str[start];
 908  a379 5f            	clrw	x
 909  a37a 97            	ld	xl,a
 910  a37b 72fb0e        	addw	x,(OFST+7,sp)
 911  a37e f6            	ld	a,(x)
 912  a37f 6b05          	ld	(OFST-2,sp),a
 914                     ; 1634       str[start] = str[end];
 916  a381 5f            	clrw	x
 917  a382 7b06          	ld	a,(OFST-1,sp)
 918  a384 97            	ld	xl,a
 919  a385 72fb0e        	addw	x,(OFST+7,sp)
 920  a388 7b07          	ld	a,(OFST+0,sp)
 921  a38a 905f          	clrw	y
 922  a38c 9097          	ld	yl,a
 923  a38e 72f90e        	addw	y,(OFST+7,sp)
 924  a391 90f6          	ld	a,(y)
 925  a393 f7            	ld	(x),a
 926                     ; 1635       str[end] = temp;
 928  a394 5f            	clrw	x
 929  a395 7b07          	ld	a,(OFST+0,sp)
 930  a397 97            	ld	xl,a
 931  a398 72fb0e        	addw	x,(OFST+7,sp)
 932  a39b 7b05          	ld	a,(OFST-2,sp)
 933  a39d f7            	ld	(x),a
 934                     ; 1636       start++;
 936  a39e 0c06          	inc	(OFST-1,sp)
 938                     ; 1637       end--;
 940  a3a0 0a07          	dec	(OFST+0,sp)
 942  a3a2               L712:
 943                     ; 1632     while (start < end) {
 943                     ; 1633       temp = str[start];
 943                     ; 1634       str[start] = str[end];
 943                     ; 1635       str[end] = temp;
 943                     ; 1636       start++;
 943                     ; 1637       end--;
 945  a3a2 7b06          	ld	a,(OFST-1,sp)
 946  a3a4 1107          	cp	a,(OFST+0,sp)
 947  a3a6 25d1          	jrult	L312
 948                     ; 1640 }
 949  a3a8               L02:
 952  a3a8 5b07          	addw	sp,#7
 953  a3aa 81            	ret	
1013                     ; 1643 static uint16_t CopyStringP(uint8_t** ppBuffer, const char* pString)
1013                     ; 1644 {
1014                     .text:	section	.text,new
1015  a3ab               L3_CopyStringP:
1017  a3ab 89            	pushw	x
1018  a3ac 5203          	subw	sp,#3
1019       00000003      OFST:	set	3
1022                     ; 1649   nBytes = 0;
1024  a3ae 5f            	clrw	x
1026  a3af 2014          	jra	L552
1027  a3b1               L152:
1028                     ; 1651     **ppBuffer = Character;
1030  a3b1 1e04          	ldw	x,(OFST+1,sp)
1031  a3b3 fe            	ldw	x,(x)
1032  a3b4 f7            	ld	(x),a
1033                     ; 1652     *ppBuffer = *ppBuffer + 1;
1035  a3b5 1e04          	ldw	x,(OFST+1,sp)
1036  a3b7 9093          	ldw	y,x
1037  a3b9 fe            	ldw	x,(x)
1038  a3ba 5c            	incw	x
1039  a3bb 90ff          	ldw	(y),x
1040                     ; 1653     pString = pString + 1;
1042  a3bd 1e08          	ldw	x,(OFST+5,sp)
1043  a3bf 5c            	incw	x
1044  a3c0 1f08          	ldw	(OFST+5,sp),x
1045                     ; 1654     nBytes++;
1047  a3c2 1e01          	ldw	x,(OFST-2,sp)
1048  a3c4 5c            	incw	x
1049  a3c5               L552:
1050  a3c5 1f01          	ldw	(OFST-2,sp),x
1052                     ; 1650   while ((Character = pString[0]) != '\0') {
1052                     ; 1651     **ppBuffer = Character;
1052                     ; 1652     *ppBuffer = *ppBuffer + 1;
1052                     ; 1653     pString = pString + 1;
1052                     ; 1654     nBytes++;
1054  a3c7 1e08          	ldw	x,(OFST+5,sp)
1055  a3c9 f6            	ld	a,(x)
1056  a3ca 6b03          	ld	(OFST+0,sp),a
1058  a3cc 26e3          	jrne	L152
1059                     ; 1656   return nBytes;
1061  a3ce 1e01          	ldw	x,(OFST-2,sp)
1064  a3d0 5b05          	addw	sp,#5
1065  a3d2 81            	ret	
1124                     ; 1660 static uint16_t CopyHttpHeader(uint8_t* pBuffer, uint16_t nDataLen)
1124                     ; 1661 {
1125                     .text:	section	.text,new
1126  a3d3               L5_CopyHttpHeader:
1128  a3d3 89            	pushw	x
1129  a3d4 5203          	subw	sp,#3
1130       00000003      OFST:	set	3
1133                     ; 1665   nBytes = 0;
1135  a3d6 5f            	clrw	x
1136  a3d7 1f02          	ldw	(OFST-1,sp),x
1138                     ; 1667   nBytes += CopyStringP(&pBuffer, (const char *)("HTTP/1.1 200 OK"));
1140  a3d9 ae9cb7        	ldw	x,#L503
1141  a3dc 89            	pushw	x
1142  a3dd 96            	ldw	x,sp
1143  a3de 1c0006        	addw	x,#OFST+3
1144  a3e1 cda3ab        	call	L3_CopyStringP
1146  a3e4 5b02          	addw	sp,#2
1147  a3e6 72fb02        	addw	x,(OFST-1,sp)
1148  a3e9 1f02          	ldw	(OFST-1,sp),x
1150                     ; 1668   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1152  a3eb ae9cb4        	ldw	x,#L703
1153  a3ee 89            	pushw	x
1154  a3ef 96            	ldw	x,sp
1155  a3f0 1c0006        	addw	x,#OFST+3
1156  a3f3 cda3ab        	call	L3_CopyStringP
1158  a3f6 5b02          	addw	sp,#2
1159  a3f8 72fb02        	addw	x,(OFST-1,sp)
1160  a3fb 1f02          	ldw	(OFST-1,sp),x
1162                     ; 1670   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Length:"));
1164  a3fd ae9ca4        	ldw	x,#L113
1165  a400 89            	pushw	x
1166  a401 96            	ldw	x,sp
1167  a402 1c0006        	addw	x,#OFST+3
1168  a405 cda3ab        	call	L3_CopyStringP
1170  a408 5b02          	addw	sp,#2
1171  a40a 72fb02        	addw	x,(OFST-1,sp)
1172  a40d 1f02          	ldw	(OFST-1,sp),x
1174                     ; 1674   emb_itoa(nDataLen, OctetArray, 10, 5);
1176  a40f 4b05          	push	#5
1177  a411 4b0a          	push	#10
1178  a413 ae005c        	ldw	x,#_OctetArray
1179  a416 89            	pushw	x
1180  a417 1e0c          	ldw	x,(OFST+9,sp)
1181  a419 cdf7c5        	call	c_uitolx
1183  a41c be02          	ldw	x,c_lreg+2
1184  a41e 89            	pushw	x
1185  a41f be00          	ldw	x,c_lreg
1186  a421 89            	pushw	x
1187  a422 cda2d9        	call	_emb_itoa
1189  a425 5b08          	addw	sp,#8
1190                     ; 1675   for (i=0; i<5; i++) {
1192  a427 4f            	clr	a
1193  a428 6b01          	ld	(OFST-2,sp),a
1195  a42a               L313:
1196                     ; 1676     *pBuffer = (uint8_t)OctetArray[i];
1198  a42a 5f            	clrw	x
1199  a42b 97            	ld	xl,a
1200  a42c d6005c        	ld	a,(_OctetArray,x)
1201  a42f 1e04          	ldw	x,(OFST+1,sp)
1202  a431 f7            	ld	(x),a
1203                     ; 1677     pBuffer = pBuffer + 1;
1205  a432 5c            	incw	x
1206  a433 1f04          	ldw	(OFST+1,sp),x
1207                     ; 1675   for (i=0; i<5; i++) {
1209  a435 0c01          	inc	(OFST-2,sp)
1213  a437 7b01          	ld	a,(OFST-2,sp)
1214  a439 a105          	cp	a,#5
1215  a43b 25ed          	jrult	L313
1216                     ; 1679   nBytes += 5;
1218  a43d 1e02          	ldw	x,(OFST-1,sp)
1219  a43f 1c0005        	addw	x,#5
1220  a442 1f02          	ldw	(OFST-1,sp),x
1222                     ; 1681   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1224  a444 ae9cb4        	ldw	x,#L703
1225  a447 89            	pushw	x
1226  a448 96            	ldw	x,sp
1227  a449 1c0006        	addw	x,#OFST+3
1228  a44c cda3ab        	call	L3_CopyStringP
1230  a44f 5b02          	addw	sp,#2
1231  a451 72fb02        	addw	x,(OFST-1,sp)
1232  a454 1f02          	ldw	(OFST-1,sp),x
1234                     ; 1684   nBytes += CopyStringP(&pBuffer, (const char *)("Cache-Control: no-cache, no-store\r\n"));
1236  a456 ae9c80        	ldw	x,#L123
1237  a459 89            	pushw	x
1238  a45a 96            	ldw	x,sp
1239  a45b 1c0006        	addw	x,#OFST+3
1240  a45e cda3ab        	call	L3_CopyStringP
1242  a461 5b02          	addw	sp,#2
1243  a463 72fb02        	addw	x,(OFST-1,sp)
1244  a466 1f02          	ldw	(OFST-1,sp),x
1246                     ; 1686   nBytes += CopyStringP(&pBuffer, (const char *)("Content-Type: text/html; charset=utf-8\r\n"));
1248  a468 ae9c57        	ldw	x,#L323
1249  a46b 89            	pushw	x
1250  a46c 96            	ldw	x,sp
1251  a46d 1c0006        	addw	x,#OFST+3
1252  a470 cda3ab        	call	L3_CopyStringP
1254  a473 5b02          	addw	sp,#2
1255  a475 72fb02        	addw	x,(OFST-1,sp)
1256  a478 1f02          	ldw	(OFST-1,sp),x
1258                     ; 1688   nBytes += CopyStringP(&pBuffer, (const char *)("Connection:close\r\n"));
1260  a47a ae9c44        	ldw	x,#L523
1261  a47d 89            	pushw	x
1262  a47e 96            	ldw	x,sp
1263  a47f 1c0006        	addw	x,#OFST+3
1264  a482 cda3ab        	call	L3_CopyStringP
1266  a485 5b02          	addw	sp,#2
1267  a487 72fb02        	addw	x,(OFST-1,sp)
1268  a48a 1f02          	ldw	(OFST-1,sp),x
1270                     ; 1689   nBytes += CopyStringP(&pBuffer, (const char *)("\r\n"));
1272  a48c ae9cb4        	ldw	x,#L703
1273  a48f 89            	pushw	x
1274  a490 96            	ldw	x,sp
1275  a491 1c0006        	addw	x,#OFST+3
1276  a494 cda3ab        	call	L3_CopyStringP
1278  a497 5b02          	addw	sp,#2
1279  a499 72fb02        	addw	x,(OFST-1,sp)
1281                     ; 1691   return nBytes;
1285  a49c 5b05          	addw	sp,#5
1286  a49e 81            	ret	
1432                     	switch	.const
1433  9bc4               L431:
1434  9bc4 a651          	dc.w	L723
1435  9bc6 a65f          	dc.w	L133
1436  9bc8 a66d          	dc.w	L333
1437  9bca a67b          	dc.w	L533
1438  9bcc a689          	dc.w	L733
1439  9bce a697          	dc.w	L143
1440  9bd0 a6a5          	dc.w	L343
1441  9bd2 a6b2          	dc.w	L543
1442  9bd4 a6bf          	dc.w	L743
1443  9bd6 a6cc          	dc.w	L153
1444  9bd8 a6d9          	dc.w	L353
1445  9bda a6e6          	dc.w	L553
1446  9bdc a6f3          	dc.w	L753
1447  9bde a700          	dc.w	L163
1448  9be0 a70d          	dc.w	L363
1449  9be2 a71a          	dc.w	L563
1450                     ; 1695 static uint16_t CopyHttpData(uint8_t* pBuffer, const char** ppData, uint16_t* pDataLeft, uint16_t nMaxBytes)
1450                     ; 1696 {
1451                     .text:	section	.text,new
1452  a49f               L7_CopyHttpData:
1454  a49f 89            	pushw	x
1455  a4a0 5207          	subw	sp,#7
1456       00000007      OFST:	set	7
1459                     ; 1714   nBytes = 0;
1461  a4a2 5f            	clrw	x
1462  a4a3 1f04          	ldw	(OFST-3,sp),x
1464                     ; 1715   nParsedNum = 0;
1466  a4a5 0f06          	clr	(OFST-1,sp)
1468                     ; 1716   nParsedMode = 0;
1470  a4a7 0f03          	clr	(OFST-4,sp)
1472                     ; 1771   nMaxBytes = UIP_TCP_MSS - 25;
1474  a4a9 ae019f        	ldw	x,#415
1475  a4ac 1f10          	ldw	(OFST+9,sp),x
1477  a4ae cca9ea        	jra	L574
1478  a4b1               L374:
1479                     ; 1805     if (*pDataLeft > 0) {
1481  a4b1 1e0e          	ldw	x,(OFST+7,sp)
1482  a4b3 e601          	ld	a,(1,x)
1483  a4b5 fa            	or	a,(x)
1484  a4b6 2603cca9f3    	jreq	L774
1485                     ; 1812       if (insertion_flag[0] != 0) {
1487  a4bb c60017        	ld	a,_insertion_flag
1488  a4be 2711          	jreq	L305
1489                     ; 1821         nParsedMode = insertion_flag[1];
1491  a4c0 c60018        	ld	a,_insertion_flag+1
1492  a4c3 6b03          	ld	(OFST-4,sp),a
1494                     ; 1822         nParsedNum = insertion_flag[2];
1496  a4c5 c60019        	ld	a,_insertion_flag+2
1497  a4c8 6b06          	ld	(OFST-1,sp),a
1499                     ; 1823 	nByte = '0'; // Need to set nByte to something other than '%' so we
1501  a4ca a630          	ld	a,#48
1502  a4cc 6b02          	ld	(OFST-5,sp),a
1505  a4ce cca590        	jra	L505
1506  a4d1               L305:
1507                     ; 1836         memcpy(&nByte, *ppData, 1);
1509  a4d1 96            	ldw	x,sp
1510  a4d2 1c0002        	addw	x,#OFST-5
1511  a4d5 bf04          	ldw	c_x,x
1512  a4d7 160c          	ldw	y,(OFST+5,sp)
1513  a4d9 90fe          	ldw	y,(y)
1514  a4db 90bf07        	ldw	c_y,y
1515  a4de ae0001        	ldw	x,#1
1516  a4e1               L25:
1517  a4e1 5a            	decw	x
1518  a4e2 92d607        	ld	a,([c_y.w],x)
1519  a4e5 92d704        	ld	([c_x.w],x),a
1520  a4e8 5d            	tnzw	x
1521  a4e9 26f6          	jrne	L25
1522                     ; 1879         if (nByte == '%') {
1524  a4eb 7b02          	ld	a,(OFST-5,sp)
1525  a4ed a125          	cp	a,#37
1526  a4ef 26dd          	jrne	L505
1527                     ; 1880           *ppData = *ppData + 1;
1529  a4f1 1e0c          	ldw	x,(OFST+5,sp)
1530  a4f3 9093          	ldw	y,x
1531  a4f5 fe            	ldw	x,(x)
1532  a4f6 5c            	incw	x
1533  a4f7 90ff          	ldw	(y),x
1534                     ; 1881           *pDataLeft = *pDataLeft - 1;
1536  a4f9 1e0e          	ldw	x,(OFST+7,sp)
1537  a4fb 9093          	ldw	y,x
1538  a4fd fe            	ldw	x,(x)
1539  a4fe 5a            	decw	x
1540  a4ff 90ff          	ldw	(y),x
1541                     ; 1886           memcpy(&nParsedMode, *ppData, 1);
1543  a501 96            	ldw	x,sp
1544  a502 1c0003        	addw	x,#OFST-4
1545  a505 bf04          	ldw	c_x,x
1546  a507 160c          	ldw	y,(OFST+5,sp)
1547  a509 90fe          	ldw	y,(y)
1548  a50b 90bf07        	ldw	c_y,y
1549  a50e ae0001        	ldw	x,#1
1550  a511               L45:
1551  a511 5a            	decw	x
1552  a512 92d607        	ld	a,([c_y.w],x)
1553  a515 92d704        	ld	([c_x.w],x),a
1554  a518 5d            	tnzw	x
1555  a519 26f6          	jrne	L45
1556                     ; 1887           *ppData = *ppData + 1;
1558  a51b 1e0c          	ldw	x,(OFST+5,sp)
1559  a51d 9093          	ldw	y,x
1560  a51f fe            	ldw	x,(x)
1561  a520 5c            	incw	x
1562  a521 90ff          	ldw	(y),x
1563                     ; 1888           *pDataLeft = *pDataLeft - 1;
1565  a523 1e0e          	ldw	x,(OFST+7,sp)
1566  a525 9093          	ldw	y,x
1567  a527 fe            	ldw	x,(x)
1568  a528 5a            	decw	x
1569  a529 90ff          	ldw	(y),x
1570                     ; 1893           memcpy(&temp, *ppData, 1);
1572  a52b 96            	ldw	x,sp
1573  a52c 5c            	incw	x
1574  a52d bf04          	ldw	c_x,x
1575  a52f 160c          	ldw	y,(OFST+5,sp)
1576  a531 90fe          	ldw	y,(y)
1577  a533 90bf07        	ldw	c_y,y
1578  a536 ae0001        	ldw	x,#1
1579  a539               L65:
1580  a539 5a            	decw	x
1581  a53a 92d607        	ld	a,([c_y.w],x)
1582  a53d 92d704        	ld	([c_x.w],x),a
1583  a540 5d            	tnzw	x
1584  a541 26f6          	jrne	L65
1585                     ; 1894           nParsedNum = (uint8_t)((temp - '0') * 10);
1587  a543 7b01          	ld	a,(OFST-6,sp)
1588  a545 97            	ld	xl,a
1589  a546 a60a          	ld	a,#10
1590  a548 42            	mul	x,a
1591  a549 9f            	ld	a,xl
1592  a54a a0e0          	sub	a,#224
1593  a54c 6b06          	ld	(OFST-1,sp),a
1595                     ; 1895           *ppData = *ppData + 1;
1597  a54e 1e0c          	ldw	x,(OFST+5,sp)
1598  a550 9093          	ldw	y,x
1599  a552 fe            	ldw	x,(x)
1600  a553 5c            	incw	x
1601  a554 90ff          	ldw	(y),x
1602                     ; 1896           *pDataLeft = *pDataLeft - 1;
1604  a556 1e0e          	ldw	x,(OFST+7,sp)
1605  a558 9093          	ldw	y,x
1606  a55a fe            	ldw	x,(x)
1607  a55b 5a            	decw	x
1608  a55c 90ff          	ldw	(y),x
1609                     ; 1901           memcpy(&temp, *ppData, 1);
1611  a55e 96            	ldw	x,sp
1612  a55f 5c            	incw	x
1613  a560 bf04          	ldw	c_x,x
1614  a562 160c          	ldw	y,(OFST+5,sp)
1615  a564 90fe          	ldw	y,(y)
1616  a566 90bf07        	ldw	c_y,y
1617  a569 ae0001        	ldw	x,#1
1618  a56c               L06:
1619  a56c 5a            	decw	x
1620  a56d 92d607        	ld	a,([c_y.w],x)
1621  a570 92d704        	ld	([c_x.w],x),a
1622  a573 5d            	tnzw	x
1623  a574 26f6          	jrne	L06
1624                     ; 1902           nParsedNum = (uint8_t)(nParsedNum + temp - '0');
1626  a576 7b06          	ld	a,(OFST-1,sp)
1627  a578 1b01          	add	a,(OFST-6,sp)
1628  a57a a030          	sub	a,#48
1629  a57c 6b06          	ld	(OFST-1,sp),a
1631                     ; 1903           *ppData = *ppData + 1;
1633  a57e 1e0c          	ldw	x,(OFST+5,sp)
1634  a580 9093          	ldw	y,x
1635  a582 fe            	ldw	x,(x)
1636  a583 5c            	incw	x
1637  a584 90ff          	ldw	(y),x
1638                     ; 1904           *pDataLeft = *pDataLeft - 1;
1640  a586 1e0e          	ldw	x,(OFST+7,sp)
1641  a588 9093          	ldw	y,x
1642  a58a fe            	ldw	x,(x)
1643  a58b 5a            	decw	x
1644  a58c 90ff          	ldw	(y),x
1645  a58e 7b02          	ld	a,(OFST-5,sp)
1646  a590               L505:
1647                     ; 1908       if ((nByte == '%') || (insertion_flag[0] != 0)) {
1649  a590 a125          	cp	a,#37
1650  a592 2709          	jreq	L315
1652  a594 725d0017      	tnz	_insertion_flag
1653  a598 2603cca9cd    	jreq	L115
1654  a59d               L315:
1655                     ; 1918         if (nParsedMode == 'i') {
1657  a59d 7b03          	ld	a,(OFST-4,sp)
1658  a59f a169          	cp	a,#105
1659  a5a1 2630          	jrne	L515
1660                     ; 1932           if (nParsedNum > 7) {
1662  a5a3 7b06          	ld	a,(OFST-1,sp)
1663  a5a5 a108          	cp	a,#8
1664  a5a7 2520          	jrult	L715
1665                     ; 1934 	    i = GpioGetPin(nParsedNum);
1667  a5a9 cdb8ad        	call	_GpioGetPin
1669  a5ac 6b07          	ld	(OFST+0,sp),a
1671                     ; 1935 	    if (invert_input == 0x00) *pBuffer = (uint8_t)(i + '0');
1673  a5ae 725d0159      	tnz	_invert_input
1674  a5b2 2607          	jrne	L125
1677  a5b4 ab30          	add	a,#48
1678  a5b6 1e08          	ldw	x,(OFST+1,sp)
1680  a5b8 cca80d        	jra	LC008
1681  a5bb               L125:
1682                     ; 1937 	      if (i == 0) *pBuffer = (uint8_t)('1');
1684  a5bb 7b07          	ld	a,(OFST+0,sp)
1687  a5bd 2603cca8f9    	jreq	LC009
1688                     ; 1938 	      else *pBuffer = (uint8_t)('0');
1690  a5c2 1e08          	ldw	x,(OFST+1,sp)
1691  a5c4 a630          	ld	a,#48
1692                     ; 1940             pBuffer++;
1693                     ; 1941             nBytes++;
1695  a5c6 cca80d        	jp	LC008
1696  a5c9               L715:
1697                     ; 1945 	    *pBuffer = (uint8_t)(GpioGetPin(nParsedNum) + '0');
1699  a5c9 cdb8ad        	call	_GpioGetPin
1701  a5cc ab30          	add	a,#48
1702  a5ce 1e08          	ldw	x,(OFST+1,sp)
1703                     ; 1946             pBuffer++;
1704                     ; 1947             nBytes++;
1705  a5d0 cca80d        	jp	LC008
1706  a5d3               L515:
1707                     ; 1965         else if ((nParsedMode == 'o' && ((uint8_t)(GpioGetPin(nParsedNum) == 1)))
1707                     ; 1966 	      || (nParsedMode == 'p' && ((uint8_t)(GpioGetPin(nParsedNum) == 0)))) { 
1709  a5d3 a16f          	cp	a,#111
1710  a5d5 260a          	jrne	L145
1712  a5d7 7b06          	ld	a,(OFST-1,sp)
1713  a5d9 cdb8ad        	call	_GpioGetPin
1715  a5dc 4a            	dec	a
1716  a5dd 270e          	jreq	L735
1717  a5df 7b03          	ld	a,(OFST-4,sp)
1718  a5e1               L145:
1720  a5e1 a170          	cp	a,#112
1721  a5e3 2626          	jrne	L535
1723  a5e5 7b06          	ld	a,(OFST-1,sp)
1724  a5e7 cdb8ad        	call	_GpioGetPin
1726  a5ea 4d            	tnz	a
1727  a5eb 261e          	jrne	L535
1728  a5ed               L735:
1729                     ; 1971           for(i=0; i<7; i++) {
1731  a5ed 4f            	clr	a
1732  a5ee 6b07          	ld	(OFST+0,sp),a
1734  a5f0               L345:
1735                     ; 1972             *pBuffer = checked[i];
1737  a5f0 5f            	clrw	x
1738  a5f1 97            	ld	xl,a
1739  a5f2 d68080        	ld	a,(L11_checked,x)
1740  a5f5 1e08          	ldw	x,(OFST+1,sp)
1741  a5f7 f7            	ld	(x),a
1742                     ; 1973             pBuffer++;
1744  a5f8 5c            	incw	x
1745  a5f9 1f08          	ldw	(OFST+1,sp),x
1746                     ; 1971           for(i=0; i<7; i++) {
1748  a5fb 0c07          	inc	(OFST+0,sp)
1752  a5fd 7b07          	ld	a,(OFST+0,sp)
1753  a5ff a107          	cp	a,#7
1754  a601 25ed          	jrult	L345
1755                     ; 1975 	  nBytes += 7;
1757  a603 1e04          	ldw	x,(OFST-3,sp)
1758  a605 1c0007        	addw	x,#7
1760  a608 cca9e8        	jp	LC005
1761  a60b               L535:
1762                     ; 1978         else if (nParsedMode == 'a') {
1764  a60b 7b03          	ld	a,(OFST-4,sp)
1765  a60d a161          	cp	a,#97
1766  a60f 2629          	jrne	L355
1767                     ; 1980 	  for(i=0; i<19; i++) {
1769  a611 4f            	clr	a
1770  a612 6b07          	ld	(OFST+0,sp),a
1772  a614               L555:
1773                     ; 1981 	    if (stored_devicename[i] != '\0') {
1775  a614 5f            	clrw	x
1776  a615 97            	ld	xl,a
1777  a616 724d4000      	tnz	(_stored_devicename,x)
1778  a61a 2603cca9ea    	jreq	L574
1779                     ; 1982               *pBuffer = (uint8_t)(stored_devicename[i]);
1781  a61f 5f            	clrw	x
1782  a620 97            	ld	xl,a
1783  a621 d64000        	ld	a,(_stored_devicename,x)
1784  a624 1e08          	ldw	x,(OFST+1,sp)
1785  a626 f7            	ld	(x),a
1786                     ; 1983               pBuffer++;
1788  a627 5c            	incw	x
1789  a628 1f08          	ldw	(OFST+1,sp),x
1790                     ; 1984               nBytes++;
1792  a62a 1e04          	ldw	x,(OFST-3,sp)
1793  a62c 5c            	incw	x
1794  a62d 1f04          	ldw	(OFST-3,sp),x
1797                     ; 1980 	  for(i=0; i<19; i++) {
1799  a62f 0c07          	inc	(OFST+0,sp)
1803  a631 7b07          	ld	a,(OFST+0,sp)
1804  a633 a113          	cp	a,#19
1805  a635 25dd          	jrult	L555
1806  a637 cca9ea        	jra	L574
1807  a63a               L355:
1808                     ; 1990         else if (nParsedMode == 'b') {
1810  a63a a162          	cp	a,#98
1811  a63c 2703cca756    	jrne	L175
1812                     ; 1995           switch (nParsedNum)
1814  a641 7b06          	ld	a,(OFST-1,sp)
1816                     ; 2016 	    default: break;
1817  a643 a110          	cp	a,#16
1818  a645 2503cca738    	jruge	L575
1819  a64a 5f            	clrw	x
1820  a64b 97            	ld	xl,a
1821  a64c 58            	sllw	x
1822  a64d de9bc4        	ldw	x,(L431,x)
1823  a650 fc            	jp	(x)
1824  a651               L723:
1825                     ; 1998 	    case 0:  emb_itoa(stored_hostaddr[3], OctetArray, 10, 3); break;
1827  a651 4b03          	push	#3
1828  a653 4b0a          	push	#10
1829  a655 ae005c        	ldw	x,#_OctetArray
1830  a658 89            	pushw	x
1831  a659 c6402a        	ld	a,_stored_hostaddr+3
1835  a65c cca725        	jp	LC001
1836  a65f               L133:
1837                     ; 1999 	    case 1:  emb_itoa(stored_hostaddr[2], OctetArray, 10, 3); break;
1839  a65f 4b03          	push	#3
1840  a661 4b0a          	push	#10
1841  a663 ae005c        	ldw	x,#_OctetArray
1842  a666 89            	pushw	x
1843  a667 c64029        	ld	a,_stored_hostaddr+2
1847  a66a cca725        	jp	LC001
1848  a66d               L333:
1849                     ; 2000 	    case 2:  emb_itoa(stored_hostaddr[1], OctetArray, 10, 3); break;
1851  a66d 4b03          	push	#3
1852  a66f 4b0a          	push	#10
1853  a671 ae005c        	ldw	x,#_OctetArray
1854  a674 89            	pushw	x
1855  a675 c64028        	ld	a,_stored_hostaddr+1
1859  a678 cca725        	jp	LC001
1860  a67b               L533:
1861                     ; 2001 	    case 3:  emb_itoa(stored_hostaddr[0], OctetArray, 10, 3); break;
1863  a67b 4b03          	push	#3
1864  a67d 4b0a          	push	#10
1865  a67f ae005c        	ldw	x,#_OctetArray
1866  a682 89            	pushw	x
1867  a683 c64027        	ld	a,_stored_hostaddr
1871  a686 cca725        	jp	LC001
1872  a689               L733:
1873                     ; 2002 	    case 4:  emb_itoa(stored_draddr[3],   OctetArray, 10, 3); break;
1875  a689 4b03          	push	#3
1876  a68b 4b0a          	push	#10
1877  a68d ae005c        	ldw	x,#_OctetArray
1878  a690 89            	pushw	x
1879  a691 c64026        	ld	a,_stored_draddr+3
1883  a694 cca725        	jp	LC001
1884  a697               L143:
1885                     ; 2003 	    case 5:  emb_itoa(stored_draddr[2],   OctetArray, 10, 3); break;
1887  a697 4b03          	push	#3
1888  a699 4b0a          	push	#10
1889  a69b ae005c        	ldw	x,#_OctetArray
1890  a69e 89            	pushw	x
1891  a69f c64025        	ld	a,_stored_draddr+2
1895  a6a2 cca725        	jp	LC001
1896  a6a5               L343:
1897                     ; 2004 	    case 6:  emb_itoa(stored_draddr[1],   OctetArray, 10, 3); break;
1899  a6a5 4b03          	push	#3
1900  a6a7 4b0a          	push	#10
1901  a6a9 ae005c        	ldw	x,#_OctetArray
1902  a6ac 89            	pushw	x
1903  a6ad c64024        	ld	a,_stored_draddr+1
1907  a6b0 2073          	jp	LC001
1908  a6b2               L543:
1909                     ; 2005 	    case 7:  emb_itoa(stored_draddr[0],   OctetArray, 10, 3); break;
1911  a6b2 4b03          	push	#3
1912  a6b4 4b0a          	push	#10
1913  a6b6 ae005c        	ldw	x,#_OctetArray
1914  a6b9 89            	pushw	x
1915  a6ba c64023        	ld	a,_stored_draddr
1919  a6bd 2066          	jp	LC001
1920  a6bf               L743:
1921                     ; 2006 	    case 8:  emb_itoa(stored_netmask[3],  OctetArray, 10, 3); break;
1923  a6bf 4b03          	push	#3
1924  a6c1 4b0a          	push	#10
1925  a6c3 ae005c        	ldw	x,#_OctetArray
1926  a6c6 89            	pushw	x
1927  a6c7 c64022        	ld	a,_stored_netmask+3
1931  a6ca 2059          	jp	LC001
1932  a6cc               L153:
1933                     ; 2007 	    case 9:  emb_itoa(stored_netmask[2],  OctetArray, 10, 3); break;
1935  a6cc 4b03          	push	#3
1936  a6ce 4b0a          	push	#10
1937  a6d0 ae005c        	ldw	x,#_OctetArray
1938  a6d3 89            	pushw	x
1939  a6d4 c64021        	ld	a,_stored_netmask+2
1943  a6d7 204c          	jp	LC001
1944  a6d9               L353:
1945                     ; 2008 	    case 10: emb_itoa(stored_netmask[1],  OctetArray, 10, 3); break;
1947  a6d9 4b03          	push	#3
1948  a6db 4b0a          	push	#10
1949  a6dd ae005c        	ldw	x,#_OctetArray
1950  a6e0 89            	pushw	x
1951  a6e1 c64020        	ld	a,_stored_netmask+1
1955  a6e4 203f          	jp	LC001
1956  a6e6               L553:
1957                     ; 2009 	    case 11: emb_itoa(stored_netmask[0],  OctetArray, 10, 3); break;
1959  a6e6 4b03          	push	#3
1960  a6e8 4b0a          	push	#10
1961  a6ea ae005c        	ldw	x,#_OctetArray
1962  a6ed 89            	pushw	x
1963  a6ee c6401f        	ld	a,_stored_netmask
1967  a6f1 2032          	jp	LC001
1968  a6f3               L753:
1969                     ; 2011 	    case 12: emb_itoa(stored_mqttserveraddr[3], OctetArray, 10, 3); break;
1971  a6f3 4b03          	push	#3
1972  a6f5 4b0a          	push	#10
1973  a6f7 ae005c        	ldw	x,#_OctetArray
1974  a6fa 89            	pushw	x
1975  a6fb c64034        	ld	a,_stored_mqttserveraddr+3
1979  a6fe 2025          	jp	LC001
1980  a700               L163:
1981                     ; 2012 	    case 13: emb_itoa(stored_mqttserveraddr[2], OctetArray, 10, 3); break;
1983  a700 4b03          	push	#3
1984  a702 4b0a          	push	#10
1985  a704 ae005c        	ldw	x,#_OctetArray
1986  a707 89            	pushw	x
1987  a708 c64033        	ld	a,_stored_mqttserveraddr+2
1991  a70b 2018          	jp	LC001
1992  a70d               L363:
1993                     ; 2013 	    case 14: emb_itoa(stored_mqttserveraddr[1], OctetArray, 10, 3); break;
1995  a70d 4b03          	push	#3
1996  a70f 4b0a          	push	#10
1997  a711 ae005c        	ldw	x,#_OctetArray
1998  a714 89            	pushw	x
1999  a715 c64032        	ld	a,_stored_mqttserveraddr+1
2003  a718 200b          	jp	LC001
2004  a71a               L563:
2005                     ; 2014 	    case 15: emb_itoa(stored_mqttserveraddr[0], OctetArray, 10, 3); break;
2007  a71a 4b03          	push	#3
2008  a71c 4b0a          	push	#10
2009  a71e ae005c        	ldw	x,#_OctetArray
2010  a721 89            	pushw	x
2011  a722 c64031        	ld	a,_stored_mqttserveraddr
2013  a725               LC001:
2014  a725 b703          	ld	c_lreg+3,a
2015  a727 3f02          	clr	c_lreg+2
2016  a729 3f01          	clr	c_lreg+1
2017  a72b 3f00          	clr	c_lreg
2018  a72d be02          	ldw	x,c_lreg+2
2019  a72f 89            	pushw	x
2020  a730 be00          	ldw	x,c_lreg
2021  a732 89            	pushw	x
2022  a733 cda2d9        	call	_emb_itoa
2023  a736 5b08          	addw	sp,#8
2026                     ; 2016 	    default: break;
2028  a738               L575:
2029                     ; 2020 	  for(i=0; i<3; i++) {
2031  a738 4f            	clr	a
2032  a739 6b07          	ld	(OFST+0,sp),a
2034  a73b               L775:
2035                     ; 2021 	    *pBuffer = (uint8_t)OctetArray[i];
2037  a73b 5f            	clrw	x
2038  a73c 97            	ld	xl,a
2039  a73d d6005c        	ld	a,(_OctetArray,x)
2040  a740 1e08          	ldw	x,(OFST+1,sp)
2041  a742 f7            	ld	(x),a
2042                     ; 2022             pBuffer++;
2044  a743 5c            	incw	x
2045  a744 1f08          	ldw	(OFST+1,sp),x
2046                     ; 2020 	  for(i=0; i<3; i++) {
2048  a746 0c07          	inc	(OFST+0,sp)
2052  a748 7b07          	ld	a,(OFST+0,sp)
2053  a74a a103          	cp	a,#3
2054  a74c 25ed          	jrult	L775
2055                     ; 2024 	  nBytes += 3;
2057  a74e 1e04          	ldw	x,(OFST-3,sp)
2058  a750 1c0003        	addw	x,#3
2060  a753 cca9e8        	jp	LC005
2061  a756               L175:
2062                     ; 2027         else if (nParsedMode == 'c') {
2064  a756 a163          	cp	a,#99
2065  a758 2648          	jrne	L706
2066                     ; 2036 	  if (nParsedNum == 0) emb_itoa(stored_port, OctetArray, 10, 5);
2068  a75a 7b06          	ld	a,(OFST-1,sp)
2069  a75c 260d          	jrne	L116
2072  a75e 4b05          	push	#5
2073  a760 4b0a          	push	#10
2074  a762 ae005c        	ldw	x,#_OctetArray
2075  a765 89            	pushw	x
2076  a766 ce401d        	ldw	x,_stored_port
2080  a769 200b          	jra	L316
2081  a76b               L116:
2082                     ; 2038 	  else emb_itoa(stored_mqttport, OctetArray, 10, 5);
2084  a76b 4b05          	push	#5
2085  a76d 4b0a          	push	#10
2086  a76f ae005c        	ldw	x,#_OctetArray
2087  a772 89            	pushw	x
2088  a773 ce402f        	ldw	x,_stored_mqttport
2091  a776               L316:
2092  a776 cdf7c5        	call	c_uitolx
2093  a779 be02          	ldw	x,c_lreg+2
2094  a77b 89            	pushw	x
2095  a77c be00          	ldw	x,c_lreg
2096  a77e 89            	pushw	x
2097  a77f cda2d9        	call	_emb_itoa
2098  a782 5b08          	addw	sp,#8
2099                     ; 2042 	  for(i=0; i<5; i++) {
2101  a784 4f            	clr	a
2102  a785 6b07          	ld	(OFST+0,sp),a
2104  a787               L516:
2105                     ; 2043             *pBuffer = (uint8_t)OctetArray[i];
2107  a787 5f            	clrw	x
2108  a788 97            	ld	xl,a
2109  a789 d6005c        	ld	a,(_OctetArray,x)
2110  a78c 1e08          	ldw	x,(OFST+1,sp)
2111  a78e f7            	ld	(x),a
2112                     ; 2044             pBuffer++;
2114  a78f 5c            	incw	x
2115  a790 1f08          	ldw	(OFST+1,sp),x
2116                     ; 2042 	  for(i=0; i<5; i++) {
2118  a792 0c07          	inc	(OFST+0,sp)
2122  a794 7b07          	ld	a,(OFST+0,sp)
2123  a796 a105          	cp	a,#5
2124  a798 25ed          	jrult	L516
2125                     ; 2046 	  nBytes += 5;
2127  a79a 1e04          	ldw	x,(OFST-3,sp)
2128  a79c 1c0005        	addw	x,#5
2130  a79f cca9e8        	jp	LC005
2131  a7a2               L706:
2132                     ; 2049         else if (nParsedMode == 'd') {
2134  a7a2 a164          	cp	a,#100
2135  a7a4 266b          	jrne	L526
2136                     ; 2054 	  if (nParsedNum == 0) { OctetArray[0] = mac_string[0]; OctetArray[1] = mac_string[1]; }
2138  a7a6 7b06          	ld	a,(OFST-1,sp)
2139  a7a8 260a          	jrne	L726
2142  a7aa 550100005c    	mov	_OctetArray,_mac_string
2145  a7af 550101005d    	mov	_OctetArray+1,_mac_string+1
2146  a7b4               L726:
2147                     ; 2055 	  if (nParsedNum == 1) { OctetArray[0] = mac_string[2]; OctetArray[1] = mac_string[3]; }
2149  a7b4 a101          	cp	a,#1
2150  a7b6 260a          	jrne	L136
2153  a7b8 550102005c    	mov	_OctetArray,_mac_string+2
2156  a7bd 550103005d    	mov	_OctetArray+1,_mac_string+3
2157  a7c2               L136:
2158                     ; 2056 	  if (nParsedNum == 2) { OctetArray[0] = mac_string[4]; OctetArray[1] = mac_string[5]; }
2160  a7c2 a102          	cp	a,#2
2161  a7c4 260a          	jrne	L336
2164  a7c6 550104005c    	mov	_OctetArray,_mac_string+4
2167  a7cb 550105005d    	mov	_OctetArray+1,_mac_string+5
2168  a7d0               L336:
2169                     ; 2057 	  if (nParsedNum == 3) { OctetArray[0] = mac_string[6]; OctetArray[1] = mac_string[7]; }
2171  a7d0 a103          	cp	a,#3
2172  a7d2 260a          	jrne	L536
2175  a7d4 550106005c    	mov	_OctetArray,_mac_string+6
2178  a7d9 550107005d    	mov	_OctetArray+1,_mac_string+7
2179  a7de               L536:
2180                     ; 2058 	  if (nParsedNum == 4) { OctetArray[0] = mac_string[8]; OctetArray[1] = mac_string[9]; }
2182  a7de a104          	cp	a,#4
2183  a7e0 260a          	jrne	L736
2186  a7e2 550108005c    	mov	_OctetArray,_mac_string+8
2189  a7e7 550109005d    	mov	_OctetArray+1,_mac_string+9
2190  a7ec               L736:
2191                     ; 2059 	  if (nParsedNum == 5) { OctetArray[0] = mac_string[10]; OctetArray[1] = mac_string[11]; }
2193  a7ec a105          	cp	a,#5
2194  a7ee 260a          	jrne	L146
2197  a7f0 55010a005c    	mov	_OctetArray,_mac_string+10
2200  a7f5 55010b005d    	mov	_OctetArray+1,_mac_string+11
2201  a7fa               L146:
2202                     ; 2061           *pBuffer = OctetArray[0];
2204  a7fa 1e08          	ldw	x,(OFST+1,sp)
2205  a7fc c6005c        	ld	a,_OctetArray
2206  a7ff f7            	ld	(x),a
2207                     ; 2062           pBuffer++;
2209  a800 5c            	incw	x
2210  a801 1f08          	ldw	(OFST+1,sp),x
2211                     ; 2063           nBytes++;
2213  a803 1e04          	ldw	x,(OFST-3,sp)
2214  a805 5c            	incw	x
2215  a806 1f04          	ldw	(OFST-3,sp),x
2217                     ; 2065           *pBuffer = OctetArray[1];
2219  a808 c6005d        	ld	a,_OctetArray+1
2220  a80b 1e08          	ldw	x,(OFST+1,sp)
2221  a80d               LC008:
2222  a80d f7            	ld	(x),a
2223                     ; 2066           pBuffer++;
2224                     ; 2067           nBytes++;
2226  a80e cca9e2        	jp	LC006
2227  a811               L526:
2228                     ; 2225         else if (nParsedMode == 'f') {
2230  a811 a166          	cp	a,#102
2231  a813 261e          	jrne	L546
2232                     ; 2228 	  for(i=0; i<16; i++) {
2234  a815 4f            	clr	a
2235  a816 6b07          	ld	(OFST+0,sp),a
2237  a818               L746:
2238                     ; 2229 	    *pBuffer = (uint8_t)(GpioGetPin(i) + '0');
2240  a818 cdb8ad        	call	_GpioGetPin
2242  a81b 1e08          	ldw	x,(OFST+1,sp)
2243  a81d ab30          	add	a,#48
2244  a81f f7            	ld	(x),a
2245                     ; 2230             pBuffer++;
2247  a820 5c            	incw	x
2248  a821 1f08          	ldw	(OFST+1,sp),x
2249                     ; 2228 	  for(i=0; i<16; i++) {
2251  a823 0c07          	inc	(OFST+0,sp)
2255  a825 7b07          	ld	a,(OFST+0,sp)
2256  a827 a110          	cp	a,#16
2257  a829 25ed          	jrult	L746
2258                     ; 2232 	  nBytes += 16;
2260  a82b 1e04          	ldw	x,(OFST-3,sp)
2261  a82d 1c0010        	addw	x,#16
2263  a830 cca9e8        	jp	LC005
2264  a833               L546:
2265                     ; 2235         else if (nParsedMode == 'g') {
2267  a833 a167          	cp	a,#103
2268  a835 261e          	jrne	L756
2269                     ; 2248 	  for(i = 0; i < 6; i++) {
2271  a837 4f            	clr	a
2272  a838 6b07          	ld	(OFST+0,sp),a
2274  a83a               L166:
2275                     ; 2249             *pBuffer = stored_config_settings[i];
2277  a83a 5f            	clrw	x
2278  a83b 97            	ld	xl,a
2279  a83c d6404c        	ld	a,(_stored_config_settings,x)
2280  a83f 1e08          	ldw	x,(OFST+1,sp)
2281  a841 f7            	ld	(x),a
2282                     ; 2250             pBuffer++;
2284  a842 5c            	incw	x
2285  a843 1f08          	ldw	(OFST+1,sp),x
2286                     ; 2248 	  for(i = 0; i < 6; i++) {
2288  a845 0c07          	inc	(OFST+0,sp)
2292  a847 7b07          	ld	a,(OFST+0,sp)
2293  a849 a106          	cp	a,#6
2294  a84b 25ed          	jrult	L166
2295                     ; 2252           nBytes += 6;
2297  a84d 1e04          	ldw	x,(OFST-3,sp)
2298  a84f 1c0006        	addw	x,#6
2300  a852 cca9e8        	jp	LC005
2301  a855               L756:
2302                     ; 2256         else if (nParsedMode == 'l') {
2304  a855 a16c          	cp	a,#108
2305  a857 2629          	jrne	L176
2306                     ; 2259           for(i=0; i<10; i++) {
2308  a859 4f            	clr	a
2309  a85a 6b07          	ld	(OFST+0,sp),a
2311  a85c               L376:
2312                     ; 2260 	    if (stored_mqtt_username[i] != '\0') {
2314  a85c 5f            	clrw	x
2315  a85d 97            	ld	xl,a
2316  a85e 724d4035      	tnz	(_stored_mqtt_username,x)
2317  a862 2603cca9ea    	jreq	L574
2318                     ; 2261               *pBuffer = (uint8_t)(stored_mqtt_username[i]);
2320  a867 5f            	clrw	x
2321  a868 97            	ld	xl,a
2322  a869 d64035        	ld	a,(_stored_mqtt_username,x)
2323  a86c 1e08          	ldw	x,(OFST+1,sp)
2324  a86e f7            	ld	(x),a
2325                     ; 2262               pBuffer++;
2327  a86f 5c            	incw	x
2328  a870 1f08          	ldw	(OFST+1,sp),x
2329                     ; 2263               nBytes++;
2331  a872 1e04          	ldw	x,(OFST-3,sp)
2332  a874 5c            	incw	x
2333  a875 1f04          	ldw	(OFST-3,sp),x
2336                     ; 2259           for(i=0; i<10; i++) {
2338  a877 0c07          	inc	(OFST+0,sp)
2342  a879 7b07          	ld	a,(OFST+0,sp)
2343  a87b a10a          	cp	a,#10
2344  a87d 25dd          	jrult	L376
2345  a87f cca9ea        	jra	L574
2346  a882               L176:
2347                     ; 2269         else if (nParsedMode == 'm') {
2349  a882 a16d          	cp	a,#109
2350  a884 2626          	jrne	L707
2351                     ; 2272           for(i=0; i<10; i++) {
2353  a886 4f            	clr	a
2354  a887 6b07          	ld	(OFST+0,sp),a
2356  a889               L117:
2357                     ; 2273 	    if (stored_mqtt_password[i] != '\0') {
2359  a889 5f            	clrw	x
2360  a88a 97            	ld	xl,a
2361  a88b 724d4040      	tnz	(_stored_mqtt_password,x)
2362  a88f 27ee          	jreq	L574
2363                     ; 2274               *pBuffer = (uint8_t)(stored_mqtt_password[i]);
2365  a891 5f            	clrw	x
2366  a892 97            	ld	xl,a
2367  a893 d64040        	ld	a,(_stored_mqtt_password,x)
2368  a896 1e08          	ldw	x,(OFST+1,sp)
2369  a898 f7            	ld	(x),a
2370                     ; 2275               pBuffer++;
2372  a899 5c            	incw	x
2373  a89a 1f08          	ldw	(OFST+1,sp),x
2374                     ; 2276               nBytes++;
2376  a89c 1e04          	ldw	x,(OFST-3,sp)
2377  a89e 5c            	incw	x
2378  a89f 1f04          	ldw	(OFST-3,sp),x
2381                     ; 2272           for(i=0; i<10; i++) {
2383  a8a1 0c07          	inc	(OFST+0,sp)
2387  a8a3 7b07          	ld	a,(OFST+0,sp)
2388  a8a5 a10a          	cp	a,#10
2389  a8a7 25e0          	jrult	L117
2390  a8a9 cca9ea        	jra	L574
2391  a8ac               L707:
2392                     ; 2282         else if (nParsedMode == 'n') {
2394  a8ac a16e          	cp	a,#110
2395  a8ae 2657          	jrne	L527
2396                     ; 2286 	  no_err = 0;
2398  a8b0 0f07          	clr	(OFST+0,sp)
2400                     ; 2287           switch (nParsedNum)
2402  a8b2 7b06          	ld	a,(OFST-1,sp)
2404                     ; 2309 	    default:
2404                     ; 2310 	      break;
2405  a8b4 270e          	jreq	L173
2406  a8b6 4a            	dec	a
2407  a8b7 2712          	jreq	L373
2408  a8b9 4a            	dec	a
2409  a8ba 2716          	jreq	L573
2410  a8bc 4a            	dec	a
2411  a8bd 271a          	jreq	L773
2412  a8bf 4a            	dec	a
2413  a8c0 271f          	jreq	L104
2414  a8c2 2030          	jra	L137
2415  a8c4               L173:
2416                     ; 2289 	    case 0:
2416                     ; 2290               // Connection request status
2416                     ; 2291 	      if (mqtt_start_status & MQTT_START_CONNECTIONS_GOOD) no_err = 1;
2418  a8c4 7209009b2b    	btjf	_mqtt_start_status,#4,L137
2420  a8c9 2013          	jp	LC003
2421  a8cb               L373:
2422                     ; 2293 	    case 1:
2422                     ; 2294 	      // ARP request status
2422                     ; 2295 	      if (mqtt_start_status & MQTT_START_ARP_REQUEST_GOOD) no_err = 1;
2424  a8cb 720b009b24    	btjf	_mqtt_start_status,#5,L137
2426  a8d0 200c          	jp	LC003
2427  a8d2               L573:
2428                     ; 2297 	    case 2:
2428                     ; 2298 	      // TCP connection status
2428                     ; 2299 	      if (mqtt_start_status & MQTT_START_TCP_CONNECT_GOOD) no_err = 1;
2430  a8d2 720d009b1d    	btjf	_mqtt_start_status,#6,L137
2432  a8d7 2005          	jp	LC003
2433  a8d9               L773:
2434                     ; 2301 	    case 3:
2434                     ; 2302 	      // MQTT Connection status 1
2434                     ; 2303 	      if (mqtt_start_status & MQTT_START_MQTT_CONNECT_GOOD) no_err = 1;
2436  a8d9 720f009b16    	btjf	_mqtt_start_status,#7,L137
2439  a8de               LC003:
2443  a8de 4c            	inc	a
2444  a8df 2011          	jp	LC002
2445  a8e1               L104:
2446                     ; 2305 	    case 4:
2446                     ; 2306 	      // MQTT start complete with no errors
2446                     ; 2307 	      if ((MQTT_error_status == 1) && ((mqtt_start_status & 0xf0) == 0xf0) ) no_err = 1;
2448  a8e1 c6028f        	ld	a,_MQTT_error_status
2449  a8e4 4a            	dec	a
2450  a8e5 260d          	jrne	L137
2452  a8e7 c6009b        	ld	a,_mqtt_start_status
2453  a8ea a4f0          	and	a,#240
2454  a8ec a1f0          	cp	a,#240
2455  a8ee 2604          	jrne	L137
2458  a8f0 a601          	ld	a,#1
2459  a8f2               LC002:
2460  a8f2 6b07          	ld	(OFST+0,sp),a
2462                     ; 2309 	    default:
2462                     ; 2310 	      break;
2464  a8f4               L137:
2465                     ; 2312 	  if (no_err == 1) *pBuffer = '1'; // Paint a green square
2467  a8f4 7b07          	ld	a,(OFST+0,sp)
2468  a8f6 4a            	dec	a
2469  a8f7 2607          	jrne	L547
2472  a8f9               LC009:
2474  a8f9 1e08          	ldw	x,(OFST+1,sp)
2475  a8fb a631          	ld	a,#49
2477  a8fd cca80d        	jra	LC008
2478  a900               L547:
2479                     ; 2313 	  else *pBuffer = '0'; // Paint a red square
2481  a900 1e08          	ldw	x,(OFST+1,sp)
2482  a902 a630          	ld	a,#48
2483                     ; 2314           pBuffer++;
2484                     ; 2315           nBytes++;
2486  a904 cca80d        	jp	LC008
2487  a907               L527:
2488                     ; 2319         else if (nParsedMode == 'y') {
2490  a907 a179          	cp	a,#121
2491  a909 269e          	jrne	L574
2492                     ; 2364 	  i = insertion_flag[0];
2494  a90b c60017        	ld	a,_insertion_flag
2495  a90e 6b07          	ld	(OFST+0,sp),a
2497                     ; 2365 	  insertion_flag[1] = nParsedMode;
2499  a910 7b03          	ld	a,(OFST-4,sp)
2500  a912 c70018        	ld	_insertion_flag+1,a
2501                     ; 2366 	  insertion_flag[2] = nParsedNum;
2503  a915 7b06          	ld	a,(OFST-1,sp)
2504  a917 c70019        	ld	_insertion_flag+2,a
2505                     ; 2368           switch (nParsedNum)
2508                     ; 2416 	    default: break;
2509  a91a 2718          	jreq	L504
2510  a91c 4a            	dec	a
2511  a91d 272a          	jreq	L704
2512  a91f 4a            	dec	a
2513  a920 273c          	jreq	L114
2514  a922 4a            	dec	a
2515  a923 274e          	jreq	L314
2516  a925 4a            	dec	a
2517  a926 2760          	jreq	L514
2518  a928 4a            	dec	a
2519  a929 2772          	jreq	L714
2520  a92b 4a            	dec	a
2521  a92c 2603cca9b2    	jreq	L124
2522  a931 cca9e0        	jra	LC007
2523  a934               L504:
2524                     ; 2370 	    case 0:
2524                     ; 2371 	      // %y00 replaced with string 
2524                     ; 2372 	      // page_string00[] = "pattern='[0-9]{3}' title='Enter 000 to 255' maxlength='3'";
2524                     ; 2373               *pBuffer = (uint8_t)page_string00[i];
2526  a934 7b07          	ld	a,(OFST+0,sp)
2527  a936 5f            	clrw	x
2528  a937 97            	ld	xl,a
2529  a938 d69949        	ld	a,(L12_page_string00,x)
2530  a93b 1e08          	ldw	x,(OFST+1,sp)
2531  a93d f7            	ld	(x),a
2532                     ; 2374 	      insertion_flag[0]++;
2534  a93e 725c0017      	inc	_insertion_flag
2535                     ; 2375 	      if (insertion_flag[0] == page_string00_len) insertion_flag[0] = 0;
2537  a942 c60017        	ld	a,_insertion_flag
2538  a945 a13f          	cp	a,#63
2540  a947 207c          	jp	LC004
2541  a949               L704:
2542                     ; 2377 	    case 1:
2542                     ; 2378 	      // %y01 replaced with string 
2542                     ; 2379               // page_string01[] = "pattern='[0-9a-f]{2}' title='Enter 00 to ff' maxlength='2'";
2542                     ; 2380               *pBuffer = (uint8_t)page_string01[i];
2544  a949 7b07          	ld	a,(OFST+0,sp)
2545  a94b 5f            	clrw	x
2546  a94c 97            	ld	xl,a
2547  a94d d6998b        	ld	a,(L72_page_string01,x)
2548  a950 1e08          	ldw	x,(OFST+1,sp)
2549  a952 f7            	ld	(x),a
2550                     ; 2381 	      insertion_flag[0]++;
2552  a953 725c0017      	inc	_insertion_flag
2553                     ; 2382 	      if (insertion_flag[0] == page_string01_len) insertion_flag[0] = 0;
2555  a957 c60017        	ld	a,_insertion_flag
2556  a95a a140          	cp	a,#64
2558  a95c 2067          	jp	LC004
2559  a95e               L114:
2560                     ; 2384 	    case 2:
2560                     ; 2385 	      // %y02 replaced with string 
2560                     ; 2386               // page_string02[] = "<button title='Save first! This button will not save your changes'>";
2560                     ; 2387               *pBuffer = (uint8_t)page_string02[i];
2562  a95e 7b07          	ld	a,(OFST+0,sp)
2563  a960 5f            	clrw	x
2564  a961 97            	ld	xl,a
2565  a962 d699ce        	ld	a,(L53_page_string02,x)
2566  a965 1e08          	ldw	x,(OFST+1,sp)
2567  a967 f7            	ld	(x),a
2568                     ; 2388 	      insertion_flag[0]++;
2570  a968 725c0017      	inc	_insertion_flag
2571                     ; 2389 	      if (insertion_flag[0] == page_string02_len) insertion_flag[0] = 0;
2573  a96c c60017        	ld	a,_insertion_flag
2574  a96f a152          	cp	a,#82
2576  a971 2052          	jp	LC004
2577  a973               L314:
2578                     ; 2391 	    case 3:
2578                     ; 2392 	      // %y03 replaced with string 
2578                     ; 2393               // page_string03[] = "<form style='display: inline' action='http://";
2578                     ; 2394               *pBuffer = (uint8_t)page_string03[i];
2580  a973 7b07          	ld	a,(OFST+0,sp)
2581  a975 5f            	clrw	x
2582  a976 97            	ld	xl,a
2583  a977 d69a23        	ld	a,(L34_page_string03,x)
2584  a97a 1e08          	ldw	x,(OFST+1,sp)
2585  a97c f7            	ld	(x),a
2586                     ; 2395 	      insertion_flag[0]++;
2588  a97d 725c0017      	inc	_insertion_flag
2589                     ; 2396 	      if (insertion_flag[0] == page_string03_len) insertion_flag[0] = 0;
2591  a981 c60017        	ld	a,_insertion_flag
2592  a984 a126          	cp	a,#38
2594  a986 203d          	jp	LC004
2595  a988               L514:
2596                     ; 2398 	    case 4:
2596                     ; 2399 	      // %y04 replaced with first header string 
2596                     ; 2400               *pBuffer = (uint8_t)page_string04[i];
2598  a988 7b07          	ld	a,(OFST+0,sp)
2599  a98a 5f            	clrw	x
2600  a98b 97            	ld	xl,a
2601  a98c d69a4c        	ld	a,(L15_page_string04,x)
2602  a98f 1e08          	ldw	x,(OFST+1,sp)
2603  a991 f7            	ld	(x),a
2604                     ; 2401 	      insertion_flag[0]++;
2606  a992 725c0017      	inc	_insertion_flag
2607                     ; 2402 	      if (insertion_flag[0] == page_string04_len) insertion_flag[0] = 0;
2609  a996 c60017        	ld	a,_insertion_flag
2610  a999 a147          	cp	a,#71
2612  a99b 2028          	jp	LC004
2613  a99d               L714:
2614                     ; 2404 	    case 5:
2614                     ; 2405 	      // %y05 replaced with second header string 
2614                     ; 2406               *pBuffer = (uint8_t)page_string05[i];
2616  a99d 7b07          	ld	a,(OFST+0,sp)
2617  a99f 5f            	clrw	x
2618  a9a0 97            	ld	xl,a
2619  a9a1 d69a96        	ld	a,(L75_page_string05,x)
2620  a9a4 1e08          	ldw	x,(OFST+1,sp)
2621  a9a6 f7            	ld	(x),a
2622                     ; 2407 	      insertion_flag[0]++;
2624  a9a7 725c0017      	inc	_insertion_flag
2625                     ; 2408 	      if (insertion_flag[0] == page_string05_len) insertion_flag[0] = 0;
2627  a9ab c60017        	ld	a,_insertion_flag
2628  a9ae a1ed          	cp	a,#237
2630  a9b0 2013          	jp	LC004
2631  a9b2               L124:
2632                     ; 2410 	    case 6:
2632                     ; 2411 	      // %y06 replaced with third header string 
2632                     ; 2412               *pBuffer = (uint8_t)page_string06[i];
2634  a9b2 7b07          	ld	a,(OFST+0,sp)
2635  a9b4 5f            	clrw	x
2636  a9b5 97            	ld	xl,a
2637  a9b6 d69b86        	ld	a,(L56_page_string06,x)
2638  a9b9 1e08          	ldw	x,(OFST+1,sp)
2639  a9bb f7            	ld	(x),a
2640                     ; 2413 	      insertion_flag[0]++;
2642  a9bc 725c0017      	inc	_insertion_flag
2643                     ; 2414 	      if (insertion_flag[0] == page_string06_len) insertion_flag[0] = 0;
2645  a9c0 c60017        	ld	a,_insertion_flag
2646  a9c3 a13b          	cp	a,#59
2649  a9c5               LC004:
2650  a9c5 2619          	jrne	LC007
2657  a9c7 725f0017      	clr	_insertion_flag
2658                     ; 2416 	    default: break;
2660                     ; 2418           pBuffer++;
2661                     ; 2419           nBytes++;
2662  a9cb 2013          	jp	LC007
2663  a9cd               L115:
2664                     ; 2427         *pBuffer = nByte;
2666  a9cd 1e08          	ldw	x,(OFST+1,sp)
2667  a9cf f7            	ld	(x),a
2668                     ; 2428         *ppData = *ppData + 1;
2670  a9d0 1e0c          	ldw	x,(OFST+5,sp)
2671  a9d2 9093          	ldw	y,x
2672  a9d4 fe            	ldw	x,(x)
2673  a9d5 5c            	incw	x
2674  a9d6 90ff          	ldw	(y),x
2675                     ; 2429         *pDataLeft = *pDataLeft - 1;
2677  a9d8 1e0e          	ldw	x,(OFST+7,sp)
2678  a9da 9093          	ldw	y,x
2679  a9dc fe            	ldw	x,(x)
2680  a9dd 5a            	decw	x
2681  a9de 90ff          	ldw	(y),x
2682                     ; 2430         pBuffer++;
2684  a9e0               LC007:
2686  a9e0 1e08          	ldw	x,(OFST+1,sp)
2687                     ; 2431         nBytes++;
2689  a9e2               LC006:
2694  a9e2 5c            	incw	x
2695  a9e3 1f08          	ldw	(OFST+1,sp),x
2701  a9e5 1e04          	ldw	x,(OFST-3,sp)
2702  a9e7 5c            	incw	x
2703  a9e8               LC005:
2704  a9e8 1f04          	ldw	(OFST-3,sp),x
2706  a9ea               L574:
2707                     ; 1774   while (nBytes < nMaxBytes) {
2709  a9ea 1e04          	ldw	x,(OFST-3,sp)
2710  a9ec 1310          	cpw	x,(OFST+9,sp)
2711  a9ee 2403cca4b1    	jrult	L374
2712  a9f3               L774:
2713                     ; 2436   return nBytes;
2715  a9f3 1e04          	ldw	x,(OFST-3,sp)
2718  a9f5 5b09          	addw	sp,#9
2719  a9f7 81            	ret	
2751                     ; 2440 void HttpDInit()
2751                     ; 2441 {
2752                     .text:	section	.text,new
2753  a9f8               _HttpDInit:
2757                     ; 2443   uip_listen(htons(Port_Httpd));
2759  a9f8 ce00f7        	ldw	x,_Port_Httpd
2760  a9fb cdee95        	call	_htons
2762  a9fe cde520        	call	_uip_listen
2764                     ; 2444   current_webpage = WEBPAGE_IOCONTROL;
2766  aa01 725f001a      	clr	_current_webpage
2767                     ; 2447   insertion_flag[0] = 0;
2769  aa05 725f0017      	clr	_insertion_flag
2770                     ; 2448   insertion_flag[1] = 0;
2772  aa09 725f0018      	clr	_insertion_flag+1
2773                     ; 2449   insertion_flag[2] = 0;
2775  aa0d 725f0019      	clr	_insertion_flag+2
2776                     ; 2452   saved_nstate = STATE_NULL;
2778  aa11 357f005b      	mov	_saved_nstate,#127
2779                     ; 2453   saved_parsestate = PARSE_CMD;
2781  aa15 725f005a      	clr	_saved_parsestate
2782                     ; 2454   saved_nparseleft = 0;
2784  aa19 725f0059      	clr	_saved_nparseleft
2785                     ; 2455   clear_saved_postpartial_all();
2788                     ; 2456 }
2791  aa1d ccb486        	jp	_clear_saved_postpartial_all
2981                     	switch	.const
2982  9be4               L212:
2983  9be4 b2ae          	dc.w	L7101
2984  9be6 b2b5          	dc.w	L1201
2985  9be8 b2bc          	dc.w	L3201
2986  9bea b2c3          	dc.w	L5201
2987  9bec b2ca          	dc.w	L7201
2988  9bee b2d1          	dc.w	L1301
2989  9bf0 b2d8          	dc.w	L3301
2990  9bf2 b2df          	dc.w	L5301
2991  9bf4 b2e6          	dc.w	L7301
2992  9bf6 b2ed          	dc.w	L1401
2993  9bf8 b2f4          	dc.w	L3401
2994  9bfa b2fb          	dc.w	L5401
2995  9bfc b301          	dc.w	L7401
2996  9bfe b307          	dc.w	L1501
2997  9c00 b30d          	dc.w	L3501
2998  9c02 b313          	dc.w	L5501
2999                     ; 2459 void HttpDCall(uint8_t* pBuffer, uint16_t nBytes, struct tHttpD* pSocket)
2999                     ; 2460 {
3000                     .text:	section	.text,new
3001  aa20               _HttpDCall:
3003  aa20 89            	pushw	x
3004  aa21 5204          	subw	sp,#4
3005       00000004      OFST:	set	4
3008                     ; 2464   i = 0;
3010  aa23 0f04          	clr	(OFST+0,sp)
3012                     ; 2466   if (uip_connected()) {
3014  aa25 720d02b843    	btjf	_uip_flags,#6,L7611
3015                     ; 2468     if (current_webpage == WEBPAGE_IOCONTROL) {
3017  aa2a c6001a        	ld	a,_current_webpage
3018  aa2d 260e          	jrne	L1711
3019                     ; 2469       pSocket->pData = g_HtmlPageIOControl;
3021  aa2f 1e0b          	ldw	x,(OFST+7,sp)
3022  aa31 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
3023  aa35 ef01          	ldw	(1,x),y
3024                     ; 2470       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
3026  aa37 90ae0c06      	ldw	y,#3078
3028  aa3b 2022          	jp	LC010
3029  aa3d               L1711:
3030                     ; 2474     else if (current_webpage == WEBPAGE_CONFIGURATION) {
3032  aa3d a101          	cp	a,#1
3033  aa3f 260e          	jrne	L5711
3034                     ; 2475       pSocket->pData = g_HtmlPageConfiguration;
3036  aa41 1e0b          	ldw	x,(OFST+7,sp)
3037  aa43 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
3038  aa47 ef01          	ldw	(1,x),y
3039                     ; 2476       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
3041  aa49 90ae0c31      	ldw	y,#3121
3043  aa4d 2010          	jp	LC010
3044  aa4f               L5711:
3045                     ; 2497     else if (current_webpage == WEBPAGE_RSTATE) {
3047  aa4f a106          	cp	a,#6
3048  aa51 260e          	jrne	L3711
3049                     ; 2498       pSocket->pData = g_HtmlPageRstate;
3051  aa53 1e0b          	ldw	x,(OFST+7,sp)
3052  aa55 90ae98c1      	ldw	y,#L71_g_HtmlPageRstate
3053  aa59 ef01          	ldw	(1,x),y
3054                     ; 2499       pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
3056  aa5b 90ae0087      	ldw	y,#135
3057  aa5f               LC010:
3058  aa5f ef03          	ldw	(3,x),y
3059  aa61               L3711:
3060                     ; 2502     pSocket->nState = STATE_CONNECTED;
3062  aa61 1e0b          	ldw	x,(OFST+7,sp)
3063                     ; 2503     pSocket->nPrevBytes = 0xFFFF;
3065  aa63 90aeffff      	ldw	y,#65535
3066  aa67 7f            	clr	(x)
3067  aa68 ef0b          	ldw	(11,x),y
3069  aa6a ccab3d        	jra	L042
3070  aa6d               L7611:
3071                     ; 2512   else if (uip_newdata() || uip_acked()) {
3073  aa6d 720202b808    	btjt	_uip_flags,#1,L7021
3075  aa72 720002b803cc  	btjf	_uip_flags,#0,L5021
3076  aa7a               L7021:
3077                     ; 2513     if (uip_acked()) {
3079  aa7a 720102b803cc  	btjt	_uip_flags,#0,L7701
3080                     ; 2516       goto senddata;
3082                     ; 2586     if (saved_nstate != STATE_NULL) {
3084  aa82 c6005b        	ld	a,_saved_nstate
3085  aa85 a17f          	cp	a,#127
3086  aa87 2603ccab09    	jreq	L1421
3087                     ; 2592       pSocket->nState = saved_nstate;
3089  aa8c 1e0b          	ldw	x,(OFST+7,sp)
3090  aa8e f7            	ld	(x),a
3091                     ; 2599       pSocket->ParseState = saved_parsestate;
3093  aa8f c6005a        	ld	a,_saved_parsestate
3094  aa92 e70a          	ld	(10,x),a
3095                     ; 2603       pSocket->nParseLeft = saved_nparseleft;
3097  aa94 c60059        	ld	a,_saved_nparseleft
3098  aa97 e706          	ld	(6,x),a
3099                     ; 2605       pSocket->nNewlines = saved_newlines;
3101  aa99 c60028        	ld	a,_saved_newlines
3102  aa9c e705          	ld	(5,x),a
3103                     ; 2617       for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i];
3105  aa9e 4f            	clr	a
3106  aa9f 6b04          	ld	(OFST+0,sp),a
3108  aaa1               L5121:
3111  aaa1 5f            	clrw	x
3112  aaa2 97            	ld	xl,a
3113  aaa3 d60041        	ld	a,(_saved_postpartial,x)
3114  aaa6 d70029        	ld	(_saved_postpartial_previous,x),a
3117  aaa9 0c04          	inc	(OFST+0,sp)
3121  aaab 7b04          	ld	a,(OFST+0,sp)
3122  aaad a118          	cp	a,#24
3123  aaaf 25f0          	jrult	L5121
3124                     ; 2622       if (saved_nstate == STATE_PARSEPOST) {
3126  aab1 c6005b        	ld	a,_saved_nstate
3127  aab4 a10a          	cp	a,#10
3128  aab6 2651          	jrne	L1421
3129                     ; 2623         if (saved_parsestate == PARSE_CMD) {
3131  aab8 c6005a        	ld	a,_saved_parsestate
3132  aabb 274c          	jreq	L1421
3134                     ; 2626         else if (saved_parsestate == PARSE_NUM10) {
3136  aabd a101          	cp	a,#1
3137  aabf 2609          	jrne	L1321
3138                     ; 2628 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3140  aac1 1e0b          	ldw	x,(OFST+7,sp)
3141  aac3 c60029        	ld	a,_saved_postpartial_previous
3142  aac6 e708          	ld	(8,x),a
3144  aac8 203f          	jra	L1421
3145  aaca               L1321:
3146                     ; 2630         else if (saved_parsestate == PARSE_NUM1) {
3148  aaca a102          	cp	a,#2
3149  aacc 2615          	jrne	L5321
3150                     ; 2632 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3152  aace 1e0b          	ldw	x,(OFST+7,sp)
3153  aad0 c60029        	ld	a,_saved_postpartial_previous
3154  aad3 e708          	ld	(8,x),a
3155                     ; 2633           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3157  aad5 c6002a        	ld	a,_saved_postpartial_previous+1
3158  aad8 97            	ld	xl,a
3159  aad9 a60a          	ld	a,#10
3160  aadb 42            	mul	x,a
3161  aadc 9f            	ld	a,xl
3162  aadd a0e0          	sub	a,#224
3163  aadf 1e0b          	ldw	x,(OFST+7,sp)
3165  aae1 2024          	jp	LC011
3166  aae3               L5321:
3167                     ; 2635         else if (saved_parsestate == PARSE_EQUAL || saved_parsestate == PARSE_VAL) {
3169  aae3 a103          	cp	a,#3
3170  aae5 2704          	jreq	L3421
3172  aae7 a104          	cp	a,#4
3173  aae9 261e          	jrne	L1421
3174  aaeb               L3421:
3175                     ; 2637 	  pSocket->ParseCmd = saved_postpartial_previous[0];
3177  aaeb 1e0b          	ldw	x,(OFST+7,sp)
3178  aaed c60029        	ld	a,_saved_postpartial_previous
3179  aaf0 e708          	ld	(8,x),a
3180                     ; 2638           pSocket->ParseNum = (uint8_t)((saved_postpartial_previous[1] - '0') * 10);
3182  aaf2 c6002a        	ld	a,_saved_postpartial_previous+1
3183  aaf5 97            	ld	xl,a
3184  aaf6 a60a          	ld	a,#10
3185  aaf8 42            	mul	x,a
3186  aaf9 9f            	ld	a,xl
3187  aafa 1e0b          	ldw	x,(OFST+7,sp)
3188  aafc a0e0          	sub	a,#224
3189  aafe e709          	ld	(9,x),a
3190                     ; 2639           pSocket->ParseNum += (uint8_t)(saved_postpartial_previous[2] - '0');
3192  ab00 c6002b        	ld	a,_saved_postpartial_previous+2
3193  ab03 a030          	sub	a,#48
3194  ab05 eb09          	add	a,(9,x)
3195  ab07               LC011:
3196  ab07 e709          	ld	(9,x),a
3198  ab09               L1421:
3199                     ; 2641 	else if (saved_parsestate == PARSE_DELIM) {
3201                     ; 2661     if (pSocket->nState == STATE_CONNECTED) {
3203  ab09 1e0b          	ldw	x,(OFST+7,sp)
3204  ab0b f6            	ld	a,(x)
3205  ab0c 2627          	jrne	L1521
3206                     ; 2662       if (nBytes == 0) return;
3208  ab0e 1e09          	ldw	x,(OFST+5,sp)
3209  ab10 272b          	jreq	L042
3212                     ; 2663       if (*pBuffer == 'G') {
3214  ab12 1e05          	ldw	x,(OFST+1,sp)
3215  ab14 f6            	ld	a,(x)
3216  ab15 a147          	cp	a,#71
3217  ab17 2606          	jrne	L5521
3218                     ; 2664         pSocket->nState = STATE_GET_G;
3220  ab19 1e0b          	ldw	x,(OFST+7,sp)
3221  ab1b a601          	ld	a,#1
3223  ab1d 2008          	jp	LC012
3224  ab1f               L5521:
3225                     ; 2666       else if (*pBuffer == 'P') {
3227  ab1f a150          	cp	a,#80
3228  ab21 2605          	jrne	L7521
3229                     ; 2667         pSocket->nState = STATE_POST_P;
3231  ab23 1e0b          	ldw	x,(OFST+7,sp)
3232  ab25 a604          	ld	a,#4
3233  ab27               LC012:
3234  ab27 f7            	ld	(x),a
3235  ab28               L7521:
3236                     ; 2669       nBytes--;
3238  ab28 1e09          	ldw	x,(OFST+5,sp)
3239  ab2a 5a            	decw	x
3240  ab2b 1f09          	ldw	(OFST+5,sp),x
3241                     ; 2670       pBuffer++;
3243  ab2d 1e05          	ldw	x,(OFST+1,sp)
3244  ab2f 5c            	incw	x
3245  ab30 1f05          	ldw	(OFST+1,sp),x
3246  ab32 1e0b          	ldw	x,(OFST+7,sp)
3247  ab34 f6            	ld	a,(x)
3248  ab35               L1521:
3249                     ; 2673     if (pSocket->nState == STATE_GET_G) {
3251  ab35 a101          	cp	a,#1
3252  ab37 2620          	jrne	L3621
3253                     ; 2674       if (nBytes == 0) return;
3255  ab39 1e09          	ldw	x,(OFST+5,sp)
3256  ab3b 2603          	jrne	L5621
3258  ab3d               L042:
3261  ab3d 5b06          	addw	sp,#6
3262  ab3f 81            	ret	
3263  ab40               L5621:
3264                     ; 2675       if (*pBuffer == 'E') pSocket->nState = STATE_GET_GE;
3266  ab40 1e05          	ldw	x,(OFST+1,sp)
3267  ab42 f6            	ld	a,(x)
3268  ab43 a145          	cp	a,#69
3269  ab45 2605          	jrne	L7621
3272  ab47 1e0b          	ldw	x,(OFST+7,sp)
3273  ab49 a602          	ld	a,#2
3274  ab4b f7            	ld	(x),a
3275  ab4c               L7621:
3276                     ; 2676       nBytes--;
3278  ab4c 1e09          	ldw	x,(OFST+5,sp)
3279  ab4e 5a            	decw	x
3280  ab4f 1f09          	ldw	(OFST+5,sp),x
3281                     ; 2677       pBuffer++;
3283  ab51 1e05          	ldw	x,(OFST+1,sp)
3284  ab53 5c            	incw	x
3285  ab54 1f05          	ldw	(OFST+1,sp),x
3286  ab56 1e0b          	ldw	x,(OFST+7,sp)
3287  ab58 f6            	ld	a,(x)
3288  ab59               L3621:
3289                     ; 2680     if (pSocket->nState == STATE_GET_GE) {
3291  ab59 a102          	cp	a,#2
3292  ab5b 261d          	jrne	L1721
3293                     ; 2681       if (nBytes == 0) return;
3295  ab5d 1e09          	ldw	x,(OFST+5,sp)
3296  ab5f 27dc          	jreq	L042
3299                     ; 2682       if (*pBuffer == 'T') pSocket->nState = STATE_GET_GET;
3301  ab61 1e05          	ldw	x,(OFST+1,sp)
3302  ab63 f6            	ld	a,(x)
3303  ab64 a154          	cp	a,#84
3304  ab66 2605          	jrne	L5721
3307  ab68 1e0b          	ldw	x,(OFST+7,sp)
3308  ab6a a603          	ld	a,#3
3309  ab6c f7            	ld	(x),a
3310  ab6d               L5721:
3311                     ; 2683       nBytes--;
3313  ab6d 1e09          	ldw	x,(OFST+5,sp)
3314  ab6f 5a            	decw	x
3315  ab70 1f09          	ldw	(OFST+5,sp),x
3316                     ; 2684       pBuffer++;
3318  ab72 1e05          	ldw	x,(OFST+1,sp)
3319  ab74 5c            	incw	x
3320  ab75 1f05          	ldw	(OFST+1,sp),x
3321  ab77 1e0b          	ldw	x,(OFST+7,sp)
3322  ab79 f6            	ld	a,(x)
3323  ab7a               L1721:
3324                     ; 2687     if (pSocket->nState == STATE_GET_GET) {
3326  ab7a a103          	cp	a,#3
3327  ab7c 261d          	jrne	L7721
3328                     ; 2688       if (nBytes == 0) return;
3330  ab7e 1e09          	ldw	x,(OFST+5,sp)
3331  ab80 27bb          	jreq	L042
3334                     ; 2689       if (*pBuffer == ' ') pSocket->nState = STATE_GOTGET;
3336  ab82 1e05          	ldw	x,(OFST+1,sp)
3337  ab84 f6            	ld	a,(x)
3338  ab85 a120          	cp	a,#32
3339  ab87 2605          	jrne	L3031
3342  ab89 1e0b          	ldw	x,(OFST+7,sp)
3343  ab8b a608          	ld	a,#8
3344  ab8d f7            	ld	(x),a
3345  ab8e               L3031:
3346                     ; 2690       nBytes--;
3348  ab8e 1e09          	ldw	x,(OFST+5,sp)
3349  ab90 5a            	decw	x
3350  ab91 1f09          	ldw	(OFST+5,sp),x
3351                     ; 2691       pBuffer++;
3353  ab93 1e05          	ldw	x,(OFST+1,sp)
3354  ab95 5c            	incw	x
3355  ab96 1f05          	ldw	(OFST+1,sp),x
3356  ab98 1e0b          	ldw	x,(OFST+7,sp)
3357  ab9a f6            	ld	a,(x)
3358  ab9b               L7721:
3359                     ; 2694     if (pSocket->nState == STATE_POST_P) {
3361  ab9b a104          	cp	a,#4
3362  ab9d 261d          	jrne	L5031
3363                     ; 2695       if (nBytes == 0) return;
3365  ab9f 1e09          	ldw	x,(OFST+5,sp)
3366  aba1 279a          	jreq	L042
3369                     ; 2696       if (*pBuffer == 'O') pSocket->nState = STATE_POST_PO;
3371  aba3 1e05          	ldw	x,(OFST+1,sp)
3372  aba5 f6            	ld	a,(x)
3373  aba6 a14f          	cp	a,#79
3374  aba8 2605          	jrne	L1131
3377  abaa 1e0b          	ldw	x,(OFST+7,sp)
3378  abac a605          	ld	a,#5
3379  abae f7            	ld	(x),a
3380  abaf               L1131:
3381                     ; 2697       nBytes--;
3383  abaf 1e09          	ldw	x,(OFST+5,sp)
3384  abb1 5a            	decw	x
3385  abb2 1f09          	ldw	(OFST+5,sp),x
3386                     ; 2698       pBuffer++;
3388  abb4 1e05          	ldw	x,(OFST+1,sp)
3389  abb6 5c            	incw	x
3390  abb7 1f05          	ldw	(OFST+1,sp),x
3391  abb9 1e0b          	ldw	x,(OFST+7,sp)
3392  abbb f6            	ld	a,(x)
3393  abbc               L5031:
3394                     ; 2701     if (pSocket->nState == STATE_POST_PO) {
3396  abbc a105          	cp	a,#5
3397  abbe 2620          	jrne	L3131
3398                     ; 2702       if (nBytes == 0) return;
3400  abc0 1e09          	ldw	x,(OFST+5,sp)
3401  abc2 2603ccab3d    	jreq	L042
3404                     ; 2703       if (*pBuffer == 'S') pSocket->nState = STATE_POST_POS;
3406  abc7 1e05          	ldw	x,(OFST+1,sp)
3407  abc9 f6            	ld	a,(x)
3408  abca a153          	cp	a,#83
3409  abcc 2605          	jrne	L7131
3412  abce 1e0b          	ldw	x,(OFST+7,sp)
3413  abd0 a606          	ld	a,#6
3414  abd2 f7            	ld	(x),a
3415  abd3               L7131:
3416                     ; 2704       nBytes--;
3418  abd3 1e09          	ldw	x,(OFST+5,sp)
3419  abd5 5a            	decw	x
3420  abd6 1f09          	ldw	(OFST+5,sp),x
3421                     ; 2705       pBuffer++;
3423  abd8 1e05          	ldw	x,(OFST+1,sp)
3424  abda 5c            	incw	x
3425  abdb 1f05          	ldw	(OFST+1,sp),x
3426  abdd 1e0b          	ldw	x,(OFST+7,sp)
3427  abdf f6            	ld	a,(x)
3428  abe0               L3131:
3429                     ; 2708     if (pSocket->nState == STATE_POST_POS) {
3431  abe0 a106          	cp	a,#6
3432  abe2 261d          	jrne	L1231
3433                     ; 2709       if (nBytes == 0) return;
3435  abe4 1e09          	ldw	x,(OFST+5,sp)
3436  abe6 27dc          	jreq	L042
3439                     ; 2710       if (*pBuffer == 'T') pSocket->nState = STATE_POST_POST;
3441  abe8 1e05          	ldw	x,(OFST+1,sp)
3442  abea f6            	ld	a,(x)
3443  abeb a154          	cp	a,#84
3444  abed 2605          	jrne	L5231
3447  abef 1e0b          	ldw	x,(OFST+7,sp)
3448  abf1 a607          	ld	a,#7
3449  abf3 f7            	ld	(x),a
3450  abf4               L5231:
3451                     ; 2711       nBytes--;
3453  abf4 1e09          	ldw	x,(OFST+5,sp)
3454  abf6 5a            	decw	x
3455  abf7 1f09          	ldw	(OFST+5,sp),x
3456                     ; 2712       pBuffer++;
3458  abf9 1e05          	ldw	x,(OFST+1,sp)
3459  abfb 5c            	incw	x
3460  abfc 1f05          	ldw	(OFST+1,sp),x
3461  abfe 1e0b          	ldw	x,(OFST+7,sp)
3462  ac00 f6            	ld	a,(x)
3463  ac01               L1231:
3464                     ; 2715     if (pSocket->nState == STATE_POST_POST) {
3466  ac01 a107          	cp	a,#7
3467  ac03 261d          	jrne	L7231
3468                     ; 2716       if (nBytes == 0) return;
3470  ac05 1e09          	ldw	x,(OFST+5,sp)
3471  ac07 27bb          	jreq	L042
3474                     ; 2717       if (*pBuffer == ' ') pSocket->nState = STATE_GOTPOST;
3476  ac09 1e05          	ldw	x,(OFST+1,sp)
3477  ac0b f6            	ld	a,(x)
3478  ac0c a120          	cp	a,#32
3479  ac0e 2605          	jrne	L3331
3482  ac10 1e0b          	ldw	x,(OFST+7,sp)
3483  ac12 a609          	ld	a,#9
3484  ac14 f7            	ld	(x),a
3485  ac15               L3331:
3486                     ; 2718       nBytes--;
3488  ac15 1e09          	ldw	x,(OFST+5,sp)
3489  ac17 5a            	decw	x
3490  ac18 1f09          	ldw	(OFST+5,sp),x
3491                     ; 2719       pBuffer++;
3493  ac1a 1e05          	ldw	x,(OFST+1,sp)
3494  ac1c 5c            	incw	x
3495  ac1d 1f05          	ldw	(OFST+1,sp),x
3496  ac1f 1e0b          	ldw	x,(OFST+7,sp)
3497  ac21 f6            	ld	a,(x)
3498  ac22               L7231:
3499                     ; 2722     if (pSocket->nState == STATE_GOTPOST) {
3501  ac22 a109          	cp	a,#9
3502  ac24 2703ccacab    	jrne	L5331
3503                     ; 2724       saved_nstate = STATE_GOTPOST;
3505  ac29 3509005b      	mov	_saved_nstate,#9
3506                     ; 2725       if (nBytes == 0) {
3508  ac2d 1e09          	ldw	x,(OFST+5,sp)
3509  ac2f 2676          	jrne	L3431
3510                     ; 2728 	saved_newlines = pSocket->nNewlines;
3512  ac31 1e0b          	ldw	x,(OFST+7,sp)
3513  ac33 e605          	ld	a,(5,x)
3514  ac35 c70028        	ld	_saved_newlines,a
3515                     ; 2729         return;
3517  ac38 ccab3d        	jra	L042
3518  ac3b               L1431:
3519                     ; 2737 	if (saved_newlines == 2) {
3521  ac3b c60028        	ld	a,_saved_newlines
3522  ac3e a102          	cp	a,#2
3523  ac40 272b          	jreq	L1531
3525                     ; 2742           if (*pBuffer == '\n') pSocket->nNewlines++;
3527  ac42 1e05          	ldw	x,(OFST+1,sp)
3528  ac44 f6            	ld	a,(x)
3529  ac45 a10a          	cp	a,#10
3530  ac47 2606          	jrne	L3531
3533  ac49 1e0b          	ldw	x,(OFST+7,sp)
3534  ac4b 6c05          	inc	(5,x)
3536  ac4d 2008          	jra	L5531
3537  ac4f               L3531:
3538                     ; 2743           else if (*pBuffer == '\r') { }
3540  ac4f a10d          	cp	a,#13
3541  ac51 2704          	jreq	L5531
3543                     ; 2744           else pSocket->nNewlines = 0;
3545  ac53 1e0b          	ldw	x,(OFST+7,sp)
3546  ac55 6f05          	clr	(5,x)
3547  ac57               L5531:
3548                     ; 2745           pBuffer++;
3550  ac57 1e05          	ldw	x,(OFST+1,sp)
3551  ac59 5c            	incw	x
3552  ac5a 1f05          	ldw	(OFST+1,sp),x
3553                     ; 2746           nBytes--;
3555  ac5c 1e09          	ldw	x,(OFST+5,sp)
3556  ac5e 5a            	decw	x
3557  ac5f 1f09          	ldw	(OFST+5,sp),x
3558                     ; 2747           if (nBytes == 0) {
3560  ac61 260a          	jrne	L1531
3561                     ; 2750             saved_newlines = pSocket->nNewlines;
3563  ac63 1e0b          	ldw	x,(OFST+7,sp)
3564  ac65 e605          	ld	a,(5,x)
3565  ac67 c70028        	ld	_saved_newlines,a
3566                     ; 2751             return;
3568  ac6a ccab3d        	jra	L042
3569  ac6d               L1531:
3570                     ; 2759         if (pSocket->nNewlines == 2) {
3572  ac6d 1e0b          	ldw	x,(OFST+7,sp)
3573  ac6f e605          	ld	a,(5,x)
3574  ac71 a102          	cp	a,#2
3575  ac73 2632          	jrne	L3431
3576                     ; 2762           if (current_webpage == WEBPAGE_IOCONTROL) {
3578  ac75 c6001a        	ld	a,_current_webpage
3579  ac78 2609          	jrne	L7631
3580                     ; 2763 	    pSocket->nParseLeft = PARSEBYTES_IOCONTROL;
3582  ac7a a635          	ld	a,#53
3583  ac7c e706          	ld	(6,x),a
3584                     ; 2764 	    pSocket->nParseLeftAddl = PARSEBYTES_IOCONTROL_ADDL;
3586  ac7e 6f07          	clr	(7,x)
3587  ac80 c6001a        	ld	a,_current_webpage
3588  ac83               L7631:
3589                     ; 2766           if (current_webpage == WEBPAGE_CONFIGURATION) {
3591  ac83 4a            	dec	a
3592  ac84 2608          	jrne	L1731
3593                     ; 2767 	    pSocket->nParseLeft = PARSEBYTES_CONFIGURATION;
3595  ac86 a6ec          	ld	a,#236
3596  ac88 e706          	ld	(6,x),a
3597                     ; 2768 	    pSocket->nParseLeftAddl = PARSEBYTES_CONFIGURATION_ADDL;
3599  ac8a a618          	ld	a,#24
3600  ac8c e707          	ld	(7,x),a
3601  ac8e               L1731:
3602                     ; 2770           pSocket->ParseState = saved_parsestate = PARSE_CMD;
3604  ac8e 725f005a      	clr	_saved_parsestate
3605  ac92 6f0a          	clr	(10,x)
3606                     ; 2771 	  saved_nparseleft = pSocket->nParseLeft;
3608  ac94 e606          	ld	a,(6,x)
3609  ac96 c70059        	ld	_saved_nparseleft,a
3610                     ; 2773           pSocket->nState = STATE_PARSEPOST;
3612  ac99 a60a          	ld	a,#10
3613  ac9b f7            	ld	(x),a
3614                     ; 2774 	  saved_nstate = STATE_PARSEPOST;
3616  ac9c 350a005b      	mov	_saved_nstate,#10
3617                     ; 2775 	  if (nBytes == 0) {
3619  aca0 1e09          	ldw	x,(OFST+5,sp)
3620  aca2 2607          	jrne	L5331
3621                     ; 2778 	    return;
3623  aca4 ccab3d        	jra	L042
3624  aca7               L3431:
3625                     ; 2732       while (nBytes != 0) {
3627  aca7 1e09          	ldw	x,(OFST+5,sp)
3628  aca9 2690          	jrne	L1431
3629  acab               L5331:
3630                     ; 2785     if (pSocket->nState == STATE_GOTGET) {
3632  acab 1e0b          	ldw	x,(OFST+7,sp)
3633  acad f6            	ld	a,(x)
3634  acae a108          	cp	a,#8
3635  acb0 2609          	jrne	L5731
3636                     ; 2789       pSocket->nParseLeft = 6;
3638  acb2 a606          	ld	a,#6
3639  acb4 e706          	ld	(6,x),a
3640                     ; 2790       pSocket->ParseState = PARSE_SLASH1;
3642  acb6 e70a          	ld	(10,x),a
3643                     ; 2792       pSocket->nState = STATE_PARSEGET;
3645  acb8 a60d          	ld	a,#13
3646  acba f7            	ld	(x),a
3647  acbb               L5731:
3648                     ; 2795     if (pSocket->nState == STATE_PARSEPOST) {
3650  acbb a10a          	cp	a,#10
3651  acbd 2703ccb19b    	jrne	L7731
3652  acc2               L1041:
3653                     ; 2809         if (pSocket->ParseState == PARSE_CMD) {
3655  acc2 1e0b          	ldw	x,(OFST+7,sp)
3656  acc4 e60a          	ld	a,(10,x)
3657  acc6 2664          	jrne	L5041
3658                     ; 2810           pSocket->ParseCmd = *pBuffer;
3660  acc8 1e05          	ldw	x,(OFST+1,sp)
3661  acca f6            	ld	a,(x)
3662  accb 1e0b          	ldw	x,(OFST+7,sp)
3663  accd e708          	ld	(8,x),a
3664                     ; 2811 	  saved_postpartial[0] = *pBuffer;
3666  accf 1e05          	ldw	x,(OFST+1,sp)
3667  acd1 f6            	ld	a,(x)
3668  acd2 c70041        	ld	_saved_postpartial,a
3669                     ; 2812           pSocket->ParseState = saved_parsestate = PARSE_NUM10;
3671  acd5 a601          	ld	a,#1
3672  acd7 c7005a        	ld	_saved_parsestate,a
3673  acda 1e0b          	ldw	x,(OFST+7,sp)
3674  acdc e70a          	ld	(10,x),a
3675                     ; 2813 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3677  acde e606          	ld	a,(6,x)
3678  ace0 2704          	jreq	L7041
3679                     ; 2814 	    pSocket->nParseLeft--;
3681  ace2 6a06          	dec	(6,x)
3683  ace4 2004          	jra	L1141
3684  ace6               L7041:
3685                     ; 2818 	    pSocket->ParseState = PARSE_DELIM;
3687  ace6 a605          	ld	a,#5
3688  ace8 e70a          	ld	(10,x),a
3689  acea               L1141:
3690                     ; 2820 	  saved_nparseleft = pSocket->nParseLeft;
3692  acea e606          	ld	a,(6,x)
3693  acec c70059        	ld	_saved_nparseleft,a
3694                     ; 2821           pBuffer++;
3696  acef 1e05          	ldw	x,(OFST+1,sp)
3697  acf1 5c            	incw	x
3698  acf2 1f05          	ldw	(OFST+1,sp),x
3699                     ; 2822 	  nBytes --;
3701  acf4 1e09          	ldw	x,(OFST+5,sp)
3702  acf6 5a            	decw	x
3703  acf7 1f09          	ldw	(OFST+5,sp),x
3704                     ; 2824 	  if (pSocket->ParseCmd == 'o' ||
3704                     ; 2825 	      pSocket->ParseCmd == 'a' ||
3704                     ; 2826 	      pSocket->ParseCmd == 'b' ||
3704                     ; 2827 	      pSocket->ParseCmd == 'c' ||
3704                     ; 2828 	      pSocket->ParseCmd == 'd' ||
3704                     ; 2829 	      pSocket->ParseCmd == 'g' ||
3704                     ; 2830 	      pSocket->ParseCmd == 'l' ||
3704                     ; 2831 	      pSocket->ParseCmd == 'm' ||
3704                     ; 2832 	      pSocket->ParseCmd == 'z') { }
3706  acf9 1e0b          	ldw	x,(OFST+7,sp)
3707  acfb e608          	ld	a,(8,x)
3708  acfd a16f          	cp	a,#111
3709  acff 2724          	jreq	L5341
3711  ad01 a161          	cp	a,#97
3712  ad03 2720          	jreq	L5341
3714  ad05 a162          	cp	a,#98
3715  ad07 271c          	jreq	L5341
3717  ad09 a163          	cp	a,#99
3718  ad0b 2718          	jreq	L5341
3720  ad0d a164          	cp	a,#100
3721  ad0f 2714          	jreq	L5341
3723  ad11 a167          	cp	a,#103
3724  ad13 2710          	jreq	L5341
3726  ad15 a16c          	cp	a,#108
3727  ad17 270c          	jreq	L5341
3729  ad19 a16d          	cp	a,#109
3730  ad1b 2708          	jreq	L5341
3732  ad1d a17a          	cp	a,#122
3733  ad1f 2704          	jreq	L5341
3734                     ; 2835 	    pSocket->ParseState = PARSE_DELIM;
3736  ad21 a605          	ld	a,#5
3737  ad23 e70a          	ld	(10,x),a
3738  ad25               L5341:
3739                     ; 2837 	  if (nBytes == 0) { // Hit end of fragment. Break out of while()
3741  ad25 1e09          	ldw	x,(OFST+5,sp)
3742  ad27 2699          	jrne	L1041
3743                     ; 2839 	    break;
3745  ad29 ccb143        	jra	L3041
3746  ad2c               L5041:
3747                     ; 2843         else if (pSocket->ParseState == PARSE_NUM10) {
3749  ad2c a101          	cp	a,#1
3750  ad2e 2640          	jrne	L3441
3751                     ; 2844           pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
3753  ad30 1e05          	ldw	x,(OFST+1,sp)
3754  ad32 f6            	ld	a,(x)
3755  ad33 97            	ld	xl,a
3756  ad34 a60a          	ld	a,#10
3757  ad36 42            	mul	x,a
3758  ad37 9f            	ld	a,xl
3759  ad38 1e0b          	ldw	x,(OFST+7,sp)
3760  ad3a a0e0          	sub	a,#224
3761  ad3c e709          	ld	(9,x),a
3762                     ; 2845 	  saved_postpartial[1] = *pBuffer;
3764  ad3e 1e05          	ldw	x,(OFST+1,sp)
3765  ad40 f6            	ld	a,(x)
3766  ad41 c70042        	ld	_saved_postpartial+1,a
3767                     ; 2846           pSocket->ParseState = saved_parsestate = PARSE_NUM1;
3769  ad44 a602          	ld	a,#2
3770  ad46 c7005a        	ld	_saved_parsestate,a
3771  ad49 1e0b          	ldw	x,(OFST+7,sp)
3772  ad4b e70a          	ld	(10,x),a
3773                     ; 2847 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3775  ad4d e606          	ld	a,(6,x)
3776  ad4f 2704          	jreq	L5441
3777                     ; 2848 	    pSocket->nParseLeft--;
3779  ad51 6a06          	dec	(6,x)
3781  ad53 2004          	jra	L7441
3782  ad55               L5441:
3783                     ; 2852 	    pSocket->ParseState = PARSE_DELIM;
3785  ad55 a605          	ld	a,#5
3786  ad57 e70a          	ld	(10,x),a
3787  ad59               L7441:
3788                     ; 2854 	  saved_nparseleft = pSocket->nParseLeft;
3790  ad59 e606          	ld	a,(6,x)
3791  ad5b c70059        	ld	_saved_nparseleft,a
3792                     ; 2855           pBuffer++;
3794  ad5e 1e05          	ldw	x,(OFST+1,sp)
3795  ad60 5c            	incw	x
3796  ad61 1f05          	ldw	(OFST+1,sp),x
3797                     ; 2856 	  nBytes--;
3799  ad63 1e09          	ldw	x,(OFST+5,sp)
3800  ad65 5a            	decw	x
3801  ad66 1f09          	ldw	(OFST+5,sp),x
3802                     ; 2857 	  if (nBytes == 0) {
3804  ad68 2703ccacc2    	jrne	L1041
3805                     ; 2859 	    break;
3807  ad6d ccb143        	jra	L3041
3808  ad70               L3441:
3809                     ; 2863         else if (pSocket->ParseState == PARSE_NUM1) {
3811  ad70 a102          	cp	a,#2
3812  ad72 2638          	jrne	L5541
3813                     ; 2864           pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
3815  ad74 1605          	ldw	y,(OFST+1,sp)
3816  ad76 90f6          	ld	a,(y)
3817  ad78 a030          	sub	a,#48
3818  ad7a eb09          	add	a,(9,x)
3819  ad7c e709          	ld	(9,x),a
3820                     ; 2865 	  saved_postpartial[2] = *pBuffer;
3822  ad7e 93            	ldw	x,y
3823  ad7f f6            	ld	a,(x)
3824  ad80 c70043        	ld	_saved_postpartial+2,a
3825                     ; 2866           pSocket->ParseState = saved_parsestate = PARSE_EQUAL;
3827  ad83 a603          	ld	a,#3
3828  ad85 c7005a        	ld	_saved_parsestate,a
3829  ad88 1e0b          	ldw	x,(OFST+7,sp)
3830  ad8a e70a          	ld	(10,x),a
3831                     ; 2867 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3833  ad8c e606          	ld	a,(6,x)
3834  ad8e 2704          	jreq	L7541
3835                     ; 2868 	    pSocket->nParseLeft--;
3837  ad90 6a06          	dec	(6,x)
3839  ad92 2004          	jra	L1641
3840  ad94               L7541:
3841                     ; 2872 	    pSocket->ParseState = PARSE_DELIM;
3843  ad94 a605          	ld	a,#5
3844  ad96 e70a          	ld	(10,x),a
3845  ad98               L1641:
3846                     ; 2874 	  saved_nparseleft = pSocket->nParseLeft;
3848  ad98 e606          	ld	a,(6,x)
3849  ad9a c70059        	ld	_saved_nparseleft,a
3850                     ; 2875           pBuffer++;
3852  ad9d 1e05          	ldw	x,(OFST+1,sp)
3853  ad9f 5c            	incw	x
3854  ada0 1f05          	ldw	(OFST+1,sp),x
3855                     ; 2876 	  nBytes--;
3857  ada2 1e09          	ldw	x,(OFST+5,sp)
3858  ada4 5a            	decw	x
3859  ada5 1f09          	ldw	(OFST+5,sp),x
3860                     ; 2877 	  if (nBytes == 0) {
3862  ada7 26c1          	jrne	L1041
3863                     ; 2879 	    break;
3865  ada9 ccb143        	jra	L3041
3866  adac               L5541:
3867                     ; 2883         else if (pSocket->ParseState == PARSE_EQUAL) {
3869  adac a103          	cp	a,#3
3870  adae 262f          	jrne	L7641
3871                     ; 2884           pSocket->ParseState = saved_parsestate = PARSE_VAL;
3873  adb0 a604          	ld	a,#4
3874  adb2 c7005a        	ld	_saved_parsestate,a
3875  adb5 e70a          	ld	(10,x),a
3876                     ; 2885 	  saved_postpartial[3] = *pBuffer;
3878  adb7 1e05          	ldw	x,(OFST+1,sp)
3879  adb9 f6            	ld	a,(x)
3880  adba c70044        	ld	_saved_postpartial+3,a
3881                     ; 2886 	  if (pSocket->nParseLeft > 0) { // Prevent underflow
3883  adbd 1e0b          	ldw	x,(OFST+7,sp)
3884  adbf e606          	ld	a,(6,x)
3885  adc1 2704          	jreq	L1741
3886                     ; 2887 	    pSocket->nParseLeft--;
3888  adc3 6a06          	dec	(6,x)
3890  adc5 2004          	jra	L3741
3891  adc7               L1741:
3892                     ; 2891 	    pSocket->ParseState = PARSE_DELIM;
3894  adc7 a605          	ld	a,#5
3895  adc9 e70a          	ld	(10,x),a
3896  adcb               L3741:
3897                     ; 2893 	  saved_nparseleft = pSocket->nParseLeft;
3899  adcb e606          	ld	a,(6,x)
3900  adcd c70059        	ld	_saved_nparseleft,a
3901                     ; 2894           pBuffer++;
3903  add0 1e05          	ldw	x,(OFST+1,sp)
3904  add2 5c            	incw	x
3905  add3 1f05          	ldw	(OFST+1,sp),x
3906                     ; 2895 	  nBytes--;
3908  add5 1e09          	ldw	x,(OFST+5,sp)
3909  add7 5a            	decw	x
3910  add8 1f09          	ldw	(OFST+5,sp),x
3911                     ; 2896 	  if (nBytes == 0) {
3913  adda 268e          	jrne	L1041
3914                     ; 2898 	    break;
3916  addc ccb143        	jra	L3041
3917  addf               L7641:
3918                     ; 2902         else if (pSocket->ParseState == PARSE_VAL) {
3920  addf a104          	cp	a,#4
3921  ade1 2703ccb116    	jrne	L1051
3922                     ; 2915           if (pSocket->ParseCmd == 'o') {
3924  ade6 e608          	ld	a,(8,x)
3925  ade8 a16f          	cp	a,#111
3926  adea 2640          	jrne	L3051
3927                     ; 2929               if ((uint8_t)(*pBuffer) == '1') pin_value = 1;
3929  adec 1e05          	ldw	x,(OFST+1,sp)
3930  adee f6            	ld	a,(x)
3931  adef a131          	cp	a,#49
3932  adf1 2604          	jrne	L5051
3935  adf3 a601          	ld	a,#1
3937  adf5 2001          	jra	L7051
3938  adf7               L5051:
3939                     ; 2930 	      else pin_value = 0;
3941  adf7 4f            	clr	a
3942  adf8               L7051:
3943  adf8 6b01          	ld	(OFST-3,sp),a
3945                     ; 2931 	      GpioSetPin(pSocket->ParseNum, (uint8_t)pin_value);
3947  adfa 160b          	ldw	y,(OFST+7,sp)
3948  adfc 97            	ld	xl,a
3949  adfd 90e609        	ld	a,(9,y)
3950  ae00 95            	ld	xh,a
3951  ae01 cdb93d        	call	_GpioSetPin
3953                     ; 2933 	    if (pSocket->nParseLeft > 0) pSocket->nParseLeft--; // Prevent
3955  ae04 1e0b          	ldw	x,(OFST+7,sp)
3956  ae06 e606          	ld	a,(6,x)
3957  ae08 2704          	jreq	L1151
3960  ae0a 6a06          	dec	(6,x)
3961  ae0c e606          	ld	a,(6,x)
3962  ae0e               L1151:
3963                     ; 2935             saved_nparseleft = pSocket->nParseLeft;
3965  ae0e c70059        	ld	_saved_nparseleft,a
3966                     ; 2936             pBuffer++;
3968  ae11 1e05          	ldw	x,(OFST+1,sp)
3969  ae13 5c            	incw	x
3970  ae14 1f05          	ldw	(OFST+1,sp),x
3971                     ; 2937 	    nBytes--;
3973  ae16 1e09          	ldw	x,(OFST+5,sp)
3974  ae18 5a            	decw	x
3975  ae19 1f09          	ldw	(OFST+5,sp),x
3976                     ; 2938 	    if (nBytes == 0) {
3978  ae1b 2703ccb0f4    	jrne	L5151
3979                     ; 2941 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
3981  ae20 a605          	ld	a,#5
3982  ae22 c7005a        	ld	_saved_parsestate,a
3983  ae25 1e0b          	ldw	x,(OFST+7,sp)
3984  ae27 e70a          	ld	(10,x),a
3985                     ; 2942 	      break;
3987  ae29 ccb143        	jra	L3041
3988  ae2c               L3051:
3989                     ; 2949           else if (pSocket->ParseCmd == 'a'
3989                     ; 2950                 || pSocket->ParseCmd == 'l'
3989                     ; 2951                 || pSocket->ParseCmd == 'm' ) {
3991  ae2c a161          	cp	a,#97
3992  ae2e 2708          	jreq	L1251
3994  ae30 a16c          	cp	a,#108
3995  ae32 2704          	jreq	L1251
3997  ae34 a16d          	cp	a,#109
3998  ae36 2657          	jrne	L7151
3999  ae38               L1251:
4000                     ; 2955 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4002  ae38 725f0021      	clr	_break_while
4003                     ; 2957             tmp_pBuffer = pBuffer;
4005  ae3c 1e05          	ldw	x,(OFST+1,sp)
4006  ae3e cf0025        	ldw	_tmp_pBuffer,x
4007                     ; 2958             tmp_nBytes = nBytes;
4009  ae41 1e09          	ldw	x,(OFST+5,sp)
4010  ae43 cf0023        	ldw	_tmp_nBytes,x
4011                     ; 2959 	    tmp_nParseLeft = pSocket->nParseLeft;
4013  ae46 1e0b          	ldw	x,(OFST+7,sp)
4014  ae48 e606          	ld	a,(6,x)
4015  ae4a c70022        	ld	_tmp_nParseLeft,a
4016                     ; 2960             switch (pSocket->ParseCmd) {
4018  ae4d e608          	ld	a,(8,x)
4020                     ; 2963               case 'm': i = 10; break;
4021  ae4f a061          	sub	a,#97
4022  ae51 270b          	jreq	L3101
4023  ae53 a00b          	sub	a,#11
4024  ae55 270b          	jreq	L5101
4025  ae57 4a            	dec	a
4026  ae58 2708          	jreq	L5101
4027  ae5a 7b04          	ld	a,(OFST+0,sp)
4028  ae5c 2008          	jra	L7251
4029  ae5e               L3101:
4030                     ; 2961               case 'a': i = 19; break;
4032  ae5e a613          	ld	a,#19
4035  ae60 2002          	jp	LC015
4036  ae62               L5101:
4037                     ; 2962               case 'l':
4037                     ; 2963               case 'm': i = 10; break;
4039  ae62 a60a          	ld	a,#10
4040  ae64               LC015:
4041  ae64 6b04          	ld	(OFST+0,sp),a
4045  ae66               L7251:
4046                     ; 2965             parse_POST_string(pSocket->ParseCmd, i);
4048  ae66 160b          	ldw	y,(OFST+7,sp)
4049  ae68 97            	ld	xl,a
4050  ae69 90e608        	ld	a,(8,y)
4051  ae6c 95            	ld	xh,a
4052  ae6d cdb4af        	call	_parse_POST_string
4054                     ; 2966             pBuffer = tmp_pBuffer;
4056  ae70 ce0025        	ldw	x,_tmp_pBuffer
4057  ae73 1f05          	ldw	(OFST+1,sp),x
4058                     ; 2967             nBytes = tmp_nBytes;
4060  ae75 ce0023        	ldw	x,_tmp_nBytes
4061  ae78 1f09          	ldw	(OFST+5,sp),x
4062                     ; 2968 	    pSocket->nParseLeft = tmp_nParseLeft;
4064  ae7a 1e0b          	ldw	x,(OFST+7,sp)
4065  ae7c c60022        	ld	a,_tmp_nParseLeft
4066  ae7f e706          	ld	(6,x),a
4067                     ; 2969             if (break_while == 1) {
4069  ae81 c60021        	ld	a,_break_while
4070  ae84 4a            	dec	a
4071  ae85 2696          	jrne	L5151
4072                     ; 2973 	      pSocket->ParseState = saved_parsestate;
4074  ae87 c6005a        	ld	a,_saved_parsestate
4075  ae8a e70a          	ld	(10,x),a
4076                     ; 2974 	      break;
4078  ae8c ccb143        	jra	L3041
4079  ae8f               L7151:
4080                     ; 2981           else if (pSocket->ParseCmd == 'b') {
4082  ae8f a162          	cp	a,#98
4083  ae91 2654          	jrne	L5351
4084                     ; 2989 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4086  ae93 725f0021      	clr	_break_while
4087                     ; 2991             tmp_pBuffer = pBuffer;
4089  ae97 1e05          	ldw	x,(OFST+1,sp)
4090  ae99 cf0025        	ldw	_tmp_pBuffer,x
4091                     ; 2992             tmp_nBytes = nBytes;
4093  ae9c 1e09          	ldw	x,(OFST+5,sp)
4094  ae9e cf0023        	ldw	_tmp_nBytes,x
4095                     ; 2993 	    tmp_nParseLeft = pSocket->nParseLeft;
4097  aea1 1e0b          	ldw	x,(OFST+7,sp)
4098  aea3 e606          	ld	a,(6,x)
4099  aea5 c70022        	ld	_tmp_nParseLeft,a
4100                     ; 2994             parse_POST_address(pSocket->ParseCmd, pSocket->ParseNum);
4102  aea8 e609          	ld	a,(9,x)
4103  aeaa 160b          	ldw	y,(OFST+7,sp)
4104  aeac 97            	ld	xl,a
4105  aead 90e608        	ld	a,(8,y)
4106  aeb0 95            	ld	xh,a
4107  aeb1 cdb630        	call	_parse_POST_address
4109                     ; 2995             pBuffer = tmp_pBuffer;
4111  aeb4 ce0025        	ldw	x,_tmp_pBuffer
4112  aeb7 1f05          	ldw	(OFST+1,sp),x
4113                     ; 2996             nBytes = tmp_nBytes;
4115  aeb9 ce0023        	ldw	x,_tmp_nBytes
4116  aebc 1f09          	ldw	(OFST+5,sp),x
4117                     ; 2997 	    pSocket->nParseLeft = tmp_nParseLeft;
4119  aebe 1e0b          	ldw	x,(OFST+7,sp)
4120  aec0 c60022        	ld	a,_tmp_nParseLeft
4121  aec3 e706          	ld	(6,x),a
4122                     ; 2998             if (break_while == 1) {
4124  aec5 c60021        	ld	a,_break_while
4125  aec8 a101          	cp	a,#1
4126  aeca 260a          	jrne	L7351
4127                     ; 3002               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4129  aecc a604          	ld	a,#4
4130  aece c7005a        	ld	_saved_parsestate,a
4131  aed1 e70a          	ld	(10,x),a
4132                     ; 3003 	      break;
4134  aed3 ccb143        	jra	L3041
4135  aed6               L7351:
4136                     ; 3005             if (break_while == 2) {
4138  aed6 a102          	cp	a,#2
4139  aed8 2703ccb0f4    	jrne	L5151
4140                     ; 3008               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4142  aedd a605          	ld	a,#5
4143  aedf c7005a        	ld	_saved_parsestate,a
4144  aee2 e70a          	ld	(10,x),a
4145                     ; 3009 	      break;
4147  aee4 ccb143        	jra	L3041
4148  aee7               L5351:
4149                     ; 3016           else if (pSocket->ParseCmd == 'c') {
4151  aee7 a163          	cp	a,#99
4152  aee9 2651          	jrne	L5451
4153                     ; 3025 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4155  aeeb 725f0021      	clr	_break_while
4156                     ; 3027             tmp_pBuffer = pBuffer;
4158  aeef 1e05          	ldw	x,(OFST+1,sp)
4159  aef1 cf0025        	ldw	_tmp_pBuffer,x
4160                     ; 3028             tmp_nBytes = nBytes;
4162  aef4 1e09          	ldw	x,(OFST+5,sp)
4163  aef6 cf0023        	ldw	_tmp_nBytes,x
4164                     ; 3029 	    tmp_nParseLeft = pSocket->nParseLeft;
4166  aef9 1e0b          	ldw	x,(OFST+7,sp)
4167  aefb e606          	ld	a,(6,x)
4168  aefd c70022        	ld	_tmp_nParseLeft,a
4169                     ; 3030             parse_POST_port(pSocket->ParseCmd, pSocket->ParseNum);
4171  af00 e609          	ld	a,(9,x)
4172  af02 160b          	ldw	y,(OFST+7,sp)
4173  af04 97            	ld	xl,a
4174  af05 90e608        	ld	a,(8,y)
4175  af08 95            	ld	xh,a
4176  af09 cdb788        	call	_parse_POST_port
4178                     ; 3031             pBuffer = tmp_pBuffer;
4180  af0c ce0025        	ldw	x,_tmp_pBuffer
4181  af0f 1f05          	ldw	(OFST+1,sp),x
4182                     ; 3032             nBytes = tmp_nBytes;
4184  af11 ce0023        	ldw	x,_tmp_nBytes
4185  af14 1f09          	ldw	(OFST+5,sp),x
4186                     ; 3033 	    pSocket->nParseLeft = tmp_nParseLeft;
4188  af16 1e0b          	ldw	x,(OFST+7,sp)
4189  af18 c60022        	ld	a,_tmp_nParseLeft
4190  af1b e706          	ld	(6,x),a
4191                     ; 3034             if (break_while == 1) {
4193  af1d c60021        	ld	a,_break_while
4194  af20 a101          	cp	a,#1
4195  af22 260a          	jrne	L7451
4196                     ; 3037               pSocket->ParseState = saved_parsestate = PARSE_VAL;
4198  af24 a604          	ld	a,#4
4199  af26 c7005a        	ld	_saved_parsestate,a
4200  af29 e70a          	ld	(10,x),a
4201                     ; 3038 	      break;
4203  af2b ccb143        	jra	L3041
4204  af2e               L7451:
4205                     ; 3040             if (break_while == 2) {
4207  af2e a102          	cp	a,#2
4208  af30 26a8          	jrne	L5151
4209                     ; 3043               pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4211  af32 a605          	ld	a,#5
4212  af34 c7005a        	ld	_saved_parsestate,a
4213  af37 e70a          	ld	(10,x),a
4214                     ; 3044 	      break;
4216  af39 ccb143        	jra	L3041
4217  af3c               L5451:
4218                     ; 3051           else if (pSocket->ParseCmd == 'd') {
4220  af3c a164          	cp	a,#100
4221  af3e 2703ccafde    	jrne	L5551
4222                     ; 3057 	    alpha[0] = '-';
4224  af43 352d001b      	mov	_alpha,#45
4225                     ; 3058 	    alpha[1] = '-';
4227  af47 352d001c      	mov	_alpha+1,#45
4228                     ; 3060 	    if (saved_postpartial_previous[0] == 'd') {
4230  af4b c60029        	ld	a,_saved_postpartial_previous
4231  af4e a164          	cp	a,#100
4232  af50 261a          	jrne	L7551
4233                     ; 3064 	      saved_postpartial_previous[0] = '\0';
4235  af52 725f0029      	clr	_saved_postpartial_previous
4236                     ; 3070 	      if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
4238  af56 c6002d        	ld	a,_saved_postpartial_previous+4
4239  af59 2705          	jreq	L1651
4242  af5b 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
4243  af60               L1651:
4244                     ; 3071 	      if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
4246  af60 c6002e        	ld	a,_saved_postpartial_previous+5
4247  af63 270a          	jreq	L5651
4250  af65 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
4251  af6a 2003          	jra	L5651
4252  af6c               L7551:
4253                     ; 3078               clear_saved_postpartial_data(); // Clear [4] and higher
4255  af6c cdb49a        	call	_clear_saved_postpartial_data
4257  af6f               L5651:
4258                     ; 3081             if (alpha[0] == '-') {
4260  af6f c6001b        	ld	a,_alpha
4261  af72 a12d          	cp	a,#45
4262  af74 261e          	jrne	L7651
4263                     ; 3082 	      alpha[0] = (uint8_t)(*pBuffer);
4265  af76 1e05          	ldw	x,(OFST+1,sp)
4266  af78 f6            	ld	a,(x)
4267  af79 c7001b        	ld	_alpha,a
4268                     ; 3083               saved_postpartial[4] = *pBuffer;
4270  af7c c70045        	ld	_saved_postpartial+4,a
4271                     ; 3084               pSocket->nParseLeft--;
4273  af7f 1e0b          	ldw	x,(OFST+7,sp)
4274  af81 6a06          	dec	(6,x)
4275                     ; 3085               saved_nparseleft = pSocket->nParseLeft;
4277  af83 e606          	ld	a,(6,x)
4278  af85 c70059        	ld	_saved_nparseleft,a
4279                     ; 3086               pBuffer++;
4281  af88 1e05          	ldw	x,(OFST+1,sp)
4282  af8a 5c            	incw	x
4283  af8b 1f05          	ldw	(OFST+1,sp),x
4284                     ; 3087 	      nBytes--;
4286  af8d 1e09          	ldw	x,(OFST+5,sp)
4287  af8f 5a            	decw	x
4288  af90 1f09          	ldw	(OFST+5,sp),x
4289                     ; 3088               if (nBytes == 0) break; // Hit end of fragment. Break out of
4291  af92 27a5          	jreq	L3041
4294  af94               L7651:
4295                     ; 3092             if (alpha[1] == '-') {
4297  af94 c6001c        	ld	a,_alpha+1
4298  af97 a12d          	cp	a,#45
4299  af99 261c          	jrne	L3751
4300                     ; 3093 	      alpha[1] = (uint8_t)(*pBuffer);
4302  af9b 1e05          	ldw	x,(OFST+1,sp)
4303  af9d f6            	ld	a,(x)
4304  af9e c7001c        	ld	_alpha+1,a
4305                     ; 3094               saved_postpartial[5] = *pBuffer;
4307  afa1 c70046        	ld	_saved_postpartial+5,a
4308                     ; 3095               pSocket->nParseLeft--;
4310  afa4 1e0b          	ldw	x,(OFST+7,sp)
4311  afa6 6a06          	dec	(6,x)
4312                     ; 3096               saved_nparseleft = pSocket->nParseLeft;
4314  afa8 e606          	ld	a,(6,x)
4315  afaa c70059        	ld	_saved_nparseleft,a
4316                     ; 3097               pBuffer++;
4318  afad 1e05          	ldw	x,(OFST+1,sp)
4319  afaf 5c            	incw	x
4320  afb0 1f05          	ldw	(OFST+1,sp),x
4321                     ; 3098 	      nBytes--;
4323  afb2 1e09          	ldw	x,(OFST+5,sp)
4324  afb4 5a            	decw	x
4325  afb5 1f09          	ldw	(OFST+5,sp),x
4326  afb7               L3751:
4327                     ; 3104             clear_saved_postpartial_all();
4329  afb7 cdb486        	call	_clear_saved_postpartial_all
4331                     ; 3106             SetMAC(pSocket->ParseNum, alpha[0], alpha[1]);
4333  afba 3b001c        	push	_alpha+1
4334  afbd c6001b        	ld	a,_alpha
4335  afc0 160c          	ldw	y,(OFST+8,sp)
4336  afc2 97            	ld	xl,a
4337  afc3 90e609        	ld	a,(9,y)
4338  afc6 95            	ld	xh,a
4339  afc7 cdb992        	call	_SetMAC
4341  afca 84            	pop	a
4342                     ; 3108             if (nBytes == 0) {
4344  afcb 1e09          	ldw	x,(OFST+5,sp)
4345  afcd 2703ccb0f4    	jrne	L5151
4346                     ; 3111 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4348  afd2 a605          	ld	a,#5
4349  afd4 c7005a        	ld	_saved_parsestate,a
4350  afd7 1e0b          	ldw	x,(OFST+7,sp)
4351  afd9 e70a          	ld	(10,x),a
4352                     ; 3112 	      break;
4354  afdb ccb143        	jra	L3041
4355  afde               L5551:
4356                     ; 3119 	  else if (pSocket->ParseCmd == 'g') {
4358  afde a167          	cp	a,#103
4359  afe0 2703ccb0e7    	jrne	L1061
4360                     ; 3130             for (i=0; i<6; i++) alpha[i] = '-';
4362  afe5 4f            	clr	a
4363  afe6 6b04          	ld	(OFST+0,sp),a
4365  afe8               L3061:
4368  afe8 5f            	clrw	x
4369  afe9 97            	ld	xl,a
4370  afea a62d          	ld	a,#45
4371  afec d7001b        	ld	(_alpha,x),a
4374  afef 0c04          	inc	(OFST+0,sp)
4378  aff1 7b04          	ld	a,(OFST+0,sp)
4379  aff3 a106          	cp	a,#6
4380  aff5 25f1          	jrult	L3061
4381                     ; 3132 	    break_while = 0; // Clear the break switch in case a TCP Fragment
4383  aff7 725f0021      	clr	_break_while
4384                     ; 3135 	    if (saved_postpartial_previous[0] == 'g') {
4386  affb c60029        	ld	a,_saved_postpartial_previous
4387  affe a167          	cp	a,#103
4388  b000 2621          	jrne	L1161
4389                     ; 3139 	      saved_postpartial_previous[0] = '\0';
4391  b002 725f0029      	clr	_saved_postpartial_previous
4392                     ; 3145               for (i=0; i<6; i++) {
4394  b006 4f            	clr	a
4395  b007 6b04          	ld	(OFST+0,sp),a
4397  b009               L3161:
4398                     ; 3146                 if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
4400  b009 5f            	clrw	x
4401  b00a 97            	ld	xl,a
4402  b00b 724d002d      	tnz	(_saved_postpartial_previous+4,x)
4403  b00f 2708          	jreq	L1261
4406  b011 5f            	clrw	x
4407  b012 97            	ld	xl,a
4408  b013 d6002d        	ld	a,(_saved_postpartial_previous+4,x)
4409  b016 d7001b        	ld	(_alpha,x),a
4410  b019               L1261:
4411                     ; 3145               for (i=0; i<6; i++) {
4413  b019 0c04          	inc	(OFST+0,sp)
4417  b01b 7b04          	ld	a,(OFST+0,sp)
4418  b01d a106          	cp	a,#6
4419  b01f 25e8          	jrult	L3161
4421  b021 2003          	jra	L3261
4422  b023               L1161:
4423                     ; 3154               clear_saved_postpartial_data(); // Clear [4] and higher
4425  b023 cdb49a        	call	_clear_saved_postpartial_data
4427  b026               L3261:
4428                     ; 3157             for (i=0; i<6; i++) {
4430  b026 4f            	clr	a
4431  b027 6b04          	ld	(OFST+0,sp),a
4433  b029               L5261:
4434                     ; 3163               if (alpha[i] == '-') {
4436  b029 5f            	clrw	x
4437  b02a 97            	ld	xl,a
4438  b02b d6001b        	ld	a,(_alpha,x)
4439  b02e a12d          	cp	a,#45
4440  b030 2636          	jrne	L3361
4441                     ; 3164 	        alpha[i] = (uint8_t)(*pBuffer);
4443  b032 7b04          	ld	a,(OFST+0,sp)
4444  b034 5f            	clrw	x
4445  b035 1605          	ldw	y,(OFST+1,sp)
4446  b037 97            	ld	xl,a
4447  b038 90f6          	ld	a,(y)
4448  b03a d7001b        	ld	(_alpha,x),a
4449                     ; 3165                 saved_postpartial[i+4] = *pBuffer;
4451  b03d 5f            	clrw	x
4452  b03e 7b04          	ld	a,(OFST+0,sp)
4453  b040 97            	ld	xl,a
4454  b041 90f6          	ld	a,(y)
4455  b043 d70045        	ld	(_saved_postpartial+4,x),a
4456                     ; 3166                 pSocket->nParseLeft--;
4458  b046 1e0b          	ldw	x,(OFST+7,sp)
4459  b048 6a06          	dec	(6,x)
4460                     ; 3167                 saved_nparseleft = pSocket->nParseLeft;
4462  b04a e606          	ld	a,(6,x)
4463  b04c c70059        	ld	_saved_nparseleft,a
4464                     ; 3168                 pBuffer++;
4466  b04f 93            	ldw	x,y
4467  b050 5c            	incw	x
4468  b051 1f05          	ldw	(OFST+1,sp),x
4469                     ; 3169 	        nBytes--;
4471  b053 1e09          	ldw	x,(OFST+5,sp)
4472  b055 5a            	decw	x
4473  b056 1f09          	ldw	(OFST+5,sp),x
4474                     ; 3170                 if (i != 5 && nBytes == 0) {
4476  b058 7b04          	ld	a,(OFST+0,sp)
4477  b05a a105          	cp	a,#5
4478  b05c 270a          	jreq	L3361
4480  b05e 1e09          	ldw	x,(OFST+5,sp)
4481  b060 2606          	jrne	L3361
4482                     ; 3171 		  break_while = 1; // Hit end of fragment. Break out of
4484  b062 35010021      	mov	_break_while,#1
4485                     ; 3173 		  break; // Break out of for() loop
4487  b066 2008          	jra	L1361
4488  b068               L3361:
4489                     ; 3157             for (i=0; i<6; i++) {
4491  b068 0c04          	inc	(OFST+0,sp)
4495  b06a 7b04          	ld	a,(OFST+0,sp)
4496  b06c a106          	cp	a,#6
4497  b06e 25b9          	jrult	L5261
4498  b070               L1361:
4499                     ; 3177 	    if (break_while == 1) {
4501  b070 c60021        	ld	a,_break_while
4502  b073 4a            	dec	a
4503  b074 2603ccb143    	jreq	L3041
4504                     ; 3179 	      break;
4506                     ; 3185             clear_saved_postpartial_all();
4508  b079 cdb486        	call	_clear_saved_postpartial_all
4510                     ; 3188 	    if (alpha[0] != '0' && alpha[0] != '1') alpha[0] = '0';
4512  b07c c6001b        	ld	a,_alpha
4513  b07f a130          	cp	a,#48
4514  b081 2708          	jreq	L1461
4516  b083 a131          	cp	a,#49
4517  b085 2704          	jreq	L1461
4520  b087 3530001b      	mov	_alpha,#48
4521  b08b               L1461:
4522                     ; 3189 	    if (alpha[1] != '0' && alpha[1] != '1') alpha[1] = '0';
4524  b08b c6001c        	ld	a,_alpha+1
4525  b08e a130          	cp	a,#48
4526  b090 2708          	jreq	L3461
4528  b092 a131          	cp	a,#49
4529  b094 2704          	jreq	L3461
4532  b096 3530001c      	mov	_alpha+1,#48
4533  b09a               L3461:
4534                     ; 3190 	    if (alpha[2] != '0' && alpha[2] != '1' && alpha[2] != '2') alpha[2] = '2';
4536  b09a c6001d        	ld	a,_alpha+2
4537  b09d a130          	cp	a,#48
4538  b09f 270c          	jreq	L5461
4540  b0a1 a131          	cp	a,#49
4541  b0a3 2708          	jreq	L5461
4543  b0a5 a132          	cp	a,#50
4544  b0a7 2704          	jreq	L5461
4547  b0a9 3532001d      	mov	_alpha+2,#50
4548  b0ad               L5461:
4549                     ; 3191 	    if (alpha[3] != '0' && alpha[3] != '1') alpha[3] = '0';
4551  b0ad c6001e        	ld	a,_alpha+3
4552  b0b0 a130          	cp	a,#48
4553  b0b2 2708          	jreq	L7461
4555  b0b4 a131          	cp	a,#49
4556  b0b6 2704          	jreq	L7461
4559  b0b8 3530001e      	mov	_alpha+3,#48
4560  b0bc               L7461:
4561                     ; 3193 	    Pending_config_settings[0] = (uint8_t)alpha[0];
4563  b0bc 55001b0113    	mov	_Pending_config_settings,_alpha
4564                     ; 3194             Pending_config_settings[1] = (uint8_t)alpha[1];
4566  b0c1 55001c0114    	mov	_Pending_config_settings+1,_alpha+1
4567                     ; 3195             Pending_config_settings[2] = (uint8_t)alpha[2];
4569  b0c6 55001d0115    	mov	_Pending_config_settings+2,_alpha+2
4570                     ; 3196             Pending_config_settings[3] = (uint8_t)alpha[3];
4572  b0cb 55001e0116    	mov	_Pending_config_settings+3,_alpha+3
4573                     ; 3197             Pending_config_settings[4] = '0';
4575  b0d0 35300117      	mov	_Pending_config_settings+4,#48
4576                     ; 3198             Pending_config_settings[5] = '0';
4578  b0d4 35300118      	mov	_Pending_config_settings+5,#48
4579                     ; 3200             if (nBytes == 0) {
4581  b0d8 1e09          	ldw	x,(OFST+5,sp)
4582  b0da 2618          	jrne	L5151
4583                     ; 3203 	      pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4585  b0dc a605          	ld	a,#5
4586  b0de c7005a        	ld	_saved_parsestate,a
4587  b0e1 1e0b          	ldw	x,(OFST+7,sp)
4588  b0e3 e70a          	ld	(10,x),a
4589                     ; 3204 	      break;
4591  b0e5 205c          	jra	L3041
4592  b0e7               L1061:
4593                     ; 3211 	  else if (pSocket->ParseCmd == 'z') {
4595  b0e7 a17a          	cp	a,#122
4596  b0e9 2609          	jrne	L5151
4597                     ; 3236 	    nBytes = 0;
4599  b0eb 5f            	clrw	x
4600  b0ec 1f09          	ldw	(OFST+5,sp),x
4601                     ; 3237 	    pSocket->nParseLeft = 0;
4603  b0ee 1e0b          	ldw	x,(OFST+7,sp)
4604  b0f0 6f06          	clr	(6,x)
4605                     ; 3238             break; // Break out of the while loop. We're done with POST.
4607  b0f2 204f          	jra	L3041
4608  b0f4               L5151:
4609                     ; 3249           pSocket->ParseState = saved_parsestate = PARSE_DELIM;
4611  b0f4 a605          	ld	a,#5
4612  b0f6 c7005a        	ld	_saved_parsestate,a
4613  b0f9 1e0b          	ldw	x,(OFST+7,sp)
4614  b0fb e70a          	ld	(10,x),a
4615                     ; 3251           if (pSocket->nParseLeft < 30) {
4617  b0fd e606          	ld	a,(6,x)
4618  b0ff a11e          	cp	a,#30
4619  b101 2503ccacc2    	jruge	L1041
4620                     ; 3266 	    if (pSocket->nParseLeftAddl > 0) {
4622  b106 6d07          	tnz	(7,x)
4623  b108 27f9          	jreq	L1041
4624                     ; 3267 	      pSocket->nParseLeft += pSocket->nParseLeftAddl;
4626  b10a eb07          	add	a,(7,x)
4627  b10c e706          	ld	(6,x),a
4628                     ; 3268 	      pSocket->nParseLeftAddl = 0;
4630  b10e 6f07          	clr	(7,x)
4631                     ; 3269 	      saved_nparseleft = pSocket->nParseLeft;
4633  b110 c70059        	ld	_saved_nparseleft,a
4634  b113 ccacc2        	jra	L1041
4635  b116               L1051:
4636                     ; 3274         else if (pSocket->ParseState == PARSE_DELIM) {
4638  b116 a105          	cp	a,#5
4639  b118 26f9          	jrne	L1041
4640                     ; 3275           if (pSocket->nParseLeft > 0) {
4642  b11a e606          	ld	a,(6,x)
4643  b11c 2720          	jreq	L7661
4644                     ; 3278             pSocket->ParseState = saved_parsestate = PARSE_CMD;
4646  b11e 725f005a      	clr	_saved_parsestate
4647  b122 6f0a          	clr	(10,x)
4648                     ; 3279             pSocket->nParseLeft--;
4650  b124 6a06          	dec	(6,x)
4651                     ; 3280             saved_nparseleft = pSocket->nParseLeft;
4653  b126 e606          	ld	a,(6,x)
4654  b128 c70059        	ld	_saved_nparseleft,a
4655                     ; 3281             pBuffer++;
4657  b12b 1e05          	ldw	x,(OFST+1,sp)
4658  b12d 5c            	incw	x
4659  b12e 1f05          	ldw	(OFST+1,sp),x
4660                     ; 3282 	    nBytes--;
4662  b130 1e09          	ldw	x,(OFST+5,sp)
4663  b132 5a            	decw	x
4664  b133 1f09          	ldw	(OFST+5,sp),x
4665                     ; 3284 	    clear_saved_postpartial_all();
4667  b135 cdb486        	call	_clear_saved_postpartial_all
4669                     ; 3288             if (nBytes == 0) {
4671  b138 1e09          	ldw	x,(OFST+5,sp)
4672  b13a 26d7          	jrne	L1041
4673                     ; 3289 	      break; // Hit end of fragment but still have more to parse in
4675  b13c 2005          	jra	L3041
4676  b13e               L7661:
4677                     ; 3299             pSocket->nParseLeft = 0; // End the parsing
4679  b13e e706          	ld	(6,x),a
4680                     ; 3300 	    nBytes = 0;
4682  b140 5f            	clrw	x
4683  b141 1f09          	ldw	(OFST+5,sp),x
4684                     ; 3301 	    break; // Exit parsing
4685  b143               L3041:
4686                     ; 3328       if (pSocket->nParseLeft == 0) {
4688  b143 1e0b          	ldw	x,(OFST+7,sp)
4689  b145 e606          	ld	a,(6,x)
4690  b147 264e          	jrne	L5761
4691                     ; 3331 	saved_nstate = STATE_NULL;
4693  b149 357f005b      	mov	_saved_nstate,#127
4694                     ; 3332 	saved_parsestate = PARSE_CMD;
4696  b14d c7005a        	ld	_saved_parsestate,a
4697                     ; 3333         saved_nparseleft = 0;
4699  b150 c70059        	ld	_saved_nparseleft,a
4700                     ; 3334         saved_newlines = 0;
4702  b153 c70028        	ld	_saved_newlines,a
4703                     ; 3335 	for (i=0; i<24; i++) saved_postpartial_previous[i] = saved_postpartial[i] = '\0';
4705  b156 6b04          	ld	(OFST+0,sp),a
4707  b158               L7761:
4710  b158 5f            	clrw	x
4711  b159 97            	ld	xl,a
4712  b15a 724f0041      	clr	(_saved_postpartial,x)
4713  b15e 5f            	clrw	x
4714  b15f 97            	ld	xl,a
4715  b160 724f0029      	clr	(_saved_postpartial_previous,x)
4718  b164 0c04          	inc	(OFST+0,sp)
4722  b166 7b04          	ld	a,(OFST+0,sp)
4723  b168 a118          	cp	a,#24
4724  b16a 25ec          	jrult	L7761
4725                     ; 3341 	parse_complete = 1;
4727  b16c 350100fa      	mov	_parse_complete,#1
4728                     ; 3342 	pSocket->nState = STATE_SENDHEADER;
4730  b170 1e0b          	ldw	x,(OFST+7,sp)
4731  b172 a60b          	ld	a,#11
4732  b174 f7            	ld	(x),a
4733                     ; 3354         if (current_webpage == WEBPAGE_IOCONTROL) {
4735  b175 c6001a        	ld	a,_current_webpage
4736  b178 260c          	jrne	L5071
4737                     ; 3355           pSocket->pData = g_HtmlPageIOControl;
4739  b17a 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4740  b17e ef01          	ldw	(1,x),y
4741                     ; 3356           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4743  b180 90ae0c06      	ldw	y,#3078
4744  b184 ef03          	ldw	(3,x),y
4745  b186               L5071:
4746                     ; 3358         if (current_webpage == WEBPAGE_CONFIGURATION) {
4748  b186 4a            	dec	a
4749  b187 2612          	jrne	L7731
4750                     ; 3359           pSocket->pData = g_HtmlPageConfiguration;
4752  b189 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
4753  b18d ef01          	ldw	(1,x),y
4754                     ; 3360           pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
4756  b18f 90ae0c31      	ldw	y,#3121
4757  b193 ef03          	ldw	(3,x),y
4758  b195 2004          	jra	L7731
4759  b197               L5761:
4760                     ; 3380 	uip_len = 0;
4762  b197 5f            	clrw	x
4763  b198 cf0363        	ldw	_uip_len,x
4764  b19b               L7731:
4765                     ; 3384     if (pSocket->nState == STATE_PARSEGET) {
4767  b19b 1e0b          	ldw	x,(OFST+7,sp)
4768  b19d f6            	ld	a,(x)
4769  b19e a10d          	cp	a,#13
4770  b1a0 2703ccb39a    	jrne	L3171
4772  b1a5 ccb393        	jra	L7171
4773  b1a8               L5171:
4774                     ; 3413         if (pSocket->ParseState == PARSE_SLASH1) {
4776  b1a8 1e0b          	ldw	x,(OFST+7,sp)
4777  b1aa e60a          	ld	a,(10,x)
4778  b1ac a106          	cp	a,#6
4779  b1ae 263c          	jrne	L3271
4780                     ; 3416           pSocket->ParseCmd = *pBuffer;
4782  b1b0 1e05          	ldw	x,(OFST+1,sp)
4783  b1b2 f6            	ld	a,(x)
4784  b1b3 1e0b          	ldw	x,(OFST+7,sp)
4785  b1b5 e708          	ld	(8,x),a
4786                     ; 3417           pSocket->nParseLeft--;
4788  b1b7 6a06          	dec	(6,x)
4789                     ; 3418           pBuffer++;
4791  b1b9 1e05          	ldw	x,(OFST+1,sp)
4792  b1bb 5c            	incw	x
4793  b1bc 1f05          	ldw	(OFST+1,sp),x
4794                     ; 3419 	  nBytes--;
4796  b1be 1e09          	ldw	x,(OFST+5,sp)
4797  b1c0 5a            	decw	x
4798  b1c1 1f09          	ldw	(OFST+5,sp),x
4799                     ; 3420 	  if (pSocket->ParseCmd == (uint8_t)0x2f) { // Compare to '/'
4801  b1c3 1e0b          	ldw	x,(OFST+7,sp)
4802  b1c5 e608          	ld	a,(8,x)
4803  b1c7 a12f          	cp	a,#47
4804  b1c9 2605          	jrne	L5271
4805                     ; 3421 	    pSocket->ParseState = PARSE_NUM10;
4807  b1cb a601          	ld	a,#1
4809  b1cd ccb266        	jp	LC018
4810  b1d0               L5271:
4811                     ; 3425 	    current_webpage = WEBPAGE_IOCONTROL;
4813  b1d0 725f001a      	clr	_current_webpage
4814                     ; 3426             pSocket->pData = g_HtmlPageIOControl;
4816  b1d4 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4817  b1d8 ef01          	ldw	(1,x),y
4818                     ; 3427             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4820  b1da 90ae0c06      	ldw	y,#3078
4821  b1de ef03          	ldw	(3,x),y
4822                     ; 3428             pSocket->nParseLeft = 0; // This will cause the while() to exit
4824  b1e0 6f06          	clr	(6,x)
4825                     ; 3430             pSocket->nState = STATE_CONNECTED;
4827  b1e2 7f            	clr	(x)
4828                     ; 3431             pSocket->nPrevBytes = 0xFFFF;
4830  b1e3 90aeffff      	ldw	y,#65535
4831  b1e7 ef0b          	ldw	(11,x),y
4832  b1e9 ccb382        	jra	L1371
4833  b1ec               L3271:
4834                     ; 3435         else if (pSocket->ParseState == PARSE_NUM10) {
4836  b1ec a101          	cp	a,#1
4837  b1ee 2640          	jrne	L3371
4838                     ; 3440 	  if (*pBuffer == ' ') {
4840  b1f0 1e05          	ldw	x,(OFST+1,sp)
4841  b1f2 f6            	ld	a,(x)
4842  b1f3 a120          	cp	a,#32
4843  b1f5 261e          	jrne	L5371
4844                     ; 3441 	    current_webpage = WEBPAGE_IOCONTROL;
4846  b1f7 725f001a      	clr	_current_webpage
4847                     ; 3442             pSocket->pData = g_HtmlPageIOControl;
4849  b1fb 1e0b          	ldw	x,(OFST+7,sp)
4850  b1fd 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
4851  b201 ef01          	ldw	(1,x),y
4852                     ; 3443             pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
4854  b203 90ae0c06      	ldw	y,#3078
4855  b207 ef03          	ldw	(3,x),y
4856                     ; 3444             pSocket->nParseLeft = 0;
4858  b209 6f06          	clr	(6,x)
4859                     ; 3446             pSocket->nState = STATE_CONNECTED;
4861  b20b 7f            	clr	(x)
4862                     ; 3447             pSocket->nPrevBytes = 0xFFFF;
4864  b20c 90aeffff      	ldw	y,#65535
4865  b210 ef0b          	ldw	(11,x),y
4867  b212 ccb382        	jra	L1371
4868  b215               L5371:
4869                     ; 3451 	  else if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
4871  b215 a130          	cp	a,#48
4872  b217 2547          	jrult	L1571
4874  b219 a13a          	cp	a,#58
4875  b21b 2443          	jruge	L1571
4876                     ; 3453             pSocket->ParseNum = (uint8_t)((*pBuffer - '0') * 10);
4878  b21d 97            	ld	xl,a
4879  b21e a60a          	ld	a,#10
4880  b220 42            	mul	x,a
4881  b221 9f            	ld	a,xl
4882  b222 1e0b          	ldw	x,(OFST+7,sp)
4883  b224 a0e0          	sub	a,#224
4884  b226 e709          	ld	(9,x),a
4885                     ; 3454 	    pSocket->ParseState = PARSE_NUM1;
4887  b228 a602          	ld	a,#2
4888  b22a e70a          	ld	(10,x),a
4889                     ; 3455             pSocket->nParseLeft--;
4891  b22c 6a06          	dec	(6,x)
4892                     ; 3456             pBuffer++;
4893                     ; 3457 	    nBytes--;
4895  b22e 2023          	jp	LC020
4896                     ; 3462             pSocket->nParseLeft = 0;
4897                     ; 3463             pSocket->ParseState = PARSE_FAIL;
4898  b230               L3371:
4899                     ; 3468         else if (pSocket->ParseState == PARSE_NUM1) {
4901  b230 a102          	cp	a,#2
4902  b232 2637          	jrne	L7471
4903                     ; 3469 	  if (*pBuffer >= '0' && *pBuffer <= '9') { // Check for user entry error
4905  b234 1e05          	ldw	x,(OFST+1,sp)
4906  b236 f6            	ld	a,(x)
4907  b237 a130          	cp	a,#48
4908  b239 2525          	jrult	L1571
4910  b23b a13a          	cp	a,#58
4911  b23d 2421          	jruge	L1571
4912                     ; 3471             pSocket->ParseNum += (uint8_t)(*pBuffer - '0');
4914  b23f 1605          	ldw	y,(OFST+1,sp)
4915  b241 1e0b          	ldw	x,(OFST+7,sp)
4916  b243 90f6          	ld	a,(y)
4917  b245 a030          	sub	a,#48
4918  b247 eb09          	add	a,(9,x)
4919  b249 e709          	ld	(9,x),a
4920                     ; 3472             pSocket->ParseState = PARSE_VAL;
4922  b24b a604          	ld	a,#4
4923  b24d e70a          	ld	(10,x),a
4924                     ; 3473             pSocket->nParseLeft = 1; // Set to 1 so PARSE_VAL will be called
4926  b24f a601          	ld	a,#1
4927  b251 e706          	ld	(6,x),a
4928                     ; 3474             pBuffer++;
4930                     ; 3475 	    nBytes--;
4932  b253               LC020:
4934  b253 1e05          	ldw	x,(OFST+1,sp)
4935  b255 5c            	incw	x
4936  b256 1f05          	ldw	(OFST+1,sp),x
4938  b258 1e09          	ldw	x,(OFST+5,sp)
4939  b25a 5a            	decw	x
4940  b25b 1f09          	ldw	(OFST+5,sp),x
4942  b25d ccb382        	jra	L1371
4943  b260               L1571:
4944                     ; 3480             pSocket->nParseLeft = 0;
4946                     ; 3481             pSocket->ParseState = PARSE_FAIL;
4949  b260 1e0b          	ldw	x,(OFST+7,sp)
4951  b262 a607          	ld	a,#7
4952  b264 6f06          	clr	(6,x)
4953  b266               LC018:
4954  b266 e70a          	ld	(10,x),a
4955  b268 ccb382        	jra	L1371
4956  b26b               L7471:
4957                     ; 3485         else if (pSocket->ParseState == PARSE_VAL) {
4959  b26b a104          	cp	a,#4
4960  b26d 26f9          	jrne	L1371
4961                     ; 3551           switch(pSocket->ParseNum)
4963  b26f e609          	ld	a,(9,x)
4965                     ; 3726 	      break;
4966  b271 a110          	cp	a,#16
4967  b273 2407          	jruge	L012
4968  b275 5f            	clrw	x
4969  b276 97            	ld	xl,a
4970  b277 58            	sllw	x
4971  b278 de9be4        	ldw	x,(L212,x)
4972  b27b fc            	jp	(x)
4973  b27c               L012:
4974  b27c a037          	sub	a,#55
4975  b27e 2603ccb319    	jreq	L7501
4976  b283 4a            	dec	a
4977  b284 2603ccb31f    	jreq	L1601
4978  b289 a004          	sub	a,#4
4979  b28b 2603ccb324    	jreq	L3601
4980  b290 4a            	dec	a
4981  b291 2603ccb333    	jreq	L5601
4982  b296 a004          	sub	a,#4
4983  b298 2603ccb346    	jreq	L7601
4984  b29d a01a          	sub	a,#26
4985  b29f 2603ccb351    	jreq	L1701
4986  b2a4 a008          	sub	a,#8
4987  b2a6 2603ccb357    	jreq	L3701
4988  b2ab ccb367        	jra	L5701
4989  b2ae               L7101:
4990                     ; 3599 	    case 0:  IO_8to1 &= (uint8_t)(~0x01);  break; // Relay-01 OFF
4992  b2ae 72110161      	bres	_IO_8to1,#0
4995  b2b2 ccb37e        	jra	L3671
4996  b2b5               L1201:
4997                     ; 3600 	    case 1:  IO_8to1 |= (uint8_t)0x01;     break; // Relay-01 ON
4999  b2b5 72100161      	bset	_IO_8to1,#0
5002  b2b9 ccb37e        	jra	L3671
5003  b2bc               L3201:
5004                     ; 3601 	    case 2:  IO_8to1 &= (uint8_t)(~0x02);  break; // Relay-02 OFF
5006  b2bc 72130161      	bres	_IO_8to1,#1
5009  b2c0 ccb37e        	jra	L3671
5010  b2c3               L5201:
5011                     ; 3602 	    case 3:  IO_8to1 |= (uint8_t)0x02;     break; // Relay-02 ON
5013  b2c3 72120161      	bset	_IO_8to1,#1
5016  b2c7 ccb37e        	jra	L3671
5017  b2ca               L7201:
5018                     ; 3603 	    case 4:  IO_8to1 &= (uint8_t)(~0x04);  break; // Relay-03 OFF
5020  b2ca 72150161      	bres	_IO_8to1,#2
5023  b2ce ccb37e        	jra	L3671
5024  b2d1               L1301:
5025                     ; 3604 	    case 5:  IO_8to1 |= (uint8_t)0x04;     break; // Relay-03 ON
5027  b2d1 72140161      	bset	_IO_8to1,#2
5030  b2d5 ccb37e        	jra	L3671
5031  b2d8               L3301:
5032                     ; 3605 	    case 6:  IO_8to1 &= (uint8_t)(~0x08);  break; // Relay-04 OFF
5034  b2d8 72170161      	bres	_IO_8to1,#3
5037  b2dc ccb37e        	jra	L3671
5038  b2df               L5301:
5039                     ; 3606 	    case 7:  IO_8to1 |= (uint8_t)0x08;     break; // Relay-04 ON
5041  b2df 72160161      	bset	_IO_8to1,#3
5044  b2e3 ccb37e        	jra	L3671
5045  b2e6               L7301:
5046                     ; 3607 	    case 8:  IO_8to1 &= (uint8_t)(~0x10);  break; // Relay-05 OFF
5048  b2e6 72190161      	bres	_IO_8to1,#4
5051  b2ea ccb37e        	jra	L3671
5052  b2ed               L1401:
5053                     ; 3608 	    case 9:  IO_8to1 |= (uint8_t)0x10;     break; // Relay-05 ON
5055  b2ed 72180161      	bset	_IO_8to1,#4
5058  b2f1 ccb37e        	jra	L3671
5059  b2f4               L3401:
5060                     ; 3609 	    case 10: IO_8to1 &= (uint8_t)(~0x20);  break; // Relay-06 OFF
5062  b2f4 721b0161      	bres	_IO_8to1,#5
5065  b2f8 ccb37e        	jra	L3671
5066  b2fb               L5401:
5067                     ; 3610 	    case 11: IO_8to1 |= (uint8_t)0x20;     break; // Relay-06 ON
5069  b2fb 721a0161      	bset	_IO_8to1,#5
5072  b2ff 207d          	jra	L3671
5073  b301               L7401:
5074                     ; 3611 	    case 12: IO_8to1 &= (uint8_t)(~0x40);  break; // Relay-07 OFF
5076  b301 721d0161      	bres	_IO_8to1,#6
5079  b305 2077          	jra	L3671
5080  b307               L1501:
5081                     ; 3612 	    case 13: IO_8to1 |= (uint8_t)0x40;     break; // Relay-07 ON
5083  b307 721c0161      	bset	_IO_8to1,#6
5086  b30b 2071          	jra	L3671
5087  b30d               L3501:
5088                     ; 3613 	    case 14: IO_8to1 &= (uint8_t)(~0x80);  break; // Relay-08 OFF
5090  b30d 721f0161      	bres	_IO_8to1,#7
5093  b311 206b          	jra	L3671
5094  b313               L5501:
5095                     ; 3614 	    case 15: IO_8to1 |= (uint8_t)0x80;     break; // Relay-08 ON
5097  b313 721e0161      	bset	_IO_8to1,#7
5100  b317 2065          	jra	L3671
5101  b319               L7501:
5102                     ; 3616 	    case 55:
5102                     ; 3617   	      IO_8to1 = (uint8_t)0xff; // Relays 1-8 ON
5104  b319 35ff0161      	mov	_IO_8to1,#255
5105                     ; 3618 	      break;
5107  b31d 205f          	jra	L3671
5108  b31f               L1601:
5109                     ; 3620 	    case 56:
5109                     ; 3621               IO_8to1 = (uint8_t)0x00; // Relays 1-8 OFF
5111  b31f c70161        	ld	_IO_8to1,a
5112                     ; 3622 	      break;
5114  b322 205a          	jra	L3671
5115  b324               L3601:
5116                     ; 3629 	    case 60: // Show IO Control page
5116                     ; 3630 	      current_webpage = WEBPAGE_IOCONTROL;
5118  b324 c7001a        	ld	_current_webpage,a
5119                     ; 3631               pSocket->pData = g_HtmlPageIOControl;
5121  b327 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5122  b32b ef01          	ldw	(1,x),y
5123                     ; 3632               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5125  b32d 90ae0c06      	ldw	y,#3078
5126                     ; 3633               pSocket->nState = STATE_CONNECTED;
5127                     ; 3634               pSocket->nPrevBytes = 0xFFFF;
5128                     ; 3635 	      break;
5130  b331 200e          	jp	LC017
5131  b333               L5601:
5132                     ; 3637 	    case 61: // Show Configuration page
5132                     ; 3638 	      current_webpage = WEBPAGE_CONFIGURATION;
5134  b333 3501001a      	mov	_current_webpage,#1
5135                     ; 3639               pSocket->pData = g_HtmlPageConfiguration;
5137  b337 90ae8c8f      	ldw	y,#L51_g_HtmlPageConfiguration
5138  b33b ef01          	ldw	(1,x),y
5139                     ; 3640               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageConfiguration) - 1);
5141  b33d 90ae0c31      	ldw	y,#3121
5142                     ; 3641               pSocket->nState = STATE_CONNECTED;
5144  b341               LC017:
5145  b341 ef03          	ldw	(3,x),y
5148  b343 f7            	ld	(x),a
5149                     ; 3642               pSocket->nPrevBytes = 0xFFFF;
5150                     ; 3643 	      break;
5152  b344 2032          	jp	LC016
5153  b346               L7601:
5154                     ; 3663 	    case 65: // Flash LED for diagnostics
5154                     ; 3664 	      // XXXXXXXXXXXXXXXXXXXXXX
5154                     ; 3665 	      // XXXXXXXXXXXXXXXXXXXXXX
5154                     ; 3666 	      // XXXXXXXXXXXXXXXXXXXXXX
5154                     ; 3667 	      debugflash();
5156  b346 cdcc1c        	call	_debugflash
5158                     ; 3668 	      debugflash();
5160  b349 cdcc1c        	call	_debugflash
5162                     ; 3669 	      debugflash();
5164  b34c cdcc1c        	call	_debugflash
5166                     ; 3673 	      break;
5168  b34f 202d          	jra	L3671
5169  b351               L1701:
5170                     ; 3708 	    case 91: // Reboot
5170                     ; 3709 	      user_reboot_request = 1;
5172  b351 350100fe      	mov	_user_reboot_request,#1
5173                     ; 3710 	      break;
5175  b355 2027          	jra	L3671
5176  b357               L3701:
5177                     ; 3712             case 99: // Show simplified IO state page
5177                     ; 3713 	      current_webpage = WEBPAGE_RSTATE;
5179  b357 3506001a      	mov	_current_webpage,#6
5180                     ; 3714               pSocket->pData = g_HtmlPageRstate;
5182  b35b 90ae98c1      	ldw	y,#L71_g_HtmlPageRstate
5183  b35f ef01          	ldw	(1,x),y
5184                     ; 3715               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageRstate) - 1);
5186  b361 90ae0087      	ldw	y,#135
5187                     ; 3716               pSocket->nState = STATE_CONNECTED;
5188                     ; 3717               pSocket->nPrevBytes = 0xFFFF;
5189                     ; 3718 	      break;
5191  b365 20da          	jp	LC017
5192  b367               L5701:
5193                     ; 3720 	    default: // Show IO Control page
5193                     ; 3721 	      current_webpage = WEBPAGE_IOCONTROL;
5195  b367 725f001a      	clr	_current_webpage
5196                     ; 3722               pSocket->pData = g_HtmlPageIOControl;
5198  b36b 90ae8088      	ldw	y,#L31_g_HtmlPageIOControl
5199  b36f ef01          	ldw	(1,x),y
5200                     ; 3723               pSocket->nDataLeft = (uint16_t)(sizeof(g_HtmlPageIOControl) - 1);
5202  b371 90ae0c06      	ldw	y,#3078
5203  b375 ef03          	ldw	(3,x),y
5204                     ; 3724               pSocket->nState = STATE_CONNECTED;
5206  b377 7f            	clr	(x)
5207                     ; 3725               pSocket->nPrevBytes = 0xFFFF;
5209  b378               LC016:
5213  b378 90aeffff      	ldw	y,#65535
5214  b37c ef0b          	ldw	(11,x),y
5215                     ; 3726 	      break;
5217  b37e               L3671:
5218                     ; 3728           pSocket->nParseLeft = 0;
5220  b37e 1e0b          	ldw	x,(OFST+7,sp)
5221  b380 6f06          	clr	(6,x)
5222  b382               L1371:
5223                     ; 3731         if (pSocket->ParseState == PARSE_FAIL) {
5225  b382 1e0b          	ldw	x,(OFST+7,sp)
5226  b384 e60a          	ld	a,(10,x)
5227  b386 a107          	cp	a,#7
5228                     ; 3736           pSocket->nState = STATE_SENDHEADER;
5229                     ; 3737 	  break;
5231  b388 2704          	jreq	LC021
5232                     ; 3740         if (pSocket->nParseLeft == 0) {
5234  b38a e606          	ld	a,(6,x)
5235  b38c 2605          	jrne	L7171
5236                     ; 3743           pSocket->nState = STATE_SENDHEADER;
5238  b38e               LC021:
5240  b38e a60b          	ld	a,#11
5241  b390 f7            	ld	(x),a
5242                     ; 3744           break;
5244  b391 2007          	jra	L3171
5245  b393               L7171:
5246                     ; 3412       while (nBytes != 0) {
5248  b393 1e09          	ldw	x,(OFST+5,sp)
5249  b395 2703ccb1a8    	jrne	L5171
5250  b39a               L3171:
5251                     ; 3749     if (pSocket->nState == STATE_SENDHEADER) {
5253  b39a 1e0b          	ldw	x,(OFST+7,sp)
5254  b39c f6            	ld	a,(x)
5255  b39d a10b          	cp	a,#11
5256  b39f 261c          	jrne	L7701
5257                     ; 3755       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5259  b3a1 cda27d        	call	_adjust_template_size
5261  b3a4 89            	pushw	x
5262  b3a5 ce0365        	ldw	x,_uip_appdata
5263  b3a8 cda3d3        	call	L5_CopyHttpHeader
5265  b3ab 5b02          	addw	sp,#2
5266  b3ad 89            	pushw	x
5267  b3ae ce0365        	ldw	x,_uip_appdata
5268  b3b1 cdee96        	call	_uip_send
5270  b3b4 85            	popw	x
5271                     ; 3756       pSocket->nState = STATE_SENDDATA;
5273  b3b5 1e0b          	ldw	x,(OFST+7,sp)
5274  b3b7 a60c          	ld	a,#12
5275  b3b9 f7            	ld	(x),a
5276                     ; 3757       return;
5278  b3ba ccab3d        	jra	L042
5279  b3bd               L7701:
5280                     ; 3760     senddata:
5280                     ; 3761     if (pSocket->nState == STATE_SENDDATA) {
5282  b3bd 1e0b          	ldw	x,(OFST+7,sp)
5283  b3bf f6            	ld	a,(x)
5284  b3c0 a10c          	cp	a,#12
5285  b3c2 26f6          	jrne	L042
5286                     ; 3768       if (pSocket->nDataLeft == 0) {
5288  b3c4 e604          	ld	a,(4,x)
5289  b3c6 ea03          	or	a,(3,x)
5290  b3c8 2605          	jrne	L5771
5291                     ; 3770         nBufSize = 0;
5293  b3ca 5f            	clrw	x
5294  b3cb 1f02          	ldw	(OFST-2,sp),x
5297  b3cd 202f          	jra	L7771
5298  b3cf               L5771:
5299                     ; 3773         pSocket->nPrevBytes = pSocket->nDataLeft;
5301  b3cf 9093          	ldw	y,x
5302  b3d1 90ee03        	ldw	y,(3,y)
5303  b3d4 ef0b          	ldw	(11,x),y
5304                     ; 3774         nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5306  b3d6 ce0361        	ldw	x,_uip_conn
5307  b3d9 ee12          	ldw	x,(18,x)
5308  b3db 89            	pushw	x
5309  b3dc 1e0d          	ldw	x,(OFST+9,sp)
5310  b3de 1c0003        	addw	x,#3
5311  b3e1 89            	pushw	x
5312  b3e2 1e0f          	ldw	x,(OFST+11,sp)
5313  b3e4 5c            	incw	x
5314  b3e5 89            	pushw	x
5315  b3e6 ce0365        	ldw	x,_uip_appdata
5316  b3e9 cda49f        	call	L7_CopyHttpData
5318  b3ec 5b06          	addw	sp,#6
5319  b3ee 1f02          	ldw	(OFST-2,sp),x
5321                     ; 3775         pSocket->nPrevBytes -= pSocket->nDataLeft;
5323  b3f0 1e0b          	ldw	x,(OFST+7,sp)
5324  b3f2 e60c          	ld	a,(12,x)
5325  b3f4 e004          	sub	a,(4,x)
5326  b3f6 e70c          	ld	(12,x),a
5327  b3f8 e60b          	ld	a,(11,x)
5328  b3fa e203          	sbc	a,(3,x)
5329  b3fc e70b          	ld	(11,x),a
5330  b3fe               L7771:
5331                     ; 3778       if (nBufSize == 0) {
5333  b3fe 1e02          	ldw	x,(OFST-2,sp)
5334  b400 2621          	jrne	LC013
5335                     ; 3780         uip_close();
5337  b402               LC014:
5339  b402 351002b8      	mov	_uip_flags,#16
5341  b406 ccab3d        	jra	L042
5342                     ; 3784         uip_send(uip_appdata, nBufSize);
5344                     ; 3786       return;
5346  b409               L5021:
5347                     ; 3790   else if (uip_rexmit()) {
5349  b409 720502b875    	btjf	_uip_flags,#2,L3021
5350                     ; 3791     if (pSocket->nPrevBytes == 0xFFFF) {
5352  b40e 160b          	ldw	y,(OFST+7,sp)
5353  b410 90ee0b        	ldw	y,(11,y)
5354  b413 905c          	incw	y
5355  b415 2617          	jrne	L1102
5356                     ; 3793       uip_send(uip_appdata, CopyHttpHeader(uip_appdata, adjust_template_size()));
5358  b417 cda27d        	call	_adjust_template_size
5360  b41a 89            	pushw	x
5361  b41b ce0365        	ldw	x,_uip_appdata
5362  b41e cda3d3        	call	L5_CopyHttpHeader
5364  b421 5b02          	addw	sp,#2
5366  b423               LC013:
5368  b423 89            	pushw	x
5369  b424 ce0365        	ldw	x,_uip_appdata
5370  b427 cdee96        	call	_uip_send
5371  b42a 85            	popw	x
5373  b42b ccab3d        	jra	L042
5374  b42e               L1102:
5375                     ; 3796       pSocket->pData -= pSocket->nPrevBytes;
5377  b42e 1e0b          	ldw	x,(OFST+7,sp)
5378  b430 e602          	ld	a,(2,x)
5379  b432 e00c          	sub	a,(12,x)
5380  b434 e702          	ld	(2,x),a
5381  b436 e601          	ld	a,(1,x)
5382  b438 e20b          	sbc	a,(11,x)
5383  b43a e701          	ld	(1,x),a
5384                     ; 3797       pSocket->nDataLeft += pSocket->nPrevBytes;
5386  b43c e604          	ld	a,(4,x)
5387  b43e eb0c          	add	a,(12,x)
5388  b440 e704          	ld	(4,x),a
5389  b442 e603          	ld	a,(3,x)
5390  b444 e90b          	adc	a,(11,x)
5391                     ; 3798       pSocket->nPrevBytes = pSocket->nDataLeft;
5393  b446 9093          	ldw	y,x
5394  b448 e703          	ld	(3,x),a
5395  b44a 90ee03        	ldw	y,(3,y)
5396  b44d ef0b          	ldw	(11,x),y
5397                     ; 3799       nBufSize = CopyHttpData(uip_appdata, &pSocket->pData, &pSocket->nDataLeft, uip_mss());
5399  b44f ce0361        	ldw	x,_uip_conn
5400  b452 ee12          	ldw	x,(18,x)
5401  b454 89            	pushw	x
5402  b455 1e0d          	ldw	x,(OFST+9,sp)
5403  b457 1c0003        	addw	x,#3
5404  b45a 89            	pushw	x
5405  b45b 1e0f          	ldw	x,(OFST+11,sp)
5406  b45d 5c            	incw	x
5407  b45e 89            	pushw	x
5408  b45f ce0365        	ldw	x,_uip_appdata
5409  b462 cda49f        	call	L7_CopyHttpData
5411  b465 5b06          	addw	sp,#6
5412  b467 1f02          	ldw	(OFST-2,sp),x
5414                     ; 3800       pSocket->nPrevBytes -= pSocket->nDataLeft;
5416  b469 1e0b          	ldw	x,(OFST+7,sp)
5417  b46b e60c          	ld	a,(12,x)
5418  b46d e004          	sub	a,(4,x)
5419  b46f e70c          	ld	(12,x),a
5420  b471 e60b          	ld	a,(11,x)
5421  b473 e203          	sbc	a,(3,x)
5422  b475 e70b          	ld	(11,x),a
5423                     ; 3801       if (nBufSize == 0) {
5425  b477 1e02          	ldw	x,(OFST-2,sp)
5426                     ; 3803         uip_close();
5428  b479 2787          	jreq	LC014
5429                     ; 3807         uip_send(uip_appdata, nBufSize);
5431  b47b 89            	pushw	x
5432  b47c ce0365        	ldw	x,_uip_appdata
5433  b47f cdee96        	call	_uip_send
5435  b482 85            	popw	x
5436                     ; 3810     return;
5438  b483               L3021:
5439                     ; 3812 }
5441  b483 ccab3d        	jra	L042
5475                     ; 3815 void clear_saved_postpartial_all(void)
5475                     ; 3816 {
5476                     .text:	section	.text,new
5477  b486               _clear_saved_postpartial_all:
5479  b486 88            	push	a
5480       00000001      OFST:	set	1
5483                     ; 3818   for (i=0; i<24; i++) saved_postpartial[i] = '\0';
5485  b487 4f            	clr	a
5486  b488 6b01          	ld	(OFST+0,sp),a
5488  b48a               L5302:
5491  b48a 5f            	clrw	x
5492  b48b 97            	ld	xl,a
5493  b48c 724f0041      	clr	(_saved_postpartial,x)
5496  b490 0c01          	inc	(OFST+0,sp)
5500  b492 7b01          	ld	a,(OFST+0,sp)
5501  b494 a118          	cp	a,#24
5502  b496 25f2          	jrult	L5302
5503                     ; 3819 }
5506  b498 84            	pop	a
5507  b499 81            	ret	
5541                     ; 3822 void clear_saved_postpartial_data(void)
5541                     ; 3823 {
5542                     .text:	section	.text,new
5543  b49a               _clear_saved_postpartial_data:
5545  b49a 88            	push	a
5546       00000001      OFST:	set	1
5549                     ; 3825   for (i=4; i<24; i++) saved_postpartial[i] = '\0';
5551  b49b a604          	ld	a,#4
5552  b49d 6b01          	ld	(OFST+0,sp),a
5554  b49f               L7502:
5557  b49f 5f            	clrw	x
5558  b4a0 97            	ld	xl,a
5559  b4a1 724f0041      	clr	(_saved_postpartial,x)
5562  b4a5 0c01          	inc	(OFST+0,sp)
5566  b4a7 7b01          	ld	a,(OFST+0,sp)
5567  b4a9 a118          	cp	a,#24
5568  b4ab 25f2          	jrult	L7502
5569                     ; 3826 }
5572  b4ad 84            	pop	a
5573  b4ae 81            	ret	
5607                     ; 3829 void clear_saved_postpartial_previous(void)
5607                     ; 3830 {
5608                     .text:	section	.text,new
5609                     _clear_saved_postpartial_previous:
5611                     	push	a
5612       00000001      OFST:	set	1
5615                     ; 3832   for (i=0; i<24; i++) saved_postpartial_previous[i] = '\0';
5617                     	clr	a
5618                     	ld	(OFST+0,sp),a
5620                     L1012:
5623                     	clrw	x
5624                     	ld	xl,a
5625                     	clr	(_saved_postpartial_previous,x)
5628                     	inc	(OFST+0,sp)
5632                     	ld	a,(OFST+0,sp)
5633                     	cp	a,#24
5634                     	jrult	L1012
5635                     ; 3833 }
5638                     	pop	a
5639                     	ret	
5729                     ; 3836 void parse_POST_string(uint8_t curr_ParseCmd, uint8_t num_chars)
5729                     ; 3837 {
5730                     .text:	section	.text,new
5731  b4af               _parse_POST_string:
5733  b4af 89            	pushw	x
5734  b4b0 5217          	subw	sp,#23
5735       00000017      OFST:	set	23
5738                     ; 3860   amp_found = 0;
5740  b4b2 0f02          	clr	(OFST-21,sp)
5742                     ; 3861   for (i=0; i<20; i++) tmp_Pending[i] = '\0';
5744  b4b4 0f17          	clr	(OFST+0,sp)
5746  b4b6               L1412:
5749  b4b6 96            	ldw	x,sp
5750  b4b7 1c0003        	addw	x,#OFST-20
5751  b4ba 9f            	ld	a,xl
5752  b4bb 5e            	swapw	x
5753  b4bc 1b17          	add	a,(OFST+0,sp)
5754  b4be 2401          	jrnc	L252
5755  b4c0 5c            	incw	x
5756  b4c1               L252:
5757  b4c1 02            	rlwa	x,a
5758  b4c2 7f            	clr	(x)
5761  b4c3 0c17          	inc	(OFST+0,sp)
5765  b4c5 7b17          	ld	a,(OFST+0,sp)
5766  b4c7 a114          	cp	a,#20
5767  b4c9 25eb          	jrult	L1412
5768                     ; 3863   if (saved_postpartial_previous[0] == curr_ParseCmd) {
5770  b4cb c60029        	ld	a,_saved_postpartial_previous
5771  b4ce 1118          	cp	a,(OFST+1,sp)
5772  b4d0 260a          	jrne	L7412
5773                     ; 3866     saved_postpartial_previous[0] = '\0';
5775  b4d2 725f0029      	clr	_saved_postpartial_previous
5776                     ; 3872     frag_flag = 1; // frag_flag is used to manage the TCP Fragment restore
5778  b4d6 a601          	ld	a,#1
5779  b4d8 6b17          	ld	(OFST+0,sp),a
5782  b4da 2005          	jra	L1512
5783  b4dc               L7412:
5784                     ; 3876     frag_flag = 0;
5786  b4dc 0f17          	clr	(OFST+0,sp)
5788                     ; 3880     clear_saved_postpartial_data(); // Clear [4] and higher
5790  b4de cdb49a        	call	_clear_saved_postpartial_data
5792  b4e1               L1512:
5793                     ; 3901   resume = 0;
5795  b4e1 0f01          	clr	(OFST-22,sp)
5797                     ; 3902   if (frag_flag == 1) {
5799  b4e3 7b17          	ld	a,(OFST+0,sp)
5800  b4e5 4a            	dec	a
5801  b4e6 263f          	jrne	L3512
5802                     ; 3904     for (i = 0; i < num_chars; i++) {
5804  b4e8 6b17          	ld	(OFST+0,sp),a
5807  b4ea 2033          	jra	L1612
5808  b4ec               L5512:
5809                     ; 3913       if (saved_postpartial_previous[4+i] != '\0') {
5811  b4ec 5f            	clrw	x
5812  b4ed 97            	ld	xl,a
5813  b4ee 724d002d      	tnz	(_saved_postpartial_previous+4,x)
5814  b4f2 271b          	jreq	L5612
5815                     ; 3914         tmp_Pending[i] = saved_postpartial_previous[4+i];
5817  b4f4 96            	ldw	x,sp
5818  b4f5 1c0003        	addw	x,#OFST-20
5819  b4f8 9f            	ld	a,xl
5820  b4f9 5e            	swapw	x
5821  b4fa 1b17          	add	a,(OFST+0,sp)
5822  b4fc 2401          	jrnc	L652
5823  b4fe 5c            	incw	x
5824  b4ff               L652:
5825  b4ff 02            	rlwa	x,a
5826  b500 7b17          	ld	a,(OFST+0,sp)
5827  b502 905f          	clrw	y
5828  b504 9097          	ld	yl,a
5829  b506 90d6002d      	ld	a,(_saved_postpartial_previous+4,y)
5830  b50a f7            	ld	(x),a
5832                     ; 3904     for (i = 0; i < num_chars; i++) {
5834  b50b 0c17          	inc	(OFST+0,sp)
5836  b50d 2010          	jra	L1612
5837  b50f               L5612:
5838                     ; 3917         resume = i;
5840  b50f 6b01          	ld	(OFST-22,sp),a
5842                     ; 3918         break;
5843  b511               L3612:
5844                     ; 3921     if (*tmp_pBuffer == '&') {
5846  b511 72c60025      	ld	a,[_tmp_pBuffer.w]
5847  b515 a126          	cp	a,#38
5848  b517 260e          	jrne	L3512
5849                     ; 3925       amp_found = 1;
5851  b519 a601          	ld	a,#1
5852  b51b 6b02          	ld	(OFST-21,sp),a
5854  b51d 2008          	jra	L3512
5855  b51f               L1612:
5856                     ; 3904     for (i = 0; i < num_chars; i++) {
5858  b51f 7b17          	ld	a,(OFST+0,sp)
5859  b521 1119          	cp	a,(OFST+2,sp)
5860  b523 25c7          	jrult	L5512
5861  b525 20ea          	jra	L3612
5862  b527               L3512:
5863                     ; 3937   if (amp_found == 0) {
5865  b527 7b02          	ld	a,(OFST-21,sp)
5866  b529 2703ccb5b3    	jrne	L3712
5867                     ; 3938     for (i = resume; i < num_chars; i++) {
5869  b52e 7b01          	ld	a,(OFST-22,sp)
5870  b530 6b17          	ld	(OFST+0,sp),a
5873  b532 207b          	jra	L1022
5874  b534               L5712:
5875                     ; 3941       if (amp_found == 0) {
5877  b534 7b02          	ld	a,(OFST-21,sp)
5878  b536 265d          	jrne	L5022
5879                     ; 3944         if (*tmp_pBuffer == '&') {
5881  b538 72c60025      	ld	a,[_tmp_pBuffer.w]
5882  b53c a126          	cp	a,#38
5883  b53e 2606          	jrne	L7022
5884                     ; 3947           amp_found = 1;
5886  b540 a601          	ld	a,#1
5887  b542 6b02          	ld	(OFST-21,sp),a
5890  b544 204f          	jra	L5022
5891  b546               L7022:
5892                     ; 3950           tmp_Pending[i] = *tmp_pBuffer;
5894  b546 96            	ldw	x,sp
5895  b547 1c0003        	addw	x,#OFST-20
5896  b54a 9f            	ld	a,xl
5897  b54b 5e            	swapw	x
5898  b54c 1b17          	add	a,(OFST+0,sp)
5899  b54e 2401          	jrnc	L062
5900  b550 5c            	incw	x
5901  b551               L062:
5902  b551 90ce0025      	ldw	y,_tmp_pBuffer
5903  b555 02            	rlwa	x,a
5904  b556 90f6          	ld	a,(y)
5905  b558 f7            	ld	(x),a
5906                     ; 3951           saved_postpartial[4+i] = *tmp_pBuffer;
5908  b559 5f            	clrw	x
5909  b55a 7b17          	ld	a,(OFST+0,sp)
5910  b55c 97            	ld	xl,a
5911  b55d 90f6          	ld	a,(y)
5912  b55f d70045        	ld	(_saved_postpartial+4,x),a
5913                     ; 3952           tmp_nParseLeft--;
5915  b562 725a0022      	dec	_tmp_nParseLeft
5916                     ; 3953           saved_nparseleft = tmp_nParseLeft;
5918                     ; 3954           tmp_pBuffer++;
5920  b566 93            	ldw	x,y
5921  b567 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
5922  b56c 5c            	incw	x
5923  b56d cf0025        	ldw	_tmp_pBuffer,x
5924                     ; 3955           tmp_nBytes--;
5926  b570 ce0023        	ldw	x,_tmp_nBytes
5927  b573 5a            	decw	x
5928  b574 cf0023        	ldw	_tmp_nBytes,x
5929                     ; 3956           if (tmp_nBytes == 0) {
5931  b577 261c          	jrne	L5022
5932                     ; 3960             if (i == (num_chars - 1)) {
5934  b579 7b19          	ld	a,(OFST+2,sp)
5935  b57b 5f            	clrw	x
5936  b57c 97            	ld	xl,a
5937  b57d 5a            	decw	x
5938  b57e 7b17          	ld	a,(OFST+0,sp)
5939  b580 905f          	clrw	y
5940  b582 9097          	ld	yl,a
5941  b584 90bf07        	ldw	c_y,y
5942  b587 b307          	cpw	x,c_y
5943  b589 2604          	jrne	L5122
5944                     ; 3965               saved_parsestate = PARSE_DELIM;
5946  b58b 3505005a      	mov	_saved_parsestate,#5
5947  b58f               L5122:
5948                     ; 3967             break_while = 1;
5950  b58f 35010021      	mov	_break_while,#1
5951                     ; 3968             break; // This will break the for() loop. But we need to break the
5953  b593 201e          	jra	L3712
5954  b595               L5022:
5955                     ; 3974       if (amp_found == 1) {
5957  b595 7b02          	ld	a,(OFST-21,sp)
5958  b597 4a            	dec	a
5959  b598 2611          	jrne	L7122
5960                     ; 3977         tmp_Pending[i] = '\0';
5962  b59a 96            	ldw	x,sp
5963  b59b 1c0003        	addw	x,#OFST-20
5964  b59e 9f            	ld	a,xl
5965  b59f 5e            	swapw	x
5966  b5a0 1b17          	add	a,(OFST+0,sp)
5967  b5a2 2401          	jrnc	L262
5968  b5a4 5c            	incw	x
5969  b5a5               L262:
5970  b5a5 02            	rlwa	x,a
5971  b5a6 7f            	clr	(x)
5972                     ; 3986         tmp_nParseLeft--;
5974  b5a7 725a0022      	dec	_tmp_nParseLeft
5975  b5ab               L7122:
5976                     ; 3938     for (i = resume; i < num_chars; i++) {
5978  b5ab 0c17          	inc	(OFST+0,sp)
5980  b5ad 7b17          	ld	a,(OFST+0,sp)
5981  b5af               L1022:
5984  b5af 1119          	cp	a,(OFST+2,sp)
5985  b5b1 2581          	jrult	L5712
5986  b5b3               L3712:
5987                     ; 4007   if (break_while == 0) clear_saved_postpartial_all();
5989  b5b3 c60021        	ld	a,_break_while
5990  b5b6 2603          	jrne	L1222
5993  b5b8 cdb486        	call	_clear_saved_postpartial_all
5995  b5bb               L1222:
5996                     ; 4010   if (curr_ParseCmd == 'a') {
5998  b5bb 7b18          	ld	a,(OFST+1,sp)
5999  b5bd a161          	cp	a,#97
6000  b5bf 2622          	jrne	L3222
6001                     ; 4011     for (i=0; i<num_chars; i++) Pending_devicename[i] = tmp_Pending[i];
6003  b5c1 0f17          	clr	(OFST+0,sp)
6006  b5c3 2016          	jra	L1322
6007  b5c5               L5222:
6010  b5c5 5f            	clrw	x
6011  b5c6 97            	ld	xl,a
6012  b5c7 89            	pushw	x
6013  b5c8 96            	ldw	x,sp
6014  b5c9 1c0005        	addw	x,#OFST-18
6015  b5cc 9f            	ld	a,xl
6016  b5cd 5e            	swapw	x
6017  b5ce 1b19          	add	a,(OFST+2,sp)
6018  b5d0 2401          	jrnc	L662
6019  b5d2 5c            	incw	x
6020  b5d3               L662:
6021  b5d3 02            	rlwa	x,a
6022  b5d4 f6            	ld	a,(x)
6023  b5d5 85            	popw	x
6024  b5d6 d70119        	ld	(_Pending_devicename,x),a
6027  b5d9 0c17          	inc	(OFST+0,sp)
6029  b5db               L1322:
6032  b5db 7b17          	ld	a,(OFST+0,sp)
6033  b5dd 1119          	cp	a,(OFST+2,sp)
6034  b5df 25e4          	jrult	L5222
6036  b5e1 204a          	jra	L5322
6037  b5e3               L3222:
6038                     ; 4016   else if (curr_ParseCmd == 'l') {
6040  b5e3 a16c          	cp	a,#108
6041  b5e5 2622          	jrne	L7322
6042                     ; 4017     for (i=0; i<num_chars; i++) Pending_mqtt_username[i] = tmp_Pending[i];
6044  b5e7 0f17          	clr	(OFST+0,sp)
6047  b5e9 2016          	jra	L5422
6048  b5eb               L1422:
6051  b5eb 5f            	clrw	x
6052  b5ec 97            	ld	xl,a
6053  b5ed 89            	pushw	x
6054  b5ee 96            	ldw	x,sp
6055  b5ef 1c0005        	addw	x,#OFST-18
6056  b5f2 9f            	ld	a,xl
6057  b5f3 5e            	swapw	x
6058  b5f4 1b19          	add	a,(OFST+2,sp)
6059  b5f6 2401          	jrnc	L072
6060  b5f8 5c            	incw	x
6061  b5f9               L072:
6062  b5f9 02            	rlwa	x,a
6063  b5fa f6            	ld	a,(x)
6064  b5fb 85            	popw	x
6065  b5fc d70146        	ld	(_Pending_mqtt_username,x),a
6068  b5ff 0c17          	inc	(OFST+0,sp)
6070  b601               L5422:
6073  b601 7b17          	ld	a,(OFST+0,sp)
6074  b603 1119          	cp	a,(OFST+2,sp)
6075  b605 25e4          	jrult	L1422
6077  b607 2024          	jra	L5322
6078  b609               L7322:
6079                     ; 4021   else if (curr_ParseCmd == 'm') {
6081  b609 a16d          	cp	a,#109
6082  b60b 2620          	jrne	L5322
6083                     ; 4022     for (i=0; i<num_chars; i++) Pending_mqtt_password[i] = tmp_Pending[i];
6085  b60d 0f17          	clr	(OFST+0,sp)
6088  b60f 2016          	jra	L1622
6089  b611               L5522:
6092  b611 5f            	clrw	x
6093  b612 97            	ld	xl,a
6094  b613 89            	pushw	x
6095  b614 96            	ldw	x,sp
6096  b615 1c0005        	addw	x,#OFST-18
6097  b618 9f            	ld	a,xl
6098  b619 5e            	swapw	x
6099  b61a 1b19          	add	a,(OFST+2,sp)
6100  b61c 2401          	jrnc	L272
6101  b61e 5c            	incw	x
6102  b61f               L272:
6103  b61f 02            	rlwa	x,a
6104  b620 f6            	ld	a,(x)
6105  b621 85            	popw	x
6106  b622 d7013b        	ld	(_Pending_mqtt_password,x),a
6109  b625 0c17          	inc	(OFST+0,sp)
6111  b627               L1622:
6114  b627 7b17          	ld	a,(OFST+0,sp)
6115  b629 1119          	cp	a,(OFST+2,sp)
6116  b62b 25e4          	jrult	L5522
6117  b62d               L5322:
6118                     ; 4025 }
6121  b62d 5b19          	addw	sp,#25
6122  b62f 81            	ret	
6196                     	switch	.const
6197  9c04               L403:
6198  9c04 b70e          	dc.w	L5622
6199  9c06 b715          	dc.w	L7622
6200  9c08 b71c          	dc.w	L1722
6201  9c0a b723          	dc.w	L3722
6202  9c0c b72a          	dc.w	L5722
6203  9c0e b731          	dc.w	L7722
6204  9c10 b738          	dc.w	L1032
6205  9c12 b73f          	dc.w	L3032
6206  9c14 b746          	dc.w	L5032
6207  9c16 b74d          	dc.w	L7032
6208  9c18 b754          	dc.w	L1132
6209  9c1a b75b          	dc.w	L3132
6210  9c1c b762          	dc.w	L5132
6211  9c1e b769          	dc.w	L7132
6212  9c20 b770          	dc.w	L1232
6213  9c22 b777          	dc.w	L3232
6214                     ; 4028 void parse_POST_address(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6214                     ; 4029 {
6215                     .text:	section	.text,new
6216  b630               _parse_POST_address:
6218  b630 89            	pushw	x
6219  b631 89            	pushw	x
6220       00000002      OFST:	set	2
6223                     ; 4032   alpha[0] = '-';
6225  b632 352d001b      	mov	_alpha,#45
6226                     ; 4033   alpha[1] = '-';
6228  b636 352d001c      	mov	_alpha+1,#45
6229                     ; 4034   alpha[2] = '-';
6231  b63a 352d001d      	mov	_alpha+2,#45
6232                     ; 4037   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6234  b63e 9e            	ld	a,xh
6235  b63f c10029        	cp	a,_saved_postpartial_previous
6236  b642 2624          	jrne	L3532
6237                     ; 4040     saved_postpartial_previous[0] = '\0';
6239  b644 725f0029      	clr	_saved_postpartial_previous
6240                     ; 4047     if (saved_postpartial_previous[4] != '\0') alpha[0] = saved_postpartial_previous[4];
6242  b648 c6002d        	ld	a,_saved_postpartial_previous+4
6243  b64b 2705          	jreq	L5532
6246  b64d 55002d001b    	mov	_alpha,_saved_postpartial_previous+4
6247  b652               L5532:
6248                     ; 4048     if (saved_postpartial_previous[5] != '\0') alpha[1] = saved_postpartial_previous[5];
6250  b652 c6002e        	ld	a,_saved_postpartial_previous+5
6251  b655 2705          	jreq	L7532
6254  b657 55002e001c    	mov	_alpha+1,_saved_postpartial_previous+5
6255  b65c               L7532:
6256                     ; 4049     if (saved_postpartial_previous[6] != '\0') alpha[2] = saved_postpartial_previous[6];
6258  b65c c6002f        	ld	a,_saved_postpartial_previous+6
6259  b65f 270a          	jreq	L3632
6262  b661 55002f001d    	mov	_alpha+2,_saved_postpartial_previous+6
6263  b666 2003          	jra	L3632
6264  b668               L3532:
6265                     ; 4055     clear_saved_postpartial_data(); // Clear [4] and higher
6267  b668 cdb49a        	call	_clear_saved_postpartial_data
6269  b66b               L3632:
6270                     ; 4058   for (i=0; i<3; i++) {
6272  b66b 4f            	clr	a
6273  b66c 6b02          	ld	(OFST+0,sp),a
6275  b66e               L5632:
6276                     ; 4064     if (alpha[i] == '-') {
6278  b66e 5f            	clrw	x
6279  b66f 97            	ld	xl,a
6280  b670 d6001b        	ld	a,(_alpha,x)
6281  b673 a12d          	cp	a,#45
6282  b675 263c          	jrne	L3732
6283                     ; 4065       alpha[i] = (uint8_t)(*tmp_pBuffer);
6285  b677 7b02          	ld	a,(OFST+0,sp)
6286  b679 5f            	clrw	x
6287  b67a 90ce0025      	ldw	y,_tmp_pBuffer
6288  b67e 97            	ld	xl,a
6289  b67f 90f6          	ld	a,(y)
6290  b681 d7001b        	ld	(_alpha,x),a
6291                     ; 4066       saved_postpartial[i+4] = (uint8_t)(*tmp_pBuffer);
6293  b684 5f            	clrw	x
6294  b685 7b02          	ld	a,(OFST+0,sp)
6295  b687 97            	ld	xl,a
6296  b688 90f6          	ld	a,(y)
6297  b68a d70045        	ld	(_saved_postpartial+4,x),a
6298                     ; 4067       tmp_nParseLeft--;
6300  b68d 725a0022      	dec	_tmp_nParseLeft
6301                     ; 4068       saved_nparseleft = tmp_nParseLeft;
6303                     ; 4069       tmp_pBuffer++;
6305  b691 93            	ldw	x,y
6306  b692 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6307  b697 5c            	incw	x
6308  b698 cf0025        	ldw	_tmp_pBuffer,x
6309                     ; 4070       tmp_nBytes--;
6311  b69b ce0023        	ldw	x,_tmp_nBytes
6312  b69e 5a            	decw	x
6313  b69f cf0023        	ldw	_tmp_nBytes,x
6314                     ; 4071       if (i != 2 && tmp_nBytes == 0) {
6316  b6a2 7b02          	ld	a,(OFST+0,sp)
6317  b6a4 a102          	cp	a,#2
6318  b6a6 270b          	jreq	L3732
6320  b6a8 ce0023        	ldw	x,_tmp_nBytes
6321  b6ab 2606          	jrne	L3732
6322                     ; 4072         break_while = 1; // Hit end of fragment but still have characters to
6324  b6ad 35010021      	mov	_break_while,#1
6325                     ; 4076         break; // Break out of for() loop.
6327  b6b1 2008          	jra	L1732
6328  b6b3               L3732:
6329                     ; 4058   for (i=0; i<3; i++) {
6331  b6b3 0c02          	inc	(OFST+0,sp)
6335  b6b5 7b02          	ld	a,(OFST+0,sp)
6336  b6b7 a103          	cp	a,#3
6337  b6b9 25b3          	jrult	L5632
6338  b6bb               L1732:
6339                     ; 4080   if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6341  b6bb c60021        	ld	a,_break_while
6342  b6be 4a            	dec	a
6343  b6bf 2603ccb785    	jreq	L603
6346                     ; 4084   clear_saved_postpartial_all();
6348  b6c4 cdb486        	call	_clear_saved_postpartial_all
6350                     ; 4097     invalid = 0;
6352  b6c7 0f01          	clr	(OFST-1,sp)
6354                     ; 4099     temp = (uint8_t)(       (alpha[2] - '0'));
6356  b6c9 c6001d        	ld	a,_alpha+2
6357  b6cc a030          	sub	a,#48
6358  b6ce 6b02          	ld	(OFST+0,sp),a
6360                     ; 4100     temp = (uint8_t)(temp + (alpha[1] - '0') * 10);
6362  b6d0 c6001c        	ld	a,_alpha+1
6363  b6d3 97            	ld	xl,a
6364  b6d4 a60a          	ld	a,#10
6365  b6d6 42            	mul	x,a
6366  b6d7 9f            	ld	a,xl
6367  b6d8 a0e0          	sub	a,#224
6368  b6da 1b02          	add	a,(OFST+0,sp)
6369  b6dc 6b02          	ld	(OFST+0,sp),a
6371                     ; 4101     if (temp > 55 && alpha[0] > '1') invalid = 1;
6373  b6de a138          	cp	a,#56
6374  b6e0 250d          	jrult	L1042
6376  b6e2 c6001b        	ld	a,_alpha
6377  b6e5 a132          	cp	a,#50
6378  b6e7 2506          	jrult	L1042
6381  b6e9 a601          	ld	a,#1
6382  b6eb 6b01          	ld	(OFST-1,sp),a
6385  b6ed 200e          	jra	L3042
6386  b6ef               L1042:
6387                     ; 4102     else temp = (uint8_t)(temp + (alpha[0] - '0') * 100);
6389  b6ef c6001b        	ld	a,_alpha
6390  b6f2 97            	ld	xl,a
6391  b6f3 a664          	ld	a,#100
6392  b6f5 42            	mul	x,a
6393  b6f6 9f            	ld	a,xl
6394  b6f7 a0c0          	sub	a,#192
6395  b6f9 1b02          	add	a,(OFST+0,sp)
6396  b6fb 6b02          	ld	(OFST+0,sp),a
6398  b6fd               L3042:
6399                     ; 4103     if (invalid == 0) { // Make change only if valid entry
6401  b6fd 7b01          	ld	a,(OFST-1,sp)
6402  b6ff 267b          	jrne	L5042
6403                     ; 4104       switch(curr_ParseNum)
6405  b701 7b04          	ld	a,(OFST+2,sp)
6407                     ; 4127         default: break;
6408  b703 a110          	cp	a,#16
6409  b705 2475          	jruge	L5042
6410  b707 5f            	clrw	x
6411  b708 97            	ld	xl,a
6412  b709 58            	sllw	x
6413  b70a de9c04        	ldw	x,(L403,x)
6414  b70d fc            	jp	(x)
6415  b70e               L5622:
6416                     ; 4106         case 0:  Pending_hostaddr[3] = (uint8_t)temp; break;
6418  b70e 7b02          	ld	a,(OFST+0,sp)
6419  b710 c7013a        	ld	_Pending_hostaddr+3,a
6422  b713 2067          	jra	L5042
6423  b715               L7622:
6424                     ; 4107         case 1:  Pending_hostaddr[2] = (uint8_t)temp; break;
6426  b715 7b02          	ld	a,(OFST+0,sp)
6427  b717 c70139        	ld	_Pending_hostaddr+2,a
6430  b71a 2060          	jra	L5042
6431  b71c               L1722:
6432                     ; 4108         case 2:  Pending_hostaddr[1] = (uint8_t)temp; break;
6434  b71c 7b02          	ld	a,(OFST+0,sp)
6435  b71e c70138        	ld	_Pending_hostaddr+1,a
6438  b721 2059          	jra	L5042
6439  b723               L3722:
6440                     ; 4109         case 3:  Pending_hostaddr[0] = (uint8_t)temp; break;
6442  b723 7b02          	ld	a,(OFST+0,sp)
6443  b725 c70137        	ld	_Pending_hostaddr,a
6446  b728 2052          	jra	L5042
6447  b72a               L5722:
6448                     ; 4110         case 4:  Pending_draddr[3] = (uint8_t)temp; break;
6450  b72a 7b02          	ld	a,(OFST+0,sp)
6451  b72c c70136        	ld	_Pending_draddr+3,a
6454  b72f 204b          	jra	L5042
6455  b731               L7722:
6456                     ; 4111         case 5:  Pending_draddr[2] = (uint8_t)temp; break;
6458  b731 7b02          	ld	a,(OFST+0,sp)
6459  b733 c70135        	ld	_Pending_draddr+2,a
6462  b736 2044          	jra	L5042
6463  b738               L1032:
6464                     ; 4112         case 6:  Pending_draddr[1] = (uint8_t)temp; break;
6466  b738 7b02          	ld	a,(OFST+0,sp)
6467  b73a c70134        	ld	_Pending_draddr+1,a
6470  b73d 203d          	jra	L5042
6471  b73f               L3032:
6472                     ; 4113         case 7:  Pending_draddr[0] = (uint8_t)temp; break;
6474  b73f 7b02          	ld	a,(OFST+0,sp)
6475  b741 c70133        	ld	_Pending_draddr,a
6478  b744 2036          	jra	L5042
6479  b746               L5032:
6480                     ; 4114         case 8:  Pending_netmask[3] = (uint8_t)temp; break;
6482  b746 7b02          	ld	a,(OFST+0,sp)
6483  b748 c70132        	ld	_Pending_netmask+3,a
6486  b74b 202f          	jra	L5042
6487  b74d               L7032:
6488                     ; 4115         case 9:  Pending_netmask[2] = (uint8_t)temp; break;
6490  b74d 7b02          	ld	a,(OFST+0,sp)
6491  b74f c70131        	ld	_Pending_netmask+2,a
6494  b752 2028          	jra	L5042
6495  b754               L1132:
6496                     ; 4116         case 10: Pending_netmask[1] = (uint8_t)temp; break;
6498  b754 7b02          	ld	a,(OFST+0,sp)
6499  b756 c70130        	ld	_Pending_netmask+1,a
6502  b759 2021          	jra	L5042
6503  b75b               L3132:
6504                     ; 4117         case 11: Pending_netmask[0] = (uint8_t)temp; break;
6506  b75b 7b02          	ld	a,(OFST+0,sp)
6507  b75d c7012f        	ld	_Pending_netmask,a
6510  b760 201a          	jra	L5042
6511  b762               L5132:
6512                     ; 4120 	  Pending_mqttserveraddr[3] = (uint8_t)temp;
6514  b762 7b02          	ld	a,(OFST+0,sp)
6515  b764 c70156        	ld	_Pending_mqttserveraddr+3,a
6516                     ; 4121 	  break;
6518  b767 2013          	jra	L5042
6519  b769               L7132:
6520                     ; 4123         case 13: Pending_mqttserveraddr[2] = (uint8_t)temp; break;
6522  b769 7b02          	ld	a,(OFST+0,sp)
6523  b76b c70155        	ld	_Pending_mqttserveraddr+2,a
6526  b76e 200c          	jra	L5042
6527  b770               L1232:
6528                     ; 4124         case 14: Pending_mqttserveraddr[1] = (uint8_t)temp; break;
6530  b770 7b02          	ld	a,(OFST+0,sp)
6531  b772 c70154        	ld	_Pending_mqttserveraddr+1,a
6534  b775 2005          	jra	L5042
6535  b777               L3232:
6536                     ; 4125         case 15: Pending_mqttserveraddr[0] = (uint8_t)temp; break;
6538  b777 7b02          	ld	a,(OFST+0,sp)
6539  b779 c70153        	ld	_Pending_mqttserveraddr,a
6542                     ; 4127         default: break;
6544  b77c               L5042:
6545                     ; 4132   if (tmp_nBytes == 0) {
6547  b77c ce0023        	ldw	x,_tmp_nBytes
6548  b77f 2604          	jrne	L603
6549                     ; 4135     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
6551  b781 35020021      	mov	_break_while,#2
6552                     ; 4138     return;
6553  b785               L603:
6556  b785 5b04          	addw	sp,#4
6557  b787 81            	ret	
6558                     ; 4140 }
6638                     ; 4143 void parse_POST_port(uint8_t curr_ParseCmd, uint8_t curr_ParseNum)
6638                     ; 4144 {
6639                     .text:	section	.text,new
6640  b788               _parse_POST_port:
6642  b788 89            	pushw	x
6643  b789 5203          	subw	sp,#3
6644       00000003      OFST:	set	3
6647                     ; 4147   for (i=0; i<5; i++) alpha[i] = '-';
6649  b78b 4f            	clr	a
6650  b78c 6b03          	ld	(OFST+0,sp),a
6652  b78e               L3442:
6655  b78e 5f            	clrw	x
6656  b78f 97            	ld	xl,a
6657  b790 a62d          	ld	a,#45
6658  b792 d7001b        	ld	(_alpha,x),a
6661  b795 0c03          	inc	(OFST+0,sp)
6665  b797 7b03          	ld	a,(OFST+0,sp)
6666  b799 a105          	cp	a,#5
6667  b79b 25f1          	jrult	L3442
6668                     ; 4149   if (saved_postpartial_previous[0] == curr_ParseCmd) {
6670  b79d c60029        	ld	a,_saved_postpartial_previous
6671  b7a0 1104          	cp	a,(OFST+1,sp)
6672  b7a2 2621          	jrne	L1542
6673                     ; 4152     saved_postpartial_previous[0] = '\0';
6675  b7a4 725f0029      	clr	_saved_postpartial_previous
6676                     ; 4159     for (i=0; i<5; i++) {
6678  b7a8 4f            	clr	a
6679  b7a9 6b03          	ld	(OFST+0,sp),a
6681  b7ab               L3542:
6682                     ; 4160       if (saved_postpartial_previous[i+4] != '\0') alpha[i] = saved_postpartial_previous[i+4];
6684  b7ab 5f            	clrw	x
6685  b7ac 97            	ld	xl,a
6686  b7ad 724d002d      	tnz	(_saved_postpartial_previous+4,x)
6687  b7b1 2708          	jreq	L1642
6690  b7b3 5f            	clrw	x
6691  b7b4 97            	ld	xl,a
6692  b7b5 d6002d        	ld	a,(_saved_postpartial_previous+4,x)
6693  b7b8 d7001b        	ld	(_alpha,x),a
6694  b7bb               L1642:
6695                     ; 4159     for (i=0; i<5; i++) {
6697  b7bb 0c03          	inc	(OFST+0,sp)
6701  b7bd 7b03          	ld	a,(OFST+0,sp)
6702  b7bf a105          	cp	a,#5
6703  b7c1 25e8          	jrult	L3542
6705  b7c3 2003          	jra	L3642
6706  b7c5               L1542:
6707                     ; 4167     clear_saved_postpartial_data(); // Clear [4] and higher
6709  b7c5 cdb49a        	call	_clear_saved_postpartial_data
6711  b7c8               L3642:
6712                     ; 4172     for (i=0; i<5; i++) {
6714  b7c8 4f            	clr	a
6715  b7c9 6b03          	ld	(OFST+0,sp),a
6717  b7cb               L5642:
6718                     ; 4178       if (alpha[i] == '-') {
6720  b7cb 5f            	clrw	x
6721  b7cc 97            	ld	xl,a
6722  b7cd d6001b        	ld	a,(_alpha,x)
6723  b7d0 a12d          	cp	a,#45
6724  b7d2 263c          	jrne	L3742
6725                     ; 4179         alpha[i] = (uint8_t)(*tmp_pBuffer);
6727  b7d4 7b03          	ld	a,(OFST+0,sp)
6728  b7d6 5f            	clrw	x
6729  b7d7 90ce0025      	ldw	y,_tmp_pBuffer
6730  b7db 97            	ld	xl,a
6731  b7dc 90f6          	ld	a,(y)
6732  b7de d7001b        	ld	(_alpha,x),a
6733                     ; 4180         saved_postpartial[i+4] = *tmp_pBuffer;
6735  b7e1 5f            	clrw	x
6736  b7e2 7b03          	ld	a,(OFST+0,sp)
6737  b7e4 97            	ld	xl,a
6738  b7e5 90f6          	ld	a,(y)
6739  b7e7 d70045        	ld	(_saved_postpartial+4,x),a
6740                     ; 4181         tmp_nParseLeft--;
6742  b7ea 725a0022      	dec	_tmp_nParseLeft
6743                     ; 4182         saved_nparseleft = tmp_nParseLeft;
6745                     ; 4183         tmp_pBuffer++;
6747  b7ee 93            	ldw	x,y
6748  b7ef 5500220059    	mov	_saved_nparseleft,_tmp_nParseLeft
6749  b7f4 5c            	incw	x
6750  b7f5 cf0025        	ldw	_tmp_pBuffer,x
6751                     ; 4184         tmp_nBytes--;
6753  b7f8 ce0023        	ldw	x,_tmp_nBytes
6754  b7fb 5a            	decw	x
6755  b7fc cf0023        	ldw	_tmp_nBytes,x
6756                     ; 4185         if (i != 4 && tmp_nBytes == 0) {
6758  b7ff 7b03          	ld	a,(OFST+0,sp)
6759  b801 a104          	cp	a,#4
6760  b803 270b          	jreq	L3742
6762  b805 ce0023        	ldw	x,_tmp_nBytes
6763  b808 2606          	jrne	L3742
6764                     ; 4186           break_while = 1; // Hit end of fragment but still have characters to
6766  b80a 35010021      	mov	_break_while,#1
6767                     ; 4190    	break; // Break out of for() loop.
6769  b80e 2008          	jra	L1742
6770  b810               L3742:
6771                     ; 4172     for (i=0; i<5; i++) {
6773  b810 0c03          	inc	(OFST+0,sp)
6777  b812 7b03          	ld	a,(OFST+0,sp)
6778  b814 a105          	cp	a,#5
6779  b816 25b3          	jrult	L5642
6780  b818               L1742:
6781                     ; 4194     if (break_while == 1) return; // Hit end of fragment. Break out of while() loop.
6783  b818 c60021        	ld	a,_break_while
6784  b81b 4a            	dec	a
6785  b81c 2603ccb8aa    	jreq	L613
6788                     ; 4199   clear_saved_postpartial_all();
6790  b821 cdb486        	call	_clear_saved_postpartial_all
6792                     ; 4208     invalid = 0;
6794  b824 0f03          	clr	(OFST+0,sp)
6796                     ; 4210     temp = (uint16_t)(       (alpha[4] - '0'));
6798  b826 5f            	clrw	x
6799  b827 c6001f        	ld	a,_alpha+4
6800  b82a 97            	ld	xl,a
6801  b82b 1d0030        	subw	x,#48
6802  b82e 1f01          	ldw	(OFST-2,sp),x
6804                     ; 4211     temp = (uint16_t)(temp + (alpha[3] - '0') * 10);
6806  b830 c6001e        	ld	a,_alpha+3
6807  b833 97            	ld	xl,a
6808  b834 a60a          	ld	a,#10
6809  b836 42            	mul	x,a
6810  b837 1d01e0        	subw	x,#480
6811  b83a 72fb01        	addw	x,(OFST-2,sp)
6812  b83d 1f01          	ldw	(OFST-2,sp),x
6814                     ; 4212     temp = (uint16_t)(temp + (alpha[2] - '0') * 100);
6816  b83f c6001d        	ld	a,_alpha+2
6817  b842 97            	ld	xl,a
6818  b843 a664          	ld	a,#100
6819  b845 42            	mul	x,a
6820  b846 1d12c0        	subw	x,#4800
6821  b849 72fb01        	addw	x,(OFST-2,sp)
6822  b84c 1f01          	ldw	(OFST-2,sp),x
6824                     ; 4213     temp = (uint16_t)(temp + (alpha[1] - '0') * 1000);
6826  b84e 5f            	clrw	x
6827  b84f c6001c        	ld	a,_alpha+1
6828  b852 97            	ld	xl,a
6829  b853 90ae03e8      	ldw	y,#1000
6830  b857 cdf528        	call	c_imul
6832  b85a 1dbb80        	subw	x,#48000
6833  b85d 72fb01        	addw	x,(OFST-2,sp)
6834  b860 1f01          	ldw	(OFST-2,sp),x
6836                     ; 4214     if (temp > 5535 && alpha[0] > '5') invalid = 1;
6838  b862 a315a0        	cpw	x,#5536
6839  b865 250d          	jrult	L1052
6841  b867 c6001b        	ld	a,_alpha
6842  b86a a136          	cp	a,#54
6843  b86c 2506          	jrult	L1052
6846  b86e a601          	ld	a,#1
6847  b870 6b03          	ld	(OFST+0,sp),a
6850  b872 2014          	jra	L3052
6851  b874               L1052:
6852                     ; 4215     else temp = (uint16_t)(temp + (alpha[0] - '0') * 10000);
6854  b874 c6001b        	ld	a,_alpha
6855  b877 5f            	clrw	x
6856  b878 97            	ld	xl,a
6857  b879 90ae2710      	ldw	y,#10000
6858  b87d cdf528        	call	c_imul
6860  b880 1d5300        	subw	x,#21248
6861  b883 72fb01        	addw	x,(OFST-2,sp)
6862  b886 1f01          	ldw	(OFST-2,sp),x
6864  b888               L3052:
6865                     ; 4216     if (temp < 10) invalid = 1;
6867  b888 a3000a        	cpw	x,#10
6868  b88b 2404          	jruge	L5052
6871  b88d a601          	ld	a,#1
6872  b88f 6b03          	ld	(OFST+0,sp),a
6874  b891               L5052:
6875                     ; 4217     if (invalid == 0) {
6877  b891 7b03          	ld	a,(OFST+0,sp)
6878  b893 260c          	jrne	L7052
6879                     ; 4218       if (curr_ParseNum == 0) Pending_port = (uint16_t)temp;
6881  b895 7b05          	ld	a,(OFST+2,sp)
6882  b897 2605          	jrne	L1152
6885  b899 cf012d        	ldw	_Pending_port,x
6887  b89c 2003          	jra	L7052
6888  b89e               L1152:
6889                     ; 4220       else Pending_mqttport = (uint16_t)temp;
6891  b89e cf0151        	ldw	_Pending_mqttport,x
6892  b8a1               L7052:
6893                     ; 4225   if (tmp_nBytes == 0) {
6895  b8a1 ce0023        	ldw	x,_tmp_nBytes
6896  b8a4 2604          	jrne	L613
6897                     ; 4228     break_while = 2; // Hit end of fragment. Set break_while to 2 so that
6899  b8a6 35020021      	mov	_break_while,#2
6900                     ; 4231     return;
6901  b8aa               L613:
6904  b8aa 5b05          	addw	sp,#5
6905  b8ac 81            	ret	
6906                     ; 4233 }
6941                     	switch	.const
6942  9c24               L423:
6943  9c24 b8bb          	dc.w	L7152
6944  9c26 b8c3          	dc.w	L1252
6945  9c28 b8cb          	dc.w	L3252
6946  9c2a b8d3          	dc.w	L5252
6947  9c2c b8db          	dc.w	L7252
6948  9c2e b8e3          	dc.w	L1352
6949  9c30 b8eb          	dc.w	L3352
6950  9c32 b8f3          	dc.w	L5352
6951  9c34 b8fb          	dc.w	L7352
6952  9c36 b903          	dc.w	L1452
6953  9c38 b90b          	dc.w	L3452
6954  9c3a b913          	dc.w	L5452
6955  9c3c b91b          	dc.w	L7452
6956  9c3e b923          	dc.w	L1552
6957  9c40 b92b          	dc.w	L3552
6958  9c42 b933          	dc.w	L5552
6959                     ; 4236 uint8_t GpioGetPin(uint8_t nGpio)
6959                     ; 4237 {
6960                     .text:	section	.text,new
6961  b8ad               _GpioGetPin:
6965                     ; 4242   switch (nGpio) {
6968                     ; 4258     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
6969  b8ad a110          	cp	a,#16
6970  b8af 2503ccb93b    	jruge	L5752
6971  b8b4 5f            	clrw	x
6972  b8b5 97            	ld	xl,a
6973  b8b6 58            	sllw	x
6974  b8b7 de9c24        	ldw	x,(L423,x)
6975  b8ba fc            	jp	(x)
6976  b8bb               L7152:
6977                     ; 4243     case 0:  if (IO_8to1  & (uint8_t)(0x01)) return 1; break;
6979  b8bb 720101617b    	btjf	_IO_8to1,#0,L5752
6982  b8c0 a601          	ld	a,#1
6985  b8c2 81            	ret	
6986  b8c3               L1252:
6987                     ; 4244     case 1:  if (IO_8to1  & (uint8_t)(0x02)) return 1; break;
6989  b8c3 7203016173    	btjf	_IO_8to1,#1,L5752
6992  b8c8 a601          	ld	a,#1
6995  b8ca 81            	ret	
6996  b8cb               L3252:
6997                     ; 4245     case 2:  if (IO_8to1  & (uint8_t)(0x04)) return 1; break;
6999  b8cb 720501616b    	btjf	_IO_8to1,#2,L5752
7002  b8d0 a601          	ld	a,#1
7005  b8d2 81            	ret	
7006  b8d3               L5252:
7007                     ; 4246     case 3:  if (IO_8to1  & (uint8_t)(0x08)) return 1; break;
7009  b8d3 7207016163    	btjf	_IO_8to1,#3,L5752
7012  b8d8 a601          	ld	a,#1
7015  b8da 81            	ret	
7016  b8db               L7252:
7017                     ; 4247     case 4:  if (IO_8to1  & (uint8_t)(0x10)) return 1; break;
7019  b8db 720901615b    	btjf	_IO_8to1,#4,L5752
7022  b8e0 a601          	ld	a,#1
7025  b8e2 81            	ret	
7026  b8e3               L1352:
7027                     ; 4248     case 5:  if (IO_8to1  & (uint8_t)(0x20)) return 1; break;
7029  b8e3 720b016153    	btjf	_IO_8to1,#5,L5752
7032  b8e8 a601          	ld	a,#1
7035  b8ea 81            	ret	
7036  b8eb               L3352:
7037                     ; 4249     case 6:  if (IO_8to1  & (uint8_t)(0x40)) return 1; break;
7039  b8eb 720d01614b    	btjf	_IO_8to1,#6,L5752
7042  b8f0 a601          	ld	a,#1
7045  b8f2 81            	ret	
7046  b8f3               L5352:
7047                     ; 4250     case 7:  if (IO_8to1  & (uint8_t)(0x80)) return 1; break;
7049  b8f3 720f016143    	btjf	_IO_8to1,#7,L5752
7052  b8f8 a601          	ld	a,#1
7055  b8fa 81            	ret	
7056  b8fb               L7352:
7057                     ; 4251     case 8:  if (IO_16to9 & (uint8_t)(0x01)) return 1; break;
7059  b8fb 720101623b    	btjf	_IO_16to9,#0,L5752
7062  b900 a601          	ld	a,#1
7065  b902 81            	ret	
7066  b903               L1452:
7067                     ; 4252     case 9:  if (IO_16to9 & (uint8_t)(0x02)) return 1; break;
7069  b903 7203016233    	btjf	_IO_16to9,#1,L5752
7072  b908 a601          	ld	a,#1
7075  b90a 81            	ret	
7076  b90b               L3452:
7077                     ; 4253     case 10: if (IO_16to9 & (uint8_t)(0x04)) return 1; break;
7079  b90b 720501622b    	btjf	_IO_16to9,#2,L5752
7082  b910 a601          	ld	a,#1
7085  b912 81            	ret	
7086  b913               L5452:
7087                     ; 4254     case 11: if (IO_16to9 & (uint8_t)(0x08)) return 1; break;
7089  b913 7207016223    	btjf	_IO_16to9,#3,L5752
7092  b918 a601          	ld	a,#1
7095  b91a 81            	ret	
7096  b91b               L7452:
7097                     ; 4255     case 12: if (IO_16to9 & (uint8_t)(0x10)) return 1; break;
7099  b91b 720901621b    	btjf	_IO_16to9,#4,L5752
7102  b920 a601          	ld	a,#1
7105  b922 81            	ret	
7106  b923               L1552:
7107                     ; 4256     case 13: if (IO_16to9 & (uint8_t)(0x20)) return 1; break;
7109  b923 720b016213    	btjf	_IO_16to9,#5,L5752
7112  b928 a601          	ld	a,#1
7115  b92a 81            	ret	
7116  b92b               L3552:
7117                     ; 4257     case 14: if (IO_16to9 & (uint8_t)(0x40)) return 1; break;
7119  b92b 720d01620b    	btjf	_IO_16to9,#6,L5752
7122  b930 a601          	ld	a,#1
7125  b932 81            	ret	
7126  b933               L5552:
7127                     ; 4258     case 15: if (IO_16to9 & (uint8_t)(0x80)) return 1; break;
7129  b933 720f016203    	btjf	_IO_16to9,#7,L5752
7132  b938 a601          	ld	a,#1
7135  b93a 81            	ret	
7136  b93b               L5752:
7137                     ; 4260   return 0;
7139  b93b 4f            	clr	a
7142  b93c 81            	ret	
7189                     ; 4309 void GpioSetPin(uint8_t nGpio, uint8_t nState)
7189                     ; 4310 {
7190                     .text:	section	.text,new
7191  b93d               _GpioSetPin:
7193  b93d 89            	pushw	x
7194  b93e 88            	push	a
7195       00000001      OFST:	set	1
7198                     ; 4317   mask = 0;
7200  b93f 0f01          	clr	(OFST+0,sp)
7202                     ; 4319   switch(nGpio) {
7204  b941 9e            	ld	a,xh
7206                     ; 4328     default: break;
7207  b942 4d            	tnz	a
7208  b943 2717          	jreq	L7362
7209  b945 4a            	dec	a
7210  b946 2717          	jreq	L1462
7211  b948 4a            	dec	a
7212  b949 2718          	jreq	L3462
7213  b94b 4a            	dec	a
7214  b94c 2719          	jreq	L5462
7215  b94e 4a            	dec	a
7216  b94f 271a          	jreq	L7462
7217  b951 4a            	dec	a
7218  b952 271b          	jreq	L1562
7219  b954 4a            	dec	a
7220  b955 271c          	jreq	L3562
7221  b957 4a            	dec	a
7222  b958 271d          	jreq	L5562
7223  b95a 201f          	jra	L3072
7224  b95c               L7362:
7225                     ; 4320     case 0: mask = 0x01; break;
7227  b95c 4c            	inc	a
7230  b95d 201a          	jp	LC022
7231  b95f               L1462:
7232                     ; 4321     case 1: mask = 0x02; break;
7234  b95f a602          	ld	a,#2
7237  b961 2016          	jp	LC022
7238  b963               L3462:
7239                     ; 4322     case 2: mask = 0x04; break;
7241  b963 a604          	ld	a,#4
7244  b965 2012          	jp	LC022
7245  b967               L5462:
7246                     ; 4323     case 3: mask = 0x08; break;
7248  b967 a608          	ld	a,#8
7251  b969 200e          	jp	LC022
7252  b96b               L7462:
7253                     ; 4324     case 4: mask = 0x10; break;
7255  b96b a610          	ld	a,#16
7258  b96d 200a          	jp	LC022
7259  b96f               L1562:
7260                     ; 4325     case 5: mask = 0x20; break;
7262  b96f a620          	ld	a,#32
7265  b971 2006          	jp	LC022
7266  b973               L3562:
7267                     ; 4326     case 6: mask = 0x40; break;
7269  b973 a640          	ld	a,#64
7272  b975 2002          	jp	LC022
7273  b977               L5562:
7274                     ; 4327     case 7: mask = 0x80; break;
7276  b977 a680          	ld	a,#128
7277  b979               LC022:
7278  b979 6b01          	ld	(OFST+0,sp),a
7282                     ; 4328     default: break;
7284  b97b               L3072:
7285                     ; 4331   if (nState) IO_8to1 |= mask;
7287  b97b 7b03          	ld	a,(OFST+2,sp)
7288  b97d 2707          	jreq	L5072
7291  b97f c60161        	ld	a,_IO_8to1
7292  b982 1a01          	or	a,(OFST+0,sp)
7294  b984 2006          	jra	L7072
7295  b986               L5072:
7296                     ; 4332   else IO_8to1 &= (uint8_t)~mask;
7298  b986 7b01          	ld	a,(OFST+0,sp)
7299  b988 43            	cpl	a
7300  b989 c40161        	and	a,_IO_8to1
7301  b98c               L7072:
7302  b98c c70161        	ld	_IO_8to1,a
7303                     ; 4334 }
7306  b98f 5b03          	addw	sp,#3
7307  b991 81            	ret	
7368                     ; 4346 void SetMAC(uint8_t itemnum, uint8_t alpha1, uint8_t alpha2)
7368                     ; 4347 {
7369                     .text:	section	.text,new
7370  b992               _SetMAC:
7372  b992 89            	pushw	x
7373  b993 5203          	subw	sp,#3
7374       00000003      OFST:	set	3
7377                     ; 4361   temp = 0;
7379                     ; 4362   invalid = 0;
7381  b995 0f01          	clr	(OFST-2,sp)
7383                     ; 4365   if (alpha1 >= '0' && alpha1 <= '9') alpha1 = (uint8_t)(alpha1 - '0');
7385  b997 9f            	ld	a,xl
7386  b998 a130          	cp	a,#48
7387  b99a 250b          	jrult	L3572
7389  b99c 9f            	ld	a,xl
7390  b99d a13a          	cp	a,#58
7391  b99f 2406          	jruge	L3572
7394  b9a1 7b05          	ld	a,(OFST+2,sp)
7395  b9a3 a030          	sub	a,#48
7397  b9a5 200c          	jp	LC023
7398  b9a7               L3572:
7399                     ; 4366   else if (alpha1 >= 'a' && alpha1 <= 'f') alpha1 = (uint8_t)(alpha1 - 87);
7401  b9a7 7b05          	ld	a,(OFST+2,sp)
7402  b9a9 a161          	cp	a,#97
7403  b9ab 250a          	jrult	L7572
7405  b9ad a167          	cp	a,#103
7406  b9af 2406          	jruge	L7572
7409  b9b1 a057          	sub	a,#87
7410  b9b3               LC023:
7411  b9b3 6b05          	ld	(OFST+2,sp),a
7413  b9b5 2004          	jra	L5572
7414  b9b7               L7572:
7415                     ; 4367   else invalid = 1; // If an invalid entry set indicator
7417  b9b7 a601          	ld	a,#1
7418  b9b9 6b01          	ld	(OFST-2,sp),a
7420  b9bb               L5572:
7421                     ; 4369   if (alpha2 >= '0' && alpha2 <= '9') alpha2 = (uint8_t)(alpha2 - '0');
7423  b9bb 7b08          	ld	a,(OFST+5,sp)
7424  b9bd a130          	cp	a,#48
7425  b9bf 2508          	jrult	L3672
7427  b9c1 a13a          	cp	a,#58
7428  b9c3 2404          	jruge	L3672
7431  b9c5 a030          	sub	a,#48
7433  b9c7 200a          	jp	LC024
7434  b9c9               L3672:
7435                     ; 4370   else if (alpha2 >= 'a' && alpha2 <= 'f') alpha2 = (uint8_t)(alpha2 - 87);
7437  b9c9 a161          	cp	a,#97
7438  b9cb 250a          	jrult	L7672
7440  b9cd a167          	cp	a,#103
7441  b9cf 2406          	jruge	L7672
7444  b9d1 a057          	sub	a,#87
7445  b9d3               LC024:
7446  b9d3 6b08          	ld	(OFST+5,sp),a
7448  b9d5 2004          	jra	L5672
7449  b9d7               L7672:
7450                     ; 4371   else invalid = 1; // If an invalid entry set indicator
7452  b9d7 a601          	ld	a,#1
7453  b9d9 6b01          	ld	(OFST-2,sp),a
7455  b9db               L5672:
7456                     ; 4373   if (invalid == 0) { // Change value only if valid entry
7458  b9db 7b01          	ld	a,(OFST-2,sp)
7459  b9dd 264a          	jrne	L3772
7460                     ; 4374     temp = (uint8_t)((alpha1<<4) + alpha2); // Convert to single digit
7462  b9df 7b05          	ld	a,(OFST+2,sp)
7463  b9e1 97            	ld	xl,a
7464  b9e2 a610          	ld	a,#16
7465  b9e4 42            	mul	x,a
7466  b9e5 01            	rrwa	x,a
7467  b9e6 1b08          	add	a,(OFST+5,sp)
7468  b9e8 5f            	clrw	x
7469  b9e9 97            	ld	xl,a
7470  b9ea 1f02          	ldw	(OFST-1,sp),x
7472                     ; 4375     switch(itemnum)
7474  b9ec 7b04          	ld	a,(OFST+1,sp)
7476                     ; 4383     default: break;
7477  b9ee 2711          	jreq	L1172
7478  b9f0 4a            	dec	a
7479  b9f1 2715          	jreq	L3172
7480  b9f3 4a            	dec	a
7481  b9f4 2719          	jreq	L5172
7482  b9f6 4a            	dec	a
7483  b9f7 271d          	jreq	L7172
7484  b9f9 4a            	dec	a
7485  b9fa 2721          	jreq	L1272
7486  b9fc 4a            	dec	a
7487  b9fd 2725          	jreq	L3272
7488  b9ff 2028          	jra	L3772
7489  ba01               L1172:
7490                     ; 4377     case 0: Pending_uip_ethaddr_oct[5] = (uint8_t)temp; break;
7492  ba01 7b03          	ld	a,(OFST+0,sp)
7493  ba03 c70112        	ld	_Pending_uip_ethaddr_oct+5,a
7496  ba06 2021          	jra	L3772
7497  ba08               L3172:
7498                     ; 4378     case 1: Pending_uip_ethaddr_oct[4] = (uint8_t)temp; break;
7500  ba08 7b03          	ld	a,(OFST+0,sp)
7501  ba0a c70111        	ld	_Pending_uip_ethaddr_oct+4,a
7504  ba0d 201a          	jra	L3772
7505  ba0f               L5172:
7506                     ; 4379     case 2: Pending_uip_ethaddr_oct[3] = (uint8_t)temp; break;
7508  ba0f 7b03          	ld	a,(OFST+0,sp)
7509  ba11 c70110        	ld	_Pending_uip_ethaddr_oct+3,a
7512  ba14 2013          	jra	L3772
7513  ba16               L7172:
7514                     ; 4380     case 3: Pending_uip_ethaddr_oct[2] = (uint8_t)temp; break;
7516  ba16 7b03          	ld	a,(OFST+0,sp)
7517  ba18 c7010f        	ld	_Pending_uip_ethaddr_oct+2,a
7520  ba1b 200c          	jra	L3772
7521  ba1d               L1272:
7522                     ; 4381     case 4: Pending_uip_ethaddr_oct[1] = (uint8_t)temp; break;
7524  ba1d 7b03          	ld	a,(OFST+0,sp)
7525  ba1f c7010e        	ld	_Pending_uip_ethaddr_oct+1,a
7528  ba22 2005          	jra	L3772
7529  ba24               L3272:
7530                     ; 4382     case 5: Pending_uip_ethaddr_oct[0] = (uint8_t)temp; break;
7532  ba24 7b03          	ld	a,(OFST+0,sp)
7533  ba26 c7010d        	ld	_Pending_uip_ethaddr_oct,a
7536                     ; 4383     default: break;
7538  ba29               L3772:
7539                     ; 4386 }
7542  ba29 5b05          	addw	sp,#5
7543  ba2b 81            	ret	
7927                     	switch	.bss
7928  0017               _insertion_flag:
7929  0017 000000        	ds.b	3
7930                     	xdef	_insertion_flag
7931                     	xref	_MQTT_error_status
7932                     	xref	_mqtt_start_status
7933                     	xref	_Pending_mqtt_password
7934                     	xref	_Pending_mqtt_username
7935                     	xref	_Pending_mqttport
7936                     	xref	_Pending_mqttserveraddr
7937                     	xref	_stored_mqtt_password
7938                     	xref	_stored_mqtt_username
7939                     	xref	_stored_mqttport
7940                     	xref	_stored_mqttserveraddr
7941  001a               _current_webpage:
7942  001a 00            	ds.b	1
7943                     	xdef	_current_webpage
7944  001b               _alpha:
7945  001b 000000000000  	ds.b	6
7946                     	xdef	_alpha
7947  0021               _break_while:
7948  0021 00            	ds.b	1
7949                     	xdef	_break_while
7950  0022               _tmp_nParseLeft:
7951  0022 00            	ds.b	1
7952                     	xdef	_tmp_nParseLeft
7953  0023               _tmp_nBytes:
7954  0023 0000          	ds.b	2
7955                     	xdef	_tmp_nBytes
7956  0025               _tmp_pBuffer:
7957  0025 0000          	ds.b	2
7958                     	xdef	_tmp_pBuffer
7959  0027               _z_diag:
7960  0027 00            	ds.b	1
7961                     	xdef	_z_diag
7962  0028               _saved_newlines:
7963  0028 00            	ds.b	1
7964                     	xdef	_saved_newlines
7965  0029               _saved_postpartial_previous:
7966  0029 000000000000  	ds.b	24
7967                     	xdef	_saved_postpartial_previous
7968  0041               _saved_postpartial:
7969  0041 000000000000  	ds.b	24
7970                     	xdef	_saved_postpartial
7971  0059               _saved_nparseleft:
7972  0059 00            	ds.b	1
7973                     	xdef	_saved_nparseleft
7974  005a               _saved_parsestate:
7975  005a 00            	ds.b	1
7976                     	xdef	_saved_parsestate
7977  005b               _saved_nstate:
7978  005b 00            	ds.b	1
7979                     	xdef	_saved_nstate
7980  005c               _OctetArray:
7981  005c 000000000000  	ds.b	11
7982                     	xdef	_OctetArray
7983                     	xref	_user_reboot_request
7984                     	xref	_parse_complete
7985                     	xref	_mac_string
7986                     	xref	_stored_config_settings
7987                     	xref	_stored_devicename
7988                     	xref	_stored_port
7989                     	xref	_stored_netmask
7990                     	xref	_stored_draddr
7991                     	xref	_stored_hostaddr
7992                     	xref	_Pending_uip_ethaddr_oct
7993                     	xref	_Pending_config_settings
7994                     	xref	_Pending_devicename
7995                     	xref	_Pending_port
7996                     	xref	_Pending_netmask
7997                     	xref	_Pending_draddr
7998                     	xref	_Pending_hostaddr
7999                     	xref	_invert_input
8000                     	xref	_IO_8to1
8001                     	xref	_IO_16to9
8002                     	xref	_Port_Httpd
8003                     	xref	_strlen
8004                     	xref	_debugflash
8005                     	xref	_uip_flags
8006                     	xref	_uip_conn
8007                     	xref	_uip_len
8008                     	xref	_uip_appdata
8009                     	xref	_htons
8010                     	xref	_uip_send
8011                     	xref	_uip_listen
8012                     	xdef	_SetMAC
8013                     	xdef	_clear_saved_postpartial_previous
8014                     	xdef	_clear_saved_postpartial_data
8015                     	xdef	_clear_saved_postpartial_all
8016                     	xdef	_GpioSetPin
8017                     	xdef	_GpioGetPin
8018                     	xdef	_parse_POST_port
8019                     	xdef	_parse_POST_address
8020                     	xdef	_parse_POST_string
8021                     	xdef	_HttpDCall
8022                     	xdef	_HttpDInit
8023                     	xdef	_emb_itoa
8024                     	xdef	_adjust_template_size
8025                     	switch	.const
8026  9c44               L523:
8027  9c44 436f6e6e6563  	dc.b	"Connection:close",13
8028  9c55 0a00          	dc.b	10,0
8029  9c57               L323:
8030  9c57 436f6e74656e  	dc.b	"Content-Type: text"
8031  9c69 2f68746d6c3b  	dc.b	"/html; charset=utf"
8032  9c7b 2d380d        	dc.b	"-8",13
8033  9c7e 0a00          	dc.b	10,0
8034  9c80               L123:
8035  9c80 43616368652d  	dc.b	"Cache-Control: no-"
8036  9c92 63616368652c  	dc.b	"cache, no-store",13
8037  9ca2 0a00          	dc.b	10,0
8038  9ca4               L113:
8039  9ca4 436f6e74656e  	dc.b	"Content-Length:",0
8040  9cb4               L703:
8041  9cb4 0d0a00        	dc.b	13,10,0
8042  9cb7               L503:
8043  9cb7 485454502f31  	dc.b	"HTTP/1.1 200 OK",0
8044                     	xref.b	c_lreg
8045                     	xref.b	c_x
8046                     	xref.b	c_y
8066                     	xref	c_imul
8067                     	xref	c_uitolx
8068                     	xref	c_ludv
8069                     	xref	c_lumd
8070                     	xref	c_rtol
8071                     	xref	c_ltor
8072                     	xref	c_lzmp
8073                     	end
