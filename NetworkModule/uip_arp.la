   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  9f0d               L11_broadcast_ethaddr:
  20  9f0d ff            	dc.b	255
  21  9f0e ff            	dc.b	255
  22  9f0f ff            	dc.b	255
  23  9f10 ff            	dc.b	255
  24  9f11 ff            	dc.b	255
  25  9f12 ff            	dc.b	255
  26  9f13               L31_broadcast_ipaddr:
  27  9f13 ffff          	dc.w	-1
  28  9f15 ffff          	dc.w	-1
  60                     ; 144 uip_arp_init(void)
  60                     ; 145 {
  62                     .text:	section	.text,new
  63  f1f1               _uip_arp_init:
  67                     ; 148   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
  69  f1f1 4f            	clr	a
  70  f1f2 c7056c        	ld	L12_i,a
  71  f1f5               L74:
  72                     ; 149     memset(arp_table[i].ipaddr, 0, 4);
  74  f1f5 97            	ld	xl,a
  75  f1f6 a60b          	ld	a,#11
  76  f1f8 42            	mul	x,a
  77  f1f9 1c0571        	addw	x,#L51_arp_table
  78  f1fc bf04          	ldw	c_x,x
  79  f1fe ae0004        	ldw	x,#4
  80  f201               L6:
  81  f201 5a            	decw	x
  82  f202 926f04        	clr	([c_x.w],x)
  83  f205 5d            	tnzw	x
  84  f206 26f9          	jrne	L6
  85                     ; 148   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
  87  f208 725c056c      	inc	L12_i
  90  f20c c6056c        	ld	a,L12_i
  91  f20f a104          	cp	a,#4
  92  f211 25e2          	jrult	L74
  93                     ; 151 }
  96  f213 81            	ret	
 188                     ; 166 uip_arp_timer(void)
 188                     ; 167 {
 189                     .text:	section	.text,new
 190  f214               _uip_arp_timer:
 192  f214 89            	pushw	x
 193       00000002      OFST:	set	2
 196                     ; 170   ++arptime;
 198  f215 725c056a      	inc	L52_arptime
 199                     ; 171   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 201  f219 4f            	clr	a
 202  f21a c7056c        	ld	L12_i,a
 203  f21d               L321:
 204                     ; 172     tabptr = &arp_table[i];
 206  f21d 97            	ld	xl,a
 207  f21e a60b          	ld	a,#11
 208  f220 42            	mul	x,a
 209  f221 1c0571        	addw	x,#L51_arp_table
 210  f224 1f01          	ldw	(OFST-1,sp),x
 212                     ; 173     if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 212                     ; 174        arptime - tabptr->time >= UIP_ARP_MAXAGE) {
 214  f226 1601          	ldw	y,(OFST-1,sp)
 215  f228 ee02          	ldw	x,(2,x)
 216  f22a 01            	rrwa	x,a
 217  f22b 90ea01        	or	a,(1,y)
 218  f22e 01            	rrwa	x,a
 219  f22f 90fa          	or	a,(y)
 220  f231 01            	rrwa	x,a
 221  f232 5d            	tnzw	x
 222  f233 271e          	jreq	L131
 224  f235 c6056a        	ld	a,L52_arptime
 225  f238 5f            	clrw	x
 226  f239 90e00a        	sub	a,(10,y)
 227  f23c 2401          	jrnc	L21
 228  f23e 5a            	decw	x
 229  f23f               L21:
 230  f23f 02            	rlwa	x,a
 231  f240 a30078        	cpw	x,#120
 232  f243 2f0e          	jrslt	L131
 233                     ; 175       memset(tabptr->ipaddr, 0, 4);
 235  f245 1e01          	ldw	x,(OFST-1,sp)
 236  f247 bf04          	ldw	c_x,x
 237  f249 ae0004        	ldw	x,#4
 238  f24c               L41:
 239  f24c 5a            	decw	x
 240  f24d 926f04        	clr	([c_x.w],x)
 241  f250 5d            	tnzw	x
 242  f251 26f9          	jrne	L41
 243  f253               L131:
 244                     ; 171   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 246  f253 725c056c      	inc	L12_i
 249  f257 c6056c        	ld	a,L12_i
 250  f25a a104          	cp	a,#4
 251  f25c 25bf          	jrult	L321
 252                     ; 178 }
 255  f25e 85            	popw	x
 256  f25f 81            	ret	
 321                     ; 183 uip_arp_update(uint16_t *ipaddr, struct uip_eth_addr *ethaddr)
 321                     ; 184 {
 322                     .text:	section	.text,new
 323  f260               L331_uip_arp_update:
 325  f260 89            	pushw	x
 326  f261 5204          	subw	sp,#4
 327       00000004      OFST:	set	4
 330                     ; 189   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 332  f263 4f            	clr	a
 333  f264 c7056c        	ld	L12_i,a
 334  f267               L761:
 335                     ; 191     tabptr = &arp_table[i];
 337  f267 97            	ld	xl,a
 338  f268 a60b          	ld	a,#11
 339  f26a 42            	mul	x,a
 340  f26b 1c0571        	addw	x,#L51_arp_table
 341  f26e 1f03          	ldw	(OFST-1,sp),x
 343                     ; 193     if(tabptr->ipaddr[0] != 0 &&
 343                     ; 194        tabptr->ipaddr[1] != 0) {
 345  f270 e601          	ld	a,(1,x)
 346  f272 fa            	or	a,(x)
 347  f273 2733          	jreq	L571
 349  f275 e603          	ld	a,(3,x)
 350  f277 ea02          	or	a,(2,x)
 351  f279 272d          	jreq	L571
 352                     ; 198       if(ipaddr[0] == tabptr->ipaddr[0] &&
 352                     ; 199 	 ipaddr[1] == tabptr->ipaddr[1]) {
 354  f27b 1e05          	ldw	x,(OFST+1,sp)
 355  f27d 1603          	ldw	y,(OFST-1,sp)
 356  f27f fe            	ldw	x,(x)
 357  f280 90f3          	cpw	x,(y)
 358  f282 2624          	jrne	L571
 360  f284 1e05          	ldw	x,(OFST+1,sp)
 361  f286 ee02          	ldw	x,(2,x)
 362  f288 90e302        	cpw	x,(2,y)
 363  f28b 261b          	jrne	L571
 364                     ; 202 	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 366  f28d 93            	ldw	x,y
 367  f28e 1c0004        	addw	x,#4
 368  f291 bf04          	ldw	c_x,x
 369  f293 1609          	ldw	y,(OFST+5,sp)
 370  f295 90bf07        	ldw	c_y,y
 371  f298 ae0006        	ldw	x,#6
 372  f29b               L02:
 373  f29b 5a            	decw	x
 374  f29c 92d607        	ld	a,([c_y.w],x)
 375  f29f 92d704        	ld	([c_x.w],x),a
 376  f2a2 5d            	tnzw	x
 377  f2a3 26f6          	jrne	L02
 378                     ; 203 	tabptr->time = arptime;
 379                     ; 205 	return;
 381  f2a5 ccf361        	jra	L03
 382  f2a8               L571:
 383                     ; 189   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 385  f2a8 725c056c      	inc	L12_i
 388  f2ac c6056c        	ld	a,L12_i
 389  f2af a104          	cp	a,#4
 390  f2b1 25b4          	jrult	L761
 391                     ; 214   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 393  f2b3 4f            	clr	a
 394  f2b4 c7056c        	ld	L12_i,a
 395  f2b7               L102:
 396                     ; 215     tabptr = &arp_table[i];
 398  f2b7 97            	ld	xl,a
 399  f2b8 a60b          	ld	a,#11
 400  f2ba 42            	mul	x,a
 401  f2bb 1c0571        	addw	x,#L51_arp_table
 402  f2be 1f03          	ldw	(OFST-1,sp),x
 404                     ; 216     if(tabptr->ipaddr[0] == 0 &&
 404                     ; 217        tabptr->ipaddr[1] == 0) {
 406  f2c0 e601          	ld	a,(1,x)
 407  f2c2 fa            	or	a,(x)
 408  f2c3 2606          	jrne	L702
 410  f2c5 e603          	ld	a,(3,x)
 411  f2c7 ea02          	or	a,(2,x)
 412  f2c9 270b          	jreq	L502
 413                     ; 218       break;
 415  f2cb               L702:
 416                     ; 214   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 418  f2cb 725c056c      	inc	L12_i
 421  f2cf c6056c        	ld	a,L12_i
 422  f2d2 a104          	cp	a,#4
 423  f2d4 25e1          	jrult	L102
 424  f2d6               L502:
 425                     ; 224   if(i == UIP_ARPTAB_SIZE) {
 427  f2d6 c6056c        	ld	a,L12_i
 428  f2d9 a104          	cp	a,#4
 429  f2db 2657          	jrne	L112
 430                     ; 225     tmpage = 0;
 432  f2dd 725f0569      	clr	L72_tmpage
 433                     ; 226     c = 0;
 435  f2e1 725f056b      	clr	L32_c
 436                     ; 227     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 438  f2e5 4f            	clr	a
 439  f2e6 c7056c        	ld	L12_i,a
 440  f2e9               L312:
 441                     ; 228       tabptr = &arp_table[i];
 443  f2e9 97            	ld	xl,a
 444  f2ea a60b          	ld	a,#11
 445  f2ec 42            	mul	x,a
 446  f2ed 1c0571        	addw	x,#L51_arp_table
 447  f2f0 1f03          	ldw	(OFST-1,sp),x
 449                     ; 229       if(arptime - tabptr->time > tmpage) {
 451  f2f2 5f            	clrw	x
 452  f2f3 c60569        	ld	a,L72_tmpage
 453  f2f6 97            	ld	xl,a
 454  f2f7 1f01          	ldw	(OFST-3,sp),x
 456  f2f9 5f            	clrw	x
 457  f2fa 1603          	ldw	y,(OFST-1,sp)
 458  f2fc c6056a        	ld	a,L52_arptime
 459  f2ff 90e00a        	sub	a,(10,y)
 460  f302 2401          	jrnc	L22
 461  f304 5a            	decw	x
 462  f305               L22:
 463  f305 02            	rlwa	x,a
 464  f306 1301          	cpw	x,(OFST-3,sp)
 465  f308 2d10          	jrsle	L122
 466                     ; 230 	tmpage = (uint8_t)(arptime - tabptr->time);
 468  f30a 1e03          	ldw	x,(OFST-1,sp)
 469  f30c e60a          	ld	a,(10,x)
 470  f30e c0056a        	sub	a,L52_arptime
 471  f311 40            	neg	a
 472  f312 c70569        	ld	L72_tmpage,a
 473                     ; 231 	c = i;
 475  f315 55056c056b    	mov	L32_c,L12_i
 476  f31a               L122:
 477                     ; 227     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 479  f31a 725c056c      	inc	L12_i
 482  f31e c6056c        	ld	a,L12_i
 483  f321 a104          	cp	a,#4
 484  f323 25c4          	jrult	L312
 485                     ; 234     i = c;
 487  f325 c6056b        	ld	a,L32_c
 488  f328 c7056c        	ld	L12_i,a
 489                     ; 235     tabptr = &arp_table[i];
 491  f32b 97            	ld	xl,a
 492  f32c a60b          	ld	a,#11
 493  f32e 42            	mul	x,a
 494  f32f 1c0571        	addw	x,#L51_arp_table
 495  f332 1f03          	ldw	(OFST-1,sp),x
 497  f334               L112:
 498                     ; 240   memcpy(tabptr->ipaddr, ipaddr, 4);
 500  f334 bf04          	ldw	c_x,x
 501  f336 1605          	ldw	y,(OFST+1,sp)
 502  f338 90bf07        	ldw	c_y,y
 503  f33b ae0004        	ldw	x,#4
 504  f33e               L42:
 505  f33e 5a            	decw	x
 506  f33f 92d607        	ld	a,([c_y.w],x)
 507  f342 92d704        	ld	([c_x.w],x),a
 508  f345 5d            	tnzw	x
 509  f346 26f6          	jrne	L42
 510                     ; 241   memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 512  f348 1e03          	ldw	x,(OFST-1,sp)
 513  f34a 1c0004        	addw	x,#4
 514  f34d bf04          	ldw	c_x,x
 515  f34f 1609          	ldw	y,(OFST+5,sp)
 516  f351 90bf07        	ldw	c_y,y
 517  f354 ae0006        	ldw	x,#6
 518  f357               L62:
 519  f357 5a            	decw	x
 520  f358 92d607        	ld	a,([c_y.w],x)
 521  f35b 92d704        	ld	([c_x.w],x),a
 522  f35e 5d            	tnzw	x
 523  f35f 26f6          	jrne	L62
 524                     ; 242   tabptr->time = arptime;
 526                     ; 243 }
 527  f361               L03:
 529  f361 1e03          	ldw	x,(OFST-1,sp)
 530  f363 c6056a        	ld	a,L52_arptime
 531  f366 e70a          	ld	(10,x),a
 534  f368 5b06          	addw	sp,#6
 535  f36a 81            	ret	
 564                     ; 270 uip_arp_arpin(void)
 564                     ; 271 {
 565                     .text:	section	.text,new
 566  f36b               _uip_arp_arpin:
 570                     ; 272   if(uip_len < sizeof(struct arp_hdr)) {
 572  f36b ce036f        	ldw	x,_uip_len
 573  f36e a3002a        	cpw	x,#42
 574  f371 5f            	clrw	x
 575  f372 2404          	jruge	L732
 576                     ; 273     uip_len = 0;
 578  f374 cf036f        	ldw	_uip_len,x
 579                     ; 274     return;
 582  f377 81            	ret	
 583  f378               L732:
 584                     ; 276   uip_len = 0;
 586  f378 cf036f        	ldw	_uip_len,x
 587                     ; 278   switch(BUF->opcode) {
 589  f37b ce0387        	ldw	x,_uip_buf+20
 591                     ; 310     break;
 592  f37e 5a            	decw	x
 593  f37f 2704          	jreq	L322
 594  f381 5a            	decw	x
 595  f382 277a          	jreq	L522
 597  f384 81            	ret	
 598  f385               L322:
 599                     ; 279   case HTONS(ARP_REQUEST):
 599                     ; 280     /* ARP request. If it asked for our address, we send out a reply. */
 599                     ; 281     if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 601  f385 ce0399        	ldw	x,_uip_buf+38
 602  f388 c302c0        	cpw	x,_uip_hostaddr
 603  f38b 2703ccf419    	jrne	L342
 605  f390 ce039b        	ldw	x,_uip_buf+40
 606  f393 c302c2        	cpw	x,_uip_hostaddr+2
 607  f396 26f5          	jrne	L342
 608                     ; 285       uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 610  f398 ae0389        	ldw	x,#_uip_buf+22
 611  f39b 89            	pushw	x
 612  f39c ae038f        	ldw	x,#_uip_buf+28
 613  f39f cdf260        	call	L331_uip_arp_update
 615  f3a2 85            	popw	x
 616                     ; 288       BUF->opcode = HTONS(2);
 618  f3a3 ae0002        	ldw	x,#2
 619  f3a6 cf0387        	ldw	_uip_buf+20,x
 620                     ; 290       memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 622  f3a9 ae0006        	ldw	x,#6
 623  f3ac               L63:
 624  f3ac d60388        	ld	a,(_uip_buf+21,x)
 625  f3af d70392        	ld	(_uip_buf+31,x),a
 626  f3b2 5a            	decw	x
 627  f3b3 26f7          	jrne	L63
 628                     ; 291       memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 630  f3b5 ae0006        	ldw	x,#6
 631  f3b8               L04:
 632  f3b8 d60009        	ld	a,(_uip_ethaddr-1,x)
 633  f3bb d70388        	ld	(_uip_buf+21,x),a
 634  f3be 5a            	decw	x
 635  f3bf 26f7          	jrne	L04
 636                     ; 292       memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 638  f3c1 ae0006        	ldw	x,#6
 639  f3c4               L24:
 640  f3c4 d60009        	ld	a,(_uip_ethaddr-1,x)
 641  f3c7 d70378        	ld	(_uip_buf+5,x),a
 642  f3ca 5a            	decw	x
 643  f3cb 26f7          	jrne	L24
 644                     ; 293       memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 646  f3cd ae0006        	ldw	x,#6
 647  f3d0               L44:
 648  f3d0 d60392        	ld	a,(_uip_buf+31,x)
 649  f3d3 d70372        	ld	(_uip_buf-1,x),a
 650  f3d6 5a            	decw	x
 651  f3d7 26f7          	jrne	L44
 652                     ; 295       BUF->dipaddr[0] = BUF->sipaddr[0];
 654  f3d9 ce038f        	ldw	x,_uip_buf+28
 655  f3dc cf0399        	ldw	_uip_buf+38,x
 656                     ; 296       BUF->dipaddr[1] = BUF->sipaddr[1];
 658  f3df ce0391        	ldw	x,_uip_buf+30
 659  f3e2 cf039b        	ldw	_uip_buf+40,x
 660                     ; 297       BUF->sipaddr[0] = uip_hostaddr[0];
 662  f3e5 ce02c0        	ldw	x,_uip_hostaddr
 663  f3e8 cf038f        	ldw	_uip_buf+28,x
 664                     ; 298       BUF->sipaddr[1] = uip_hostaddr[1];
 666  f3eb ce02c2        	ldw	x,_uip_hostaddr+2
 667  f3ee cf0391        	ldw	_uip_buf+30,x
 668                     ; 300       BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 670  f3f1 ae0806        	ldw	x,#2054
 671  f3f4 cf037f        	ldw	_uip_buf+12,x
 672                     ; 301       uip_len = sizeof(struct arp_hdr);
 674  f3f7 ae002a        	ldw	x,#42
 675  f3fa cf036f        	ldw	_uip_len,x
 677  f3fd 81            	ret	
 678  f3fe               L522:
 679                     ; 304   case HTONS(ARP_REPLY):
 679                     ; 305     /* ARP reply. We insert or update the ARP table if it was meant
 679                     ; 306        for us. */
 679                     ; 307     if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 681  f3fe ce0399        	ldw	x,_uip_buf+38
 682  f401 c302c0        	cpw	x,_uip_hostaddr
 683  f404 2613          	jrne	L342
 685  f406 ce039b        	ldw	x,_uip_buf+40
 686  f409 c302c2        	cpw	x,_uip_hostaddr+2
 687  f40c 260b          	jrne	L342
 688                     ; 308       uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 690  f40e ae0389        	ldw	x,#_uip_buf+22
 691  f411 89            	pushw	x
 692  f412 ae038f        	ldw	x,#_uip_buf+28
 693  f415 cdf260        	call	L331_uip_arp_update
 695  f418 85            	popw	x
 696  f419               L342:
 697                     ; 313   return;
 700  f419 81            	ret	
 751                     ; 342 uip_arp_out(void)
 751                     ; 343 {
 752                     .text:	section	.text,new
 753  f41a               _uip_arp_out:
 755       00000002      OFST:	set	2
 758                     ; 354   if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
 760  f41a ce0391        	ldw	x,_uip_buf+30
 761  f41d c39f13        	cpw	x,L31_broadcast_ipaddr
 762  f420 2617          	jrne	L172
 764  f422 ce0393        	ldw	x,_uip_buf+32
 765  f425 c39f15        	cpw	x,L31_broadcast_ipaddr+2
 766  f428 260f          	jrne	L172
 767                     ; 355     memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 769  f42a ae0006        	ldw	x,#6
 770  f42d               L25:
 771  f42d d69f0c        	ld	a,(L11_broadcast_ethaddr-1,x)
 772  f430 d70372        	ld	(_uip_buf-1,x),a
 773  f433 5a            	decw	x
 774  f434 26f7          	jrne	L25
 776  f436 ccf549        	jra	L372
 777  f439               L172:
 778                     ; 359     if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
 780  f439 ce0391        	ldw	x,_uip_buf+30
 781  f43c 01            	rrwa	x,a
 782  f43d c402bd        	and	a,_uip_netmask+1
 783  f440 01            	rrwa	x,a
 784  f441 c402bc        	and	a,_uip_netmask
 785  f444 01            	rrwa	x,a
 786  f445 90ce02c0      	ldw	y,_uip_hostaddr
 787  f449 9001          	rrwa	y,a
 788  f44b c402bd        	and	a,_uip_netmask+1
 789  f44e 9001          	rrwa	y,a
 790  f450 c402bc        	and	a,_uip_netmask
 791  f453 9001          	rrwa	y,a
 792  f455 90bf07        	ldw	c_y,y
 793  f458 b307          	cpw	x,c_y
 794  f45a 2623          	jrne	L103
 796  f45c ce0393        	ldw	x,_uip_buf+32
 797  f45f 01            	rrwa	x,a
 798  f460 c402bf        	and	a,_uip_netmask+3
 799  f463 01            	rrwa	x,a
 800  f464 c402be        	and	a,_uip_netmask+2
 801  f467 01            	rrwa	x,a
 802  f468 90ce02c2      	ldw	y,_uip_hostaddr+2
 803  f46c 9001          	rrwa	y,a
 804  f46e c402bf        	and	a,_uip_netmask+3
 805  f471 9001          	rrwa	y,a
 806  f473 c402be        	and	a,_uip_netmask+2
 807  f476 9001          	rrwa	y,a
 808  f478 90bf07        	ldw	c_y,y
 809  f47b b307          	cpw	x,c_y
 810  f47d 2731          	jreq	L703
 811  f47f               L103:
 812                     ; 363       uip_ipaddr_copy(ipaddr, uip_draddr);
 814  f47f ce02b8        	ldw	x,_uip_draddr
 815  f482 cf056d        	ldw	L71_ipaddr,x
 818  f485 ce02ba        	ldw	x,_uip_draddr+2
 820  f488               L503:
 821  f488 cf056f        	ldw	L71_ipaddr+2,x
 822                     ; 370     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 824  f48b 4f            	clr	a
 825  f48c c7056c        	ld	L12_i,a
 826  f48f               L313:
 827                     ; 372       tabptr = &arp_table[i];
 829  f48f 97            	ld	xl,a
 830  f490 a60b          	ld	a,#11
 831  f492 42            	mul	x,a
 832  f493 1c0571        	addw	x,#L51_arp_table
 834                     ; 373       if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
 836  f496 9093          	ldw	y,x
 837  f498 90fe          	ldw	y,(y)
 838  f49a 90c3056d      	cpw	y,L71_ipaddr
 839  f49e 261b          	jrne	L123
 841  f4a0 9093          	ldw	y,x
 842  f4a2 90ee02        	ldw	y,(2,y)
 843  f4a5 90c3056f      	cpw	y,L71_ipaddr+2
 844  f4a9 2610          	jrne	L123
 845                     ; 375 	break;
 847  f4ab c6056c        	ld	a,L12_i
 848  f4ae 2016          	jra	L713
 849  f4b0               L703:
 850                     ; 367       uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 852  f4b0 ce0391        	ldw	x,_uip_buf+30
 853  f4b3 cf056d        	ldw	L71_ipaddr,x
 856  f4b6 ce0393        	ldw	x,_uip_buf+32
 857  f4b9 20cd          	jra	L503
 858  f4bb               L123:
 859                     ; 370     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 861  f4bb 725c056c      	inc	L12_i
 864  f4bf c6056c        	ld	a,L12_i
 865  f4c2 a104          	cp	a,#4
 866  f4c4 25c9          	jrult	L313
 867  f4c6               L713:
 868                     ; 379     if(i == UIP_ARPTAB_SIZE) {
 870  f4c6 a104          	cp	a,#4
 871  f4c8 266d          	jrne	L323
 872                     ; 383       memset(BUF->ethhdr.dest.addr, 0xff, 6);
 874  f4ca a6ff          	ld	a,#255
 875  f4cc ae0006        	ldw	x,#6
 876  f4cf               L45:
 877  f4cf d70372        	ld	(_uip_buf-1,x),a
 878  f4d2 5a            	decw	x
 879  f4d3 26fa          	jrne	L45
 880                     ; 384       memset(BUF->dhwaddr.addr, 0x00, 6);
 882  f4d5 ae0006        	ldw	x,#6
 883  f4d8               L65:
 884  f4d8 724f0392      	clr	(_uip_buf+31,x)
 885  f4dc 5a            	decw	x
 886  f4dd 26f9          	jrne	L65
 887                     ; 385       memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 889  f4df ae0006        	ldw	x,#6
 890  f4e2               L06:
 891  f4e2 d60009        	ld	a,(_uip_ethaddr-1,x)
 892  f4e5 d70378        	ld	(_uip_buf+5,x),a
 893  f4e8 5a            	decw	x
 894  f4e9 26f7          	jrne	L06
 895                     ; 386       memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 897  f4eb ae0006        	ldw	x,#6
 898  f4ee               L26:
 899  f4ee d60009        	ld	a,(_uip_ethaddr-1,x)
 900  f4f1 d70388        	ld	(_uip_buf+21,x),a
 901  f4f4 5a            	decw	x
 902  f4f5 26f7          	jrne	L26
 903                     ; 388       uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 905  f4f7 ce056d        	ldw	x,L71_ipaddr
 906  f4fa cf0399        	ldw	_uip_buf+38,x
 909  f4fd ce056f        	ldw	x,L71_ipaddr+2
 910  f500 cf039b        	ldw	_uip_buf+40,x
 911                     ; 389       uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 913  f503 ce02c0        	ldw	x,_uip_hostaddr
 914  f506 cf038f        	ldw	_uip_buf+28,x
 917  f509 ce02c2        	ldw	x,_uip_hostaddr+2
 918  f50c cf0391        	ldw	_uip_buf+30,x
 919                     ; 390       BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 921  f50f ae0001        	ldw	x,#1
 922  f512 cf0387        	ldw	_uip_buf+20,x
 923                     ; 391       BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 925  f515 cf0381        	ldw	_uip_buf+14,x
 926                     ; 392       BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 928  f518 ae0800        	ldw	x,#2048
 929  f51b cf0383        	ldw	_uip_buf+16,x
 930                     ; 393       BUF->hwlen = 6;
 932  f51e 35060385      	mov	_uip_buf+18,#6
 933                     ; 394       BUF->protolen = 4;
 935  f522 35040386      	mov	_uip_buf+19,#4
 936                     ; 395       BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 938  f526 ae0806        	ldw	x,#2054
 939  f529 cf037f        	ldw	_uip_buf+12,x
 940                     ; 397       uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 942  f52c ae03a9        	ldw	x,#_uip_buf+54
 943  f52f cf0371        	ldw	_uip_appdata,x
 944                     ; 399       uip_len = sizeof(struct arp_hdr);
 946  f532 ae002a        	ldw	x,#42
 947                     ; 400       return;
 949  f535 202a          	jra	L07
 950  f537               L323:
 951                     ; 404     memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 953  f537 1c0004        	addw	x,#4
 954  f53a bf04          	ldw	c_x,x
 955  f53c ae0006        	ldw	x,#6
 956  f53f               L46:
 957  f53f 5a            	decw	x
 958  f540 92d604        	ld	a,([c_x.w],x)
 959  f543 d70373        	ld	(_uip_buf,x),a
 960  f546 5d            	tnzw	x
 961  f547 26f6          	jrne	L46
 962  f549               L372:
 963                     ; 406   memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 965  f549 ae0006        	ldw	x,#6
 966  f54c               L66:
 967  f54c d60009        	ld	a,(_uip_ethaddr-1,x)
 968  f54f d70378        	ld	(_uip_buf+5,x),a
 969  f552 5a            	decw	x
 970  f553 26f7          	jrne	L66
 971                     ; 408   IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 973  f555 ae0800        	ldw	x,#2048
 974  f558 cf037f        	ldw	_uip_buf+12,x
 975                     ; 410   uip_len += sizeof(struct uip_eth_hdr);
 977  f55b ce036f        	ldw	x,_uip_len
 978  f55e 1c000e        	addw	x,#14
 979                     ; 411 }
 980  f561               L07:
 981  f561 cf036f        	ldw	_uip_len,x
 984  f564 81            	ret	
1029                     ; 475 int check_mqtt_server_arp_entry(void)
1029                     ; 476 {
1030                     .text:	section	.text,new
1031  f565               _check_mqtt_server_arp_entry:
1033       00000002      OFST:	set	2
1036                     ; 481   if(!uip_ipaddr_maskcmp(uip_mqttserveraddr, uip_hostaddr, uip_netmask)) {
1038  f565 ce02b4        	ldw	x,_uip_mqttserveraddr
1039  f568 01            	rrwa	x,a
1040  f569 c402bd        	and	a,_uip_netmask+1
1041  f56c 01            	rrwa	x,a
1042  f56d c402bc        	and	a,_uip_netmask
1043  f570 01            	rrwa	x,a
1044  f571 90ce02c0      	ldw	y,_uip_hostaddr
1045  f575 9001          	rrwa	y,a
1046  f577 c402bd        	and	a,_uip_netmask+1
1047  f57a 9001          	rrwa	y,a
1048  f57c c402bc        	and	a,_uip_netmask
1049  f57f 9001          	rrwa	y,a
1050  f581 90bf07        	ldw	c_y,y
1051  f584 b307          	cpw	x,c_y
1052  f586 2623          	jrne	L163
1054  f588 ce02b6        	ldw	x,_uip_mqttserveraddr+2
1055  f58b 01            	rrwa	x,a
1056  f58c c402bf        	and	a,_uip_netmask+3
1057  f58f 01            	rrwa	x,a
1058  f590 c402be        	and	a,_uip_netmask+2
1059  f593 01            	rrwa	x,a
1060  f594 90ce02c2      	ldw	y,_uip_hostaddr+2
1061  f598 9001          	rrwa	y,a
1062  f59a c402bf        	and	a,_uip_netmask+3
1063  f59d 9001          	rrwa	y,a
1064  f59f c402be        	and	a,_uip_netmask+2
1065  f5a2 9001          	rrwa	y,a
1066  f5a4 90bf07        	ldw	c_y,y
1067  f5a7 b307          	cpw	x,c_y
1068  f5a9 2730          	jreq	L763
1069  f5ab               L163:
1070                     ; 485     uip_ipaddr_copy(ipaddr, uip_draddr);
1072  f5ab ce02b8        	ldw	x,_uip_draddr
1073  f5ae cf056d        	ldw	L71_ipaddr,x
1076  f5b1 ce02ba        	ldw	x,_uip_draddr+2
1078  f5b4               L563:
1079  f5b4 cf056f        	ldw	L71_ipaddr+2,x
1080                     ; 492   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
1082  f5b7 4f            	clr	a
1083  f5b8 c7056c        	ld	L12_i,a
1084  f5bb               L373:
1085                     ; 494     tabptr = &arp_table[i];
1087  f5bb 97            	ld	xl,a
1088  f5bc a60b          	ld	a,#11
1089  f5be 42            	mul	x,a
1090  f5bf 1c0571        	addw	x,#L51_arp_table
1092                     ; 495     if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
1094  f5c2 9093          	ldw	y,x
1095  f5c4 90fe          	ldw	y,(y)
1096  f5c6 90c3056d      	cpw	y,L71_ipaddr
1097  f5ca 261a          	jrne	L104
1099  f5cc 9093          	ldw	y,x
1100  f5ce 90ee02        	ldw	y,(2,y)
1101  f5d1 90c3056f      	cpw	y,L71_ipaddr+2
1102  f5d5 260f          	jrne	L104
1103                     ; 497       return (uint8_t)1;
1105  f5d7 ae0001        	ldw	x,#1
1108  f5da 81            	ret	
1109  f5db               L763:
1110                     ; 489     uip_ipaddr_copy(ipaddr, uip_mqttserveraddr);
1112  f5db ce02b4        	ldw	x,_uip_mqttserveraddr
1113  f5de cf056d        	ldw	L71_ipaddr,x
1116  f5e1 ce02b6        	ldw	x,_uip_mqttserveraddr+2
1117  f5e4 20ce          	jra	L563
1118  f5e6               L104:
1119                     ; 492   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
1122  f5e6 725c056c      	inc	L12_i
1125  f5ea c6056c        	ld	a,L12_i
1126  f5ed a104          	cp	a,#4
1127  f5ef 25ca          	jrult	L373
1128                     ; 501   return (uint8_t)0;
1130  f5f1 5f            	clrw	x
1133  f5f2 81            	ret	
1218                     	switch	.bss
1219  0569               L72_tmpage:
1220  0569 00            	ds.b	1
1221  056a               L52_arptime:
1222  056a 00            	ds.b	1
1223  056b               L32_c:
1224  056b 00            	ds.b	1
1225  056c               L12_i:
1226  056c 00            	ds.b	1
1227  056d               L71_ipaddr:
1228  056d 00000000      	ds.b	4
1229  0571               L51_arp_table:
1230  0571 000000000000  	ds.b	44
1231                     	xdef	_check_mqtt_server_arp_entry
1232                     	xdef	_uip_arp_timer
1233                     	xdef	_uip_arp_out
1234                     	xdef	_uip_arp_arpin
1235                     	xdef	_uip_arp_init
1236                     	xref	_uip_ethaddr
1237                     	xref	_uip_mqttserveraddr
1238                     	xref	_uip_draddr
1239                     	xref	_uip_netmask
1240                     	xref	_uip_hostaddr
1241                     	xref	_uip_len
1242                     	xref	_uip_appdata
1243                     	xref	_uip_buf
1244                     	xref.b	c_x
1245                     	xref.b	c_y
1265                     	end
