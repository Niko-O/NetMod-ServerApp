   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
  18                     .const:	section	.text
  19  9d6c               L11_broadcast_ethaddr:
  20  9d6c ff            	dc.b	255
  21  9d6d ff            	dc.b	255
  22  9d6e ff            	dc.b	255
  23  9d6f ff            	dc.b	255
  24  9d70 ff            	dc.b	255
  25  9d71 ff            	dc.b	255
  26  9d72               L31_broadcast_ipaddr:
  27  9d72 ffff          	dc.w	-1
  28  9d74 ffff          	dc.w	-1
  60                     ; 144 uip_arp_init(void)
  60                     ; 145 {
  62                     .text:	section	.text,new
  63  eeba               _uip_arp_init:
  67                     ; 148   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
  69  eeba 4f            	clr	a
  70  eebb c70560        	ld	L12_i,a
  71  eebe               L74:
  72                     ; 149     memset(arp_table[i].ipaddr, 0, 4);
  74  eebe 97            	ld	xl,a
  75  eebf a60b          	ld	a,#11
  76  eec1 42            	mul	x,a
  77  eec2 1c0565        	addw	x,#L51_arp_table
  78  eec5 bf04          	ldw	c_x,x
  79  eec7 ae0004        	ldw	x,#4
  80  eeca               L6:
  81  eeca 5a            	decw	x
  82  eecb 926f04        	clr	([c_x.w],x)
  83  eece 5d            	tnzw	x
  84  eecf 26f9          	jrne	L6
  85                     ; 148   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
  87  eed1 725c0560      	inc	L12_i
  90  eed5 c60560        	ld	a,L12_i
  91  eed8 a104          	cp	a,#4
  92  eeda 25e2          	jrult	L74
  93                     ; 151 }
  96  eedc 81            	ret	
 188                     ; 166 uip_arp_timer(void)
 188                     ; 167 {
 189                     .text:	section	.text,new
 190  eedd               _uip_arp_timer:
 192  eedd 89            	pushw	x
 193       00000002      OFST:	set	2
 196                     ; 170   ++arptime;
 198  eede 725c055e      	inc	L52_arptime
 199                     ; 171   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 201  eee2 4f            	clr	a
 202  eee3 c70560        	ld	L12_i,a
 203  eee6               L321:
 204                     ; 172     tabptr = &arp_table[i];
 206  eee6 97            	ld	xl,a
 207  eee7 a60b          	ld	a,#11
 208  eee9 42            	mul	x,a
 209  eeea 1c0565        	addw	x,#L51_arp_table
 210  eeed 1f01          	ldw	(OFST-1,sp),x
 212                     ; 173     if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 212                     ; 174        arptime - tabptr->time >= UIP_ARP_MAXAGE) {
 214  eeef 1601          	ldw	y,(OFST-1,sp)
 215  eef1 ee02          	ldw	x,(2,x)
 216  eef3 01            	rrwa	x,a
 217  eef4 90ea01        	or	a,(1,y)
 218  eef7 01            	rrwa	x,a
 219  eef8 90fa          	or	a,(y)
 220  eefa 01            	rrwa	x,a
 221  eefb 5d            	tnzw	x
 222  eefc 271e          	jreq	L131
 224  eefe c6055e        	ld	a,L52_arptime
 225  ef01 5f            	clrw	x
 226  ef02 90e00a        	sub	a,(10,y)
 227  ef05 2401          	jrnc	L21
 228  ef07 5a            	decw	x
 229  ef08               L21:
 230  ef08 02            	rlwa	x,a
 231  ef09 a30078        	cpw	x,#120
 232  ef0c 2f0e          	jrslt	L131
 233                     ; 175       memset(tabptr->ipaddr, 0, 4);
 235  ef0e 1e01          	ldw	x,(OFST-1,sp)
 236  ef10 bf04          	ldw	c_x,x
 237  ef12 ae0004        	ldw	x,#4
 238  ef15               L41:
 239  ef15 5a            	decw	x
 240  ef16 926f04        	clr	([c_x.w],x)
 241  ef19 5d            	tnzw	x
 242  ef1a 26f9          	jrne	L41
 243  ef1c               L131:
 244                     ; 171   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 246  ef1c 725c0560      	inc	L12_i
 249  ef20 c60560        	ld	a,L12_i
 250  ef23 a104          	cp	a,#4
 251  ef25 25bf          	jrult	L321
 252                     ; 178 }
 255  ef27 85            	popw	x
 256  ef28 81            	ret	
 321                     ; 183 uip_arp_update(uint16_t *ipaddr, struct uip_eth_addr *ethaddr)
 321                     ; 184 {
 322                     .text:	section	.text,new
 323  ef29               L331_uip_arp_update:
 325  ef29 89            	pushw	x
 326  ef2a 5204          	subw	sp,#4
 327       00000004      OFST:	set	4
 330                     ; 189   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 332  ef2c 4f            	clr	a
 333  ef2d c70560        	ld	L12_i,a
 334  ef30               L761:
 335                     ; 191     tabptr = &arp_table[i];
 337  ef30 97            	ld	xl,a
 338  ef31 a60b          	ld	a,#11
 339  ef33 42            	mul	x,a
 340  ef34 1c0565        	addw	x,#L51_arp_table
 341  ef37 1f03          	ldw	(OFST-1,sp),x
 343                     ; 193     if(tabptr->ipaddr[0] != 0 &&
 343                     ; 194        tabptr->ipaddr[1] != 0) {
 345  ef39 e601          	ld	a,(1,x)
 346  ef3b fa            	or	a,(x)
 347  ef3c 2733          	jreq	L571
 349  ef3e e603          	ld	a,(3,x)
 350  ef40 ea02          	or	a,(2,x)
 351  ef42 272d          	jreq	L571
 352                     ; 198       if(ipaddr[0] == tabptr->ipaddr[0] &&
 352                     ; 199 	 ipaddr[1] == tabptr->ipaddr[1]) {
 354  ef44 1e05          	ldw	x,(OFST+1,sp)
 355  ef46 1603          	ldw	y,(OFST-1,sp)
 356  ef48 fe            	ldw	x,(x)
 357  ef49 90f3          	cpw	x,(y)
 358  ef4b 2624          	jrne	L571
 360  ef4d 1e05          	ldw	x,(OFST+1,sp)
 361  ef4f ee02          	ldw	x,(2,x)
 362  ef51 90e302        	cpw	x,(2,y)
 363  ef54 261b          	jrne	L571
 364                     ; 202 	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 366  ef56 93            	ldw	x,y
 367  ef57 1c0004        	addw	x,#4
 368  ef5a bf04          	ldw	c_x,x
 369  ef5c 1609          	ldw	y,(OFST+5,sp)
 370  ef5e 90bf07        	ldw	c_y,y
 371  ef61 ae0006        	ldw	x,#6
 372  ef64               L02:
 373  ef64 5a            	decw	x
 374  ef65 92d607        	ld	a,([c_y.w],x)
 375  ef68 92d704        	ld	([c_x.w],x),a
 376  ef6b 5d            	tnzw	x
 377  ef6c 26f6          	jrne	L02
 378                     ; 203 	tabptr->time = arptime;
 379                     ; 205 	return;
 381  ef6e ccf02a        	jra	L03
 382  ef71               L571:
 383                     ; 189   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 385  ef71 725c0560      	inc	L12_i
 388  ef75 c60560        	ld	a,L12_i
 389  ef78 a104          	cp	a,#4
 390  ef7a 25b4          	jrult	L761
 391                     ; 214   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 393  ef7c 4f            	clr	a
 394  ef7d c70560        	ld	L12_i,a
 395  ef80               L102:
 396                     ; 215     tabptr = &arp_table[i];
 398  ef80 97            	ld	xl,a
 399  ef81 a60b          	ld	a,#11
 400  ef83 42            	mul	x,a
 401  ef84 1c0565        	addw	x,#L51_arp_table
 402  ef87 1f03          	ldw	(OFST-1,sp),x
 404                     ; 216     if(tabptr->ipaddr[0] == 0 &&
 404                     ; 217        tabptr->ipaddr[1] == 0) {
 406  ef89 e601          	ld	a,(1,x)
 407  ef8b fa            	or	a,(x)
 408  ef8c 2606          	jrne	L702
 410  ef8e e603          	ld	a,(3,x)
 411  ef90 ea02          	or	a,(2,x)
 412  ef92 270b          	jreq	L502
 413                     ; 218       break;
 415  ef94               L702:
 416                     ; 214   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 418  ef94 725c0560      	inc	L12_i
 421  ef98 c60560        	ld	a,L12_i
 422  ef9b a104          	cp	a,#4
 423  ef9d 25e1          	jrult	L102
 424  ef9f               L502:
 425                     ; 224   if(i == UIP_ARPTAB_SIZE) {
 427  ef9f c60560        	ld	a,L12_i
 428  efa2 a104          	cp	a,#4
 429  efa4 2657          	jrne	L112
 430                     ; 225     tmpage = 0;
 432  efa6 725f055d      	clr	L72_tmpage
 433                     ; 226     c = 0;
 435  efaa 725f055f      	clr	L32_c
 436                     ; 227     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 438  efae 4f            	clr	a
 439  efaf c70560        	ld	L12_i,a
 440  efb2               L312:
 441                     ; 228       tabptr = &arp_table[i];
 443  efb2 97            	ld	xl,a
 444  efb3 a60b          	ld	a,#11
 445  efb5 42            	mul	x,a
 446  efb6 1c0565        	addw	x,#L51_arp_table
 447  efb9 1f03          	ldw	(OFST-1,sp),x
 449                     ; 229       if(arptime - tabptr->time > tmpage) {
 451  efbb 5f            	clrw	x
 452  efbc c6055d        	ld	a,L72_tmpage
 453  efbf 97            	ld	xl,a
 454  efc0 1f01          	ldw	(OFST-3,sp),x
 456  efc2 5f            	clrw	x
 457  efc3 1603          	ldw	y,(OFST-1,sp)
 458  efc5 c6055e        	ld	a,L52_arptime
 459  efc8 90e00a        	sub	a,(10,y)
 460  efcb 2401          	jrnc	L22
 461  efcd 5a            	decw	x
 462  efce               L22:
 463  efce 02            	rlwa	x,a
 464  efcf 1301          	cpw	x,(OFST-3,sp)
 465  efd1 2d10          	jrsle	L122
 466                     ; 230 	tmpage = (uint8_t)(arptime - tabptr->time);
 468  efd3 1e03          	ldw	x,(OFST-1,sp)
 469  efd5 e60a          	ld	a,(10,x)
 470  efd7 c0055e        	sub	a,L52_arptime
 471  efda 40            	neg	a
 472  efdb c7055d        	ld	L72_tmpage,a
 473                     ; 231 	c = i;
 475  efde 550560055f    	mov	L32_c,L12_i
 476  efe3               L122:
 477                     ; 227     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 479  efe3 725c0560      	inc	L12_i
 482  efe7 c60560        	ld	a,L12_i
 483  efea a104          	cp	a,#4
 484  efec 25c4          	jrult	L312
 485                     ; 234     i = c;
 487  efee c6055f        	ld	a,L32_c
 488  eff1 c70560        	ld	L12_i,a
 489                     ; 235     tabptr = &arp_table[i];
 491  eff4 97            	ld	xl,a
 492  eff5 a60b          	ld	a,#11
 493  eff7 42            	mul	x,a
 494  eff8 1c0565        	addw	x,#L51_arp_table
 495  effb 1f03          	ldw	(OFST-1,sp),x
 497  effd               L112:
 498                     ; 240   memcpy(tabptr->ipaddr, ipaddr, 4);
 500  effd bf04          	ldw	c_x,x
 501  efff 1605          	ldw	y,(OFST+1,sp)
 502  f001 90bf07        	ldw	c_y,y
 503  f004 ae0004        	ldw	x,#4
 504  f007               L42:
 505  f007 5a            	decw	x
 506  f008 92d607        	ld	a,([c_y.w],x)
 507  f00b 92d704        	ld	([c_x.w],x),a
 508  f00e 5d            	tnzw	x
 509  f00f 26f6          	jrne	L42
 510                     ; 241   memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 512  f011 1e03          	ldw	x,(OFST-1,sp)
 513  f013 1c0004        	addw	x,#4
 514  f016 bf04          	ldw	c_x,x
 515  f018 1609          	ldw	y,(OFST+5,sp)
 516  f01a 90bf07        	ldw	c_y,y
 517  f01d ae0006        	ldw	x,#6
 518  f020               L62:
 519  f020 5a            	decw	x
 520  f021 92d607        	ld	a,([c_y.w],x)
 521  f024 92d704        	ld	([c_x.w],x),a
 522  f027 5d            	tnzw	x
 523  f028 26f6          	jrne	L62
 524                     ; 242   tabptr->time = arptime;
 526                     ; 243 }
 527  f02a               L03:
 529  f02a 1e03          	ldw	x,(OFST-1,sp)
 530  f02c c6055e        	ld	a,L52_arptime
 531  f02f e70a          	ld	(10,x),a
 534  f031 5b06          	addw	sp,#6
 535  f033 81            	ret	
 564                     ; 270 uip_arp_arpin(void)
 564                     ; 271 {
 565                     .text:	section	.text,new
 566  f034               _uip_arp_arpin:
 570                     ; 272   if(uip_len < sizeof(struct arp_hdr)) {
 572  f034 ce0363        	ldw	x,_uip_len
 573  f037 a3002a        	cpw	x,#42
 574  f03a 5f            	clrw	x
 575  f03b 2404          	jruge	L732
 576                     ; 273     uip_len = 0;
 578  f03d cf0363        	ldw	_uip_len,x
 579                     ; 274     return;
 582  f040 81            	ret	
 583  f041               L732:
 584                     ; 276   uip_len = 0;
 586  f041 cf0363        	ldw	_uip_len,x
 587                     ; 278   switch(BUF->opcode) {
 589  f044 ce037b        	ldw	x,_uip_buf+20
 591                     ; 310     break;
 592  f047 5a            	decw	x
 593  f048 2704          	jreq	L322
 594  f04a 5a            	decw	x
 595  f04b 277a          	jreq	L522
 597  f04d 81            	ret	
 598  f04e               L322:
 599                     ; 279   case HTONS(ARP_REQUEST):
 599                     ; 280     /* ARP request. If it asked for our address, we send out a reply. */
 599                     ; 281     if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 601  f04e ce038d        	ldw	x,_uip_buf+38
 602  f051 c302b4        	cpw	x,_uip_hostaddr
 603  f054 2703ccf0e2    	jrne	L342
 605  f059 ce038f        	ldw	x,_uip_buf+40
 606  f05c c302b6        	cpw	x,_uip_hostaddr+2
 607  f05f 26f5          	jrne	L342
 608                     ; 285       uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 610  f061 ae037d        	ldw	x,#_uip_buf+22
 611  f064 89            	pushw	x
 612  f065 ae0383        	ldw	x,#_uip_buf+28
 613  f068 cdef29        	call	L331_uip_arp_update
 615  f06b 85            	popw	x
 616                     ; 288       BUF->opcode = HTONS(2);
 618  f06c ae0002        	ldw	x,#2
 619  f06f cf037b        	ldw	_uip_buf+20,x
 620                     ; 290       memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 622  f072 ae0006        	ldw	x,#6
 623  f075               L63:
 624  f075 d6037c        	ld	a,(_uip_buf+21,x)
 625  f078 d70386        	ld	(_uip_buf+31,x),a
 626  f07b 5a            	decw	x
 627  f07c 26f7          	jrne	L63
 628                     ; 291       memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 630  f07e ae0006        	ldw	x,#6
 631  f081               L04:
 632  f081 d60009        	ld	a,(_uip_ethaddr-1,x)
 633  f084 d7037c        	ld	(_uip_buf+21,x),a
 634  f087 5a            	decw	x
 635  f088 26f7          	jrne	L04
 636                     ; 292       memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 638  f08a ae0006        	ldw	x,#6
 639  f08d               L24:
 640  f08d d60009        	ld	a,(_uip_ethaddr-1,x)
 641  f090 d7036c        	ld	(_uip_buf+5,x),a
 642  f093 5a            	decw	x
 643  f094 26f7          	jrne	L24
 644                     ; 293       memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 646  f096 ae0006        	ldw	x,#6
 647  f099               L44:
 648  f099 d60386        	ld	a,(_uip_buf+31,x)
 649  f09c d70366        	ld	(_uip_buf-1,x),a
 650  f09f 5a            	decw	x
 651  f0a0 26f7          	jrne	L44
 652                     ; 295       BUF->dipaddr[0] = BUF->sipaddr[0];
 654  f0a2 ce0383        	ldw	x,_uip_buf+28
 655  f0a5 cf038d        	ldw	_uip_buf+38,x
 656                     ; 296       BUF->dipaddr[1] = BUF->sipaddr[1];
 658  f0a8 ce0385        	ldw	x,_uip_buf+30
 659  f0ab cf038f        	ldw	_uip_buf+40,x
 660                     ; 297       BUF->sipaddr[0] = uip_hostaddr[0];
 662  f0ae ce02b4        	ldw	x,_uip_hostaddr
 663  f0b1 cf0383        	ldw	_uip_buf+28,x
 664                     ; 298       BUF->sipaddr[1] = uip_hostaddr[1];
 666  f0b4 ce02b6        	ldw	x,_uip_hostaddr+2
 667  f0b7 cf0385        	ldw	_uip_buf+30,x
 668                     ; 300       BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 670  f0ba ae0806        	ldw	x,#2054
 671  f0bd cf0373        	ldw	_uip_buf+12,x
 672                     ; 301       uip_len = sizeof(struct arp_hdr);
 674  f0c0 ae002a        	ldw	x,#42
 675  f0c3 cf0363        	ldw	_uip_len,x
 677  f0c6 81            	ret	
 678  f0c7               L522:
 679                     ; 304   case HTONS(ARP_REPLY):
 679                     ; 305     /* ARP reply. We insert or update the ARP table if it was meant
 679                     ; 306        for us. */
 679                     ; 307     if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 681  f0c7 ce038d        	ldw	x,_uip_buf+38
 682  f0ca c302b4        	cpw	x,_uip_hostaddr
 683  f0cd 2613          	jrne	L342
 685  f0cf ce038f        	ldw	x,_uip_buf+40
 686  f0d2 c302b6        	cpw	x,_uip_hostaddr+2
 687  f0d5 260b          	jrne	L342
 688                     ; 308       uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 690  f0d7 ae037d        	ldw	x,#_uip_buf+22
 691  f0da 89            	pushw	x
 692  f0db ae0383        	ldw	x,#_uip_buf+28
 693  f0de cdef29        	call	L331_uip_arp_update
 695  f0e1 85            	popw	x
 696  f0e2               L342:
 697                     ; 313   return;
 700  f0e2 81            	ret	
 751                     ; 342 uip_arp_out(void)
 751                     ; 343 {
 752                     .text:	section	.text,new
 753  f0e3               _uip_arp_out:
 755       00000002      OFST:	set	2
 758                     ; 354   if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
 760  f0e3 ce0385        	ldw	x,_uip_buf+30
 761  f0e6 c39d72        	cpw	x,L31_broadcast_ipaddr
 762  f0e9 2617          	jrne	L172
 764  f0eb ce0387        	ldw	x,_uip_buf+32
 765  f0ee c39d74        	cpw	x,L31_broadcast_ipaddr+2
 766  f0f1 260f          	jrne	L172
 767                     ; 355     memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 769  f0f3 ae0006        	ldw	x,#6
 770  f0f6               L25:
 771  f0f6 d69d6b        	ld	a,(L11_broadcast_ethaddr-1,x)
 772  f0f9 d70366        	ld	(_uip_buf-1,x),a
 773  f0fc 5a            	decw	x
 774  f0fd 26f7          	jrne	L25
 776  f0ff ccf212        	jra	L372
 777  f102               L172:
 778                     ; 359     if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
 780  f102 ce0385        	ldw	x,_uip_buf+30
 781  f105 01            	rrwa	x,a
 782  f106 c402b1        	and	a,_uip_netmask+1
 783  f109 01            	rrwa	x,a
 784  f10a c402b0        	and	a,_uip_netmask
 785  f10d 01            	rrwa	x,a
 786  f10e 90ce02b4      	ldw	y,_uip_hostaddr
 787  f112 9001          	rrwa	y,a
 788  f114 c402b1        	and	a,_uip_netmask+1
 789  f117 9001          	rrwa	y,a
 790  f119 c402b0        	and	a,_uip_netmask
 791  f11c 9001          	rrwa	y,a
 792  f11e 90bf07        	ldw	c_y,y
 793  f121 b307          	cpw	x,c_y
 794  f123 2623          	jrne	L103
 796  f125 ce0387        	ldw	x,_uip_buf+32
 797  f128 01            	rrwa	x,a
 798  f129 c402b3        	and	a,_uip_netmask+3
 799  f12c 01            	rrwa	x,a
 800  f12d c402b2        	and	a,_uip_netmask+2
 801  f130 01            	rrwa	x,a
 802  f131 90ce02b6      	ldw	y,_uip_hostaddr+2
 803  f135 9001          	rrwa	y,a
 804  f137 c402b3        	and	a,_uip_netmask+3
 805  f13a 9001          	rrwa	y,a
 806  f13c c402b2        	and	a,_uip_netmask+2
 807  f13f 9001          	rrwa	y,a
 808  f141 90bf07        	ldw	c_y,y
 809  f144 b307          	cpw	x,c_y
 810  f146 2731          	jreq	L703
 811  f148               L103:
 812                     ; 363       uip_ipaddr_copy(ipaddr, uip_draddr);
 814  f148 ce02ac        	ldw	x,_uip_draddr
 815  f14b cf0561        	ldw	L71_ipaddr,x
 818  f14e ce02ae        	ldw	x,_uip_draddr+2
 820  f151               L503:
 821  f151 cf0563        	ldw	L71_ipaddr+2,x
 822                     ; 370     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 824  f154 4f            	clr	a
 825  f155 c70560        	ld	L12_i,a
 826  f158               L313:
 827                     ; 372       tabptr = &arp_table[i];
 829  f158 97            	ld	xl,a
 830  f159 a60b          	ld	a,#11
 831  f15b 42            	mul	x,a
 832  f15c 1c0565        	addw	x,#L51_arp_table
 834                     ; 373       if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
 836  f15f 9093          	ldw	y,x
 837  f161 90fe          	ldw	y,(y)
 838  f163 90c30561      	cpw	y,L71_ipaddr
 839  f167 261b          	jrne	L123
 841  f169 9093          	ldw	y,x
 842  f16b 90ee02        	ldw	y,(2,y)
 843  f16e 90c30563      	cpw	y,L71_ipaddr+2
 844  f172 2610          	jrne	L123
 845                     ; 375 	break;
 847  f174 c60560        	ld	a,L12_i
 848  f177 2016          	jra	L713
 849  f179               L703:
 850                     ; 367       uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 852  f179 ce0385        	ldw	x,_uip_buf+30
 853  f17c cf0561        	ldw	L71_ipaddr,x
 856  f17f ce0387        	ldw	x,_uip_buf+32
 857  f182 20cd          	jra	L503
 858  f184               L123:
 859                     ; 370     for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 861  f184 725c0560      	inc	L12_i
 864  f188 c60560        	ld	a,L12_i
 865  f18b a104          	cp	a,#4
 866  f18d 25c9          	jrult	L313
 867  f18f               L713:
 868                     ; 379     if(i == UIP_ARPTAB_SIZE) {
 870  f18f a104          	cp	a,#4
 871  f191 266d          	jrne	L323
 872                     ; 383       memset(BUF->ethhdr.dest.addr, 0xff, 6);
 874  f193 a6ff          	ld	a,#255
 875  f195 ae0006        	ldw	x,#6
 876  f198               L45:
 877  f198 d70366        	ld	(_uip_buf-1,x),a
 878  f19b 5a            	decw	x
 879  f19c 26fa          	jrne	L45
 880                     ; 384       memset(BUF->dhwaddr.addr, 0x00, 6);
 882  f19e ae0006        	ldw	x,#6
 883  f1a1               L65:
 884  f1a1 724f0386      	clr	(_uip_buf+31,x)
 885  f1a5 5a            	decw	x
 886  f1a6 26f9          	jrne	L65
 887                     ; 385       memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 889  f1a8 ae0006        	ldw	x,#6
 890  f1ab               L06:
 891  f1ab d60009        	ld	a,(_uip_ethaddr-1,x)
 892  f1ae d7036c        	ld	(_uip_buf+5,x),a
 893  f1b1 5a            	decw	x
 894  f1b2 26f7          	jrne	L06
 895                     ; 386       memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 897  f1b4 ae0006        	ldw	x,#6
 898  f1b7               L26:
 899  f1b7 d60009        	ld	a,(_uip_ethaddr-1,x)
 900  f1ba d7037c        	ld	(_uip_buf+21,x),a
 901  f1bd 5a            	decw	x
 902  f1be 26f7          	jrne	L26
 903                     ; 388       uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 905  f1c0 ce0561        	ldw	x,L71_ipaddr
 906  f1c3 cf038d        	ldw	_uip_buf+38,x
 909  f1c6 ce0563        	ldw	x,L71_ipaddr+2
 910  f1c9 cf038f        	ldw	_uip_buf+40,x
 911                     ; 389       uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 913  f1cc ce02b4        	ldw	x,_uip_hostaddr
 914  f1cf cf0383        	ldw	_uip_buf+28,x
 917  f1d2 ce02b6        	ldw	x,_uip_hostaddr+2
 918  f1d5 cf0385        	ldw	_uip_buf+30,x
 919                     ; 390       BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 921  f1d8 ae0001        	ldw	x,#1
 922  f1db cf037b        	ldw	_uip_buf+20,x
 923                     ; 391       BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 925  f1de cf0375        	ldw	_uip_buf+14,x
 926                     ; 392       BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 928  f1e1 ae0800        	ldw	x,#2048
 929  f1e4 cf0377        	ldw	_uip_buf+16,x
 930                     ; 393       BUF->hwlen = 6;
 932  f1e7 35060379      	mov	_uip_buf+18,#6
 933                     ; 394       BUF->protolen = 4;
 935  f1eb 3504037a      	mov	_uip_buf+19,#4
 936                     ; 395       BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 938  f1ef ae0806        	ldw	x,#2054
 939  f1f2 cf0373        	ldw	_uip_buf+12,x
 940                     ; 397       uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 942  f1f5 ae039d        	ldw	x,#_uip_buf+54
 943  f1f8 cf0365        	ldw	_uip_appdata,x
 944                     ; 399       uip_len = sizeof(struct arp_hdr);
 946  f1fb ae002a        	ldw	x,#42
 947                     ; 400       return;
 949  f1fe 202a          	jra	L07
 950  f200               L323:
 951                     ; 404     memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 953  f200 1c0004        	addw	x,#4
 954  f203 bf04          	ldw	c_x,x
 955  f205 ae0006        	ldw	x,#6
 956  f208               L46:
 957  f208 5a            	decw	x
 958  f209 92d604        	ld	a,([c_x.w],x)
 959  f20c d70367        	ld	(_uip_buf,x),a
 960  f20f 5d            	tnzw	x
 961  f210 26f6          	jrne	L46
 962  f212               L372:
 963                     ; 406   memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 965  f212 ae0006        	ldw	x,#6
 966  f215               L66:
 967  f215 d60009        	ld	a,(_uip_ethaddr-1,x)
 968  f218 d7036c        	ld	(_uip_buf+5,x),a
 969  f21b 5a            	decw	x
 970  f21c 26f7          	jrne	L66
 971                     ; 408   IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 973  f21e ae0800        	ldw	x,#2048
 974  f221 cf0373        	ldw	_uip_buf+12,x
 975                     ; 410   uip_len += sizeof(struct uip_eth_hdr);
 977  f224 ce0363        	ldw	x,_uip_len
 978  f227 1c000e        	addw	x,#14
 979                     ; 411 }
 980  f22a               L07:
 981  f22a cf0363        	ldw	_uip_len,x
 984  f22d 81            	ret	
1029                     ; 475 int check_mqtt_server_arp_entry(void)
1029                     ; 476 {
1030                     .text:	section	.text,new
1031  f22e               _check_mqtt_server_arp_entry:
1033       00000002      OFST:	set	2
1036                     ; 481   if(!uip_ipaddr_maskcmp(uip_mqttserveraddr, uip_hostaddr, uip_netmask)) {
1038  f22e ce02a8        	ldw	x,_uip_mqttserveraddr
1039  f231 01            	rrwa	x,a
1040  f232 c402b1        	and	a,_uip_netmask+1
1041  f235 01            	rrwa	x,a
1042  f236 c402b0        	and	a,_uip_netmask
1043  f239 01            	rrwa	x,a
1044  f23a 90ce02b4      	ldw	y,_uip_hostaddr
1045  f23e 9001          	rrwa	y,a
1046  f240 c402b1        	and	a,_uip_netmask+1
1047  f243 9001          	rrwa	y,a
1048  f245 c402b0        	and	a,_uip_netmask
1049  f248 9001          	rrwa	y,a
1050  f24a 90bf07        	ldw	c_y,y
1051  f24d b307          	cpw	x,c_y
1052  f24f 2623          	jrne	L163
1054  f251 ce02aa        	ldw	x,_uip_mqttserveraddr+2
1055  f254 01            	rrwa	x,a
1056  f255 c402b3        	and	a,_uip_netmask+3
1057  f258 01            	rrwa	x,a
1058  f259 c402b2        	and	a,_uip_netmask+2
1059  f25c 01            	rrwa	x,a
1060  f25d 90ce02b6      	ldw	y,_uip_hostaddr+2
1061  f261 9001          	rrwa	y,a
1062  f263 c402b3        	and	a,_uip_netmask+3
1063  f266 9001          	rrwa	y,a
1064  f268 c402b2        	and	a,_uip_netmask+2
1065  f26b 9001          	rrwa	y,a
1066  f26d 90bf07        	ldw	c_y,y
1067  f270 b307          	cpw	x,c_y
1068  f272 2730          	jreq	L763
1069  f274               L163:
1070                     ; 485     uip_ipaddr_copy(ipaddr, uip_draddr);
1072  f274 ce02ac        	ldw	x,_uip_draddr
1073  f277 cf0561        	ldw	L71_ipaddr,x
1076  f27a ce02ae        	ldw	x,_uip_draddr+2
1078  f27d               L563:
1079  f27d cf0563        	ldw	L71_ipaddr+2,x
1080                     ; 492   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
1082  f280 4f            	clr	a
1083  f281 c70560        	ld	L12_i,a
1084  f284               L373:
1085                     ; 494     tabptr = &arp_table[i];
1087  f284 97            	ld	xl,a
1088  f285 a60b          	ld	a,#11
1089  f287 42            	mul	x,a
1090  f288 1c0565        	addw	x,#L51_arp_table
1092                     ; 495     if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
1094  f28b 9093          	ldw	y,x
1095  f28d 90fe          	ldw	y,(y)
1096  f28f 90c30561      	cpw	y,L71_ipaddr
1097  f293 261a          	jrne	L104
1099  f295 9093          	ldw	y,x
1100  f297 90ee02        	ldw	y,(2,y)
1101  f29a 90c30563      	cpw	y,L71_ipaddr+2
1102  f29e 260f          	jrne	L104
1103                     ; 497       return (uint8_t)1;
1105  f2a0 ae0001        	ldw	x,#1
1108  f2a3 81            	ret	
1109  f2a4               L763:
1110                     ; 489     uip_ipaddr_copy(ipaddr, uip_mqttserveraddr);
1112  f2a4 ce02a8        	ldw	x,_uip_mqttserveraddr
1113  f2a7 cf0561        	ldw	L71_ipaddr,x
1116  f2aa ce02aa        	ldw	x,_uip_mqttserveraddr+2
1117  f2ad 20ce          	jra	L563
1118  f2af               L104:
1119                     ; 492   for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
1122  f2af 725c0560      	inc	L12_i
1125  f2b3 c60560        	ld	a,L12_i
1126  f2b6 a104          	cp	a,#4
1127  f2b8 25ca          	jrult	L373
1128                     ; 501   return (uint8_t)0;
1130  f2ba 5f            	clrw	x
1133  f2bb 81            	ret	
1218                     	switch	.bss
1219  055d               L72_tmpage:
1220  055d 00            	ds.b	1
1221  055e               L52_arptime:
1222  055e 00            	ds.b	1
1223  055f               L32_c:
1224  055f 00            	ds.b	1
1225  0560               L12_i:
1226  0560 00            	ds.b	1
1227  0561               L71_ipaddr:
1228  0561 00000000      	ds.b	4
1229  0565               L51_arp_table:
1230  0565 000000000000  	ds.b	44
1231                     	xdef	_check_mqtt_server_arp_entry
1232                     	xdef	_uip_arp_timer
1233                     	xdef	_uip_arp_out
1234                     	xdef	_uip_arp_arpin
1235                     	xdef	_uip_arp_init
1236                     	xref	_uip_ethaddr
1237                     	xref	_uip_mqttserveraddr
1238                     	xref	_uip_draddr
1239                     	xref	_uip_netmask
1240                     	xref	_uip_hostaddr
1241                     	xref	_uip_len
1242                     	xref	_uip_appdata
1243                     	xref	_uip_buf
1244                     	xref.b	c_x
1245                     	xref.b	c_y
1265                     	end
