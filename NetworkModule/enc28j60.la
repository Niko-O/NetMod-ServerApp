   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.11.14 - 18 Nov 2019
   3                     ; Generator (Limited) V4.4.11 - 19 Nov 2019
   4                     ; Optimizer V4.4.11 - 19 Nov 2019
2547                     ; 268 void select(void)
2547                     ; 269 {
2549                     .text:	section	.text,new
2550  9d83               _select:
2554                     ; 271   PC_ODR &= (uint8_t)(~0x02);
2556  9d83 7213500a      	bres	_PC_ODR,#1
2557                     ; 272   nop();
2560  9d87 9d            	nop	
2562                     ; 273 }
2566  9d88 81            	ret	
2591                     ; 276 void deselect(void)
2591                     ; 277 {
2592                     .text:	section	.text,new
2593  9d89               _deselect:
2597                     ; 279   PC_ODR |= (uint8_t)0x02;
2599  9d89 7212500a      	bset	_PC_ODR,#1
2600                     ; 280   nop();
2603  9d8d 9d            	nop	
2605                     ; 281 }
2609  9d8e 81            	ret	
2652                     ; 286 uint8_t Enc28j60ReadReg(uint8_t nRegister)
2652                     ; 287 {
2653                     .text:	section	.text,new
2654  9d8f               _Enc28j60ReadReg:
2656  9d8f 88            	push	a
2657  9d90 88            	push	a
2658       00000001      OFST:	set	1
2661                     ; 290   select();
2663  9d91 cd9d83        	call	_select
2665                     ; 292   SpiWriteByte((uint8_t)(OPCODE_RCR | (nRegister & REGISTER_MASK)));
2667  9d94 7b02          	ld	a,(OFST+1,sp)
2668  9d96 a41f          	and	a,#31
2669  9d98 cde25c        	call	_SpiWriteByte
2671                     ; 293   if (nRegister & REGISTER_NEEDDUMMY) SpiWriteByte(0);
2673  9d9b 7b02          	ld	a,(OFST+1,sp)
2674  9d9d 2a04          	jrpl	L1761
2677  9d9f 4f            	clr	a
2678  9da0 cde25c        	call	_SpiWriteByte
2680  9da3               L1761:
2681                     ; 294   nByte = SpiReadByte();
2683  9da3 cde2c5        	call	_SpiReadByte
2685  9da6 6b01          	ld	(OFST+0,sp),a
2687                     ; 296   deselect();
2689  9da8 cd9d89        	call	_deselect
2691                     ; 298   return nByte;
2693  9dab 7b01          	ld	a,(OFST+0,sp)
2696  9dad 85            	popw	x
2697  9dae 81            	ret	
2739                     ; 304 void Enc28j60WriteReg( uint8_t nRegister, uint8_t nData)
2739                     ; 305 {
2740                     .text:	section	.text,new
2741  9daf               _Enc28j60WriteReg:
2743  9daf 89            	pushw	x
2744       00000000      OFST:	set	0
2747                     ; 306   select();
2749  9db0 cd9d83        	call	_select
2751                     ; 308   SpiWriteByte((uint8_t)(OPCODE_WCR | (nRegister & REGISTER_MASK)));
2753  9db3 7b01          	ld	a,(OFST+1,sp)
2754  9db5 a41f          	and	a,#31
2755  9db7 aa40          	or	a,#64
2756  9db9 cde25c        	call	_SpiWriteByte
2758                     ; 309   SpiWriteByte(nData);
2760  9dbc 7b02          	ld	a,(OFST+2,sp)
2761  9dbe cde25c        	call	_SpiWriteByte
2763                     ; 311   deselect();
2765  9dc1 cd9d89        	call	_deselect
2767                     ; 312 }
2770  9dc4 85            	popw	x
2771  9dc5 81            	ret	
2813                     ; 317 void Enc28j60SetMaskReg(uint8_t nRegister, uint8_t nMask)
2813                     ; 318 {
2814                     .text:	section	.text,new
2815  9dc6               _Enc28j60SetMaskReg:
2817  9dc6 89            	pushw	x
2818       00000000      OFST:	set	0
2821                     ; 319   select();
2823  9dc7 cd9d83        	call	_select
2825                     ; 321   SpiWriteByte((uint8_t)(OPCODE_BFS | (nRegister & REGISTER_MASK)));
2827  9dca 7b01          	ld	a,(OFST+1,sp)
2828  9dcc a41f          	and	a,#31
2829  9dce aa80          	or	a,#128
2830  9dd0 cde25c        	call	_SpiWriteByte
2832                     ; 322   SpiWriteByte(nMask);
2834  9dd3 7b02          	ld	a,(OFST+2,sp)
2835  9dd5 cde25c        	call	_SpiWriteByte
2837                     ; 324   deselect();
2839  9dd8 cd9d89        	call	_deselect
2841                     ; 325 }
2844  9ddb 85            	popw	x
2845  9ddc 81            	ret	
2888                     ; 330 void Enc28j60ClearMaskReg( uint8_t nRegister, uint8_t nMask)
2888                     ; 331 {
2889                     .text:	section	.text,new
2890  9ddd               _Enc28j60ClearMaskReg:
2892  9ddd 89            	pushw	x
2893       00000000      OFST:	set	0
2896                     ; 332   select();
2898  9dde cd9d83        	call	_select
2900                     ; 334   SpiWriteByte((uint8_t)(OPCODE_BFC | (nRegister & REGISTER_MASK)));
2902  9de1 7b01          	ld	a,(OFST+1,sp)
2903  9de3 a41f          	and	a,#31
2904  9de5 aaa0          	or	a,#160
2905  9de7 cde25c        	call	_SpiWriteByte
2907                     ; 335   SpiWriteByte(nMask);
2909  9dea 7b02          	ld	a,(OFST+2,sp)
2910  9dec cde25c        	call	_SpiWriteByte
2912                     ; 337   deselect();
2914  9def cd9d89        	call	_deselect
2916                     ; 338 }
2919  9df2 85            	popw	x
2920  9df3 81            	ret	
2954                     ; 343 void Enc28j60SwitchBank(uint8_t nBank)
2954                     ; 344 {
2955                     .text:	section	.text,new
2956  9df4               _Enc28j60SwitchBank:
2958  9df4 88            	push	a
2959       00000000      OFST:	set	0
2962                     ; 348   Enc28j60ClearMaskReg(BANKX_ECON1, (3<<BANKX_ECON1_BSEL0));
2964  9df5 ae1f03        	ldw	x,#7939
2965  9df8 cd9ddd        	call	_Enc28j60ClearMaskReg
2967                     ; 349   Enc28j60SetMaskReg(BANKX_ECON1, (uint8_t)(nBank << BANKX_ECON1_BSEL0));
2969  9dfb 7b01          	ld	a,(OFST+1,sp)
2970  9dfd ae1f00        	ldw	x,#7936
2971  9e00 97            	ld	xl,a
2972  9e01 cd9dc6        	call	_Enc28j60SetMaskReg
2974                     ; 350 }
2977  9e04 84            	pop	a
2978  9e05 81            	ret	
3016                     ; 356 uint16_t Enc28j60ReadPhy(uint8_t nRegister)
3016                     ; 357 {
3017                     .text:	section	.text,new
3018  9e06               _Enc28j60ReadPhy:
3020  9e06 88            	push	a
3021  9e07 89            	pushw	x
3022       00000002      OFST:	set	2
3025                     ; 358   Enc28j60SwitchBank(BANK2);
3027  9e08 a602          	ld	a,#2
3028  9e0a cd9df4        	call	_Enc28j60SwitchBank
3030                     ; 359   Enc28j60WriteReg(BANK2_MIREGADR, nRegister);
3032  9e0d 7b03          	ld	a,(OFST+1,sp)
3033  9e0f ae9400        	ldw	x,#37888
3034  9e12 97            	ld	xl,a
3035  9e13 cd9daf        	call	_Enc28j60WriteReg
3037                     ; 360   Enc28j60SetMaskReg(BANK2_MICMD, (1<<BANK2_MICMD_MIIRD));
3039  9e16 ae9201        	ldw	x,#37377
3040  9e19 cd9dc6        	call	_Enc28j60SetMaskReg
3042                     ; 361   Enc28j60SwitchBank(BANK3);
3044  9e1c a603          	ld	a,#3
3045  9e1e cd9df4        	call	_Enc28j60SwitchBank
3048  9e21 2001          	jra	L7771
3049  9e23               L5771:
3050                     ; 362   while (Enc28j60ReadReg(BANK3_MISTAT) & (1 <<BANK3_MISTAT_BUSY)) nop();
3053  9e23 9d            	nop	
3055  9e24               L7771:
3058  9e24 a68a          	ld	a,#138
3059  9e26 cd9d8f        	call	_Enc28j60ReadReg
3061  9e29 a501          	bcp	a,#1
3062  9e2b 26f6          	jrne	L5771
3063                     ; 363   Enc28j60SwitchBank(BANK2);
3066  9e2d a602          	ld	a,#2
3067  9e2f cd9df4        	call	_Enc28j60SwitchBank
3069                     ; 364   Enc28j60ClearMaskReg(BANK2_MICMD, (1<<BANK2_MICMD_MIIRD));
3071  9e32 ae9201        	ldw	x,#37377
3072  9e35 cd9ddd        	call	_Enc28j60ClearMaskReg
3074                     ; 366   return ((uint16_t) Enc28j60ReadReg(BANK2_MIRDL) << 0)
3074                     ; 367        | ((uint16_t) Enc28j60ReadReg(BANK2_MIRDH) << 8);
3076  9e38 a699          	ld	a,#153
3077  9e3a cd9d8f        	call	_Enc28j60ReadReg
3079  9e3d 97            	ld	xl,a
3080  9e3e 4f            	clr	a
3081  9e3f 02            	rlwa	x,a
3082  9e40 1f01          	ldw	(OFST-1,sp),x
3084  9e42 a698          	ld	a,#152
3085  9e44 cd9d8f        	call	_Enc28j60ReadReg
3087  9e47 5f            	clrw	x
3088  9e48 97            	ld	xl,a
3089  9e49 01            	rrwa	x,a
3090  9e4a 1a02          	or	a,(OFST+0,sp)
3091  9e4c 01            	rrwa	x,a
3092  9e4d 1a01          	or	a,(OFST-1,sp)
3093  9e4f 01            	rrwa	x,a
3096  9e50 5b03          	addw	sp,#3
3097  9e52 81            	ret	
3140                     ; 374 void Enc28j60WritePhy( uint8_t nRegister, uint16_t nData)
3140                     ; 375 {
3141                     .text:	section	.text,new
3142  9e53               _Enc28j60WritePhy:
3144  9e53 88            	push	a
3145       00000000      OFST:	set	0
3148                     ; 376   Enc28j60SwitchBank(BANK2);
3150  9e54 a602          	ld	a,#2
3151  9e56 cd9df4        	call	_Enc28j60SwitchBank
3153                     ; 377   Enc28j60WriteReg(BANK2_MIREGADR, nRegister);
3155  9e59 7b01          	ld	a,(OFST+1,sp)
3156  9e5b ae9400        	ldw	x,#37888
3157  9e5e 97            	ld	xl,a
3158  9e5f cd9daf        	call	_Enc28j60WriteReg
3160                     ; 378   Enc28j60WriteReg(BANK2_MIWRL, (uint8_t)(nData >> 0));
3162  9e62 7b05          	ld	a,(OFST+5,sp)
3163  9e64 ae9600        	ldw	x,#38400
3164  9e67 97            	ld	xl,a
3165  9e68 cd9daf        	call	_Enc28j60WriteReg
3167                     ; 379   Enc28j60WriteReg(BANK2_MIWRH, (uint8_t)(nData >> 8));
3169  9e6b 7b04          	ld	a,(OFST+4,sp)
3170  9e6d ae9700        	ldw	x,#38656
3171  9e70 97            	ld	xl,a
3172  9e71 cd9daf        	call	_Enc28j60WriteReg
3174                     ; 380   Enc28j60SwitchBank(BANK3);
3176  9e74 a603          	ld	a,#3
3177  9e76 cd9df4        	call	_Enc28j60SwitchBank
3180  9e79 2001          	jra	L3202
3181  9e7b               L1202:
3182                     ; 381   while (Enc28j60ReadReg(BANK3_MISTAT) & (1 <<BANK3_MISTAT_BUSY)) nop();
3185  9e7b 9d            	nop	
3187  9e7c               L3202:
3190  9e7c a68a          	ld	a,#138
3191  9e7e cd9d8f        	call	_Enc28j60ReadReg
3193  9e81 a501          	bcp	a,#1
3194  9e83 26f6          	jrne	L1202
3195                     ; 382 }
3199  9e85 84            	pop	a
3200  9e86 81            	ret	
3237                     ; 385 void Enc28j60Init(void)
3237                     ; 386 {
3238                     .text:	section	.text,new
3239  9e87               _Enc28j60Init:
3243                     ; 390   deselect(); // Just makes sure the -CS is not selected
3245  9e87 cd9d89        	call	_deselect
3248  9e8a 2001          	jra	L1402
3249  9e8c               L7302:
3250                     ; 404   while (!(Enc28j60ReadReg(BANKX_ESTAT) & (1<<BANKX_ESTAT_CLKRDY))) nop();
3253  9e8c 9d            	nop	
3255  9e8d               L1402:
3258  9e8d a61d          	ld	a,#29
3259  9e8f cd9d8f        	call	_Enc28j60ReadReg
3261  9e92 a501          	bcp	a,#1
3262  9e94 27f6          	jreq	L7302
3263                     ; 407   select();
3266  9e96 cd9d83        	call	_select
3268                     ; 408   SpiWriteByte(OPCODE_SRC); // Reset command
3270  9e99 a6ff          	ld	a,#255
3271  9e9b cde25c        	call	_SpiWriteByte
3273                     ; 409   deselect();
3275  9e9e cd9d89        	call	_deselect
3277                     ; 417   wait_timer((uint16_t)10000); // delay 10 ms
3279  9ea1 ae2710        	ldw	x,#10000
3280  9ea4 cde40a        	call	_wait_timer
3282                     ; 420   Enc28j60WritePhy(PHY_PHCON1, (uint16_t)(1<<PHY_PHCON1_PRST)); // Reset command
3284  9ea7 ae8000        	ldw	x,#32768
3285  9eaa 89            	pushw	x
3286  9eab 4f            	clr	a
3287  9eac cd9e53        	call	_Enc28j60WritePhy
3289  9eaf 85            	popw	x
3291  9eb0 2001          	jra	L7402
3292  9eb2               L5402:
3293                     ; 422   while (Enc28j60ReadPhy(PHY_PHCON1) & (uint16_t)(1<<PHY_PHCON1_PRST)) nop();
3296  9eb2 9d            	nop	
3298  9eb3               L7402:
3301  9eb3 4f            	clr	a
3302  9eb4 cd9e06        	call	_Enc28j60ReadPhy
3304  9eb7 01            	rrwa	x,a
3305  9eb8 9f            	ld	a,xl
3306  9eb9 a480          	and	a,#128
3307  9ebb 97            	ld	xl,a
3308  9ebc 4f            	clr	a
3309  9ebd 02            	rlwa	x,a
3310  9ebe 5d            	tnzw	x
3311  9ebf 26f1          	jrne	L5402
3312                     ; 426   if (stored_config_settings[3] == '1') {
3315  9ec1 c6404f        	ld	a,_stored_config_settings+3
3316  9ec4 a131          	cp	a,#49
3317  9ec6 2609          	jrne	L3502
3318                     ; 429     Enc28j60WritePhy(PHY_PHCON1, (uint16_t)(1<<PHY_PHCON1_PDPXMD));
3320  9ec8 ae0100        	ldw	x,#256
3321  9ecb 89            	pushw	x
3322  9ecc 4f            	clr	a
3323  9ecd cd9e53        	call	_Enc28j60WritePhy
3325  9ed0 85            	popw	x
3326  9ed1               L3502:
3327                     ; 434   Enc28j60SwitchBank(BANK0);
3329  9ed1 4f            	clr	a
3330  9ed2 cd9df4        	call	_Enc28j60SwitchBank
3332                     ; 438   Enc28j60WriteReg(BANK0_ERXSTL, (uint8_t) (ENC28J60_RXSTART >> 0));
3334  9ed5 ae0800        	ldw	x,#2048
3335  9ed8 cd9daf        	call	_Enc28j60WriteReg
3337                     ; 439   Enc28j60WriteReg(BANK0_ERXSTH, (uint8_t) (ENC28J60_RXSTART >> 8));
3339  9edb ae0900        	ldw	x,#2304
3340  9ede cd9daf        	call	_Enc28j60WriteReg
3342                     ; 440   Enc28j60WriteReg(BANK0_ERXNDL, (uint8_t) (ENC28J60_RXEND >> 0));
3344  9ee1 ae0aff        	ldw	x,#2815
3345  9ee4 cd9daf        	call	_Enc28j60WriteReg
3347                     ; 441   Enc28j60WriteReg(BANK0_ERXNDH, (uint8_t) (ENC28J60_RXEND >> 8));
3349  9ee7 ae0b17        	ldw	x,#2839
3350  9eea cd9daf        	call	_Enc28j60WriteReg
3352                     ; 443   Enc28j60WriteReg(BANK0_ERDPTL, (uint8_t) (ENC28J60_RXSTART >> 0));
3354  9eed 5f            	clrw	x
3355  9eee cd9daf        	call	_Enc28j60WriteReg
3357                     ; 444   Enc28j60WriteReg(BANK0_ERDPTH, (uint8_t) (ENC28J60_RXSTART >> 8));
3359  9ef1 ae0100        	ldw	x,#256
3360  9ef4 cd9daf        	call	_Enc28j60WriteReg
3362                     ; 447   Enc28j60WriteReg(BANK0_ERXRDPTL, (uint8_t) (ENC28J60_RXEND >> 0));
3364  9ef7 ae0cff        	ldw	x,#3327
3365  9efa cd9daf        	call	_Enc28j60WriteReg
3367                     ; 448   Enc28j60WriteReg(BANK0_ERXRDPTH, (uint8_t) (ENC28J60_RXEND >> 8));
3369  9efd ae0d17        	ldw	x,#3351
3370  9f00 cd9daf        	call	_Enc28j60WriteReg
3372                     ; 450   Enc28j60WriteReg(BANK0_ETXSTL, (uint8_t) (ENC28J60_TXSTART >> 0));
3374  9f03 ae0400        	ldw	x,#1024
3375  9f06 cd9daf        	call	_Enc28j60WriteReg
3377                     ; 451   Enc28j60WriteReg(BANK0_ETXSTH, (uint8_t) (ENC28J60_TXSTART >> 8));
3379  9f09 ae0518        	ldw	x,#1304
3380  9f0c cd9daf        	call	_Enc28j60WriteReg
3382                     ; 456   Enc28j60SwitchBank(BANK1);
3384  9f0f a601          	ld	a,#1
3385  9f11 cd9df4        	call	_Enc28j60SwitchBank
3387                     ; 503   Enc28j60WriteReg(BANK1_ERXFCON, (uint8_t)0xa1);    // Allows packets if MAC matches
3389  9f14 ae18a1        	ldw	x,#6305
3390  9f17 cd9daf        	call	_Enc28j60WriteReg
3392                     ; 522   Enc28j60SwitchBank(BANK2);
3394  9f1a a602          	ld	a,#2
3395  9f1c cd9df4        	call	_Enc28j60SwitchBank
3397                     ; 525   Enc28j60WriteReg(BANK2_MACON1, (1<<BANK2_MACON1_MARXEN));
3399  9f1f ae8001        	ldw	x,#32769
3400  9f22 cd9daf        	call	_Enc28j60WriteReg
3402                     ; 548   if (stored_config_settings[3] == '0') {
3404  9f25 c6404f        	ld	a,_stored_config_settings+3
3405  9f28 a130          	cp	a,#48
3406  9f2a 2609          	jrne	L5502
3407                     ; 550     Enc28j60SetMaskReg(BANK2_MACON3, (1<<BANK2_MACON3_TXCRCEN)|(1<<BANK2_MACON3_PADCFG0)|(1<<BANK2_MACON3_FRMLNEN));
3409  9f2c ae8232        	ldw	x,#33330
3410  9f2f cd9dc6        	call	_Enc28j60SetMaskReg
3412  9f32 c6404f        	ld	a,_stored_config_settings+3
3413  9f35               L5502:
3414                     ; 552   if (stored_config_settings[3] == '1') {
3416  9f35 a131          	cp	a,#49
3417  9f37 2606          	jrne	L7502
3418                     ; 555     Enc28j60SetMaskReg(BANK2_MACON3, (1<<BANK2_MACON3_TXCRCEN) | (1<<BANK2_MACON3_PADCFG0) | (1<<BANK2_MACON3_FRMLNEN) | (1<<BANK2_MACON3_FULDPX));
3420  9f39 ae8233        	ldw	x,#33331
3421  9f3c cd9dc6        	call	_Enc28j60SetMaskReg
3423  9f3f               L7502:
3424                     ; 559   Enc28j60SetMaskReg(BANK2_MACON4, (1<<BANK2_MACON4_DEFER));
3426  9f3f ae8340        	ldw	x,#33600
3427  9f42 cd9dc6        	call	_Enc28j60SetMaskReg
3429                     ; 563   Enc28j60WriteReg(BANK2_MAMXFLL, (uint8_t) ((ENC28J60_MAXFRAME + 4) >> 0));
3431  9f45 ae8af8        	ldw	x,#35576
3432  9f48 cd9daf        	call	_Enc28j60WriteReg
3434                     ; 564   Enc28j60WriteReg(BANK2_MAMXFLH, (uint8_t) ((ENC28J60_MAXFRAME + 4) >> 8));
3436  9f4b ae9001        	ldw	x,#36865
3437  9f4e cd9daf        	call	_Enc28j60WriteReg
3439                     ; 567   Enc28j60WriteReg(BANK2_MAIPGL, 0x12);
3441  9f51 ae8612        	ldw	x,#34322
3442  9f54 cd9daf        	call	_Enc28j60WriteReg
3444                     ; 569   if (stored_config_settings[3] == '0') {
3446  9f57 c6404f        	ld	a,_stored_config_settings+3
3447  9f5a a130          	cp	a,#48
3448  9f5c 2609          	jrne	L1602
3449                     ; 571     Enc28j60WriteReg(BANK2_MAIPGH, 0x0C);
3451  9f5e ae870c        	ldw	x,#34572
3452  9f61 cd9daf        	call	_Enc28j60WriteReg
3454  9f64 c6404f        	ld	a,_stored_config_settings+3
3455  9f67               L1602:
3456                     ; 578   if (stored_config_settings[3] == '0') {
3458  9f67 a130          	cp	a,#48
3459  9f69 2609          	jrne	L3602
3460                     ; 580     Enc28j60WriteReg(BANK2_MABBIPG, 0x12);
3462  9f6b ae8412        	ldw	x,#33810
3463  9f6e cd9daf        	call	_Enc28j60WriteReg
3465  9f71 c6404f        	ld	a,_stored_config_settings+3
3466  9f74               L3602:
3467                     ; 582   if (stored_config_settings[3] == '1') {
3469  9f74 a131          	cp	a,#49
3470  9f76 2606          	jrne	L5602
3471                     ; 584     Enc28j60WriteReg(BANK2_MABBIPG, 0x15);
3473  9f78 ae8415        	ldw	x,#33813
3474  9f7b cd9daf        	call	_Enc28j60WriteReg
3476  9f7e               L5602:
3477                     ; 589   Enc28j60SwitchBank(BANK3);
3479  9f7e a603          	ld	a,#3
3480  9f80 cd9df4        	call	_Enc28j60SwitchBank
3482                     ; 592   Enc28j60WriteReg(BANK3_MAADR5, stored_uip_ethaddr_oct[5]);  // MAC MSB
3484  9f83 c6401c        	ld	a,_stored_uip_ethaddr_oct+5
3485  9f86 ae8400        	ldw	x,#33792
3486  9f89 97            	ld	xl,a
3487  9f8a cd9daf        	call	_Enc28j60WriteReg
3489                     ; 593   Enc28j60WriteReg(BANK3_MAADR4, stored_uip_ethaddr_oct[4]);
3491  9f8d c6401b        	ld	a,_stored_uip_ethaddr_oct+4
3492  9f90 ae8500        	ldw	x,#34048
3493  9f93 97            	ld	xl,a
3494  9f94 cd9daf        	call	_Enc28j60WriteReg
3496                     ; 594   Enc28j60WriteReg(BANK3_MAADR3, stored_uip_ethaddr_oct[3]);
3498  9f97 c6401a        	ld	a,_stored_uip_ethaddr_oct+3
3499  9f9a ae8200        	ldw	x,#33280
3500  9f9d 97            	ld	xl,a
3501  9f9e cd9daf        	call	_Enc28j60WriteReg
3503                     ; 595   Enc28j60WriteReg(BANK3_MAADR2, stored_uip_ethaddr_oct[2]);
3505  9fa1 c64019        	ld	a,_stored_uip_ethaddr_oct+2
3506  9fa4 ae8300        	ldw	x,#33536
3507  9fa7 97            	ld	xl,a
3508  9fa8 cd9daf        	call	_Enc28j60WriteReg
3510                     ; 596   Enc28j60WriteReg(BANK3_MAADR1, stored_uip_ethaddr_oct[1]);
3512  9fab c64018        	ld	a,_stored_uip_ethaddr_oct+1
3513  9fae ae8000        	ldw	x,#32768
3514  9fb1 97            	ld	xl,a
3515  9fb2 cd9daf        	call	_Enc28j60WriteReg
3517                     ; 597   Enc28j60WriteReg(BANK3_MAADR0, stored_uip_ethaddr_oct[0]);  // MAC LSB
3519  9fb5 c64017        	ld	a,_stored_uip_ethaddr_oct
3520  9fb8 ae8100        	ldw	x,#33024
3521  9fbb 97            	ld	xl,a
3522  9fbc cd9daf        	call	_Enc28j60WriteReg
3524                     ; 600   Enc28j60WritePhy(PHY_PHCON2, (1<<PHY_PHCON2_HDLDIS));
3526  9fbf ae0100        	ldw	x,#256
3527  9fc2 89            	pushw	x
3528  9fc3 a610          	ld	a,#16
3529  9fc5 cd9e53        	call	_Enc28j60WritePhy
3531  9fc8 85            	popw	x
3532                     ; 604   Enc28j60WritePhy(PHY_PHLCON,
3532                     ; 605     (ENC28J60_LEDB<<PHY_PHLCON_LBCFG0)|
3532                     ; 606     (ENC28J60_LEDA<<PHY_PHLCON_LACFG0)|
3532                     ; 607     (1<<PHY_PHLCON_STRCH)|0x3000);
3534  9fc9 ae31c2        	ldw	x,#12738
3535  9fcc 89            	pushw	x
3536  9fcd a614          	ld	a,#20
3537  9fcf cd9e53        	call	_Enc28j60WritePhy
3539  9fd2 c6404f        	ld	a,_stored_config_settings+3
3540  9fd5 a130          	cp	a,#48
3541  9fd7 85            	popw	x
3542                     ; 609   if (stored_config_settings[3] == '0') {
3544  9fd8 2607          	jrne	L7602
3545                     ; 614     Enc28j60WritePhy(PHY_PHCON1, 0x0000);
3547  9fda 5f            	clrw	x
3548  9fdb 89            	pushw	x
3549  9fdc 4f            	clr	a
3550  9fdd cd9e53        	call	_Enc28j60WritePhy
3552  9fe0 85            	popw	x
3553  9fe1               L7602:
3554                     ; 618   Enc28j60SetMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_RXEN));
3556  9fe1 ae1f04        	ldw	x,#7940
3558                     ; 619 }
3561  9fe4 cc9dc6        	jp	_Enc28j60SetMaskReg
3620                     ; 622 uint16_t Enc28j60Receive(uint8_t* pBuffer)
3620                     ; 623 {
3621                     .text:	section	.text,new
3622  9fe7               _Enc28j60Receive:
3624  9fe7 89            	pushw	x
3625  9fe8 5204          	subw	sp,#4
3626       00000004      OFST:	set	4
3629                     ; 630   if (Enc28j60ReadReg(BANKX_EIR) & 0x01) {
3631  9fea a61c          	ld	a,#28
3632  9fec cd9d8f        	call	_Enc28j60ReadReg
3634  9fef a501          	bcp	a,#1
3635  9ff1 2708          	jreq	L3112
3636                     ; 631     RXERIF_counter++;
3638  9ff3 ae006f        	ldw	x,#_RXERIF_counter
3639  9ff6 a601          	ld	a,#1
3640  9ff8 cdf698        	call	c_lgadc
3642  9ffb               L3112:
3643                     ; 636   Enc28j60SwitchBank(BANK1);
3645  9ffb a601          	ld	a,#1
3646  9ffd cd9df4        	call	_Enc28j60SwitchBank
3648                     ; 637   if (Enc28j60ReadReg(BANK1_EPKTCNT) == 0) return 0;
3650  a000 a619          	ld	a,#25
3651  a002 cd9d8f        	call	_Enc28j60ReadReg
3653  a005 4d            	tnz	a
3654  a006 2604          	jrne	L5112
3657  a008 5f            	clrw	x
3659  a009 cca091        	jra	L433
3660  a00c               L5112:
3661                     ; 639   select();
3663  a00c cd9d83        	call	_select
3665                     ; 641   SpiWriteByte(OPCODE_RBM);	 // Set ENC28J60 to send receive data on SPI
3667  a00f a63a          	ld	a,#58
3668  a011 cde25c        	call	_SpiWriteByte
3670                     ; 644   nNextPacket = ((uint16_t) SpiReadByte() << 0);
3672  a014 cde2c5        	call	_SpiReadByte
3674  a017 5f            	clrw	x
3675  a018 97            	ld	xl,a
3676  a019 1f03          	ldw	(OFST-1,sp),x
3678                     ; 645   nNextPacket |= ((uint16_t) SpiReadByte() << 8);
3680  a01b cde2c5        	call	_SpiReadByte
3682  a01e 5f            	clrw	x
3683  a01f 97            	ld	xl,a
3684  a020 7b04          	ld	a,(OFST+0,sp)
3685  a022 01            	rrwa	x,a
3686  a023 1a03          	or	a,(OFST-1,sp)
3687  a025 01            	rrwa	x,a
3688  a026 1f03          	ldw	(OFST-1,sp),x
3690                     ; 648   nBytes = ((uint16_t) SpiReadByte() << 0);
3692  a028 cde2c5        	call	_SpiReadByte
3694  a02b 5f            	clrw	x
3695  a02c 97            	ld	xl,a
3696  a02d 1f01          	ldw	(OFST-3,sp),x
3698                     ; 649   nBytes |= ((uint16_t) SpiReadByte() << 8);
3700  a02f cde2c5        	call	_SpiReadByte
3702  a032 5f            	clrw	x
3703  a033 97            	ld	xl,a
3704  a034 7b02          	ld	a,(OFST-2,sp)
3705  a036 01            	rrwa	x,a
3706  a037 1a01          	or	a,(OFST-3,sp)
3707  a039 01            	rrwa	x,a
3709                     ; 650   nBytes -= 4;
3711  a03a 1d0004        	subw	x,#4
3712  a03d 1f01          	ldw	(OFST-3,sp),x
3714                     ; 653   SpiReadByte();
3716  a03f cde2c5        	call	_SpiReadByte
3718                     ; 654   SpiReadByte();
3720  a042 cde2c5        	call	_SpiReadByte
3722                     ; 661   if (nBytes <= ENC28J60_MAXFRAME) SpiReadChunk(pBuffer, nBytes);
3724  a045 1e01          	ldw	x,(OFST-3,sp)
3725  a047 a301f5        	cpw	x,#501
3726  a04a 2407          	jruge	L7112
3729  a04c 89            	pushw	x
3730  a04d 1e07          	ldw	x,(OFST+3,sp)
3731  a04f cde2ef        	call	_SpiReadChunk
3733  a052 85            	popw	x
3734  a053               L7112:
3735                     ; 663   deselect();
3737  a053 cd9d89        	call	_deselect
3739                     ; 665   Enc28j60SwitchBank(BANK0);
3741  a056 4f            	clr	a
3742  a057 cd9df4        	call	_Enc28j60SwitchBank
3744                     ; 667   Enc28j60WriteReg(BANK0_ERDPTL , (uint8_t) (nNextPacket >> 0));
3746  a05a 7b04          	ld	a,(OFST+0,sp)
3747  a05c 5f            	clrw	x
3748  a05d 97            	ld	xl,a
3749  a05e cd9daf        	call	_Enc28j60WriteReg
3751                     ; 668   Enc28j60WriteReg(BANK0_ERDPTH , (uint8_t) (nNextPacket >> 8));
3753  a061 7b03          	ld	a,(OFST-1,sp)
3754  a063 ae0100        	ldw	x,#256
3755  a066 97            	ld	xl,a
3756  a067 cd9daf        	call	_Enc28j60WriteReg
3758                     ; 672   nNextPacket -= 1;
3760  a06a 1e03          	ldw	x,(OFST-1,sp)
3761  a06c 5a            	decw	x
3763                     ; 673   if (nNextPacket == ( ((uint16_t)ENC28J60_RXSTART) - 1 )) {
3765  a06d a3ffff        	cpw	x,#65535
3766  a070 2603          	jrne	L1212
3767                     ; 676     nNextPacket = ENC28J60_RXEND;
3769  a072 ae17ff        	ldw	x,#6143
3771  a075               L1212:
3772  a075 1f03          	ldw	(OFST-1,sp),x
3773                     ; 679   Enc28j60WriteReg(BANK0_ERXRDPTL, (uint8_t)(nNextPacket >> 0));
3775  a077 ae0c00        	ldw	x,#3072
3776  a07a 7b04          	ld	a,(OFST+0,sp)
3777  a07c 97            	ld	xl,a
3778  a07d cd9daf        	call	_Enc28j60WriteReg
3780                     ; 680   Enc28j60WriteReg(BANK0_ERXRDPTH, (uint8_t)(nNextPacket >> 8));
3782  a080 7b03          	ld	a,(OFST-1,sp)
3783  a082 ae0d00        	ldw	x,#3328
3784  a085 97            	ld	xl,a
3785  a086 cd9daf        	call	_Enc28j60WriteReg
3787                     ; 683   Enc28j60SetMaskReg(BANKX_ECON2 , (1<<BANKX_ECON2_PKTDEC));
3789  a089 ae1e40        	ldw	x,#7744
3790  a08c cd9dc6        	call	_Enc28j60SetMaskReg
3792                     ; 685   return nBytes;
3794  a08f 1e01          	ldw	x,(OFST-3,sp)
3796  a091               L433:
3798  a091 5b06          	addw	sp,#6
3799  a093 81            	ret	
3883                     ; 689 void Enc28j60Send(uint8_t* pBuffer, uint16_t nBytes)
3883                     ; 690 {
3884                     .text:	section	.text,new
3885  a094               _Enc28j60Send:
3887  a094 89            	pushw	x
3888  a095 5205          	subw	sp,#5
3889       00000005      OFST:	set	5
3892                     ; 691   uint16_t TxEnd = ENC28J60_TXSTART + nBytes;
3894  a097 1e0a          	ldw	x,(OFST+5,sp)
3895  a099 1c1800        	addw	x,#6144
3896  a09c 1f02          	ldw	(OFST-3,sp),x
3898                     ; 692   uint8_t i = 200;
3900  a09e a6c8          	ld	a,#200
3901  a0a0 6b04          	ld	(OFST-1,sp),a
3903                     ; 695   txerif_temp = 0;
3905  a0a2 0f05          	clr	(OFST+0,sp)
3908  a0a4 2072          	jra	L7512
3909  a0a6               L3512:
3910                     ; 703     if (!(Enc28j60ReadReg(BANKX_ECON1) & (1<<BANKX_ECON1_TXRTS))) break;
3912  a0a6 a61f          	ld	a,#31
3913  a0a8 cd9d8f        	call	_Enc28j60ReadReg
3915  a0ab a508          	bcp	a,#8
3916  a0ad 2663          	jrne	L3612
3918  a0af               L1612:
3919                     ; 707   Enc28j60SwitchBank(BANK0);
3921  a0af 4f            	clr	a
3922  a0b0 cd9df4        	call	_Enc28j60SwitchBank
3924                     ; 708   Enc28j60WriteReg(BANK0_EWRPTL, (uint8_t) (ENC28J60_TXSTART >> 0));
3926  a0b3 ae0200        	ldw	x,#512
3927  a0b6 cd9daf        	call	_Enc28j60WriteReg
3929                     ; 709   Enc28j60WriteReg(BANK0_EWRPTH, (uint8_t) (ENC28J60_TXSTART >> 8));
3931  a0b9 ae0318        	ldw	x,#792
3932  a0bc cd9daf        	call	_Enc28j60WriteReg
3934                     ; 710   Enc28j60WriteReg(BANK0_ETXNDL, (uint8_t) (TxEnd >> 0));
3936  a0bf 7b03          	ld	a,(OFST-2,sp)
3937  a0c1 ae0600        	ldw	x,#1536
3938  a0c4 97            	ld	xl,a
3939  a0c5 cd9daf        	call	_Enc28j60WriteReg
3941                     ; 711   Enc28j60WriteReg(BANK0_ETXNDH, (uint8_t) (TxEnd >> 8));	
3943  a0c8 7b02          	ld	a,(OFST-3,sp)
3944  a0ca ae0700        	ldw	x,#1792
3945  a0cd 97            	ld	xl,a
3946  a0ce cd9daf        	call	_Enc28j60WriteReg
3948                     ; 713   select();
3950  a0d1 cd9d83        	call	_select
3952                     ; 715   SpiWriteByte(OPCODE_WBM);	 // Set ENC28J60 to receive transmit data on SPI
3954  a0d4 a67a          	ld	a,#122
3955  a0d6 cde25c        	call	_SpiWriteByte
3957                     ; 717   SpiWriteByte(0);		 // Per-packet-control-byte
3959  a0d9 4f            	clr	a
3960  a0da cde25c        	call	_SpiWriteByte
3962                     ; 729   SpiWriteChunk(pBuffer, nBytes); // Copy data to the ENC28J60 transmit buffer
3964  a0dd 1e0a          	ldw	x,(OFST+5,sp)
3965  a0df 89            	pushw	x
3966  a0e0 1e08          	ldw	x,(OFST+3,sp)
3967  a0e2 cde286        	call	_SpiWriteChunk
3969  a0e5 85            	popw	x
3970                     ; 731   deselect();
3972  a0e6 cd9d89        	call	_deselect
3974                     ; 800     if (Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXERIF)) {
3976  a0e9 a61c          	ld	a,#28
3977  a0eb cd9d8f        	call	_Enc28j60ReadReg
3979  a0ee a502          	bcp	a,#2
3980  a0f0 272f          	jreq	L5612
3981                     ; 806 wait_timer(10);  // Wait 10 uS
3983  a0f2 ae000a        	ldw	x,#10
3984  a0f5 cde40a        	call	_wait_timer
3986                     ; 809       Enc28j60SetMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRST));
3988  a0f8 ae1f80        	ldw	x,#8064
3989  a0fb cd9dc6        	call	_Enc28j60SetMaskReg
3991                     ; 811       Enc28j60ClearMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRST));
3993  a0fe ae1f80        	ldw	x,#8064
3994  a101 cd9ddd        	call	_Enc28j60ClearMaskReg
3996                     ; 813       Enc28j60ClearMaskReg(BANKX_EIR, (1<<BANKX_EIR_TXERIF));
3998  a104 ae1c02        	ldw	x,#7170
3999  a107 cd9ddd        	call	_Enc28j60ClearMaskReg
4001                     ; 815       Enc28j60ClearMaskReg(BANKX_EIR, (1<<BANKX_EIR_TXIF));
4003  a10a ae1c08        	ldw	x,#7176
4004  a10d cd9ddd        	call	_Enc28j60ClearMaskReg
4006  a110 200f          	jra	L5612
4007  a112               L3612:
4008                     ; 704     wait_timer(500);  // Wait 500 uS
4010  a112 ae01f4        	ldw	x,#500
4011  a115 cde40a        	call	_wait_timer
4013  a118               L7512:
4014                     ; 702   while (i--) {
4016  a118 7b04          	ld	a,(OFST-1,sp)
4017  a11a 0a04          	dec	(OFST-1,sp)
4019  a11c 4d            	tnz	a
4020  a11d 2687          	jrne	L3512
4021  a11f 208e          	jra	L1612
4022  a121               L5612:
4023                     ; 826     Enc28j60SetMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRTS));
4025  a121 ae1f08        	ldw	x,#7944
4026  a124 cd9dc6        	call	_Enc28j60SetMaskReg
4029  a127 2001          	jra	L1712
4030  a129               L7612:
4031                     ; 831         && !(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXERIF))) nop();
4034  a129 9d            	nop	
4036  a12a               L1712:
4037                     ; 830     while (!(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXIF))
4037                     ; 831         && !(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXERIF))) nop();
4039  a12a a61c          	ld	a,#28
4040  a12c cd9d8f        	call	_Enc28j60ReadReg
4042  a12f a508          	bcp	a,#8
4043  a131 2609          	jrne	L5712
4045  a133 a61c          	ld	a,#28
4046  a135 cd9d8f        	call	_Enc28j60ReadReg
4048  a138 a502          	bcp	a,#2
4049  a13a 27ed          	jreq	L7612
4050  a13c               L5712:
4051                     ; 834     if (Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXERIF)) txerif_temp = 1;
4054  a13c a61c          	ld	a,#28
4055  a13e cd9d8f        	call	_Enc28j60ReadReg
4057  a141 a502          	bcp	a,#2
4058  a143 2704          	jreq	L7712
4061  a145 a601          	ld	a,#1
4062  a147 6b05          	ld	(OFST+0,sp),a
4064  a149               L7712:
4065                     ; 837     if (!(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXIF))) {
4067  a149 a61c          	ld	a,#28
4068  a14b cd9d8f        	call	_Enc28j60ReadReg
4070  a14e a508          	bcp	a,#8
4071  a150 2606          	jrne	L1022
4072                     ; 838       Enc28j60ClearMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRTS));
4074  a152 ae1f08        	ldw	x,#7944
4075  a155 cd9ddd        	call	_Enc28j60ClearMaskReg
4077  a158               L1022:
4078                     ; 842     if (txerif_temp) {
4080  a158 7b05          	ld	a,(OFST+0,sp)
4081  a15a 2603cca1e0    	jreq	L3022
4082                     ; 848 wait_timer(10);  // Wait 10 uS
4084  a15f ae000a        	ldw	x,#10
4085  a162 cde40a        	call	_wait_timer
4087                     ; 851       for (i = 0; i < 16; i++) {
4089  a165 0f04          	clr	(OFST-1,sp)
4091  a167               L5022:
4092                     ; 853 	read_TSV();
4094  a167 cda1e3        	call	_read_TSV
4096                     ; 855 wait_timer(10);  // Wait 10 uS
4098  a16a ae000a        	ldw	x,#10
4099  a16d cde40a        	call	_wait_timer
4101                     ; 860         late_collision = 0;
4103                     ; 861         if (tsv_byte[3] & 0x20) late_collision = 1;
4105  a170 720b00136b    	btjf	_tsv_byte+3,#5,L3022
4108  a175 a601          	ld	a,#1
4109  a177 6b01          	ld	(OFST-4,sp),a
4112                     ; 865         if (txerif_temp && (late_collision)) {
4114  a179 7b05          	ld	a,(OFST+0,sp)
4115  a17b 275b          	jreq	L7122
4117  a17d 7b01          	ld	a,(OFST-4,sp)
4118  a17f 2757          	jreq	L7122
4119                     ; 866 	  txerif_temp = 0;
4121  a181 0f05          	clr	(OFST+0,sp)
4123                     ; 873 wait_timer(10);  // Wait 10 uS
4125  a183 ae000a        	ldw	x,#10
4126  a186 cde40a        	call	_wait_timer
4128                     ; 877           Enc28j60SetMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRST));
4130  a189 ae1f80        	ldw	x,#8064
4131  a18c cd9dc6        	call	_Enc28j60SetMaskReg
4133                     ; 879           Enc28j60ClearMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRST));
4135  a18f ae1f80        	ldw	x,#8064
4136  a192 cd9ddd        	call	_Enc28j60ClearMaskReg
4138                     ; 881           Enc28j60ClearMaskReg(BANKX_EIR, (1<<BANKX_EIR_TXERIF));
4140  a195 ae1c02        	ldw	x,#7170
4141  a198 cd9ddd        	call	_Enc28j60ClearMaskReg
4143                     ; 883           Enc28j60ClearMaskReg(BANKX_EIR, (1<<BANKX_EIR_TXIF));
4145  a19b ae1c08        	ldw	x,#7176
4146  a19e cd9ddd        	call	_Enc28j60ClearMaskReg
4148                     ; 885           Enc28j60SetMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRTS));
4150  a1a1 ae1f08        	ldw	x,#7944
4151  a1a4 cd9dc6        	call	_Enc28j60SetMaskReg
4154  a1a7 2001          	jra	L3222
4155  a1a9               L1222:
4156                     ; 889               && !(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXERIF))) nop();
4159  a1a9 9d            	nop	
4161  a1aa               L3222:
4162                     ; 888           while (!(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXIF))
4162                     ; 889               && !(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXERIF))) nop();
4164  a1aa a61c          	ld	a,#28
4165  a1ac cd9d8f        	call	_Enc28j60ReadReg
4167  a1af a508          	bcp	a,#8
4168  a1b1 2609          	jrne	L7222
4170  a1b3 a61c          	ld	a,#28
4171  a1b5 cd9d8f        	call	_Enc28j60ReadReg
4173  a1b8 a502          	bcp	a,#2
4174  a1ba 27ed          	jreq	L1222
4175  a1bc               L7222:
4176                     ; 891           if (Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXERIF)) txerif_temp = 1;
4179  a1bc a61c          	ld	a,#28
4180  a1be cd9d8f        	call	_Enc28j60ReadReg
4182  a1c1 a502          	bcp	a,#2
4183  a1c3 2704          	jreq	L1322
4186  a1c5 a601          	ld	a,#1
4187  a1c7 6b05          	ld	(OFST+0,sp),a
4189  a1c9               L1322:
4190                     ; 893           if (!(Enc28j60ReadReg(BANKX_EIR) & (1<<BANKX_EIR_TXIF))) {
4192  a1c9 a61c          	ld	a,#28
4193  a1cb cd9d8f        	call	_Enc28j60ReadReg
4195  a1ce a508          	bcp	a,#8
4196  a1d0 2606          	jrne	L7122
4197                     ; 894 	    Enc28j60ClearMaskReg(BANKX_ECON1, (1<<BANKX_ECON1_TXRTS));
4199  a1d2 ae1f08        	ldw	x,#7944
4200  a1d5 cd9ddd        	call	_Enc28j60ClearMaskReg
4202  a1d8               L7122:
4203                     ; 851       for (i = 0; i < 16; i++) {
4205  a1d8 0c04          	inc	(OFST-1,sp)
4209  a1da 7b04          	ld	a,(OFST-1,sp)
4210  a1dc a110          	cp	a,#16
4211  a1de 2587          	jrult	L5022
4212  a1e0               L3022:
4213                     ; 901 }
4216  a1e0 5b07          	addw	sp,#7
4217  a1e2 81            	ret	
4278                     ; 904 void read_TSV(void)
4278                     ; 905 {
4279                     .text:	section	.text,new
4280  a1e3               _read_TSV:
4282  a1e3 5205          	subw	sp,#5
4283       00000005      OFST:	set	5
4286                     ; 913   wait_timer((uint16_t)10);
4288  a1e5 ae000a        	ldw	x,#10
4289  a1e8 cde40a        	call	_wait_timer
4291                     ; 917   saved_ERDPTL = Enc28j60ReadReg(BANK0_ERDPTL);
4293  a1eb 4f            	clr	a
4294  a1ec cd9d8f        	call	_Enc28j60ReadReg
4296  a1ef 6b02          	ld	(OFST-3,sp),a
4298                     ; 918   saved_ERDPTH = Enc28j60ReadReg(BANK0_ERDPTH);
4300  a1f1 a601          	ld	a,#1
4301  a1f3 cd9d8f        	call	_Enc28j60ReadReg
4303  a1f6 6b03          	ld	(OFST-2,sp),a
4305                     ; 921   tsv_start = ((Enc28j60ReadReg(BANK0_ETXNDH)) << 8);
4307  a1f8 a607          	ld	a,#7
4308  a1fa cd9d8f        	call	_Enc28j60ReadReg
4310  a1fd 97            	ld	xl,a
4311  a1fe 4f            	clr	a
4312  a1ff 02            	rlwa	x,a
4313  a200 1f04          	ldw	(OFST-1,sp),x
4315                     ; 922   tsv_start += Enc28j60ReadReg(BANK0_ETXNDL);
4317  a202 a606          	ld	a,#6
4318  a204 cd9d8f        	call	_Enc28j60ReadReg
4320  a207 1b05          	add	a,(OFST+0,sp)
4321  a209 6b05          	ld	(OFST+0,sp),a
4322  a20b 2402          	jrnc	L074
4323  a20d 0c04          	inc	(OFST-1,sp)
4324  a20f               L074:
4326                     ; 923   tsv_start++;
4328  a20f 1e04          	ldw	x,(OFST-1,sp)
4329  a211 5c            	incw	x
4330  a212 1f04          	ldw	(OFST-1,sp),x
4332                     ; 926   Enc28j60WriteReg(BANK0_ERDPTL, (uint8_t)(tsv_start & 0x00ff));
4334  a214 5f            	clrw	x
4335  a215 7b05          	ld	a,(OFST+0,sp)
4336  a217 97            	ld	xl,a
4337  a218 cd9daf        	call	_Enc28j60WriteReg
4339                     ; 927   Enc28j60WriteReg(BANK0_ERDPTH, (uint8_t)(tsv_start >> 8));
4341  a21b 7b04          	ld	a,(OFST-1,sp)
4342  a21d ae0100        	ldw	x,#256
4343  a220 97            	ld	xl,a
4344  a221 cd9daf        	call	_Enc28j60WriteReg
4346                     ; 930   select();
4348  a224 cd9d83        	call	_select
4350                     ; 931   SpiWriteByte(OPCODE_RBM);
4352  a227 a63a          	ld	a,#58
4353  a229 cde25c        	call	_SpiWriteByte
4355                     ; 936     for (i=0; i<7; i++) {
4357  a22c 4f            	clr	a
4358  a22d 6b01          	ld	(OFST-4,sp),a
4360  a22f               L7522:
4361                     ; 937       tsv_byte[i] = SpiReadByte(); // Bits 7-0
4363  a22f 5f            	clrw	x
4364  a230 97            	ld	xl,a
4365  a231 89            	pushw	x
4366  a232 cde2c5        	call	_SpiReadByte
4368  a235 85            	popw	x
4369  a236 d70010        	ld	(_tsv_byte,x),a
4370                     ; 936     for (i=0; i<7; i++) {
4372  a239 0c01          	inc	(OFST-4,sp)
4376  a23b 7b01          	ld	a,(OFST-4,sp)
4377  a23d a107          	cp	a,#7
4378  a23f 25ee          	jrult	L7522
4379                     ; 941   deselect();
4381  a241 cd9d89        	call	_deselect
4383                     ; 944 wait_timer(10);  // Wait 10 uS
4385  a244 ae000a        	ldw	x,#10
4386  a247 cde40a        	call	_wait_timer
4388                     ; 948   Enc28j60WriteReg(BANK0_ERDPTL, saved_ERDPTL);
4390  a24a 7b02          	ld	a,(OFST-3,sp)
4391  a24c 5f            	clrw	x
4392  a24d 97            	ld	xl,a
4393  a24e cd9daf        	call	_Enc28j60WriteReg
4395                     ; 949   Enc28j60WriteReg(BANK0_ERDPTH, saved_ERDPTH);
4397  a251 7b03          	ld	a,(OFST-2,sp)
4398  a253 ae0100        	ldw	x,#256
4399  a256 97            	ld	xl,a
4400  a257 cd9daf        	call	_Enc28j60WriteReg
4402                     ; 950 }
4405  a25a 5b05          	addw	sp,#5
4406  a25c 81            	ret	
4431                     	xdef	_Enc28j60WritePhy
4432                     	xdef	_Enc28j60ReadPhy
4433                     	xdef	_Enc28j60SwitchBank
4434                     	xdef	_Enc28j60ClearMaskReg
4435                     	xdef	_Enc28j60SetMaskReg
4436                     	xdef	_Enc28j60WriteReg
4437                     	xdef	_Enc28j60ReadReg
4438                     	xdef	_deselect
4439                     	xdef	_select
4440                     	switch	.bss
4441  0010               _tsv_byte:
4442  0010 000000000000  	ds.b	7
4443                     	xdef	_tsv_byte
4444                     	xref	_stored_uip_ethaddr_oct
4445                     	xref	_stored_config_settings
4446                     	xref	_RXERIF_counter
4447                     	xref	_wait_timer
4448                     	xdef	_read_TSV
4449                     	xdef	_Enc28j60Send
4450                     	xdef	_Enc28j60Receive
4451                     	xdef	_Enc28j60Init
4452                     	xref	_SpiReadChunk
4453                     	xref	_SpiReadByte
4454                     	xref	_SpiWriteChunk
4455                     	xref	_SpiWriteByte
4475                     	xref	c_lgadc
4476                     	end
